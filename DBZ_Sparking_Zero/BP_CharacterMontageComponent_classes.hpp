#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterMontageComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "Engine_structs.hpp"
#include "EAnimEventType_structs.hpp"
#include "ECharacterState_structs.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterMontageComponent.BP_CharacterMontageComponent_C
// 0x0720 (0x0C20 - 0x0500)
class UBP_CharacterMontageComponent_C final : public UKoratCharacterMontageComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACharacter*                             Character;                                         // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           SSCharacter;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UKoratCharacterSubActionStateAnimInstance* KoratCharacterSubActionStateAnimInstance;          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurnMontage;                                       // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ECharacterState                               PreState;                                          // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterState                               CurrentState;                                      // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A[0x6];                                      // 0x052A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratRequestAnimData>          RequestAnimData;                                   // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratRequestAnimData>          PrecededInputRequestAnimData;                      // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratGuardReactionDataList>    GuardReactionList;                                 // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratDamage>                   ReceivedDamageList;                                // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsTurn;                                            // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlastStart;                                      // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharge;                                          // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChargeStart;                                     // 0x0573(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChargeEndTurn;                                   // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurnInaction;                                    // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoop;                                            // 0x0576(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetHoming;                                       // 0x0577(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHomingable;                                      // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateTurnLookAtRotation;                        // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGuardDown;                                       // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecial2Down;                                    // 0x057B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlastHit;                                        // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlastStop;                                       // 0x057D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChargeDown;                                      // 0x057E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurnStart;                                       // 0x057F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IsActionCancelEnable;                              // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRushStart;                                       // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsParryEnable;                                     // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSonicSwayEnable;                                 // 0x0586(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_587[0x1];                                      // 0x0587(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShotCount;                                         // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RushCount;                                         // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RushType;                                          // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReactionCount;                                     // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeStartWait;                                   // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDirection                               GuardDirection;                                    // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDirection                               CheckingGuardDirection;                            // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LoopTime;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     LocomotionComponent;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CharacterRot;                                      // 0x05B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LookAtRotation;                                    // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        LockOnTurnSpeed;                                   // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearMode;                                        // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaSeconds;                                      // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TurnLookAtRotation;                                // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FString>                         EventList;                                         // 0x0618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AddedEventList;                                    // 0x0628(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EAnimEventType                                ExecuteEventPriorityOfMaxType;                     // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExecuteEventPriorityOfMove;                        // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExecuteEventPriorityOfMovingAction;                // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExecuteEventPriorityOfAction;                      // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExecuteEventPriorityOfReaction;                    // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExecuteEventOfMove;                                // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ExecuteEventOfMovingAction;                        // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ExecuteEventOfAction;                              // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ExecuteEventPriorityOfMax;                         // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratGuardReactionDataList            ExecuteEventGuardReaction;                         // 0x0684(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CheckingEvent;                                     // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CheckingEventPriority;                             // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K_o__n___B_;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckingSoonStart;                                 // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ___________n___B_;                                 // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeStartWaitMax;                                // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RushStartWait;                                     // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KidanStartWait;                                    // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         SmashAnim;                                         // 0x06D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SmashStartWaitMax;                                 // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmashLevel;                                        // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         RushDerivativeAnim;                                // 0x06EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         RequestTransitionAnim;                             // 0x06F4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReceivedDamageTurn;                              // 0x06FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReceivedDamageRotation;                            // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FKoratDamage                           ExecuteEventOfReaction;                            // 0x0718(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrecededInputEventOfAction;                        // 0x0728(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	EKoratActionCategoryType                      PreCategory;                                       // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratActionCategoryType                      CurrentCategory;                                   // 0x0739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKidanDown;                                       // 0x073A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73B[0x5];                                      // 0x073B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdateEvent;                                       // 0x0740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsRollingHammerPreviousUseLeft;                    // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevengeCounterIndex;                               // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSLevelSequenceActor*                  DemoSequenceActor;                                 // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratSequencePlayInfo>         SequencePlayInfo;                                  // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKoratReplaceAnimationDataList         PlayActionDataList;                                // 0x0770(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingDemo;                                     // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             InterruptedEvent;                                  // 0x0780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        SuperZCounterLoopEndTime;                          // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugShortcutSuperZCounter;                        // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x3];                                      // 0x0799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratReplaceAnimationDataList         TransitionActionAnim;                              // 0x079C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoming;                                          // 0x07A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A5[0x3];                                      // 0x07A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovingEndTime;                                     // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovingTimer;                                       // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x07B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B9[0x7];                                      // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HomingMaxAngle;                                    // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveOutOfHomingAngleRange;                       // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttackHoming;                                    // 0x07C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CA[0x6];                                      // 0x07CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratAttackHomingData                 AttackHoming;                                      // 0x07D0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsBlownAttack;                                     // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_829[0x7];                                      // 0x0829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratVanishingMove>            VanishingMove;                                     // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SuccessDistance;                                   // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugShortcutUltimateBlast;                        // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugShortcutRevengeCounter;                       // 0x0849(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugShortcutRevengeDash;                          // 0x084A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84B[0x5];                                      // 0x084B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ____n__B_;                                         // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeSinceGuardKeyEntry;                            // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetVanishingAppearData;                          // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VanishingAppearPosition;                           // 0x0868(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               VanishingAppearDirection;                          // 0x0880(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FKoratActionDataList                   VanishingAppearAction;                             // 0x0898(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsImpact;                                          // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __________n______;                                 // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpeedImpact;                                     // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleasePlayAction;                               // 0x08B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2[0x6];                                      // 0x08B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   TurnAction;                                        // 0x08C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSparkingCharge;                                  // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TransitionFlowComponent_C*          TransitionFlowComponent;                           // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CancelEvent;                                       // 0x08D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             RemoveEvent;                                       // 0x08E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsSparkingChargeStart;                             // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRevengeCounterEnable;                            // 0x08F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FA[0x6];                                      // 0x08FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratReplaceAnimationDataList> RevengeCounterAction;                              // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        _______________n______;                            // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Z_____n__B_;                                       // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ______n__B_;                                       // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ______g__Y______;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         ____nSZCn__tn______0;                              // 0x0930(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         ____nRCn__tn_____;                                 // 0x0938(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         ____nRCn____n_____;                                // 0x0940(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratReplaceAnimationDataList         ____nRCnRCtn_____;                                 // 0x0948(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPossibleVanishingRevenge;                        // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_951[0x7];                                      // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _________Wn__B_;                                   // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnimNotifyPossibleVanishingRevenge;              // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Sub_RequestMontage_C*              ABPSubRequestMontage;                              // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNearModeStart;                                   // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveTargetPos;                                     // 0x0978(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratAttackHomingData                 AttackMoveTarget;                                  // 0x0990(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsSetAttackMoveTarget;                             // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttackMoveTarget;                                // 0x09E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHomingMoveTarget;                                // 0x09EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EB[0x5];                                      // 0x09EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveTargetEndTime;                                 // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveTargetTimer;                                   // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTargetOffset;                                  // 0x0A00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTargetOffsetDistance;                          // 0x0A18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveTargetMaxSpeed;                                // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestAnimDataTurn;                             // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CategoryTime;                                      // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VanishingDisappearTime;                            // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VanishingAppearTime;                               // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVanishing;                                       // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVanishingAppearWait;                             // 0x0A59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleportationCounterWait;                        // 0x0A5A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetVanishingBlankTime;                           // 0x0A5B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetTeleportationCounterWait;                  // 0x0A5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetRevengeDashStopRequest;                       // 0x0A5D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTiltTurn;                                        // 0x0A5E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugEasyInputTiming;                              // 0x0A5F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __e_Bn____B_;                                      // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugEasyInputTeleportionCounter;                  // 0x0A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A69[0x7];                                      // 0x0A69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugEasyInputTeleportionCounterTime;              // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJudgedOnInputSuperZCounterPressed;               // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x3];                                      // 0x0A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionTiltParameter              TiltParameter;                                     // 0x0A7C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          DebugRushCameraOn;                                 // 0x0A8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A8D[0x3];                                      // 0x0A8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               HomingRotation;                                    // 0x0A90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBlowing;                                         // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA9[0x3];                                      // 0x0AA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugStep;                                         // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGuardSuccess;                                    // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratSuperZCounterTakeType                   SuperZCounterTakeType;                             // 0x0AB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB2[0x6];                                      // 0x0AB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitBoneLocationStart;                              // 0x0AB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitBoneLocationEnd;                                // 0x0AD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetDamageReaction;                            // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE9[0x3];                                      // 0x0AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   VanishingCorrectionAction;                         // 0x0AEC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF4[0x4];                                      // 0x0AF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USSActionCameraDataAsset*               VanishingStartActionCamera;                        // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               VanishingStartOpponentActionCamera;                // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               VanishingEndActionCamera;                          // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               VanishingEndOpponentActionCamera;                  // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKeepDown;                                        // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x3];                                      // 0x0B19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratReplaceAnimationDataList         BlastSkillPressed;                                 // 0x0B1C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B24[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKoratActionAttackType>                HitAttackTypeInAction;                             // 0x0B28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<ESituationOfOpponentWhenAttackHit>     OpponentHitSituationInAction;                      // 0x0B38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugBlastImpact;                                  // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugPlayAddtiveReactionWait;                      // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratAddtiveReactionParameter> DebugPlayHitAreaList;                              // 0x0B58(0x0010)(Edit, BlueprintVisible)
	bool                                          DebugArmor;                                        // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNotTurning;                                      // 0x0B69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 __Mn__BnMovement_Mode;                             // 0x0B6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6B[0x5];                                      // 0x0B6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           HitAttackActionInAction;                           // 0x0B70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AcceptingAscertain;                                // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B81[0x7];                                      // 0x0B81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AcceptingSonicSwayRemainTime;                      // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrawVanishingEffect;                             // 0x0B90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugAlwaysSonicSway;                              // 0x0B91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReachedBurstSmashMove;                           // 0x0B92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratFreeTimelineType                        Time_Line_Type;                                    // 0x0B93(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Blast2Slot2Action;                                 // 0x0B94(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9C[0x4];                                      // 0x0B9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PursuitPossibleTime;                               // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<struct FKoratActionDataList>             CancelVanising;                                    // 0x0BA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsVanishingCancel;                                 // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   SupportMLSAction;                                  // 0x0BFC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Z_____n______Minus_;                               // 0x0C08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ______n______Minus_;                               // 0x0C10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ______n____h_;                                     // 0x0C18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActionTurn();
	void Add_Debug_Draw_Blow_Param(const struct FVector& InLocation, int32 InDrawType, double InHitTime, double InDrawDuration);
	void AddCharacterMovementInput(const struct FVector& WorldDirection, double Value);
	void AddChildDashRoute(class AActor** DashRouteActor);
	void AddEventList(const class FString& EventName);
	void AddRequestAnim(EKoratAnimType AnimType, const struct FKoratReplaceAnimationDataList& ReplaceAnimation, int32 AnimIndex, EKoratPlayableAnimType PlayableAnimType, bool SoonStart, bool Turn);
	void AnimNotifyAttackCollision(bool Enable);
	void AnimNotifyAttackCollisionTick();
	void AnimNotifyAttackHoming(const struct FKoratAttackHomingDataList& InAttackHoming);
	void AnimNotifyAttackMoveTarget(const struct FKoratAttackHomingDataList& InAttackHoming);
	void AnimNotifyInputParam(bool Enable);
	void AnimNotifyParry(bool Enable);
	void AnimNotifyPossibleVanishingRevenge(bool Enable);
	void AnimNotifyResetArmorLevel(class UObject* SourceObject);
	void AnimNotifyRevengeCounter(const bool Enable, const TArray<struct FKoratReplaceAnimationDataList>& InAnimDataList);
	void AnimNotifySetActionCancel(bool Enable);
	void AnimNotifySetArmorLevel(const struct FKoratArmorLevelDataList& ArmorLevel, class UObject* SourceObject);
	void AnimNotifySonicSway(bool Enable);
	void AnimNotifyVanishing(double InDisappearTime, double InAppearTime, double InSuccessDistance, bool IsDrawVanishingEffect_0, const TArray<struct FKoratVanishingMove>& InVanishingMove, class USSActionCameraDataAsset* InStartActionCamera, class USSActionCameraDataAsset* InStartOpponentActionCamera, class USSActionCameraDataAsset* InEndActionCamera, class USSActionCameraDataAsset* InEndOpponentActionCamera, bool IsOneshotDeadly);
	void ApplyAddtiveReaction(const struct FKoratAddtiveReactionParameter& InAddtiveReactionParameter);
	void AutoSetCharacterMovementModeToIdle(bool InIsValidSetWalking, bool* IsSet, EMovementMode* SetMovementMode);
	void BeginVanishing(double InDisappearTime, double InAppearTime);
	void CancelEvent__DelegateSignature();
	void CancelPrecededInputRequest(TArray<struct FKoratReplaceAnimationDataList>& IgnoreAnimationDataList);
	void ChangeCurrentState(ECharacterState InCurrentState, EKoratPlayableAnimType InPlayableAnimType, const struct FKoratActionDataList& InTransitAction, bool InIsCanNotFlyFall);
	void ChangeDirectionOfActionStart(const struct FKoratActionDataList& InAction);
	void ChangeSection(EKoratAnimType InAnimType, class FName SectionName);
	void CheckCancelEvent(TArray<class FString>& IgnouEventList);
	void CheckLocomotionEvent();
	void CheckRequestLocomotionReaction(const struct FKoratActionDataList& InAction, bool InFrontHit, bool* IsRequestReaction);
	void Clear_Time_Since_Pressed_Key_All();
	void ClearActionIdealPosition();
	void ClearActionTranslation();
	void ClearAttackHitInAction();
	void ClearCharacterRotationPitch(bool InTeleportPhysics, bool* IsSuccessfully);
	void ClearEventList();
	void ClearTimeSinceKeyInAction();
	void ClearTimeSincePressedKeyAtInterval();
	void CommonEvent();
	void CopyPropertyAtDamageCostumeChange(const class UKoratCharacterMontageComponent* InSrcMontageComp);
	void DebugApartOpponent(class ABP_Character_C* TargetBPCharacter);
	void DebugBringOpponent(class ABP_Character_C* TargetBPCharacter);
	void DebugPlayAddtiveReaction();
	void DebugShortcut();
	void DebugTransform();
	void EndCheckReleasePlayAction(const struct FKoratReplaceAnimationDataList& InPlayAction, EKoratAnimType InAnimType);
	void EndDemo();
	void EndRequestAllAnim();
	void ExecuteUbergraph_BP_CharacterMontageComponent(int32 EntryPoint);
	float GetBattleKeyInterval(EKoratBattleKey InBattleKey);
	void GetBPCharacterLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent_0);
	void GetBPCharacterMontageComponent(class UBP_CharacterMontageComponent_C** Component);
	void GetCameraVirtualTargetLocation(struct FVector* Location);
	void GetHitBackData(struct FKoratHitBackMovementData* HitBackData);
	void GetKnockBackVector(struct FVector* KnockBackVector);
	void GetLocomotionComponent(class UActorComponent** ActorComponent);
	void GetLocomotionSplineComponent(class UActorComponent** ActorComponent);
	void GetMontageComponent(class UActorComponent** ActorComponent);
	void GetReplaceSubInstance(class FName SubInstanceName, class FName* SubInstanceTagName, class UClass** SubInstanceClass);
	void GetRequestAnim(struct FFRequestAnimData* RequestAnimData_0);
	void GetRequestAnimData(struct FKoratRequestAnimData* RequestAnimData_0);
	void GetSSCharacterValidCheck(class ASSCharacter** SSCharacter_0);
	void GetSuperZCounterTakeAnimDataList(struct FKoratReplaceAnimationDataList* TakeAnim);
	void GetTransitionFlowComponent(class UBP_TransitionFlowComponent_C** TransitionFlowComponent_0);
	void GetUseCharacterRotationPitchDetail(bool* UsePitchLimit, bool* UsePitchInterp);
	void GetVanishingMoveIndex(int32* Index_0);
	void GetVanishingMovePosition(int32 InIndex, double InBlankRemainingTime, const struct FVector& InMoveOffset, struct FVector* Position, struct FRotator* Rotator);
	void GetVirtualTargetLocation(struct FVector* Location);
	void InputBattleKeyJustPressed(EBattleKey BattleKey);
	void InputBattleKeyJustReleased(EBattleKey BattleKey);
	void InputFreeCameraVector(const struct FVector2D& InputVector);
	void InputKoratBattleKeyDown(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyUp(EKoratBattleKey BattleKey);
	void InterruptedDashAttackEvent();
	void InterruptedEvent__DelegateSignature();
	void InterruptedUltimateBlastEvent();
	void InterruptedWaitMontageEndEvent();
	bool Is_Possible_Rush_High_Speed_Move_Revenge_Timing();
	void IsActionCanCanceled(bool* IsEnable);
	bool IsAttackHit(EKoratActionAttackType InAttackType);
	bool IsAttackHitAtAction(const struct FKoratActionDataList& InAction, TArray<ESituationOfOpponentWhenAttackHit>& InOpponentHitSituation);
	bool IsAttackHitAtAttackType(TArray<EKoratActionAttackType>& InAttackType, TArray<ESituationOfOpponentWhenAttackHit>& InOpponentHitSituation);
	void IsAttackSection(const struct FKoratActionDataList& InAction, const TSet<struct FKoratActionDataList>& InSearchActions, class ASSCharacter* InTargetCharacter, bool* IsAttackSection_0);
	void IsCharging(const EKoratAnimType InAnimType, bool* IsCharging_0, bool* IsNonChargeSection);
	bool IsDebugBlastImpactBeforeFiringEvent(class ASSCharacter* InCharacter, EKoratBlastSlotType InBlastSlotType);
	void IsEnableAction(bool* IsEnable);
	void IsGiantGuardReaction(bool* OutResult);
	void IsGuardSuccessByParameter(const struct FKoratCharacterCombativesParameter& InParameter, bool* OutIsGuardBreak, bool* OutIsAttackBreak, bool* OutIsImpossibleGuard, bool* Result);
	void IsPlayableDragonDash(bool* IsPlayable);
	void IsPlayablePursuit(EKoratPursuitType InPursuitType, bool* IsPlayable);
	void IsPlayingMontage(const struct FKoratReplaceAnimationDataList& InKoratReplaceAnimationDataList, int32 InIndex, const EKoratAnimType InAnimType, bool* IsPlaying, class UAnimMontage** PlayingMontage);
	bool IsPossibleAscertain();
	bool IsPossibleFastAvoidance();
	bool IsPossibleRushHighSpeedMoveRevenge();
	bool IsPossibleRushHighSpeedMoveRevengeAction();
	bool IsPossibleSonicSway();
	bool IsPossibleSuperCounter();
	bool IsPossibleSuperZCounter();
	bool IsPossibleZCounter();
	void IsRequestDamage(bool* IsRequestDamage_0);
	void IsStartBlastImpact(bool* IsStart);
	void IsStartCrashImpact(bool* IsStart);
	void IsStartSpeedImpact(bool* IsStart);
	bool IsSuccessSuperCounter();
	void IsUpdateEvent(bool* IsUpdate);
	void JumpSectionActionMontage(const EKoratAnimType InAnimType, const class FName InName);
	void JumpSectionOfPlayAction(class FName InSectionName);
	void MoveAvoidWall(const struct FVector& InBasePosition, double InHalfHeight, double InRadius, bool* IsMovable, struct FVector* AvoidPosition);
	void MoveToSuperZCounterCatchLocationAndRotation();
	void NotifyBeginAcceptingAscertain(double AcceptingSonicSwayDuration);
	void NotifyBeginAcceptingSuperZCounter(double AcceptingSonicSwayDuration);
	void NotifyEndAcceptingAscertain();
	void NotifyEndAcceptingSuperZCounter();
	void NotifyPlayMontageLength(double MontageLength);
	void NotifyStartRevengeCounter();
	void NotifyTickAcceptingAscertain(double FrameDeltaTime);
	void NotifyTickAcceptingSuperZCounter(double FrameDeltaTime);
	void OnActionReset();
	void OnBeginMontageLevelSequence(const struct FKoratActionDataList& InAction);
	void OnBlownAttack(bool IsBlownAttack_0);
	void OnCancelRush();
	void OnChangeSection(EKoratAnimType InAnimType, class FName SectionName);
	void OnCharacterGaveDamage(EKoratCharacterMovementTransition InMovementTransition, bool InHoming, bool InBlownAttack, EKoratActionAttackType InAttackType, ESituationOfOpponentWhenAttackHit InOpponentHitSituation, const struct FKoratActionDataList& InAttackAction);
	void OnCharacterReceivedDamage(const struct FKoratDamageReactionDataList& InDamageReactionDataList, bool InEndured, bool InIsGuardSuccess);
	void OnCharacterReceivedDamageByCombatives(const struct FKoratCharacterCombativesParameter& InCombativesParameter, bool InEndured, bool bInIsGuardSuccess);
	void OnDashAttack();
	void OnDebugBlastImpactStart();
	void OnDragonSmash();
	void OnEndMontageLevelSequence(const struct FKoratActionDataList& InAction);
	void OnEndRequestAllAnim();
	void OnFinishImpact();
	void OnHit(EKoratActionAttackType InAttackType, ESituationOfOpponentWhenAttackHit InOpponentHitSituation, const struct FKoratActionDataList& InAttackAction);
	void OnHitObjectCollisionOccured(const struct FKoratActionDataList& InAction);
	void OnHitObjectStopped(const struct FKoratActionDataList& InAction);
	void OnInputKidan();
	void OnInterruptedDashAttack();
	void OnInterruptedDragonDashAttack();
	void OnInterruptedDragonSmash();
	void OnInterruptedUltimateBlast();
	void OnInterruptedWaitMontageEnd();
	void OnMoveReset();
	void OnPlayAnim();
	void OnPlayDragonDash();
	void OnPlayDragonHoming();
	void OnPlayZBurstDash();
	void OnReachedBurstSmashMove();
	void OnRemoveRush();
	void OnStartImpact();
	void OnSuccessAscertain();
	void OnSuccessFastAvoidance();
	void OnSuccessSuperCounter();
	void OnSuccessSuperZCounter(const EKoratSuperZCounterTakeType InSuperZCounterTakeType);
	void OnSuccessZCounter();
	void OnSuperZCounterShakeOff();
	void OnSuperZCounterSmash();
	void OnTransitionAction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionAscertain(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionBaseReaction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionBlast(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionBlown();
	void OnTransitionCannon(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionCannonAttack1(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionCannonAttack2(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionCannonAttack3(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionCannonSmash(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionCharge(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionDashAttack(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionDemo(const struct FKoratActionDataList& InActionDataList, const class ULevelSequence* InLevelSequence, const bool bInIsSoonTurn, const bool bInPlayImmediately);
	void OnTransitionDragonDash();
	void OnTransitionDragonDashAttack(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionDragonHoming();
	void OnTransitionDragonSmash(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionFastAvoidance(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionGrandSlash(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionGuard(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionGuardClear(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionHeavyCrush1(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionHeavyCrush2(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionHeavyCrush3(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionHeavyFinish(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionJudgment(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionKidan(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionLiftStrike(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionLocomotion();
	void OnTransitionMidAirKick(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionNoContinuation(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionParry(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionParrySmash(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionPlayAction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRevengeCounter(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRollingHammer(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRollingHurricane1(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRollingHurricane2(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRollingPress1(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRollingPress2(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRush(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRushDerivative(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRushHighSpeedMove(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionRushStep(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionShortDash();
	void OnTransitionStepAvoidance();
	void OnTransitionStepIn();
	void OnTransitionSuperZCounterCatch(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionSuperZCounterPosture(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionSuperZCounterShakeOff(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionSuperZCounterSmash(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionTurn();
	void OnTransitionUltimateBlast(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionVanishingAssault(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionVanishingAttack(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnTransitionWaitMontageEnd();
	void OnTransitionZCounter(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void OnUpdateAscertain();
	void OnUpdateBlastEvent();
	void OnUpdateBlown();
	void OnUpdateCannonAttack1();
	void OnUpdateCannonAttack2();
	void OnUpdateCannonAttack3();
	void OnUpdateCannonEvent();
	void OnUpdateCannonSmash();
	void OnUpdateDemo();
	void OnUpdateDragonDash();
	void OnUpdateDragonDashAttack();
	void OnUpdateDragonHoming();
	void OnUpdateFastAvoidance();
	void OnUpdateGrandSlashEvent();
	void OnUpdateHeavyCrush1();
	void OnUpdateHeavyCrush2();
	void OnUpdateHeavyCrush3();
	void OnUpdateHeavyFinishEvent();
	void OnUpdateJudgment();
	void OnUpdateKidanEvent();
	void OnUpdateLiftStrikeEvent();
	void OnUpdateLocomotion();
	void OnUpdateMidAirKick();
	void OnUpdateNoContinuation();
	void OnUpdateParry();
	void OnUpdateParrySmash();
	void OnUpdateRevengeCounter();
	void OnUpdateRollingHammerEvent();
	void OnUpdateRollingHurricane1();
	void OnUpdateRollingHurricane2();
	void OnUpdateRollingPress1();
	void OnUpdateRollingPress2();
	void OnUpdateRushDerivativeEvent();
	void OnUpdateRushEvent();
	void OnUpdateRushHighSpeedMove();
	void OnUpdateRushStep();
	void OnUpdateShortDash();
	void OnUpdateStepAvoidance();
	void OnUpdateStepIn();
	void OnUpdateSuperZCounterCatch();
	void OnUpdateSuperZCounterPosture();
	void OnUpdateTurn();
	void OnUpdateUltimateBlast();
	void OnUpdateVanishingAssault();
	void OnUpdateVanishingAttack();
	void OnUpdateWaitMontageEnd();
	void OnUpdateZCounter();
	void OnVanishingFinish();
	void OnVanishingPlayEffect();
	void OnVanishingTransport(bool RunningForceFinichVanishing);
	void OnVanishingTransportForTakaturns(const TArray<struct FKoratVanishingMove>& InVanishingMove, const struct FVector& InMoveOffset);
	void PlayAction(const struct FKoratActionDataList& InAction, bool* IsSuccess);
	double PlayActionMontage(const struct FKoratActionDataList& Action, int32 AnimIndex, bool AnimTurn, class FName TurningSection);
	void PlayKnockBack(const struct FKoratHitBackMovementData& InHitBackData);
	void PlayRequestAnimAction();
	void ReceiveBeginPlay();
	void ReceivedDamage();
	void ReceiveTick(float DeltaSeconds_0);
	void ReleasePlayAction();
	void RemoveEvent__DelegateSignature();
	void ResetActionFlag();
	void ResetMove();
	void ResetTimeSinceKeyInSection();
	void ReturnToInGameFromDemo();
	void RotateToTarget(bool RotateYaw, bool RotatePitch, bool* IsTurnEnd);
	void RunActionEvent();
	void RunMoveEvent();
	void RunMovingActionEvent();
	void RunReactionEvent();
	void SetActionCancel(bool Enable);
	void SetActionIdealPosition(class UKoratActionIdealPositionDataAsset* InDataAsset, double InDuration);
	void SetActionStandby(bool Enable, bool InResetHoldKey);
	void SetActionTranslation(class UKoratActionTranslationDataAsset* InDataAsset, double InDuration);
	void SetAsyncTransitionAction(const struct FKoratReplaceAnimationDataList& InTransitionAnimationDataList, int32 InNextRushType);
	void SetCharacterMovementMode(EMovementMode InMovementMode);
	void SetCharacterRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool* IsSuccessfully);
	void SetChargeEnd();
	void SetEvent(int32 Priority, EAnimEventType InType, const class FString& Event);
	void SetFaceToFace();
	void SetHitBoneLocation(const struct FVector& InStartBoneLocation, const struct FVector& InEndBoneLocation);
	void SetLookAtRotation();
	void SetTargetTeleportationCounterWait();
	void SetTeleportationCounterWait();
	void SetTransitionRevengeCounter(bool InIsNearMode);
	void SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch);
	void SetUseCharacterRotationPitchDetail(bool InUsePitchLimit, bool InUsePitchInterp, bool* UsePitchLimit, bool* UsePitchInterp);
	void SetVirtualTarget(class AActor* InActor, const struct FVector& InLocation, bool InUseBattleTargetPawn);
	void StartVanishing(double InDisappearTime, double InAppearTime, const struct FVector& InAppearPosition, const struct FRotator& InAppearRotator, const struct FKoratActionDataList& InAppearAction, bool InTraining, bool InDramaticWarp);
	void StartVanishing2();
	void StopActionByChangeCharacter();
	void StopActionMontage();
	void StopAllAction();
	void StopKnockBack();
	void StopPlayAction();
	void TraceCharaMovableCheck(const struct FVector& InBasePosition, double InHalfHeight, EKoratDirection InShiftDirection, double InShiftDistance, const struct FVector& InMoveDirection, double InRadius, bool* IsHit, struct FVector* ShiftPosition);
	void Transition_Super_ZCounter_Shake_Off(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionAction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionBaseReaction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionBlast(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionCharge(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionDashAttack(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionDemo(const struct FKoratActionDataList& InActionDataList, class ULevelSequence* InLevelSequence, bool InIsSoonTurn, bool InIsPlayImmediately);
	void TransitionDragonDashAttack(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionFastAvoidance(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionFlow(bool CheckNewFlow);
	void TransitionGuard(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionGuardClear(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionJudgment(const struct FKoratReplaceAnimationDataList& InAnimDataList, bool InIsStartTurn, bool InIsCharge);
	void TransitionKidan(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionLatent(const struct FKoratReplaceAnimationDataList& InAnimDataList, EKoratAnimType InAnimType, int32 InAnimIndex, bool InIsStartTurn, bool InIsCharge, bool InIsAnimTurn, bool InIsSoonStart, bool InIsPlayImmediately);
	void TransitionParry(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionPlayAction(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionRevengeCounter(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionRollingHammer(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionRush(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionRushDerivative(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionRushHighSpeedMove(const struct FKoratReplaceAnimationDataList& InAnimDataList, bool InIsStartTurn, bool InIsCharge);
	void TransitionSuperZCounterCatch(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionSuperZCounterPosture(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionSuperZCounterTake(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionTurn();
	void TransitionUltimateBlast(const struct FKoratReplaceAnimationDataList& InAnimDataList);
	void TransitionWaitMontageEnd();
	void UpdateActionTurn();
	void UpdateAscertainEvent();
	void UpdateBlastEvent();
	void UpdateBlownEvent();
	void UpdateCannonAttack1Event();
	void UpdateCannonAttack2Event();
	void UpdateCannonAttack3Event();
	void UpdateCannonEvent();
	void UpdateCannonSmashEvent();
	void UpdateCombo();
	void UpdateDashAttackEvent();
	void UpdateDemoEvent();
	void UpdateDragonDashAttackEvent();
	void UpdateDragonDashEvent();
	void UpdateDragonDashRevengeMoveEvent();
	void UpdateDragonHomingEvent();
	void UpdateDragonSmashEvent();
	void UpdateEvent__DelegateSignature();
	void UpdateFastAvoidanceEvent();
	void UpdateGrandSlashEvent();
	void UpdateHeavyCrush1Event();
	void UpdateHeavyCrush2Event();
	void UpdateHeavyCrush3Event();
	void UpdateHoming();
	void UpdateJudgmentEvent(bool InIsCancelEvent);
	void UpdateKeyInputTime();
	void UpdateKidanEvent();
	void UpdateLiftStrikeEvent();
	void UpdateLocomotionEvent();
	void UpdateMidAirKickEvent();
	void UpdateNoContinuationEvent();
	void UpdateParryEvent();
	void UpdateParrySmashEvent();
	void UpdatePlayActionEvent();
	const TArray<struct FKoratReplaceAnimationDataList> UpdatePlayingAnimDataListArray();
	void UpdateRevengeCounterEvent();
	void UpdateRollingHammerEvent();
	void UpdateRollingHurricane1Event();
	void UpdateRollingHurricane2Event();
	void UpdateRollingPress1Event();
	void UpdateRollingPress2Event();
	void UpdateRotationParameter();
	void UpdateRushDerivativeEvent();
	void UpdateRushEvent(bool InIsCancelEvent);
	void UpdateRushHighSpeedMoveEvent();
	void UpdateRushStepEvent();
	void UpdateShortDashEvent();
	void UpdateStepAvoidanceEvent();
	void UpdateStepInEvent();
	void UpdateSuperZCounterCatchEvent();
	void UpdateSuperZCounterPostureEvent();
	void UpdateSuperZCounterShakeOffEvent();
	void UpdateSuperZCounterSmashEvent();
	void UpdateSuperZCounterTakeEvent();
	void UpdateTeleportationCounterWait();
	void UpdateTiltTurn();
	void UpdateTurnEvent();
	void UpdateUltimateBlastEvent();
	void UpdateVanishingAssaultEvent();
	void UpdateVanishingAttackEvent();
	void UpdateWaitMontageEndEvent();
	void UpdateZCounterEvent();
	void Vanishing_Move_Position_Test(struct FVector* Position, struct FRotator* Rotator);
	void VanishingMoveDebug();
	void VanishingTransport(const struct FVector& InMoveOffset);
	void Z_______k____________();
	void ________k____________();
	void ______k____________();

	void GetBattleKeyHoldTime(const EKoratBattleKey InBattleKey, double* HoldTime) const;
	void GetCharacterMovementMode(EMovementMode* MovementMode) const;
	void GetCharacterRotation(struct FRotator* Rotation) const;
	const TArray<struct FKoratReplaceAnimationDataList> GetPlayingAnimDataListArray() const;
	void GetReceivedDamageRotation(bool IsFrontHit, struct FRotator* ReceivedDamageRotation_0) const;
	void GetUseCharacterRotationPitch(bool* UsePitch) const;
	bool IsActionCanStandby() const;
	void IsEndBurstSmashMove(bool* IsEndMove) const;
	bool IsFindEvent(const class FString& InEventName) const;
	void IsPlayableAction(bool* IsPlayable) const;
	void IsPlayableMove(bool* IsPlayable) const;
	void IsPlayableReaction(bool* IsPlayable) const;
	void IsPossibleRevengeCounter(bool* IsEnable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterMontageComponent_C">();
	}
	static class UBP_CharacterMontageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterMontageComponent_C>();
	}
};
static_assert(alignof(UBP_CharacterMontageComponent_C) == 0x000008, "Wrong alignment on UBP_CharacterMontageComponent_C");
static_assert(sizeof(UBP_CharacterMontageComponent_C) == 0x000C20, "Wrong size on UBP_CharacterMontageComponent_C");
static_assert(offsetof(UBP_CharacterMontageComponent_C, UberGraphFrame) == 0x000500, "Member 'UBP_CharacterMontageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Character) == 0x000508, "Member 'UBP_CharacterMontageComponent_C::Character' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SSCharacter) == 0x000510, "Member 'UBP_CharacterMontageComponent_C::SSCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, KoratCharacterSubActionStateAnimInstance) == 0x000518, "Member 'UBP_CharacterMontageComponent_C::KoratCharacterSubActionStateAnimInstance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TurnMontage) == 0x000520, "Member 'UBP_CharacterMontageComponent_C::TurnMontage' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PreState) == 0x000528, "Member 'UBP_CharacterMontageComponent_C::PreState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CurrentState) == 0x000529, "Member 'UBP_CharacterMontageComponent_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RequestAnimData) == 0x000530, "Member 'UBP_CharacterMontageComponent_C::RequestAnimData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PrecededInputRequestAnimData) == 0x000540, "Member 'UBP_CharacterMontageComponent_C::PrecededInputRequestAnimData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, GuardReactionList) == 0x000550, "Member 'UBP_CharacterMontageComponent_C::GuardReactionList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ReceivedDamageList) == 0x000560, "Member 'UBP_CharacterMontageComponent_C::ReceivedDamageList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTurn) == 0x000570, "Member 'UBP_CharacterMontageComponent_C::IsTurn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsBlastStart) == 0x000571, "Member 'UBP_CharacterMontageComponent_C::IsBlastStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsCharge) == 0x000572, "Member 'UBP_CharacterMontageComponent_C::IsCharge' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsChargeStart) == 0x000573, "Member 'UBP_CharacterMontageComponent_C::IsChargeStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsChargeEndTurn) == 0x000574, "Member 'UBP_CharacterMontageComponent_C::IsChargeEndTurn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTurnInaction) == 0x000575, "Member 'UBP_CharacterMontageComponent_C::IsTurnInaction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsLoop) == 0x000576, "Member 'UBP_CharacterMontageComponent_C::IsLoop' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSetHoming) == 0x000577, "Member 'UBP_CharacterMontageComponent_C::IsSetHoming' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsHomingable) == 0x000578, "Member 'UBP_CharacterMontageComponent_C::IsHomingable' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsUpdateTurnLookAtRotation) == 0x000579, "Member 'UBP_CharacterMontageComponent_C::IsUpdateTurnLookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsGuardDown) == 0x00057A, "Member 'UBP_CharacterMontageComponent_C::IsGuardDown' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSpecial2Down) == 0x00057B, "Member 'UBP_CharacterMontageComponent_C::IsSpecial2Down' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsBlastHit) == 0x00057C, "Member 'UBP_CharacterMontageComponent_C::IsBlastHit' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsBlastStop) == 0x00057D, "Member 'UBP_CharacterMontageComponent_C::IsBlastStop' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsChargeDown) == 0x00057E, "Member 'UBP_CharacterMontageComponent_C::IsChargeDown' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTurnStart) == 0x00057F, "Member 'UBP_CharacterMontageComponent_C::IsTurnStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsActionCancelEnable) == 0x000580, "Member 'UBP_CharacterMontageComponent_C::IsActionCancelEnable' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsRushStart) == 0x000584, "Member 'UBP_CharacterMontageComponent_C::IsRushStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsParryEnable) == 0x000585, "Member 'UBP_CharacterMontageComponent_C::IsParryEnable' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSonicSwayEnable) == 0x000586, "Member 'UBP_CharacterMontageComponent_C::IsSonicSwayEnable' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ShotCount) == 0x000588, "Member 'UBP_CharacterMontageComponent_C::ShotCount' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RushCount) == 0x00058C, "Member 'UBP_CharacterMontageComponent_C::RushCount' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RushType) == 0x000590, "Member 'UBP_CharacterMontageComponent_C::RushType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ReactionCount) == 0x000594, "Member 'UBP_CharacterMontageComponent_C::ReactionCount' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ChargeStartWait) == 0x000598, "Member 'UBP_CharacterMontageComponent_C::ChargeStartWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, GuardDirection) == 0x0005A0, "Member 'UBP_CharacterMontageComponent_C::GuardDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CheckingGuardDirection) == 0x0005A1, "Member 'UBP_CharacterMontageComponent_C::CheckingGuardDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, LoopTime) == 0x0005A8, "Member 'UBP_CharacterMontageComponent_C::LoopTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, LocomotionComponent) == 0x0005B0, "Member 'UBP_CharacterMontageComponent_C::LocomotionComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CharacterRot) == 0x0005B8, "Member 'UBP_CharacterMontageComponent_C::CharacterRot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, LookAtRotation) == 0x0005D0, "Member 'UBP_CharacterMontageComponent_C::LookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, LockOnTurnSpeed) == 0x0005E8, "Member 'UBP_CharacterMontageComponent_C::LockOnTurnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsNearMode) == 0x0005F0, "Member 'UBP_CharacterMontageComponent_C::IsNearMode' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DeltaSeconds) == 0x0005F8, "Member 'UBP_CharacterMontageComponent_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TurnLookAtRotation) == 0x000600, "Member 'UBP_CharacterMontageComponent_C::TurnLookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, EventList) == 0x000618, "Member 'UBP_CharacterMontageComponent_C::EventList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, AddedEventList) == 0x000628, "Member 'UBP_CharacterMontageComponent_C::AddedEventList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfMaxType) == 0x000638, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfMaxType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfMove) == 0x00063C, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfMove' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfMovingAction) == 0x000640, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfMovingAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfAction) == 0x000644, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfReaction) == 0x000648, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfReaction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventOfMove) == 0x000650, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventOfMove' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventOfMovingAction) == 0x000660, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventOfMovingAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventOfAction) == 0x000670, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventOfAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventPriorityOfMax) == 0x000680, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventPriorityOfMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventGuardReaction) == 0x000684, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventGuardReaction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CheckingEvent) == 0x000690, "Member 'UBP_CharacterMontageComponent_C::CheckingEvent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CheckingEventPriority) == 0x0006A0, "Member 'UBP_CharacterMontageComponent_C::CheckingEventPriority' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, K_o__n___B_) == 0x0006A8, "Member 'UBP_CharacterMontageComponent_C::K_o__n___B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CheckingSoonStart) == 0x0006B0, "Member 'UBP_CharacterMontageComponent_C::CheckingSoonStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ___________n___B_) == 0x0006B8, "Member 'UBP_CharacterMontageComponent_C::___________n___B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ChargeStartWaitMax) == 0x0006C0, "Member 'UBP_CharacterMontageComponent_C::ChargeStartWaitMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RushStartWait) == 0x0006C8, "Member 'UBP_CharacterMontageComponent_C::RushStartWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, KidanStartWait) == 0x0006D0, "Member 'UBP_CharacterMontageComponent_C::KidanStartWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SmashAnim) == 0x0006D8, "Member 'UBP_CharacterMontageComponent_C::SmashAnim' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SmashStartWaitMax) == 0x0006E0, "Member 'UBP_CharacterMontageComponent_C::SmashStartWaitMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SmashLevel) == 0x0006E8, "Member 'UBP_CharacterMontageComponent_C::SmashLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RushDerivativeAnim) == 0x0006EC, "Member 'UBP_CharacterMontageComponent_C::RushDerivativeAnim' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RequestTransitionAnim) == 0x0006F4, "Member 'UBP_CharacterMontageComponent_C::RequestTransitionAnim' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsReceivedDamageTurn) == 0x0006FC, "Member 'UBP_CharacterMontageComponent_C::IsReceivedDamageTurn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ReceivedDamageRotation) == 0x000700, "Member 'UBP_CharacterMontageComponent_C::ReceivedDamageRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ExecuteEventOfReaction) == 0x000718, "Member 'UBP_CharacterMontageComponent_C::ExecuteEventOfReaction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PrecededInputEventOfAction) == 0x000728, "Member 'UBP_CharacterMontageComponent_C::PrecededInputEventOfAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PreCategory) == 0x000738, "Member 'UBP_CharacterMontageComponent_C::PreCategory' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CurrentCategory) == 0x000739, "Member 'UBP_CharacterMontageComponent_C::CurrentCategory' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsKidanDown) == 0x00073A, "Member 'UBP_CharacterMontageComponent_C::IsKidanDown' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, UpdateEvent) == 0x000740, "Member 'UBP_CharacterMontageComponent_C::UpdateEvent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsRollingHammerPreviousUseLeft) == 0x000750, "Member 'UBP_CharacterMontageComponent_C::IsRollingHammerPreviousUseLeft' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RevengeCounterIndex) == 0x000754, "Member 'UBP_CharacterMontageComponent_C::RevengeCounterIndex' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DemoSequenceActor) == 0x000758, "Member 'UBP_CharacterMontageComponent_C::DemoSequenceActor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SequencePlayInfo) == 0x000760, "Member 'UBP_CharacterMontageComponent_C::SequencePlayInfo' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PlayActionDataList) == 0x000770, "Member 'UBP_CharacterMontageComponent_C::PlayActionDataList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsPlayingDemo) == 0x000778, "Member 'UBP_CharacterMontageComponent_C::IsPlayingDemo' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, InterruptedEvent) == 0x000780, "Member 'UBP_CharacterMontageComponent_C::InterruptedEvent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SuperZCounterLoopEndTime) == 0x000790, "Member 'UBP_CharacterMontageComponent_C::SuperZCounterLoopEndTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugShortcutSuperZCounter) == 0x000798, "Member 'UBP_CharacterMontageComponent_C::DebugShortcutSuperZCounter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TransitionActionAnim) == 0x00079C, "Member 'UBP_CharacterMontageComponent_C::TransitionActionAnim' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsHoming) == 0x0007A4, "Member 'UBP_CharacterMontageComponent_C::IsHoming' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MovingEndTime) == 0x0007A8, "Member 'UBP_CharacterMontageComponent_C::MovingEndTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MovingTimer) == 0x0007B0, "Member 'UBP_CharacterMontageComponent_C::MovingTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsMoving) == 0x0007B8, "Member 'UBP_CharacterMontageComponent_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HomingMaxAngle) == 0x0007C0, "Member 'UBP_CharacterMontageComponent_C::HomingMaxAngle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsMoveOutOfHomingAngleRange) == 0x0007C8, "Member 'UBP_CharacterMontageComponent_C::IsMoveOutOfHomingAngleRange' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsAttackHoming) == 0x0007C9, "Member 'UBP_CharacterMontageComponent_C::IsAttackHoming' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, AttackHoming) == 0x0007D0, "Member 'UBP_CharacterMontageComponent_C::AttackHoming' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsBlownAttack) == 0x000828, "Member 'UBP_CharacterMontageComponent_C::IsBlownAttack' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingMove) == 0x000830, "Member 'UBP_CharacterMontageComponent_C::VanishingMove' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SuccessDistance) == 0x000840, "Member 'UBP_CharacterMontageComponent_C::SuccessDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugShortcutUltimateBlast) == 0x000848, "Member 'UBP_CharacterMontageComponent_C::DebugShortcutUltimateBlast' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugShortcutRevengeCounter) == 0x000849, "Member 'UBP_CharacterMontageComponent_C::DebugShortcutRevengeCounter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugShortcutRevengeDash) == 0x00084A, "Member 'UBP_CharacterMontageComponent_C::DebugShortcutRevengeDash' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ____n__B_) == 0x000850, "Member 'UBP_CharacterMontageComponent_C::____n__B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TimeSinceGuardKeyEntry) == 0x000858, "Member 'UBP_CharacterMontageComponent_C::TimeSinceGuardKeyEntry' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSetVanishingAppearData) == 0x000860, "Member 'UBP_CharacterMontageComponent_C::IsSetVanishingAppearData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingAppearPosition) == 0x000868, "Member 'UBP_CharacterMontageComponent_C::VanishingAppearPosition' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingAppearDirection) == 0x000880, "Member 'UBP_CharacterMontageComponent_C::VanishingAppearDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingAppearAction) == 0x000898, "Member 'UBP_CharacterMontageComponent_C::VanishingAppearAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsImpact) == 0x0008A0, "Member 'UBP_CharacterMontageComponent_C::IsImpact' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, __________n______) == 0x0008A8, "Member 'UBP_CharacterMontageComponent_C::__________n______' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSpeedImpact) == 0x0008B0, "Member 'UBP_CharacterMontageComponent_C::IsSpeedImpact' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsReleasePlayAction) == 0x0008B1, "Member 'UBP_CharacterMontageComponent_C::IsReleasePlayAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Speed) == 0x0008B8, "Member 'UBP_CharacterMontageComponent_C::Speed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TurnAction) == 0x0008C0, "Member 'UBP_CharacterMontageComponent_C::TurnAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSparkingCharge) == 0x0008C8, "Member 'UBP_CharacterMontageComponent_C::IsSparkingCharge' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TransitionFlowComponent) == 0x0008D0, "Member 'UBP_CharacterMontageComponent_C::TransitionFlowComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CancelEvent) == 0x0008D8, "Member 'UBP_CharacterMontageComponent_C::CancelEvent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RemoveEvent) == 0x0008E8, "Member 'UBP_CharacterMontageComponent_C::RemoveEvent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSparkingChargeStart) == 0x0008F8, "Member 'UBP_CharacterMontageComponent_C::IsSparkingChargeStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsRevengeCounterEnable) == 0x0008F9, "Member 'UBP_CharacterMontageComponent_C::IsRevengeCounterEnable' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, RevengeCounterAction) == 0x000900, "Member 'UBP_CharacterMontageComponent_C::RevengeCounterAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, _______________n______) == 0x000910, "Member 'UBP_CharacterMontageComponent_C::_______________n______' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Z_____n__B_) == 0x000918, "Member 'UBP_CharacterMontageComponent_C::Z_____n__B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ______n__B_) == 0x000920, "Member 'UBP_CharacterMontageComponent_C::______n__B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ______g__Y______) == 0x000928, "Member 'UBP_CharacterMontageComponent_C::______g__Y______' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ____nSZCn__tn______0) == 0x000930, "Member 'UBP_CharacterMontageComponent_C::____nSZCn__tn______0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ____nRCn__tn_____) == 0x000938, "Member 'UBP_CharacterMontageComponent_C::____nRCn__tn_____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ____nRCn____n_____) == 0x000940, "Member 'UBP_CharacterMontageComponent_C::____nRCn____n_____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ____nRCnRCtn_____) == 0x000948, "Member 'UBP_CharacterMontageComponent_C::____nRCnRCtn_____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsPossibleVanishingRevenge) == 0x000950, "Member 'UBP_CharacterMontageComponent_C::IsPossibleVanishingRevenge' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, _________Wn__B_) == 0x000958, "Member 'UBP_CharacterMontageComponent_C::_________Wn__B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsAnimNotifyPossibleVanishingRevenge) == 0x000960, "Member 'UBP_CharacterMontageComponent_C::IsAnimNotifyPossibleVanishingRevenge' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ABPSubRequestMontage) == 0x000968, "Member 'UBP_CharacterMontageComponent_C::ABPSubRequestMontage' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsNearModeStart) == 0x000970, "Member 'UBP_CharacterMontageComponent_C::IsNearModeStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetPos) == 0x000978, "Member 'UBP_CharacterMontageComponent_C::MoveTargetPos' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, AttackMoveTarget) == 0x000990, "Member 'UBP_CharacterMontageComponent_C::AttackMoveTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSetAttackMoveTarget) == 0x0009E8, "Member 'UBP_CharacterMontageComponent_C::IsSetAttackMoveTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsAttackMoveTarget) == 0x0009E9, "Member 'UBP_CharacterMontageComponent_C::IsAttackMoveTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsHomingMoveTarget) == 0x0009EA, "Member 'UBP_CharacterMontageComponent_C::IsHomingMoveTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetEndTime) == 0x0009F0, "Member 'UBP_CharacterMontageComponent_C::MoveTargetEndTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetTimer) == 0x0009F8, "Member 'UBP_CharacterMontageComponent_C::MoveTargetTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetOffset) == 0x000A00, "Member 'UBP_CharacterMontageComponent_C::MoveTargetOffset' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetOffsetDistance) == 0x000A18, "Member 'UBP_CharacterMontageComponent_C::MoveTargetOffsetDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, MoveTargetMaxSpeed) == 0x000A30, "Member 'UBP_CharacterMontageComponent_C::MoveTargetMaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsRequestAnimDataTurn) == 0x000A38, "Member 'UBP_CharacterMontageComponent_C::IsRequestAnimDataTurn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CategoryTime) == 0x000A40, "Member 'UBP_CharacterMontageComponent_C::CategoryTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingDisappearTime) == 0x000A48, "Member 'UBP_CharacterMontageComponent_C::VanishingDisappearTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingAppearTime) == 0x000A50, "Member 'UBP_CharacterMontageComponent_C::VanishingAppearTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsVanishing) == 0x000A58, "Member 'UBP_CharacterMontageComponent_C::IsVanishing' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsVanishingAppearWait) == 0x000A59, "Member 'UBP_CharacterMontageComponent_C::IsVanishingAppearWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTeleportationCounterWait) == 0x000A5A, "Member 'UBP_CharacterMontageComponent_C::IsTeleportationCounterWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSetVanishingBlankTime) == 0x000A5B, "Member 'UBP_CharacterMontageComponent_C::IsSetVanishingBlankTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTargetTeleportationCounterWait) == 0x000A5C, "Member 'UBP_CharacterMontageComponent_C::IsTargetTeleportationCounterWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsSetRevengeDashStopRequest) == 0x000A5D, "Member 'UBP_CharacterMontageComponent_C::IsSetRevengeDashStopRequest' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTiltTurn) == 0x000A5E, "Member 'UBP_CharacterMontageComponent_C::IsTiltTurn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugEasyInputTiming) == 0x000A5F, "Member 'UBP_CharacterMontageComponent_C::DebugEasyInputTiming' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, __e_Bn____B_) == 0x000A60, "Member 'UBP_CharacterMontageComponent_C::__e_Bn____B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugEasyInputTeleportionCounter) == 0x000A68, "Member 'UBP_CharacterMontageComponent_C::DebugEasyInputTeleportionCounter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugEasyInputTeleportionCounterTime) == 0x000A70, "Member 'UBP_CharacterMontageComponent_C::DebugEasyInputTeleportionCounterTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsJudgedOnInputSuperZCounterPressed) == 0x000A78, "Member 'UBP_CharacterMontageComponent_C::IsJudgedOnInputSuperZCounterPressed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, TiltParameter) == 0x000A7C, "Member 'UBP_CharacterMontageComponent_C::TiltParameter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugRushCameraOn) == 0x000A8C, "Member 'UBP_CharacterMontageComponent_C::DebugRushCameraOn' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HomingRotation) == 0x000A90, "Member 'UBP_CharacterMontageComponent_C::HomingRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsBlowing) == 0x000AA8, "Member 'UBP_CharacterMontageComponent_C::IsBlowing' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugStep) == 0x000AAC, "Member 'UBP_CharacterMontageComponent_C::DebugStep' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsGuardSuccess) == 0x000AB0, "Member 'UBP_CharacterMontageComponent_C::IsGuardSuccess' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SuperZCounterTakeType) == 0x000AB1, "Member 'UBP_CharacterMontageComponent_C::SuperZCounterTakeType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HitBoneLocationStart) == 0x000AB8, "Member 'UBP_CharacterMontageComponent_C::HitBoneLocationStart' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HitBoneLocationEnd) == 0x000AD0, "Member 'UBP_CharacterMontageComponent_C::HitBoneLocationEnd' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsTargetDamageReaction) == 0x000AE8, "Member 'UBP_CharacterMontageComponent_C::IsTargetDamageReaction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingCorrectionAction) == 0x000AEC, "Member 'UBP_CharacterMontageComponent_C::VanishingCorrectionAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingStartActionCamera) == 0x000AF8, "Member 'UBP_CharacterMontageComponent_C::VanishingStartActionCamera' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingStartOpponentActionCamera) == 0x000B00, "Member 'UBP_CharacterMontageComponent_C::VanishingStartOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingEndActionCamera) == 0x000B08, "Member 'UBP_CharacterMontageComponent_C::VanishingEndActionCamera' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, VanishingEndOpponentActionCamera) == 0x000B10, "Member 'UBP_CharacterMontageComponent_C::VanishingEndOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsKeepDown) == 0x000B18, "Member 'UBP_CharacterMontageComponent_C::IsKeepDown' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, BlastSkillPressed) == 0x000B1C, "Member 'UBP_CharacterMontageComponent_C::BlastSkillPressed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HitAttackTypeInAction) == 0x000B28, "Member 'UBP_CharacterMontageComponent_C::HitAttackTypeInAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, OpponentHitSituationInAction) == 0x000B38, "Member 'UBP_CharacterMontageComponent_C::OpponentHitSituationInAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugBlastImpact) == 0x000B48, "Member 'UBP_CharacterMontageComponent_C::DebugBlastImpact' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugPlayAddtiveReactionWait) == 0x000B50, "Member 'UBP_CharacterMontageComponent_C::DebugPlayAddtiveReactionWait' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugPlayHitAreaList) == 0x000B58, "Member 'UBP_CharacterMontageComponent_C::DebugPlayHitAreaList' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugArmor) == 0x000B68, "Member 'UBP_CharacterMontageComponent_C::DebugArmor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsNotTurning) == 0x000B69, "Member 'UBP_CharacterMontageComponent_C::IsNotTurning' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, __Mn__BnMovement_Mode) == 0x000B6A, "Member 'UBP_CharacterMontageComponent_C::__Mn__BnMovement_Mode' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, HitAttackActionInAction) == 0x000B70, "Member 'UBP_CharacterMontageComponent_C::HitAttackActionInAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, AcceptingAscertain) == 0x000B80, "Member 'UBP_CharacterMontageComponent_C::AcceptingAscertain' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, AcceptingSonicSwayRemainTime) == 0x000B88, "Member 'UBP_CharacterMontageComponent_C::AcceptingSonicSwayRemainTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsDrawVanishingEffect) == 0x000B90, "Member 'UBP_CharacterMontageComponent_C::IsDrawVanishingEffect' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, DebugAlwaysSonicSway) == 0x000B91, "Member 'UBP_CharacterMontageComponent_C::DebugAlwaysSonicSway' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsReachedBurstSmashMove) == 0x000B92, "Member 'UBP_CharacterMontageComponent_C::IsReachedBurstSmashMove' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Time_Line_Type) == 0x000B93, "Member 'UBP_CharacterMontageComponent_C::Time_Line_Type' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Blast2Slot2Action) == 0x000B94, "Member 'UBP_CharacterMontageComponent_C::Blast2Slot2Action' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, PursuitPossibleTime) == 0x000BA0, "Member 'UBP_CharacterMontageComponent_C::PursuitPossibleTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, CancelVanising) == 0x000BA8, "Member 'UBP_CharacterMontageComponent_C::CancelVanising' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, IsVanishingCancel) == 0x000BF8, "Member 'UBP_CharacterMontageComponent_C::IsVanishingCancel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, SupportMLSAction) == 0x000BFC, "Member 'UBP_CharacterMontageComponent_C::SupportMLSAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, Z_____n______Minus_) == 0x000C08, "Member 'UBP_CharacterMontageComponent_C::Z_____n______Minus_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ______n______Minus_) == 0x000C10, "Member 'UBP_CharacterMontageComponent_C::______n______Minus_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterMontageComponent_C, ______n____h_) == 0x000C18, "Member 'UBP_CharacterMontageComponent_C::______n____h_' has a wrong offset!");

}

