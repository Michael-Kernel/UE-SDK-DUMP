#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBlow

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubBlow.BP_CharacterLocomotionSubBlow_C
// 0x05F8 (0x0658 - 0x0060)
class UBP_CharacterLocomotionSubBlow_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratBlowState                               PreBlowStatus;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               BlowStatus;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                BlowType;                                          // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlowIsFront;                                       // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               AnimEventBlowState;                                // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   BlowAction;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementData              HitBackData;                                       // 0x0070(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                KnockBackVector;                                   // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowHitSpeedNormal;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowHitSpeedParallel;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlowLastVelocity;                                  // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlowLanded;                                      // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUkemiInput;                                      // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UkemiInputTimer;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratBlowReactionUkemiStandUpMovementParameter UkemiMoveParameter;                                // 0x03A0(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxAddMoveTime;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddMoveTimer;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionSubBlowUkemi_C*  BrakeSubInstance;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BrakeBlowTimer;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug9M_s____e_B_h_;                               // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebDebStartZ;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebDebBlowZMax;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebDebHitVelocityZ;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebDebBoundZMax;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundSSpeedMax;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundMSpeedMax;                                // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundSSpeedZ;                                  // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundMSpeedZ;                                  // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundLSpeedZ;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlowBoundImpulseBaseScale;                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlowReactionLevel;                                 // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FpsForImpulse;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FpsForDebugDraw;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug9M_s____e_8k__;                               // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugDrawBlowOnece;                                // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugDrawBlowTime;                                 // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_____1h_;                                     // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UkemiRotation;                                     // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        UkemiTurnSpeedIN;                                  // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForecastBlowHit;                                 // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x0490(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForecastBlowHitTime;                               // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x04B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForecastBlowHitNormal;                             // 0x04B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      ForecastBlowHitPhysMat;                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ForecastBlowHitActor;                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    ForecastBlowHitComponent;                          // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   ForecastBlowHitBoneName;                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DownToRevivalTime;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitCharacter;                                    // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionYRemain;                                  // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZRemain;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFallUkemi;                                       // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FallUkemiWaitTimer;                                // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFallUkemiToAir;                                  // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ForecastBlowHitResult;                             // 0x0528(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsBoundFromBlow;                                   // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStandUpUkemiInput;                               // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StandUpUkemiInputTimer;                            // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStandUpDashInput;                                // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StandUpDashInputTimer;                             // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddDownToRevivalTime;                              // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallStopTime;                                      // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreFallStopLocation;                               // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustBoundImpulse(const struct FVector& InImpulse, double InBoundSpeedZ, const class FString& InBoundType, struct FVector* OutImpulse, bool* IsAdjust);
	void BranchBlowOnHit();
	void BranchBlowOnLanded();
	void Calculate_Animation_Direction(const struct FVector& InVelocity, const struct FRotator& InCharacterRot, const struct FRotator& InLastVelocityRot, double* DirectionY, double* DirectionZ);
	void Change_Down(bool InDownBlendSkip, double AddDownToRevivalTime_0);
	void ChangeBlowStatus(EKoratBlowState NewParam, EKoratCharacterActionFinishReason InActionFinishReason);
	void ChangeBlowToIdle();
	void ChangeDownHitWall();
	void ChangeDownRevivalKeyPressed();
	void Check_Blow_Brake_Input(bool* IsBrakeOK);
	void Check_Blow_Brake_Input_Time(bool* IsBrakeInputTimeOK);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckAndStartWithParam(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, const struct FKoratActionDataList& InAction, bool InFrontHit, bool* IsStarted);
	void CheckBlowGuardInput(bool* IsGuard);
	void CheckBlowGuardInputTime(bool* IsGuardInputTimeOK);
	void CheckBlowLP_ToFall(double InDeltaSeconds, bool* IsEnd);
	void CheckBlowLP_ToIdle(double InDeltaSeconds, bool* IsEnd);
	void CheckBlowUkemiInput();
	void CheckBlowUkemiOnHit(bool* IsUkemiOK);
	void CheckBlowUkemiStandUpDashOnHit(bool* IsUkemiOK);
	void CheckCrashToFloor(EKoratBlowState InBlowStatus, bool* ChangeCrashToWall);
	void CheckCrashToWall(EKoratBlowState InBlowStatus, bool* ChangeCrashToWall);
	void CheckDashUkemi(bool* ChangeWallUkemi);
	void CheckDashUkemiInput();
	void CheckDownRevival(bool* IsOK);
	void CheckFallMikiwameInput(double WaitTime);
	void CheckFallStopUkemiInput();
	void CheckFallUkemiInput(double WaitTime);
	void CheckWallUkemi(bool* ChangeWallUkemi);
	void CheckWallUkemiInput();
	void ClearForecastBlowHitInfo();
	void DebDebUpdateZMax(double InNowZMax, double* ZMax);
	void DestructedDamage();
	void FallStopUkemi();
	void FlipChangeBlowStatus(EKoratBlowState InNextBlowStatus);
	void ForecastBlowHit(double InDebugDrawDuration, bool* OutIsHit, struct FVector* OutLocation, double* OutHitTime, struct FKoratMapAttributeDataList* OutMapAttribute, struct FVector* OutHitNormal);
	void GetBlowStartRotation(struct FRotator* Rotation);
	void GetFindFloorResult(struct FFindFloorResult* FloorResult);
	void GetForecastBlowHitSaveInfo(bool* OutIsHit, struct FVector* OutLocation, double* OutHitTime, struct FKoratMapAttributeDataList* OutMapAttribute, struct FVector* OutHitNormal, class UPhysicalMaterial** OutHitPhysMat, class AActor** OutHitActor, class UPrimitiveComponent** OutHitComponent, class FName* OutHitBoneName, struct FHitResult* OutHitResult);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void InitializeBlowBrakeInput();
	void InitializeBlowUkemiInput();
	void InitializeDashUkemiInput();
	void InitializeWallUkemiInput();
	void IsBlowBrakeUkemiInputKey(bool* Input);
	void IsEnableAction(bool* IsEnable);
	void IsFallUkemiInputKey(bool* Input);
	void IsHitFloor(const struct FVector& InHitNormal, const struct FHitResult& InHitArgHit, bool* OutIsFloor);
	void IsUkemiInputKey(bool* Input);
	void OnBlowAnimEvent(EKoratBlowState BlowState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnEndBlowReaction();
	void ResetHitStop();
	void RotateBlowDown(double InDeltaSeconds2);
	void SaveForecastBlowHitInfo(bool InIsHit, const struct FVector& InHitLocation, double InHitTime, const struct FKoratMapAttributeDataList& InHitMapAttribute, const struct FVector& InHitNormal);
	void Set_Up_Blow_Ukemi_Stand_Up_Movement_Parameter(EKoratBlowState InBlowStatus);
	void SetBlowMaxSpeed();
	void SetBlowParameter();
	void SetBlowStatus(EKoratBlowState InBlowStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetHitStop(const struct FKoratHitStopDataList& InHitStopDataList, bool InResetOnDamage, bool InEndHitStopDown);
	void SetUpBlowSlideMovementParameter();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartBlowBrake();
	void StartBlowCrumple();
	void StartBlowDown(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, double InDownToRevivalTime, bool* NewParam);
	void StartBlowDownRevival();
	void StartBlowImpulse();
	void StartBlowLift();
	void StartBlowSweep();
	void StartBlowUkemi();
	void StartFallUkemi();
	void StartStandUpDashUkemi();
	void TurnBlowUkemi(const struct FVector& InKnockBackVector);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateBlowBrakeInput(double InDeltaSeconds);
	void UpdateBlowLPMove(double InDeltaSeconds, EKoratBlowState* NewParam);
	void UpdateBlowUkemiInput(double InDeltaSeconds);
	void UpdateBlowUkemiMove(double InDeltaSeconds);
	void UpdateDashUkemiInput(double InDeltaSeconds);
	void UpdateRotationBlow();
	void UpdateWallUkemiInput(double InDeltaSeconds);
	void __Mnn_LzDfD_p_k__(bool* IsUpMove);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubBlow_C">();
	}
	static class UBP_CharacterLocomotionSubBlow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubBlow_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubBlow_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubBlow_C");
static_assert(sizeof(UBP_CharacterLocomotionSubBlow_C) == 0x000658, "Wrong size on UBP_CharacterLocomotionSubBlow_C");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, PreBlowStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubBlow_C::PreBlowStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowStatus) == 0x000061, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowType) == 0x000062, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowIsFront) == 0x000063, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowIsFront' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, AnimEventBlowState) == 0x000064, "Member 'UBP_CharacterLocomotionSubBlow_C::AnimEventBlowState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowAction) == 0x000068, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, HitBackData) == 0x000070, "Member 'UBP_CharacterLocomotionSubBlow_C::HitBackData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, KnockBackVector) == 0x000350, "Member 'UBP_CharacterLocomotionSubBlow_C::KnockBackVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowHitSpeedNormal) == 0x000368, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowHitSpeedParallel) == 0x000370, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowLastVelocity) == 0x000378, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowLastVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsBlowLanded) == 0x000390, "Member 'UBP_CharacterLocomotionSubBlow_C::IsBlowLanded' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsUkemiInput) == 0x000391, "Member 'UBP_CharacterLocomotionSubBlow_C::IsUkemiInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, UkemiInputTimer) == 0x000398, "Member 'UBP_CharacterLocomotionSubBlow_C::UkemiInputTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, UkemiMoveParameter) == 0x0003A0, "Member 'UBP_CharacterLocomotionSubBlow_C::UkemiMoveParameter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, MaxAddMoveTime) == 0x0003C0, "Member 'UBP_CharacterLocomotionSubBlow_C::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, AddMoveTimer) == 0x0003C8, "Member 'UBP_CharacterLocomotionSubBlow_C::AddMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BrakeSubInstance) == 0x0003D0, "Member 'UBP_CharacterLocomotionSubBlow_C::BrakeSubInstance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BrakeBlowTimer) == 0x0003D8, "Member 'UBP_CharacterLocomotionSubBlow_C::BrakeBlowTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, Debug9M_s____e_B_h_) == 0x0003E0, "Member 'UBP_CharacterLocomotionSubBlow_C::Debug9M_s____e_B_h_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebDebStartZ) == 0x0003E8, "Member 'UBP_CharacterLocomotionSubBlow_C::DebDebStartZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebDebBlowZMax) == 0x0003F0, "Member 'UBP_CharacterLocomotionSubBlow_C::DebDebBlowZMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebDebHitVelocityZ) == 0x0003F8, "Member 'UBP_CharacterLocomotionSubBlow_C::DebDebHitVelocityZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebDebBoundZMax) == 0x000400, "Member 'UBP_CharacterLocomotionSubBlow_C::DebDebBoundZMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundSSpeedMax) == 0x000408, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundMSpeedMax) == 0x000410, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundSSpeedZ) == 0x000418, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundSSpeedZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundMSpeedZ) == 0x000420, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundMSpeedZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundLSpeedZ) == 0x000428, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundLSpeedZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowBoundImpulseBaseScale) == 0x000430, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowBoundImpulseBaseScale' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, BlowReactionLevel) == 0x000438, "Member 'UBP_CharacterLocomotionSubBlow_C::BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, FpsForImpulse) == 0x000440, "Member 'UBP_CharacterLocomotionSubBlow_C::FpsForImpulse' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, FpsForDebugDraw) == 0x000448, "Member 'UBP_CharacterLocomotionSubBlow_C::FpsForDebugDraw' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, Debug9M_s____e_8k__) == 0x000450, "Member 'UBP_CharacterLocomotionSubBlow_C::Debug9M_s____e_8k__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebugDrawBlowOnece) == 0x000451, "Member 'UBP_CharacterLocomotionSubBlow_C::DebugDrawBlowOnece' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DebugDrawBlowTime) == 0x000458, "Member 'UBP_CharacterLocomotionSubBlow_C::DebugDrawBlowTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, Debug_____1h_) == 0x000460, "Member 'UBP_CharacterLocomotionSubBlow_C::Debug_____1h_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, UkemiRotation) == 0x000468, "Member 'UBP_CharacterLocomotionSubBlow_C::UkemiRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, UkemiTurnSpeedIN) == 0x000480, "Member 'UBP_CharacterLocomotionSubBlow_C::UkemiTurnSpeedIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsForecastBlowHit) == 0x000488, "Member 'UBP_CharacterLocomotionSubBlow_C::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitLocation) == 0x000490, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitTime) == 0x0004A8, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitMapAttribute) == 0x0004B0, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitNormal) == 0x0004B8, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitPhysMat) == 0x0004D0, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitPhysMat' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitActor) == 0x0004D8, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitActor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitComponent) == 0x0004E0, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitBoneName) == 0x0004E8, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitBoneName' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DownToRevivalTime) == 0x0004F0, "Member 'UBP_CharacterLocomotionSubBlow_C::DownToRevivalTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsHitCharacter) == 0x0004F8, "Member 'UBP_CharacterLocomotionSubBlow_C::IsHitCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DirectionYRemain) == 0x000500, "Member 'UBP_CharacterLocomotionSubBlow_C::DirectionYRemain' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, DirectionZRemain) == 0x000508, "Member 'UBP_CharacterLocomotionSubBlow_C::DirectionZRemain' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsFallUkemi) == 0x000510, "Member 'UBP_CharacterLocomotionSubBlow_C::IsFallUkemi' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, FallUkemiWaitTimer) == 0x000518, "Member 'UBP_CharacterLocomotionSubBlow_C::FallUkemiWaitTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsFallUkemiToAir) == 0x000520, "Member 'UBP_CharacterLocomotionSubBlow_C::IsFallUkemiToAir' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, ForecastBlowHitResult) == 0x000528, "Member 'UBP_CharacterLocomotionSubBlow_C::ForecastBlowHitResult' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsBoundFromBlow) == 0x000610, "Member 'UBP_CharacterLocomotionSubBlow_C::IsBoundFromBlow' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsStandUpUkemiInput) == 0x000611, "Member 'UBP_CharacterLocomotionSubBlow_C::IsStandUpUkemiInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, StandUpUkemiInputTimer) == 0x000618, "Member 'UBP_CharacterLocomotionSubBlow_C::StandUpUkemiInputTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, IsStandUpDashInput) == 0x000620, "Member 'UBP_CharacterLocomotionSubBlow_C::IsStandUpDashInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, StandUpDashInputTimer) == 0x000628, "Member 'UBP_CharacterLocomotionSubBlow_C::StandUpDashInputTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, AddDownToRevivalTime) == 0x000630, "Member 'UBP_CharacterLocomotionSubBlow_C::AddDownToRevivalTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, FallStopTime) == 0x000638, "Member 'UBP_CharacterLocomotionSubBlow_C::FallStopTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlow_C, PreFallStopLocation) == 0x000640, "Member 'UBP_CharacterLocomotionSubBlow_C::PreFallStopLocation' has a wrong offset!");

}

