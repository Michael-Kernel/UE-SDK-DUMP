#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AnimBase

#include "Basic.hpp"

#include "BPI_AnimBase_classes.hpp"
#include "BPI_AnimBase_parameters.hpp"


namespace SDK
{

// Function BPI_AnimBase.BPI_AnimBase_C.AnimNotifyMontageSetNextSection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimSequence                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           NextSection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SetSection                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_AnimBase_C::AnimNotifyMontageSetNextSection(class UAnimSequenceBase* AnimSequence, const class FString& NextSection, const class FString& SetSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "AnimNotifyMontageSetNextSection");

	Params::BPI_AnimBase_C_AnimNotifyMontageSetNextSection Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.NextSection = std::move(NextSection);
	Parms.SetSection = std::move(SetSection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AnimBase.BPI_AnimBase_C.AnimNotifyMontageStop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                AnimSequence                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_AnimBase_C::AnimNotifyMontageStop(class UAnimSequenceBase* AnimSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "AnimNotifyMontageStop");

	Params::BPI_AnimBase_C_AnimNotifyMontageStop Parms{};

	Parms.AnimSequence = AnimSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_AnimBase.BPI_AnimBase_C.GetSubActionAnimInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    SubActionAnimInstance                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_AnimBase_C::GetSubActionAnimInstance(class UAnimInstance** SubActionAnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "GetSubActionAnimInstance");

	Params::BPI_AnimBase_C_GetSubActionAnimInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubActionAnimInstance != nullptr)
		*SubActionAnimInstance = Parms.SubActionAnimInstance;
}


// Function BPI_AnimBase.BPI_AnimBase_C.GetSubRequestMontageAnimInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UABP_Sub_RequestMontage_C*        SubrequestMontageAnimInstance                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_AnimBase_C::GetSubRequestMontageAnimInstance(class UABP_Sub_RequestMontage_C** SubrequestMontageAnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "GetSubRequestMontageAnimInstance");

	Params::BPI_AnimBase_C_GetSubRequestMontageAnimInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubrequestMontageAnimInstance != nullptr)
		*SubrequestMontageAnimInstance = Parms.SubrequestMontageAnimInstance;
}


// Function BPI_AnimBase.BPI_AnimBase_C.ReflectRequestReactionDirection
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_AnimBase_C::ReflectRequestReactionDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "ReflectRequestReactionDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_AnimBase.BPI_AnimBase_C.SetReactionDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratReactionDirection                 InReactionDirection                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AnimBase_C::SetReactionDirection(EKoratReactionDirection InReactionDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_AnimBase_C", "SetReactionDirection");

	Params::BPI_AnimBase_C_SetReactionDirection Parms{};

	Parms.InReactionDirection = InReactionDirection;

	UObject::ProcessEvent(Func, &Parms);
}

}

