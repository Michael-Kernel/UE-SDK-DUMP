#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareAdxLipSync

#include "Basic.hpp"

#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum CriWareAdxLipSync.ELipsAnalyzerDataReadoutMode
// NumValues: 0x0005
enum class ELipsAnalyzerDataReadoutMode : uint8
{
	ProcessIfNoData                          = 0,
	SilentIfNoData                           = 1,
	ProcessAlways                            = 2,
	ProcessWhileReading                      = 3,
	ELipsAnalyzerDataReadoutMode_MAX         = 4,
};

// Enum CriWareAdxLipSync.ELipsAtomAnalyzerProcessStatus
// NumValues: 0x0004
enum class ELipsAtomAnalyzerProcessStatus : uint8
{
	Stop                                     = 0,
	ProcessingPlayback                       = 1,
	ProcessingSilence                        = 2,
	ELipsAtomAnalyzerProcessStatus_MAX       = 3,
};

// Enum CriWareAdxLipSync.ELipsAtomAnalyzerReadoutStatus
// NumValues: 0x0004
enum class ELipsAtomAnalyzerReadoutStatus : uint8
{
	Stop                                     = 0,
	Reading                                  = 1,
	TransitioningToShut                      = 2,
	ELipsAtomAnalyzerReadoutStatus_MAX       = 3,
};

// ScriptStruct CriWareAdxLipSync.CriLipsMouthInfo
// 0x0010 (0x0010 - 0x0000)
struct FCriLipsMouthInfo final
{
public:
	float                                         LipWidth;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipHeight;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TonguePosition;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLipWidthReleased;                                // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLipHeightReleased;                               // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTonguePositionReleased;                          // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCriLipsMouthInfo) == 0x000004, "Wrong alignment on FCriLipsMouthInfo");
static_assert(sizeof(FCriLipsMouthInfo) == 0x000010, "Wrong size on FCriLipsMouthInfo");
static_assert(offsetof(FCriLipsMouthInfo, LipWidth) == 0x000000, "Member 'FCriLipsMouthInfo::LipWidth' has a wrong offset!");
static_assert(offsetof(FCriLipsMouthInfo, LipHeight) == 0x000004, "Member 'FCriLipsMouthInfo::LipHeight' has a wrong offset!");
static_assert(offsetof(FCriLipsMouthInfo, TonguePosition) == 0x000008, "Member 'FCriLipsMouthInfo::TonguePosition' has a wrong offset!");
static_assert(offsetof(FCriLipsMouthInfo, IsLipWidthReleased) == 0x00000C, "Member 'FCriLipsMouthInfo::IsLipWidthReleased' has a wrong offset!");
static_assert(offsetof(FCriLipsMouthInfo, IsLipHeightReleased) == 0x00000D, "Member 'FCriLipsMouthInfo::IsLipHeightReleased' has a wrong offset!");
static_assert(offsetof(FCriLipsMouthInfo, IsTonguePositionReleased) == 0x00000E, "Member 'FCriLipsMouthInfo::IsTonguePositionReleased' has a wrong offset!");

// ScriptStruct CriWareAdxLipSync.CriLipsMorphTargetBlendAmountAsJapanese
// 0x0014 (0x0014 - 0x0000)
struct FCriLipsMorphTargetBlendAmountAsJapanese final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         I;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         E;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         O;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCriLipsMorphTargetBlendAmountAsJapanese) == 0x000004, "Wrong alignment on FCriLipsMorphTargetBlendAmountAsJapanese");
static_assert(sizeof(FCriLipsMorphTargetBlendAmountAsJapanese) == 0x000014, "Wrong size on FCriLipsMorphTargetBlendAmountAsJapanese");
static_assert(offsetof(FCriLipsMorphTargetBlendAmountAsJapanese, A) == 0x000000, "Member 'FCriLipsMorphTargetBlendAmountAsJapanese::A' has a wrong offset!");
static_assert(offsetof(FCriLipsMorphTargetBlendAmountAsJapanese, I) == 0x000004, "Member 'FCriLipsMorphTargetBlendAmountAsJapanese::I' has a wrong offset!");
static_assert(offsetof(FCriLipsMorphTargetBlendAmountAsJapanese, U) == 0x000008, "Member 'FCriLipsMorphTargetBlendAmountAsJapanese::U' has a wrong offset!");
static_assert(offsetof(FCriLipsMorphTargetBlendAmountAsJapanese, E) == 0x00000C, "Member 'FCriLipsMorphTargetBlendAmountAsJapanese::E' has a wrong offset!");
static_assert(offsetof(FCriLipsMorphTargetBlendAmountAsJapanese, O) == 0x000010, "Member 'FCriLipsMorphTargetBlendAmountAsJapanese::O' has a wrong offset!");

// ScriptStruct CriWareAdxLipSync.AtomLipSyncSectionParameter
// 0x0038 (0x0038 - 0x0000)
struct FAtomLipSyncSectionParameter final
{
public:
	int32                                         MaxInputSamplingRate;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseMorphTargetBlendAmountAsJapanese;            // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LipSync_MorphTargetName_A;                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSync_MorphTargetName_I;                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSync_MorphTargetName_U;                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSync_MorphTargetName_E;                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LipSync_MorphTargetName_O;                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketNameForAttachingSound;                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomLipSyncSectionParameter) == 0x000004, "Wrong alignment on FAtomLipSyncSectionParameter");
static_assert(sizeof(FAtomLipSyncSectionParameter) == 0x000038, "Wrong size on FAtomLipSyncSectionParameter");
static_assert(offsetof(FAtomLipSyncSectionParameter, MaxInputSamplingRate) == 0x000000, "Member 'FAtomLipSyncSectionParameter::MaxInputSamplingRate' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, bIsUseMorphTargetBlendAmountAsJapanese) == 0x000004, "Member 'FAtomLipSyncSectionParameter::bIsUseMorphTargetBlendAmountAsJapanese' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, LipSync_MorphTargetName_A) == 0x000008, "Member 'FAtomLipSyncSectionParameter::LipSync_MorphTargetName_A' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, LipSync_MorphTargetName_I) == 0x000010, "Member 'FAtomLipSyncSectionParameter::LipSync_MorphTargetName_I' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, LipSync_MorphTargetName_U) == 0x000018, "Member 'FAtomLipSyncSectionParameter::LipSync_MorphTargetName_U' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, LipSync_MorphTargetName_E) == 0x000020, "Member 'FAtomLipSyncSectionParameter::LipSync_MorphTargetName_E' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, LipSync_MorphTargetName_O) == 0x000028, "Member 'FAtomLipSyncSectionParameter::LipSync_MorphTargetName_O' has a wrong offset!");
static_assert(offsetof(FAtomLipSyncSectionParameter, SocketNameForAttachingSound) == 0x000030, "Member 'FAtomLipSyncSectionParameter::SocketNameForAttachingSound' has a wrong offset!");

// ScriptStruct CriWareAdxLipSync.MovieSceneLipSyncAtomSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneLipSyncAtomSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UMovieSceneLipSyncAtomSection*          AtomSection;                                       // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneLipSyncAtomSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneLipSyncAtomSectionTemplate");
static_assert(sizeof(FMovieSceneLipSyncAtomSectionTemplate) == 0x000028, "Wrong size on FMovieSceneLipSyncAtomSectionTemplate");
static_assert(offsetof(FMovieSceneLipSyncAtomSectionTemplate, AtomSection) == 0x000020, "Member 'FMovieSceneLipSyncAtomSectionTemplate::AtomSection' has a wrong offset!");

}

