#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterAsyncAction

#include "Basic.hpp"

#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowBlast
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast final
{
public:
	struct FKoratReplaceAnimationDataList         RequestAnimData;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast) == 0x000004, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast) == 0x000008, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast, RequestAnimData) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowBlast::RequestAnimData' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowPlayAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction) == 0x000004, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction) == 0x000008, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction, InAction) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowPlayAction::InAction' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowRevengeCounter
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter final
{
public:
	struct FKoratReplaceAnimationDataList         InReplaceAnim;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter) == 0x000004, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter) == 0x000008, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter, InReplaceAnim) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowRevengeCounter::InReplaceAnim' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowRollingHammer
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer final
{
public:
	bool                                          IsPreviousUseLeft;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer) == 0x000001, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer) == 0x000001, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer, IsPreviousUseLeft) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHammer::IsPreviousUseLeft' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowRollingHurricane1
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1 final
{
public:
	bool                                          IsLeft;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1) == 0x000001, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1) == 0x000001, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1, IsLeft) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowRollingHurricane1::IsLeft' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowRush
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush final
{
public:
	int32                                         RushType;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush) == 0x000004, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush) == 0x000004, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush, RushType) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowRush::RushType' has a wrong offset!");

// Function BPI_CharacterAsyncAction.BPI_CharacterAsyncAction_C.NotifyTransitionFlowVanishingAttack
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack final
{
public:
	struct FKoratReplaceAnimationDataList         InReplaceAnim;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack) == 0x000004, "Wrong alignment on BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack");
static_assert(sizeof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack) == 0x000008, "Wrong size on BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack");
static_assert(offsetof(BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack, InReplaceAnim) == 0x000000, "Member 'BPI_CharacterAsyncAction_C_NotifyTransitionFlowVanishingAttack::InReplaceAnim' has a wrong offset!");

}

