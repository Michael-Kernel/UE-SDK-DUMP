#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionComponent

#include "Basic.hpp"

#include "BP_CharacterLocomotionComponent_classes.hpp"
#include "BP_CharacterLocomotionComponent_parameters.hpp"


namespace SDK
{

// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Add Debug Draw Blow Param
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InDrawType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InHitTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDrawDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Add_Debug_Draw_Blow_Param(const struct FVector& InLocation, int32 InDrawType, double InHitTime, double InDrawDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Add Debug Draw Blow Param");

	Params::BP_CharacterLocomotionComponent_C_Add_Debug_Draw_Blow_Param Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InDrawType = InDrawType;
	Parms.InHitTime = InHitTime;
	Parms.InDrawDuration = InDrawDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddCharacterMovementInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddCharacterMovementInput");

	Params::BP_CharacterLocomotionComponent_C_AddCharacterMovementInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementXInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddCharacterMovementXInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddCharacterMovementXInput");

	Params::BP_CharacterLocomotionComponent_C_AddCharacterMovementXInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementXYInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddCharacterMovementXYInput(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddCharacterMovementXYInput");

	Params::BP_CharacterLocomotionComponent_C_AddCharacterMovementXYInput Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementYInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddCharacterMovementYInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddCharacterMovementYInput");

	Params::BP_CharacterLocomotionComponent_C_AddCharacterMovementYInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddCharacterMovementZInputLast
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddCharacterMovementZInputLast(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddCharacterMovementZInputLast");

	Params::BP_CharacterLocomotionComponent_C_AddCharacterMovementZInputLast Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddChildDashRoute
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DashRouteActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddChildDashRoute(class AActor** DashRouteActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddChildDashRoute");

	Params::BP_CharacterLocomotionComponent_C_AddChildDashRoute Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashRouteActor != nullptr)
		*DashRouteActor = Parms.DashRouteActor;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AddDashVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AddDashVector(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AddDashVector");

	Params::BP_CharacterLocomotionComponent_C_AddDashVector Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AnimNotifyInputParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AnimNotifyInputParam(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AnimNotifyInputParam");

	Params::BP_CharacterLocomotionComponent_C_AnimNotifyInputParam Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.AutoSetCharacterMovementModeToIdle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsValidSetWalking                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSet                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           SetMovementMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::AutoSetCharacterMovementModeToIdle(bool InIsValidSetWalking, bool* IsSet, EMovementMode* SetMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "AutoSetCharacterMovementModeToIdle");

	Params::BP_CharacterLocomotionComponent_C_AutoSetCharacterMovementModeToIdle Parms{};

	Parms.InIsValidSetWalking = InIsValidSetWalking;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSet != nullptr)
		*IsSet = Parms.IsSet;

	if (SetMovementMode != nullptr)
		*SetMovementMode = Parms.SetMovementMode;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalcDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InYaw                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InAngleFront                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InAngleLeftRight                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsInclusiveAngleFront                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterDirection                     Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CalcDirection(double InYaw, double InAngleFront, double InAngleLeftRight, bool InIsInclusiveAngleFront, ECharacterDirection* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CalcDirection");

	Params::BP_CharacterLocomotionComponent_C_CalcDirection Parms{};

	Parms.InYaw = InYaw;
	Parms.InAngleFront = InAngleFront;
	Parms.InAngleLeftRight = InAngleLeftRight;
	Parms.InIsInclusiveAngleFront = InIsInclusiveAngleFront;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = Parms.Direction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Calculate Dragon Dash Rotation Speed Param
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         OutRotationSpeed                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         OutRotationInitialSpeed                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         OutRotationAcceleration                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::Calculate_Dragon_Dash_Rotation_Speed_Param(struct FRotator* OutRotationSpeed, struct FRotator* OutRotationInitialSpeed, struct FRotator* OutRotationAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Calculate Dragon Dash Rotation Speed Param");

	Params::BP_CharacterLocomotionComponent_C_Calculate_Dragon_Dash_Rotation_Speed_Param Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRotationSpeed != nullptr)
		*OutRotationSpeed = std::move(Parms.OutRotationSpeed);

	if (OutRotationInitialSpeed != nullptr)
		*OutRotationInitialSpeed = std::move(Parms.OutRotationInitialSpeed);

	if (OutRotationAcceleration != nullptr)
		*OutRotationAcceleration = std::move(Parms.OutRotationAcceleration);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Calculate Locomotion Rotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFLocomotionAxisRotationParameterInRotationParameterXRoll                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInRotationParameterYPitch                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInRotationParameterZYaw                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsInterpConstant                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutNewRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::Calculate_Locomotion_Rotation(const struct FRotator& InNewRotation, const struct FFLocomotionAxisRotationParameter& InRotationParameterXRoll, const struct FFLocomotionAxisRotationParameter& InRotationParameterYPitch, const struct FFLocomotionAxisRotationParameter& InRotationParameterZYaw, bool InIsInterpConstant, struct FRotator* OutNewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Calculate Locomotion Rotation");

	Params::BP_CharacterLocomotionComponent_C_Calculate_Locomotion_Rotation Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InRotationParameterXRoll = std::move(InRotationParameterXRoll);
	Parms.InRotationParameterYPitch = std::move(InRotationParameterYPitch);
	Parms.InRotationParameterZYaw = std::move(InRotationParameterZYaw);
	Parms.InIsInterpConstant = InIsInterpConstant;

	UObject::ProcessEvent(Func, &Parms);

	if (OutNewRotation != nullptr)
		*OutNewRotation = std::move(Parms.OutNewRotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalculateAnimationDirectionLocomotionSub
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InVelocity                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InCharacterRot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastVelocityRot                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CalculateAnimationDirectionLocomotionSub(EKoratLocomotionState InLocomotionStatus, const struct FVector& InVelocity, const struct FRotator& InCharacterRot, const struct FRotator& InLastVelocityRot, double* DirectionY_0, double* DirectionZ_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CalculateAnimationDirectionLocomotionSub");

	Params::BP_CharacterLocomotionComponent_C_CalculateAnimationDirectionLocomotionSub Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;
	Parms.InVelocity = std::move(InVelocity);
	Parms.InCharacterRot = std::move(InCharacterRot);
	Parms.InLastVelocityRot = std::move(InLastVelocityRot);

	UObject::ProcessEvent(Func, &Parms);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CalculateLocomotionAxisRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InCurrentAngle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InTargetAngle                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInLocomotionAxisRotationParameter                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsInterpConstant                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CalculateLocomotionAxisRotation(double InCurrentAngle, double InTargetAngle, const struct FFLocomotionAxisRotationParameter& InLocomotionAxisRotationParameter, double InDeltaSeconds, bool InIsInterpConstant, double* OutAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CalculateLocomotionAxisRotation");

	Params::BP_CharacterLocomotionComponent_C_CalculateLocomotionAxisRotation Parms{};

	Parms.InCurrentAngle = InCurrentAngle;
	Parms.InTargetAngle = InTargetAngle;
	Parms.InLocomotionAxisRotationParameter = std::move(InLocomotionAxisRotationParameter);
	Parms.InDeltaSeconds = InDeltaSeconds;
	Parms.InIsInterpConstant = InIsInterpConstant;

	UObject::ProcessEvent(Func, &Parms);

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Change Range Mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNear                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Change_Range_Mode(bool IsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Change Range Mode");

	Params::BP_CharacterLocomotionComponent_C_Change_Range_Mode Parms{};

	Parms.IsNear = IsNear;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsFront                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDownToRevivalTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeOtherDown                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ChangeDown(bool InIsFront, double InDownToRevivalTime, bool* IsChangeOtherDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeDown");

	Params::BP_CharacterLocomotionComponent_C_ChangeDown Parms{};

	Parms.InIsFront = InIsFront;
	Parms.InDownToRevivalTime = InDownToRevivalTime;

	UObject::ProcessEvent(Func, &Parms);

	if (IsChangeOtherDown != nullptr)
		*IsChangeOtherDown = Parms.IsChangeOtherDown;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDownRevivalKeyPressed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsChange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChangeOtherDownRevival                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ChangeDownRevivalKeyPressed(bool* IsChange, bool* IsChangeOtherDownRevival)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeDownRevivalKeyPressed");

	Params::BP_CharacterLocomotionComponent_C_ChangeDownRevivalKeyPressed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsChange != nullptr)
		*IsChange = Parms.IsChange;

	if (IsChangeOtherDownRevival != nullptr)
		*IsChangeOtherDownRevival = Parms.IsChangeOtherDownRevival;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDragonDashStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   InDragonDashStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ChangeDragonDashStatus(EKoratDragonDashState InDragonDashStatus, EKoratCharacterActionFinishReason InActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeDragonDashStatus");

	Params::BP_CharacterLocomotionComponent_C_ChangeDragonDashStatus Parms{};

	Parms.InDragonDashStatus = InDragonDashStatus;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeDragonDashToOT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ChangeDragonDashToOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeDragonDashToOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeIdleMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ChangeIdleMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeIdleMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateAfterULTFalling
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ChangeStateAfterULTFalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeStateAfterULTFalling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateDragonDash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   InStartState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InSpCost                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsKeepOldDashRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ChangeStateDragonDash(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, double InSpCost, bool InIsKeepOldDashRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeStateDragonDash");

	Params::BP_CharacterLocomotionComponent_C_ChangeStateDragonDash Parms{};

	Parms.InStartState = InStartState;
	Parms.InActionFinishReason = InActionFinishReason;
	Parms.InSpCost = InSpCost;
	Parms.InIsKeepOldDashRotation = InIsKeepOldDashRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateFalling
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ChangeStateFalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeStateFalling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ChangeStateIdleMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ChangeStateIdleMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ChangeStateIdleMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Idle Move Key Pressed Action
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::Check_Idle_Move_Key_Pressed_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Check Idle Move Key Pressed Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Start Rotate Auto Idle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Check_Start_Rotate_Auto_Idle(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Check Start Rotate Auto Idle");

	Params::BP_CharacterLocomotionComponent_C_Check_Start_Rotate_Auto_Idle Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check Wall Ukemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeWallUkemi                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Check_Wall_Ukemi(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeWallUkemi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Check Wall Ukemi");

	Params::BP_CharacterLocomotionComponent_C_Check_Wall_Ukemi Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeWallUkemi != nullptr)
		*ChangeWallUkemi = Parms.ChangeWallUkemi;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Check ZBurst Dash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeZBurstDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Check_ZBurst_Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeZBurstDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Check ZBurst Dash");

	Params::BP_CharacterLocomotionComponent_C_Check_ZBurst_Dash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeZBurstDash != nullptr)
		*ChangeZBurstDash = Parms.ChangeZBurstDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastSkill1Dash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeBlastDash                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBlastSkill1Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBlastSkill1Dash");

	Params::BP_CharacterLocomotionComponent_C_CheckBlastSkill1Dash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeBlastDash != nullptr)
		*ChangeBlastDash = Parms.ChangeBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastSkill2Dash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeBlastDash                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBlastSkill2Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBlastSkill2Dash");

	Params::BP_CharacterLocomotionComponent_C_CheckBlastSkill2Dash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeBlastDash != nullptr)
		*ChangeBlastDash = Parms.ChangeBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlastUltimateDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeBlastDash                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBlastUltimateDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBlastUltimateDash");

	Params::BP_CharacterLocomotionComponent_C_CheckBlastUltimateDash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeBlastDash != nullptr)
		*ChangeBlastDash = Parms.ChangeBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    InFrontHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeBlow                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBlow(const struct FKoratActionDataList& InAction, bool InFrontHit, EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBlow");

	Params::BP_CharacterLocomotionComponent_C_CheckBlow Parms{};

	Parms.InAction = std::move(InAction);
	Parms.InFrontHit = InFrontHit;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeBlow != nullptr)
		*ChangeBlow = Parms.ChangeBlow;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBlowDownRevival
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOK                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBlowDownRevival(bool* IsOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBlowDownRevival");

	Params::BP_CharacterLocomotionComponent_C_CheckBlowDownRevival Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOK != nullptr)
		*IsOK = Parms.IsOK;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckBurstSmash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartSubState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckBurstSmash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckBurstSmash");

	Params::BP_CharacterLocomotionComponent_C_CheckBurstSmash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartSubState != nullptr)
		*IsStartSubState = Parms.IsStartSubState;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUkemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDashUkemi                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDashUkemi(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeDashUkemi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDashUkemi");

	Params::BP_CharacterLocomotionComponent_C_CheckDashUkemi Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDashUkemi != nullptr)
		*ChangeDashUkemi = Parms.ChangeDashUkemi;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUpDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDashUpDown                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDashUpDown(EKoratCharacterActionFinishReason InActionFinishReason, bool InInSkip, bool* ChangeDashUpDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDashUpDown");

	Params::BP_CharacterLocomotionComponent_C_CheckDashUpDown Parms{};

	Parms.InActionFinishReason = InActionFinishReason;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDashUpDown != nullptr)
		*ChangeDashUpDown = Parms.ChangeDashUpDown;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDashUpDownTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDashUpDown                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDashUpDownTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool InInSkip, bool* ChangeDashUpDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDashUpDownTurn");

	Params::BP_CharacterLocomotionComponent_C_CheckDashUpDownTurn Parms{};

	Parms.InActionFinishReason = InActionFinishReason;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDashUpDown != nullptr)
		*ChangeDashUpDown = Parms.ChangeDashUpDown;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   InStartState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipPlayableCheck                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDragonDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDragonDash(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, bool IsSkipPlayableCheck, bool* ChangeDragonDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDragonDash");

	Params::BP_CharacterLocomotionComponent_C_CheckDragonDash Parms{};

	Parms.InStartState = InStartState;
	Parms.InActionFinishReason = InActionFinishReason;
	Parms.IsSkipPlayableCheck = IsSkipPlayableCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDragonDash != nullptr)
		*ChangeDragonDash = Parms.ChangeDragonDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDragonDashEnd(double InDeltaSeconds, bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDragonDashEnd");

	Params::BP_CharacterLocomotionComponent_C_CheckDragonDashEnd Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashReverseDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsChangeDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDragonDashReverseDirection(bool* IsChangeDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDragonDashReverseDirection");

	Params::BP_CharacterLocomotionComponent_C_CheckDragonDashReverseDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsChangeDirection != nullptr)
		*IsChangeDirection = Parms.IsChangeDirection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonDashTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   InStartState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipPlayableCheck                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDragonDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDragonDashTurn(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, bool IsSkipPlayableCheck, bool* ChangeDragonDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDragonDashTurn");

	Params::BP_CharacterLocomotionComponent_C_CheckDragonDashTurn Parms{};

	Parms.InStartState = InStartState;
	Parms.InActionFinishReason = InActionFinishReason;
	Parms.IsSkipPlayableCheck = IsSkipPlayableCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDragonDash != nullptr)
		*ChangeDragonDash = Parms.ChangeDragonDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckDragonHoming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeDragonHoming                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckDragonHoming(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeDragonHoming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckDragonHoming");

	Params::BP_CharacterLocomotionComponent_C_CheckDragonHoming Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeDragonHoming != nullptr)
		*ChangeDragonHoming = Parms.ChangeDragonHoming;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckFastRepeatCurrentStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InCurrentStatus                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFastRepeat                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckFastRepeatCurrentStatus(EKoratLocomotionState InCurrentStatus, bool* IsFastRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckFastRepeatCurrentStatus");

	Params::BP_CharacterLocomotionComponent_C_CheckFastRepeatCurrentStatus Parms{};

	Parms.InCurrentStatus = InCurrentStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFastRepeat != nullptr)
		*IsFastRepeat = Parms.IsFastRepeat;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartSubState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckHighSpeedMove(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckHighSpeedMove");

	Params::BP_CharacterLocomotionComponent_C_CheckHighSpeedMove Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartSubState != nullptr)
		*IsStartSubState = Parms.IsStartSubState;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckIdleMoveKoratKeyPressedAction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::CheckIdleMoveKoratKeyPressedAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckIdleMoveKoratKeyPressedAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeJump                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckJump(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckJump");

	Params::BP_CharacterLocomotionComponent_C_CheckJump Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeJump != nullptr)
		*ChangeJump = Parms.ChangeJump;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckJumpTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeJump                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckJumpTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckJumpTurn");

	Params::BP_CharacterLocomotionComponent_C_CheckJumpTurn Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeJump != nullptr)
		*ChangeJump = Parms.ChangeJump;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckLocomotionSub
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartLocomotionSub                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckLocomotionSub(EKoratLocomotionState InLocomotionStatus, EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartLocomotionSub)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckLocomotionSub");

	Params::BP_CharacterLocomotionComponent_C_CheckLocomotionSub Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartLocomotionSub != nullptr)
		*IsStartLocomotionSub = Parms.IsStartLocomotionSub;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckMobileMonitoring
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::CheckMobileMonitoring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckMobileMonitoring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartSubState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckMoveStandUp(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckMoveStandUp");

	Params::BP_CharacterLocomotionComponent_C_CheckMoveStandUp Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartSubState != nullptr)
		*IsStartSubState = Parms.IsStartSubState;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartNumbReaction                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckNumbReaction(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartNumbReaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckNumbReaction");

	Params::BP_CharacterLocomotionComponent_C_CheckNumbReaction Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartNumbReaction != nullptr)
		*IsStartNumbReaction = Parms.IsStartNumbReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckNumbReactionToState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterNumbReactionState             InStartNumbReactionStatus                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsFront                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartNumbReaction                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckNumbReactionToState(EKoratCharacterActionFinishReason InActionFinishReason, ECharacterNumbReactionState InStartNumbReactionStatus, bool InIsFront, bool* IsStartNumbReaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckNumbReactionToState");

	Params::BP_CharacterLocomotionComponent_C_CheckNumbReactionToState Parms{};

	Parms.InActionFinishReason = InActionFinishReason;
	Parms.InStartNumbReactionStatus = InStartNumbReactionStatus;
	Parms.InIsFront = InIsFront;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartNumbReaction != nullptr)
		*IsStartNumbReaction = Parms.IsStartNumbReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckRevengeDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeRevengeDash                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckRevengeDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeRevengeDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckRevengeDash");

	Params::BP_CharacterLocomotionComponent_C_CheckRevengeDash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeRevengeDash != nullptr)
		*ChangeRevengeDash = Parms.ChangeRevengeDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckShortDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartShortDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckShortDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckShortDash");

	Params::BP_CharacterLocomotionComponent_C_CheckShortDash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartShortDash != nullptr)
		*IsStartShortDash = Parms.IsStartShortDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckShortDashTurn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartShortDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckShortDashTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckShortDashTurn");

	Params::BP_CharacterLocomotionComponent_C_CheckShortDashTurn Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartShortDash != nullptr)
		*IsStartShortDash = Parms.IsStartShortDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSPCosumableDragonDashBK
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsAbleBK                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckSPCosumableDragonDashBK(bool* IsAbleBK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckSPCosumableDragonDashBK");

	Params::BP_CharacterLocomotionComponent_C_CheckSPCosumableDragonDashBK Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAbleBK != nullptr)
		*IsAbleBK = Parms.IsAbleBK;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InChangeJumpToFly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeStep                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckStep(bool InChangeJumpToFly, EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckStep");

	Params::BP_CharacterLocomotionComponent_C_CheckStep Parms{};

	Parms.InChangeJumpToFly = InChangeJumpToFly;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeStep != nullptr)
		*ChangeStep = Parms.ChangeStep;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStrutJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeJump                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckStrutJump(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckStrutJump");

	Params::BP_CharacterLocomotionComponent_C_CheckStrutJump Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeJump != nullptr)
		*ChangeJump = Parms.ChangeJump;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStunReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartStunReaction                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckStunReaction(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartStunReaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckStunReaction");

	Params::BP_CharacterLocomotionComponent_C_CheckStunReaction Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartStunReaction != nullptr)
		*IsStartStunReaction = Parms.IsStartStunReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckStunReactionToState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStunReactionState                 InStartStunReactionStatus                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsFront                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartStunReaction                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckStunReactionToState(EKoratCharacterActionFinishReason InActionFinishReason, EKoratStunReactionState InStartStunReactionStatus, bool InIsFront, bool* IsStartStunReaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckStunReactionToState");

	Params::BP_CharacterLocomotionComponent_C_CheckStunReactionToState Parms{};

	Parms.InActionFinishReason = InActionFinishReason;
	Parms.InStartStunReactionStatus = InStartStunReactionStatus;
	Parms.InIsFront = InIsFront;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartStunReaction != nullptr)
		*IsStartStunReaction = Parms.IsStartStunReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSuperHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartSubState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckSuperHighSpeedMove(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckSuperHighSpeedMove");

	Params::BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMove Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartSubState != nullptr)
		*IsStartSubState = Parms.IsStartSubState;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.CheckSuperHighSpeedMoveStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartSubState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::CheckSuperHighSpeedMoveStr(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "CheckSuperHighSpeedMoveStr");

	Params::BP_CharacterLocomotionComponent_C_CheckSuperHighSpeedMoveStr Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartSubState != nullptr)
		*IsStartSubState = Parms.IsStartSubState;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Clear Velocity Dash at Start
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::Clear_Velocity_Dash_at_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Clear Velocity Dash at Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ClearCharacterRotationPitch(bool InTeleportPhysics, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ClearCharacterRotationPitch");

	Params::BP_CharacterLocomotionComponent_C_ClearCharacterRotationPitch Parms{};

	Parms.InTeleportPhysics = InTeleportPhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearInput
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ClearInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ClearInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearLocomotionSubStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ClearLocomotionSubStatus(EKoratLocomotionState InLocomotionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ClearLocomotionSubStatus");

	Params::BP_CharacterLocomotionComponent_C_ClearLocomotionSubStatus Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ClearSubStatus
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ClearSubStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ClearSubStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ConsumeSPDragonDashBK
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ConsumeSPDragonDashBK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ConsumeSPDragonDashBK");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugCalcHitInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HitDotVar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DebugCalcHitInfo(double HitDotVar, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugCalcHitInfo");

	Params::BP_CharacterLocomotionComponent_C_DebugCalcHitInfo Parms{};

	Parms.HitDotVar = HitDotVar;
	Parms.HitNormal = std::move(HitNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugDrawText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TextLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           TestBaseActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DebugDrawText(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, class AActor* Scale, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugDrawText");

	Params::BP_CharacterLocomotionComponent_C_DebugDrawText Parms{};

	Parms.TextLocation = std::move(TextLocation);
	Parms.Text = std::move(Text);
	Parms.TestBaseActor = TestBaseActor;
	Parms.TextColor = std::move(TextColor);
	Parms.Scale = Scale;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugInput
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::DebugInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugLockOnChange
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::DebugLockOnChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugLockOnChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugPrint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::DebugPrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugPrint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DebugPrintString
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    InPrintToScreen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DebugPrintString(const class FString& InString, bool InPrintToScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DebugPrintString");

	Params::BP_CharacterLocomotionComponent_C_DebugPrintString Parms{};

	Parms.InString = std::move(InString);
	Parms.InPrintToScreen = InPrintToScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DragonDashMoveInputX(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DragonDashMoveInputX");

	Params::BP_CharacterLocomotionComponent_C_DragonDashMoveInputX Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputY
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DragonDashMoveInputY(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DragonDashMoveInputY");

	Params::BP_CharacterLocomotionComponent_C_DragonDashMoveInputY Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.DragonDashMoveInputZ
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::DragonDashMoveInputZ(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "DragonDashMoveInputZ");

	Params::BP_CharacterLocomotionComponent_C_DragonDashMoveInputZ Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.EndMobileMonitoring
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::EndMobileMonitoring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "EndMobileMonitoring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ExecuteUbergraph_BP_CharacterLocomotionComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ExecuteUbergraph_BP_CharacterLocomotionComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ExecuteUbergraph_BP_CharacterLocomotionComponent");

	Params::BP_CharacterLocomotionComponent_C_ExecuteUbergraph_BP_CharacterLocomotionComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.FinishRevengeDash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::FinishRevengeDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "FinishRevengeDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Get Dash Input Vector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InInputVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutInputVector                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutIsInputNeutral                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Get_Dash_Input_Vector(const struct FVector& InInputVector, struct FVector* OutInputVector, bool* OutIsInputNeutral)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Get Dash Input Vector");

	Params::BP_CharacterLocomotionComponent_C_Get_Dash_Input_Vector Parms{};

	Parms.InInputVector = std::move(InInputVector);

	UObject::ProcessEvent(Func, &Parms);

	if (OutInputVector != nullptr)
		*OutInputVector = std::move(Parms.OutInputVector);

	if (OutIsInputNeutral != nullptr)
		*OutIsInputNeutral = Parms.OutIsInputNeutral;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetAddMovementInputVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InInputWorldDirectionXY                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InInputValueXY                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InputWorldDirection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ScaleValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetAddMovementInputVector(const struct FVector& InInputWorldDirectionXY, double InInputValueXY, struct FVector* InputWorldDirection, double* ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetAddMovementInputVector");

	Params::BP_CharacterLocomotionComponent_C_GetAddMovementInputVector Parms{};

	Parms.InInputWorldDirectionXY = std::move(InInputWorldDirectionXY);
	Parms.InInputValueXY = InInputValueXY;

	UObject::ProcessEvent(Func, &Parms);

	if (InputWorldDirection != nullptr)
		*InputWorldDirection = std::move(Parms.InputWorldDirection);

	if (ScaleValue != nullptr)
		*ScaleValue = Parms.ScaleValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastSkill1DashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDragonHomingState                 BlastDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlastSkill1DashStatus(EKoratDragonHomingState* BlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlastSkill1DashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetBlastSkill1DashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlastDashStatus != nullptr)
		*BlastDashStatus = Parms.BlastDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastSkill2DashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDragonHomingState                 BlastDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlastSkill2DashStatus(EKoratDragonHomingState* BlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlastSkill2DashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetBlastSkill2DashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlastDashStatus != nullptr)
		*BlastDashStatus = Parms.BlastDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlastUltimateDashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDragonHomingState                 BlastDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlastUltimateDashStatus(EKoratDragonHomingState* BlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlastUltimateDashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetBlastUltimateDashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlastDashStatus != nullptr)
		*BlastDashStatus = Parms.BlastDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowHitForecast
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHit                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       MapAttribute                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlowHitForecast(bool* IsHit, struct FVector* Location, double* HitTime, struct FKoratMapAttributeDataList* MapAttribute, struct FVector* HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlowHitForecast");

	Params::BP_CharacterLocomotionComponent_C_GetBlowHitForecast Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsHit != nullptr)
		*IsHit = Parms.IsHit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (HitTime != nullptr)
		*HitTime = Parms.HitTime;

	if (MapAttribute != nullptr)
		*MapAttribute = std::move(Parms.MapAttribute);

	if (HitNormal != nullptr)
		*HitNormal = std::move(Parms.HitNormal);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowHitForecastSaveInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsHit                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       MapAttribute                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                HitPhysMat                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_CharacterLocomotionComponent_C::GetBlowHitForecastSaveInfo(bool* IsHit, struct FVector* Location, double* HitTime, struct FKoratMapAttributeDataList* MapAttribute, struct FVector* HitNormal, class UPhysicalMaterial** HitPhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, struct FHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlowHitForecastSaveInfo");

	Params::BP_CharacterLocomotionComponent_C_GetBlowHitForecastSaveInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsHit != nullptr)
		*IsHit = Parms.IsHit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (HitTime != nullptr)
		*HitTime = Parms.HitTime;

	if (MapAttribute != nullptr)
		*MapAttribute = std::move(Parms.MapAttribute);

	if (HitNormal != nullptr)
		*HitNormal = std::move(Parms.HitNormal);

	if (HitPhysMat != nullptr)
		*HitPhysMat = Parms.HitPhysMat;

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;

	if (HitComponent != nullptr)
		*HitComponent = Parms.HitComponent;

	if (HitBoneName != nullptr)
		*HitBoneName = Parms.HitBoneName;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratBlowState                         BlowStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratBlowType                          BlowType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BlowIsFront                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratHitBackMovementData        HitBackData                                            (Parm, OutParm)
// double                                  BlowHitSpeedNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowHitSpeedParallel                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundSSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundMSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BlowReactionLevel                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlowInfo(EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* HitBackData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlowInfo");

	Params::BP_CharacterLocomotionComponent_C_GetBlowInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlowStatus != nullptr)
		*BlowStatus = Parms.BlowStatus;

	if (BlowType != nullptr)
		*BlowType = Parms.BlowType;

	if (BlowIsFront != nullptr)
		*BlowIsFront = Parms.BlowIsFront;

	if (HitBackData != nullptr)
		*HitBackData = std::move(Parms.HitBackData);

	if (BlowHitSpeedNormal != nullptr)
		*BlowHitSpeedNormal = Parms.BlowHitSpeedNormal;

	if (BlowHitSpeedParallel != nullptr)
		*BlowHitSpeedParallel = Parms.BlowHitSpeedParallel;

	if (BlowBoundSSpeedMax != nullptr)
		*BlowBoundSSpeedMax = Parms.BlowBoundSSpeedMax;

	if (BlowBoundMSpeedMax != nullptr)
		*BlowBoundMSpeedMax = Parms.BlowBoundMSpeedMax;

	if (BlowReactionLevel != nullptr)
		*BlowReactionLevel = Parms.BlowReactionLevel;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBlowStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratBlowState                         BlowStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBlowStatus(EKoratBlowState* BlowStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBlowStatus");

	Params::BP_CharacterLocomotionComponent_C_GetBlowStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlowStatus != nullptr)
		*BlowStatus = Parms.BlowStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBPCharacterLocomotionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*LocomotionComponent                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBPCharacterLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBPCharacterLocomotionComponent");

	Params::BP_CharacterLocomotionComponent_C_GetBPCharacterLocomotionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionComponent != nullptr)
		*LocomotionComponent = Parms.LocomotionComponent;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBPCharacterMontageComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterMontageComponent_C*  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBPCharacterMontageComponent(class UBP_CharacterMontageComponent_C** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBPCharacterMontageComponent");

	Params::BP_CharacterLocomotionComponent_C_GetBPCharacterMontageComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBurstSmashInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBurstSmashInfo(EKoratZBurstDashState* ZBurstDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBurstSmashInfo");

	Params::BP_CharacterLocomotionComponent_C_GetBurstSmashInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetBurstSmashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetBurstSmashStatus(EKoratZBurstDashState* ZBurstDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetBurstSmashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetBurstSmashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCameraVirtualTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetCameraVirtualTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetCameraVirtualTargetLocation");

	Params::BP_CharacterLocomotionComponent_C_GetCameraVirtualTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUkemiInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDashUkemiState                    DashUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUkemiType                     DashUkemiType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDashUkemiInfo(EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDashUkemiInfo");

	Params::BP_CharacterLocomotionComponent_C_GetDashUkemiInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashUkemiStatus != nullptr)
		*DashUkemiStatus = Parms.DashUkemiStatus;

	if (DashUkemiType != nullptr)
		*DashUkemiType = Parms.DashUkemiType;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUkemiStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDashUkemiState                    DashUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDashUkemiStatus(EKoratDashUkemiState* DashUkemiStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDashUkemiStatus");

	Params::BP_CharacterLocomotionComponent_C_GetDashUkemiStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashUkemiStatus != nullptr)
		*DashUkemiStatus = Parms.DashUkemiStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUpDownInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDashUpDownState                   DashUpDownStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUpDownType                    DashUpDownType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDashUpDownInfo(EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDashUpDownInfo");

	Params::BP_CharacterLocomotionComponent_C_GetDashUpDownInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashUpDownStatus != nullptr)
		*DashUpDownStatus = Parms.DashUpDownStatus;

	if (DashUpDownType != nullptr)
		*DashUpDownType = Parms.DashUpDownType;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashUpDownStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDashUpDownState                   DashUpDownStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDashUpDownStatus(EKoratDashUpDownState* DashUpDownStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDashUpDownStatus");

	Params::BP_CharacterLocomotionComponent_C_GetDashUpDownStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashUpDownStatus != nullptr)
		*DashUpDownStatus = Parms.DashUpDownStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDashVectorAndRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InInputVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsOnlyYawRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetDashVectorAndRotation(const struct FVector& InInputVector, bool InIsOnlyYawRotation, struct FVector* OutVector, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDashVectorAndRotation");

	Params::BP_CharacterLocomotionComponent_C_GetDashVectorAndRotation Parms{};

	Parms.InInputVector = std::move(InInputVector);
	Parms.InIsOnlyYawRotation = InIsOnlyYawRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetDragonDashRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDragonDashRotation");

	Params::BP_CharacterLocomotionComponent_C_GetDragonDashRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashRotationPitchRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  PitchMin                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PitchMax                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDragonDashRotationPitchRange(double* PitchMin, double* PitchMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDragonDashRotationPitchRange");

	Params::BP_CharacterLocomotionComponent_C_GetDragonDashRotationPitchRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PitchMin != nullptr)
		*PitchMin = Parms.PitchMin;

	if (PitchMax != nullptr)
		*PitchMax = Parms.PitchMax;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashSpCostIN
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  SpCostIN                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDragonDashSpCostIN(double* SpCostIN)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDragonDashSpCostIN");

	Params::BP_CharacterLocomotionComponent_C_GetDragonDashSpCostIN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpCostIN != nullptr)
		*SpCostIN = Parms.SpCostIN;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonDashStateMovementParameter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   InDragonDashStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseParameter                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratCharacterDataDragonDashMovementParameterMovementParameter                                      (Parm, OutParm, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetDragonDashStateMovementParameter(EKoratDragonDashState InDragonDashStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDragonDashStateMovementParameter");

	Params::BP_CharacterLocomotionComponent_C_GetDragonDashStateMovementParameter Parms{};

	Parms.InDragonDashStatus = InDragonDashStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUseParameter != nullptr)
		*IsUseParameter = Parms.IsUseParameter;

	if (MovementParameter != nullptr)
		*MovementParameter = std::move(Parms.MovementParameter);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetDragonHomingStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDragonHomingState                 DragonHomingStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetDragonHomingStatus(EKoratDragonHomingState* DragonHomingStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetDragonHomingStatus");

	Params::BP_CharacterLocomotionComponent_C_GetDragonHomingStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DragonHomingStatus != nullptr)
		*DragonHomingStatus = Parms.DragonHomingStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHighSpeedMoveForecast
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDetermined                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  RemainingTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetHighSpeedMoveForecast(bool* IsDetermined, struct FVector* Location, struct FRotator* Rotation, double* RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetHighSpeedMoveForecast");

	Params::BP_CharacterLocomotionComponent_C_GetHighSpeedMoveForecast Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDetermined != nullptr)
		*IsDetermined = Parms.IsDetermined;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	if (RemainingTime != nullptr)
		*RemainingTime = Parms.RemainingTime;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHighSpeedMoveStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetHighSpeedMoveStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetHighSpeedMoveStatus");

	Params::BP_CharacterLocomotionComponent_C_GetHighSpeedMoveStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetHitBackData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratHitBackMovementData        HitBackData                                            (Parm, OutParm)

void UBP_CharacterLocomotionComponent_C::GetHitBackData(struct FKoratHitBackMovementData* HitBackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetHitBackData");

	Params::BP_CharacterLocomotionComponent_C_GetHitBackData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HitBackData != nullptr)
		*HitBackData = std::move(Parms.HitBackData);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIdleMoveActionDetail
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             OutAction                                              (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// class FName                             OutSection                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterLocomotionDetailStatus   OutDetailStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIdleMoveActionDetail(struct FKoratActionDataList* OutAction, class FName* OutSection, EKoratCharacterLocomotionDetailStatus* OutDetailStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIdleMoveActionDetail");

	Params::BP_CharacterLocomotionComponent_C_GetIdleMoveActionDetail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutAction != nullptr)
		*OutAction = std::move(Parms.OutAction);

	if (OutSection != nullptr)
		*OutSection = Parms.OutSection;

	if (OutDetailStatus != nullptr)
		*OutDetailStatus = Parms.OutDetailStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsEnableMoveEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIsEnableMoveEffect(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIsEnableMoveEffect");

	Params::BP_CharacterLocomotionComponent_C_GetIsEnableMoveEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsInAir
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIsInAir(bool* IsInAir_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIsInAir");

	Params::BP_CharacterLocomotionComponent_C_GetIsInAir Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsOnGround
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOnGround                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIsOnGround(bool* IsOnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIsOnGround");

	Params::BP_CharacterLocomotionComponent_C_GetIsOnGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOnGround != nullptr)
		*IsOnGround = Parms.IsOnGround;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsRotateAutoIdle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OutIsRotateLanded                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIsRotateAutoIdle(bool* OutIsRotateLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIsRotateAutoIdle");

	Params::BP_CharacterLocomotionComponent_C_GetIsRotateAutoIdle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsRotateLanded != nullptr)
		*OutIsRotateLanded = Parms.OutIsRotateLanded;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetIsRotateLanded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OutIsRotateLanded                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetIsRotateLanded(bool* OutIsRotateLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetIsRotateLanded");

	Params::BP_CharacterLocomotionComponent_C_GetIsRotateLanded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsRotateLanded != nullptr)
		*OutIsRotateLanded = Parms.OutIsRotateLanded;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetKnockBackVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          KnockBackVector                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetKnockBackVector(struct FVector* KnockBackVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetKnockBackVector");

	Params::BP_CharacterLocomotionComponent_C_GetKnockBackVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KnockBackVector != nullptr)
		*KnockBackVector = std::move(Parms.KnockBackVector);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLatestActionIdleType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratActionIdleType                    ActionIdleType_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLatestActionIdleType(EKoratActionIdleType* ActionIdleType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLatestActionIdleType");

	Params::BP_CharacterLocomotionComponent_C_GetLatestActionIdleType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionIdleType_0 != nullptr)
		*ActionIdleType_0 = Parms.ActionIdleType_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLockOnMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OutIsLockOn                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLockOnMode(bool* OutIsLockOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLockOnMode");

	Params::BP_CharacterLocomotionComponent_C_GetLockOnMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsLockOn != nullptr)
		*OutIsLockOn = Parms.OutIsLockOn;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionComponent");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterNumbReactionState             State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Front                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionNumbReaction(ECharacterNumbReactionState* State, bool* Front)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionNumbReaction");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionNumbReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = Parms.State;

	if (Front != nullptr)
		*Front = Parms.Front;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForAction(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsInAir_0, double* MaxSpeed, double* NearModeSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForAction");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed_0 != nullptr)
		*NearModeSpeed_0 = Parms.NearModeSpeed_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForBurstDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CharacterSplineComponent_C*   SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  SplineNowDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForBurstDash(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForBurstDash");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;

	if (SplineNowDistance != nullptr)
		*SplineNowDistance = Parms.SplineNowDistance;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForBurstSmash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CharacterSplineComponent_C*   SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  SplineNowDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForBurstSmash(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForBurstSmash");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForBurstSmash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;

	if (SplineNowDistance != nullptr)
		*SplineNowDistance = Parms.SplineNowDistance;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForDashUkemi
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EKoratDashUkemiState                    DashUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUkemiType                     DashUkemiType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForecastBlowHit                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitLocation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForecastBlowHitTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       ForecastBlowHitMapAttribute                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitNormal                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForDashUkemi(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation, EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForDashUkemi");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (InputVector_0 != nullptr)
		*InputVector_0 = std::move(Parms.InputVector_0);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (DragonDashStatus_0 != nullptr)
		*DragonDashStatus_0 = Parms.DragonDashStatus_0;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);

	if (DashUkemiStatus != nullptr)
		*DashUkemiStatus = Parms.DashUkemiStatus;

	if (DashUkemiType != nullptr)
		*DashUkemiType = Parms.DashUkemiType;

	if (IsForecastBlowHit != nullptr)
		*IsForecastBlowHit = Parms.IsForecastBlowHit;

	if (ForecastBlowHitLocation != nullptr)
		*ForecastBlowHitLocation = std::move(Parms.ForecastBlowHitLocation);

	if (ForecastBlowHitTime != nullptr)
		*ForecastBlowHitTime = Parms.ForecastBlowHitTime;

	if (ForecastBlowHitMapAttribute != nullptr)
		*ForecastBlowHitMapAttribute = std::move(Parms.ForecastBlowHitMapAttribute);

	if (ForecastBlowHitNormal != nullptr)
		*ForecastBlowHitNormal = std::move(Parms.ForecastBlowHitNormal);

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForDashUpDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUpDownState                   DashUpDownStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUpDownType                    DashUpDownType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForDashUpDown(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForDashUpDown");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForDashUpDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (DashUpDownStatus != nullptr)
		*DashUpDownStatus = Parms.DashUpDownStatus;

	if (DashUpDownType != nullptr)
		*DashUpDownType = Parms.DashUpDownType;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalMaxSpeed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalSpeed                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      ShortDashAdditionalSpeedCurve                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashMoveTimer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForHighSpeedMove(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratHighSpeedMoveState* HighSpeedMoveStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForHighSpeedMove");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForHighSpeedMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (TargetDistance_0 != nullptr)
		*TargetDistance_0 = Parms.TargetDistance_0;

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed_0 != nullptr)
		*NearModeSpeed_0 = Parms.NearModeSpeed_0;

	if (InputVector_0 != nullptr)
		*InputVector_0 = std::move(Parms.InputVector_0);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;

	if (ShortDashAdditionalMaxSpeed != nullptr)
		*ShortDashAdditionalMaxSpeed = Parms.ShortDashAdditionalMaxSpeed;

	if (ShortDashAdditionalSpeed != nullptr)
		*ShortDashAdditionalSpeed = Parms.ShortDashAdditionalSpeed;

	if (ShortDashAdditionalSpeedCurve != nullptr)
		*ShortDashAdditionalSpeedCurve = Parms.ShortDashAdditionalSpeedCurve;

	if (ShortDashMoveTimer != nullptr)
		*ShortDashMoveTimer = Parms.ShortDashMoveTimer;

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForIdleMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       EventHitArgHit                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsEnableMoveEffect_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectStartSpeed_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectEndSpeed_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalMaxSpeed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalSpeed                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      ShortDashAdditionalSpeedCurve                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashMoveTimer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EKoratBlowState                         BlowStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratBlowType                          BlowType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BlowIsFront                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratHitBackMovementData        BlowHitBackMovementData                                (Parm, OutParm)
// double                                  BlowHitSpeedNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowHitSpeedParallel                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundSSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundMSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BlowReactionLevel                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 DragonHomingStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 RevengeDashStatus                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestPlayIdle_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTransitionRelaxIdle_0                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratActionIdleType                    ActionIdleType_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 BlastDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForIdleMove(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, struct FHitResult* EventHitArgHit, bool* IsEnableMoveEffect_0, double* MoveEffectStartSpeed_0, double* MoveEffectEndSpeed_0, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation, EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* BlowHitBackMovementData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel, EKoratDragonHomingState* DragonHomingStatus, EKoratDragonHomingState* RevengeDashStatus, bool* IsRequestPlayIdle_0, bool* IsTransitionRelaxIdle_0, EKoratActionIdleType* ActionIdleType_0, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0, EKoratDragonHomingState* BlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForIdleMove");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForIdleMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (TargetDistance_0 != nullptr)
		*TargetDistance_0 = Parms.TargetDistance_0;

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed_0 != nullptr)
		*NearModeSpeed_0 = Parms.NearModeSpeed_0;

	if (InputVector_0 != nullptr)
		*InputVector_0 = std::move(Parms.InputVector_0);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (EventHitArgHit != nullptr)
		*EventHitArgHit = std::move(Parms.EventHitArgHit);

	if (IsEnableMoveEffect_0 != nullptr)
		*IsEnableMoveEffect_0 = Parms.IsEnableMoveEffect_0;

	if (MoveEffectStartSpeed_0 != nullptr)
		*MoveEffectStartSpeed_0 = Parms.MoveEffectStartSpeed_0;

	if (MoveEffectEndSpeed_0 != nullptr)
		*MoveEffectEndSpeed_0 = Parms.MoveEffectEndSpeed_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;

	if (ShortDashAdditionalMaxSpeed != nullptr)
		*ShortDashAdditionalMaxSpeed = Parms.ShortDashAdditionalMaxSpeed;

	if (ShortDashAdditionalSpeed != nullptr)
		*ShortDashAdditionalSpeed = Parms.ShortDashAdditionalSpeed;

	if (ShortDashAdditionalSpeedCurve != nullptr)
		*ShortDashAdditionalSpeedCurve = Parms.ShortDashAdditionalSpeedCurve;

	if (ShortDashMoveTimer != nullptr)
		*ShortDashMoveTimer = Parms.ShortDashMoveTimer;

	if (DragonDashStatus_0 != nullptr)
		*DragonDashStatus_0 = Parms.DragonDashStatus_0;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);

	if (BlowStatus != nullptr)
		*BlowStatus = Parms.BlowStatus;

	if (BlowType != nullptr)
		*BlowType = Parms.BlowType;

	if (BlowIsFront != nullptr)
		*BlowIsFront = Parms.BlowIsFront;

	if (BlowHitBackMovementData != nullptr)
		*BlowHitBackMovementData = std::move(Parms.BlowHitBackMovementData);

	if (BlowHitSpeedNormal != nullptr)
		*BlowHitSpeedNormal = Parms.BlowHitSpeedNormal;

	if (BlowHitSpeedParallel != nullptr)
		*BlowHitSpeedParallel = Parms.BlowHitSpeedParallel;

	if (BlowBoundSSpeedMax != nullptr)
		*BlowBoundSSpeedMax = Parms.BlowBoundSSpeedMax;

	if (BlowBoundMSpeedMax != nullptr)
		*BlowBoundMSpeedMax = Parms.BlowBoundMSpeedMax;

	if (BlowReactionLevel != nullptr)
		*BlowReactionLevel = Parms.BlowReactionLevel;

	if (DragonHomingStatus != nullptr)
		*DragonHomingStatus = Parms.DragonHomingStatus;

	if (RevengeDashStatus != nullptr)
		*RevengeDashStatus = Parms.RevengeDashStatus;

	if (IsRequestPlayIdle_0 != nullptr)
		*IsRequestPlayIdle_0 = Parms.IsRequestPlayIdle_0;

	if (IsTransitionRelaxIdle_0 != nullptr)
		*IsTransitionRelaxIdle_0 = Parms.IsTransitionRelaxIdle_0;

	if (ActionIdleType_0 != nullptr)
		*ActionIdleType_0 = Parms.ActionIdleType_0;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;

	if (BlastDashStatus != nullptr)
		*BlastDashStatus = Parms.BlastDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratJumpState                         JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForJump(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, struct FVector* Velocity_0, double* VelocityZ_0, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForJump");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForLocomotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratJumpState                         JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepState                         StepStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepType                          StepType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForLocomotion(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, EKoratStepState* StepStatus, EKoratStepType* StepType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForLocomotion");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForLocomotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;

	if (StepStatus != nullptr)
		*StepStatus = Parms.StepStatus;

	if (StepType != nullptr)
		*StepType = Parms.StepType;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForMobileMonitoring
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsObstacleDetection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForMobileMonitoring(bool* IsObstacleDetection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForMobileMonitoring");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMobileMonitoring Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsObstacleDetection != nullptr)
		*IsObstacleDetection = Parms.IsObstacleDetection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForMoveStandUp(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForMoveStandUp");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForMoveStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (TargetDistance_0 != nullptr)
		*TargetDistance_0 = Parms.TargetDistance_0;

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed_0 != nullptr)
		*NearModeSpeed_0 = Parms.NearModeSpeed_0;

	if (InputVector_0 != nullptr)
		*InputVector_0 = std::move(Parms.InputVector_0);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForNumbReaction(EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForNumbReaction");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForNumbReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForPostPhysics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnableMoveEffect_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectStartSpeed_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectEndSpeed_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForPostPhysics(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, bool* IsEnableMoveEffect_0, double* MoveEffectStartSpeed_0, double* MoveEffectEndSpeed_0, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForPostPhysics");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForPostPhysics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);

	if (VelocityZ_0 != nullptr)
		*VelocityZ_0 = Parms.VelocityZ_0;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed_0 != nullptr)
		*NearModeSpeed_0 = Parms.NearModeSpeed_0;

	if (InputVector_0 != nullptr)
		*InputVector_0 = std::move(Parms.InputVector_0);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (IsEnableMoveEffect_0 != nullptr)
		*IsEnableMoveEffect_0 = Parms.IsEnableMoveEffect_0;

	if (MoveEffectStartSpeed_0 != nullptr)
		*MoveEffectStartSpeed_0 = Parms.MoveEffectStartSpeed_0;

	if (MoveEffectEndSpeed_0 != nullptr)
		*MoveEffectEndSpeed_0 = Parms.MoveEffectEndSpeed_0;

	if (DragonDashStatus_0 != nullptr)
		*DragonDashStatus_0 = Parms.DragonDashStatus_0;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForStanReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStunReactionState                 StunReactionStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StunReactionIsFront                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForStanReaction(EKoratLocomotionState* LocomotionStatus, EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForStanReaction");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStanReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (StunReactionStatus != nullptr)
		*StunReactionStatus = Parms.StunReactionStatus;

	if (StunReactionIsFront != nullptr)
		*StunReactionIsFront = Parms.StunReactionIsFront;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepState                         StepStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepType                          StepType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForStep(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratStepState* StepStatus, EKoratStepType* StepType, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForStep");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (StepStatus != nullptr)
		*StepStatus = Parms.StepStatus;

	if (StepType != nullptr)
		*StepType = Parms.StepType;

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForWallUkemi
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratWallUkemiState                    WallUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForecastBlowHit                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitLocation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForecastBlowHitTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       ForecastBlowHitMapAttribute                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitNormal                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine_0                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForWallUkemi(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratWallUkemiState* WallUkemiStatus, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForWallUkemi");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForWallUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (ZSpeed_0 != nullptr)
		*ZSpeed_0 = Parms.ZSpeed_0;

	if (LastVelocityRot_0 != nullptr)
		*LastVelocityRot_0 = std::move(Parms.LastVelocityRot_0);

	if (CharacterRot_0 != nullptr)
		*CharacterRot_0 = std::move(Parms.CharacterRot_0);

	if (ToTargetRotation_0 != nullptr)
		*ToTargetRotation_0 = std::move(Parms.ToTargetRotation_0);

	if (DirectionY_0 != nullptr)
		*DirectionY_0 = Parms.DirectionY_0;

	if (DirectionZ_0 != nullptr)
		*DirectionZ_0 = Parms.DirectionZ_0;

	if (NearMoveAlpha_0 != nullptr)
		*NearMoveAlpha_0 = Parms.NearMoveAlpha_0;

	if (BattleMoveAlpha_0 != nullptr)
		*BattleMoveAlpha_0 = Parms.BattleMoveAlpha_0;

	if (IsInAir_0 != nullptr)
		*IsInAir_0 = Parms.IsInAir_0;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (WallUkemiStatus != nullptr)
		*WallUkemiStatus = Parms.WallUkemiStatus;

	if (IsForecastBlowHit != nullptr)
		*IsForecastBlowHit = Parms.IsForecastBlowHit;

	if (ForecastBlowHitLocation != nullptr)
		*ForecastBlowHitLocation = std::move(Parms.ForecastBlowHitLocation);

	if (ForecastBlowHitTime != nullptr)
		*ForecastBlowHitTime = Parms.ForecastBlowHitTime;

	if (ForecastBlowHitMapAttribute != nullptr)
		*ForecastBlowHitMapAttribute = std::move(Parms.ForecastBlowHitMapAttribute);

	if (ForecastBlowHitNormal != nullptr)
		*ForecastBlowHitNormal = std::move(Parms.ForecastBlowHitNormal);

	if (IsRequestResetStateMachine_0 != nullptr)
		*IsRequestResetStateMachine_0 = Parms.IsRequestResetStateMachine_0;

	if (ResetStateMachineStatus_0 != nullptr)
		*ResetStateMachineStatus_0 = Parms.ResetStateMachineStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  NowMaxSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterMaxSpeed(double* NowMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterMaxSpeed");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterMaxSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NowMaxSpeed != nullptr)
		*NowMaxSpeed = Parms.NowMaxSpeed;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterMoveStandUpState              ActionStatus                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ActionIsFront                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterMoveStandUpDirection          ActionDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterMoveStandUp(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterMoveStandUp");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterMoveStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionStatus != nullptr)
		*ActionStatus = Parms.ActionStatus;

	if (ActionIsFront != nullptr)
		*ActionIsFront = Parms.ActionIsFront;

	if (ActionDirection != nullptr)
		*ActionDirection = Parms.ActionDirection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterSuperHighSpeedMoveStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterSuperHighSpeedMoveStr(EKoratHighSpeedMoveState* HighSpeedMoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterSuperHighSpeedMoveStr");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterSuperHighSpeedMoveStr Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSplineComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionSplineComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionSplineComponent");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionSplineComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSubDetailStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterLocomotionDetailStatus   OutDetailStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionSubDetailStatus(EKoratLocomotionState InLocomotionStatus, EKoratCharacterLocomotionDetailStatus* OutDetailStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionSubDetailStatus");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionSubDetailStatus Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (OutDetailStatus != nullptr)
		*OutDetailStatus = Parms.OutDetailStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLookAtRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UBP_CharacterLocomotionComponent_C::GetLookAtRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLookAtRotation");

	Params::BP_CharacterLocomotionComponent_C_GetLookAtRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMontageComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetMontageComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetMontageComponent");

	Params::BP_CharacterLocomotionComponent_C_GetMontageComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveLookAtRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsMoveInput                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutLookAtRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetMoveLookAtRotation(bool InIsMoveInput, struct FRotator* OutLookAtRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetMoveLookAtRotation");

	Params::BP_CharacterLocomotionComponent_C_GetMoveLookAtRotation Parms{};

	Parms.InIsMoveInput = InIsMoveInput;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLookAtRotation != nullptr)
		*OutLookAtRotation = std::move(Parms.OutLookAtRotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMovementModeInternal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMovementMode                           MovementMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetMovementModeInternal(EMovementMode* MovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetMovementModeInternal");

	Params::BP_CharacterLocomotionComponent_C_GetMovementModeInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode != nullptr)
		*MovementMode = Parms.MovementMode;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveStandUpInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECharacterMoveStandUpState              ActionStatus                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ActionIsFront                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterMoveStandUpDirection          ActionDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetMoveStandUpInfo(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetMoveStandUpInfo");

	Params::BP_CharacterLocomotionComponent_C_GetMoveStandUpInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionStatus != nullptr)
		*ActionStatus = Parms.ActionStatus;

	if (ActionIsFront != nullptr)
		*ActionIsFront = Parms.ActionIsFront;

	if (ActionDirection != nullptr)
		*ActionDirection = Parms.ActionDirection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetMoveStandUpStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECharacterMoveStandUpState              ActionStatus                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetMoveStandUpStatus(ECharacterMoveStandUpState* ActionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetMoveStandUpStatus");

	Params::BP_CharacterLocomotionComponent_C_GetMoveStandUpStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionStatus != nullptr)
		*ActionStatus = Parms.ActionStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetNumbReactionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECharacterNumbReactionState             NumbReactionStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetNumbReactionStatus(ECharacterNumbReactionState* NumbReactionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetNumbReactionStatus");

	Params::BP_CharacterLocomotionComponent_C_GetNumbReactionStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NumbReactionStatus != nullptr)
		*NumbReactionStatus = Parms.NumbReactionStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetOnlyYawRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         LookAtRotation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UBP_CharacterLocomotionComponent_C::GetOnlyYawRotation(const struct FRotator& LookAtRotation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetOnlyYawRotation");

	Params::BP_CharacterLocomotionComponent_C_GetOnlyYawRotation Parms{};

	Parms.LookAtRotation_0 = std::move(LookAtRotation_0);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetReplaceSubInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SubInstanceName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SubInstanceTagName                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           SubInstanceClass                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetReplaceSubInstance(class FName SubInstanceName, class FName* SubInstanceTagName, class UClass** SubInstanceClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetReplaceSubInstance");

	Params::BP_CharacterLocomotionComponent_C_GetReplaceSubInstance Parms{};

	Parms.SubInstanceName = SubInstanceName;

	UObject::ProcessEvent(Func, &Parms);

	if (SubInstanceTagName != nullptr)
		*SubInstanceTagName = Parms.SubInstanceTagName;

	if (SubInstanceClass != nullptr)
		*SubInstanceClass = Parms.SubInstanceClass;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRequestAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRequestAnimData                RequestAnimData                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetRequestAnim(struct FFRequestAnimData* RequestAnimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetRequestAnim");

	Params::BP_CharacterLocomotionComponent_C_GetRequestAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RequestAnimData != nullptr)
		*RequestAnimData = std::move(Parms.RequestAnimData);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRevengeDashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratDragonHomingState                 RevengeDashStatus                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetRevengeDashStatus(EKoratDragonHomingState* RevengeDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetRevengeDashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetRevengeDashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RevengeDashStatus != nullptr)
		*RevengeDashStatus = Parms.RevengeDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRotationInternal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetRotationInternal(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetRotationInternal");

	Params::BP_CharacterLocomotionComponent_C_GetRotationInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRunningActionLocomotionSub
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratActionDataList             OutAction                                              (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// class FName                             OutSection                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetRunningActionLocomotionSub(EKoratLocomotionState InLocomotionStatus, struct FKoratActionDataList* OutAction, class FName* OutSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetRunningActionLocomotionSub");

	Params::BP_CharacterLocomotionComponent_C_GetRunningActionLocomotionSub Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (OutAction != nullptr)
		*OutAction = std::move(Parms.OutAction);

	if (OutSection != nullptr)
		*OutSection = Parms.OutSection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetShortDashInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalMaxSpeed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalSpeed                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      ShortDashAdditionalSpeedCurve                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashMoveTimer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetShortDashInfo(EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetShortDashInfo");

	Params::BP_CharacterLocomotionComponent_C_GetShortDashInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;

	if (ShortDashAdditionalMaxSpeed != nullptr)
		*ShortDashAdditionalMaxSpeed = Parms.ShortDashAdditionalMaxSpeed;

	if (ShortDashAdditionalSpeed != nullptr)
		*ShortDashAdditionalSpeed = Parms.ShortDashAdditionalSpeed;

	if (ShortDashAdditionalSpeedCurve != nullptr)
		*ShortDashAdditionalSpeedCurve = Parms.ShortDashAdditionalSpeedCurve;

	if (ShortDashMoveTimer != nullptr)
		*ShortDashMoveTimer = Parms.ShortDashMoveTimer;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetShortDashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetShortDashStatus(EKoratShortDashState* ShortDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetShortDashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetShortDashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStepType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratStepType                          StepType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetStepType(EKoratStepType* StepType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetStepType");

	Params::BP_CharacterLocomotionComponent_C_GetStepType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StepType != nullptr)
		*StepType = Parms.StepType;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStrutJumpStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECharacterStrutJumpState                JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetStrutJumpStatus(ECharacterStrutJumpState* JumpStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetStrutJumpStatus");

	Params::BP_CharacterLocomotionComponent_C_GetStrutJumpStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStunReactionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratStunReactionState                 StunReactionStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StunReactionIsFront                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetStunReactionInfo(EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetStunReactionInfo");

	Params::BP_CharacterLocomotionComponent_C_GetStunReactionInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StunReactionStatus != nullptr)
		*StunReactionStatus = Parms.StunReactionStatus;

	if (StunReactionIsFront != nullptr)
		*StunReactionIsFront = Parms.StunReactionIsFront;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStunReactionStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratStunReactionState                 StunReactionStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetStunReactionStatus(EKoratStunReactionState* StunReactionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetStunReactionStatus");

	Params::BP_CharacterLocomotionComponent_C_GetStunReactionStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StunReactionStatus != nullptr)
		*StunReactionStatus = Parms.StunReactionStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastSkill1Dash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubBlastDash_C*SubBlastDash                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubBlastSkill1Dash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubBlastSkill1Dash");

	Params::BP_CharacterLocomotionComponent_C_GetSubBlastSkill1Dash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubBlastDash != nullptr)
		*SubBlastDash = Parms.SubBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastSkill2Dash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubBlastDash_C*SubBlastDash                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubBlastSkill2Dash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubBlastSkill2Dash");

	Params::BP_CharacterLocomotionComponent_C_GetSubBlastSkill2Dash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubBlastDash != nullptr)
		*SubBlastDash = Parms.SubBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlastUltimateDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubBlastDash_C*SubBlastDash                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubBlastUltimateDash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubBlastUltimateDash");

	Params::BP_CharacterLocomotionComponent_C_GetSubBlastUltimateDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubBlastDash != nullptr)
		*SubBlastDash = Parms.SubBlastDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBurstSmash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubBurstSmash_C*SubBurstSmash                                          (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubBurstSmash(class UBP_CharacterLocomotionSubBurstSmash_C** SubBurstSmash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubBurstSmash");

	Params::BP_CharacterLocomotionComponent_C_GetSubBurstSmash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubBurstSmash != nullptr)
		*SubBurstSmash = Parms.SubBurstSmash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubHighSpeedMove_C*SubHighSpeedMove                                       (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubHighSpeedMove(class UBP_CharacterLocomotionSubHighSpeedMove_C** SubHighSpeedMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubHighSpeedMove");

	Params::BP_CharacterLocomotionComponent_C_GetSubHighSpeedMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubHighSpeedMove != nullptr)
		*SubHighSpeedMove = Parms.SubHighSpeedMove;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubIdleMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubIdleMove_C*SubIdleMove                                            (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubIdleMove(class UBP_CharacterLocomotionSubIdleMove_C** SubIdleMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubIdleMove");

	Params::BP_CharacterLocomotionComponent_C_GetSubIdleMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubIdleMove != nullptr)
		*SubIdleMove = Parms.SubIdleMove;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubMoveStandUp_C*SubMoveStandUp                                         (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubMoveStandUp(class UBP_CharacterLocomotionSubMoveStandUp_C** SubMoveStandUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubMoveStandUp");

	Params::BP_CharacterLocomotionComponent_C_GetSubMoveStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubMoveStandUp != nullptr)
		*SubMoveStandUp = Parms.SubMoveStandUp;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubRevengeDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubRevengeDash_C*SubRevengeDash                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubRevengeDash(class UBP_CharacterLocomotionSubRevengeDash_C** SubRevengeDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubRevengeDash");

	Params::BP_CharacterLocomotionComponent_C_GetSubRevengeDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubRevengeDash != nullptr)
		*SubRevengeDash = Parms.SubRevengeDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubSuperHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubSuperHighSpeedMove_C*SubSuperHighSpeedMove                                  (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubSuperHighSpeedMove(class UBP_CharacterLocomotionSubSuperHighSpeedMove_C** SubSuperHighSpeedMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubSuperHighSpeedMove");

	Params::BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubSuperHighSpeedMove != nullptr)
		*SubSuperHighSpeedMove = Parms.SubSuperHighSpeedMove;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubSuperHighSpeedMoveStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C*SubSupeHighSpeedMoveStr                                (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubSuperHighSpeedMoveStr(class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C** SubSupeHighSpeedMoveStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubSuperHighSpeedMoveStr");

	Params::BP_CharacterLocomotionComponent_C_GetSubSuperHighSpeedMoveStr Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubSupeHighSpeedMoveStr != nullptr)
		*SubSupeHighSpeedMoveStr = Parms.SubSupeHighSpeedMoveStr;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSuperHighSpeedMoveStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSuperHighSpeedMoveStatus");

	Params::BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStrForecast
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDetermined                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  RemainingTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSuperHighSpeedMoveStrForecast(bool* IsDetermined, struct FVector* Location, struct FRotator* Rotation, double* RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSuperHighSpeedMoveStrForecast");

	Params::BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrForecast Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDetermined != nullptr)
		*IsDetermined = Parms.IsDetermined;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	if (RemainingTime != nullptr)
		*RemainingTime = Parms.RemainingTime;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSuperHighSpeedMoveStrStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSuperHighSpeedMoveStrStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSuperHighSpeedMoveStrStatus");

	Params::BP_CharacterLocomotionComponent_C_GetSuperHighSpeedMoveStrStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetTargetDistance(double* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetTargetDistance");

	Params::BP_CharacterLocomotionComponent_C_GetTargetDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetDistanceXY
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetTargetDistanceXY(double* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetTargetDistanceXY");

	Params::BP_CharacterLocomotionComponent_C_GetTargetDistanceXY Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetLocationGroundDistance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutIsHit                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetTargetLocationGroundDistance(bool* OutIsHit, double* OutDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetTargetLocationGroundDistance");

	Params::BP_CharacterLocomotionComponent_C_GetTargetLocationGroundDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsHit != nullptr)
		*OutIsHit = Parms.OutIsHit;

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetTargetLocationInternal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetTargetLocationInternal(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetTargetLocationInternal");

	Params::BP_CharacterLocomotionComponent_C_GetTargetLocationInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseCharacterRotationPitchDetail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UsePitchLimit                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchInterp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetUseCharacterRotationPitchDetail(bool* UsePitchLimit, bool* UsePitchInterp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetUseCharacterRotationPitchDetail");

	Params::BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitchDetail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitchLimit != nullptr)
		*UsePitchLimit = Parms.UsePitchLimit;

	if (UsePitchInterp != nullptr)
		*UsePitchInterp = Parms.UsePitchInterp;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseRotationPitchInternal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    UsePitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetUseRotationPitchInternal(bool* UsePitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetUseRotationPitchInternal");

	Params::BP_CharacterLocomotionComponent_C_GetUseRotationPitchInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitch != nullptr)
		*UsePitch = Parms.UsePitch;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetVelocity(struct FVector* Velocity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetVelocity");

	Params::BP_CharacterLocomotionComponent_C_GetVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity_0 != nullptr)
		*Velocity_0 = std::move(Parms.Velocity_0);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetVirtualTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetVirtualTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetVirtualTargetLocation");

	Params::BP_CharacterLocomotionComponent_C_GetVirtualTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetWallUkemiStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratWallUkemiState                    WallUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetWallUkemiStatus(EKoratWallUkemiState* WallUkemiStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetWallUkemiStatus");

	Params::BP_CharacterLocomotionComponent_C_GetWallUkemiStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WallUkemiStatus != nullptr)
		*WallUkemiStatus = Parms.WallUkemiStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashArrivalSecond
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_CharacterLocomotionComponent_C::GetZBurstDashArrivalSecond()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetZBurstDashArrivalSecond");

	Params::BP_CharacterLocomotionComponent_C_GetZBurstDashArrivalSecond Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashSplineInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterSplineComponent_C*   SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  SplineNowDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetZBurstDashSplineInfo(class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetZBurstDashSplineInfo");

	Params::BP_CharacterLocomotionComponent_C_GetZBurstDashSplineInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;

	if (SplineNowDistance != nullptr)
		*SplineNowDistance = Parms.SplineNowDistance;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetZBurstDashStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetZBurstDashStatus(EKoratZBurstDashState* ZBurstDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetZBurstDashStatus");

	Params::BP_CharacterLocomotionComponent_C_GetZBurstDashStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InitializeRotateAutoIdle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::InitializeRotateAutoIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InitializeRotateAutoIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputBattleKeyJustPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleKey                              BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputBattleKeyJustPressed(EBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputBattleKeyJustPressed");

	Params::BP_CharacterLocomotionComponent_C_InputBattleKeyJustPressed Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputBattleKeyJustReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleKey                              BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputBattleKeyJustReleased(EBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputBattleKeyJustReleased");

	Params::BP_CharacterLocomotionComponent_C_InputBattleKeyJustReleased Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputFreeCameraVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InputVector_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputFreeCameraVector(const struct FVector2D& InputVector_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputFreeCameraVector");

	Params::BP_CharacterLocomotionComponent_C_InputFreeCameraVector Parms{};

	Parms.InputVector_0 = std::move(InputVector_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyDown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputKoratBattleKeyDown(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputKoratBattleKeyDown");

	Params::BP_CharacterLocomotionComponent_C_InputKoratBattleKeyDown Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyJustPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputKoratBattleKeyJustPressed");

	Params::BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustPressed Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyJustReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputKoratBattleKeyJustReleased");

	Params::BP_CharacterLocomotionComponent_C_InputKoratBattleKeyJustReleased Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InputKoratBattleKeyUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InputKoratBattleKeyUp(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InputKoratBattleKeyUp");

	Params::BP_CharacterLocomotionComponent_C_InputKoratBattleKeyUp Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Interpolate Range Rotator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InRangeValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InRangeBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InRangeSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InValueMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InValueMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::Interpolate_Range_Rotator(double InRangeValue, double InRangeBase, double InRangeSize, const struct FRotator& InValueMin, const struct FRotator& InValueMax, struct FRotator* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Interpolate Range Rotator");

	Params::BP_CharacterLocomotionComponent_C_Interpolate_Range_Rotator Parms{};

	Parms.InRangeValue = InRangeValue;
	Parms.InRangeBase = InRangeBase;
	Parms.InRangeSize = InRangeSize;
	Parms.InValueMin = std::move(InValueMin);
	Parms.InValueMax = std::move(InValueMax);

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.InterpolateRangeValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InRangeValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InRangeBase                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InRangeSize                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InValueMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InValueMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::InterpolateRangeValue(double InRangeValue, double InRangeBase, double InRangeSize, double InValueMin, double InValueMax, double* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "InterpolateRangeValue");

	Params::BP_CharacterLocomotionComponent_C_InterpolateRangeValue Parms{};

	Parms.InRangeValue = InRangeValue;
	Parms.InRangeBase = InRangeBase;
	Parms.InRangeSize = InRangeSize;
	Parms.InValueMin = InValueMin;
	Parms.InValueMax = InValueMax;

	UObject::ProcessEvent(Func, &Parms);

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Is Near Range Distance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNear                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Is_Near_Range_Distance(double Distance, bool* IsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Is Near Range Distance");

	Params::BP_CharacterLocomotionComponent_C_Is_Near_Range_Distance Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNear != nullptr)
		*IsNear = Parms.IsNear;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Is Near Range Giant Chara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CharacterLocomotionComponent_C::Is_Near_Range_Giant_Chara()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Is Near Range Giant Chara");

	Params::BP_CharacterLocomotionComponent_C_Is_Near_Range_Giant_Chara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsAfterULTFallingFront
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OutIsFront                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsAfterULTFallingFront(bool* OutIsFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsAfterULTFallingFront");

	Params::BP_CharacterLocomotionComponent_C_IsAfterULTFallingFront Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsFront != nullptr)
		*OutIsFront = Parms.OutIsFront;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsDashUkemiReserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDashUkemiReserved_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsDashUkemiReserved(bool* IsDashUkemiReserved_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsDashUkemiReserved");

	Params::BP_CharacterLocomotionComponent_C_IsDashUkemiReserved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDashUkemiReserved_0 != nullptr)
		*IsDashUkemiReserved_0 = Parms.IsDashUkemiReserved_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsDragonDashZMoveOnInputFront
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InIsInputNeutral                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutIsZMove                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsDragonDashZMoveOnInputFront(bool InIsInputNeutral, bool* OutIsZMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsDragonDashZMoveOnInputFront");

	Params::BP_CharacterLocomotionComponent_C_IsDragonDashZMoveOnInputFront Parms{};

	Parms.InIsInputNeutral = InIsInputNeutral;

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsZMove != nullptr)
		*OutIsZMove = Parms.OutIsZMove;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsEnableAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsEnableAction(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsEnableAction");

	Params::BP_CharacterLocomotionComponent_C_IsEnableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsEnableMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsEnableMovementInput(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsEnableMovementInput");

	Params::BP_CharacterLocomotionComponent_C_IsEnableMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsGiantChara_actHSMS_actHSM_Off
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsGiantChara_actHSMS_actHSM_Off(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsGiantChara_actHSMS_actHSM_Off");

	Params::BP_CharacterLocomotionComponent_C_IsGiantChara_actHSMS_actHSM_Off Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsHitFloor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InHitArgOther                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InHitArgHitNormal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       InHitArgHit                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsHitFloor_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsHitFloor(class AActor* InHitArgOther, const struct FVector& InHitArgHitNormal, const struct FHitResult& InHitArgHit, bool* IsHitFloor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsHitFloor");

	Params::BP_CharacterLocomotionComponent_C_IsHitFloor Parms{};

	Parms.InHitArgOther = InHitArgOther;
	Parms.InHitArgHitNormal = std::move(InHitArgHitNormal);
	Parms.InHitArgHit = std::move(InHitArgHit);

	UObject::ProcessEvent(Func, &Parms);

	if (IsHitFloor_0 != nullptr)
		*IsHitFloor_0 = Parms.IsHitFloor_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInLimitRangeLocomotionAxisRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InCurrentAngle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInAxisRotationParameter                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInLimitRange                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsInLimitRangeLocomotionAxisRotation(double InCurrentAngle, const struct FFLocomotionAxisRotationParameter& InAxisRotationParameter, bool* IsInLimitRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsInLimitRangeLocomotionAxisRotation");

	Params::BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionAxisRotation Parms{};

	Parms.InCurrentAngle = InCurrentAngle;
	Parms.InAxisRotationParameter = std::move(InAxisRotationParameter);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInLimitRange != nullptr)
		*IsInLimitRange = Parms.IsInLimitRange;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInLimitRangeLocomotionRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFLocomotionRotationParameter    InRotationParameter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInLimitRange                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsInLimitRangeLocomotionRotation(const struct FFLocomotionRotationParameter& InRotationParameter, bool* IsInLimitRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsInLimitRangeLocomotionRotation");

	Params::BP_CharacterLocomotionComponent_C_IsInLimitRangeLocomotionRotation Parms{};

	Parms.InRotationParameter = std::move(InRotationParameter);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInLimitRange != nullptr)
		*IsInLimitRange = Parms.IsInLimitRange;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsInputKoratBattleKeyDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EKoratBattleKey                         InKoratBattleKey                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDown                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsInputKoratBattleKeyDown(EKoratBattleKey InKoratBattleKey, bool* IsDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsInputKoratBattleKeyDown");

	Params::BP_CharacterLocomotionComponent_C_IsInputKoratBattleKeyDown Parms{};

	Parms.InKoratBattleKey = InKoratBattleKey;

	UObject::ProcessEvent(Func, &Parms);

	if (IsDown != nullptr)
		*IsDown = Parms.IsDown;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsNearRangeNow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNear                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::IsNearRangeNow(bool* IsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsNearRangeNow");

	Params::BP_CharacterLocomotionComponent_C_IsNearRangeNow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNear != nullptr)
		*IsNear = Parms.IsNear;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadDashUpDownParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::LoadDashUpDownParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "LoadDashUpDownParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadDragonDashParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::LoadDragonDashParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "LoadDragonDashParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadIdleMoveParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::LoadIdleMoveParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "LoadIdleMoveParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadShortDashParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::LoadShortDashParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "LoadShortDashParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.LoadZBurstDashParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::LoadZBurstDashParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "LoadZBurstDashParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.MoveInputXY
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::MoveInputXY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "MoveInputXY");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.MoveInputZ
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::MoveInputZ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "MoveInputZ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.NotifyPlayMontageLength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MontageLength                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::NotifyPlayMontageLength(double MontageLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "NotifyPlayMontageLength");

	Params::BP_CharacterLocomotionComponent_C_NotifyPlayMontageLength Parms{};

	Parms.MontageLength = MontageLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.NotifyStartRevengeCounter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::NotifyStartRevengeCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "NotifyStartRevengeCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnActionReset
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnActionReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnActionReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnAddWarpOffset
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          InWarpOffsetPos                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InWarpOffsetRot                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          InWarpOffsetRotCenterPos                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnAddWarpOffset(const struct FVector& InWarpOffsetPos, const struct FRotator& InWarpOffsetRot, const struct FVector& InWarpOffsetRotCenterPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnAddWarpOffset");

	Params::BP_CharacterLocomotionComponent_C_OnAddWarpOffset Parms{};

	Parms.InWarpOffsetPos = std::move(InWarpOffsetPos);
	Parms.InWarpOffsetRot = std::move(InWarpOffsetRot);
	Parms.InWarpOffsetRotCenterPos = std::move(InWarpOffsetRotCenterPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnBlowAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBlowState                         BlowState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnBlowAnimEvent(EKoratBlowState BlowState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnBlowAnimEvent");

	Params::BP_CharacterLocomotionComponent_C_OnBlowAnimEvent Parms{};

	Parms.BlowState = BlowState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnChangedCharacterNumeric
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USSCharacterNumeric*              InParam                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnChangedCharacterNumeric(const class USSCharacterNumeric* InParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnChangedCharacterNumeric");

	Params::BP_CharacterLocomotionComponent_C_OnChangedCharacterNumeric Parms{};

	Parms.InParam = InParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnChangeDown
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InFront                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDownToRevivalTime                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnChangeDown(const bool InFront, const float InDownToRevivalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnChangeDown");

	Params::BP_CharacterLocomotionComponent_C_OnChangeDown Parms{};

	Parms.InFront = InFront;
	Parms.InDownToRevivalTime = InDownToRevivalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnDragonDashAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   DragonDashState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnDragonDashAnimEvent(EKoratDragonDashState DragonDashState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnDragonDashAnimEvent");

	Params::BP_CharacterLocomotionComponent_C_OnDragonDashAnimEvent Parms{};

	Parms.DragonDashState = DragonDashState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnDragonHomingAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 DragonHomingState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnDragonHomingAnimEvent(EKoratDragonHomingState DragonHomingState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnDragonHomingAnimEvent");

	Params::BP_CharacterLocomotionComponent_C_OnDragonHomingAnimEvent Parms{};

	Parms.DragonHomingState = DragonHomingState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndBlowReaction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndBlowReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndBlowReaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndDashCombatives
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndDashCombatives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndDashCombatives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndJumpFT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndJumpFT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndJumpFT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndJumpIN
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndJumpIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndJumpIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndJumpOT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndJumpOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndJumpOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndJumpUP
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndJumpUP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndJumpUP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndRequestAllAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndRequestAllAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndRequestAllAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndStepIN
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndStepIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndStepIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndStepOT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndStepOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndStepOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnEndUltimateBlastDash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnEndUltimateBlastDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnEndUltimateBlastDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnHit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_CharacterLocomotionComponent_C::OnHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnHit");

	Params::BP_CharacterLocomotionComponent_C_OnHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnLanded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_CharacterLocomotionComponent_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnLanded");

	Params::BP_CharacterLocomotionComponent_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnPlayAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnPlayAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnPlayAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnPlayDashCombatives
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnPlayDashCombatives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnPlayDashCombatives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnPlayDragonDashCounter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnPlayDragonDashCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnPlayDragonDashCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnPlayIdle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnPlayIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnPlayIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnPlayUltimateBlastDash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnPlayUltimateBlastDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnPlayUltimateBlastDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnRequestBlowReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    InFrontHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::OnRequestBlowReaction(const struct FKoratActionDataList& InAction, bool InFrontHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnRequestBlowReaction");

	Params::BP_CharacterLocomotionComponent_C_OnRequestBlowReaction Parms{};

	Parms.InAction = std::move(InAction);
	Parms.InFrontHit = InFrontHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnResetStateMachine
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnResetStateMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnResetStateMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.OnTargetPlayTeleportationCounter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::OnTargetPlayTeleportationCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "OnTargetPlayTeleportationCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.PlayKnockBack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratHitBackMovementData        InHitBackData                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_CharacterLocomotionComponent_C::PlayKnockBack(const struct FKoratHitBackMovementData& InHitBackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "PlayKnockBack");

	Params::BP_CharacterLocomotionComponent_C_PlayKnockBack Parms{};

	Parms.InHitBackData = std::move(InHitBackData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReceiveTick");

	Params::BP_CharacterLocomotionComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReconfirmLockOnCharacter
// (Event, Public, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ReconfirmLockOnCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReconfirmLockOnCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReconfirmLockOnMode
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ReconfirmLockOnMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReconfirmLockOnMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReloadDragonDashParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ReloadDragonDashParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReloadDragonDashParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ReloadIdleMoveParam
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ReloadIdleMoveParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ReloadIdleMoveParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RequestResetStateMachine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InStatus                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::RequestResetStateMachine(EKoratLocomotionState InStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "RequestResetStateMachine");

	Params::BP_CharacterLocomotionComponent_C_RequestResetStateMachine Parms{};

	Parms.InStatus = InStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetAction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ResetAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ResetAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetIdleMoveMoveZ
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ResetIdleMoveMoveZ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ResetIdleMoveMoveZ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetIdleMoveTimer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ResetIdleMoveTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ResetIdleMoveTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetLocomotionInputVector
// (Event, Public, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ResetLocomotionInputVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ResetLocomotionInputVector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.ResetSubStatusStateMachine
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::ResetSubStatusStateMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "ResetSubStatusStateMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RotateDash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsIgnoreRoll                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsIgnorePitch                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsIgnoreYaw                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::RotateDash(bool InIsIgnoreRoll, bool InIsIgnorePitch, bool InIsIgnoreYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "RotateDash");

	Params::BP_CharacterLocomotionComponent_C_RotateDash Parms{};

	Parms.InIsIgnoreRoll = InIsIgnoreRoll;
	Parms.InIsIgnorePitch = InIsIgnorePitch;
	Parms.InIsIgnoreYaw = InIsIgnoreYaw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.RotateDragonDashInputZ
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InDragonDashMoveInputValue                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::RotateDragonDashInputZ(const struct FVector& InDragonDashMoveInputValue, double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "RotateDragonDashInputZ");

	Params::BP_CharacterLocomotionComponent_C_RotateDragonDashInputZ Parms{};

	Parms.InDragonDashMoveInputValue = std::move(InDragonDashMoveInputValue);
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Set Locomotion Rotation XYZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInRotationParameterXRoll                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInRotationParameterYPitch                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionAxisRotationParameterInRotationParameterZYaw                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsInterpConstant                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsCheckTurn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Set_Locomotion_Rotation_XYZ(const struct FRotator& InNewRotation, bool InTeleportPhysics, const struct FFLocomotionAxisRotationParameter& InRotationParameterXRoll, const struct FFLocomotionAxisRotationParameter& InRotationParameterYPitch, const struct FFLocomotionAxisRotationParameter& InRotationParameterZYaw, bool InIsInterpConstant, bool InIsCheckTurn, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Set Locomotion Rotation XYZ");

	Params::BP_CharacterLocomotionComponent_C_Set_Locomotion_Rotation_XYZ Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InTeleportPhysics = InTeleportPhysics;
	Parms.InRotationParameterXRoll = std::move(InRotationParameterXRoll);
	Parms.InRotationParameterYPitch = std::move(InRotationParameterYPitch);
	Parms.InRotationParameterZYaw = std::move(InRotationParameterZYaw);
	Parms.InIsInterpConstant = InIsInterpConstant;
	Parms.InIsCheckTurn = InIsCheckTurn;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetAnimationParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UpdateOnlyRelatedToRotation                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetAnimationParameter(bool UpdateOnlyRelatedToRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetAnimationParameter");

	Params::BP_CharacterLocomotionComponent_C_SetAnimationParameter Parms{};

	Parms.UpdateOnlyRelatedToRotation = UpdateOnlyRelatedToRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastSkill1DashStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 InBlastDashStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetBlastSkill1DashStatus(EKoratDragonHomingState InBlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetBlastSkill1DashStatus");

	Params::BP_CharacterLocomotionComponent_C_SetBlastSkill1DashStatus Parms{};

	Parms.InBlastDashStatus = InBlastDashStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastSkill2DashStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 InBlastDashStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetBlastSkill2DashStatus(EKoratDragonHomingState InBlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetBlastSkill2DashStatus");

	Params::BP_CharacterLocomotionComponent_C_SetBlastSkill2DashStatus Parms{};

	Parms.InBlastDashStatus = InBlastDashStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlastUltimateDashStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 InBlastDashStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetBlastUltimateDashStatus(EKoratDragonHomingState InBlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetBlastUltimateDashStatus");

	Params::BP_CharacterLocomotionComponent_C_SetBlastUltimateDashStatus Parms{};

	Parms.InBlastDashStatus = InBlastDashStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlowInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBlowState                         InBlowStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetBlowInfo(EKoratBlowState InBlowStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetBlowInfo");

	Params::BP_CharacterLocomotionComponent_C_SetBlowInfo Parms{};

	Parms.InBlowStatus = InBlowStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetBlowIsFrontState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InBlowIsFront                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetBlowIsFrontState(bool InBlowIsFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetBlowIsFrontState");

	Params::BP_CharacterLocomotionComponent_C_SetBlowIsFrontState Parms{};

	Parms.InBlowIsFront = InBlowIsFront;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCharacterMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           InMovementMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetCharacterMovementMode(EMovementMode InMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetCharacterMovementMode");

	Params::BP_CharacterLocomotionComponent_C_SetCharacterMovementMode Parms{};

	Parms.InMovementMode = InMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCharacterRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetCharacterRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetCharacterRotation");

	Params::BP_CharacterLocomotionComponent_C_SetCharacterRotation Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InTeleportPhysics = InTeleportPhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCurrentAnimTimeRemainingFraction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InCurrentStateName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InFraction                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetCurrentAnimTimeRemainingFraction(class FName InCurrentStateName, double InFraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetCurrentAnimTimeRemainingFraction");

	Params::BP_CharacterLocomotionComponent_C_SetCurrentAnimTimeRemainingFraction Parms{};

	Parms.InCurrentStateName = InCurrentStateName;
	Parms.InFraction = InFraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetCurrentStatus_
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InCurrentStatus                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetCurrentStatus_(EKoratLocomotionState InCurrentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetCurrentStatus_");

	Params::BP_CharacterLocomotionComponent_C_SetCurrentStatus_ Parms{};

	Parms.InCurrentStatus = InCurrentStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDashUkemiStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDashUkemiState                    InDashUkemiStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetDashUkemiStatus(EKoratDashUkemiState InDashUkemiStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDashUkemiStatus");

	Params::BP_CharacterLocomotionComponent_C_SetDashUkemiStatus Parms{};

	Parms.InDashUkemiStatus = InDashUkemiStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDashUpDownStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDashUpDownState                   InDashUpDownStatus                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetDashUpDownStatus(EKoratDashUpDownState InDashUpDownStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDashUpDownStatus");

	Params::BP_CharacterLocomotionComponent_C_SetDashUpDownStatus Parms{};

	Parms.InDashUpDownStatus = InDashUpDownStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashMaxSpeed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetDragonDashMaxSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDragonDashMaxSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InInputVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsKeepOldDashRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetDragonDashParameter(const struct FVector& InInputVector, bool InIsKeepOldDashRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDragonDashParameter");

	Params::BP_CharacterLocomotionComponent_C_SetDragonDashParameter Parms{};

	Parms.InInputVector = std::move(InInputVector);
	Parms.InIsKeepOldDashRotation = InIsKeepOldDashRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonDashRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::SetDragonDashRotation(const struct FRotator& InRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDragonDashRotation");

	Params::BP_CharacterLocomotionComponent_C_SetDragonDashRotation Parms{};

	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetDragonHomingStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 InDragonHomingStatus                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetDragonHomingStatus(EKoratDragonHomingState InDragonHomingStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetDragonHomingStatus");

	Params::BP_CharacterLocomotionComponent_C_SetDragonHomingStatus Parms{};

	Parms.InDragonHomingStatus = InDragonHomingStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetEnableMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeJumpToFly_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       ActionFinishReason                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetEnableMovementInput(bool IsEnable, bool ChangeJumpToFly_0, EKoratCharacterActionFinishReason ActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetEnableMovementInput");

	Params::BP_CharacterLocomotionComponent_C_SetEnableMovementInput Parms{};

	Parms.IsEnable = IsEnable;
	Parms.ChangeJumpToFly_0 = ChangeJumpToFly_0;
	Parms.ActionFinishReason = ActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetEnableTilt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsEnable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutIsEnable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetEnableTilt(bool InIsEnable, bool* OutIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetEnableTilt");

	Params::BP_CharacterLocomotionComponent_C_SetEnableTilt Parms{};

	Parms.InIsEnable = InIsEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsEnable != nullptr)
		*OutIsEnable = Parms.OutIsEnable;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetHeightAxisValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HeightAxisValue_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetHeightAxisValue(double HeightAxisValue_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetHeightAxisValue");

	Params::BP_CharacterLocomotionComponent_C_SetHeightAxisValue Parms{};

	Parms.HeightAxisValue_0 = HeightAxisValue_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetInputVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InputVector_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetInputVector(const struct FVector2D& InputVector_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetInputVector");

	Params::BP_CharacterLocomotionComponent_C_SetInputVector Parms{};

	Parms.InputVector_0 = std::move(InputVector_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetIsRotateAutoIdle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsRotateLanded                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetIsRotateAutoIdle(bool InIsRotateLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetIsRotateAutoIdle");

	Params::BP_CharacterLocomotionComponent_C_SetIsRotateAutoIdle Parms{};

	Parms.InIsRotateLanded = InIsRotateLanded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetIsRotateLanded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsRotateLanded                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetIsRotateLanded(bool InIsRotateLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetIsRotateLanded");

	Params::BP_CharacterLocomotionComponent_C_SetIsRotateLanded Parms{};

	Parms.InIsRotateLanded = InIsRotateLanded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetJumpStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratJumpState                         InJumpStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetJumpStatus(EKoratJumpState InJumpStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetJumpStatus");

	Params::BP_CharacterLocomotionComponent_C_SetJumpStatus Parms{};

	Parms.InJumpStatus = InJumpStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLockOnCharacter
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bLockon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetLockOnCharacter(bool bLockon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetLockOnCharacter");

	Params::BP_CharacterLocomotionComponent_C_SetLockOnCharacter Parms{};

	Parms.bLockon = bLockon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLockOnMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsLockOn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetLockOnMode(bool InIsLockOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetLockOnMode");

	Params::BP_CharacterLocomotionComponent_C_SetLockOnMode Parms{};

	Parms.InIsLockOn = InIsLockOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLocomotionCurrentStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   InCurrentStatus                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetLocomotionCurrentStatus(EKoratLocomotionState InCurrentStatus, EKoratCharacterActionFinishReason InActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetLocomotionCurrentStatus");

	Params::BP_CharacterLocomotionComponent_C_SetLocomotionCurrentStatus Parms{};

	Parms.InCurrentStatus = InCurrentStatus;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetLocomotionRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFLocomotionRotationParameter    InRotationParameter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetLocomotionRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, const struct FFLocomotionRotationParameter& InRotationParameter, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetLocomotionRotation");

	Params::BP_CharacterLocomotionComponent_C_SetLocomotionRotation Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InTeleportPhysics = InTeleportPhysics;
	Parms.InRotationParameter = std::move(InRotationParameter);

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetMovingRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         MovingRotation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::SetMovingRotation(const struct FRotator& MovingRotation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetMovingRotation");

	Params::BP_CharacterLocomotionComponent_C_SetMovingRotation Parms{};

	Parms.MovingRotation_0 = std::move(MovingRotation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetNumbReactionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterNumbReactionState             InNumbReactionStatus                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetNumbReactionStatus(ECharacterNumbReactionState InNumbReactionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetNumbReactionStatus");

	Params::BP_CharacterLocomotionComponent_C_SetNumbReactionStatus Parms{};

	Parms.InNumbReactionStatus = InNumbReactionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetRevengeDashStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 InRevengeDashStatus                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetRevengeDashStatus(EKoratDragonHomingState InRevengeDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetRevengeDashStatus");

	Params::BP_CharacterLocomotionComponent_C_SetRevengeDashStatus Parms{};

	Parms.InRevengeDashStatus = InRevengeDashStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetShortDashStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratShortDashState                    InShortDashStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetShortDashStatus(EKoratShortDashState InShortDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetShortDashStatus");

	Params::BP_CharacterLocomotionComponent_C_SetShortDashStatus Parms{};

	Parms.InShortDashStatus = InShortDashStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStepStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStepState                         InStepStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetStepStatus(EKoratStepState InStepStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetStepStatus");

	Params::BP_CharacterLocomotionComponent_C_SetStepStatus Parms{};

	Parms.InStepStatus = InStepStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStrutJumpStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterStrutJumpState                InJumpStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetStrutJumpStatus(ECharacterStrutJumpState InJumpStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetStrutJumpStatus");

	Params::BP_CharacterLocomotionComponent_C_SetStrutJumpStatus Parms{};

	Parms.InJumpStatus = InJumpStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetStunReactionStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratStunReactionState                 InStunReactionStatus                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetStunReactionStatus(EKoratStunReactionState InStunReactionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetStunReactionStatus");

	Params::BP_CharacterLocomotionComponent_C_SetStunReactionStatus Parms{};

	Parms.InStunReactionStatus = InStunReactionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetSubIdleMoveSkipStateTimerCheck
// (Event, Public, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetSubIdleMoveSkipStateTimerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetSubIdleMoveSkipStateTimerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetUpDashStateMovementParameter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetUpDashStateMovementParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetUpDashStateMovementParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupDragonDashStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsKeepOldDashRotation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsEnablePitch                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetupDragonDashStart(const struct FVector& InputPin, bool InIsKeepOldDashRotation, bool InIsEnablePitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupDragonDashStart");

	Params::BP_CharacterLocomotionComponent_C_SetupDragonDashStart Parms{};

	Parms.InputPin = std::move(InputPin);
	Parms.InIsKeepOldDashRotation = InIsKeepOldDashRotation;
	Parms.InIsEnablePitch = InIsEnablePitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupMovementCharacterIdleMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetupMovementCharacterIdleMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupMovementCharacterIdleMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupMovementComponentIdleMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetupMovementComponentIdleMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupMovementComponentIdleMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupMovementIdleMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetupMovementIdleMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupMovementIdleMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupReferenceVariable
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetupReferenceVariable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupReferenceVariable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetupRestartDragonDash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::SetupRestartDragonDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetupRestartDragonDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetUseCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InUsePitch                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetUseCharacterRotationPitch");

	Params::BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitch Parms{};

	Parms.InUsePitch = InUsePitch;

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitch != nullptr)
		*UsePitch = Parms.UsePitch;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetUseCharacterRotationPitchDetail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InUsePitchLimit                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUsePitchInterp                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchLimit                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchInterp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetUseCharacterRotationPitchDetail(bool InUsePitchLimit, bool InUsePitchInterp, bool* UsePitchLimit, bool* UsePitchInterp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetUseCharacterRotationPitchDetail");

	Params::BP_CharacterLocomotionComponent_C_SetUseCharacterRotationPitchDetail Parms{};

	Parms.InUsePitchLimit = InUsePitchLimit;
	Parms.InUsePitchInterp = InUsePitchInterp;

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitchLimit != nullptr)
		*UsePitchLimit = Parms.UsePitchLimit;

	if (UsePitchInterp != nullptr)
		*UsePitchInterp = Parms.UsePitchInterp;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetVirtualTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUseBattleTargetPawn                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetVirtualTarget(class AActor* InActor, const struct FVector& InLocation, bool InUseBattleTargetPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetVirtualTarget");

	Params::BP_CharacterLocomotionComponent_C_SetVirtualTarget Parms{};

	Parms.InActor = InActor;
	Parms.InLocation = std::move(InLocation);
	Parms.InUseBattleTargetPawn = InUseBattleTargetPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.SetWallUkemiStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratWallUkemiState                    InWallUkemiStatus                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::SetWallUkemiStatus(EKoratWallUkemiState InWallUkemiStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "SetWallUkemiStatus");

	Params::BP_CharacterLocomotionComponent_C_SetWallUkemiStatus Parms{};

	Parms.InWallUkemiStatus = InWallUkemiStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartBlowDown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDownToRevivalTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::StartBlowDown(double InDownToRevivalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StartBlowDown");

	Params::BP_CharacterLocomotionComponent_C_StartBlowDown Parms{};

	Parms.InDownToRevivalTime = InDownToRevivalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartBlowDownRevival
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::StartBlowDownRevival()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StartBlowDownRevival");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartMobileMonitoring
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::StartMobileMonitoring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StartMobileMonitoring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StartShortDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartShortDash                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::StartShortDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StartShortDash");

	Params::BP_CharacterLocomotionComponent_C_StartShortDash Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartShortDash != nullptr)
		*IsStartShortDash = Parms.IsStartShortDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StateDragonDash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterLocomotionEventType           InEventType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::StateDragonDash(ECharacterLocomotionEventType InEventType, double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StateDragonDash");

	Params::BP_CharacterLocomotionComponent_C_StateDragonDash Parms{};

	Parms.InEventType = InEventType;
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StateSuperHighSpeedMove
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::StateSuperHighSpeedMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StateSuperHighSpeedMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StopJump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InChangeJumpToFly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::StopJump(bool InChangeJumpToFly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StopJump");

	Params::BP_CharacterLocomotionComponent_C_StopJump Parms{};

	Parms.InChangeJumpToFly = InChangeJumpToFly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StopKnockBack
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::StopKnockBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StopKnockBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.StopRevengeDash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::StopRevengeDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "StopRevengeDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Dragon Dash Move
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsDashCombatives                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   NextDragonDashStatus                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Update_Dragon_Dash_Move(double InDeltaSeconds, bool InIsDashCombatives, EKoratDragonDashState* NextDragonDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Update Dragon Dash Move");

	Params::BP_CharacterLocomotionComponent_C_Update_Dragon_Dash_Move Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;
	Parms.InIsDashCombatives = InIsDashCombatives;

	UObject::ProcessEvent(Func, &Parms);

	if (NextDragonDashStatus != nullptr)
		*NextDragonDashStatus = Parms.NextDragonDashStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Input Move
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::Update_Input_Move()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Update Input Move");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.Update Sub State Timer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutSubStateTimer                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::Update_Sub_State_Timer(double InDeltaSeconds, double* OutSubStateTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "Update Sub State Timer");

	Params::BP_CharacterLocomotionComponent_C_Update_Sub_State_Timer Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (OutSubStateTimer != nullptr)
		*OutSubStateTimer = Parms.OutSubStateTimer;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateCache
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::UpdateCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateCurrentRunningAction
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKoratActionDataList             OutRunningAction                                       (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// class FName                             OutRunningSection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateCurrentRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateCurrentRunningAction");

	Params::BP_CharacterLocomotionComponent_C_UpdateCurrentRunningAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRunningAction != nullptr)
		*OutRunningAction = std::move(Parms.OutRunningAction);

	if (OutRunningSection != nullptr)
		*OutRunningSection = Parms.OutRunningSection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateDragonDashRotationSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsForceSetInitialSpeed                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InNewInputVector                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateDragonDashRotationSpeed(bool InIsForceSetInitialSpeed, const struct FVector& InNewInputVector, double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateDragonDashRotationSpeed");

	Params::BP_CharacterLocomotionComponent_C_UpdateDragonDashRotationSpeed Parms{};

	Parms.InIsForceSetInitialSpeed = InIsForceSetInitialSpeed;
	Parms.InNewInputVector = std::move(InNewInputVector);
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateIdleMoveTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateIdleMoveTimer(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateIdleMoveTimer");

	Params::BP_CharacterLocomotionComponent_C_UpdateIdleMoveTimer Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateInputMove
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::UpdateInputMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateInputMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateLocomotionDetailStatus
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterLocomotionDetailStatus   OutLocomotionDetailStatus                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateLocomotionDetailStatus");

	Params::BP_CharacterLocomotionComponent_C_UpdateLocomotionDetailStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocomotionDetailStatus != nullptr)
		*OutLocomotionDetailStatus = Parms.OutLocomotionDetailStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateLocomotionParameterCache
// (Event, Public, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::UpdateLocomotionParameterCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateLocomotionParameterCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateMobileMonitoring
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionComponent_C::UpdateMobileMonitoring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateMobileMonitoring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForceChange                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateRange(double Distance, bool IsForceChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateRange");

	Params::BP_CharacterLocomotionComponent_C_UpdateRange Parms{};

	Parms.Distance = Distance;
	Parms.IsForceChange = IsForceChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateRunningAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutIsChangeAction                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateRunningAction(EKoratCharacterActionFinishReason InActionFinishReason, bool* OutIsChangeAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateRunningAction");

	Params::BP_CharacterLocomotionComponent_C_UpdateRunningAction Parms{};

	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsChangeAction != nullptr)
		*OutIsChangeAction = Parms.OutIsChangeAction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsFixRangeSpeed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsNear                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateSpeed(double InDistance, bool InIsFixRangeSpeed, bool InIsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateSpeed");

	Params::BP_CharacterLocomotionComponent_C_UpdateSpeed Parms{};

	Parms.InDistance = InDistance;
	Parms.InIsFixRangeSpeed = InIsFixRangeSpeed;
	Parms.InIsNear = InIsNear;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.UpdateState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterLocomotionEventType           InEventType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::UpdateState(ECharacterLocomotionEventType InEventType, double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "UpdateState");

	Params::BP_CharacterLocomotionComponent_C_UpdateState Parms{};

	Parms.InEventType = InEventType;
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCharacterMovementMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EMovementMode                           MovementMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetCharacterMovementMode(EMovementMode* MovementMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetCharacterMovementMode");

	Params::BP_CharacterLocomotionComponent_C_GetCharacterMovementMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode != nullptr)
		*MovementMode = Parms.MovementMode;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetCharacterRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_CharacterLocomotionComponent_C::GetCharacterRotation(struct FRotator* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetCharacterRotation");

	Params::BP_CharacterLocomotionComponent_C_GetCharacterRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetJumpStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EKoratJumpState                         JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetJumpStatus(EKoratJumpState* JumpStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetJumpStatus");

	Params::BP_CharacterLocomotionComponent_C_GetJumpStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionDetailStatus
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EKoratCharacterLocomotionDetailStatus   OutLocomotionDetailStatus                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionDetailStatus");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionDetailStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocomotionDetailStatus != nullptr)
		*OutLocomotionDetailStatus = Parms.OutLocomotionDetailStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionParameterForCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// double                                  XYSpeed_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionParameterForCamera(double* XYSpeed_0, bool* IsLockOn, EKoratDragonDashState* DragonDashStatus_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionParameterForCamera");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionParameterForCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (XYSpeed_0 != nullptr)
		*XYSpeed_0 = Parms.XYSpeed_0;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (DragonDashStatus_0 != nullptr)
		*DragonDashStatus_0 = Parms.DragonDashStatus_0;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetLocomotionSub
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EKoratLocomotionState                   InLocomotionStatus                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CharacterLocomotionSubBase_C* SubInstance                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetLocomotionSub(const EKoratLocomotionState& InLocomotionStatus, class UBP_CharacterLocomotionSubBase_C** SubInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetLocomotionSub");

	Params::BP_CharacterLocomotionComponent_C_GetLocomotionSub Parms{};

	Parms.InLocomotionStatus = InLocomotionStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (SubInstance != nullptr)
		*SubInstance = Parms.SubInstance;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetRunningAction
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FKoratActionDataList             OutRunningAction                                       (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// class FName                             OutRunningSection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetRunningAction");

	Params::BP_CharacterLocomotionComponent_C_GetRunningAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRunningAction != nullptr)
		*OutRunningAction = std::move(Parms.OutRunningAction);

	if (OutRunningSection != nullptr)
		*OutRunningSection = Parms.OutRunningSection;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetStepStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EKoratStepState                         StepStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetStepStatus(EKoratStepState* StepStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetStepStatus");

	Params::BP_CharacterLocomotionComponent_C_GetStepStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StepStatus != nullptr)
		*StepStatus = Parms.StepStatus;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubBlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubBlow_C* SubBlow                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubBlow(class UBP_CharacterLocomotionSubBlow_C** SubBlow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubBlow");

	Params::BP_CharacterLocomotionComponent_C_GetSubBlow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubBlow != nullptr)
		*SubBlow = Parms.SubBlow;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDashUkemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubDashUkemi_C*SubDashUkemi                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubDashUkemi(class UBP_CharacterLocomotionSubDashUkemi_C** SubDashUkemi) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubDashUkemi");

	Params::BP_CharacterLocomotionComponent_C_GetSubDashUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubDashUkemi != nullptr)
		*SubDashUkemi = Parms.SubDashUkemi;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDashUpDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubDashUpDown_C*SubDashUpDown                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubDashUpDown(class UBP_CharacterLocomotionSubDashUpDown_C** SubDashUpDown) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubDashUpDown");

	Params::BP_CharacterLocomotionComponent_C_GetSubDashUpDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubDashUpDown != nullptr)
		*SubDashUpDown = Parms.SubDashUpDown;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubDragonHoming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubDragonHoming_C*SubDragonHoming                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubDragonHoming(class UBP_CharacterLocomotionSubDragonHoming_C** SubDragonHoming) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubDragonHoming");

	Params::BP_CharacterLocomotionComponent_C_GetSubDragonHoming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubDragonHoming != nullptr)
		*SubDragonHoming = Parms.SubDragonHoming;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubJump_C* SubJump                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubJump(class UBP_CharacterLocomotionSubJump_C** SubJump) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubJump");

	Params::BP_CharacterLocomotionComponent_C_GetSubJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubJump != nullptr)
		*SubJump = Parms.SubJump;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubNumbReaction_C*SubNumbReaction                                        (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubNumbReaction(class UBP_CharacterLocomotionSubNumbReaction_C** SubNumbReaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubNumbReaction");

	Params::BP_CharacterLocomotionComponent_C_GetSubNumbReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubNumbReaction != nullptr)
		*SubNumbReaction = Parms.SubNumbReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubShortDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubShortDash_C*SubShortDash                                           (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubShortDash(class UBP_CharacterLocomotionSubShortDash_C** SubShortDash) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubShortDash");

	Params::BP_CharacterLocomotionComponent_C_GetSubShortDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubShortDash != nullptr)
		*SubShortDash = Parms.SubShortDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubStep_C* SubStep                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubStep(class UBP_CharacterLocomotionSubStep_C** SubStep) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubStep");

	Params::BP_CharacterLocomotionComponent_C_GetSubStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubStep != nullptr)
		*SubStep = Parms.SubStep;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubStunReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubStunReaction_C*SubStunReaction                                        (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubStunReaction(class UBP_CharacterLocomotionSubStunReaction_C** SubStunReaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubStunReaction");

	Params::BP_CharacterLocomotionComponent_C_GetSubStunReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubStunReaction != nullptr)
		*SubStunReaction = Parms.SubStunReaction;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubWallUkemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubWallUkemi_C*SubWallUkemi                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubWallUkemi(class UBP_CharacterLocomotionSubWallUkemi_C** SubWallUkemi) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubWallUkemi");

	Params::BP_CharacterLocomotionComponent_C_GetSubWallUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubWallUkemi != nullptr)
		*SubWallUkemi = Parms.SubWallUkemi;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetSubZBurstDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_CharacterLocomotionSubZBurstDash_C*SubZBurstDash                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetSubZBurstDash(class UBP_CharacterLocomotionSubZBurstDash_C** SubZBurstDash) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetSubZBurstDash");

	Params::BP_CharacterLocomotionComponent_C_GetSubZBurstDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SubZBurstDash != nullptr)
		*SubZBurstDash = Parms.SubZBurstDash;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.GetUseCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    UsePitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionComponent_C::GetUseCharacterRotationPitch(bool* UsePitch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "GetUseCharacterRotationPitch");

	Params::BP_CharacterLocomotionComponent_C_GetUseCharacterRotationPitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitch != nullptr)
		*UsePitch = Parms.UsePitch;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsStatusEnableAction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CharacterLocomotionComponent_C::IsStatusEnableAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsStatusEnableAction");

	Params::BP_CharacterLocomotionComponent_C_IsStatusEnableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C.IsUpdateSpeedGraph
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CharacterLocomotionComponent_C::IsUpdateSpeedGraph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionComponent_C", "IsUpdateSpeedGraph");

	Params::BP_CharacterLocomotionComponent_C_IsUpdateSpeedGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

