#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubStep

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "ECharacterDirection_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubStep.BP_CharacterLocomotionSubStep_C
// 0x00A8 (0x0108 - 0x0060)
class UBP_CharacterLocomotionSubStep_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratStepState                               StepStatus;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratStepType                                StepType;                                          // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StepWorldVector;                                   // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StepInputXY;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratCharacterDataStepParameter       StepParam;                                         // 0x0090(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsStepInputValid;                                  // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepMaxHoldTime;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepHoldTimer;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           StepDirection;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               StepCharacterRot;                                  // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               StepTurnTargetRotation;                            // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStepRotateToTarget;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepTiltTimer;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckAndStartChangeJumpToFly(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InChangeJumpToFly, bool* IsStarted);
	void CheckAndStartFromJump(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InChangeJumpToFly, bool* IsStarted);
	void CheckAnimEndAndChangeToIdle();
	void GetStepParameter(EKoratStepType InStepType, EKoratStepState InStepStatus, struct FKoratCharacterDataStepParameter* OutParameter);
	void GetStepVector(ECharacterDirection InDirection, bool InIsOrthoDirection, struct FVector* Vector);
	void Is_Step_Enable(bool* IsEnable);
	void IsStepOrthoDirection(EKoratStepType InStepType, bool* IsOrthoDirection);
	void OnEndStepIN();
	void OnEndStepOT();
	void Set_Step_Parameter(EKoratStepState InStepStatus, EKoratStepType InStepType, ECharacterDirection InMoveDirection);
	void SetStepMaxSpeed();
	void SetStepStatus(EKoratStepState InStepStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartStepIN();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateRotationStep(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool InIsUpdateTiltTimer, bool* IsSuccessfully);
	void UpdateStep(double InDeltaSeconds, bool InIsKeepRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubStep_C">();
	}
	static class UBP_CharacterLocomotionSubStep_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubStep_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubStep_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubStep_C");
static_assert(sizeof(UBP_CharacterLocomotionSubStep_C) == 0x000108, "Wrong size on UBP_CharacterLocomotionSubStep_C");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubStep_C::StepStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepType) == 0x000061, "Member 'UBP_CharacterLocomotionSubStep_C::StepType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepWorldVector) == 0x000068, "Member 'UBP_CharacterLocomotionSubStep_C::StepWorldVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepInputXY) == 0x000080, "Member 'UBP_CharacterLocomotionSubStep_C::StepInputXY' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepParam) == 0x000090, "Member 'UBP_CharacterLocomotionSubStep_C::StepParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, IsStepInputValid) == 0x0000AC, "Member 'UBP_CharacterLocomotionSubStep_C::IsStepInputValid' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepMaxHoldTime) == 0x0000B0, "Member 'UBP_CharacterLocomotionSubStep_C::StepMaxHoldTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepHoldTimer) == 0x0000B8, "Member 'UBP_CharacterLocomotionSubStep_C::StepHoldTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepDirection) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubStep_C::StepDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepCharacterRot) == 0x0000C8, "Member 'UBP_CharacterLocomotionSubStep_C::StepCharacterRot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepTurnTargetRotation) == 0x0000E0, "Member 'UBP_CharacterLocomotionSubStep_C::StepTurnTargetRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, IsStepRotateToTarget) == 0x0000F8, "Member 'UBP_CharacterLocomotionSubStep_C::IsStepRotateToTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubStep_C, StepTiltTimer) == 0x000100, "Member 'UBP_CharacterLocomotionSubStep_C::StepTiltTimer' has a wrong offset!");

}

