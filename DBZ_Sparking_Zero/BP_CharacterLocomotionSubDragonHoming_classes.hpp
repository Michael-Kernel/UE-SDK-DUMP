#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubDragonHoming

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubDash_classes.hpp"
#include "EAnimStateMachineEventType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubDragonHoming.BP_CharacterLocomotionSubDragonHoming_C
// 0x00E0 (0x01A0 - 0x00C0)
class UBP_CharacterLocomotionSubDragonHoming_C : public UBP_CharacterLocomotionSubDash_C
{
public:
	EKoratDragonHomingState                       DragonHomingStatus;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       AnimEventDragonHomingState;                        // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               HomingLookAtRotation;                              // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        HomingMoveDistance;                                // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HomingChaseTargetLocation;                         // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HomingOldLocation;                                 // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashEnd1Timer;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterSplineComponent_C*         HomingLocomotionSplineComponent;                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCaughtUp;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CaughtUpVelocityLength;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActionTargetLocation;                              // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActionTarget;                                    // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBlastDashMoveType                            MoveType;                                          // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ControllableTurnDashRotation;                      // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        ControllableTurnTurnSpeed;                         // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ControllableTurnNeutralTurnSpeed;                  // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ControllableTargetInputInfluence;                  // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ControllableTargetInputInfluenceAttenuationDistance; // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DragonHomingKeepDistanceInputInfluence;            // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillGaugeGain;                                  // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanHomingChase();
	bool CanNotHomingChase();
	void ChangeHomingStatus(EKoratDragonHomingState InDragonHomingStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckHomingEnd(double InDeltaSeconds, bool InIsCanChase, bool* IsEnd);
	void CheckHomingEndCanChase(bool InIsCanChase, bool* IsEnd);
	void CheckHomingEndSP(bool* IsEnd);
	void ConsumeSPHomingIN(bool* IsSuccessfully);
	void ConsumeSPHomingLP(bool* IsSuccessfully);
	void GetHomingStateMovementParameter(EKoratDragonHomingState InStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	bool IsCanHomingChase();
	void IsEnableAction(bool* IsEnable);
	void MoveHoming(bool InIsDashCombatives, bool InIsCanChase);
	void OnDragonHomingAnimEvent(EKoratDragonHomingState DragonHomingState, EAnimStateMachineEventType AnimStateMachineEvent);
	void RotateWithQuaternion(const struct FRotator& InCurrent, const struct FRotator& InTarget, double InTurnSpeed, struct FRotator* Rotator);
	void SetDragonHomingStatus(EKoratDragonHomingState InDragonHomingStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetHomingLookAtRotation();
	void SetHomingMaxSpeed();
	void SetHomingParameter(const struct FVector& InInputVector);
	void SetHomingSplineComponent();
	void SetupHomingMove();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Start_Is_Enable_Homing(bool* IsEnable);
	void StartCheckSPConsumableHomingIN(bool* IsOK);
	void StartSetup(const struct FVector& InputPin);
	void StartSetUpMovementRotation();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateHomingCombatives();
	void UpdateHomingCombatives_on_End_Dash_Combatives();
	void UpdateHomingCombatives_Stop();
	void UpdateHomingCombatives_Update();
	void UpdateHomingIN();
	void UpdateHomingINOn_Set_Anim_Time();
	void UpdateHomingINStop();
	void UpdateHomingINUpdate();
	void UpdateHomingLP();
	void UpdateHomingLPKey_Pressed(bool* IsSuccessfully);
	void UpdateHomingLPOn_Hit();
	void UpdateHomingLPOn_Play_Dash_Combatives();
	void UpdateHomingLPStop();
	void UpdateHomingLPUpdate();
	void UpdateHomingMove(double InDeltaSeconds, bool InIsDashCombatives, EKoratDragonHomingState* NextDragonHomingStatus);
	void UpdateHomingOT();
	void UpdateHomingOTKeyPressed();
	void UpdateHomingOTOn_Hit();
	void UpdateHomingOTOn_Set_Anim_Time();
	void UpdateHomingOTStop();
	void UpdateHomingOTUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubDragonHoming_C">();
	}
	static class UBP_CharacterLocomotionSubDragonHoming_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubDragonHoming_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubDragonHoming_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubDragonHoming_C");
static_assert(sizeof(UBP_CharacterLocomotionSubDragonHoming_C) == 0x0001A0, "Wrong size on UBP_CharacterLocomotionSubDragonHoming_C");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, DragonHomingStatus) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, AnimEventDragonHomingState) == 0x0000C1, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::AnimEventDragonHomingState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, HomingLookAtRotation) == 0x0000C8, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::HomingLookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, HomingMoveDistance) == 0x0000E0, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::HomingMoveDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, HomingChaseTargetLocation) == 0x0000E8, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::HomingChaseTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, HomingOldLocation) == 0x000100, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::HomingOldLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, DashEnd1Timer) == 0x000118, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::DashEnd1Timer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, HomingLocomotionSplineComponent) == 0x000120, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::HomingLocomotionSplineComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, IsCaughtUp) == 0x000128, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::IsCaughtUp' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, CaughtUpVelocityLength) == 0x000130, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::CaughtUpVelocityLength' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ActionTargetLocation) == 0x000138, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ActionTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, IsActionTarget) == 0x000150, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::IsActionTarget' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, MoveType) == 0x000151, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::MoveType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ControllableTurnDashRotation) == 0x000158, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ControllableTurnDashRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ControllableTurnTurnSpeed) == 0x000170, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ControllableTurnTurnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ControllableTurnNeutralTurnSpeed) == 0x000178, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ControllableTurnNeutralTurnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ControllableTargetInputInfluence) == 0x000180, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ControllableTargetInputInfluence' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, ControllableTargetInputInfluenceAttenuationDistance) == 0x000188, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::ControllableTargetInputInfluenceAttenuationDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, DragonHomingKeepDistanceInputInfluence) == 0x000190, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::DragonHomingKeepDistanceInputInfluence' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDragonHoming_C, IsSkillGaugeGain) == 0x000198, "Member 'UBP_CharacterLocomotionSubDragonHoming_C::IsSkillGaugeGain' has a wrong offset!");

}

