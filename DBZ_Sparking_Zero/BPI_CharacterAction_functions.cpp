#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterAction

#include "Basic.hpp"

#include "BPI_CharacterAction_classes.hpp"
#include "BPI_CharacterAction_parameters.hpp"


namespace SDK
{

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyAttackCollision(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyAttackCollision");

	Params::BPI_CharacterAction_C_AnimNotifyAttackCollision Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackCollisionTick
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::AnimNotifyAttackCollisionTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyAttackCollisionTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackHoming
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratAttackHomingDataList       InAttackHoming                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyAttackHoming(const struct FKoratAttackHomingDataList& InAttackHoming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyAttackHoming");

	Params::BPI_CharacterAction_C_AnimNotifyAttackHoming Parms{};

	Parms.InAttackHoming = std::move(InAttackHoming);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackMoveTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratAttackHomingDataList       InAttackHoming                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyAttackMoveTarget(const struct FKoratAttackHomingDataList& InAttackHoming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyAttackMoveTarget");

	Params::BPI_CharacterAction_C_AnimNotifyAttackMoveTarget Parms{};

	Parms.InAttackHoming = std::move(InAttackHoming);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyParry
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyParry(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyParry");

	Params::BPI_CharacterAction_C_AnimNotifyParry Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyPossibleVanishingRevenge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyPossibleVanishingRevenge(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyPossibleVanishingRevenge");

	Params::BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyResetArmorLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          SourceObject                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyResetArmorLevel(class UObject* SourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyResetArmorLevel");

	Params::BPI_CharacterAction_C_AnimNotifyResetArmorLevel Parms{};

	Parms.SourceObject = SourceObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyRevengeCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FKoratReplaceAnimationDataList>InAnimDataList                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_CharacterAction_C::AnimNotifyRevengeCounter(const bool Enable, const TArray<struct FKoratReplaceAnimationDataList>& InAnimDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyRevengeCounter");

	Params::BPI_CharacterAction_C_AnimNotifyRevengeCounter Parms{};

	Parms.Enable = Enable;
	Parms.InAnimDataList = std::move(InAnimDataList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySetActionCancel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifySetActionCancel(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifySetActionCancel");

	Params::BPI_CharacterAction_C_AnimNotifySetActionCancel Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySetArmorLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratArmorLevelDataList         ArmorLevel                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          SourceObject                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifySetArmorLevel(const struct FKoratArmorLevelDataList& ArmorLevel, class UObject* SourceObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifySetArmorLevel");

	Params::BPI_CharacterAction_C_AnimNotifySetArmorLevel Parms{};

	Parms.ArmorLevel = std::move(ArmorLevel);
	Parms.SourceObject = SourceObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySonicSway
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifySonicSway(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifySonicSway");

	Params::BPI_CharacterAction_C_AnimNotifySonicSway Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyVanishing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDisappearTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InAppearTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InSuccessDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDrawVanishingEffect                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FKoratVanishingMove>      InVanishingMove                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class USSActionCameraDataAsset*         InStartActionCamera                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USSActionCameraDataAsset*         InStartOpponentActionCamera                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USSActionCameraDataAsset*         InEndActionCamera                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USSActionCameraDataAsset*         InEndOpponentActionCamera                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOneshotDeadly                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::AnimNotifyVanishing(double InDisappearTime, double InAppearTime, double InSuccessDistance, bool IsDrawVanishingEffect, const TArray<struct FKoratVanishingMove>& InVanishingMove, class USSActionCameraDataAsset* InStartActionCamera, class USSActionCameraDataAsset* InStartOpponentActionCamera, class USSActionCameraDataAsset* InEndActionCamera, class USSActionCameraDataAsset* InEndOpponentActionCamera, bool IsOneshotDeadly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "AnimNotifyVanishing");

	Params::BPI_CharacterAction_C_AnimNotifyVanishing Parms{};

	Parms.InDisappearTime = InDisappearTime;
	Parms.InAppearTime = InAppearTime;
	Parms.InSuccessDistance = InSuccessDistance;
	Parms.IsDrawVanishingEffect = IsDrawVanishingEffect;
	Parms.InVanishingMove = std::move(InVanishingMove);
	Parms.InStartActionCamera = InStartActionCamera;
	Parms.InStartOpponentActionCamera = InStartOpponentActionCamera;
	Parms.InEndActionCamera = InEndActionCamera;
	Parms.InEndOpponentActionCamera = InEndOpponentActionCamera;
	Parms.IsOneshotDeadly = IsOneshotDeadly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.GetRequestAnimData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratRequestAnimData            RequestAnimData                                        (Parm, OutParm)

void IBPI_CharacterAction_C::GetRequestAnimData(struct FKoratRequestAnimData* RequestAnimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "GetRequestAnimData");

	Params::BPI_CharacterAction_C_GetRequestAnimData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RequestAnimData != nullptr)
		*RequestAnimData = std::move(Parms.RequestAnimData);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableDragonDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::IsPlayableDragonDash(bool* IsPlayable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "IsPlayableDragonDash");

	Params::BPI_CharacterAction_C_IsPlayableDragonDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayable != nullptr)
		*IsPlayable = Parms.IsPlayable;
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayablePursuit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratPursuitType                       InPursuitType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::IsPlayablePursuit(EKoratPursuitType InPursuitType, bool* IsPlayable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "IsPlayablePursuit");

	Params::BPI_CharacterAction_C_IsPlayablePursuit Parms{};

	Parms.InPursuitType = InPursuitType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayable != nullptr)
		*IsPlayable = Parms.IsPlayable;
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnChangeSection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratAnimType                          InAnimType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SectionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnChangeSection(EKoratAnimType InAnimType, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnChangeSection");

	Params::BPI_CharacterAction_C_OnChangeSection Parms{};

	Parms.InAnimType = InAnimType;
	Parms.SectionName = SectionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterGaveDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterMovementTransition       InMovementTransition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InHoming                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InBlownAttack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratActionAttackType                  InAttackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESituationOfOpponentWhenAttackHit       InOpponentHitSituation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratActionDataList             InAttackAction                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnCharacterGaveDamage(EKoratCharacterMovementTransition InMovementTransition, bool InHoming, bool InBlownAttack, EKoratActionAttackType InAttackType, ESituationOfOpponentWhenAttackHit InOpponentHitSituation, const struct FKoratActionDataList& InAttackAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnCharacterGaveDamage");

	Params::BPI_CharacterAction_C_OnCharacterGaveDamage Parms{};

	Parms.InMovementTransition = InMovementTransition;
	Parms.InHoming = InHoming;
	Parms.InBlownAttack = InBlownAttack;
	Parms.InAttackType = InAttackType;
	Parms.InOpponentHitSituation = InOpponentHitSituation;
	Parms.InAttackAction = std::move(InAttackAction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterReceivedDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratDamageReactionDataList     InDamageReactionDataList                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    InEndured                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsGuardSuccess                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnCharacterReceivedDamage(const struct FKoratDamageReactionDataList& InDamageReactionDataList, bool InEndured, bool InIsGuardSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnCharacterReceivedDamage");

	Params::BPI_CharacterAction_C_OnCharacterReceivedDamage Parms{};

	Parms.InDamageReactionDataList = std::move(InDamageReactionDataList);
	Parms.InEndured = InEndured;
	Parms.InIsGuardSuccess = InIsGuardSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterReceivedDamageByCombatives
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratCharacterCombativesParameterInCombativesParameter                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    InEndured                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInIsGuardSuccess                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnCharacterReceivedDamageByCombatives(const struct FKoratCharacterCombativesParameter& InCombativesParameter, bool InEndured, bool bInIsGuardSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnCharacterReceivedDamageByCombatives");

	Params::BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives Parms{};

	Parms.InCombativesParameter = std::move(InCombativesParameter);
	Parms.InEndured = InEndured;
	Parms.bInIsGuardSuccess = bInIsGuardSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnHitObjectCollisionOccured
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnHitObjectCollisionOccured(const struct FKoratActionDataList& InAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnHitObjectCollisionOccured");

	Params::BPI_CharacterAction_C_OnHitObjectCollisionOccured Parms{};

	Parms.InAction = std::move(InAction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnHitObjectStopped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::OnHitObjectStopped(const struct FKoratActionDataList& InAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnHitObjectStopped");

	Params::BPI_CharacterAction_C_OnHitObjectStopped Parms{};

	Parms.InAction = std::move(InAction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnPlayDragonDash
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::OnPlayDragonDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnPlayDragonDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnPlayDragonHoming
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::OnPlayDragonHoming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnPlayDragonHoming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnPlayZBurstDash
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::OnPlayZBurstDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnPlayZBurstDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.OnReachedBurstSmashMove
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::OnReachedBurstSmashMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "OnReachedBurstSmashMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.UpdateActionTurn
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::UpdateActionTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "UpdateActionTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::IsPlayableAction(bool* IsPlayable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "IsPlayableAction");

	Params::BPI_CharacterAction_C_IsPlayableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayable != nullptr)
		*IsPlayable = Parms.IsPlayable;
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::IsPlayableMove(bool* IsPlayable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "IsPlayableMove");

	Params::BPI_CharacterAction_C_IsPlayableMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayable != nullptr)
		*IsPlayable = Parms.IsPlayable;
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::IsPlayableReaction(bool* IsPlayable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterAction_C", "IsPlayableReaction");

	Params::BPI_CharacterAction_C_IsPlayableReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayable != nullptr)
		*IsPlayable = Parms.IsPlayable;
}

}

