#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackCollision

#include "Basic.hpp"

#include "BP_AttackCollision_classes.hpp"
#include "BP_AttackCollision_parameters.hpp"


namespace SDK
{

// Function BP_AttackCollision.BP_AttackCollision_C.ActorBeginOverlap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::ActorBeginOverlap(class AActor* OverlapActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ActorBeginOverlap");

	Params::BP_AttackCollision_C_ActorBeginOverlap Parms{};

	Parms.OverlapActor_0 = OverlapActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.CalcHitTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       HitTransform_0                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::CalcHitTransform(struct FTransform* HitTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "CalcHitTransform");

	Params::BP_AttackCollision_C_CalcHitTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HitTransform_0 != nullptr)
		*HitTransform_0 = std::move(Parms.HitTransform_0);
}


// Function BP_AttackCollision.BP_AttackCollision_C.CreatedCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASSCharacter*                     InCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FKoratAttackCollisionParameter   CollisionParameter_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FKoratActionDataList             CombativesSetData_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FKoratAdditionalDamageInfo       AdditionalDamageInfo                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// EKoratActionAttackType                  InAttackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::CreatedCollision(class ASSCharacter* InCharacter, const struct FKoratAttackCollisionParameter& CollisionParameter_0, const struct FKoratActionDataList& CombativesSetData_0, const struct FKoratAdditionalDamageInfo& AdditionalDamageInfo, EKoratActionAttackType InAttackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "CreatedCollision");

	Params::BP_AttackCollision_C_CreatedCollision Parms{};

	Parms.InCharacter = InCharacter;
	Parms.CollisionParameter_0 = std::move(CollisionParameter_0);
	Parms.CombativesSetData_0 = std::move(CombativesSetData_0);
	Parms.AdditionalDamageInfo = std::move(AdditionalDamageInfo);
	Parms.InAttackType = InAttackType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.DeleteCollision
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::DeleteCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "DeleteCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.DrawBoneCapsuleDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::DrawBoneCapsuleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "DrawBoneCapsuleDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.DrawBoxDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::DrawBoxDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "DrawBoxDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.DrawCapsuleDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::DrawCapsuleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "DrawCapsuleDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.DrawSphereDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::DrawSphereDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "DrawSphereDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.EnableCollision
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::EnableCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "EnableCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ExecAddHitAttackCollisionData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FKoratGaveDamageParameter        InDamageParam                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_AttackCollision_C::ExecAddHitAttackCollisionData(const struct FKoratGaveDamageParameter& InDamageParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ExecAddHitAttackCollisionData");

	Params::BP_AttackCollision_C_ExecAddHitAttackCollisionData Parms{};

	Parms.InDamageParam = std::move(InDamageParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ExecOccurOffset
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class ASSCharacter*                     InAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASSCharacter*                     InOpponentOffsetCharacter                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FKoratActionDataList             InAction                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// EKoratOffsetType                        InOffsetType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       InOffsetLocation                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratReceivedDamageParameter    InDamageParam                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_AttackCollision_C::ExecOccurOffset(class ASSCharacter* InAttacker, class ASSCharacter* InOpponentOffsetCharacter, const struct FKoratActionDataList& InAction, EKoratOffsetType InOffsetType, const struct FTransform& InOffsetLocation, const struct FKoratReceivedDamageParameter& InDamageParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ExecOccurOffset");

	Params::BP_AttackCollision_C_ExecOccurOffset Parms{};

	Parms.InAttacker = InAttacker;
	Parms.InOpponentOffsetCharacter = InOpponentOffsetCharacter;
	Parms.InAction = std::move(InAction);
	Parms.InOffsetType = InOffsetType;
	Parms.InOffsetLocation = std::move(InOffsetLocation);
	Parms.InDamageParam = std::move(InDamageParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ExecSetHitBoneLocation
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASSCharacter*                     OverlapCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::ExecSetHitBoneLocation(class ASSCharacter* OverlapCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ExecSetHitBoneLocation");

	Params::BP_AttackCollision_C_ExecSetHitBoneLocation Parms{};

	Parms.OverlapCharacter = OverlapCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ExecuteUbergraph_BP_AttackCollision
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::ExecuteUbergraph_BP_AttackCollision(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ExecuteUbergraph_BP_AttackCollision");

	Params::BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.GetAttackRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackCollision_C::GetAttackRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "GetAttackRotation");

	Params::BP_AttackCollision_C_GetAttackRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawAttackCollisionTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_AttackCollision_C::GetDrawAttackCollisionTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "GetDrawAttackCollisionTime");

	Params::BP_AttackCollision_C_GetDrawAttackCollisionTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawHitAreaTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_AttackCollision_C::GetDrawHitAreaTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "GetDrawHitAreaTime");

	Params::BP_AttackCollision_C_GetDrawHitAreaTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawHitPositionTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_AttackCollision_C::GetDrawHitPositionTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "GetDrawHitPositionTime");

	Params::BP_AttackCollision_C_GetDrawHitPositionTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawAttackCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_AttackCollision_C::IsDrawAttackCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "IsDrawAttackCollision");

	Params::BP_AttackCollision_C_IsDrawAttackCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawHitArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_AttackCollision_C::IsDrawHitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "IsDrawHitArea");

	Params::BP_AttackCollision_C_IsDrawHitArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawHitPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_AttackCollision_C::IsDrawHitPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "IsDrawHitPosition");

	Params::BP_AttackCollision_C_IsDrawHitPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AttackCollision.BP_AttackCollision_C.IsOccurOffsetHitCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Character_C*                  InAttackerCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Character_C*                  InOverlapCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOccur                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::IsOccurOffsetHitCharacter(class ABP_Character_C* InAttackerCharacter, class ABP_Character_C* InOverlapCharacter, bool* IsOccur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "IsOccurOffsetHitCharacter");

	Params::BP_AttackCollision_C_IsOccurOffsetHitCharacter Parms{};

	Parms.InAttackerCharacter = InAttackerCharacter;
	Parms.InOverlapCharacter = InOverlapCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOccur != nullptr)
		*IsOccur = Parms.IsOccur;
}


// Function BP_AttackCollision.BP_AttackCollision_C.IsOccurOffsetHitCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASSCharacter*                     InAttackerCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Character_C*                  InOverlapCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOccur                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratOffsetType                        OffsetType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::IsOccurOffsetHitCollision(class ASSCharacter* InAttackerCharacter, class ABP_Character_C* InOverlapCharacter, bool* IsOccur, EKoratOffsetType* OffsetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "IsOccurOffsetHitCollision");

	Params::BP_AttackCollision_C_IsOccurOffsetHitCollision Parms{};

	Parms.InAttackerCharacter = InAttackerCharacter;
	Parms.InOverlapCharacter = InOverlapCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOccur != nullptr)
		*IsOccur = Parms.IsOccur;

	if (OffsetType != nullptr)
		*OffsetType = Parms.OffsetType;
}


// Function BP_AttackCollision.BP_AttackCollision_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ReceiveActorBeginOverlap");

	Params::BP_AttackCollision_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AttackCollision_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ReceiveTick");

	Params::BP_AttackCollision_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.ReflectedHit
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::ReflectedHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "ReflectedHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.RefreshCollision
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FKoratAttackCollisionParameter   InCollisionParameter                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FKoratAdditionalDamageInfo       InAdditionalDamageInfo                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// EKoratActionAttackType                  InAttackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::RefreshCollision(const struct FKoratAttackCollisionParameter& InCollisionParameter, const struct FKoratActionDataList& InAction, const struct FKoratAdditionalDamageInfo& InAdditionalDamageInfo, EKoratActionAttackType InAttackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "RefreshCollision");

	Params::BP_AttackCollision_C_RefreshCollision Parms{};

	Parms.InCollisionParameter = std::move(InCollisionParameter);
	Parms.InAction = std::move(InAction);
	Parms.InAdditionalDamageInfo = std::move(InAdditionalDamageInfo);
	Parms.InAttackType = InAttackType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.SetRefreshParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratAttackCollisionParameter   InCollisionParameter                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FKoratActionDataList             InCombativesSetData                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FKoratAdditionalDamageInfo       InAdditionalDamageInfo                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// EKoratActionAttackType                  InAttackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::SetRefreshParameter(const struct FKoratAttackCollisionParameter& InCollisionParameter, const struct FKoratActionDataList& InCombativesSetData, const struct FKoratAdditionalDamageInfo& InAdditionalDamageInfo, EKoratActionAttackType InAttackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "SetRefreshParameter");

	Params::BP_AttackCollision_C_SetRefreshParameter Parms{};

	Parms.InCollisionParameter = std::move(InCollisionParameter);
	Parms.InCombativesSetData = std::move(InCombativesSetData);
	Parms.InAdditionalDamageInfo = std::move(InAdditionalDamageInfo);
	Parms.InAttackType = InAttackType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.Tick
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoneCapsuleParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::UpdateBoneCapsuleParam(bool InInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateBoneCapsuleParam");

	Params::BP_AttackCollision_C_UpdateBoneCapsuleParam Parms{};

	Parms.InInit = InInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoneLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::UpdateBoneLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateBoneLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoxParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::UpdateBoxParam(bool InInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateBoxParam");

	Params::BP_AttackCollision_C_UpdateBoxParam Parms{};

	Parms.InInit = InInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateCapsuleParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::UpdateCapsuleParam(bool InInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateCapsuleParam");

	Params::BP_AttackCollision_C_UpdateCapsuleParam Parms{};

	Parms.InInit = InInit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateCollision
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackCollision_C::UpdateCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackCollision.BP_AttackCollision_C.UpdateSphereParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InInit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackCollision_C::UpdateSphereParam(bool InInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackCollision_C", "UpdateSphereParam");

	Params::BP_AttackCollision_C_UpdateSphereParam Parms{};

	Parms.InInit = InInit;

	UObject::ProcessEvent(Func, &Parms);
}

}

