#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterBase

#include "Basic.hpp"

#include "BPI_CharacterBase_classes.hpp"
#include "BPI_CharacterBase_parameters.hpp"


namespace SDK
{

// Function BPI_CharacterBase.BPI_CharacterBase_C.Add Debug Draw Blow Param
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InDrawType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InHitTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDrawDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::Add_Debug_Draw_Blow_Param(const struct FVector& InLocation, int32 InDrawType, double InHitTime, double InDrawDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "Add Debug Draw Blow Param");

	Params::BPI_CharacterBase_C_Add_Debug_Draw_Blow_Param Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InDrawType = InDrawType;
	Parms.InHitTime = InHitTime;
	Parms.InDrawDuration = InDrawDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.AddCharacterMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::AddCharacterMovementInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "AddCharacterMovementInput");

	Params::BPI_CharacterBase_C_AddCharacterMovementInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.AddChildDashRoute
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DashRouteActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::AddChildDashRoute(class AActor** DashRouteActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "AddChildDashRoute");

	Params::BPI_CharacterBase_C_AddChildDashRoute Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DashRouteActor != nullptr)
		*DashRouteActor = Parms.DashRouteActor;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.AnimNotifyInputParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::AnimNotifyInputParam(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "AnimNotifyInputParam");

	Params::BPI_CharacterBase_C_AnimNotifyInputParam Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.AutoSetCharacterMovementModeToIdle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsValidSetWalking                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSet                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           SetMovementMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::AutoSetCharacterMovementModeToIdle(bool InIsValidSetWalking, bool* IsSet, EMovementMode* SetMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "AutoSetCharacterMovementModeToIdle");

	Params::BPI_CharacterBase_C_AutoSetCharacterMovementModeToIdle Parms{};

	Parms.InIsValidSetWalking = InIsValidSetWalking;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSet != nullptr)
		*IsSet = Parms.IsSet;

	if (SetMovementMode != nullptr)
		*SetMovementMode = Parms.SetMovementMode;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.ClearCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::ClearCharacterRotationPitch(bool InTeleportPhysics, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "ClearCharacterRotationPitch");

	Params::BPI_CharacterBase_C_ClearCharacterRotationPitch Parms{};

	Parms.InTeleportPhysics = InTeleportPhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetBPCharacterLocomotionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*LocomotionComponent                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetBPCharacterLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetBPCharacterLocomotionComponent");

	Params::BPI_CharacterBase_C_GetBPCharacterLocomotionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionComponent != nullptr)
		*LocomotionComponent = Parms.LocomotionComponent;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetBPCharacterMontageComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterMontageComponent_C*  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetBPCharacterMontageComponent(class UBP_CharacterMontageComponent_C** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetBPCharacterMontageComponent");

	Params::BPI_CharacterBase_C_GetBPCharacterMontageComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCameraVirtualTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetCameraVirtualTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetCameraVirtualTargetLocation");

	Params::BPI_CharacterBase_C_GetCameraVirtualTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetHitBackData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratHitBackMovementData        HitBackData                                            (Parm, OutParm)

void IBPI_CharacterBase_C::GetHitBackData(struct FKoratHitBackMovementData* HitBackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetHitBackData");

	Params::BPI_CharacterBase_C_GetHitBackData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HitBackData != nullptr)
		*HitBackData = std::move(Parms.HitBackData);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetKnockBackVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          KnockBackVector                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetKnockBackVector(struct FVector* KnockBackVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetKnockBackVector");

	Params::BPI_CharacterBase_C_GetKnockBackVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KnockBackVector != nullptr)
		*KnockBackVector = std::move(Parms.KnockBackVector);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetLocomotionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetLocomotionComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetLocomotionComponent");

	Params::BPI_CharacterBase_C_GetLocomotionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetLocomotionSplineComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetLocomotionSplineComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetLocomotionSplineComponent");

	Params::BPI_CharacterBase_C_GetLocomotionSplineComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetMontageComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetMontageComponent(class UActorComponent** ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetMontageComponent");

	Params::BPI_CharacterBase_C_GetMontageComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorComponent != nullptr)
		*ActorComponent = Parms.ActorComponent;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetReplaceSubInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SubInstanceName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SubInstanceTagName                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           SubInstanceClass                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetReplaceSubInstance(class FName SubInstanceName, class FName* SubInstanceTagName, class UClass** SubInstanceClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetReplaceSubInstance");

	Params::BPI_CharacterBase_C_GetReplaceSubInstance Parms{};

	Parms.SubInstanceName = SubInstanceName;

	UObject::ProcessEvent(Func, &Parms);

	if (SubInstanceTagName != nullptr)
		*SubInstanceTagName = Parms.SubInstanceTagName;

	if (SubInstanceClass != nullptr)
		*SubInstanceClass = Parms.SubInstanceClass;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetRequestAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRequestAnimData                RequestAnimData                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetRequestAnim(struct FFRequestAnimData* RequestAnimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetRequestAnim");

	Params::BPI_CharacterBase_C_GetRequestAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RequestAnimData != nullptr)
		*RequestAnimData = std::move(Parms.RequestAnimData);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetUseCharacterRotationPitchDetail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UsePitchLimit                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchInterp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetUseCharacterRotationPitchDetail(bool* UsePitchLimit, bool* UsePitchInterp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetUseCharacterRotationPitchDetail");

	Params::BPI_CharacterBase_C_GetUseCharacterRotationPitchDetail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitchLimit != nullptr)
		*UsePitchLimit = Parms.UsePitchLimit;

	if (UsePitchInterp != nullptr)
		*UsePitchInterp = Parms.UsePitchInterp;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetVirtualTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetVirtualTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetVirtualTargetLocation");

	Params::BPI_CharacterBase_C_GetVirtualTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputBattleKeyJustPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleKey                              BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputBattleKeyJustPressed(EBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputBattleKeyJustPressed");

	Params::BPI_CharacterBase_C_InputBattleKeyJustPressed Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputBattleKeyJustReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleKey                              BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputBattleKeyJustReleased(EBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputBattleKeyJustReleased");

	Params::BPI_CharacterBase_C_InputBattleKeyJustReleased Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputFreeCameraVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InputVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputFreeCameraVector(const struct FVector2D& InputVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputFreeCameraVector");

	Params::BPI_CharacterBase_C_InputFreeCameraVector Parms{};

	Parms.InputVector = std::move(InputVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyDown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputKoratBattleKeyDown(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputKoratBattleKeyDown");

	Params::BPI_CharacterBase_C_InputKoratBattleKeyDown Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyJustPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputKoratBattleKeyJustPressed");

	Params::BPI_CharacterBase_C_InputKoratBattleKeyJustPressed Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyJustReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputKoratBattleKeyJustReleased");

	Params::BPI_CharacterBase_C_InputKoratBattleKeyJustReleased Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.InputKoratBattleKeyUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         BattleKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::InputKoratBattleKeyUp(EKoratBattleKey BattleKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "InputKoratBattleKeyUp");

	Params::BPI_CharacterBase_C_InputKoratBattleKeyUp Parms{};

	Parms.BattleKey = BattleKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.NotifyPlayMontageLength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MontageLength                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::NotifyPlayMontageLength(double MontageLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "NotifyPlayMontageLength");

	Params::BPI_CharacterBase_C_NotifyPlayMontageLength Parms{};

	Parms.MontageLength = MontageLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.NotifyStartRevengeCounter
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterBase_C::NotifyStartRevengeCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "NotifyStartRevengeCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.OnEndRequestAllAnim
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterBase_C::OnEndRequestAllAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "OnEndRequestAllAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.OnPlayAnim
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterBase_C::OnPlayAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "OnPlayAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.PlayKnockBack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratHitBackMovementData        InHitBackData                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_CharacterBase_C::PlayKnockBack(const struct FKoratHitBackMovementData& InHitBackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "PlayKnockBack");

	Params::BPI_CharacterBase_C_PlayKnockBack Parms{};

	Parms.InHitBackData = std::move(InHitBackData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.SetCharacterMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           InMovementMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::SetCharacterMovementMode(EMovementMode InMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "SetCharacterMovementMode");

	Params::BPI_CharacterBase_C_SetCharacterMovementMode Parms{};

	Parms.InMovementMode = InMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.SetCharacterRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InNewRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InTeleportPhysics                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccessfully                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::SetCharacterRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool* IsSuccessfully)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "SetCharacterRotation");

	Params::BPI_CharacterBase_C_SetCharacterRotation Parms{};

	Parms.InNewRotation = std::move(InNewRotation);
	Parms.InTeleportPhysics = InTeleportPhysics;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccessfully != nullptr)
		*IsSuccessfully = Parms.IsSuccessfully;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.SetUseCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InUsePitch                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "SetUseCharacterRotationPitch");

	Params::BPI_CharacterBase_C_SetUseCharacterRotationPitch Parms{};

	Parms.InUsePitch = InUsePitch;

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitch != nullptr)
		*UsePitch = Parms.UsePitch;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.SetUseCharacterRotationPitchDetail
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InUsePitchLimit                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUsePitchInterp                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchLimit                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsePitchInterp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::SetUseCharacterRotationPitchDetail(bool InUsePitchLimit, bool InUsePitchInterp, bool* UsePitchLimit, bool* UsePitchInterp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "SetUseCharacterRotationPitchDetail");

	Params::BPI_CharacterBase_C_SetUseCharacterRotationPitchDetail Parms{};

	Parms.InUsePitchLimit = InUsePitchLimit;
	Parms.InUsePitchInterp = InUsePitchInterp;

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitchLimit != nullptr)
		*UsePitchLimit = Parms.UsePitchLimit;

	if (UsePitchInterp != nullptr)
		*UsePitchInterp = Parms.UsePitchInterp;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.SetVirtualTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InUseBattleTargetPawn                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::SetVirtualTarget(class AActor* InActor, const struct FVector& InLocation, bool InUseBattleTargetPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "SetVirtualTarget");

	Params::BPI_CharacterBase_C_SetVirtualTarget Parms{};

	Parms.InActor = InActor;
	Parms.InLocation = std::move(InLocation);
	Parms.InUseBattleTargetPawn = InUseBattleTargetPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.StopKnockBack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterBase_C::StopKnockBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "StopKnockBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCharacterMovementMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EMovementMode                           MovementMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetCharacterMovementMode(EMovementMode* MovementMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetCharacterMovementMode");

	Params::BPI_CharacterBase_C_GetCharacterMovementMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode != nullptr)
		*MovementMode = Parms.MovementMode;
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetCharacterRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharacterBase_C::GetCharacterRotation(struct FRotator* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetCharacterRotation");

	Params::BPI_CharacterBase_C_GetCharacterRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_CharacterBase.BPI_CharacterBase_C.GetUseCharacterRotationPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    UsePitch                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterBase_C::GetUseCharacterRotationPitch(bool* UsePitch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterBase_C", "GetUseCharacterRotationPitch");

	Params::BPI_CharacterBase_C_GetUseCharacterRotationPitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsePitch != nullptr)
		*UsePitch = Parms.UsePitch;
}

}

