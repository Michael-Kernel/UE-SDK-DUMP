#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlePlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattlePlayerController.BP_BattlePlayerController_C
// 0x0020 (0x0EF0 - 0x0ED0)
class ABP_BattlePlayerController_C final : public ASSBattlePlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0ED0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        HeightAxisValue;                                   // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        LocomotionComponent;                               // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressedKeyMoveUp;                                // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressedKeyMoveDown;                              // 0x0EE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddMovementInputXY(const struct FVector2D& InputVector, const struct FRotator& MovementRotation);
	void AddMovementInputZ(double AxisValue);
	void DebugInputPlayer();
	void ExecuteInputProcess();
	void ExecuteUbergraph_BP_BattlePlayerController(int32 EntryPoint);
	void GetFreeCameraRotationInputVector(bool* IsValid, struct FVector2D* InputVector);
	void GetMovementInputVector(bool* IsValid, struct FVector2D* InputVector);
	void GetMovementInputZ(double* AxisValue);
	void GetMovementRotation(const struct FVector2D& InputVector, struct FRotator* MovementRotation);
	void InputAction();
	void InputBlowReaction();
	void InputDashUpDown();
	void InputDebug();
	void InputDragonDash();
	void InputDragonHoming();
	void InputFreeCameraRotateYawPitch();
	void InputJump();
	void InputMovement();
	void InputMoveXY();
	void InputMoveZ();
	void InputPlayer();
	void InputStep();
	void IsInputBattleKeyDown(EBattleKey BattleKey, bool* IsDown);
	void IsInputKoratBattleKeyDown(EKoratBattleKey BattleKey, bool* IsDown);
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveTick(float DeltaSeconds);
	void SendInputBattleKeyJustPressed(EBattleKey BattleKey);
	void SendInputBattleKeyJustReleased(EBattleKey BattleKey);
	void SendInputKoratBattleKeyDown(EKoratBattleKey BattleKey);
	void SendInputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey);
	void SendInputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey);
	void StartKeyInputReplay(int32 PlayerIndex);
	void StartKeyInputSave(int32 PlayerIndex);
	void UpdateHeightAxisValue(bool IsUpward);
	void WasInputBattleKeyJustPressed(EBattleKey BattleKey, bool* IsPressed);
	void WasInputBattleKeyJustReleased(EBattleKey BattleKey, bool* IsReleased);
	void WasInputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey, bool* IsPressed);
	void WasInputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey, bool* IsReleased);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattlePlayerController_C">();
	}
	static class ABP_BattlePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattlePlayerController_C>();
	}
};
static_assert(alignof(ABP_BattlePlayerController_C) == 0x000010, "Wrong alignment on ABP_BattlePlayerController_C");
static_assert(sizeof(ABP_BattlePlayerController_C) == 0x000EF0, "Wrong size on ABP_BattlePlayerController_C");
static_assert(offsetof(ABP_BattlePlayerController_C, UberGraphFrame) == 0x000ED0, "Member 'ABP_BattlePlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattlePlayerController_C, HeightAxisValue) == 0x000ED8, "Member 'ABP_BattlePlayerController_C::HeightAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_BattlePlayerController_C, LocomotionComponent) == 0x000EE0, "Member 'ABP_BattlePlayerController_C::LocomotionComponent' has a wrong offset!");
static_assert(offsetof(ABP_BattlePlayerController_C, IsPressedKeyMoveUp) == 0x000EE8, "Member 'ABP_BattlePlayerController_C::IsPressedKeyMoveUp' has a wrong offset!");
static_assert(offsetof(ABP_BattlePlayerController_C, IsPressedKeyMoveDown) == 0x000EE9, "Member 'ABP_BattlePlayerController_C::IsPressedKeyMoveDown' has a wrong offset!");

}

