#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRBP_0000_00_00_WRIST

#include "Basic.hpp"

#include "KoratControlRigExtension_classes.hpp"
#include "RigVM_classes.hpp"
#include "ControlRig_structs.hpp"
#include "SS_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CRBP_0000_00_00_WRIST.CRBP_0000_00_00_WRIST_C
// 0x0000 (0x0568 - 0x0568)
class UCRBP_0000_00_00_WRIST_C final : public UKoratControlRig
{
public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CRBP_0000_00_00_WRIST_C">();
	}
	static class UCRBP_0000_00_00_WRIST_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCRBP_0000_00_00_WRIST_C>();
	}
};
static_assert(alignof(UCRBP_0000_00_00_WRIST_C) == 0x000008, "Wrong alignment on UCRBP_0000_00_00_WRIST_C");
static_assert(sizeof(UCRBP_0000_00_00_WRIST_C) == 0x000568, "Wrong size on UCRBP_0000_00_00_WRIST_C");

// RigVMMemoryStorageGeneratorClass CRBP_0000_00_00_WRIST.RigVMMemory_Work
// 0x0058 (0x0080 - 0x0028)
class CRBP_0000_00_00_WRIST::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FControlRigExecuteContext              ExecuteContext_;                                   // 0x0028(0x0038)(Edit, EditConst, NonTransactional)
	TArray<struct FKoratRigUnit_MeshClippingWrist> RigVMModel___KoratRigUnit_SetWristL_MT_Left;       // 0x0060(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FKoratRigUnit_MeshClippingWrist> RigVMModel___KoratRigUnit_SetWristR_MT_Right;      // 0x0070(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CRBP_0000_00_00_WRIST.RigVMMemory_Work", true>();
	}
	static class CRBP_0000_00_00_WRIST::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<CRBP_0000_00_00_WRIST::URigVMMemory_Work>();
	}
};
static_assert(alignof(CRBP_0000_00_00_WRIST::URigVMMemory_Work) == 0x000008, "Wrong alignment on CRBP_0000_00_00_WRIST::URigVMMemory_Work");
static_assert(sizeof(CRBP_0000_00_00_WRIST::URigVMMemory_Work) == 0x000080, "Wrong size on CRBP_0000_00_00_WRIST::URigVMMemory_Work");
static_assert(offsetof(CRBP_0000_00_00_WRIST::URigVMMemory_Work, ExecuteContext_) == 0x000028, "Member 'CRBP_0000_00_00_WRIST::URigVMMemory_Work::ExecuteContext_' has a wrong offset!");
static_assert(offsetof(CRBP_0000_00_00_WRIST::URigVMMemory_Work, RigVMModel___KoratRigUnit_SetWristL_MT_Left) == 0x000060, "Member 'CRBP_0000_00_00_WRIST::URigVMMemory_Work::RigVMModel___KoratRigUnit_SetWristL_MT_Left' has a wrong offset!");
static_assert(offsetof(CRBP_0000_00_00_WRIST::URigVMMemory_Work, RigVMModel___KoratRigUnit_SetWristR_MT_Right) == 0x000070, "Member 'CRBP_0000_00_00_WRIST::URigVMMemory_Work::RigVMModel___KoratRigUnit_SetWristR_MT_Right' has a wrong offset!");

}

