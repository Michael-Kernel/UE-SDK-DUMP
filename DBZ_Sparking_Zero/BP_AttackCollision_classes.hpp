#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackCollision

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AttackCollision.BP_AttackCollision_C
// 0x01B0 (0x0FD0 - 0x0E20)
class ABP_AttackCollision_C final : public AKoratAttackPoolableActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0E28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0E30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0E38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0E40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           AttackerCharacter;                                 // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OverlapActor;                                      // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratAttackCollisionParameter         CollisionParameter;                                // 0x0E58(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector                                StartLocation;                                     // 0x0EC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED8[0x8];                                      // 0x0ED8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitTransform;                                      // 0x0EE0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActor;                                          // 0x0F40(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                PreStartLocation;                                  // 0x0F50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitBoneName;                                       // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CombativesSetData;                                 // 0x0F70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeletedCollision;                                // 0x0F78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F79[0x7];                                      // 0x0F79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartBoneLocation;                                 // 0x0F80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndBoneLocation;                                   // 0x0F98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreStartBoneLocation;                              // 0x0FB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCallOnNotifyTick;                                // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableCollision;                                 // 0x0FC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReflectedHit;                                    // 0x0FCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeginCollision;                                  // 0x0FCB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               HitCheckTraceType;                                 // 0x0FCC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActorBeginOverlap(class AActor* OverlapActor_0);
	void CalcHitTransform(struct FTransform* HitTransform_0);
	void CreatedCollision(class ASSCharacter* InCharacter, const struct FKoratAttackCollisionParameter& CollisionParameter_0, const struct FKoratActionDataList& CombativesSetData_0, const struct FKoratAdditionalDamageInfo& AdditionalDamageInfo, EKoratActionAttackType InAttackType);
	void DeleteCollision();
	void DrawBoneCapsuleDebug();
	void DrawBoxDebug();
	void DrawCapsuleDebug();
	void DrawSphereDebug();
	void EnableCollision();
	void ExecAddHitAttackCollisionData(const struct FKoratGaveDamageParameter& InDamageParam);
	void ExecOccurOffset(class ASSCharacter* InAttacker, class ASSCharacter* InOpponentOffsetCharacter, const struct FKoratActionDataList& InAction, EKoratOffsetType InOffsetType, const struct FTransform& InOffsetLocation, const struct FKoratReceivedDamageParameter& InDamageParam);
	void ExecSetHitBoneLocation(class ASSCharacter* OverlapCharacter);
	void ExecuteUbergraph_BP_AttackCollision(int32 EntryPoint);
	void GetAttackRotation(struct FRotator* Rotation);
	double GetDrawAttackCollisionTime();
	double GetDrawHitAreaTime();
	double GetDrawHitPositionTime();
	bool IsDrawAttackCollision();
	bool IsDrawHitArea();
	bool IsDrawHitPosition();
	void IsOccurOffsetHitCharacter(class ABP_Character_C* InAttackerCharacter, class ABP_Character_C* InOverlapCharacter, bool* IsOccur);
	void IsOccurOffsetHitCollision(class ASSCharacter* InAttackerCharacter, class ABP_Character_C* InOverlapCharacter, bool* IsOccur, EKoratOffsetType* OffsetType);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReflectedHit();
	void RefreshCollision(const struct FKoratAttackCollisionParameter& InCollisionParameter, const struct FKoratActionDataList& InAction, const struct FKoratAdditionalDamageInfo& InAdditionalDamageInfo, EKoratActionAttackType InAttackType);
	void SetRefreshParameter(const struct FKoratAttackCollisionParameter& InCollisionParameter, const struct FKoratActionDataList& InCombativesSetData, const struct FKoratAdditionalDamageInfo& InAdditionalDamageInfo, EKoratActionAttackType InAttackType);
	void Tick();
	void UpdateBoneCapsuleParam(bool InInit);
	void UpdateBoneLocation();
	void UpdateBoxParam(bool InInit);
	void UpdateCapsuleParam(bool InInit);
	void UpdateCollision();
	void UpdateSphereParam(bool InInit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AttackCollision_C">();
	}
	static class ABP_AttackCollision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AttackCollision_C>();
	}
};
static_assert(alignof(ABP_AttackCollision_C) == 0x000010, "Wrong alignment on ABP_AttackCollision_C");
static_assert(sizeof(ABP_AttackCollision_C) == 0x000FD0, "Wrong size on ABP_AttackCollision_C");
static_assert(offsetof(ABP_AttackCollision_C, UberGraphFrame) == 0x000E20, "Member 'ABP_AttackCollision_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, Sphere) == 0x000E28, "Member 'ABP_AttackCollision_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, Box) == 0x000E30, "Member 'ABP_AttackCollision_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, Capsule) == 0x000E38, "Member 'ABP_AttackCollision_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, Scene) == 0x000E40, "Member 'ABP_AttackCollision_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, AttackerCharacter) == 0x000E48, "Member 'ABP_AttackCollision_C::AttackerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, OverlapActor) == 0x000E50, "Member 'ABP_AttackCollision_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, CollisionParameter) == 0x000E58, "Member 'ABP_AttackCollision_C::CollisionParameter' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, StartLocation) == 0x000EC0, "Member 'ABP_AttackCollision_C::StartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, HitTransform) == 0x000EE0, "Member 'ABP_AttackCollision_C::HitTransform' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, HitActor) == 0x000F40, "Member 'ABP_AttackCollision_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, PreStartLocation) == 0x000F50, "Member 'ABP_AttackCollision_C::PreStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, HitBoneName) == 0x000F68, "Member 'ABP_AttackCollision_C::HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, CombativesSetData) == 0x000F70, "Member 'ABP_AttackCollision_C::CombativesSetData' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, IsDeletedCollision) == 0x000F78, "Member 'ABP_AttackCollision_C::IsDeletedCollision' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, StartBoneLocation) == 0x000F80, "Member 'ABP_AttackCollision_C::StartBoneLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, EndBoneLocation) == 0x000F98, "Member 'ABP_AttackCollision_C::EndBoneLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, PreStartBoneLocation) == 0x000FB0, "Member 'ABP_AttackCollision_C::PreStartBoneLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, IsCallOnNotifyTick) == 0x000FC8, "Member 'ABP_AttackCollision_C::IsCallOnNotifyTick' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, IsEnableCollision) == 0x000FC9, "Member 'ABP_AttackCollision_C::IsEnableCollision' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, IsReflectedHit) == 0x000FCA, "Member 'ABP_AttackCollision_C::IsReflectedHit' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, IsBeginCollision) == 0x000FCB, "Member 'ABP_AttackCollision_C::IsBeginCollision' has a wrong offset!");
static_assert(offsetof(ABP_AttackCollision_C, HitCheckTraceType) == 0x000FCC, "Member 'ABP_AttackCollision_C::HitCheckTraceType' has a wrong offset!");

}

