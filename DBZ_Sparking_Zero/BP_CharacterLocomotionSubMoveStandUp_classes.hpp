#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubMoveStandUp

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "ECharacterDirection_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C
// 0x0370 (0x03D0 - 0x0060)
class UBP_CharacterLocomotionSubMoveStandUp_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	ECharacterMoveStandUpState                    ActionStatus;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionIsFront;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                ActionDirection;                                   // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveMaxAddMoveTime;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveInputVector;                                   // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVector;                                        // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        E________M____;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        E______________;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveAddMoveTimer;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            TurnCurve;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TurnDelta;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnTimer;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementData              Hit_Back_Data;                                     // 0x00D0(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRotator                               TurnStartRotation;                                 // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterMoveStandUpDirection                InputDirection;                                    // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateActionDirection();
	void CalculateInputDirection();
	void CalculateMoveVector();
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckInput(bool* IsOK);
	void ClearStatus();
	void GetBlowInfo();
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetMovementParameter(ECharacterMoveStandUpState InActionStatus, double* ____, double* ____B_, double* _____, double* Zerobni_n7U, double* ___);
	void GetParameter(class UCurveFloat** _______, struct FKoratMoveStandUpMovementParameter* _______IN, struct FKoratMoveStandUpMovementParameter* _______OT);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void IsEnableAction(bool* IsEnable);
	void SetMoveInputVector();
	void SetMovementParameter(ECharacterMoveStandUpState InActionStatus);
	void SetStatus(ECharacterMoveStandUpState InActionStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetUpAction();
	void SetUpMove();
	void SetUpMovement_Parameter(ECharacterMoveStandUpState InActionStatus);
	void SetUpTurn();
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StateIN();
	void StateINOnSetAnimTime();
	void StateINStop();
	void StateINUpdate();
	void StateOT();
	void StateOTOnSetAnimTime();
	void StateOTStop();
	void StateOTUpdate();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateAlways(double InDeltaSeconds);
	void UpdateMove(double InDeltaSeconds, ECharacterMoveStandUpState* NextActionStatus);
	void UpdateTurn(double InDeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubMoveStandUp_C">();
	}
	static class UBP_CharacterLocomotionSubMoveStandUp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubMoveStandUp_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubMoveStandUp_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubMoveStandUp_C");
static_assert(sizeof(UBP_CharacterLocomotionSubMoveStandUp_C) == 0x0003D0, "Wrong size on UBP_CharacterLocomotionSubMoveStandUp_C");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, ActionStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::ActionStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, ActionIsFront) == 0x000061, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::ActionIsFront' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, ActionDirection) == 0x000062, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::ActionDirection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, MoveMaxAddMoveTime) == 0x000068, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::MoveMaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, MoveInputVector) == 0x000070, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::MoveInputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, MoveVector) == 0x000088, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::MoveVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, E________M____) == 0x0000A0, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::E________M____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, E______________) == 0x0000A8, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::E______________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, MoveAddMoveTimer) == 0x0000B0, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::MoveAddMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, TurnCurve) == 0x0000B8, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::TurnCurve' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, TurnDelta) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::TurnDelta' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, TurnTimer) == 0x0000C8, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::TurnTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, Hit_Back_Data) == 0x0000D0, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::Hit_Back_Data' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, TurnStartRotation) == 0x0003B0, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::TurnStartRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubMoveStandUp_C, InputDirection) == 0x0003C8, "Member 'UBP_CharacterLocomotionSubMoveStandUp_C::InputDirection' has a wrong offset!");

}

