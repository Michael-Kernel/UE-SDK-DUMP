#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareAdxLipSync

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CriWareAdxLipSync_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class CriWareAdxLipSync.LipsAnalyzerBase
// 0x0000 (0x0028 - 0x0028)
class ULipsAnalyzerBase : public UObject
{
public:
	void Init(const int32 MaxInputSamplingRate, const ELipsAnalyzerDataReadoutMode DataReadoutMode);
	void SetReadoutOffset(int64 OffsetMs);
	void SetSamplingRate(const int32 SamplingRateHz);
	void SetSilenceThreshold(const float VolumeDb);

	struct FCriLipsMouthInfo GetInfo() const;
	struct FCriLipsMouthInfo GetInfoAtSilence() const;
	struct FCriLipsMorphTargetBlendAmountAsJapanese GetMorphTargetBlendAmountAsJapanese() const;
	float GetSilenceThreshold() const;
	float GetVolume() const;
	bool IsAtSilence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LipsAnalyzerBase">();
	}
	static class ULipsAnalyzerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULipsAnalyzerBase>();
	}
};
static_assert(alignof(ULipsAnalyzerBase) == 0x000008, "Wrong alignment on ULipsAnalyzerBase");
static_assert(sizeof(ULipsAnalyzerBase) == 0x000028, "Wrong size on ULipsAnalyzerBase");

// Class CriWareAdxLipSync.LipsAtomAnalyzer
// 0x0010 (0x0038 - 0x0028)
class ULipsAtomAnalyzer final : public ULipsAnalyzerBase
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         AtomComponent;                                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Attach(class UAtomComponent* InAtomComponent);
	void Detach();
	bool IsAttached();

	ELipsAtomAnalyzerProcessStatus GetProcessStatus() const;
	ELipsAtomAnalyzerReadoutStatus GetReadoutStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LipsAtomAnalyzer">();
	}
	static class ULipsAtomAnalyzer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULipsAtomAnalyzer>();
	}
};
static_assert(alignof(ULipsAtomAnalyzer) == 0x000008, "Wrong alignment on ULipsAtomAnalyzer");
static_assert(sizeof(ULipsAtomAnalyzer) == 0x000038, "Wrong size on ULipsAtomAnalyzer");
static_assert(offsetof(ULipsAtomAnalyzer, AtomComponent) == 0x000030, "Member 'ULipsAtomAnalyzer::AtomComponent' has a wrong offset!");

// Class CriWareAdxLipSync.AtomLipSyncSectionParameterSettings
// 0x0038 (0x0060 - 0x0028)
class UAtomLipSyncSectionParameterSettings final : public UObject
{
public:
	struct FAtomLipSyncSectionParameter           AtomLipSyncSectionParameter;                       // 0x0028(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomLipSyncSectionParameterSettings">();
	}
	static class UAtomLipSyncSectionParameterSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomLipSyncSectionParameterSettings>();
	}
};
static_assert(alignof(UAtomLipSyncSectionParameterSettings) == 0x000008, "Wrong alignment on UAtomLipSyncSectionParameterSettings");
static_assert(sizeof(UAtomLipSyncSectionParameterSettings) == 0x000060, "Wrong size on UAtomLipSyncSectionParameterSettings");
static_assert(offsetof(UAtomLipSyncSectionParameterSettings, AtomLipSyncSectionParameter) == 0x000028, "Member 'UAtomLipSyncSectionParameterSettings::AtomLipSyncSectionParameter' has a wrong offset!");

// Class CriWareAdxLipSync.MovieSceneLipSyncAtomSection
// 0x0650 (0x0740 - 0x00F0)
class UMovieSceneLipSyncAtomSection final : public UMovieSceneSection
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x00F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           StartFrameOffset;                                  // 0x00F8(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideAtomLipSyncSectionParameterSettings;      // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomLipSyncSectionParameterSettings*   AtomLipSyncSectionParameterSettings;               // 0x0100(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAtomLipSyncSectionParameter           AtomLipSyncSectionParameterOverrides;              // 0x0108(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                SoundVolume;                                       // 0x0140(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                PitchMultiplier;                                   // 0x0250(0x0110)(NativeAccessSpecifierPrivate)
	bool                                          bOverrideAttenuation;                              // 0x0360(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0368(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x0370(0x03C8)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStartOffset(const struct FFrameNumber& InStartOffset);

	struct FFrameNumber GetStartOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLipSyncAtomSection">();
	}
	static class UMovieSceneLipSyncAtomSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLipSyncAtomSection>();
	}
};
static_assert(alignof(UMovieSceneLipSyncAtomSection) == 0x000008, "Wrong alignment on UMovieSceneLipSyncAtomSection");
static_assert(sizeof(UMovieSceneLipSyncAtomSection) == 0x000740, "Wrong size on UMovieSceneLipSyncAtomSection");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, Sound) == 0x0000F0, "Member 'UMovieSceneLipSyncAtomSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, StartFrameOffset) == 0x0000F8, "Member 'UMovieSceneLipSyncAtomSection::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, bOverrideAtomLipSyncSectionParameterSettings) == 0x0000FC, "Member 'UMovieSceneLipSyncAtomSection::bOverrideAtomLipSyncSectionParameterSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, AtomLipSyncSectionParameterSettings) == 0x000100, "Member 'UMovieSceneLipSyncAtomSection::AtomLipSyncSectionParameterSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, AtomLipSyncSectionParameterOverrides) == 0x000108, "Member 'UMovieSceneLipSyncAtomSection::AtomLipSyncSectionParameterOverrides' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, SoundVolume) == 0x000140, "Member 'UMovieSceneLipSyncAtomSection::SoundVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, PitchMultiplier) == 0x000250, "Member 'UMovieSceneLipSyncAtomSection::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, bOverrideAttenuation) == 0x000360, "Member 'UMovieSceneLipSyncAtomSection::bOverrideAttenuation' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, AttenuationSettings) == 0x000368, "Member 'UMovieSceneLipSyncAtomSection::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneLipSyncAtomSection, AttenuationOverrides) == 0x000370, "Member 'UMovieSceneLipSyncAtomSection::AttenuationOverrides' has a wrong offset!");

// Class CriWareAdxLipSync.MovieSceneLipSyncAtomTrack
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneLipSyncAtomTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             AtomSections;                                      // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLipSyncAtomTrack">();
	}
	static class UMovieSceneLipSyncAtomTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLipSyncAtomTrack>();
	}
};
static_assert(alignof(UMovieSceneLipSyncAtomTrack) == 0x000008, "Wrong alignment on UMovieSceneLipSyncAtomTrack");
static_assert(sizeof(UMovieSceneLipSyncAtomTrack) == 0x0000B0, "Wrong size on UMovieSceneLipSyncAtomTrack");
static_assert(offsetof(UMovieSceneLipSyncAtomTrack, AtomSections) == 0x0000A0, "Member 'UMovieSceneLipSyncAtomTrack::AtomSections' has a wrong offset!");

}

