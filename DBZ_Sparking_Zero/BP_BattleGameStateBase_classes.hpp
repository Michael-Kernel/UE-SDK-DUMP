#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleGameStateBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleGameStateBase.BP_BattleGameStateBase_C
// 0x0F40 (0x1C10 - 0x0CD0)
class ABP_BattleGameStateBase_C final : public ASSBattleGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USSBattleSettleComponent*               SSBattleSettleComponent;                           // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        beforInput;                                        // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PhaseTime;                                         // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AfterInput;                                        // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           WinnerCharacter;                                   // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         ResultSubLevels;                                   // 0x0D08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UObject>                 ResultSublevel;                                    // 0x0D18(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         TitleSublevels;                                    // 0x0D48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         MainMenuSublevels;                                 // 0x0D58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AdvifCharaSelectSublevels;                         // 0x0D68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AdifChartSublevels;                                // 0x0D78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         DramaticBattleSublevels;                           // 0x0D88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         DramaticBattleEditSublevels;                       // 0x0D98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         BattleSetupSublevels;                              // 0x0DA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         MissionZenSublevels;                               // 0x0DB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         MissionWhisSublevels;                              // 0x0DC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ShopSublevels;                                     // 0x0DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ZCustomizeSublevels;                               // 0x0DE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         SparkingSublevels;                                 // 0x0DF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         MyDataSublevels;                                   // 0x0E08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AppreciationSublevels;                             // 0x0E18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         OnegaiShenronSublevels;                            // 0x0E28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         TempSublevels;                                     // 0x0E38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         EventSubLevels;                                    // 0x0E48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              LoadStartTime;                                     // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         StageSelectSublevels;                              // 0x0E60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ChangeBeforeLocation;                              // 0x0E70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ChangeBeforeNullLocation;                          // 0x0E88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   ChaseChangeTargetAction;                           // 0x0EA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratActionDataList>           ChaseChangeInActions;                              // 0x0EA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           LineColor_pl;                                      // 0x0EB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LineColor_em;                                      // 0x0EC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   TaketurnsAction;                                   // 0x0ED8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         BattleTraningSublevels;                            // 0x0EE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratSequencePlayInfo>         Sequence_Play_Info;                                // 0x0EF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBattleSettleAttackType                       SettleAttackType;                                  // 0x0F00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F01[0x7];                                      // 0x0F01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBattleSettleAttackType, class ULevelSequence*> LoserDemoSequence;                                 // 0x0F08(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratSequencePlayInfo>         MapChangeSequencePlayInfo;                         // 0x0F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratSequencePlayInfo>         MapChangeSequencePlayInfoOfEscape;                 // 0x0F68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKoratSequencePlayInfo>         MapChangeSequencePlayInfoOfDestruct;               // 0x0F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ASSLevelSequenceActor*                  MapChangeSequenceActor;                            // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MapChangeSequencePreFrame;                         // 0x0F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapChangeSequenceFrame;                            // 0x0F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           TargetCharacter;                                   // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EBattleSettleAttackType, class ULevelSequence*> DoubleKnockoutDemoSequence;                        // 0x0FA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBattleSettleTransitionType                   SettleTransitionType;                              // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratReceivedDamageParameter          DamageParameter;                                   // 0x0FF8(0x0AC0)(Edit, BlueprintVisible)
	class ASSCharacter*                           MapCharacter;                                      // 0x1AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   BeforeCharacterAction;                             // 0x1AC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AppealSkipFadeTime;                                // 0x1AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AppealSkipEndWaitTime;                             // 0x1AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratMapDataList                      InMapDataList;                                     // 0x1AD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          InLevelSequence;                                   // 0x1AE0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          InOTLevelSequence;                                 // 0x1B10(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class ABP_Character_C*                        MapChangeBpCharacter;                              // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStopMapChangeSequenceActor;                      // 0x1B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B49[0x7];                                     // 0x1B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASSCharacter*>                   Supporters;                                        // 0x1B50(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsUnionAct;                                        // 0x1B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B61[0x7];                                     // 0x1B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBattleSettleAttackType, class ULevelSequence*> FinishDemoSequence;                                // 0x1B68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanApearSkip;                                      // 0x1BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BB9[0x7];                                     // 0x1BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _____K______gn_p;                                  // 0x1BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ____2L_;                                           // 0x1BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BCC[0x4];                                     // 0x1BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  StartSequenceActor;                                // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ___________W_K_;                                   // 0x1BD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDramaticFinish;                                   // 0x1BD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BDA[0x6];                                     // 0x1BDA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratRebindDescription>        RebindDescriptionArray;                            // 0x1BE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsEnableFRMC2OT;                                   // 0x1BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is2PFirst;                                         // 0x1BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BF2[0x6];                                     // 0x1BF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BGMManager_C*                       BGMManager;                                        // 0x1BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DelayEndLoadingSection;                            // 0x1C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableUnionLoadingSection;                         // 0x1C01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AllLevelsLoadSuccess_F60F70394E3CA03E65380D8147565930();
	void ExecuteUbergraph_BP_BattleGameStateBase(int32 EntryPoint);
	void GetChangeCharacterAction_IN(struct FKoratActionDataList* NewParam);
	void GetChangeCharacterAction_LP(struct FKoratActionDataList* NewParam);
	void GetChangeCharacterAction_LPR(struct FKoratActionDataList* NewParam);
	void GetChangeCharacterAction_OT(struct FKoratActionDataList* NewParam);
	void GetChangeCharacterAction_STD(struct FKoratActionDataList* NewParam);
	void OnApearSceneStart();
	void OnBattleSetupStart();
	void OnBlastImpactSceneStart();
	void OnBodyChangeSceneStart(const struct FKoratActionDataList& InAction);
	void OnCharacterChangeSceneStart();
	void OnCharacterDamageChangeSceneStart();
	void OnCharacterTaketurnsSceneStart();
	void OnCrashImpactSceneStart();
	void OnDestroyBattleCharacterAllDelay();
	void OnImpactAttack(int32 InPlaySide);
	void OnMapChange(const struct FKoratMapDataList& InMapDataList_0, const TSoftObjectPtr<class ULevelSequence>& InLevelSequence_0, const TSoftObjectPtr<class ULevelSequence>& InOTLevelSequence_0);
	void OnPowerImpactGToGSceneStart();
	void OnPowerImpactGToNSceneStart();
	void OnPowerImpactNToGSceneStart();
	void OnPowerImpactSceneStart();
	void OnSpeedImpactSceneStart();
	void OnVictoryAppealSceneStart(class ASSCharacter* InWinner);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void __________L__K_(bool* OutEnableSupporters);
	void __Minusn_____kOTLB_K(bool* NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleGameStateBase_C">();
	}
	static class ABP_BattleGameStateBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleGameStateBase_C>();
	}
};
static_assert(alignof(ABP_BattleGameStateBase_C) == 0x000010, "Wrong alignment on ABP_BattleGameStateBase_C");
static_assert(sizeof(ABP_BattleGameStateBase_C) == 0x001C10, "Wrong size on ABP_BattleGameStateBase_C");
static_assert(offsetof(ABP_BattleGameStateBase_C, UberGraphFrame) == 0x000CD0, "Member 'ABP_BattleGameStateBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, SSBattleSettleComponent) == 0x000CD8, "Member 'ABP_BattleGameStateBase_C::SSBattleSettleComponent' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DefaultSceneRoot) == 0x000CE0, "Member 'ABP_BattleGameStateBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, beforInput) == 0x000CE8, "Member 'ABP_BattleGameStateBase_C::beforInput' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, PhaseTime) == 0x000CF0, "Member 'ABP_BattleGameStateBase_C::PhaseTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AfterInput) == 0x000CF8, "Member 'ABP_BattleGameStateBase_C::AfterInput' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, WinnerCharacter) == 0x000D00, "Member 'ABP_BattleGameStateBase_C::WinnerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ResultSubLevels) == 0x000D08, "Member 'ABP_BattleGameStateBase_C::ResultSubLevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ResultSublevel) == 0x000D18, "Member 'ABP_BattleGameStateBase_C::ResultSublevel' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, TitleSublevels) == 0x000D48, "Member 'ABP_BattleGameStateBase_C::TitleSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MainMenuSublevels) == 0x000D58, "Member 'ABP_BattleGameStateBase_C::MainMenuSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AdvifCharaSelectSublevels) == 0x000D68, "Member 'ABP_BattleGameStateBase_C::AdvifCharaSelectSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AdifChartSublevels) == 0x000D78, "Member 'ABP_BattleGameStateBase_C::AdifChartSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DramaticBattleSublevels) == 0x000D88, "Member 'ABP_BattleGameStateBase_C::DramaticBattleSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DramaticBattleEditSublevels) == 0x000D98, "Member 'ABP_BattleGameStateBase_C::DramaticBattleEditSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, BattleSetupSublevels) == 0x000DA8, "Member 'ABP_BattleGameStateBase_C::BattleSetupSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MissionZenSublevels) == 0x000DB8, "Member 'ABP_BattleGameStateBase_C::MissionZenSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MissionWhisSublevels) == 0x000DC8, "Member 'ABP_BattleGameStateBase_C::MissionWhisSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ShopSublevels) == 0x000DD8, "Member 'ABP_BattleGameStateBase_C::ShopSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ZCustomizeSublevels) == 0x000DE8, "Member 'ABP_BattleGameStateBase_C::ZCustomizeSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, SparkingSublevels) == 0x000DF8, "Member 'ABP_BattleGameStateBase_C::SparkingSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MyDataSublevels) == 0x000E08, "Member 'ABP_BattleGameStateBase_C::MyDataSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AppreciationSublevels) == 0x000E18, "Member 'ABP_BattleGameStateBase_C::AppreciationSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, OnegaiShenronSublevels) == 0x000E28, "Member 'ABP_BattleGameStateBase_C::OnegaiShenronSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, TempSublevels) == 0x000E38, "Member 'ABP_BattleGameStateBase_C::TempSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, EventSubLevels) == 0x000E48, "Member 'ABP_BattleGameStateBase_C::EventSubLevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, LoadStartTime) == 0x000E58, "Member 'ABP_BattleGameStateBase_C::LoadStartTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, StageSelectSublevels) == 0x000E60, "Member 'ABP_BattleGameStateBase_C::StageSelectSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ChangeBeforeLocation) == 0x000E70, "Member 'ABP_BattleGameStateBase_C::ChangeBeforeLocation' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ChangeBeforeNullLocation) == 0x000E88, "Member 'ABP_BattleGameStateBase_C::ChangeBeforeNullLocation' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ChaseChangeTargetAction) == 0x000EA0, "Member 'ABP_BattleGameStateBase_C::ChaseChangeTargetAction' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ChaseChangeInActions) == 0x000EA8, "Member 'ABP_BattleGameStateBase_C::ChaseChangeInActions' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, LineColor_pl) == 0x000EB8, "Member 'ABP_BattleGameStateBase_C::LineColor_pl' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, LineColor_em) == 0x000EC8, "Member 'ABP_BattleGameStateBase_C::LineColor_em' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, TaketurnsAction) == 0x000ED8, "Member 'ABP_BattleGameStateBase_C::TaketurnsAction' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, BattleTraningSublevels) == 0x000EE0, "Member 'ABP_BattleGameStateBase_C::BattleTraningSublevels' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, Sequence_Play_Info) == 0x000EF0, "Member 'ABP_BattleGameStateBase_C::Sequence_Play_Info' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, SettleAttackType) == 0x000F00, "Member 'ABP_BattleGameStateBase_C::SettleAttackType' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, LoserDemoSequence) == 0x000F08, "Member 'ABP_BattleGameStateBase_C::LoserDemoSequence' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequencePlayInfo) == 0x000F58, "Member 'ABP_BattleGameStateBase_C::MapChangeSequencePlayInfo' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequencePlayInfoOfEscape) == 0x000F68, "Member 'ABP_BattleGameStateBase_C::MapChangeSequencePlayInfoOfEscape' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequencePlayInfoOfDestruct) == 0x000F78, "Member 'ABP_BattleGameStateBase_C::MapChangeSequencePlayInfoOfDestruct' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequenceActor) == 0x000F88, "Member 'ABP_BattleGameStateBase_C::MapChangeSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequencePreFrame) == 0x000F90, "Member 'ABP_BattleGameStateBase_C::MapChangeSequencePreFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeSequenceFrame) == 0x000F94, "Member 'ABP_BattleGameStateBase_C::MapChangeSequenceFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, TargetCharacter) == 0x000F98, "Member 'ABP_BattleGameStateBase_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DoubleKnockoutDemoSequence) == 0x000FA0, "Member 'ABP_BattleGameStateBase_C::DoubleKnockoutDemoSequence' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, SettleTransitionType) == 0x000FF0, "Member 'ABP_BattleGameStateBase_C::SettleTransitionType' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DamageParameter) == 0x000FF8, "Member 'ABP_BattleGameStateBase_C::DamageParameter' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapCharacter) == 0x001AB8, "Member 'ABP_BattleGameStateBase_C::MapCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, BeforeCharacterAction) == 0x001AC0, "Member 'ABP_BattleGameStateBase_C::BeforeCharacterAction' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AppealSkipFadeTime) == 0x001AC8, "Member 'ABP_BattleGameStateBase_C::AppealSkipFadeTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, AppealSkipEndWaitTime) == 0x001AD0, "Member 'ABP_BattleGameStateBase_C::AppealSkipEndWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, InMapDataList) == 0x001AD8, "Member 'ABP_BattleGameStateBase_C::InMapDataList' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, InLevelSequence) == 0x001AE0, "Member 'ABP_BattleGameStateBase_C::InLevelSequence' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, InOTLevelSequence) == 0x001B10, "Member 'ABP_BattleGameStateBase_C::InOTLevelSequence' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, MapChangeBpCharacter) == 0x001B40, "Member 'ABP_BattleGameStateBase_C::MapChangeBpCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, IsStopMapChangeSequenceActor) == 0x001B48, "Member 'ABP_BattleGameStateBase_C::IsStopMapChangeSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, Supporters) == 0x001B50, "Member 'ABP_BattleGameStateBase_C::Supporters' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, IsUnionAct) == 0x001B60, "Member 'ABP_BattleGameStateBase_C::IsUnionAct' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, FinishDemoSequence) == 0x001B68, "Member 'ABP_BattleGameStateBase_C::FinishDemoSequence' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, CanApearSkip) == 0x001BB8, "Member 'ABP_BattleGameStateBase_C::CanApearSkip' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, _____K______gn_p) == 0x001BC0, "Member 'ABP_BattleGameStateBase_C::_____K______gn_p' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ____2L_) == 0x001BC8, "Member 'ABP_BattleGameStateBase_C::____2L_' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, StartSequenceActor) == 0x001BD0, "Member 'ABP_BattleGameStateBase_C::StartSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, ___________W_K_) == 0x001BD8, "Member 'ABP_BattleGameStateBase_C::___________W_K_' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, bDramaticFinish) == 0x001BD9, "Member 'ABP_BattleGameStateBase_C::bDramaticFinish' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, RebindDescriptionArray) == 0x001BE0, "Member 'ABP_BattleGameStateBase_C::RebindDescriptionArray' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, IsEnableFRMC2OT) == 0x001BF0, "Member 'ABP_BattleGameStateBase_C::IsEnableFRMC2OT' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, Is2PFirst) == 0x001BF1, "Member 'ABP_BattleGameStateBase_C::Is2PFirst' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, BGMManager) == 0x001BF8, "Member 'ABP_BattleGameStateBase_C::BGMManager' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, DelayEndLoadingSection) == 0x001C00, "Member 'ABP_BattleGameStateBase_C::DelayEndLoadingSection' has a wrong offset!");
static_assert(offsetof(ABP_BattleGameStateBase_C, EnableUnionLoadingSection) == 0x001C01, "Member 'ABP_BattleGameStateBase_C::EnableUnionLoadingSection' has a wrong offset!");

}

