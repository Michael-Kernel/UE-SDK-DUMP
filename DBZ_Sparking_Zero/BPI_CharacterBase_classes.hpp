#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterBase

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "EBattleKey_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_CharacterBase.BPI_CharacterBase_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_CharacterBase_C final : public IInterface
{
public:
	void Add_Debug_Draw_Blow_Param(const struct FVector& InLocation, int32 InDrawType, double InHitTime, double InDrawDuration);
	void AddCharacterMovementInput(const struct FVector& WorldDirection, double Value);
	void AddChildDashRoute(class AActor** DashRouteActor);
	void AnimNotifyInputParam(bool Enable);
	void AutoSetCharacterMovementModeToIdle(bool InIsValidSetWalking, bool* IsSet, EMovementMode* SetMovementMode);
	void ClearCharacterRotationPitch(bool InTeleportPhysics, bool* IsSuccessfully);
	void GetBPCharacterLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent);
	void GetBPCharacterMontageComponent(class UBP_CharacterMontageComponent_C** Component);
	void GetCameraVirtualTargetLocation(struct FVector* Location);
	void GetHitBackData(struct FKoratHitBackMovementData* HitBackData);
	void GetKnockBackVector(struct FVector* KnockBackVector);
	void GetLocomotionComponent(class UActorComponent** ActorComponent);
	void GetLocomotionSplineComponent(class UActorComponent** ActorComponent);
	void GetMontageComponent(class UActorComponent** ActorComponent);
	void GetReplaceSubInstance(class FName SubInstanceName, class FName* SubInstanceTagName, class UClass** SubInstanceClass);
	void GetRequestAnim(struct FFRequestAnimData* RequestAnimData);
	void GetUseCharacterRotationPitchDetail(bool* UsePitchLimit, bool* UsePitchInterp);
	void GetVirtualTargetLocation(struct FVector* Location);
	void InputBattleKeyJustPressed(EBattleKey BattleKey);
	void InputBattleKeyJustReleased(EBattleKey BattleKey);
	void InputFreeCameraVector(const struct FVector2D& InputVector);
	void InputKoratBattleKeyDown(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyUp(EKoratBattleKey BattleKey);
	void NotifyPlayMontageLength(double MontageLength);
	void NotifyStartRevengeCounter();
	void OnEndRequestAllAnim();
	void OnPlayAnim();
	void PlayKnockBack(const struct FKoratHitBackMovementData& InHitBackData);
	void SetCharacterMovementMode(EMovementMode InMovementMode);
	void SetCharacterRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool* IsSuccessfully);
	void SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch);
	void SetUseCharacterRotationPitchDetail(bool InUsePitchLimit, bool InUsePitchInterp, bool* UsePitchLimit, bool* UsePitchInterp);
	void SetVirtualTarget(class AActor* InActor, const struct FVector& InLocation, bool InUseBattleTargetPawn);
	void StopKnockBack();

	void GetCharacterMovementMode(EMovementMode* MovementMode) const;
	void GetCharacterRotation(struct FRotator* Rotation) const;
	void GetUseCharacterRotationPitch(bool* UsePitch) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_CharacterBase_C">();
	}
	static class IBPI_CharacterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_CharacterBase_C>();
	}
};
static_assert(alignof(IBPI_CharacterBase_C) == 0x000008, "Wrong alignment on IBPI_CharacterBase_C");
static_assert(sizeof(IBPI_CharacterBase_C) == 0x000028, "Wrong size on IBPI_CharacterBase_C");

}

