#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubSuperHighSpeedMoveStr

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "ECharacterLocomotionSubTemplateState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubSuperHighSpeedMoveStr.BP_CharacterLocomotionSubSuperHighSpeedMoveStr_C
// 0x01D0 (0x0230 - 0x0060)
class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	EKoratHighSpeedMoveState                      ActionStatus;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InvincibleTimer;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoveStatus;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ParamMoveSpeed;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveTimer;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveInputVector;                                   // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVec;                                           // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTargetLocation;                                // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveStartLocation;                                 // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveEndLocation;                                   // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveAdjustTime;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveDistance;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MoveStartTransform;                                // 0x0110(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MoveEndTransform;                                  // 0x0170(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOmenToAppearDone;                                // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OmenToAppearTimer;                                 // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            LocomotionSHSMCurve;                               // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVecInit;                                       // 0x01E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestartRequest;                                    // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RestartTimeCounter;                                // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RestartInputVector;                                // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestartOTFlag;                                     // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RestartReceptionTime;                              // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateDragonDashRotation(struct FRotator* DragonDashRotation);
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckEnable(bool* IsEnable);
	void CheckInput(bool* IsOK);
	void CheckRestart();
	void CheckSPCosumable(bool* IsOK);
	void ClearStatus();
	void ConsumeSPIN();
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetParameter(bool* ______K, double* ________________, double* ____, double* ____B_, double* Z__N____, double* ____B__INK_LPxw__, double* ____B__LPK_OTxw__, EKoratFreeTimelineType* __Bn____________, class USSActionCameraDataAsset** __Bn___________, class USSActionCameraDataAsset** __Bn_Kn___________, double* B_Bn____________Y_OTw_K_nB______, EKoratFreeTimelineType* B_Bn____________, class USSActionCameraDataAsset** B_Bn___________, class USSActionCameraDataAsset** B_Bn_Kn___________);
	void GetParameterInternal(bool* ______K, double* ________________, double* ____, double* ____B_, double* Z__N____, double* ____B__INK_LPxw__, double* ____B__LPK_OTxw__, EKoratFreeTimelineType* __Bn____________, class USSActionCameraDataAsset** __Bn___________, class USSActionCameraDataAsset** __Bn_Kn___________, double* B_Bn____________Y_OTw_K_nB______, EKoratFreeTimelineType* B_Bn____________, class USSActionCameraDataAsset** B_Bn___________, class USSActionCameraDataAsset** B_Bn_Kn___________);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void GetSuperHighSpeedMoveStrForecast(bool* IsDetermined, struct FVector* Location, struct FRotator* Rotation, double* RemainingTime);
	void InitializeOmenToAppear();
	void IsEnableAction(bool* IsEnable);
	void IsUpdateSpeed(bool* IsUpdate);
	void LocomotionRestart(bool* bExec);
	void PlayOmenToAppear();
	void Return_to_Dragon_Dash();
	void SetMovementParameter();
	void SetStatus(EKoratHighSpeedMoveState InActionStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetUpAction();
	void SetUpMove();
	void SetUpMovement_Parameter(ECharacterLocomotionSubTemplateState InShortDashStatus);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StateIN();
	void StateINOnHit();
	void StateINStop();
	void StateINUpdate();
	void StateLP();
	void StateLPOnHit();
	void StateLPStop();
	void StateLPUpdate();
	void StateOT();
	void StateOTOnHit();
	void StateOTOnSetAnimTime();
	void StateOTStop();
	void StateOTUpdate();
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateAlways(double InDeltaSeconds);
	void UpdateMove(double InDeltaSeconds, EKoratHighSpeedMoveState* NextActionStatus, bool* IsChangeAction);
	void UpdateOmenToAppear(double InDeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubSuperHighSpeedMoveStr_C">();
	}
	static class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C) == 0x000010, "Wrong alignment on UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C");
static_assert(sizeof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C) == 0x000230, "Wrong size on UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, ActionStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::ActionStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, InvincibleTimer) == 0x000068, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::InvincibleTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveStatus) == 0x000070, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, ParamMoveSpeed) == 0x000078, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::ParamMoveSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveTimer) == 0x000080, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveInputVector) == 0x000088, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveInputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveVec) == 0x0000A0, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveVec' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveTargetLocation) == 0x0000B8, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveStartLocation) == 0x0000D0, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveStartLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveEndLocation) == 0x0000E8, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveEndLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveAdjustTime) == 0x000100, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveAdjustTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveDistance) == 0x000108, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveStartTransform) == 0x000110, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveStartTransform' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveEndTransform) == 0x000170, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveEndTransform' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, IsOmenToAppearDone) == 0x0001D0, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::IsOmenToAppearDone' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, OmenToAppearTimer) == 0x0001D8, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::OmenToAppearTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, LocomotionSHSMCurve) == 0x0001E0, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::LocomotionSHSMCurve' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, MoveVecInit) == 0x0001E8, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::MoveVecInit' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, RestartRequest) == 0x000200, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::RestartRequest' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, RestartTimeCounter) == 0x000208, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::RestartTimeCounter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, RestartInputVector) == 0x000210, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::RestartInputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, RestartOTFlag) == 0x000220, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::RestartOTFlag' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C, RestartReceptionTime) == 0x000228, "Member 'UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C::RestartReceptionTime' has a wrong offset!");

}

