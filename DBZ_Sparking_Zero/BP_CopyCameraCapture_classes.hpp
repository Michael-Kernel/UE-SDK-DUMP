#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CopyCameraCapture

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CopyCameraCapture.BP_CopyCameraCapture_C
// 0x0030 (0x02C0 - 0x0290)
class ABP_CopyCameraCapture_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetCamera;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 TargetCameraMain;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       CameraComponent;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void CaptureSceneBasedOnCamera(class UCameraComponent* SourceCamera, class UTextureRenderTarget2D* RenderTarget);
	void CopyCameraSettingsToSceneCapture(class UCameraComponent* Source, class USceneCaptureComponent2D* Dest);
	void ExecuteUbergraph_BP_CopyCameraCapture(int32 EntryPoint);
	void GetViewTargetCamera(class UCameraComponent** CameraComponent_0);
	void ReceiveTick(float DeltaSeconds);
	void SetRenderTextureToMaterial(class UPrimitiveComponent* TargetComponent, int32 MaterialIndex, class UTextureRenderTarget2D* RenderTarget, class FName TextureParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CopyCameraCapture_C">();
	}
	static class ABP_CopyCameraCapture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CopyCameraCapture_C>();
	}
};
static_assert(alignof(ABP_CopyCameraCapture_C) == 0x000008, "Wrong alignment on ABP_CopyCameraCapture_C");
static_assert(sizeof(ABP_CopyCameraCapture_C) == 0x0002C0, "Wrong size on ABP_CopyCameraCapture_C");
static_assert(offsetof(ABP_CopyCameraCapture_C, UberGraphFrame) == 0x000290, "Member 'ABP_CopyCameraCapture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CopyCameraCapture_C, SceneCaptureComponent2D) == 0x000298, "Member 'ABP_CopyCameraCapture_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_CopyCameraCapture_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_CopyCameraCapture_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CopyCameraCapture_C, TargetCamera) == 0x0002A8, "Member 'ABP_CopyCameraCapture_C::TargetCamera' has a wrong offset!");
static_assert(offsetof(ABP_CopyCameraCapture_C, TargetCameraMain) == 0x0002B0, "Member 'ABP_CopyCameraCapture_C::TargetCameraMain' has a wrong offset!");
static_assert(offsetof(ABP_CopyCameraCapture_C, CameraComponent) == 0x0002B8, "Member 'ABP_CopyCameraCapture_C::CameraComponent' has a wrong offset!");

}

