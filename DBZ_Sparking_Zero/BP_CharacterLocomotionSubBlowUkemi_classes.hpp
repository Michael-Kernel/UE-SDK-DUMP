#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBlowUkemi

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubBlowUkemi.BP_CharacterLocomotionSubBlowUkemi_C
// 0x0338 (0x0398 - 0x0060)
class UBP_CharacterLocomotionSubBlowUkemi_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	struct FKoratHitBackMovementData              HitBackData;                                       // 0x0060(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsUkemiInput;                                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UkemiInputTimer;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KnockBackVector;                                   // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratBlowReactionUkemiStandUpMovementParameter UkemiMoveParameter;                                // 0x0368(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxAddMoveTime;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddMoveTimer;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckBlowUkemiInput();
	void CheckBlowUkemiOnHit(bool* IsUkemiOK);
	void InitializeBlowUkemi(const struct FKoratHitBackMovementData& InHitBackData);
	void Set_Up_Blow_Ukemi_Stand_Up_Movement_Parameter(EKoratBlowState InBlowStatus);
	void StartBlowUkemi(EKoratBlowState InBlowStatus);
	void TurnBlowUkemi(const struct FVector& InKnockBackVector);
	void UpdateBlowUkemiInput(double InDeltaSeconds);
	void UpdateBlowUkemiMove(double InDeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubBlowUkemi_C">();
	}
	static class UBP_CharacterLocomotionSubBlowUkemi_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubBlowUkemi_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubBlowUkemi_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubBlowUkemi_C");
static_assert(sizeof(UBP_CharacterLocomotionSubBlowUkemi_C) == 0x000398, "Wrong size on UBP_CharacterLocomotionSubBlowUkemi_C");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, HitBackData) == 0x000060, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::HitBackData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, IsUkemiInput) == 0x000340, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::IsUkemiInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, UkemiInputTimer) == 0x000348, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::UkemiInputTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, KnockBackVector) == 0x000350, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::KnockBackVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, UkemiMoveParameter) == 0x000368, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::UkemiMoveParameter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, MaxAddMoveTime) == 0x000388, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlowUkemi_C, AddMoveTimer) == 0x000390, "Member 'UBP_CharacterLocomotionSubBlowUkemi_C::AddMoveTimer' has a wrong offset!");

}

