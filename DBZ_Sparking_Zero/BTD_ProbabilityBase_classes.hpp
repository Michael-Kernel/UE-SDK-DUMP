#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_ProbabilityBase

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "BTD_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_ProbabilityBase.BTD_ProbabilityBase_C
// 0x0048 (0x0148 - 0x0100)
class UBTD_ProbabilityBase_C : public UBTD_Base_C
{
public:
	EAiEmotionType                                _____;                                             // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ________;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratInequalitySignType                      _I____;                                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _______Lv;                                         // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _______Lv_0;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogName;                                           // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ______;                                            // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ______________;                                    // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKoratCharacterItemDataList>    _______0;                                          // 0x0128(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSSAiBpEmotionParam>            ________k_________;                                // 0x0138(0x0010)(Edit, BlueprintVisible)

public:
	void Get_Probability_Emotional_Addition(class AActor* InOwnerActor, int32* OutProbabilityLvMin, int32* OutProbabilityLvMax);
	void GetProbability(class AActor* InOwnerActor, bool InSendLog, int32* OutProbability);
	void GetProbabilityItemAddition(class AActor* InOwnerActor, int32* OutProbabilityLvMin, int32* OutProbabilityLvMax);
	bool PerformConditionCheck(class AActor* OwnerActor);
	bool PublicPerformConditionCheck(class AActor* InOwnerActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_ProbabilityBase_C">();
	}
	static class UBTD_ProbabilityBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_ProbabilityBase_C>();
	}
};
static_assert(alignof(UBTD_ProbabilityBase_C) == 0x000008, "Wrong alignment on UBTD_ProbabilityBase_C");
static_assert(sizeof(UBTD_ProbabilityBase_C) == 0x000148, "Wrong size on UBTD_ProbabilityBase_C");
static_assert(offsetof(UBTD_ProbabilityBase_C, _____) == 0x0000F9, "Member 'UBTD_ProbabilityBase_C::_____' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, ________) == 0x0000FC, "Member 'UBTD_ProbabilityBase_C::________' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, _I____) == 0x000100, "Member 'UBTD_ProbabilityBase_C::_I____' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, _______Lv) == 0x000104, "Member 'UBTD_ProbabilityBase_C::_______Lv' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, _______Lv_0) == 0x000108, "Member 'UBTD_ProbabilityBase_C::_______Lv_0' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, LogName) == 0x000110, "Member 'UBTD_ProbabilityBase_C::LogName' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, ______) == 0x000120, "Member 'UBTD_ProbabilityBase_C::______' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, ______________) == 0x000124, "Member 'UBTD_ProbabilityBase_C::______________' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, _______0) == 0x000128, "Member 'UBTD_ProbabilityBase_C::_______0' has a wrong offset!");
static_assert(offsetof(UBTD_ProbabilityBase_C, ________k_________) == 0x000138, "Member 'UBTD_ProbabilityBase_C::________k_________' has a wrong offset!");

}

