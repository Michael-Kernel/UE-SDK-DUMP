#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "Engine_structs.hpp"
#include "EAnimStateMachineEventType_structs.hpp"
#include "EBattleKey_structs.hpp"
#include "FLocomotionSubClass_structs.hpp"
#include "FLocomotionRotationParameter_structs.hpp"
#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"
#include "ECharacterStrutJumpState_structs.hpp"
#include "ECharacterDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionComponent.BP_CharacterLocomotionComponent_C
// 0x0EE0 (0x1560 - 0x0680)
class UBP_CharacterLocomotionComponent_C final : public UKoratCharacterLocomotionComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Speed;                                             // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeed;                                           // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeed;                                            // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastVelocityRot;                                   // 0x06A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRot;                                      // 0x06B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LookAtRotation;                                    // 0x06D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ToTargetRotation;                                  // 0x06E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        TargetDistance;                                    // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionY;                                        // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionZ;                                        // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearMoveAlpha;                                     // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BattleMoveAlpha;                                   // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalModeSpeed;                                   // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearModeSpeed;                                     // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             Character;                                         // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         CurrentStatus;                                     // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x0741(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_742[0x6];                                      // 0x0742(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NearDistance;                                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           SSCharacter;                                       // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeNearModeOnlyIdle;                          // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpeedInterpolateRange;                             // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 StartMovementMode;                                 // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleKey                                    InputBattleKey;                                    // 0x0769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76A[0x6];                                      // 0x076A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JumpMaxHoldTime;                                   // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         JumpMaxCount;                                      // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFly;                                            // 0x077C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMovementInput;                               // 0x077D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMovementInputOld;                            // 0x077E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeJumpToFly;                                   // 0x077F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpToFlyTimer;                                    // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityScale;                                      // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkableFloorAngle;                                // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAcceleration;                                   // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpZVelocity;                                     // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirControl;                                        // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirControlBoostMultiplier;                         // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirControlBoostVelocityThreshold;                  // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GroundFriction;                                    // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakingDecelerationWalking;                        // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakingDecelerationFlying;                         // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationRate;                                      // 0x07D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        LockOnTurnSpeed;                                   // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransitionRelaxIdle;                             // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9[0x7];                                      // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveEffectStartSpeed;                              // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveEffectEndSpeed;                                // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAutoJumpToFly;                                   // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JumpToFlySeconds;                                  // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0828(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZ;                                         // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebugHitDotVar;                                    // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebugHitRad;                                       // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebugHitDeg;                                       // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MovingRotation;                                    // 0x0860(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              InputVector;                                       // 0x0878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputWorldDirectionXY;                             // 0x0888(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputValueXY;                                      // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputValueZ;                                       // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeightAxisValue;                                   // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidInput;                                      // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpeedByInput;                                      // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYSpeedByInput;                                    // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZSpeedByInput;                                     // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityZByInput;                                  // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStepNear4Direction;                              // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E1[0x7];                                      // 0x08E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepNearInputAngleFront;                           // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepNearInputAngleLeftRight;                       // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StepFarInputAngleFront;                            // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStepFar2Direction;                               // 0x0900(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_901[0x3];                                      // 0x0901(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataStepParameter       StepParamFront;                                    // 0x0904(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamFlyBackIN;                                // 0x0920(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamFlyBackOT;                                // 0x093C(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamFlyLeftRightIN;                           // 0x0958(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamFlyLeftRightOT;                           // 0x0974(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamGroundBackIN;                             // 0x0990(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamGroundBackOT;                             // 0x09AC(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamGroundLeftRightIN;                        // 0x09C8(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamGroundLeftRightOT;                        // 0x09E4(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamLongFrontIN;                              // 0x0A00(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamLongFrontOT;                              // 0x0A1C(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataStepParameter       StepParamLongBackIN;                               // 0x0A38(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   DebugHUD;                                          // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratCharacterDataStepParameter       StepParamLongBackOT;                               // 0x0A60(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_A7C[0x4];                                      // 0x0A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataShortDashParameter  StepParamShort_Dash;                               // 0x0A80(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        TurnYawTolerance;                                  // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableMoveEffect;                                // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashParameter DragonDashParam;                                   // 0x0AC0(0x0160)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	EKoratDragonDashState                         AnimEventDragonDashState;                          // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBattleKey                               InputKoratBattleKey;                               // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimStateMachineEventType                    AnimEventType;                                     // 0x0C22(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C23[0x5];                                      // 0x0C23(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SubStateTimer;                                     // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DragonDashEnd1Timer;                               // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterMontageComponent_C*        MontageComponent;                                  // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DragonDashMoveInputValue;                          // 0x0C40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OnHitArgOther;                                     // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OnHitArgHitNormal;                                 // 0x0C60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DragonDashMoveInputValueOld;                       // 0x0C78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashInputXYZ;                                      // 0x0C90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DashIsInputNeutral;                                // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DashRotation;                                      // 0x0CB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter DashMovementParam;                                 // 0x0CC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        DashHoldTimer;                                     // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DragonDashRotationSpeed;                           // 0x0CF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRequestPlayIdle;                                 // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratActionIdleType                          ActionIdleType;                                    // 0x0D09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D0A[0x6];                                      // 0x0D0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OnHitArgNormalImpulse;                             // 0x0D10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OnHitArgHit;                                       // 0x0D28(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        OnHitDeltaTime;                                    // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotateAutoIdleTimer;                               // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotateLanded;                                    // 0x0E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotateAutoIdle;                                  // 0x0E21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E22[0x2];                                      // 0x0E22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   RunningAction;                                     // 0x0E24(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonHomingParameter DragonHomingParam;                                 // 0x0E30(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UBP_CharacterSplineComponent_C*         LocomotionSplineComponent;                         // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   RunningSection;                                    // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OnLandedArgOther;                                  // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OnLandedArgHitNormal;                              // 0x0EB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OnLandedArgNormalImpulse;                          // 0x0ED0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFLocomotionSubClass>           LocomotionSubClasses;                              // 0x0EE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EKoratLocomotionState, class UBP_CharacterLocomotionSubBase_C*> LocomotionSubInstances;                            // 0x0EF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_CharacterLocomotionSubBase_C*       CurrentSubInstance;                                // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentAnimStateName;                              // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAnimTimeRemainingFraction;                  // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestResetStateMachine;                        // 0x0F60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x0F61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugUseRotationPitch;                             // 0x0F62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F63[0x5];                                      // 0x0F63(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataZBurstDashParameter ZBurstDashParam;                                   // 0x0F68(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          ___Z__________;                                    // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _____________gZ________z_;                         // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ________M__;                                       // 0x0FD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _____________;                                     // 0x0FD3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _________cH__;                                     // 0x0FD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug__wM_L_e_8k__;                                // 0x0FD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD6[0x2];                                      // 0x0FD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Debug__wM_L_e___;                                  // 0x0FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Debug__wM_L_9M_s_____B__;                          // 0x0FE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             DebugTransform;                                    // 0x1000(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DebugBlowActor_C*                   BP_DebugBlowActor1;                                // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlowDebug;                                        // 0x1068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1069[0x3];                                     // 0x1069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionRotationParameter          ________0____;                                     // 0x106C(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109C[0x4];                                     // 0x109C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TickDeltaSeconds;                                  // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________0__M___;                                   // 0x10A8(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________zMinus___;                                 // 0x10D8(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________zMinus_M___;                               // 0x1108(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          __________;                                        // 0x1138(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          _________M;                                        // 0x1168(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          _________0;                                        // 0x1198(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __w_Bk___c__Y_B_;                                  // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __w_Bk___c__Y___;                                  // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          __________w_B___c;                                 // 0x11D8(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ____________;                                      // 0x1208(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________0______;                                   // 0x1238(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________zMinus_____;                               // 0x1268(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ______B_M_Q_B_;                                    // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________9M_s___;                                   // 0x12A0(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DebugBlowActor_C*                   BP_DebugBlowActor2;                                // 0x12D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratCharacterDataDashUpDownParameter DashUpDownParam;                                   // 0x12D8(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FFLocomotionRotationParameter          ___________;                                       // 0x13C0(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          __________M;                                       // 0x13F0(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ________________;                                  // 0x1420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1421[0x3];                                     // 0x1421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLocomotionRotationParameter          ____________0;                                     // 0x1424(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ____________________;                              // 0x1454(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFLocomotionRotationParameter          ________0b___________;                             // 0x1484(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DragonDashIsEnablePitch;                           // 0x14B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B5[0x3];                                     // 0x14B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IdleMoveTimer;                                     // 0x14B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebugMobileMonitoring;                           // 0x14C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMobileMonitoring;                            // 0x14C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MobileMonitoringFailureDetection;                  // 0x14C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C3[0x5];                                     // 0x14C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MobileMonitoringAcc;                               // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MobileMonitoringAccMax;                            // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        NormalWalkModeSpeed;                               // 0x14D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearWalkModeSpeed;                                 // 0x14E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SubDashRotation;                                   // 0x14E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNeutralShortDash;                                // 0x1500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1501[0x7];                                     // 0x1501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UseDashKidanVelocity;                              // 0x1508(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UseDashKidanMovementInputVector;                   // 0x1520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashKidanDecelerationTime;                         // 0x1530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashKidanBrakingDecelerationFlying;                // 0x1538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableOptimizeClearSubStatus;                      // 0x1540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableActorMoveInMovementComp;                     // 0x1541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSetAnimationParameterRotationOnly;           // 0x1542(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDownBlendSkip;                                   // 0x1543(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratLocomotionState                         PreCurrentStatus;                                  // 0x1544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1545[0x3];                                     // 0x1545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FastRepeatCount;                                   // 0x1548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SetCurrentStatusTime;                              // 0x1550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxStepHeight;                              // 0x1558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Debug_Draw_Blow_Param(const struct FVector& InLocation, int32 InDrawType, double InHitTime, double InDrawDuration);
	void AddCharacterMovementInput(const struct FVector& WorldDirection, double Value);
	void AddCharacterMovementXInput(const struct FVector& WorldDirection, double Value);
	void AddCharacterMovementXYInput(const struct FVector2D& Value);
	void AddCharacterMovementYInput(const struct FVector& WorldDirection, double Value);
	void AddCharacterMovementZInputLast(double Value);
	void AddChildDashRoute(class AActor** DashRouteActor);
	void AddDashVector(double InDeltaSeconds);
	void AnimNotifyInputParam(bool Enable);
	void AutoSetCharacterMovementModeToIdle(bool InIsValidSetWalking, bool* IsSet, EMovementMode* SetMovementMode);
	void CalcDirection(double InYaw, double InAngleFront, double InAngleLeftRight, bool InIsInclusiveAngleFront, ECharacterDirection* Direction);
	void Calculate_Dragon_Dash_Rotation_Speed_Param(struct FRotator* OutRotationSpeed, struct FRotator* OutRotationInitialSpeed, struct FRotator* OutRotationAcceleration);
	void Calculate_Locomotion_Rotation(const struct FRotator& InNewRotation, const struct FFLocomotionAxisRotationParameter& InRotationParameterXRoll, const struct FFLocomotionAxisRotationParameter& InRotationParameterYPitch, const struct FFLocomotionAxisRotationParameter& InRotationParameterZYaw, bool InIsInterpConstant, struct FRotator* OutNewRotation);
	void CalculateAnimationDirectionLocomotionSub(EKoratLocomotionState InLocomotionStatus, const struct FVector& InVelocity, const struct FRotator& InCharacterRot, const struct FRotator& InLastVelocityRot, double* DirectionY_0, double* DirectionZ_0);
	void CalculateLocomotionAxisRotation(double InCurrentAngle, double InTargetAngle, const struct FFLocomotionAxisRotationParameter& InLocomotionAxisRotationParameter, double InDeltaSeconds, bool InIsInterpConstant, double* OutAngle);
	void Change_Range_Mode(bool IsNear);
	void ChangeDown(bool InIsFront, double InDownToRevivalTime, bool* IsChangeOtherDown);
	void ChangeDownRevivalKeyPressed(bool* IsChange, bool* IsChangeOtherDownRevival);
	void ChangeDragonDashStatus(EKoratDragonDashState InDragonDashStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void ChangeDragonDashToOT();
	void ChangeIdleMove();
	void ChangeStateAfterULTFalling();
	void ChangeStateDragonDash(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, double InSpCost, bool InIsKeepOldDashRotation);
	void ChangeStateFalling();
	void ChangeStateIdleMove();
	void Check_Idle_Move_Key_Pressed_Action();
	void Check_Start_Rotate_Auto_Idle(double InDeltaSeconds);
	void Check_Wall_Ukemi(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeWallUkemi);
	void Check_ZBurst_Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeZBurstDash);
	void CheckBlastSkill1Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash);
	void CheckBlastSkill2Dash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash);
	void CheckBlastUltimateDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlastDash);
	void CheckBlow(const struct FKoratActionDataList& InAction, bool InFrontHit, EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeBlow);
	void CheckBlowDownRevival(bool* IsOK);
	void CheckBurstSmash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState);
	void CheckDashUkemi(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeDashUkemi);
	void CheckDashUpDown(EKoratCharacterActionFinishReason InActionFinishReason, bool InInSkip, bool* ChangeDashUpDown);
	void CheckDashUpDownTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool InInSkip, bool* ChangeDashUpDown);
	void CheckDragonDash(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, bool IsSkipPlayableCheck, bool* ChangeDragonDash);
	void CheckDragonDashEnd(double InDeltaSeconds, bool* IsEnd);
	void CheckDragonDashReverseDirection(bool* IsChangeDirection);
	void CheckDragonDashTurn(EKoratDragonDashState InStartState, EKoratCharacterActionFinishReason InActionFinishReason, bool IsSkipPlayableCheck, bool* ChangeDragonDash);
	void CheckDragonHoming(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeDragonHoming);
	void CheckFastRepeatCurrentStatus(EKoratLocomotionState InCurrentStatus, bool* IsFastRepeat);
	void CheckHighSpeedMove(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState);
	void CheckIdleMoveKoratKeyPressedAction();
	void CheckJump(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump);
	void CheckJumpTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump);
	void CheckLocomotionSub(EKoratLocomotionState InLocomotionStatus, EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartLocomotionSub);
	void CheckMobileMonitoring();
	void CheckMoveStandUp(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState);
	void CheckNumbReaction(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartNumbReaction);
	void CheckNumbReactionToState(EKoratCharacterActionFinishReason InActionFinishReason, ECharacterNumbReactionState InStartNumbReactionStatus, bool InIsFront, bool* IsStartNumbReaction);
	void CheckRevengeDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeRevengeDash);
	void CheckShortDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash);
	void CheckShortDashTurn(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash);
	void CheckSPCosumableDragonDashBK(bool* IsAbleBK);
	void CheckStep(bool InChangeJumpToFly, EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeStep);
	void CheckStrutJump(EKoratCharacterActionFinishReason InActionFinishReason, bool* ChangeJump);
	void CheckStunReaction(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartStunReaction);
	void CheckStunReactionToState(EKoratCharacterActionFinishReason InActionFinishReason, EKoratStunReactionState InStartStunReactionStatus, bool InIsFront, bool* IsStartStunReaction);
	void CheckSuperHighSpeedMove(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState);
	void CheckSuperHighSpeedMoveStr(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartSubState);
	void Clear_Velocity_Dash_at_Start();
	void ClearCharacterRotationPitch(bool InTeleportPhysics, bool* IsSuccessfully);
	void ClearInput();
	void ClearLocomotionSubStatus(EKoratLocomotionState InLocomotionStatus);
	void ClearSubStatus();
	void ConsumeSPDragonDashBK();
	void DebugCalcHitInfo(double HitDotVar, const struct FVector& HitNormal);
	void DebugDrawText(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, class AActor* Scale, double Duration);
	void DebugInput();
	void DebugLockOnChange();
	void DebugPrint();
	void DebugPrintString(const class FString& InString, bool InPrintToScreen);
	void DragonDashMoveInputX(double InDeltaSeconds);
	void DragonDashMoveInputY(double InDeltaSeconds);
	void DragonDashMoveInputZ(double InDeltaSeconds);
	void EndMobileMonitoring();
	void ExecuteUbergraph_BP_CharacterLocomotionComponent(int32 EntryPoint);
	void FinishRevengeDash();
	void Get_Dash_Input_Vector(const struct FVector& InInputVector, struct FVector* OutInputVector, bool* OutIsInputNeutral);
	void GetAddMovementInputVector(const struct FVector& InInputWorldDirectionXY, double InInputValueXY, struct FVector* InputWorldDirection, double* ScaleValue);
	void GetBlastSkill1DashStatus(EKoratDragonHomingState* BlastDashStatus);
	void GetBlastSkill2DashStatus(EKoratDragonHomingState* BlastDashStatus);
	void GetBlastUltimateDashStatus(EKoratDragonHomingState* BlastDashStatus);
	void GetBlowHitForecast(bool* IsHit, struct FVector* Location, double* HitTime, struct FKoratMapAttributeDataList* MapAttribute, struct FVector* HitNormal);
	void GetBlowHitForecastSaveInfo(bool* IsHit, struct FVector* Location, double* HitTime, struct FKoratMapAttributeDataList* MapAttribute, struct FVector* HitNormal, class UPhysicalMaterial** HitPhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, struct FHitResult* HitResult);
	void GetBlowInfo(EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* HitBackData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel);
	void GetBlowStatus(EKoratBlowState* BlowStatus);
	void GetBPCharacterLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent);
	void GetBPCharacterMontageComponent(class UBP_CharacterMontageComponent_C** Component);
	void GetBurstSmashInfo(EKoratZBurstDashState* ZBurstDashStatus);
	void GetBurstSmashStatus(EKoratZBurstDashState* ZBurstDashStatus);
	void GetCameraVirtualTargetLocation(struct FVector* Location);
	void GetDashUkemiInfo(EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType);
	void GetDashUkemiStatus(EKoratDashUkemiState* DashUkemiStatus);
	void GetDashUpDownInfo(EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType);
	void GetDashUpDownStatus(EKoratDashUpDownState* DashUpDownStatus);
	void GetDashVectorAndRotation(const struct FVector& InInputVector, bool InIsOnlyYawRotation, struct FVector* OutVector, struct FRotator* OutRotation);
	void GetDragonDashRotation(struct FRotator* Rotation);
	void GetDragonDashRotationPitchRange(double* PitchMin, double* PitchMax);
	void GetDragonDashSpCostIN(double* SpCostIN);
	void GetDragonDashStateMovementParameter(EKoratDragonDashState InDragonDashStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter);
	void GetDragonHomingStatus(EKoratDragonHomingState* DragonHomingStatus);
	void GetHighSpeedMoveForecast(bool* IsDetermined, struct FVector* Location, struct FRotator* Rotation, double* RemainingTime);
	void GetHighSpeedMoveStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus);
	void GetHitBackData(struct FKoratHitBackMovementData* HitBackData);
	void GetIdleMoveActionDetail(struct FKoratActionDataList* OutAction, class FName* OutSection, EKoratCharacterLocomotionDetailStatus* OutDetailStatus);
	void GetIsEnableMoveEffect(bool* IsEnable);
	void GetIsInAir(bool* IsInAir_0);
	void GetIsOnGround(bool* IsOnGround);
	void GetIsRotateAutoIdle(bool* OutIsRotateLanded);
	void GetIsRotateLanded(bool* OutIsRotateLanded);
	void GetKnockBackVector(struct FVector* KnockBackVector);
	void GetLatestActionIdleType(EKoratActionIdleType* ActionIdleType_0);
	void GetLockOnMode(bool* OutIsLockOn);
	void GetLocomotionComponent(class UActorComponent** ActorComponent);
	void GetLocomotionNumbReaction(ECharacterNumbReactionState* State, bool* Front);
	void GetLocomotionParameterForAction(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsInAir_0, double* MaxSpeed, double* NearModeSpeed_0);
	void GetLocomotionParameterForBurstDash(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForBurstSmash(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForDashUkemi(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation, EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForDashUpDown(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForHighSpeedMove(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratHighSpeedMoveState* HighSpeedMoveStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForIdleMove(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, struct FHitResult* EventHitArgHit, bool* IsEnableMoveEffect_0, double* MoveEffectStartSpeed_0, double* MoveEffectEndSpeed_0, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation, EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* BlowHitBackMovementData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel, EKoratDragonHomingState* DragonHomingStatus, EKoratDragonHomingState* RevengeDashStatus, bool* IsRequestPlayIdle_0, bool* IsTransitionRelaxIdle_0, EKoratActionIdleType* ActionIdleType_0, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0, EKoratDragonHomingState* BlastDashStatus);
	void GetLocomotionParameterForJump(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, struct FVector* Velocity_0, double* VelocityZ_0, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForLocomotion(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, EKoratStepState* StepStatus, EKoratStepType* StepType);
	void GetLocomotionParameterForMobileMonitoring(bool* IsObstacleDetection);
	void GetLocomotionParameterForMoveStandUp(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* TargetDistance_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsLockOn, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForNumbReaction(EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForPostPhysics(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsNearMode, bool* IsInAir_0, struct FVector* Velocity_0, double* VelocityZ_0, double* MaxSpeed, double* NearModeSpeed_0, struct FVector2D* InputVector_0, double* InputZ, bool* IsEnableMoveEffect_0, double* MoveEffectStartSpeed_0, double* MoveEffectEndSpeed_0, EKoratDragonDashState* DragonDashStatus_0, struct FRotator* DragonDashRotation);
	void GetLocomotionParameterForStanReaction(EKoratLocomotionState* LocomotionStatus, EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForStep(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratStepState* StepStatus, EKoratStepType* StepType, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterForWallUkemi(double* Speed_0, double* XYSpeed_0, double* ZSpeed_0, struct FRotator* LastVelocityRot_0, struct FRotator* CharacterRot_0, struct FRotator* ToTargetRotation_0, double* DirectionY_0, double* DirectionZ_0, double* NearMoveAlpha_0, double* BattleMoveAlpha_0, bool* IsInAir_0, EKoratLocomotionState* LocomotionStatus, EKoratWallUkemiState* WallUkemiStatus, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine_0, EKoratLocomotionState* ResetStateMachineStatus_0);
	void GetLocomotionParameterMaxSpeed(double* NowMaxSpeed);
	void GetLocomotionParameterMoveStandUp(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection);
	void GetLocomotionParameterSuperHighSpeedMoveStr(EKoratHighSpeedMoveState* HighSpeedMoveStatus);
	void GetLocomotionSplineComponent(class UActorComponent** ActorComponent);
	void GetLocomotionSubDetailStatus(EKoratLocomotionState InLocomotionStatus, EKoratCharacterLocomotionDetailStatus* OutDetailStatus);
	struct FRotator GetLookAtRotation();
	void GetMontageComponent(class UActorComponent** ActorComponent);
	void GetMoveLookAtRotation(bool InIsMoveInput, struct FRotator* OutLookAtRotation);
	void GetMovementModeInternal(EMovementMode* MovementMode);
	void GetMoveStandUpInfo(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection);
	void GetMoveStandUpStatus(ECharacterMoveStandUpState* ActionStatus);
	void GetNumbReactionStatus(ECharacterNumbReactionState* NumbReactionStatus);
	struct FRotator GetOnlyYawRotation(const struct FRotator& LookAtRotation_0);
	void GetReplaceSubInstance(class FName SubInstanceName, class FName* SubInstanceTagName, class UClass** SubInstanceClass);
	void GetRequestAnim(struct FFRequestAnimData* RequestAnimData);
	void GetRevengeDashStatus(EKoratDragonHomingState* RevengeDashStatus);
	void GetRotationInternal(struct FRotator* Rotation);
	void GetRunningActionLocomotionSub(EKoratLocomotionState InLocomotionStatus, struct FKoratActionDataList* OutAction, class FName* OutSection);
	void GetShortDashInfo(EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer);
	void GetShortDashStatus(EKoratShortDashState* ShortDashStatus);
	void GetStepType(EKoratStepType* StepType);
	void GetStrutJumpStatus(ECharacterStrutJumpState* JumpStatus);
	void GetStunReactionInfo(EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront);
	void GetStunReactionStatus(EKoratStunReactionState* StunReactionStatus);
	void GetSubBlastSkill1Dash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash);
	void GetSubBlastSkill2Dash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash);
	void GetSubBlastUltimateDash(class UBP_CharacterLocomotionSubBlastDash_C** SubBlastDash);
	void GetSubBurstSmash(class UBP_CharacterLocomotionSubBurstSmash_C** SubBurstSmash);
	void GetSubHighSpeedMove(class UBP_CharacterLocomotionSubHighSpeedMove_C** SubHighSpeedMove);
	void GetSubIdleMove(class UBP_CharacterLocomotionSubIdleMove_C** SubIdleMove);
	void GetSubMoveStandUp(class UBP_CharacterLocomotionSubMoveStandUp_C** SubMoveStandUp);
	void GetSubRevengeDash(class UBP_CharacterLocomotionSubRevengeDash_C** SubRevengeDash);
	void GetSubSuperHighSpeedMove(class UBP_CharacterLocomotionSubSuperHighSpeedMove_C** SubSuperHighSpeedMove);
	void GetSubSuperHighSpeedMoveStr(class UBP_CharacterLocomotionSubSuperHighSpeedMoveStr_C** SubSupeHighSpeedMoveStr);
	void GetSuperHighSpeedMoveStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus);
	void GetSuperHighSpeedMoveStrForecast(bool* IsDetermined, struct FVector* Location, struct FRotator* Rotation, double* RemainingTime);
	void GetSuperHighSpeedMoveStrStatus(EKoratHighSpeedMoveState* HighSpeedMoveStatus);
	void GetTargetDistance(double* Length);
	void GetTargetDistanceXY(double* Length);
	void GetTargetLocationGroundDistance(bool* OutIsHit, double* OutDistance);
	void GetTargetLocationInternal(struct FVector* Location);
	void GetUseCharacterRotationPitchDetail(bool* UsePitchLimit, bool* UsePitchInterp);
	void GetUseRotationPitchInternal(bool* UsePitch);
	void GetVelocity(struct FVector* Velocity_0);
	void GetVirtualTargetLocation(struct FVector* Location);
	void GetWallUkemiStatus(EKoratWallUkemiState* WallUkemiStatus);
	float GetZBurstDashArrivalSecond();
	void GetZBurstDashSplineInfo(class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance);
	void GetZBurstDashStatus(EKoratZBurstDashState* ZBurstDashStatus);
	void InitializeRotateAutoIdle();
	void InputBattleKeyJustPressed(EBattleKey BattleKey);
	void InputBattleKeyJustReleased(EBattleKey BattleKey);
	void InputFreeCameraVector(const struct FVector2D& InputVector_0);
	void InputKoratBattleKeyDown(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustPressed(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyJustReleased(EKoratBattleKey BattleKey);
	void InputKoratBattleKeyUp(EKoratBattleKey BattleKey);
	void Interpolate_Range_Rotator(double InRangeValue, double InRangeBase, double InRangeSize, const struct FRotator& InValueMin, const struct FRotator& InValueMax, struct FRotator* OutValue);
	void InterpolateRangeValue(double InRangeValue, double InRangeBase, double InRangeSize, double InValueMin, double InValueMax, double* OutValue);
	void Is_Near_Range_Distance(double Distance, bool* IsNear);
	bool Is_Near_Range_Giant_Chara();
	void IsAfterULTFallingFront(bool* OutIsFront);
	void IsDashUkemiReserved(bool* IsDashUkemiReserved_0);
	void IsDragonDashZMoveOnInputFront(bool InIsInputNeutral, bool* OutIsZMove);
	void IsEnableAction(bool* IsEnable);
	void IsEnableMovementInput(bool* IsEnable);
	void IsGiantChara_actHSMS_actHSM_Off(bool* Result);
	void IsHitFloor(class AActor* InHitArgOther, const struct FVector& InHitArgHitNormal, const struct FHitResult& InHitArgHit, bool* IsHitFloor_0);
	void IsInLimitRangeLocomotionAxisRotation(double InCurrentAngle, const struct FFLocomotionAxisRotationParameter& InAxisRotationParameter, bool* IsInLimitRange);
	void IsInLimitRangeLocomotionRotation(const struct FFLocomotionRotationParameter& InRotationParameter, bool* IsInLimitRange);
	void IsInputKoratBattleKeyDown(EKoratBattleKey InKoratBattleKey, bool* IsDown);
	void IsNearRangeNow(bool* IsNear);
	void LoadDashUpDownParameter();
	void LoadDragonDashParameter();
	void LoadIdleMoveParam();
	void LoadShortDashParameter();
	void LoadZBurstDashParameter();
	void MoveInputXY();
	void MoveInputZ();
	void NotifyPlayMontageLength(double MontageLength);
	void NotifyStartRevengeCounter();
	void OnActionReset();
	void OnAddWarpOffset(const struct FVector& InWarpOffsetPos, const struct FRotator& InWarpOffsetRot, const struct FVector& InWarpOffsetRotCenterPos);
	void OnBlowAnimEvent(EKoratBlowState BlowState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnChangedCharacterNumeric(const class USSCharacterNumeric* InParam);
	void OnChangeDown(const bool InFront, const float InDownToRevivalTime);
	void OnDragonDashAnimEvent(EKoratDragonDashState DragonDashState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnDragonHomingAnimEvent(EKoratDragonHomingState DragonHomingState, EAnimStateMachineEventType AnimStateMachineEvent);
	void OnEndBlowReaction();
	void OnEndDashCombatives();
	void OnEndJumpFT();
	void OnEndJumpIN();
	void OnEndJumpOT();
	void OnEndJumpUP();
	void OnEndRequestAllAnim();
	void OnEndStepIN();
	void OnEndStepOT();
	void OnEndUltimateBlastDash();
	void OnHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void OnPlayAnim();
	void OnPlayDashCombatives();
	void OnPlayDragonDashCounter();
	void OnPlayIdle();
	void OnPlayUltimateBlastDash();
	void OnRequestBlowReaction(const struct FKoratActionDataList& InAction, bool InFrontHit);
	void OnResetStateMachine();
	void OnTargetPlayTeleportationCounter();
	void PlayKnockBack(const struct FKoratHitBackMovementData& InHitBackData);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReconfirmLockOnCharacter();
	void ReconfirmLockOnMode();
	void ReloadDragonDashParam();
	void ReloadIdleMoveParam();
	void RequestResetStateMachine(EKoratLocomotionState InStatus);
	void ResetAction();
	void ResetIdleMoveMoveZ();
	void ResetIdleMoveTimer();
	void ResetLocomotionInputVector();
	void ResetSubStatusStateMachine();
	void RotateDash(bool InIsIgnoreRoll, bool InIsIgnorePitch, bool InIsIgnoreYaw);
	void RotateDragonDashInputZ(const struct FVector& InDragonDashMoveInputValue, double InDeltaSeconds);
	void Set_Locomotion_Rotation_XYZ(const struct FRotator& InNewRotation, bool InTeleportPhysics, const struct FFLocomotionAxisRotationParameter& InRotationParameterXRoll, const struct FFLocomotionAxisRotationParameter& InRotationParameterYPitch, const struct FFLocomotionAxisRotationParameter& InRotationParameterZYaw, bool InIsInterpConstant, bool InIsCheckTurn, bool* IsSuccessfully);
	void SetAnimationParameter(bool UpdateOnlyRelatedToRotation);
	void SetBlastSkill1DashStatus(EKoratDragonHomingState InBlastDashStatus);
	void SetBlastSkill2DashStatus(EKoratDragonHomingState InBlastDashStatus);
	void SetBlastUltimateDashStatus(EKoratDragonHomingState InBlastDashStatus);
	void SetBlowInfo(EKoratBlowState InBlowStatus);
	void SetBlowIsFrontState(bool InBlowIsFront);
	void SetCharacterMovementMode(EMovementMode InMovementMode);
	void SetCharacterRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, bool* IsSuccessfully);
	void SetCurrentAnimTimeRemainingFraction(class FName InCurrentStateName, double InFraction);
	void SetCurrentStatus_(EKoratLocomotionState InCurrentStatus);
	void SetDashUkemiStatus(EKoratDashUkemiState InDashUkemiStatus);
	void SetDashUpDownStatus(EKoratDashUpDownState InDashUpDownStatus);
	void SetDragonDashMaxSpeed();
	void SetDragonDashParameter(const struct FVector& InInputVector, bool InIsKeepOldDashRotation);
	void SetDragonDashRotation(const struct FRotator& InRotation);
	void SetDragonHomingStatus(EKoratDragonHomingState InDragonHomingStatus);
	void SetEnableMovementInput(bool IsEnable, bool ChangeJumpToFly_0, EKoratCharacterActionFinishReason ActionFinishReason);
	void SetEnableTilt(bool InIsEnable, bool* OutIsEnable);
	void SetHeightAxisValue(double HeightAxisValue_0);
	void SetInputVector(const struct FVector2D& InputVector_0);
	void SetIsRotateAutoIdle(bool InIsRotateLanded);
	void SetIsRotateLanded(bool InIsRotateLanded);
	void SetJumpStatus(EKoratJumpState InJumpStatus);
	void SetLockOnCharacter(bool bLockon);
	void SetLockOnMode(bool InIsLockOn);
	void SetLocomotionCurrentStatus(EKoratLocomotionState InCurrentStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void SetLocomotionRotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, const struct FFLocomotionRotationParameter& InRotationParameter, bool* IsSuccessfully);
	void SetMovingRotation(const struct FRotator& MovingRotation_0);
	void SetNumbReactionStatus(ECharacterNumbReactionState InNumbReactionStatus);
	void SetRevengeDashStatus(EKoratDragonHomingState InRevengeDashStatus);
	void SetShortDashStatus(EKoratShortDashState InShortDashStatus);
	void SetStepStatus(EKoratStepState InStepStatus);
	void SetStrutJumpStatus(ECharacterStrutJumpState InJumpStatus);
	void SetStunReactionStatus(EKoratStunReactionState InStunReactionStatus);
	void SetSubIdleMoveSkipStateTimerCheck();
	void SetUpDashStateMovementParameter();
	void SetupDragonDashStart(const struct FVector& InputPin, bool InIsKeepOldDashRotation, bool InIsEnablePitch);
	void SetupMovementCharacterIdleMove();
	void SetupMovementComponentIdleMove();
	void SetupMovementIdleMove();
	void SetupReferenceVariable();
	void SetupRestartDragonDash();
	void SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch);
	void SetUseCharacterRotationPitchDetail(bool InUsePitchLimit, bool InUsePitchInterp, bool* UsePitchLimit, bool* UsePitchInterp);
	void SetVirtualTarget(class AActor* InActor, const struct FVector& InLocation, bool InUseBattleTargetPawn);
	void SetWallUkemiStatus(EKoratWallUkemiState InWallUkemiStatus);
	void StartBlowDown(double InDownToRevivalTime);
	void StartBlowDownRevival();
	void StartMobileMonitoring();
	void StartShortDash(EKoratCharacterActionFinishReason InActionFinishReason, bool* IsStartShortDash);
	void StateDragonDash(ECharacterLocomotionEventType InEventType, double InDeltaSeconds);
	void StateSuperHighSpeedMove();
	void StopJump(bool InChangeJumpToFly);
	void StopKnockBack();
	void StopRevengeDash();
	void Update_Dragon_Dash_Move(double InDeltaSeconds, bool InIsDashCombatives, EKoratDragonDashState* NextDragonDashStatus);
	void Update_Input_Move();
	void Update_Sub_State_Timer(double InDeltaSeconds, double* OutSubStateTimer);
	void UpdateCache();
	void UpdateCurrentRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection);
	void UpdateDragonDashRotationSpeed(bool InIsForceSetInitialSpeed, const struct FVector& InNewInputVector, double InDeltaSeconds);
	void UpdateIdleMoveTimer(double InDeltaSeconds);
	void UpdateInputMove();
	void UpdateLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus);
	void UpdateLocomotionParameterCache();
	void UpdateMobileMonitoring();
	void UpdateRange(double Distance, bool IsForceChange);
	void UpdateRunningAction(EKoratCharacterActionFinishReason InActionFinishReason, bool* OutIsChangeAction);
	void UpdateSpeed(double InDistance, bool InIsFixRangeSpeed, bool InIsNear);
	void UpdateState(ECharacterLocomotionEventType InEventType, double InDeltaSeconds);

	void GetCharacterMovementMode(EMovementMode* MovementMode) const;
	void GetCharacterRotation(struct FRotator* Rotation) const;
	void GetJumpStatus(EKoratJumpState* JumpStatus) const;
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus) const;
	void GetLocomotionParameterForCamera(double* XYSpeed_0, bool* IsLockOn, EKoratDragonDashState* DragonDashStatus_0) const;
	void GetLocomotionSub(const EKoratLocomotionState& InLocomotionStatus, class UBP_CharacterLocomotionSubBase_C** SubInstance) const;
	void GetRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection) const;
	void GetStepStatus(EKoratStepState* StepStatus) const;
	void GetSubBlow(class UBP_CharacterLocomotionSubBlow_C** SubBlow) const;
	void GetSubDashUkemi(class UBP_CharacterLocomotionSubDashUkemi_C** SubDashUkemi) const;
	void GetSubDashUpDown(class UBP_CharacterLocomotionSubDashUpDown_C** SubDashUpDown) const;
	void GetSubDragonHoming(class UBP_CharacterLocomotionSubDragonHoming_C** SubDragonHoming) const;
	void GetSubJump(class UBP_CharacterLocomotionSubJump_C** SubJump) const;
	void GetSubNumbReaction(class UBP_CharacterLocomotionSubNumbReaction_C** SubNumbReaction) const;
	void GetSubShortDash(class UBP_CharacterLocomotionSubShortDash_C** SubShortDash) const;
	void GetSubStep(class UBP_CharacterLocomotionSubStep_C** SubStep) const;
	void GetSubStunReaction(class UBP_CharacterLocomotionSubStunReaction_C** SubStunReaction) const;
	void GetSubWallUkemi(class UBP_CharacterLocomotionSubWallUkemi_C** SubWallUkemi) const;
	void GetSubZBurstDash(class UBP_CharacterLocomotionSubZBurstDash_C** SubZBurstDash) const;
	void GetUseCharacterRotationPitch(bool* UsePitch) const;
	bool IsStatusEnableAction() const;
	bool IsUpdateSpeedGraph() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionComponent_C">();
	}
	static class UBP_CharacterLocomotionComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionComponent_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionComponent_C) == 0x000010, "Wrong alignment on UBP_CharacterLocomotionComponent_C");
static_assert(sizeof(UBP_CharacterLocomotionComponent_C) == 0x001560, "Wrong size on UBP_CharacterLocomotionComponent_C");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, UberGraphFrame) == 0x000680, "Member 'UBP_CharacterLocomotionComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Speed) == 0x000688, "Member 'UBP_CharacterLocomotionComponent_C::Speed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, XYSpeed) == 0x000690, "Member 'UBP_CharacterLocomotionComponent_C::XYSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ZSpeed) == 0x000698, "Member 'UBP_CharacterLocomotionComponent_C::ZSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LastVelocityRot) == 0x0006A0, "Member 'UBP_CharacterLocomotionComponent_C::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CharacterRot) == 0x0006B8, "Member 'UBP_CharacterLocomotionComponent_C::CharacterRot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LookAtRotation) == 0x0006D0, "Member 'UBP_CharacterLocomotionComponent_C::LookAtRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ToTargetRotation) == 0x0006E8, "Member 'UBP_CharacterLocomotionComponent_C::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, TargetDistance) == 0x000700, "Member 'UBP_CharacterLocomotionComponent_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DirectionY) == 0x000708, "Member 'UBP_CharacterLocomotionComponent_C::DirectionY' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DirectionZ) == 0x000710, "Member 'UBP_CharacterLocomotionComponent_C::DirectionZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NearMoveAlpha) == 0x000718, "Member 'UBP_CharacterLocomotionComponent_C::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, BattleMoveAlpha) == 0x000720, "Member 'UBP_CharacterLocomotionComponent_C::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NormalModeSpeed) == 0x000728, "Member 'UBP_CharacterLocomotionComponent_C::NormalModeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NearModeSpeed) == 0x000730, "Member 'UBP_CharacterLocomotionComponent_C::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Character) == 0x000738, "Member 'UBP_CharacterLocomotionComponent_C::Character' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CurrentStatus) == 0x000740, "Member 'UBP_CharacterLocomotionComponent_C::CurrentStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashStatus) == 0x000741, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NearDistance) == 0x000748, "Member 'UBP_CharacterLocomotionComponent_C::NearDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SSCharacter) == 0x000750, "Member 'UBP_CharacterLocomotionComponent_C::SSCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsChangeNearModeOnlyIdle) == 0x000758, "Member 'UBP_CharacterLocomotionComponent_C::IsChangeNearModeOnlyIdle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SpeedInterpolateRange) == 0x000760, "Member 'UBP_CharacterLocomotionComponent_C::SpeedInterpolateRange' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StartMovementMode) == 0x000768, "Member 'UBP_CharacterLocomotionComponent_C::StartMovementMode' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputBattleKey) == 0x000769, "Member 'UBP_CharacterLocomotionComponent_C::InputBattleKey' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, JumpMaxHoldTime) == 0x000770, "Member 'UBP_CharacterLocomotionComponent_C::JumpMaxHoldTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, JumpMaxCount) == 0x000778, "Member 'UBP_CharacterLocomotionComponent_C::JumpMaxCount' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CanFly) == 0x00077C, "Member 'UBP_CharacterLocomotionComponent_C::CanFly' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableMovementInput) == 0x00077D, "Member 'UBP_CharacterLocomotionComponent_C::EnableMovementInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableMovementInputOld) == 0x00077E, "Member 'UBP_CharacterLocomotionComponent_C::EnableMovementInputOld' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ChangeJumpToFly) == 0x00077F, "Member 'UBP_CharacterLocomotionComponent_C::ChangeJumpToFly' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, JumpToFlyTimer) == 0x000780, "Member 'UBP_CharacterLocomotionComponent_C::JumpToFlyTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, GravityScale) == 0x000788, "Member 'UBP_CharacterLocomotionComponent_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, WalkableFloorAngle) == 0x000790, "Member 'UBP_CharacterLocomotionComponent_C::WalkableFloorAngle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MaxAcceleration) == 0x000798, "Member 'UBP_CharacterLocomotionComponent_C::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, JumpZVelocity) == 0x0007A0, "Member 'UBP_CharacterLocomotionComponent_C::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, AirControl) == 0x0007A8, "Member 'UBP_CharacterLocomotionComponent_C::AirControl' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, AirControlBoostMultiplier) == 0x0007B0, "Member 'UBP_CharacterLocomotionComponent_C::AirControlBoostMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, AirControlBoostVelocityThreshold) == 0x0007B8, "Member 'UBP_CharacterLocomotionComponent_C::AirControlBoostVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, GroundFriction) == 0x0007C0, "Member 'UBP_CharacterLocomotionComponent_C::GroundFriction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, BrakingDecelerationWalking) == 0x0007C8, "Member 'UBP_CharacterLocomotionComponent_C::BrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, BrakingDecelerationFlying) == 0x0007D0, "Member 'UBP_CharacterLocomotionComponent_C::BrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, RotationRate) == 0x0007D8, "Member 'UBP_CharacterLocomotionComponent_C::RotationRate' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LockOnTurnSpeed) == 0x0007F0, "Member 'UBP_CharacterLocomotionComponent_C::LockOnTurnSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsTransitionRelaxIdle) == 0x0007F8, "Member 'UBP_CharacterLocomotionComponent_C::IsTransitionRelaxIdle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MoveEffectStartSpeed) == 0x000800, "Member 'UBP_CharacterLocomotionComponent_C::MoveEffectStartSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MoveEffectEndSpeed) == 0x000808, "Member 'UBP_CharacterLocomotionComponent_C::MoveEffectEndSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsAutoJumpToFly) == 0x000810, "Member 'UBP_CharacterLocomotionComponent_C::IsAutoJumpToFly' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, JumpToFlySeconds) == 0x000818, "Member 'UBP_CharacterLocomotionComponent_C::JumpToFlySeconds' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsInAir) == 0x000820, "Member 'UBP_CharacterLocomotionComponent_C::IsInAir' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Velocity) == 0x000828, "Member 'UBP_CharacterLocomotionComponent_C::Velocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, VelocityZ) == 0x000840, "Member 'UBP_CharacterLocomotionComponent_C::VelocityZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugHitDotVar) == 0x000848, "Member 'UBP_CharacterLocomotionComponent_C::DebugHitDotVar' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugHitRad) == 0x000850, "Member 'UBP_CharacterLocomotionComponent_C::DebugHitRad' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugHitDeg) == 0x000858, "Member 'UBP_CharacterLocomotionComponent_C::DebugHitDeg' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MovingRotation) == 0x000860, "Member 'UBP_CharacterLocomotionComponent_C::MovingRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputVector) == 0x000878, "Member 'UBP_CharacterLocomotionComponent_C::InputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputWorldDirectionXY) == 0x000888, "Member 'UBP_CharacterLocomotionComponent_C::InputWorldDirectionXY' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputValueXY) == 0x0008A0, "Member 'UBP_CharacterLocomotionComponent_C::InputValueXY' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputValueZ) == 0x0008A8, "Member 'UBP_CharacterLocomotionComponent_C::InputValueZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, HeightAxisValue) == 0x0008B0, "Member 'UBP_CharacterLocomotionComponent_C::HeightAxisValue' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsValidInput) == 0x0008B8, "Member 'UBP_CharacterLocomotionComponent_C::IsValidInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SpeedByInput) == 0x0008C0, "Member 'UBP_CharacterLocomotionComponent_C::SpeedByInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, XYSpeedByInput) == 0x0008C8, "Member 'UBP_CharacterLocomotionComponent_C::XYSpeedByInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ZSpeedByInput) == 0x0008D0, "Member 'UBP_CharacterLocomotionComponent_C::ZSpeedByInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, VelocityZByInput) == 0x0008D8, "Member 'UBP_CharacterLocomotionComponent_C::VelocityZByInput' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsStepNear4Direction) == 0x0008E0, "Member 'UBP_CharacterLocomotionComponent_C::IsStepNear4Direction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepNearInputAngleFront) == 0x0008E8, "Member 'UBP_CharacterLocomotionComponent_C::StepNearInputAngleFront' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepNearInputAngleLeftRight) == 0x0008F0, "Member 'UBP_CharacterLocomotionComponent_C::StepNearInputAngleLeftRight' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepFarInputAngleFront) == 0x0008F8, "Member 'UBP_CharacterLocomotionComponent_C::StepFarInputAngleFront' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsStepFar2Direction) == 0x000900, "Member 'UBP_CharacterLocomotionComponent_C::IsStepFar2Direction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamFront) == 0x000904, "Member 'UBP_CharacterLocomotionComponent_C::StepParamFront' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamFlyBackIN) == 0x000920, "Member 'UBP_CharacterLocomotionComponent_C::StepParamFlyBackIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamFlyBackOT) == 0x00093C, "Member 'UBP_CharacterLocomotionComponent_C::StepParamFlyBackOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamFlyLeftRightIN) == 0x000958, "Member 'UBP_CharacterLocomotionComponent_C::StepParamFlyLeftRightIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamFlyLeftRightOT) == 0x000974, "Member 'UBP_CharacterLocomotionComponent_C::StepParamFlyLeftRightOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamGroundBackIN) == 0x000990, "Member 'UBP_CharacterLocomotionComponent_C::StepParamGroundBackIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamGroundBackOT) == 0x0009AC, "Member 'UBP_CharacterLocomotionComponent_C::StepParamGroundBackOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamGroundLeftRightIN) == 0x0009C8, "Member 'UBP_CharacterLocomotionComponent_C::StepParamGroundLeftRightIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamGroundLeftRightOT) == 0x0009E4, "Member 'UBP_CharacterLocomotionComponent_C::StepParamGroundLeftRightOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamLongFrontIN) == 0x000A00, "Member 'UBP_CharacterLocomotionComponent_C::StepParamLongFrontIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamLongFrontOT) == 0x000A1C, "Member 'UBP_CharacterLocomotionComponent_C::StepParamLongFrontOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamLongBackIN) == 0x000A38, "Member 'UBP_CharacterLocomotionComponent_C::StepParamLongBackIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugHUD) == 0x000A58, "Member 'UBP_CharacterLocomotionComponent_C::DebugHUD' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamLongBackOT) == 0x000A60, "Member 'UBP_CharacterLocomotionComponent_C::StepParamLongBackOT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, StepParamShort_Dash) == 0x000A80, "Member 'UBP_CharacterLocomotionComponent_C::StepParamShort_Dash' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, TurnYawTolerance) == 0x000AB0, "Member 'UBP_CharacterLocomotionComponent_C::TurnYawTolerance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsEnableMoveEffect) == 0x000AB8, "Member 'UBP_CharacterLocomotionComponent_C::IsEnableMoveEffect' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashParam) == 0x000AC0, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, AnimEventDragonDashState) == 0x000C20, "Member 'UBP_CharacterLocomotionComponent_C::AnimEventDragonDashState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, InputKoratBattleKey) == 0x000C21, "Member 'UBP_CharacterLocomotionComponent_C::InputKoratBattleKey' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, AnimEventType) == 0x000C22, "Member 'UBP_CharacterLocomotionComponent_C::AnimEventType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SubStateTimer) == 0x000C28, "Member 'UBP_CharacterLocomotionComponent_C::SubStateTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashEnd1Timer) == 0x000C30, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashEnd1Timer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MontageComponent) == 0x000C38, "Member 'UBP_CharacterLocomotionComponent_C::MontageComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashMoveInputValue) == 0x000C40, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashMoveInputValue' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnHitArgOther) == 0x000C58, "Member 'UBP_CharacterLocomotionComponent_C::OnHitArgOther' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnHitArgHitNormal) == 0x000C60, "Member 'UBP_CharacterLocomotionComponent_C::OnHitArgHitNormal' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashMoveInputValueOld) == 0x000C78, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashMoveInputValueOld' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashInputXYZ) == 0x000C90, "Member 'UBP_CharacterLocomotionComponent_C::DashInputXYZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashIsInputNeutral) == 0x000CA8, "Member 'UBP_CharacterLocomotionComponent_C::DashIsInputNeutral' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashRotation) == 0x000CB0, "Member 'UBP_CharacterLocomotionComponent_C::DashRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashMovementParam) == 0x000CC8, "Member 'UBP_CharacterLocomotionComponent_C::DashMovementParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashHoldTimer) == 0x000CE8, "Member 'UBP_CharacterLocomotionComponent_C::DashHoldTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashRotationSpeed) == 0x000CF0, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashRotationSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsRequestPlayIdle) == 0x000D08, "Member 'UBP_CharacterLocomotionComponent_C::IsRequestPlayIdle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ActionIdleType) == 0x000D09, "Member 'UBP_CharacterLocomotionComponent_C::ActionIdleType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnHitArgNormalImpulse) == 0x000D10, "Member 'UBP_CharacterLocomotionComponent_C::OnHitArgNormalImpulse' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnHitArgHit) == 0x000D28, "Member 'UBP_CharacterLocomotionComponent_C::OnHitArgHit' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnHitDeltaTime) == 0x000E10, "Member 'UBP_CharacterLocomotionComponent_C::OnHitDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, RotateAutoIdleTimer) == 0x000E18, "Member 'UBP_CharacterLocomotionComponent_C::RotateAutoIdleTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsRotateLanded) == 0x000E20, "Member 'UBP_CharacterLocomotionComponent_C::IsRotateLanded' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsRotateAutoIdle) == 0x000E21, "Member 'UBP_CharacterLocomotionComponent_C::IsRotateAutoIdle' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, RunningAction) == 0x000E24, "Member 'UBP_CharacterLocomotionComponent_C::RunningAction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonHomingParam) == 0x000E30, "Member 'UBP_CharacterLocomotionComponent_C::DragonHomingParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LocomotionSplineComponent) == 0x000EA0, "Member 'UBP_CharacterLocomotionComponent_C::LocomotionSplineComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, RunningSection) == 0x000EA8, "Member 'UBP_CharacterLocomotionComponent_C::RunningSection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnLandedArgOther) == 0x000EB0, "Member 'UBP_CharacterLocomotionComponent_C::OnLandedArgOther' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnLandedArgHitNormal) == 0x000EB8, "Member 'UBP_CharacterLocomotionComponent_C::OnLandedArgHitNormal' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, OnLandedArgNormalImpulse) == 0x000ED0, "Member 'UBP_CharacterLocomotionComponent_C::OnLandedArgNormalImpulse' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LocomotionSubClasses) == 0x000EE8, "Member 'UBP_CharacterLocomotionComponent_C::LocomotionSubClasses' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, LocomotionSubInstances) == 0x000EF8, "Member 'UBP_CharacterLocomotionComponent_C::LocomotionSubInstances' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CurrentSubInstance) == 0x000F48, "Member 'UBP_CharacterLocomotionComponent_C::CurrentSubInstance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CurrentAnimStateName) == 0x000F50, "Member 'UBP_CharacterLocomotionComponent_C::CurrentAnimStateName' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, CurrentAnimTimeRemainingFraction) == 0x000F58, "Member 'UBP_CharacterLocomotionComponent_C::CurrentAnimTimeRemainingFraction' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsRequestResetStateMachine) == 0x000F60, "Member 'UBP_CharacterLocomotionComponent_C::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ResetStateMachineStatus) == 0x000F61, "Member 'UBP_CharacterLocomotionComponent_C::ResetStateMachineStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugUseRotationPitch) == 0x000F62, "Member 'UBP_CharacterLocomotionComponent_C::DebugUseRotationPitch' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ZBurstDashParam) == 0x000F68, "Member 'UBP_CharacterLocomotionComponent_C::ZBurstDashParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ___Z__________) == 0x000FD0, "Member 'UBP_CharacterLocomotionComponent_C::___Z__________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, _____________gZ________z_) == 0x000FD1, "Member 'UBP_CharacterLocomotionComponent_C::_____________gZ________z_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________M__) == 0x000FD2, "Member 'UBP_CharacterLocomotionComponent_C::________M__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, _____________) == 0x000FD3, "Member 'UBP_CharacterLocomotionComponent_C::_____________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, _________cH__) == 0x000FD4, "Member 'UBP_CharacterLocomotionComponent_C::_________cH__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Debug__wM_L_e_8k__) == 0x000FD5, "Member 'UBP_CharacterLocomotionComponent_C::Debug__wM_L_e_8k__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Debug__wM_L_e___) == 0x000FD8, "Member 'UBP_CharacterLocomotionComponent_C::Debug__wM_L_e___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, Debug__wM_L_9M_s_____B__) == 0x000FE8, "Member 'UBP_CharacterLocomotionComponent_C::Debug__wM_L_9M_s_____B__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DebugTransform) == 0x001000, "Member 'UBP_CharacterLocomotionComponent_C::DebugTransform' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, BP_DebugBlowActor1) == 0x001060, "Member 'UBP_CharacterLocomotionComponent_C::BP_DebugBlowActor1' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, bBlowDebug) == 0x001068, "Member 'UBP_CharacterLocomotionComponent_C::bBlowDebug' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________0____) == 0x00106C, "Member 'UBP_CharacterLocomotionComponent_C::________0____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, TickDeltaSeconds) == 0x0010A0, "Member 'UBP_CharacterLocomotionComponent_C::TickDeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________0__M___) == 0x0010A8, "Member 'UBP_CharacterLocomotionComponent_C::________0__M___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________zMinus___) == 0x0010D8, "Member 'UBP_CharacterLocomotionComponent_C::________zMinus___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________zMinus_M___) == 0x001108, "Member 'UBP_CharacterLocomotionComponent_C::________zMinus_M___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, __________) == 0x001138, "Member 'UBP_CharacterLocomotionComponent_C::__________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, _________M) == 0x001168, "Member 'UBP_CharacterLocomotionComponent_C::_________M' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, _________0) == 0x001198, "Member 'UBP_CharacterLocomotionComponent_C::_________0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, __w_Bk___c__Y_B_) == 0x0011C8, "Member 'UBP_CharacterLocomotionComponent_C::__w_Bk___c__Y_B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, __w_Bk___c__Y___) == 0x0011D0, "Member 'UBP_CharacterLocomotionComponent_C::__w_Bk___c__Y___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, __________w_B___c) == 0x0011D8, "Member 'UBP_CharacterLocomotionComponent_C::__________w_B___c' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ____________) == 0x001208, "Member 'UBP_CharacterLocomotionComponent_C::____________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________0______) == 0x001238, "Member 'UBP_CharacterLocomotionComponent_C::________0______' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________zMinus_____) == 0x001268, "Member 'UBP_CharacterLocomotionComponent_C::________zMinus_____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ______B_M_Q_B_) == 0x001298, "Member 'UBP_CharacterLocomotionComponent_C::______B_M_Q_B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________9M_s___) == 0x0012A0, "Member 'UBP_CharacterLocomotionComponent_C::________9M_s___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, BP_DebugBlowActor2) == 0x0012D0, "Member 'UBP_CharacterLocomotionComponent_C::BP_DebugBlowActor2' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashUpDownParam) == 0x0012D8, "Member 'UBP_CharacterLocomotionComponent_C::DashUpDownParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ___________) == 0x0013C0, "Member 'UBP_CharacterLocomotionComponent_C::___________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, __________M) == 0x0013F0, "Member 'UBP_CharacterLocomotionComponent_C::__________M' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________________) == 0x001420, "Member 'UBP_CharacterLocomotionComponent_C::________________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ____________0) == 0x001424, "Member 'UBP_CharacterLocomotionComponent_C::____________0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ____________________) == 0x001454, "Member 'UBP_CharacterLocomotionComponent_C::____________________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, ________0b___________) == 0x001484, "Member 'UBP_CharacterLocomotionComponent_C::________0b___________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DragonDashIsEnablePitch) == 0x0014B4, "Member 'UBP_CharacterLocomotionComponent_C::DragonDashIsEnablePitch' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IdleMoveTimer) == 0x0014B8, "Member 'UBP_CharacterLocomotionComponent_C::IdleMoveTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsDebugMobileMonitoring) == 0x0014C0, "Member 'UBP_CharacterLocomotionComponent_C::IsDebugMobileMonitoring' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableMobileMonitoring) == 0x0014C1, "Member 'UBP_CharacterLocomotionComponent_C::EnableMobileMonitoring' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MobileMonitoringFailureDetection) == 0x0014C2, "Member 'UBP_CharacterLocomotionComponent_C::MobileMonitoringFailureDetection' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MobileMonitoringAcc) == 0x0014C8, "Member 'UBP_CharacterLocomotionComponent_C::MobileMonitoringAcc' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, MobileMonitoringAccMax) == 0x0014D0, "Member 'UBP_CharacterLocomotionComponent_C::MobileMonitoringAccMax' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NormalWalkModeSpeed) == 0x0014D8, "Member 'UBP_CharacterLocomotionComponent_C::NormalWalkModeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, NearWalkModeSpeed) == 0x0014E0, "Member 'UBP_CharacterLocomotionComponent_C::NearWalkModeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SubDashRotation) == 0x0014E8, "Member 'UBP_CharacterLocomotionComponent_C::SubDashRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsNeutralShortDash) == 0x001500, "Member 'UBP_CharacterLocomotionComponent_C::IsNeutralShortDash' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, UseDashKidanVelocity) == 0x001508, "Member 'UBP_CharacterLocomotionComponent_C::UseDashKidanVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, UseDashKidanMovementInputVector) == 0x001520, "Member 'UBP_CharacterLocomotionComponent_C::UseDashKidanMovementInputVector' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashKidanDecelerationTime) == 0x001530, "Member 'UBP_CharacterLocomotionComponent_C::DashKidanDecelerationTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DashKidanBrakingDecelerationFlying) == 0x001538, "Member 'UBP_CharacterLocomotionComponent_C::DashKidanBrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableOptimizeClearSubStatus) == 0x001540, "Member 'UBP_CharacterLocomotionComponent_C::EnableOptimizeClearSubStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableActorMoveInMovementComp) == 0x001541, "Member 'UBP_CharacterLocomotionComponent_C::EnableActorMoveInMovementComp' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, EnableSetAnimationParameterRotationOnly) == 0x001542, "Member 'UBP_CharacterLocomotionComponent_C::EnableSetAnimationParameterRotationOnly' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, IsDownBlendSkip) == 0x001543, "Member 'UBP_CharacterLocomotionComponent_C::IsDownBlendSkip' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, PreCurrentStatus) == 0x001544, "Member 'UBP_CharacterLocomotionComponent_C::PreCurrentStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, FastRepeatCount) == 0x001548, "Member 'UBP_CharacterLocomotionComponent_C::FastRepeatCount' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, SetCurrentStatusTime) == 0x001550, "Member 'UBP_CharacterLocomotionComponent_C::SetCurrentStatusTime' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionComponent_C, DefaultMaxStepHeight) == 0x001558, "Member 'UBP_CharacterLocomotionComponent_C::DefaultMaxStepHeight' has a wrong offset!");

}

