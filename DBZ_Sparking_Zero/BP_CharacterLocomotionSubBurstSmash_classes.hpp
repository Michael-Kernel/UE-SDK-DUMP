#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBurstSmash

#include "Basic.hpp"

#include "BP_CharacterLocomotionSubZBurstDash_classes.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C
// 0x0008 (0x02D8 - 0x02D0)
class UBP_CharacterLocomotionSubBurstSmash_C final : public UBP_CharacterLocomotionSubZBurstDash_C
{
public:
	double                                        _____e______________LNB_;                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void ClearStatus();
	void GetInitZBurstDashBaseRotation(struct FRotator* ___);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void IsEnableAction(bool* IsEnable);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void ZBurstDash_INUpdate();
	void ZBurstDash_LPUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubBurstSmash_C">();
	}
	static class UBP_CharacterLocomotionSubBurstSmash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubBurstSmash_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubBurstSmash_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubBurstSmash_C");
static_assert(sizeof(UBP_CharacterLocomotionSubBurstSmash_C) == 0x0002D8, "Wrong size on UBP_CharacterLocomotionSubBurstSmash_C");
static_assert(offsetof(UBP_CharacterLocomotionSubBurstSmash_C, _____e______________LNB_) == 0x0002D0, "Member 'UBP_CharacterLocomotionSubBurstSmash_C::_____e______________LNB_' has a wrong offset!");

}

