#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterLocomotion

#include "Basic.hpp"

#include "BPI_CharacterLocomotion_classes.hpp"
#include "BPI_CharacterLocomotion_parameters.hpp"


namespace SDK
{

// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementXInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::AddCharacterMovementXInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "AddCharacterMovementXInput");

	Params::BPI_CharacterLocomotion_C_AddCharacterMovementXInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementXYInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::AddCharacterMovementXYInput(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "AddCharacterMovementXYInput");

	Params::BPI_CharacterLocomotion_C_AddCharacterMovementXYInput Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementYInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::AddCharacterMovementYInput(const struct FVector& WorldDirection, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "AddCharacterMovementYInput");

	Params::BPI_CharacterLocomotion_C_AddCharacterMovementYInput Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.AddCharacterMovementZInputLast
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::AddCharacterMovementZInputLast(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "AddCharacterMovementZInputLast");

	Params::BPI_CharacterLocomotion_C_AddCharacterMovementZInputLast Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.DebugLockOnChange
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::DebugLockOnChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "DebugLockOnChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionDetailStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratCharacterLocomotionDetailStatus   OutLocomotionDetailStatus                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* OutLocomotionDetailStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionDetailStatus");

	Params::BPI_CharacterLocomotion_C_GetLocomotionDetailStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocomotionDetailStatus != nullptr)
		*OutLocomotionDetailStatus = Parms.OutLocomotionDetailStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterNumbReactionState             State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Front                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionNumbReaction(ECharacterNumbReactionState* State, bool* Front)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionNumbReaction");

	Params::BPI_CharacterLocomotion_C_GetLocomotionNumbReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = Parms.State;

	if (Front != nullptr)
		*Front = Parms.Front;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForAction(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsInAir, double* MaxSpeed, double* NearModeSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForAction");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed != nullptr)
		*NearModeSpeed = Parms.NearModeSpeed;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForBurstDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CharacterSplineComponent_C*   SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  SplineNowDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForBurstDash(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForBurstDash");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;

	if (SplineNowDistance != nullptr)
		*SplineNowDistance = Parms.SplineNowDistance;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForBurstSmash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratZBurstDashState                   ZBurstDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CharacterSplineComponent_C*   SplineComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  SplineNowDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForBurstSmash(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratZBurstDashState* ZBurstDashStatus, class UBP_CharacterSplineComponent_C** SplineComponent, double* SplineNowDistance, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForBurstSmash");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForBurstSmash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ZBurstDashStatus != nullptr)
		*ZBurstDashStatus = Parms.ZBurstDashStatus;

	if (SplineComponent != nullptr)
		*SplineComponent = Parms.SplineComponent;

	if (SplineNowDistance != nullptr)
		*SplineNowDistance = Parms.SplineNowDistance;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForDashUkemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EKoratDashUkemiState                    DashUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUkemiType                     DashUkemiType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForecastBlowHit                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitLocation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForecastBlowHitTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       ForecastBlowHitMapAttribute                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitNormal                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForDashUkemi(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation, EKoratDashUkemiState* DashUkemiStatus, EKoratDashUkemiType* DashUkemiType, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForDashUkemi");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (InputVector != nullptr)
		*InputVector = std::move(Parms.InputVector);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (DragonDashStatus != nullptr)
		*DragonDashStatus = Parms.DragonDashStatus;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);

	if (DashUkemiStatus != nullptr)
		*DashUkemiStatus = Parms.DashUkemiStatus;

	if (DashUkemiType != nullptr)
		*DashUkemiType = Parms.DashUkemiType;

	if (IsForecastBlowHit != nullptr)
		*IsForecastBlowHit = Parms.IsForecastBlowHit;

	if (ForecastBlowHitLocation != nullptr)
		*ForecastBlowHitLocation = std::move(Parms.ForecastBlowHitLocation);

	if (ForecastBlowHitTime != nullptr)
		*ForecastBlowHitTime = Parms.ForecastBlowHitTime;

	if (ForecastBlowHitMapAttribute != nullptr)
		*ForecastBlowHitMapAttribute = std::move(Parms.ForecastBlowHitMapAttribute);

	if (ForecastBlowHitNormal != nullptr)
		*ForecastBlowHitNormal = std::move(Parms.ForecastBlowHitNormal);

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForDashUpDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUpDownState                   DashUpDownStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDashUpDownType                    DashUpDownType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForDashUpDown(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratDashUpDownState* DashUpDownStatus, EKoratDashUpDownType* DashUpDownType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForDashUpDown");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForDashUpDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (DashUpDownStatus != nullptr)
		*DashUpDownStatus = Parms.DashUpDownStatus;

	if (DashUpDownType != nullptr)
		*DashUpDownType = Parms.DashUpDownType;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForHighSpeedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalMaxSpeed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalSpeed                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      ShortDashAdditionalSpeedCurve                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashMoveTimer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForHighSpeedMove(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratHighSpeedMoveState* HighSpeedMoveStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForHighSpeedMove");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForHighSpeedMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (TargetDistance != nullptr)
		*TargetDistance = Parms.TargetDistance;

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed != nullptr)
		*NearModeSpeed = Parms.NearModeSpeed;

	if (InputVector != nullptr)
		*InputVector = std::move(Parms.InputVector);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;

	if (ShortDashAdditionalMaxSpeed != nullptr)
		*ShortDashAdditionalMaxSpeed = Parms.ShortDashAdditionalMaxSpeed;

	if (ShortDashAdditionalSpeed != nullptr)
		*ShortDashAdditionalSpeed = Parms.ShortDashAdditionalSpeed;

	if (ShortDashAdditionalSpeedCurve != nullptr)
		*ShortDashAdditionalSpeedCurve = Parms.ShortDashAdditionalSpeedCurve;

	if (ShortDashMoveTimer != nullptr)
		*ShortDashMoveTimer = Parms.ShortDashMoveTimer;

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForIdleMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       EventHitArgHit                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    IsEnableMoveEffect                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectStartSpeed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectEndSpeed                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratShortDashState                    ShortDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalMaxSpeed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashAdditionalSpeed                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      ShortDashAdditionalSpeedCurve                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShortDashMoveTimer                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EKoratBlowState                         BlowStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratBlowType                          BlowType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BlowIsFront                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratHitBackMovementData        BlowHitBackMovementData                                (Parm, OutParm)
// double                                  BlowHitSpeedNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowHitSpeedParallel                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundSSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlowBoundMSpeedMax                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BlowReactionLevel                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 DragonHomingStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 RevengeDashStatus                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestPlayIdle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTransitionRelaxIdle                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratActionIdleType                    ActionIdleType                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonHomingState                 BlastDashStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForIdleMove(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, struct FHitResult* EventHitArgHit, bool* IsEnableMoveEffect, double* MoveEffectStartSpeed, double* MoveEffectEndSpeed, EKoratLocomotionState* LocomotionStatus, EKoratShortDashState* ShortDashStatus, double* ShortDashAdditionalMaxSpeed, double* ShortDashAdditionalSpeed, class UCurveFloat** ShortDashAdditionalSpeedCurve, double* ShortDashMoveTimer, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation, EKoratBlowState* BlowStatus, EKoratBlowType* BlowType, bool* BlowIsFront, struct FKoratHitBackMovementData* BlowHitBackMovementData, double* BlowHitSpeedNormal, double* BlowHitSpeedParallel, double* BlowBoundSSpeedMax, double* BlowBoundMSpeedMax, int32* BlowReactionLevel, EKoratDragonHomingState* DragonHomingStatus, EKoratDragonHomingState* RevengeDashStatus, bool* IsRequestPlayIdle, bool* IsTransitionRelaxIdle, EKoratActionIdleType* ActionIdleType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus, EKoratDragonHomingState* BlastDashStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForIdleMove");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForIdleMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (TargetDistance != nullptr)
		*TargetDistance = Parms.TargetDistance;

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed != nullptr)
		*NearModeSpeed = Parms.NearModeSpeed;

	if (InputVector != nullptr)
		*InputVector = std::move(Parms.InputVector);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (EventHitArgHit != nullptr)
		*EventHitArgHit = std::move(Parms.EventHitArgHit);

	if (IsEnableMoveEffect != nullptr)
		*IsEnableMoveEffect = Parms.IsEnableMoveEffect;

	if (MoveEffectStartSpeed != nullptr)
		*MoveEffectStartSpeed = Parms.MoveEffectStartSpeed;

	if (MoveEffectEndSpeed != nullptr)
		*MoveEffectEndSpeed = Parms.MoveEffectEndSpeed;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (ShortDashStatus != nullptr)
		*ShortDashStatus = Parms.ShortDashStatus;

	if (ShortDashAdditionalMaxSpeed != nullptr)
		*ShortDashAdditionalMaxSpeed = Parms.ShortDashAdditionalMaxSpeed;

	if (ShortDashAdditionalSpeed != nullptr)
		*ShortDashAdditionalSpeed = Parms.ShortDashAdditionalSpeed;

	if (ShortDashAdditionalSpeedCurve != nullptr)
		*ShortDashAdditionalSpeedCurve = Parms.ShortDashAdditionalSpeedCurve;

	if (ShortDashMoveTimer != nullptr)
		*ShortDashMoveTimer = Parms.ShortDashMoveTimer;

	if (DragonDashStatus != nullptr)
		*DragonDashStatus = Parms.DragonDashStatus;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);

	if (BlowStatus != nullptr)
		*BlowStatus = Parms.BlowStatus;

	if (BlowType != nullptr)
		*BlowType = Parms.BlowType;

	if (BlowIsFront != nullptr)
		*BlowIsFront = Parms.BlowIsFront;

	if (BlowHitBackMovementData != nullptr)
		*BlowHitBackMovementData = std::move(Parms.BlowHitBackMovementData);

	if (BlowHitSpeedNormal != nullptr)
		*BlowHitSpeedNormal = Parms.BlowHitSpeedNormal;

	if (BlowHitSpeedParallel != nullptr)
		*BlowHitSpeedParallel = Parms.BlowHitSpeedParallel;

	if (BlowBoundSSpeedMax != nullptr)
		*BlowBoundSSpeedMax = Parms.BlowBoundSSpeedMax;

	if (BlowBoundMSpeedMax != nullptr)
		*BlowBoundMSpeedMax = Parms.BlowBoundMSpeedMax;

	if (BlowReactionLevel != nullptr)
		*BlowReactionLevel = Parms.BlowReactionLevel;

	if (DragonHomingStatus != nullptr)
		*DragonHomingStatus = Parms.DragonHomingStatus;

	if (RevengeDashStatus != nullptr)
		*RevengeDashStatus = Parms.RevengeDashStatus;

	if (IsRequestPlayIdle != nullptr)
		*IsRequestPlayIdle = Parms.IsRequestPlayIdle;

	if (IsTransitionRelaxIdle != nullptr)
		*IsTransitionRelaxIdle = Parms.IsTransitionRelaxIdle;

	if (ActionIdleType != nullptr)
		*ActionIdleType = Parms.ActionIdleType;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;

	if (BlastDashStatus != nullptr)
		*BlastDashStatus = Parms.BlastDashStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratJumpState                         JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForJump(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, struct FVector* Velocity, double* VelocityZ, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForJump");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForLocomotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratJumpState                         JumpStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepState                         StepStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepType                          StepType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForLocomotion(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, EKoratLocomotionState* LocomotionStatus, EKoratJumpState* JumpStatus, EKoratStepState* StepStatus, EKoratStepType* StepType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForLocomotion");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForLocomotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (JumpStatus != nullptr)
		*JumpStatus = Parms.JumpStatus;

	if (StepStatus != nullptr)
		*StepStatus = Parms.StepStatus;

	if (StepType != nullptr)
		*StepType = Parms.StepType;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForMobileMonitoring
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsObstacleDetection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForMobileMonitoring(bool* IsObstacleDetection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForMobileMonitoring");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForMobileMonitoring Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsObstacleDetection != nullptr)
		*IsObstacleDetection = Parms.IsObstacleDetection;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForMoveStandUp(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* TargetDistance, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsLockOn, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForMoveStandUp");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForMoveStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (TargetDistance != nullptr)
		*TargetDistance = Parms.TargetDistance;

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed != nullptr)
		*NearModeSpeed = Parms.NearModeSpeed;

	if (InputVector != nullptr)
		*InputVector = std::move(Parms.InputVector);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForNumbReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForNumbReaction(EKoratLocomotionState* LocomotionStatus, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForNumbReaction");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForNumbReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForPostPhysics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityZ                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearModeSpeed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InputVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnableMoveEffect                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectStartSpeed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MoveEffectEndSpeed                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DragonDashRotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForPostPhysics(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsNearMode, bool* IsInAir, struct FVector* Velocity, double* VelocityZ, double* MaxSpeed, double* NearModeSpeed, struct FVector2D* InputVector, double* InputZ, bool* IsEnableMoveEffect, double* MoveEffectStartSpeed, double* MoveEffectEndSpeed, EKoratDragonDashState* DragonDashStatus, struct FRotator* DragonDashRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForPostPhysics");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForPostPhysics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsNearMode != nullptr)
		*IsNearMode = Parms.IsNearMode;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (VelocityZ != nullptr)
		*VelocityZ = Parms.VelocityZ;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	if (NearModeSpeed != nullptr)
		*NearModeSpeed = Parms.NearModeSpeed;

	if (InputVector != nullptr)
		*InputVector = std::move(Parms.InputVector);

	if (InputZ != nullptr)
		*InputZ = Parms.InputZ;

	if (IsEnableMoveEffect != nullptr)
		*IsEnableMoveEffect = Parms.IsEnableMoveEffect;

	if (MoveEffectStartSpeed != nullptr)
		*MoveEffectStartSpeed = Parms.MoveEffectStartSpeed;

	if (MoveEffectEndSpeed != nullptr)
		*MoveEffectEndSpeed = Parms.MoveEffectEndSpeed;

	if (DragonDashStatus != nullptr)
		*DragonDashStatus = Parms.DragonDashStatus;

	if (DragonDashRotation != nullptr)
		*DragonDashRotation = std::move(Parms.DragonDashRotation);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForStanReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStunReactionState                 StunReactionStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StunReactionIsFront                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForStanReaction(EKoratLocomotionState* LocomotionStatus, EKoratStunReactionState* StunReactionStatus, bool* StunReactionIsFront, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForStanReaction");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForStanReaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (StunReactionStatus != nullptr)
		*StunReactionStatus = Parms.StunReactionStatus;

	if (StunReactionIsFront != nullptr)
		*StunReactionIsFront = Parms.StunReactionIsFront;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepState                         StepStatus                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratStepType                          StepType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForStep(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratStepState* StepStatus, EKoratStepType* StepType, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForStep");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (StepStatus != nullptr)
		*StepStatus = Parms.StepStatus;

	if (StepType != nullptr)
		*StepType = Parms.StepType;

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForWallUkemi
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZSpeed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LastVelocityRot                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CharacterRot                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ToTargetRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DirectionY                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DirectionZ                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NearMoveAlpha                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BattleMoveAlpha                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInAir                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   LocomotionStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratWallUkemiState                    WallUkemiStatus                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForecastBlowHit                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitLocation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForecastBlowHitTime                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKoratMapAttributeDataList       ForecastBlowHitMapAttribute                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForecastBlowHitNormal                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRequestResetStateMachine                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratLocomotionState                   ResetStateMachineStatus                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForWallUkemi(double* Speed, double* XYSpeed, double* ZSpeed, struct FRotator* LastVelocityRot, struct FRotator* CharacterRot, struct FRotator* ToTargetRotation, double* DirectionY, double* DirectionZ, double* NearMoveAlpha, double* BattleMoveAlpha, bool* IsInAir, EKoratLocomotionState* LocomotionStatus, EKoratWallUkemiState* WallUkemiStatus, bool* IsForecastBlowHit, struct FVector* ForecastBlowHitLocation, double* ForecastBlowHitTime, struct FKoratMapAttributeDataList* ForecastBlowHitMapAttribute, struct FVector* ForecastBlowHitNormal, bool* IsRequestResetStateMachine, EKoratLocomotionState* ResetStateMachineStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForWallUkemi");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForWallUkemi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (ZSpeed != nullptr)
		*ZSpeed = Parms.ZSpeed;

	if (LastVelocityRot != nullptr)
		*LastVelocityRot = std::move(Parms.LastVelocityRot);

	if (CharacterRot != nullptr)
		*CharacterRot = std::move(Parms.CharacterRot);

	if (ToTargetRotation != nullptr)
		*ToTargetRotation = std::move(Parms.ToTargetRotation);

	if (DirectionY != nullptr)
		*DirectionY = Parms.DirectionY;

	if (DirectionZ != nullptr)
		*DirectionZ = Parms.DirectionZ;

	if (NearMoveAlpha != nullptr)
		*NearMoveAlpha = Parms.NearMoveAlpha;

	if (BattleMoveAlpha != nullptr)
		*BattleMoveAlpha = Parms.BattleMoveAlpha;

	if (IsInAir != nullptr)
		*IsInAir = Parms.IsInAir;

	if (LocomotionStatus != nullptr)
		*LocomotionStatus = Parms.LocomotionStatus;

	if (WallUkemiStatus != nullptr)
		*WallUkemiStatus = Parms.WallUkemiStatus;

	if (IsForecastBlowHit != nullptr)
		*IsForecastBlowHit = Parms.IsForecastBlowHit;

	if (ForecastBlowHitLocation != nullptr)
		*ForecastBlowHitLocation = std::move(Parms.ForecastBlowHitLocation);

	if (ForecastBlowHitTime != nullptr)
		*ForecastBlowHitTime = Parms.ForecastBlowHitTime;

	if (ForecastBlowHitMapAttribute != nullptr)
		*ForecastBlowHitMapAttribute = std::move(Parms.ForecastBlowHitMapAttribute);

	if (ForecastBlowHitNormal != nullptr)
		*ForecastBlowHitNormal = std::move(Parms.ForecastBlowHitNormal);

	if (IsRequestResetStateMachine != nullptr)
		*IsRequestResetStateMachine = Parms.IsRequestResetStateMachine;

	if (ResetStateMachineStatus != nullptr)
		*ResetStateMachineStatus = Parms.ResetStateMachineStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterMoveStandUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterMoveStandUpState              ActionStatus                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ActionIsFront                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterMoveStandUpDirection          ActionDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterMoveStandUp(ECharacterMoveStandUpState* ActionStatus, bool* ActionIsFront, ECharacterMoveStandUpDirection* ActionDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterMoveStandUp");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterMoveStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionStatus != nullptr)
		*ActionStatus = Parms.ActionStatus;

	if (ActionIsFront != nullptr)
		*ActionIsFront = Parms.ActionIsFront;

	if (ActionDirection != nullptr)
		*ActionDirection = Parms.ActionDirection;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterSuperHighSpeedMoveStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratHighSpeedMoveState                HighSpeedMoveStatus                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterSuperHighSpeedMoveStr(EKoratHighSpeedMoveState* HighSpeedMoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterSuperHighSpeedMoveStr");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterSuperHighSpeedMoveStr Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HighSpeedMoveStatus != nullptr)
		*HighSpeedMoveStatus = Parms.HighSpeedMoveStatus;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetRunningAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             OutRunningAction                                       (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// class FName                             OutRunningSection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetRunningAction(struct FKoratActionDataList* OutRunningAction, class FName* OutRunningSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetRunningAction");

	Params::BPI_CharacterLocomotion_C_GetRunningAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRunningAction != nullptr)
		*OutRunningAction = std::move(Parms.OutRunningAction);

	if (OutRunningSection != nullptr)
		*OutRunningSection = Parms.OutRunningSection;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.IsEnableAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::IsEnableAction(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "IsEnableAction");

	Params::BPI_CharacterLocomotion_C_IsEnableAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.IsNearRangeNow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNear                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::IsNearRangeNow(bool* IsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "IsNearRangeNow");

	Params::BPI_CharacterLocomotion_C_IsNearRangeNow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNear != nullptr)
		*IsNear = Parms.IsNear;
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnBlowAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBlowState                         BlowState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::OnBlowAnimEvent(EKoratBlowState BlowState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnBlowAnimEvent");

	Params::BPI_CharacterLocomotion_C_OnBlowAnimEvent Parms{};

	Parms.BlowState = BlowState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnDragonDashAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonDashState                   DragonDashState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::OnDragonDashAnimEvent(EKoratDragonDashState DragonDashState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnDragonDashAnimEvent");

	Params::BPI_CharacterLocomotion_C_OnDragonDashAnimEvent Parms{};

	Parms.DragonDashState = DragonDashState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnDragonHomingAnimEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratDragonHomingState                 DragonHomingState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAnimStateMachineEventType              AnimStateMachineEvent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::OnDragonHomingAnimEvent(EKoratDragonHomingState DragonHomingState, EAnimStateMachineEventType AnimStateMachineEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnDragonHomingAnimEvent");

	Params::BPI_CharacterLocomotion_C_OnDragonHomingAnimEvent Parms{};

	Parms.DragonHomingState = DragonHomingState;
	Parms.AnimStateMachineEvent = AnimStateMachineEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndBlowReaction
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndBlowReaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndBlowReaction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndDashCombatives
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndDashCombatives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndDashCombatives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndJumpFT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndJumpFT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndJumpFT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndJumpIN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndJumpIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndJumpIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndJumpOT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndJumpOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndJumpOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndJumpUP
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndJumpUP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndJumpUP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndStepIN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndStepIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndStepIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndStepOT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndStepOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndStepOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnEndUltimateBlastDash
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnEndUltimateBlastDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnEndUltimateBlastDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnHit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void IBPI_CharacterLocomotion_C::OnHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnHit");

	Params::BPI_CharacterLocomotion_C_OnHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnLanded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void IBPI_CharacterLocomotion_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnLanded");

	Params::BPI_CharacterLocomotion_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnPlayDashCombatives
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnPlayDashCombatives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnPlayDashCombatives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnPlayDragonDashCounter
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnPlayDragonDashCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnPlayDragonDashCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnPlayIdle
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnPlayIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnPlayIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnPlayUltimateBlastDash
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnPlayUltimateBlastDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnPlayUltimateBlastDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnRequestBlowReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKoratActionDataList             InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    InFrontHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::OnRequestBlowReaction(const struct FKoratActionDataList& InAction, bool InFrontHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnRequestBlowReaction");

	Params::BPI_CharacterLocomotion_C_OnRequestBlowReaction Parms{};

	Parms.InAction = std::move(InAction);
	Parms.InFrontHit = InFrontHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnResetStateMachine
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnResetStateMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnResetStateMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.OnTargetPlayTeleportationCounter
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterLocomotion_C::OnTargetPlayTeleportationCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "OnTargetPlayTeleportationCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetCurrentAnimTimeRemainingFraction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InCurrentStateName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InFraction                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::SetCurrentAnimTimeRemainingFraction(class FName InCurrentStateName, double InFraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "SetCurrentAnimTimeRemainingFraction");

	Params::BPI_CharacterLocomotion_C_SetCurrentAnimTimeRemainingFraction Parms{};

	Parms.InCurrentStateName = InCurrentStateName;
	Parms.InFraction = InFraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetEnableMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeJumpToFly                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       ActionFinishReason                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::SetEnableMovementInput(bool IsEnable, bool ChangeJumpToFly, EKoratCharacterActionFinishReason ActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "SetEnableMovementInput");

	Params::BPI_CharacterLocomotion_C_SetEnableMovementInput Parms{};

	Parms.IsEnable = IsEnable;
	Parms.ChangeJumpToFly = ChangeJumpToFly;
	Parms.ActionFinishReason = ActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetHeightAxisValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HeightAxisValue                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::SetHeightAxisValue(double HeightAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "SetHeightAxisValue");

	Params::BPI_CharacterLocomotion_C_SetHeightAxisValue Parms{};

	Parms.HeightAxisValue = HeightAxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetInputVector
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InputVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::SetInputVector(const struct FVector2D& InputVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "SetInputVector");

	Params::BPI_CharacterLocomotion_C_SetInputVector Parms{};

	Parms.InputVector = std::move(InputVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.SetMovingRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         MovingRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharacterLocomotion_C::SetMovingRotation(const struct FRotator& MovingRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "SetMovingRotation");

	Params::BPI_CharacterLocomotion_C_SetMovingRotation Parms{};

	Parms.MovingRotation = std::move(MovingRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterLocomotion.BPI_CharacterLocomotion_C.GetLocomotionParameterForCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// double                                  XYSpeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockOn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratDragonDashState                   DragonDashStatus                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterLocomotion_C::GetLocomotionParameterForCamera(double* XYSpeed, bool* IsLockOn, EKoratDragonDashState* DragonDashStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharacterLocomotion_C", "GetLocomotionParameterForCamera");

	Params::BPI_CharacterLocomotion_C_GetLocomotionParameterForCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (XYSpeed != nullptr)
		*XYSpeed = Parms.XYSpeed;

	if (IsLockOn != nullptr)
		*IsLockOn = Parms.IsLockOn;

	if (DragonDashStatus != nullptr)
		*DragonDashStatus = Parms.DragonDashStatus;
}

}

