#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubNumbReaction

#include "Basic.hpp"

#include "BP_CharacterLocomotionSubBase_classes.hpp"
#include "ECharacterNumbReactionState_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubNumbReaction.BP_CharacterLocomotionSubNumbReaction_C
// 0x0008 (0x0068 - 0x0060)
class UBP_CharacterLocomotionSubNumbReaction_C final : public UBP_CharacterLocomotionSubBase_C
{
public:
	ECharacterNumbReactionState                   NumbReactionStatus;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NumbReactionIsFront;                               // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckNumbReactionEnd(bool* IsEnd);
	void CheckToState(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterNumbReactionState InStartStatus, bool* CanStart);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void IsEnableAction(bool* IsEnable);
	void SetNumbReactionStatus(ECharacterNumbReactionState InNumbReactionStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartToState(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterNumbReactionState InStartStatus, bool InIsFront);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubNumbReaction_C">();
	}
	static class UBP_CharacterLocomotionSubNumbReaction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubNumbReaction_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubNumbReaction_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubNumbReaction_C");
static_assert(sizeof(UBP_CharacterLocomotionSubNumbReaction_C) == 0x000068, "Wrong size on UBP_CharacterLocomotionSubNumbReaction_C");
static_assert(offsetof(UBP_CharacterLocomotionSubNumbReaction_C, NumbReactionStatus) == 0x000060, "Member 'UBP_CharacterLocomotionSubNumbReaction_C::NumbReactionStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubNumbReaction_C, NumbReactionIsFront) == 0x000061, "Member 'UBP_CharacterLocomotionSubNumbReaction_C::NumbReactionIsFront' has a wrong offset!");

}

