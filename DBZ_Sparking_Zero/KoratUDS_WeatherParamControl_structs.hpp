#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratUDS_WeatherParamControl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KoratUDS_WeatherParamControl.EKoratUltraDynamicSkyNative
// NumValues: 0x0006
enum class EKoratUltraDynamicSkyNative : uint8
{
	Normal                                   = 0,
	CloudType1                               = 1,
	CloudType2                               = 2,
	ThunderCloud                             = 3,
	Num                                      = 4,
	EKoratUltraDynamicSkyNative_MAX          = 5,
};

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_BasicControls
// 0x0020 (0x0020 - 0x0000)
struct FUltraDynamicSkyParam_BasicControls final
{
public:
	double                                        CloudCoverage;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OverallIntensity;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Saturation;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Contrast;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_BasicControls) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_BasicControls");
static_assert(sizeof(FUltraDynamicSkyParam_BasicControls) == 0x000020, "Wrong size on FUltraDynamicSkyParam_BasicControls");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls, CloudCoverage) == 0x000000, "Member 'FUltraDynamicSkyParam_BasicControls::CloudCoverage' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls, OverallIntensity) == 0x000008, "Member 'FUltraDynamicSkyParam_BasicControls::OverallIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls, Saturation) == 0x000010, "Member 'FUltraDynamicSkyParam_BasicControls::Saturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls, Contrast) == 0x000018, "Member 'FUltraDynamicSkyParam_BasicControls::Contrast' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_BasicControls_Curve
// 0x0020 (0x0020 - 0x0000)
struct FUltraDynamicSkyParam_BasicControls_Curve final
{
public:
	class UCurveFloat*                            CloudCoverage;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OverallIntensity;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Saturation;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Contrast;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_BasicControls_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_BasicControls_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_BasicControls_Curve) == 0x000020, "Wrong size on FUltraDynamicSkyParam_BasicControls_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls_Curve, CloudCoverage) == 0x000000, "Member 'FUltraDynamicSkyParam_BasicControls_Curve::CloudCoverage' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls_Curve, OverallIntensity) == 0x000008, "Member 'FUltraDynamicSkyParam_BasicControls_Curve::OverallIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls_Curve, Saturation) == 0x000010, "Member 'FUltraDynamicSkyParam_BasicControls_Curve::Saturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_BasicControls_Curve, Contrast) == 0x000018, "Member 'FUltraDynamicSkyParam_BasicControls_Curve::Contrast' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_2D_DynamicClouds
// 0x00C0 (0x00C0 - 0x0000)
struct FUltraDynamicSkyParam_2D_DynamicClouds final
{
public:
	double                                        SoftenCloudLayer1;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SoftenCloudLayer2;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SharpenOuterEdge;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTilingLayer1;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTilingLayer2;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SoftenHorizon;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneCloudLayer;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CloudHeightLayer1;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudHeightLayer2;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlingTexture;                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunShaderIntensity;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DirectionalLightingIntensity;                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunHighlightRadius;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudOpacity;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HorizonDensityMultiplier;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ZenithDensityMultiplier;                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatitudeGradientPosition;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatitudeGradientWidth;                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundSunDensityMultiplier;                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundSunDensityExponent;                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundMoonDensityMultiplier;                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AroundMoonDensityExponent;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlContrastOrigin;                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastSwirlContrastScale;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_2D_DynamicClouds) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_2D_DynamicClouds");
static_assert(sizeof(FUltraDynamicSkyParam_2D_DynamicClouds) == 0x0000C0, "Wrong size on FUltraDynamicSkyParam_2D_DynamicClouds");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SoftenCloudLayer1) == 0x000000, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SoftenCloudLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SoftenCloudLayer2) == 0x000008, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SoftenCloudLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SharpenOuterEdge) == 0x000010, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SharpenOuterEdge' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, CloudTilingLayer1) == 0x000018, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::CloudTilingLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, CloudTilingLayer2) == 0x000020, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::CloudTilingLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SoftenHorizon) == 0x000028, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SoftenHorizon' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, bOneCloudLayer) == 0x000030, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::bOneCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, CloudHeightLayer1) == 0x000038, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::CloudHeightLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, CloudHeightLayer2) == 0x000040, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::CloudHeightLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, OvercastSwirlingTexture) == 0x000048, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::OvercastSwirlingTexture' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SunShaderIntensity) == 0x000050, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SunShaderIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, DirectionalLightingIntensity) == 0x000058, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::DirectionalLightingIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, SunHighlightRadius) == 0x000060, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::SunHighlightRadius' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, CloudOpacity) == 0x000068, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::CloudOpacity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, HorizonDensityMultiplier) == 0x000070, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::HorizonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, ZenithDensityMultiplier) == 0x000078, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::ZenithDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, LatitudeGradientPosition) == 0x000080, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::LatitudeGradientPosition' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, LatitudeGradientWidth) == 0x000088, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::LatitudeGradientWidth' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, AroundSunDensityMultiplier) == 0x000090, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::AroundSunDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, AroundSunDensityExponent) == 0x000098, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::AroundSunDensityExponent' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, AroundMoonDensityMultiplier) == 0x0000A0, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::AroundMoonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, AroundMoonDensityExponent) == 0x0000A8, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::AroundMoonDensityExponent' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, OvercastSwirlContrastOrigin) == 0x0000B0, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::OvercastSwirlContrastOrigin' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds, OvercastSwirlContrastScale) == 0x0000B8, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds::OvercastSwirlContrastScale' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_2D_DynamicClouds_Curve
// 0x00C0 (0x00C0 - 0x0000)
struct FUltraDynamicSkyParam_2D_DynamicClouds_Curve final
{
public:
	class UCurveFloat*                            SoftenCloudLayer1;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SoftenCloudLayer2;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SharpenOuterEdge;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTilingLayer1;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTilingLayer2;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SoftenHorizon;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OneCloudLayer;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudHeightLayer1;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudHeightLayer2;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastSwirlingTexture;                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunShaderIntensity;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DirectionalLightingIntensity;                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunHighlightRadius;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudOpacity;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HorizonDensityMultiplier;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ZenithDensityMultiplier;                           // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LatitudeGradientPosition;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LatitudeGradientWidth;                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AroundSunDensityMultiplier;                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AroundSunDensityExponent;                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AroundMoonDensityMultiplier;                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AroundMoonDensityExponent;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastSwirlContrastOrigin;                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastSwirlContrastScale;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_2D_DynamicClouds_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve) == 0x0000C0, "Wrong size on FUltraDynamicSkyParam_2D_DynamicClouds_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SoftenCloudLayer1) == 0x000000, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SoftenCloudLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SoftenCloudLayer2) == 0x000008, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SoftenCloudLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SharpenOuterEdge) == 0x000010, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SharpenOuterEdge' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, CloudTilingLayer1) == 0x000018, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::CloudTilingLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, CloudTilingLayer2) == 0x000020, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::CloudTilingLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SoftenHorizon) == 0x000028, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SoftenHorizon' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, OneCloudLayer) == 0x000030, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::OneCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, CloudHeightLayer1) == 0x000038, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::CloudHeightLayer1' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, CloudHeightLayer2) == 0x000040, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::CloudHeightLayer2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, OvercastSwirlingTexture) == 0x000048, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::OvercastSwirlingTexture' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SunShaderIntensity) == 0x000050, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SunShaderIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, DirectionalLightingIntensity) == 0x000058, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::DirectionalLightingIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, SunHighlightRadius) == 0x000060, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::SunHighlightRadius' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, CloudOpacity) == 0x000068, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::CloudOpacity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, HorizonDensityMultiplier) == 0x000070, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::HorizonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, ZenithDensityMultiplier) == 0x000078, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::ZenithDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, LatitudeGradientPosition) == 0x000080, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::LatitudeGradientPosition' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, LatitudeGradientWidth) == 0x000088, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::LatitudeGradientWidth' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, AroundSunDensityMultiplier) == 0x000090, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::AroundSunDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, AroundSunDensityExponent) == 0x000098, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::AroundSunDensityExponent' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, AroundMoonDensityMultiplier) == 0x0000A0, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::AroundMoonDensityMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, AroundMoonDensityExponent) == 0x0000A8, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::AroundMoonDensityExponent' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, OvercastSwirlContrastOrigin) == 0x0000B0, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::OvercastSwirlContrastOrigin' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_2D_DynamicClouds_Curve, OvercastSwirlContrastScale) == 0x0000B8, "Member 'FUltraDynamicSkyParam_2D_DynamicClouds_Curve::OvercastSwirlContrastScale' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CloudVortex
// 0x0048 (0x0048 - 0x0000)
struct FUltraDynamicSkyParam_CloudVortex final
{
public:
	struct FVector2D                              CloudWholeRotationCenter;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudWholeRotationSpeed;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudVortexCenter;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexRotationSpeed;                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexTimeBase;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexTimePeriod;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudVortexAttenuationLUTScale;                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CloudVortex) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CloudVortex");
static_assert(sizeof(FUltraDynamicSkyParam_CloudVortex) == 0x000048, "Wrong size on FUltraDynamicSkyParam_CloudVortex");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudWholeRotationCenter) == 0x000000, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudWholeRotationCenter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudWholeRotationSpeed) == 0x000010, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudWholeRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudVortexCenter) == 0x000018, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudVortexCenter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudVortexRotationSpeed) == 0x000028, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudVortexRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudVortexTimeBase) == 0x000030, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudVortexTimeBase' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudVortexTimePeriod) == 0x000038, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudVortexTimePeriod' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex, CloudVortexAttenuationLUTScale) == 0x000040, "Member 'FUltraDynamicSkyParam_CloudVortex::CloudVortexAttenuationLUTScale' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CloudVortex_Curve
// 0x0038 (0x0038 - 0x0000)
struct FUltraDynamicSkyParam_CloudVortex_Curve final
{
public:
	class UCurveFloat*                            CloudWholeRotationCenter;                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudWholeRotationSpeed;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudVortexCenter;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudVortexRotationSpeed;                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudVortexTimeBase;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudVortexTimePeriod;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudVortexAttenuationLUTScale;                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CloudVortex_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CloudVortex_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_CloudVortex_Curve) == 0x000038, "Wrong size on FUltraDynamicSkyParam_CloudVortex_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudWholeRotationCenter) == 0x000000, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudWholeRotationCenter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudWholeRotationSpeed) == 0x000008, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudWholeRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudVortexCenter) == 0x000010, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudVortexCenter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudVortexRotationSpeed) == 0x000018, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudVortexRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudVortexTimeBase) == 0x000020, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudVortexTimeBase' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudVortexTimePeriod) == 0x000028, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudVortexTimePeriod' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CloudVortex_Curve, CloudVortexAttenuationLUTScale) == 0x000030, "Member 'FUltraDynamicSkyParam_CloudVortex_Curve::CloudVortexAttenuationLUTScale' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CloudWisps
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_CloudWisps final
{
public:
	double                                        CloudWispsColorIntensity;                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CloudWisps) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CloudWisps");
static_assert(sizeof(FUltraDynamicSkyParam_CloudWisps) == 0x000008, "Wrong size on FUltraDynamicSkyParam_CloudWisps");
static_assert(offsetof(FUltraDynamicSkyParam_CloudWisps, CloudWispsColorIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_CloudWisps::CloudWispsColorIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CloudWisps_Curve
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_CloudWisps_Curve final
{
public:
	class UCurveFloat*                            CloudWispsColorIntensity;                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CloudWisps_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CloudWisps_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_CloudWisps_Curve) == 0x000008, "Wrong size on FUltraDynamicSkyParam_CloudWisps_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_CloudWisps_Curve, CloudWispsColorIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_CloudWisps_Curve::CloudWispsColorIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CustomCloudShadow
// 0x0048 (0x0048 - 0x0000)
struct FUltraDynamicSkyParam_CustomCloudShadow final
{
public:
	double                                        CustomCloudShadowSpeed;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDirection;                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDetail1Strength;                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowDetail2Strength;                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowContrast;                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowRangeRadius;                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowRangeDensity;                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowHorizontalSpeed;                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CustomCloudShadowOverallBrightness;                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CustomCloudShadow) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CustomCloudShadow");
static_assert(sizeof(FUltraDynamicSkyParam_CustomCloudShadow) == 0x000048, "Wrong size on FUltraDynamicSkyParam_CustomCloudShadow");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowSpeed) == 0x000000, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowDirection) == 0x000008, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowDirection' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowDetail1Strength) == 0x000010, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowDetail1Strength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowDetail2Strength) == 0x000018, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowDetail2Strength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowContrast) == 0x000020, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowContrast' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowRangeRadius) == 0x000028, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowRangeRadius' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowRangeDensity) == 0x000030, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowRangeDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowHorizontalSpeed) == 0x000038, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow, CustomCloudShadowOverallBrightness) == 0x000040, "Member 'FUltraDynamicSkyParam_CustomCloudShadow::CustomCloudShadowOverallBrightness' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CustomCloudShadow_Curve
// 0x0048 (0x0048 - 0x0000)
struct FUltraDynamicSkyParam_CustomCloudShadow_Curve final
{
public:
	class UCurveFloat*                            CustomCloudShadowSpeed;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowDirection;                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowDetail1Strength;                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowDetail2Strength;                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowContrast;                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowRangeRadius;                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowRangeDensity;                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowHorizontalSpeed;                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomCloudShadowOverallBrightness;                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CustomCloudShadow_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CustomCloudShadow_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_CustomCloudShadow_Curve) == 0x000048, "Wrong size on FUltraDynamicSkyParam_CustomCloudShadow_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowSpeed) == 0x000000, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowDirection) == 0x000008, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowDirection' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowDetail1Strength) == 0x000010, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowDetail1Strength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowDetail2Strength) == 0x000018, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowDetail2Strength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowContrast) == 0x000020, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowContrast' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowRangeRadius) == 0x000028, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowRangeRadius' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowRangeDensity) == 0x000030, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowRangeDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowHorizontalSpeed) == 0x000038, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomCloudShadow_Curve, CustomCloudShadowOverallBrightness) == 0x000040, "Member 'FUltraDynamicSkyParam_CustomCloudShadow_Curve::CustomCloudShadowOverallBrightness' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CustomVolumetricCloudsParameter
// 0x0080 (0x0080 - 0x0000)
struct FUltraDynamicSkyParam_CustomVolumetricCloudsParameter final
{
public:
	struct FLinearColor                           TopCloudColor_Near;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MiddleCloudColor_Near;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomCloud_Near;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopCloudColor_Far;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MiddleCloudColor_Far;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomCloudColor_Far;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudHight;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudContrast;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceCloudColor;                                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceCloudContrast;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CustomVolumetricCloudsParameter");
static_assert(sizeof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter) == 0x000080, "Wrong size on FUltraDynamicSkyParam_CustomVolumetricCloudsParameter");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, TopCloudColor_Near) == 0x000000, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::TopCloudColor_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, MiddleCloudColor_Near) == 0x000010, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::MiddleCloudColor_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, BottomCloud_Near) == 0x000020, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::BottomCloud_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, TopCloudColor_Far) == 0x000030, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::TopCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, MiddleCloudColor_Far) == 0x000040, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::MiddleCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, BottomCloudColor_Far) == 0x000050, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::BottomCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, CloudHight) == 0x000060, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::CloudHight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, CloudContrast) == 0x000068, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::CloudContrast' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, DistanceCloudColor) == 0x000070, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::DistanceCloudColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter, DistanceCloudContrast) == 0x000078, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter::DistanceCloudContrast' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve
// 0x0050 (0x0050 - 0x0000)
struct FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve final
{
public:
	class UCurveFloat*                            TopCloudColor_Near;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MiddleCloudColor_Near;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BottomCloud_Near;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TopCloudColor_Far;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MiddleCloudColor_Far;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BottomCloudColor_Far;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudHight;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudContrast;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceCloudColor;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceCloudContrast;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve) == 0x000050, "Wrong size on FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, TopCloudColor_Near) == 0x000000, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::TopCloudColor_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, MiddleCloudColor_Near) == 0x000008, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::MiddleCloudColor_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, BottomCloud_Near) == 0x000010, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::BottomCloud_Near' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, TopCloudColor_Far) == 0x000018, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::TopCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, MiddleCloudColor_Far) == 0x000020, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::MiddleCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, BottomCloudColor_Far) == 0x000028, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::BottomCloudColor_Far' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, CloudHight) == 0x000030, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::CloudHight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, CloudContrast) == 0x000038, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::CloudContrast' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, DistanceCloudColor) == 0x000040, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::DistanceCloudColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve, DistanceCloudContrast) == 0x000048, "Member 'FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve::DistanceCloudContrast' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Dust
// 0x0018 (0x0018 - 0x0000)
struct FUltraDynamicSkyParam_Dust final
{
public:
	double                                        DustAmount;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DustColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Dust) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Dust");
static_assert(sizeof(FUltraDynamicSkyParam_Dust) == 0x000018, "Wrong size on FUltraDynamicSkyParam_Dust");
static_assert(offsetof(FUltraDynamicSkyParam_Dust, DustAmount) == 0x000000, "Member 'FUltraDynamicSkyParam_Dust::DustAmount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Dust, DustColor) == 0x000008, "Member 'FUltraDynamicSkyParam_Dust::DustColor' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Dust_Curve
// 0x0010 (0x0010 - 0x0000)
struct FUltraDynamicSkyParam_Dust_Curve final
{
public:
	class UCurveFloat*                            DustAmount;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DustColor;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Dust_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Dust_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_Dust_Curve) == 0x000010, "Wrong size on FUltraDynamicSkyParam_Dust_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_Dust_Curve, DustAmount) == 0x000000, "Member 'FUltraDynamicSkyParam_Dust_Curve::DustAmount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Dust_Curve, DustColor) == 0x000008, "Member 'FUltraDynamicSkyParam_Dust_Curve::DustColor' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_FogColor
// 0x0070 (0x0070 - 0x0000)
struct FUltraDynamicSkyParam_FogColor final
{
public:
	double                                        FogColorIntensityScale;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringSun;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringMoon;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogDirectionalInscattering;                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyDesaturation;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastDesaturation;                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastBrightnessDay;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastBrightnessNight;                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AllFogColorsMultiplier;                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVolumetricFog;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUltraDynamicSkyParam_FogColor) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_FogColor");
static_assert(sizeof(FUltraDynamicSkyParam_FogColor) == 0x000070, "Wrong size on FUltraDynamicSkyParam_FogColor");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, FogColorIntensityScale) == 0x000000, "Member 'FUltraDynamicSkyParam_FogColor::FogColorIntensityScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, FogInscatteringSun) == 0x000008, "Member 'FUltraDynamicSkyParam_FogColor::FogInscatteringSun' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, FogInscatteringMoon) == 0x000018, "Member 'FUltraDynamicSkyParam_FogColor::FogInscatteringMoon' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, FogDirectionalInscattering) == 0x000028, "Member 'FUltraDynamicSkyParam_FogColor::FogDirectionalInscattering' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, FoggyDesaturation) == 0x000038, "Member 'FUltraDynamicSkyParam_FogColor::FoggyDesaturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, OvercastDesaturation) == 0x000040, "Member 'FUltraDynamicSkyParam_FogColor::OvercastDesaturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, OvercastBrightnessDay) == 0x000048, "Member 'FUltraDynamicSkyParam_FogColor::OvercastBrightnessDay' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, OvercastBrightnessNight) == 0x000050, "Member 'FUltraDynamicSkyParam_FogColor::OvercastBrightnessNight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, AllFogColorsMultiplier) == 0x000058, "Member 'FUltraDynamicSkyParam_FogColor::AllFogColorsMultiplier' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor, bUseVolumetricFog) == 0x000068, "Member 'FUltraDynamicSkyParam_FogColor::bUseVolumetricFog' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_FogColor_Curve
// 0x0048 (0x0048 - 0x0000)
struct FUltraDynamicSkyParam_FogColor_Curve final
{
public:
	class UCurveFloat*                            FogColorIntensityScale;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogInscatteringSun;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogInscatteringMoon;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogDirectionalInscattering;                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FoggyDesaturation;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastDesaturation;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastBrightnessDay;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastBrightnessNight;                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AllFogColorsMultiplier;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_FogColor_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_FogColor_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_FogColor_Curve) == 0x000048, "Wrong size on FUltraDynamicSkyParam_FogColor_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, FogColorIntensityScale) == 0x000000, "Member 'FUltraDynamicSkyParam_FogColor_Curve::FogColorIntensityScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, FogInscatteringSun) == 0x000008, "Member 'FUltraDynamicSkyParam_FogColor_Curve::FogInscatteringSun' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, FogInscatteringMoon) == 0x000010, "Member 'FUltraDynamicSkyParam_FogColor_Curve::FogInscatteringMoon' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, FogDirectionalInscattering) == 0x000018, "Member 'FUltraDynamicSkyParam_FogColor_Curve::FogDirectionalInscattering' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, FoggyDesaturation) == 0x000020, "Member 'FUltraDynamicSkyParam_FogColor_Curve::FoggyDesaturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, OvercastDesaturation) == 0x000028, "Member 'FUltraDynamicSkyParam_FogColor_Curve::OvercastDesaturation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, OvercastBrightnessDay) == 0x000030, "Member 'FUltraDynamicSkyParam_FogColor_Curve::OvercastBrightnessDay' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, OvercastBrightnessNight) == 0x000038, "Member 'FUltraDynamicSkyParam_FogColor_Curve::OvercastBrightnessNight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogColor_Curve, AllFogColorsMultiplier) == 0x000040, "Member 'FUltraDynamicSkyParam_FogColor_Curve::AllFogColorsMultiplier' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_FogDensity
// 0x0058 (0x0058 - 0x0000)
struct FUltraDynamicSkyParam_FogDensity final
{
public:
	double                                        BaseFogDensity;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyDensityContribution;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudyDensityContribution;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DustDensityContribution;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ScaleTotalFogDensity;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogStartDistanceWhenClear;                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FogDensityWhereStartDistanceReachesZero;           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseHeightFogFalloff;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudyHeightFogFalloff;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FoggyHeightFogFalloff;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DustyHeightFogFalloff;                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_FogDensity) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_FogDensity");
static_assert(sizeof(FUltraDynamicSkyParam_FogDensity) == 0x000058, "Wrong size on FUltraDynamicSkyParam_FogDensity");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, BaseFogDensity) == 0x000000, "Member 'FUltraDynamicSkyParam_FogDensity::BaseFogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, FoggyDensityContribution) == 0x000008, "Member 'FUltraDynamicSkyParam_FogDensity::FoggyDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, CloudyDensityContribution) == 0x000010, "Member 'FUltraDynamicSkyParam_FogDensity::CloudyDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, DustDensityContribution) == 0x000018, "Member 'FUltraDynamicSkyParam_FogDensity::DustDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, ScaleTotalFogDensity) == 0x000020, "Member 'FUltraDynamicSkyParam_FogDensity::ScaleTotalFogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, FogStartDistanceWhenClear) == 0x000028, "Member 'FUltraDynamicSkyParam_FogDensity::FogStartDistanceWhenClear' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, FogDensityWhereStartDistanceReachesZero) == 0x000030, "Member 'FUltraDynamicSkyParam_FogDensity::FogDensityWhereStartDistanceReachesZero' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, BaseHeightFogFalloff) == 0x000038, "Member 'FUltraDynamicSkyParam_FogDensity::BaseHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, CloudyHeightFogFalloff) == 0x000040, "Member 'FUltraDynamicSkyParam_FogDensity::CloudyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, FoggyHeightFogFalloff) == 0x000048, "Member 'FUltraDynamicSkyParam_FogDensity::FoggyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity, DustyHeightFogFalloff) == 0x000050, "Member 'FUltraDynamicSkyParam_FogDensity::DustyHeightFogFalloff' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_FogDensity_Curve
// 0x0058 (0x0058 - 0x0000)
struct FUltraDynamicSkyParam_FogDensity_Curve final
{
public:
	class UCurveFloat*                            BaseFogDensity;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FoggyDensityContribution;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudyDensityContribution;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DustDensityContribution;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ScaleTotalFogDensity;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogStartDistanceWhenClear;                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FogDensityWhereStartDistanceReachesZero;           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BaseHeightFogFalloff;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudyHeightFogFalloff;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FoggyHeightFogFalloff;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DustyHeightFogFalloff;                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_FogDensity_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_FogDensity_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_FogDensity_Curve) == 0x000058, "Wrong size on FUltraDynamicSkyParam_FogDensity_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, BaseFogDensity) == 0x000000, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::BaseFogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, FoggyDensityContribution) == 0x000008, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::FoggyDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, CloudyDensityContribution) == 0x000010, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::CloudyDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, DustDensityContribution) == 0x000018, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::DustDensityContribution' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, ScaleTotalFogDensity) == 0x000020, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::ScaleTotalFogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, FogStartDistanceWhenClear) == 0x000028, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::FogStartDistanceWhenClear' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, FogDensityWhereStartDistanceReachesZero) == 0x000030, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::FogDensityWhereStartDistanceReachesZero' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, BaseHeightFogFalloff) == 0x000038, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::BaseHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, CloudyHeightFogFalloff) == 0x000040, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::CloudyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, FoggyHeightFogFalloff) == 0x000048, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::FoggyHeightFogFalloff' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_FogDensity_Curve, DustyHeightFogFalloff) == 0x000050, "Member 'FUltraDynamicSkyParam_FogDensity_Curve::DustyHeightFogFalloff' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_LightShafts
// 0x0050 (0x0050 - 0x0000)
struct FUltraDynamicSkyParam_LightShafts final
{
public:
	bool                                          bEnableSunLightShaftBloom;                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunLightShaftMaxBrightness;                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunLightShaftTintColor;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMoonLightShaftBloom;                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoonLightShaftMaxBrightness;                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonLightShaftBloomThreshold;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MoonLightShaftBloomScale;                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightShaftTintColor;                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_LightShafts) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_LightShafts");
static_assert(sizeof(FUltraDynamicSkyParam_LightShafts) == 0x000050, "Wrong size on FUltraDynamicSkyParam_LightShafts");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, bEnableSunLightShaftBloom) == 0x000000, "Member 'FUltraDynamicSkyParam_LightShafts::bEnableSunLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, SunLightShaftMaxBrightness) == 0x000008, "Member 'FUltraDynamicSkyParam_LightShafts::SunLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, SunLightShaftTintColor) == 0x000010, "Member 'FUltraDynamicSkyParam_LightShafts::SunLightShaftTintColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, bEnableMoonLightShaftBloom) == 0x000020, "Member 'FUltraDynamicSkyParam_LightShafts::bEnableMoonLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, MoonLightShaftMaxBrightness) == 0x000028, "Member 'FUltraDynamicSkyParam_LightShafts::MoonLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, MoonLightShaftBloomThreshold) == 0x000030, "Member 'FUltraDynamicSkyParam_LightShafts::MoonLightShaftBloomThreshold' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, MoonLightShaftBloomScale) == 0x000038, "Member 'FUltraDynamicSkyParam_LightShafts::MoonLightShaftBloomScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts, MoonLightShaftTintColor) == 0x000040, "Member 'FUltraDynamicSkyParam_LightShafts::MoonLightShaftTintColor' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_LightShafts_Curve
// 0x0030 (0x0030 - 0x0000)
struct FUltraDynamicSkyParam_LightShafts_Curve final
{
public:
	class UCurveFloat*                            SunLightShaftMaxBrightness;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunLightShaftTintColor;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MoonLightShaftMaxBrightness;                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MoonLightShaftBloomThreshold;                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MoonLightShaftBloomScale;                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MoonLightShaftTintColor;                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_LightShafts_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_LightShafts_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_LightShafts_Curve) == 0x000030, "Wrong size on FUltraDynamicSkyParam_LightShafts_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, SunLightShaftMaxBrightness) == 0x000000, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::SunLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, SunLightShaftTintColor) == 0x000008, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::SunLightShaftTintColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, MoonLightShaftMaxBrightness) == 0x000010, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::MoonLightShaftMaxBrightness' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, MoonLightShaftBloomThreshold) == 0x000018, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::MoonLightShaftBloomThreshold' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, MoonLightShaftBloomScale) == 0x000020, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::MoonLightShaftBloomScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_LightShafts_Curve, MoonLightShaftTintColor) == 0x000028, "Member 'FUltraDynamicSkyParam_LightShafts_Curve::MoonLightShaftTintColor' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Map000_Cloud
// 0x0088 (0x0088 - 0x0000)
struct FUltraDynamicSkyParam_Map000_Cloud final
{
public:
	double                                        Map000_Cloud_Ratio;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarRotationSpeed;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarIntensity;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarMaskIntensity;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudFarTransparency;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearRotationSpeed;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearIntensity;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearMaskIntensity;                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudNearTransparency;                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinRotationSpeed;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinIntensity;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinMaskIntensity;                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudThinTransparency;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopRotationSpeed;                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopIntensity;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopMaskIntensity;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudTopTransparency;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Map000_Cloud) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Map000_Cloud");
static_assert(sizeof(FUltraDynamicSkyParam_Map000_Cloud) == 0x000088, "Wrong size on FUltraDynamicSkyParam_Map000_Cloud");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, Map000_Cloud_Ratio) == 0x000000, "Member 'FUltraDynamicSkyParam_Map000_Cloud::Map000_Cloud_Ratio' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudFarRotationSpeed) == 0x000008, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudFarRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudFarIntensity) == 0x000010, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudFarIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudFarMaskIntensity) == 0x000018, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudFarMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudFarTransparency) == 0x000020, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudFarTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudNearRotationSpeed) == 0x000028, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudNearRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudNearIntensity) == 0x000030, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudNearIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudNearMaskIntensity) == 0x000038, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudNearMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudNearTransparency) == 0x000040, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudNearTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudThinRotationSpeed) == 0x000048, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudThinRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudThinIntensity) == 0x000050, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudThinIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudThinMaskIntensity) == 0x000058, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudThinMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudThinTransparency) == 0x000060, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudThinTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudTopRotationSpeed) == 0x000068, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudTopRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudTopIntensity) == 0x000070, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudTopIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudTopMaskIntensity) == 0x000078, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudTopMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud, CloudTopTransparency) == 0x000080, "Member 'FUltraDynamicSkyParam_Map000_Cloud::CloudTopTransparency' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Map000_Cloud_Curve
// 0x0088 (0x0088 - 0x0000)
struct FUltraDynamicSkyParam_Map000_Cloud_Curve final
{
public:
	class UCurveFloat*                            Map000_Cloud_Ratio;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudFarRotationSpeed;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudFarIntensity;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudFarMaskIntensity;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudFarTransparency;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudNearRotationSpeed;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudNearIntensity;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudNearMaskIntensity;                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudNearTransparency;                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudThinRotationSpeed;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudThinIntensity;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudThinMaskIntensity;                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudThinTransparency;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTopRotationSpeed;                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTopIntensity;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTopMaskIntensity;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudTopTransparency;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Map000_Cloud_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Map000_Cloud_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_Map000_Cloud_Curve) == 0x000088, "Wrong size on FUltraDynamicSkyParam_Map000_Cloud_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, Map000_Cloud_Ratio) == 0x000000, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::Map000_Cloud_Ratio' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudFarRotationSpeed) == 0x000008, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudFarRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudFarIntensity) == 0x000010, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudFarIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudFarMaskIntensity) == 0x000018, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudFarMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudFarTransparency) == 0x000020, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudFarTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudNearRotationSpeed) == 0x000028, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudNearRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudNearIntensity) == 0x000030, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudNearIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudNearMaskIntensity) == 0x000038, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudNearMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudNearTransparency) == 0x000040, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudNearTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudThinRotationSpeed) == 0x000048, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudThinRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudThinIntensity) == 0x000050, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudThinIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudThinMaskIntensity) == 0x000058, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudThinMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudThinTransparency) == 0x000060, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudThinTransparency' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudTopRotationSpeed) == 0x000068, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudTopRotationSpeed' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudTopIntensity) == 0x000070, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudTopIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudTopMaskIntensity) == 0x000078, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudTopMaskIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Cloud_Curve, CloudTopTransparency) == 0x000080, "Member 'FUltraDynamicSkyParam_Map000_Cloud_Curve::CloudTopTransparency' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Map000_Sky
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_Map000_Sky final
{
public:
	double                                        Map000_Sky_Ratio;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Map000_Sky) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Map000_Sky");
static_assert(sizeof(FUltraDynamicSkyParam_Map000_Sky) == 0x000008, "Wrong size on FUltraDynamicSkyParam_Map000_Sky");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Sky, Map000_Sky_Ratio) == 0x000000, "Member 'FUltraDynamicSkyParam_Map000_Sky::Map000_Sky_Ratio' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Map000_Sky_Curve
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_Map000_Sky_Curve final
{
public:
	class UCurveFloat*                            Map000_Sky_Ratio;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Map000_Sky_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Map000_Sky_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_Map000_Sky_Curve) == 0x000008, "Wrong size on FUltraDynamicSkyParam_Map000_Sky_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_Map000_Sky_Curve, Map000_Sky_Ratio) == 0x000000, "Member 'FUltraDynamicSkyParam_Map000_Sky_Curve::Map000_Sky_Ratio' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_SimplifiedColor
// 0x00C8 (0x00C8 - 0x0000)
struct FUltraDynamicSkyParam_SimplifiedColor final
{
public:
	struct FLinearColor                           BaseSkyColor_Day;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseSkyColor_Dawn_Dusk;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseSkyColor_Night;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Day;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Dawn_Dusk;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor_Night;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Day;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Dawn_Dusk;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor_Night;                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunGlowColor;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudLightColor2;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDarkColor2;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloudColorDensity;                                 // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_SimplifiedColor) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_SimplifiedColor");
static_assert(sizeof(FUltraDynamicSkyParam_SimplifiedColor) == 0x0000C8, "Wrong size on FUltraDynamicSkyParam_SimplifiedColor");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, BaseSkyColor_Day) == 0x000000, "Member 'FUltraDynamicSkyParam_SimplifiedColor::BaseSkyColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, BaseSkyColor_Dawn_Dusk) == 0x000010, "Member 'FUltraDynamicSkyParam_SimplifiedColor::BaseSkyColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, BaseSkyColor_Night) == 0x000020, "Member 'FUltraDynamicSkyParam_SimplifiedColor::BaseSkyColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudLightColor_Day) == 0x000030, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudLightColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudLightColor_Dawn_Dusk) == 0x000040, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudLightColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudLightColor_Night) == 0x000050, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudLightColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudDarkColor_Day) == 0x000060, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudDarkColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudDarkColor_Dawn_Dusk) == 0x000070, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudDarkColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudDarkColor_Night) == 0x000080, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudDarkColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, SunGlowColor) == 0x000090, "Member 'FUltraDynamicSkyParam_SimplifiedColor::SunGlowColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudLightColor2) == 0x0000A0, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudLightColor2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudDarkColor2) == 0x0000B0, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudDarkColor2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor, CloudColorDensity) == 0x0000C0, "Member 'FUltraDynamicSkyParam_SimplifiedColor::CloudColorDensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_SimplifiedColor_Curve
// 0x0068 (0x0068 - 0x0000)
struct FUltraDynamicSkyParam_SimplifiedColor_Curve final
{
public:
	class UCurveFloat*                            BaseSkyColor_Day;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BaseSkyColor_Dawn_Dusk;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BaseSkyColor_Night;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudLightColor_Day;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudLightColor_Dawn_Dusk;                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudLightColor_Night;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudDarkColor_Day;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudDarkColor_Dawn_Dusk;                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudDarkColor_Night;                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunGlowColor;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudLightColor2;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudDarkColor2;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloudColorDensity;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_SimplifiedColor_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_SimplifiedColor_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_SimplifiedColor_Curve) == 0x000068, "Wrong size on FUltraDynamicSkyParam_SimplifiedColor_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, BaseSkyColor_Day) == 0x000000, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::BaseSkyColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, BaseSkyColor_Dawn_Dusk) == 0x000008, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::BaseSkyColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, BaseSkyColor_Night) == 0x000010, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::BaseSkyColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudLightColor_Day) == 0x000018, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudLightColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudLightColor_Dawn_Dusk) == 0x000020, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudLightColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudLightColor_Night) == 0x000028, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudLightColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudDarkColor_Day) == 0x000030, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudDarkColor_Day' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudDarkColor_Dawn_Dusk) == 0x000038, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudDarkColor_Dawn_Dusk' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudDarkColor_Night) == 0x000040, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudDarkColor_Night' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, SunGlowColor) == 0x000048, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::SunGlowColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudLightColor2) == 0x000050, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudLightColor2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudDarkColor2) == 0x000058, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudDarkColor2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_SimplifiedColor_Curve, CloudColorDensity) == 0x000060, "Member 'FUltraDynamicSkyParam_SimplifiedColor_Curve::CloudColorDensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_SkyLight
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_SkyLight final
{
public:
	double                                        SkyLightIntensity;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_SkyLight) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_SkyLight");
static_assert(sizeof(FUltraDynamicSkyParam_SkyLight) == 0x000008, "Wrong size on FUltraDynamicSkyParam_SkyLight");
static_assert(offsetof(FUltraDynamicSkyParam_SkyLight, SkyLightIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_SkyLight::SkyLightIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_SkyLight_Curve
// 0x0008 (0x0008 - 0x0000)
struct FUltraDynamicSkyParam_SkyLight_Curve final
{
public:
	class UCurveFloat*                            SkyLightIntensity;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_SkyLight_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_SkyLight_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_SkyLight_Curve) == 0x000008, "Wrong size on FUltraDynamicSkyParam_SkyLight_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_SkyLight_Curve, SkyLightIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_SkyLight_Curve::SkyLightIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Sun
// 0x0020 (0x0020 - 0x0000)
struct FUltraDynamicSkyParam_Sun final
{
public:
	double                                        SunLightIntensity;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunLightColor;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SunDiskIntensity;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Sun) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Sun");
static_assert(sizeof(FUltraDynamicSkyParam_Sun) == 0x000020, "Wrong size on FUltraDynamicSkyParam_Sun");
static_assert(offsetof(FUltraDynamicSkyParam_Sun, SunLightIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_Sun::SunLightIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Sun, SunLightColor) == 0x000008, "Member 'FUltraDynamicSkyParam_Sun::SunLightColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Sun, SunDiskIntensity) == 0x000018, "Member 'FUltraDynamicSkyParam_Sun::SunDiskIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_Sun_Curve
// 0x0018 (0x0018 - 0x0000)
struct FUltraDynamicSkyParam_Sun_Curve final
{
public:
	class UCurveFloat*                            SunLightIntensity;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunLightColor;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunDiskIntensity;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_Sun_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_Sun_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_Sun_Curve) == 0x000018, "Wrong size on FUltraDynamicSkyParam_Sun_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_Sun_Curve, SunLightIntensity) == 0x000000, "Member 'FUltraDynamicSkyParam_Sun_Curve::SunLightIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Sun_Curve, SunLightColor) == 0x000008, "Member 'FUltraDynamicSkyParam_Sun_Curve::SunLightColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_Sun_Curve, SunDiskIntensity) == 0x000010, "Member 'FUltraDynamicSkyParam_Sun_Curve::SunDiskIntensity' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_VolumetricClouds
// 0x0178 (0x0178 - 0x0000)
struct FUltraDynamicSkyParam_VolumetricClouds final
{
public:
	double                                        BottomAltitude;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LayerHeightScale;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseCloudsScale;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SubNoiceScale;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HighFrequencyNoiseAmount;                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtinctionScaleTop;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtinctionScaleBottom;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShiftCurve;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MinimumErosion;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ViewSampleCountScale;                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShadowSampleScale;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ShadowTracingDistance;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BaseCloudsMipLevel;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MacroVariation;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MacroScale;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VolumetricCloudScale;                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricCloudColor;                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFogInsideClouds;                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTwoLayers;                                        // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer2CoverageScale;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Layer2ExtinctionScale;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Layer2CloudScale;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Layer2MipOffset;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceBetweenLayers;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReflectionSampleCountScale;                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReflectionShadowSampleCountScale;                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringIntensity;                          // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringOcclusionFactor;                    // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SubNoiseErosion;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PhaseG;                                            // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PhaseG2;                                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MultiscatteringEccentricity;                       // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistanceToSampleMaxCount;                          // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxStartDistance;                           // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxDistance_InsideCloudLayer;               // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TracingMaxDistance_OutsideCloudLayer;              // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeToSimplifiedMaterialWhenOvercast;           // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SimplifiedMaterialCloudCoverageThreshold;          // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SimplifiedMaterialFadeLength;                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DistortHighFrequencyNoise;                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ZDisturbance;                                      // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InsideCloudFogStrength;                            // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InsideCloudFogColor;                               // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OvercastTurbulence;                                // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CloseFadeDistance;                                 // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_VolumetricClouds) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_VolumetricClouds");
static_assert(sizeof(FUltraDynamicSkyParam_VolumetricClouds) == 0x000178, "Wrong size on FUltraDynamicSkyParam_VolumetricClouds");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, BottomAltitude) == 0x000000, "Member 'FUltraDynamicSkyParam_VolumetricClouds::BottomAltitude' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, LayerHeightScale) == 0x000008, "Member 'FUltraDynamicSkyParam_VolumetricClouds::LayerHeightScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, BaseCloudsScale) == 0x000010, "Member 'FUltraDynamicSkyParam_VolumetricClouds::BaseCloudsScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, SubNoiceScale) == 0x000018, "Member 'FUltraDynamicSkyParam_VolumetricClouds::SubNoiceScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, HighFrequencyNoiseAmount) == 0x000020, "Member 'FUltraDynamicSkyParam_VolumetricClouds::HighFrequencyNoiseAmount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ExtinctionScaleTop) == 0x000028, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ExtinctionScaleTop' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ExtinctionScaleBottom) == 0x000030, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ExtinctionScaleBottom' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ShiftCurve) == 0x000038, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ShiftCurve' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MinimumErosion) == 0x000040, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MinimumErosion' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ViewSampleCountScale) == 0x000048, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ShadowSampleScale) == 0x000050, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ShadowSampleScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ShadowTracingDistance) == 0x000058, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, BaseCloudsMipLevel) == 0x000060, "Member 'FUltraDynamicSkyParam_VolumetricClouds::BaseCloudsMipLevel' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MacroVariation) == 0x000068, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MacroVariation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MacroScale) == 0x000070, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MacroScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, VolumetricCloudScale) == 0x000078, "Member 'FUltraDynamicSkyParam_VolumetricClouds::VolumetricCloudScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, VolumetricCloudColor) == 0x000080, "Member 'FUltraDynamicSkyParam_VolumetricClouds::VolumetricCloudColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, bEnableFogInsideClouds) == 0x000090, "Member 'FUltraDynamicSkyParam_VolumetricClouds::bEnableFogInsideClouds' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, bTwoLayers) == 0x000091, "Member 'FUltraDynamicSkyParam_VolumetricClouds::bTwoLayers' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, Layer2CoverageScale) == 0x000098, "Member 'FUltraDynamicSkyParam_VolumetricClouds::Layer2CoverageScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, Layer2ExtinctionScale) == 0x0000A0, "Member 'FUltraDynamicSkyParam_VolumetricClouds::Layer2ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, Layer2CloudScale) == 0x0000A8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::Layer2CloudScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, Layer2MipOffset) == 0x0000B8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::Layer2MipOffset' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, DistanceBetweenLayers) == 0x0000C0, "Member 'FUltraDynamicSkyParam_VolumetricClouds::DistanceBetweenLayers' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ReflectionSampleCountScale) == 0x0000C8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ReflectionShadowSampleCountScale) == 0x0000D0, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ReflectionShadowSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MultiscatteringIntensity) == 0x0000D8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MultiscatteringIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MultiscatteringOcclusionFactor) == 0x0000E0, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MultiscatteringOcclusionFactor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, SubNoiseErosion) == 0x0000E8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::SubNoiseErosion' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, PhaseG) == 0x0000F0, "Member 'FUltraDynamicSkyParam_VolumetricClouds::PhaseG' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, PhaseG2) == 0x0000F8, "Member 'FUltraDynamicSkyParam_VolumetricClouds::PhaseG2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, MultiscatteringEccentricity) == 0x000100, "Member 'FUltraDynamicSkyParam_VolumetricClouds::MultiscatteringEccentricity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, DistanceToSampleMaxCount) == 0x000108, "Member 'FUltraDynamicSkyParam_VolumetricClouds::DistanceToSampleMaxCount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, TracingMaxStartDistance) == 0x000110, "Member 'FUltraDynamicSkyParam_VolumetricClouds::TracingMaxStartDistance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, TracingMaxDistance_InsideCloudLayer) == 0x000118, "Member 'FUltraDynamicSkyParam_VolumetricClouds::TracingMaxDistance_InsideCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, TracingMaxDistance_OutsideCloudLayer) == 0x000120, "Member 'FUltraDynamicSkyParam_VolumetricClouds::TracingMaxDistance_OutsideCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, bChangeToSimplifiedMaterialWhenOvercast) == 0x000128, "Member 'FUltraDynamicSkyParam_VolumetricClouds::bChangeToSimplifiedMaterialWhenOvercast' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, SimplifiedMaterialCloudCoverageThreshold) == 0x000130, "Member 'FUltraDynamicSkyParam_VolumetricClouds::SimplifiedMaterialCloudCoverageThreshold' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, SimplifiedMaterialFadeLength) == 0x000138, "Member 'FUltraDynamicSkyParam_VolumetricClouds::SimplifiedMaterialFadeLength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, DistortHighFrequencyNoise) == 0x000140, "Member 'FUltraDynamicSkyParam_VolumetricClouds::DistortHighFrequencyNoise' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, ZDisturbance) == 0x000148, "Member 'FUltraDynamicSkyParam_VolumetricClouds::ZDisturbance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, InsideCloudFogStrength) == 0x000150, "Member 'FUltraDynamicSkyParam_VolumetricClouds::InsideCloudFogStrength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, InsideCloudFogColor) == 0x000158, "Member 'FUltraDynamicSkyParam_VolumetricClouds::InsideCloudFogColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, OvercastTurbulence) == 0x000168, "Member 'FUltraDynamicSkyParam_VolumetricClouds::OvercastTurbulence' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds, CloseFadeDistance) == 0x000170, "Member 'FUltraDynamicSkyParam_VolumetricClouds::CloseFadeDistance' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParam_VolumetricClouds_Curve
// 0x0150 (0x0150 - 0x0000)
struct FUltraDynamicSkyParam_VolumetricClouds_Curve final
{
public:
	class UCurveFloat*                            BottomAltitude;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LayerHeightScale;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BaseCloudsScale;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SubNoiceScale;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HighFrequencyNoiseAmount;                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ExtinctionScaleTop;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ExtinctionScaleBottom;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShiftCurve;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MinimumErosion;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ViewSampleCountScale;                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShadowSampleScale;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShadowTracingDistance;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BaseCloudsMipLevel;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MacroVariation;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MacroScale;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VolumetricCloudScale;                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VolumetricCloudColor;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Layer2CoverageScale;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Layer2ExtinctionScale;                             // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Layer2CloudScale;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Layer2MipOffset;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceBetweenLayers;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ReflectionSampleCountScale;                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ReflectionShadowSampleCountScale;                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MultiscatteringIntensity;                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MultiscatteringOcclusionFactor;                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SubNoiseErosion;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PhaseG;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PhaseG2;                                           // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MultiscatteringEccentricity;                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceToSampleMaxCount;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TracingMaxStartDistance;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TracingMaxDistance_InsideCloudLayer;               // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TracingMaxDistance_OutsideCloudLayer;              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SimplifiedMaterialCloudCoverageThreshold;          // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SimplifiedMaterialFadeLength;                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistortHighFrequencyNoise;                         // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ZDisturbance;                                      // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InsideCloudFogStrength;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InsideCloudFogColor;                               // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OvercastTurbulence;                                // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CloseFadeDistance;                                 // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParam_VolumetricClouds_Curve) == 0x000008, "Wrong alignment on FUltraDynamicSkyParam_VolumetricClouds_Curve");
static_assert(sizeof(FUltraDynamicSkyParam_VolumetricClouds_Curve) == 0x000150, "Wrong size on FUltraDynamicSkyParam_VolumetricClouds_Curve");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, BottomAltitude) == 0x000000, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::BottomAltitude' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, LayerHeightScale) == 0x000008, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::LayerHeightScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, BaseCloudsScale) == 0x000010, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::BaseCloudsScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, SubNoiceScale) == 0x000018, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::SubNoiceScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, HighFrequencyNoiseAmount) == 0x000020, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::HighFrequencyNoiseAmount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ExtinctionScaleTop) == 0x000028, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ExtinctionScaleTop' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ExtinctionScaleBottom) == 0x000030, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ExtinctionScaleBottom' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ShiftCurve) == 0x000038, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ShiftCurve' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MinimumErosion) == 0x000040, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MinimumErosion' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ViewSampleCountScale) == 0x000048, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ShadowSampleScale) == 0x000050, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ShadowSampleScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ShadowTracingDistance) == 0x000058, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, BaseCloudsMipLevel) == 0x000060, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::BaseCloudsMipLevel' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MacroVariation) == 0x000068, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MacroVariation' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MacroScale) == 0x000070, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MacroScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, VolumetricCloudScale) == 0x000078, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::VolumetricCloudScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, VolumetricCloudColor) == 0x000080, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::VolumetricCloudColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, Layer2CoverageScale) == 0x000088, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::Layer2CoverageScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, Layer2ExtinctionScale) == 0x000090, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::Layer2ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, Layer2CloudScale) == 0x000098, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::Layer2CloudScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, Layer2MipOffset) == 0x0000A0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::Layer2MipOffset' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, DistanceBetweenLayers) == 0x0000A8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::DistanceBetweenLayers' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ReflectionSampleCountScale) == 0x0000B0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ReflectionShadowSampleCountScale) == 0x0000B8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ReflectionShadowSampleCountScale' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MultiscatteringIntensity) == 0x0000C0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MultiscatteringIntensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MultiscatteringOcclusionFactor) == 0x0000C8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MultiscatteringOcclusionFactor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, SubNoiseErosion) == 0x0000D0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::SubNoiseErosion' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, PhaseG) == 0x0000D8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::PhaseG' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, PhaseG2) == 0x0000E0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::PhaseG2' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, MultiscatteringEccentricity) == 0x0000E8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::MultiscatteringEccentricity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, DistanceToSampleMaxCount) == 0x0000F0, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::DistanceToSampleMaxCount' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, TracingMaxStartDistance) == 0x0000F8, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::TracingMaxStartDistance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, TracingMaxDistance_InsideCloudLayer) == 0x000100, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::TracingMaxDistance_InsideCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, TracingMaxDistance_OutsideCloudLayer) == 0x000108, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::TracingMaxDistance_OutsideCloudLayer' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, SimplifiedMaterialCloudCoverageThreshold) == 0x000110, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::SimplifiedMaterialCloudCoverageThreshold' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, SimplifiedMaterialFadeLength) == 0x000118, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::SimplifiedMaterialFadeLength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, DistortHighFrequencyNoise) == 0x000120, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::DistortHighFrequencyNoise' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, ZDisturbance) == 0x000128, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::ZDisturbance' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, InsideCloudFogStrength) == 0x000130, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::InsideCloudFogStrength' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, InsideCloudFogColor) == 0x000138, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::InsideCloudFogColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, OvercastTurbulence) == 0x000140, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::OvercastTurbulence' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParam_VolumetricClouds_Curve, CloseFadeDistance) == 0x000148, "Member 'FUltraDynamicSkyParam_VolumetricClouds_Curve::CloseFadeDistance' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyParamNative
// 0x0620 (0x0620 - 0x0000)
struct FUltraDynamicSkyParamNative final
{
public:
	struct FUltraDynamicSkyParam_BasicControls    BasicControls;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_VolumetricClouds VolumetricClouds;                                  // 0x0020(0x0178)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CustomVolumetricCloudsParameter CustomVolumetricCloudsParameter;                   // 0x0198(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_FogColor         FogColor;                                          // 0x0218(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_FogDensity       FogDensity;                                        // 0x0288(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Dust             Dust;                                              // 0x02E0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_LightShafts      LightShafts;                                       // 0x02F8(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_SkyLight         SkyLight;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Sun              Sun;                                               // 0x0350(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_2D_DynamicClouds X2DDynamicClouds;                                  // 0x0370(0x00C0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_SimplifiedColor  SimplifiedColor;                                   // 0x0430(0x00C8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CloudVortex      CloudVortex;                                       // 0x04F8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Map000_Sky       Map000_Sky;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Map000_Cloud     Map000_Cloud;                                      // 0x0548(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CloudWisps       CloudWisps;                                        // 0x05D0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CustomCloudShadow CustomCloudShadow;                                 // 0x05D8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyParamNative) == 0x000008, "Wrong alignment on FUltraDynamicSkyParamNative");
static_assert(sizeof(FUltraDynamicSkyParamNative) == 0x000620, "Wrong size on FUltraDynamicSkyParamNative");
static_assert(offsetof(FUltraDynamicSkyParamNative, BasicControls) == 0x000000, "Member 'FUltraDynamicSkyParamNative::BasicControls' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, VolumetricClouds) == 0x000020, "Member 'FUltraDynamicSkyParamNative::VolumetricClouds' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, CustomVolumetricCloudsParameter) == 0x000198, "Member 'FUltraDynamicSkyParamNative::CustomVolumetricCloudsParameter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, FogColor) == 0x000218, "Member 'FUltraDynamicSkyParamNative::FogColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, FogDensity) == 0x000288, "Member 'FUltraDynamicSkyParamNative::FogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, Dust) == 0x0002E0, "Member 'FUltraDynamicSkyParamNative::Dust' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, LightShafts) == 0x0002F8, "Member 'FUltraDynamicSkyParamNative::LightShafts' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, SkyLight) == 0x000348, "Member 'FUltraDynamicSkyParamNative::SkyLight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, Sun) == 0x000350, "Member 'FUltraDynamicSkyParamNative::Sun' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, X2DDynamicClouds) == 0x000370, "Member 'FUltraDynamicSkyParamNative::X2DDynamicClouds' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, SimplifiedColor) == 0x000430, "Member 'FUltraDynamicSkyParamNative::SimplifiedColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, CloudVortex) == 0x0004F8, "Member 'FUltraDynamicSkyParamNative::CloudVortex' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, Map000_Sky) == 0x000540, "Member 'FUltraDynamicSkyParamNative::Map000_Sky' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, Map000_Cloud) == 0x000548, "Member 'FUltraDynamicSkyParamNative::Map000_Cloud' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, CloudWisps) == 0x0005D0, "Member 'FUltraDynamicSkyParamNative::CloudWisps' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyParamNative, CustomCloudShadow) == 0x0005D8, "Member 'FUltraDynamicSkyParamNative::CustomCloudShadow' has a wrong offset!");

// ScriptStruct KoratUDS_WeatherParamControl.UltraDynamicSkyCurveParamNative
// 0x0500 (0x0500 - 0x0000)
struct FUltraDynamicSkyCurveParamNative final
{
public:
	struct FUltraDynamicSkyParam_BasicControls_Curve BasicControls;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_VolumetricClouds_Curve VolumetricCloudsParam;                             // 0x0020(0x0150)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CustomVolumetricCloudsParameter_Curve CustomVolumetricCloudsParameter;                   // 0x0170(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_FogColor_Curve   FogColor;                                          // 0x01C0(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_FogDensity_Curve FogDensity;                                        // 0x0208(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Dust_Curve       Dust;                                              // 0x0260(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_LightShafts_Curve LightShafts;                                       // 0x0270(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_SkyLight_Curve   SkyLight;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Sun_Curve        Sun;                                               // 0x02A8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_2D_DynamicClouds_Curve X2DDynamicClouds;                                  // 0x02C0(0x00C0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_SimplifiedColor_Curve SimplifiedColor;                                   // 0x0380(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CloudVortex_Curve CloudVortex;                                       // 0x03E8(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Map000_Sky_Curve Map000_Sky;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_Map000_Cloud_Curve Map000_Cloud;                                      // 0x0428(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CloudWisps_Curve CloudWisps;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUltraDynamicSkyParam_CustomCloudShadow_Curve CustomCloudShadow;                                 // 0x04B8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUltraDynamicSkyCurveParamNative) == 0x000008, "Wrong alignment on FUltraDynamicSkyCurveParamNative");
static_assert(sizeof(FUltraDynamicSkyCurveParamNative) == 0x000500, "Wrong size on FUltraDynamicSkyCurveParamNative");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, BasicControls) == 0x000000, "Member 'FUltraDynamicSkyCurveParamNative::BasicControls' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, VolumetricCloudsParam) == 0x000020, "Member 'FUltraDynamicSkyCurveParamNative::VolumetricCloudsParam' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, CustomVolumetricCloudsParameter) == 0x000170, "Member 'FUltraDynamicSkyCurveParamNative::CustomVolumetricCloudsParameter' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, FogColor) == 0x0001C0, "Member 'FUltraDynamicSkyCurveParamNative::FogColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, FogDensity) == 0x000208, "Member 'FUltraDynamicSkyCurveParamNative::FogDensity' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, Dust) == 0x000260, "Member 'FUltraDynamicSkyCurveParamNative::Dust' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, LightShafts) == 0x000270, "Member 'FUltraDynamicSkyCurveParamNative::LightShafts' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, SkyLight) == 0x0002A0, "Member 'FUltraDynamicSkyCurveParamNative::SkyLight' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, Sun) == 0x0002A8, "Member 'FUltraDynamicSkyCurveParamNative::Sun' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, X2DDynamicClouds) == 0x0002C0, "Member 'FUltraDynamicSkyCurveParamNative::X2DDynamicClouds' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, SimplifiedColor) == 0x000380, "Member 'FUltraDynamicSkyCurveParamNative::SimplifiedColor' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, CloudVortex) == 0x0003E8, "Member 'FUltraDynamicSkyCurveParamNative::CloudVortex' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, Map000_Sky) == 0x000420, "Member 'FUltraDynamicSkyCurveParamNative::Map000_Sky' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, Map000_Cloud) == 0x000428, "Member 'FUltraDynamicSkyCurveParamNative::Map000_Cloud' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, CloudWisps) == 0x0004B0, "Member 'FUltraDynamicSkyCurveParamNative::CloudWisps' has a wrong offset!");
static_assert(offsetof(FUltraDynamicSkyCurveParamNative, CustomCloudShadow) == 0x0004B8, "Member 'FUltraDynamicSkyCurveParamNative::CustomCloudShadow' has a wrong offset!");

}

