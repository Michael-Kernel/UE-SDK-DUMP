#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Planet_Creator_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Planet_Creator_V2.BP_Planet_Creator_V2_C
// 0x0408 (0x0698 - 0x0290)
class ABP_Planet_Creator_V2_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Atmosphere_Simple;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Planet_Sphere;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Root;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Atmosphere_Scattering;                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Atmosphere_Simple;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Atmosphere;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Planet;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Planet_Material;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      SunLight;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        PlanetRadius;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Color;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Scattering_Enabled;                                // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AtmosphereHeight;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Opacity;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Shodow_Opacity;                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Greenhouse_Clouds;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Greenhouse_Clouds_Twist_Intensity;                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Normal_Intensity;                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Shadow_Offset;                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Earthlike_Clouds_Normal_Offset;                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Greenhouse_Clouds_Normal_Offset;                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Speed;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Sunset_Reduction;                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RayleighHeight;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RayleighPower;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Atmosphere_Steps;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Scattering_Color;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Clouds_Intensity;                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Clouds_Color;                                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Clouds_Sunset_Color;                               // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               T_Clouds;                                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Magnitude;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Seed;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Altitude;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twists_Magnitude;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twists_Seed;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twists_Intensity;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mountains_1_Altitude;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mountains_2_Altitude;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rivers_Size;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rivers_Erosion;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cracks_Size;                                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cracks_Depth;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeologicalStructures_Heigh_Impact;                 // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Color_Zone_Width;                            // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Color_Zone_Intensity;                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continent_Textures_Desaturation;                   // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zones_Randomizer;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Normal_Intensity;                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continental_Normal_Offset;                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Plains_Normal_Offset;                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeologicalStructures_Continental_Normal_Intensity; // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeologicalStructures_Plains_Normal_Intensity;      // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeologicalStructures_Normal_Offset;                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Roughness_1;                            // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Continents_Roughness_2;                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roughness_Contrast;                                // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reverse_Roughness;                                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color_Continental_1;                               // 0x0484(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Continental_2;                               // 0x0494(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Plains_1;                                    // 0x04A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Plains_2;                                    // 0x04B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Poles_1;                                     // 0x04C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Poles_2;                                     // 0x04D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               T_Continental_1;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               T_Continental_2;                                   // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               T_Plains_1;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               T_Plains_2;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FLOAT_Water_;                                      // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Water_;                                            // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sea_Level;                                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Color_Contrast;                              // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Color_Intensity;                             // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Water_1;                                     // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Water_2;                                     // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Ice_Level;                                   // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SnowLevel;                                         // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ice_Cracks_Intensity;                              // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ice_Mountains_Normal;                              // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ice_Cap_Shape;                                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Ice_1;                                       // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Ice_2;                                       // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Ice_3;                                       // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Ice_4;                                       // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FLOAT_Lava_;                                       // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lava_;                                             // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lava_Zones_Intensity;                              // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lava_Contrast;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lava_1_Intensity;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lava_2_Intensity;                                  // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Poles_Height;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CityLights_Intensity;                              // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CityLights_Continents_Reduction;                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_CityLights;                                  // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               T_GeologicalStructures;                            // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Lava_1;                                      // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Lava_2;                                      // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simple_Atmosphere_Enabled;                         // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Direct_Atmosphere_brightness;                      // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Edge_Atmosphere_brightness;                        // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Brightness;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Transition;                                  // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Atmosphere_Power;                                  // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fake_Scattering;                                   // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Simple_Atmosphere_Day_Color;                       // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Simple_Atmosphere_Night_Color;                     // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_Blueprint;                                 // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Planet_Creator_V2(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Planet_Creator_V2_C">();
	}
	static class ABP_Planet_Creator_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Planet_Creator_V2_C>();
	}
};
static_assert(alignof(ABP_Planet_Creator_V2_C) == 0x000008, "Wrong alignment on ABP_Planet_Creator_V2_C");
static_assert(sizeof(ABP_Planet_Creator_V2_C) == 0x000698, "Wrong size on ABP_Planet_Creator_V2_C");
static_assert(offsetof(ABP_Planet_Creator_V2_C, UberGraphFrame) == 0x000290, "Member 'ABP_Planet_Creator_V2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Atmosphere_Simple) == 0x000298, "Member 'ABP_Planet_Creator_V2_C::Atmosphere_Simple' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Planet_Sphere) == 0x0002A0, "Member 'ABP_Planet_Creator_V2_C::Planet_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Root) == 0x0002A8, "Member 'ABP_Planet_Creator_V2_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Atmosphere_Scattering) == 0x0002B0, "Member 'ABP_Planet_Creator_V2_C::Atmosphere_Scattering' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, DMI_Atmosphere_Simple) == 0x0002B8, "Member 'ABP_Planet_Creator_V2_C::DMI_Atmosphere_Simple' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, DMI_Atmosphere) == 0x0002C0, "Member 'ABP_Planet_Creator_V2_C::DMI_Atmosphere' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, DMI_Planet) == 0x0002C8, "Member 'ABP_Planet_Creator_V2_C::DMI_Planet' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Planet_Material) == 0x0002D0, "Member 'ABP_Planet_Creator_V2_C::Planet_Material' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, SunLight) == 0x0002D8, "Member 'ABP_Planet_Creator_V2_C::SunLight' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, PlanetRadius) == 0x0002E0, "Member 'ABP_Planet_Creator_V2_C::PlanetRadius' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Night_Color) == 0x0002E8, "Member 'ABP_Planet_Creator_V2_C::Night_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Scattering_Enabled) == 0x0002F8, "Member 'ABP_Planet_Creator_V2_C::Scattering_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, AtmosphereHeight) == 0x000300, "Member 'ABP_Planet_Creator_V2_C::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Opacity) == 0x000308, "Member 'ABP_Planet_Creator_V2_C::Clouds_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Shodow_Opacity) == 0x000310, "Member 'ABP_Planet_Creator_V2_C::Clouds_Shodow_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Greenhouse_Clouds) == 0x000318, "Member 'ABP_Planet_Creator_V2_C::Greenhouse_Clouds' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Greenhouse_Clouds_Twist_Intensity) == 0x000320, "Member 'ABP_Planet_Creator_V2_C::Greenhouse_Clouds_Twist_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Normal_Intensity) == 0x000328, "Member 'ABP_Planet_Creator_V2_C::Clouds_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Shadow_Offset) == 0x000330, "Member 'ABP_Planet_Creator_V2_C::Clouds_Shadow_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Earthlike_Clouds_Normal_Offset) == 0x000338, "Member 'ABP_Planet_Creator_V2_C::Earthlike_Clouds_Normal_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Greenhouse_Clouds_Normal_Offset) == 0x000340, "Member 'ABP_Planet_Creator_V2_C::Greenhouse_Clouds_Normal_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Speed) == 0x000348, "Member 'ABP_Planet_Creator_V2_C::Clouds_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Sunset_Reduction) == 0x000350, "Member 'ABP_Planet_Creator_V2_C::Clouds_Sunset_Reduction' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, RayleighHeight) == 0x000358, "Member 'ABP_Planet_Creator_V2_C::RayleighHeight' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, RayleighPower) == 0x000360, "Member 'ABP_Planet_Creator_V2_C::RayleighPower' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Atmosphere_Steps) == 0x000368, "Member 'ABP_Planet_Creator_V2_C::Atmosphere_Steps' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Scattering_Color) == 0x000370, "Member 'ABP_Planet_Creator_V2_C::Scattering_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Night_Clouds_Intensity) == 0x000380, "Member 'ABP_Planet_Creator_V2_C::Night_Clouds_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Color) == 0x000388, "Member 'ABP_Planet_Creator_V2_C::Clouds_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Clouds_Sunset_Color) == 0x000398, "Member 'ABP_Planet_Creator_V2_C::Clouds_Sunset_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_Clouds) == 0x0003A8, "Member 'ABP_Planet_Creator_V2_C::T_Clouds' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Magnitude) == 0x0003B0, "Member 'ABP_Planet_Creator_V2_C::Continents_Magnitude' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Seed) == 0x0003B8, "Member 'ABP_Planet_Creator_V2_C::Continents_Seed' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Altitude) == 0x0003C0, "Member 'ABP_Planet_Creator_V2_C::Continents_Altitude' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Twists_Magnitude) == 0x0003C8, "Member 'ABP_Planet_Creator_V2_C::Twists_Magnitude' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Twists_Seed) == 0x0003D0, "Member 'ABP_Planet_Creator_V2_C::Twists_Seed' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Twists_Intensity) == 0x0003D8, "Member 'ABP_Planet_Creator_V2_C::Twists_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Mountains_1_Altitude) == 0x0003E0, "Member 'ABP_Planet_Creator_V2_C::Mountains_1_Altitude' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Mountains_2_Altitude) == 0x0003E8, "Member 'ABP_Planet_Creator_V2_C::Mountains_2_Altitude' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Rivers_Size) == 0x0003F0, "Member 'ABP_Planet_Creator_V2_C::Rivers_Size' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Rivers_Erosion) == 0x0003F8, "Member 'ABP_Planet_Creator_V2_C::Rivers_Erosion' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Cracks_Size) == 0x000400, "Member 'ABP_Planet_Creator_V2_C::Cracks_Size' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Cracks_Depth) == 0x000408, "Member 'ABP_Planet_Creator_V2_C::Cracks_Depth' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, GeologicalStructures_Heigh_Impact) == 0x000410, "Member 'ABP_Planet_Creator_V2_C::GeologicalStructures_Heigh_Impact' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Poles_Color_Zone_Width) == 0x000418, "Member 'ABP_Planet_Creator_V2_C::Poles_Color_Zone_Width' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Poles_Color_Zone_Intensity) == 0x000420, "Member 'ABP_Planet_Creator_V2_C::Poles_Color_Zone_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continent_Textures_Desaturation) == 0x000428, "Member 'ABP_Planet_Creator_V2_C::Continent_Textures_Desaturation' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Zones_Randomizer) == 0x000430, "Member 'ABP_Planet_Creator_V2_C::Zones_Randomizer' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Normal_Intensity) == 0x000438, "Member 'ABP_Planet_Creator_V2_C::Continents_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continental_Normal_Offset) == 0x000440, "Member 'ABP_Planet_Creator_V2_C::Continental_Normal_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Plains_Normal_Offset) == 0x000448, "Member 'ABP_Planet_Creator_V2_C::Plains_Normal_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, GeologicalStructures_Continental_Normal_Intensity) == 0x000450, "Member 'ABP_Planet_Creator_V2_C::GeologicalStructures_Continental_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, GeologicalStructures_Plains_Normal_Intensity) == 0x000458, "Member 'ABP_Planet_Creator_V2_C::GeologicalStructures_Plains_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, GeologicalStructures_Normal_Offset) == 0x000460, "Member 'ABP_Planet_Creator_V2_C::GeologicalStructures_Normal_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Roughness_1) == 0x000468, "Member 'ABP_Planet_Creator_V2_C::Continents_Roughness_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Continents_Roughness_2) == 0x000470, "Member 'ABP_Planet_Creator_V2_C::Continents_Roughness_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Roughness_Contrast) == 0x000478, "Member 'ABP_Planet_Creator_V2_C::Roughness_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Reverse_Roughness) == 0x000480, "Member 'ABP_Planet_Creator_V2_C::Reverse_Roughness' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Continental_1) == 0x000484, "Member 'ABP_Planet_Creator_V2_C::Color_Continental_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Continental_2) == 0x000494, "Member 'ABP_Planet_Creator_V2_C::Color_Continental_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Plains_1) == 0x0004A4, "Member 'ABP_Planet_Creator_V2_C::Color_Plains_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Plains_2) == 0x0004B4, "Member 'ABP_Planet_Creator_V2_C::Color_Plains_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Poles_1) == 0x0004C4, "Member 'ABP_Planet_Creator_V2_C::Color_Poles_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Poles_2) == 0x0004D4, "Member 'ABP_Planet_Creator_V2_C::Color_Poles_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_Continental_1) == 0x0004E8, "Member 'ABP_Planet_Creator_V2_C::T_Continental_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_Continental_2) == 0x0004F0, "Member 'ABP_Planet_Creator_V2_C::T_Continental_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_Plains_1) == 0x0004F8, "Member 'ABP_Planet_Creator_V2_C::T_Plains_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_Plains_2) == 0x000500, "Member 'ABP_Planet_Creator_V2_C::T_Plains_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, FLOAT_Water_) == 0x000508, "Member 'ABP_Planet_Creator_V2_C::FLOAT_Water_' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Water_) == 0x000510, "Member 'ABP_Planet_Creator_V2_C::Water_' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Sea_Level) == 0x000518, "Member 'ABP_Planet_Creator_V2_C::Sea_Level' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Water_Color_Contrast) == 0x000520, "Member 'ABP_Planet_Creator_V2_C::Water_Color_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Water_Color_Intensity) == 0x000528, "Member 'ABP_Planet_Creator_V2_C::Water_Color_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Water_1) == 0x000530, "Member 'ABP_Planet_Creator_V2_C::Color_Water_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Water_2) == 0x000540, "Member 'ABP_Planet_Creator_V2_C::Color_Water_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Poles_Ice_Level) == 0x000550, "Member 'ABP_Planet_Creator_V2_C::Poles_Ice_Level' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, SnowLevel) == 0x000558, "Member 'ABP_Planet_Creator_V2_C::SnowLevel' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Ice_Cracks_Intensity) == 0x000560, "Member 'ABP_Planet_Creator_V2_C::Ice_Cracks_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Ice_Mountains_Normal) == 0x000568, "Member 'ABP_Planet_Creator_V2_C::Ice_Mountains_Normal' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Ice_Cap_Shape) == 0x000570, "Member 'ABP_Planet_Creator_V2_C::Ice_Cap_Shape' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Ice_1) == 0x000578, "Member 'ABP_Planet_Creator_V2_C::Color_Ice_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Ice_2) == 0x000588, "Member 'ABP_Planet_Creator_V2_C::Color_Ice_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Ice_3) == 0x000598, "Member 'ABP_Planet_Creator_V2_C::Color_Ice_3' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Ice_4) == 0x0005A8, "Member 'ABP_Planet_Creator_V2_C::Color_Ice_4' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, FLOAT_Lava_) == 0x0005B8, "Member 'ABP_Planet_Creator_V2_C::FLOAT_Lava_' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Lava_) == 0x0005C0, "Member 'ABP_Planet_Creator_V2_C::Lava_' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Lava_Zones_Intensity) == 0x0005C8, "Member 'ABP_Planet_Creator_V2_C::Lava_Zones_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Lava_Contrast) == 0x0005D0, "Member 'ABP_Planet_Creator_V2_C::Lava_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Lava_1_Intensity) == 0x0005D8, "Member 'ABP_Planet_Creator_V2_C::Lava_1_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Lava_2_Intensity) == 0x0005E0, "Member 'ABP_Planet_Creator_V2_C::Lava_2_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Poles_Height) == 0x0005E8, "Member 'ABP_Planet_Creator_V2_C::Poles_Height' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, CityLights_Intensity) == 0x0005F0, "Member 'ABP_Planet_Creator_V2_C::CityLights_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, CityLights_Continents_Reduction) == 0x0005F8, "Member 'ABP_Planet_Creator_V2_C::CityLights_Continents_Reduction' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_CityLights) == 0x000600, "Member 'ABP_Planet_Creator_V2_C::Color_CityLights' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, T_GeologicalStructures) == 0x000610, "Member 'ABP_Planet_Creator_V2_C::T_GeologicalStructures' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Lava_1) == 0x000618, "Member 'ABP_Planet_Creator_V2_C::Color_Lava_1' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Color_Lava_2) == 0x000628, "Member 'ABP_Planet_Creator_V2_C::Color_Lava_2' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Simple_Atmosphere_Enabled) == 0x000638, "Member 'ABP_Planet_Creator_V2_C::Simple_Atmosphere_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Direct_Atmosphere_brightness) == 0x000640, "Member 'ABP_Planet_Creator_V2_C::Direct_Atmosphere_brightness' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Edge_Atmosphere_brightness) == 0x000648, "Member 'ABP_Planet_Creator_V2_C::Edge_Atmosphere_brightness' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Global_Brightness) == 0x000650, "Member 'ABP_Planet_Creator_V2_C::Global_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Night_Transition) == 0x000658, "Member 'ABP_Planet_Creator_V2_C::Night_Transition' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Atmosphere_Power) == 0x000660, "Member 'ABP_Planet_Creator_V2_C::Atmosphere_Power' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Fake_Scattering) == 0x000668, "Member 'ABP_Planet_Creator_V2_C::Fake_Scattering' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Simple_Atmosphere_Day_Color) == 0x000670, "Member 'ABP_Planet_Creator_V2_C::Simple_Atmosphere_Day_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Simple_Atmosphere_Night_Color) == 0x000680, "Member 'ABP_Planet_Creator_V2_C::Simple_Atmosphere_Night_Color' has a wrong offset!");
static_assert(offsetof(ABP_Planet_Creator_V2_C, Refresh_Blueprint) == 0x000690, "Member 'ABP_Planet_Creator_V2_C::Refresh_Blueprint' has a wrong offset!");

}

