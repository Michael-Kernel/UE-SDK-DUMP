#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_UpdateDefenseType

#include "Basic.hpp"

#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BTS_UpdateDefenseType.BTS_UpdateDefenseType_C.ExecuteUbergraph_BTS_UpdateDefenseType
// 0x0020 (0x0020 - 0x0000)
struct BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType) == 0x000008, "Wrong alignment on BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType");
static_assert(sizeof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType) == 0x000020, "Wrong size on BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType");
static_assert(offsetof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType, EntryPoint) == 0x000000, "Member 'BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType, K2Node_Event_OwnerController) == 0x000008, "Member 'BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_UpdateDefenseType_C_ExecuteUbergraph_BTS_UpdateDefenseType::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BTS_UpdateDefenseType.BTS_UpdateDefenseType_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_UpdateDefenseType_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateDefenseType_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_UpdateDefenseType_C_ReceiveTickAI");
static_assert(sizeof(BTS_UpdateDefenseType_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_UpdateDefenseType_C_ReceiveTickAI");
static_assert(offsetof(BTS_UpdateDefenseType_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_UpdateDefenseType_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_UpdateDefenseType_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_UpdateDefenseType_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_UpdateDefenseType.BTS_UpdateDefenseType_C.UpdateDefenseType
// 0x0050 (0x0050 - 0x0000)
struct BTS_UpdateDefenseType_C_UpdateDefenseType final
{
public:
	class AAIController*                          InOwnerController;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESSAiDefenseType                              _2____;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSBattleAIController*                  K2Node_DynamicCast_AsSSBattle_AIController;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAiRun_ReturnValue;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockOnCharacter_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateDefenseType_C_UpdateDefenseType) == 0x000008, "Wrong alignment on BTS_UpdateDefenseType_C_UpdateDefenseType");
static_assert(sizeof(BTS_UpdateDefenseType_C_UpdateDefenseType) == 0x000050, "Wrong size on BTS_UpdateDefenseType_C_UpdateDefenseType");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, InOwnerController) == 0x000000, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::InOwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, _2____) == 0x000008, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::_2____' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, K2Node_DynamicCast_AsSSBattle_AIController) == 0x000010, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::K2Node_DynamicCast_AsSSBattle_AIController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, CallFunc_CanAiRun_ReturnValue) == 0x000019, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::CallFunc_CanAiRun_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, CallFunc_MakeLiteralName_ReturnValue) == 0x00001C, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, K2Node_DynamicCast_AsSSCharacter) == 0x000030, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, CallFunc_GetBlackboard_ReturnValue) == 0x000040, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateDefenseType_C_UpdateDefenseType, CallFunc_IsLockOnCharacter_ReturnValue) == 0x000048, "Member 'BTS_UpdateDefenseType_C_UpdateDefenseType::CallFunc_IsLockOnCharacter_ReturnValue' has a wrong offset!");

}

