#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBlastDash

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "BP_CharacterLocomotionSubDragonHoming_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C
// 0x0088 (0x0228 - 0x01A0)
class UBP_CharacterLocomotionSubBlastDash_C final : public UBP_CharacterLocomotionSubDragonHoming_C
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter __________IN;                                      // 0x01A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter __________LP;                                      // 0x01C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter __________OT;                                      // 0x01E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter __________DashCombatives;                          // 0x0200(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	EKoratBlastSlotType                           BlastSlotType;                                     // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckHomingEnd(double InDeltaSeconds, bool InIsCanChase, bool* IsEnd);
	void CheckHomingEndSP(bool* IsEnd);
	void ConsumeSPHomingIN(bool* IsSuccessfully);
	void ConsumeSPHomingLP(bool* IsSuccessfully);
	void GetHomingStateMovementParameter(EKoratDragonHomingState InStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	bool IsCanHomingChase();
	void IsEnableAction(bool* IsEnable);
	void OnStopBlastDash();
	void SetBlastSlotType(EKoratBlastSlotType InBlastSlotType);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void StartCheckSPConsumableHomingIN(bool* IsOK);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateHomingLPKey_Pressed(bool* IsSuccessfully);
	void UpdateHomingLPOn_Hit();
	void UpdateHomingLPOn_Play_Dash_Combatives();
	void UpdateHomingLPStop();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubBlastDash_C">();
	}
	static class UBP_CharacterLocomotionSubBlastDash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubBlastDash_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubBlastDash_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubBlastDash_C");
static_assert(sizeof(UBP_CharacterLocomotionSubBlastDash_C) == 0x000228, "Wrong size on UBP_CharacterLocomotionSubBlastDash_C");
static_assert(offsetof(UBP_CharacterLocomotionSubBlastDash_C, __________IN) == 0x0001A0, "Member 'UBP_CharacterLocomotionSubBlastDash_C::__________IN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlastDash_C, __________LP) == 0x0001C0, "Member 'UBP_CharacterLocomotionSubBlastDash_C::__________LP' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlastDash_C, __________OT) == 0x0001E0, "Member 'UBP_CharacterLocomotionSubBlastDash_C::__________OT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlastDash_C, __________DashCombatives) == 0x000200, "Member 'UBP_CharacterLocomotionSubBlastDash_C::__________DashCombatives' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBlastDash_C, BlastSlotType) == 0x000220, "Member 'UBP_CharacterLocomotionSubBlastDash_C::BlastSlotType' has a wrong offset!");

}

