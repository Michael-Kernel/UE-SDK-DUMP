#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratControlRigExtension

#include "Basic.hpp"

#include "KoratControlRigExtension_classes.hpp"
#include "KoratControlRigExtension_parameters.hpp"


namespace SDK
{

// Function KoratControlRigExtension.KoratControlRigExtensionInterface.GetOverwriteLimitsClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UClass*                           InClass                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlRig>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UControlRig> IKoratControlRigExtensionInterface::GetOverwriteLimitsClass(const class UClass* InClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KoratControlRigExtensionInterface", "GetOverwriteLimitsClass");

	Params::KoratControlRigExtensionInterface_GetOverwriteLimitsClass Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.EqualClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           InClass                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ClassPtr                                               (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKoratControlRigFunctionLibrary::EqualClass(const class UClass* InClass, const TSoftClassPtr<class UClass> ClassPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KoratControlRigFunctionLibrary", "EqualClass");

	Params::KoratControlRigFunctionLibrary_EqualClass Parms{};

	Parms.InClass = InClass;
	Parms.ClassPtr = ClassPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.EqualControlRig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UControlRig*                      ControlRig                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ClassPtr                                               (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKoratControlRigFunctionLibrary::EqualControlRig(const class UControlRig* ControlRig, const TSoftClassPtr<class UClass> ClassPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KoratControlRigFunctionLibrary", "EqualControlRig");

	Params::KoratControlRigFunctionLibrary_EqualControlRig Parms{};

	Parms.ControlRig = ControlRig;
	Parms.ClassPtr = ClassPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.OverwriteControlLimits
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UControlRig*                      ControlRig                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UControlRig>          SourceClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKoratControlRigFunctionLibrary::OverwriteControlLimits(class UControlRig* ControlRig, TSubclassOf<class UControlRig> SourceClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KoratControlRigFunctionLibrary", "OverwriteControlLimits");

	Params::KoratControlRigFunctionLibrary_OverwriteControlLimits Parms{};

	Parms.ControlRig = ControlRig;
	Parms.SourceClass = SourceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.SetControlMaximumRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UControlRig*                      ControlRig                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKoratControlRigFunctionLibrary::SetControlMaximumRotator(class UControlRig* ControlRig, const class FName Name_0, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KoratControlRigFunctionLibrary", "SetControlMaximumRotator");

	Params::KoratControlRigFunctionLibrary_SetControlMaximumRotator Parms{};

	Parms.ControlRig = ControlRig;
	Parms.Name_0 = Name_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KoratControlRigExtension.KoratControlRigFunctionLibrary.SetControlMinimumRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UControlRig*                      ControlRig                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKoratControlRigFunctionLibrary::SetControlMinimumRotator(class UControlRig* ControlRig, const class FName Name_0, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KoratControlRigFunctionLibrary", "SetControlMinimumRotator");

	Params::KoratControlRigFunctionLibrary_SetControlMinimumRotator Parms{};

	Parms.ControlRig = ControlRig;
	Parms.Name_0 = Name_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

