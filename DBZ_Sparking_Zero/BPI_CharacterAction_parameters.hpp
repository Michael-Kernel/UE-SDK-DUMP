#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterAction

#include "Basic.hpp"

#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackCollision
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyAttackCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyAttackCollision) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyAttackCollision");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyAttackCollision) == 0x000001, "Wrong size on BPI_CharacterAction_C_AnimNotifyAttackCollision");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyAttackCollision, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyAttackCollision::Enable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackHoming
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyAttackHoming final
{
public:
	struct FKoratAttackHomingDataList             InAttackHoming;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyAttackHoming) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyAttackHoming");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyAttackHoming) == 0x000008, "Wrong size on BPI_CharacterAction_C_AnimNotifyAttackHoming");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyAttackHoming, InAttackHoming) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyAttackHoming::InAttackHoming' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyAttackMoveTarget
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyAttackMoveTarget final
{
public:
	struct FKoratAttackHomingDataList             InAttackHoming;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyAttackMoveTarget) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyAttackMoveTarget");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyAttackMoveTarget) == 0x000008, "Wrong size on BPI_CharacterAction_C_AnimNotifyAttackMoveTarget");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyAttackMoveTarget, InAttackHoming) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyAttackMoveTarget::InAttackHoming' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyParry
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyParry final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyParry) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyParry");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyParry) == 0x000001, "Wrong size on BPI_CharacterAction_C_AnimNotifyParry");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyParry, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyParry::Enable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyPossibleVanishingRevenge
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge) == 0x000001, "Wrong size on BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyPossibleVanishingRevenge::Enable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyResetArmorLevel
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyResetArmorLevel final
{
public:
	class UObject*                                SourceObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyResetArmorLevel) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyResetArmorLevel");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyResetArmorLevel) == 0x000008, "Wrong size on BPI_CharacterAction_C_AnimNotifyResetArmorLevel");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyResetArmorLevel, SourceObject) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyResetArmorLevel::SourceObject' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyRevengeCounter
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyRevengeCounter final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratReplaceAnimationDataList> InAnimDataList;                                    // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyRevengeCounter) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyRevengeCounter");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyRevengeCounter) == 0x000018, "Wrong size on BPI_CharacterAction_C_AnimNotifyRevengeCounter");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyRevengeCounter, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyRevengeCounter::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyRevengeCounter, InAnimDataList) == 0x000008, "Member 'BPI_CharacterAction_C_AnimNotifyRevengeCounter::InAnimDataList' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySetActionCancel
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifySetActionCancel final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifySetActionCancel) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_AnimNotifySetActionCancel");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifySetActionCancel) == 0x000001, "Wrong size on BPI_CharacterAction_C_AnimNotifySetActionCancel");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifySetActionCancel, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifySetActionCancel::Enable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySetArmorLevel
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifySetArmorLevel final
{
public:
	struct FKoratArmorLevelDataList               ArmorLevel;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifySetArmorLevel) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_AnimNotifySetArmorLevel");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifySetArmorLevel) == 0x000010, "Wrong size on BPI_CharacterAction_C_AnimNotifySetArmorLevel");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifySetArmorLevel, ArmorLevel) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifySetArmorLevel::ArmorLevel' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifySetArmorLevel, SourceObject) == 0x000008, "Member 'BPI_CharacterAction_C_AnimNotifySetArmorLevel::SourceObject' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifySonicSway
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifySonicSway final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifySonicSway) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_AnimNotifySonicSway");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifySonicSway) == 0x000001, "Wrong size on BPI_CharacterAction_C_AnimNotifySonicSway");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifySonicSway, Enable) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifySonicSway::Enable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.AnimNotifyVanishing
// 0x0058 (0x0058 - 0x0000)
struct BPI_CharacterAction_C_AnimNotifyVanishing final
{
public:
	double                                        InDisappearTime;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InAppearTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InSuccessDistance;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrawVanishingEffect;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratVanishingMove>            InVanishingMove;                                   // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class USSActionCameraDataAsset*               InStartActionCamera;                               // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               InStartOpponentActionCamera;                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               InEndActionCamera;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USSActionCameraDataAsset*               InEndOpponentActionCamera;                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOneshotDeadly;                                   // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_AnimNotifyVanishing) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_AnimNotifyVanishing");
static_assert(sizeof(BPI_CharacterAction_C_AnimNotifyVanishing) == 0x000058, "Wrong size on BPI_CharacterAction_C_AnimNotifyVanishing");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InDisappearTime) == 0x000000, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InDisappearTime' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InAppearTime) == 0x000008, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InAppearTime' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InSuccessDistance) == 0x000010, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InSuccessDistance' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, IsDrawVanishingEffect) == 0x000018, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::IsDrawVanishingEffect' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InVanishingMove) == 0x000020, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InVanishingMove' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InStartActionCamera) == 0x000030, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InStartActionCamera' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InStartOpponentActionCamera) == 0x000038, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InStartOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InEndActionCamera) == 0x000040, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InEndActionCamera' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, InEndOpponentActionCamera) == 0x000048, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::InEndOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_AnimNotifyVanishing, IsOneshotDeadly) == 0x000050, "Member 'BPI_CharacterAction_C_AnimNotifyVanishing::IsOneshotDeadly' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.GetRequestAnimData
// 0x00E0 (0x00E0 - 0x0000)
struct BPI_CharacterAction_C_GetRequestAnimData final
{
public:
	struct FKoratRequestAnimData                  RequestAnimData;                                   // 0x0000(0x00E0)(Parm, OutParm)
};
static_assert(alignof(BPI_CharacterAction_C_GetRequestAnimData) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_GetRequestAnimData");
static_assert(sizeof(BPI_CharacterAction_C_GetRequestAnimData) == 0x0000E0, "Wrong size on BPI_CharacterAction_C_GetRequestAnimData");
static_assert(offsetof(BPI_CharacterAction_C_GetRequestAnimData, RequestAnimData) == 0x000000, "Member 'BPI_CharacterAction_C_GetRequestAnimData::RequestAnimData' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableDragonDash
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_IsPlayableDragonDash final
{
public:
	bool                                          IsPlayable;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_IsPlayableDragonDash) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_IsPlayableDragonDash");
static_assert(sizeof(BPI_CharacterAction_C_IsPlayableDragonDash) == 0x000001, "Wrong size on BPI_CharacterAction_C_IsPlayableDragonDash");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayableDragonDash, IsPlayable) == 0x000000, "Member 'BPI_CharacterAction_C_IsPlayableDragonDash::IsPlayable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayablePursuit
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharacterAction_C_IsPlayablePursuit final
{
public:
	EKoratPursuitType                             InPursuitType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayable;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_IsPlayablePursuit) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_IsPlayablePursuit");
static_assert(sizeof(BPI_CharacterAction_C_IsPlayablePursuit) == 0x000002, "Wrong size on BPI_CharacterAction_C_IsPlayablePursuit");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayablePursuit, InPursuitType) == 0x000000, "Member 'BPI_CharacterAction_C_IsPlayablePursuit::InPursuitType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayablePursuit, IsPlayable) == 0x000001, "Member 'BPI_CharacterAction_C_IsPlayablePursuit::IsPlayable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnChangeSection
// 0x000C (0x000C - 0x0000)
struct BPI_CharacterAction_C_OnChangeSection final
{
public:
	EKoratAnimType                                InAnimType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SectionName;                                       // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnChangeSection) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_OnChangeSection");
static_assert(sizeof(BPI_CharacterAction_C_OnChangeSection) == 0x00000C, "Wrong size on BPI_CharacterAction_C_OnChangeSection");
static_assert(offsetof(BPI_CharacterAction_C_OnChangeSection, InAnimType) == 0x000000, "Member 'BPI_CharacterAction_C_OnChangeSection::InAnimType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnChangeSection, SectionName) == 0x000004, "Member 'BPI_CharacterAction_C_OnChangeSection::SectionName' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterGaveDamage
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharacterAction_C_OnCharacterGaveDamage final
{
public:
	EKoratCharacterMovementTransition             InMovementTransition;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHoming;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InBlownAttack;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratActionAttackType                        InAttackType;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESituationOfOpponentWhenAttackHit             InOpponentHitSituation;                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   InAttackAction;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnCharacterGaveDamage) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_OnCharacterGaveDamage");
static_assert(sizeof(BPI_CharacterAction_C_OnCharacterGaveDamage) == 0x000010, "Wrong size on BPI_CharacterAction_C_OnCharacterGaveDamage");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InMovementTransition) == 0x000000, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InMovementTransition' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InHoming) == 0x000001, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InHoming' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InBlownAttack) == 0x000002, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InBlownAttack' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InAttackType) == 0x000003, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InAttackType' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InOpponentHitSituation) == 0x000004, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InOpponentHitSituation' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterGaveDamage, InAttackAction) == 0x000008, "Member 'BPI_CharacterAction_C_OnCharacterGaveDamage::InAttackAction' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterReceivedDamage
// 0x000C (0x000C - 0x0000)
struct BPI_CharacterAction_C_OnCharacterReceivedDamage final
{
public:
	struct FKoratDamageReactionDataList           InDamageReactionDataList;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          InEndured;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsGuardSuccess;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnCharacterReceivedDamage) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_OnCharacterReceivedDamage");
static_assert(sizeof(BPI_CharacterAction_C_OnCharacterReceivedDamage) == 0x00000C, "Wrong size on BPI_CharacterAction_C_OnCharacterReceivedDamage");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamage, InDamageReactionDataList) == 0x000000, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamage::InDamageReactionDataList' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamage, InEndured) == 0x000008, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamage::InEndured' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamage, InIsGuardSuccess) == 0x000009, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamage::InIsGuardSuccess' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnCharacterReceivedDamageByCombatives
// 0x00E8 (0x00E8 - 0x0000)
struct BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives final
{
public:
	struct FKoratCharacterCombativesParameter     InCombativesParameter;                             // 0x0000(0x00E0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          InEndured;                                         // 0x00E0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInIsGuardSuccess;                                 // 0x00E1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives) == 0x000008, "Wrong alignment on BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives");
static_assert(sizeof(BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives) == 0x0000E8, "Wrong size on BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives, InCombativesParameter) == 0x000000, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives::InCombativesParameter' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives, InEndured) == 0x0000E0, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives::InEndured' has a wrong offset!");
static_assert(offsetof(BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives, bInIsGuardSuccess) == 0x0000E1, "Member 'BPI_CharacterAction_C_OnCharacterReceivedDamageByCombatives::bInIsGuardSuccess' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnHitObjectCollisionOccured
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAction_C_OnHitObjectCollisionOccured final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnHitObjectCollisionOccured) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_OnHitObjectCollisionOccured");
static_assert(sizeof(BPI_CharacterAction_C_OnHitObjectCollisionOccured) == 0x000008, "Wrong size on BPI_CharacterAction_C_OnHitObjectCollisionOccured");
static_assert(offsetof(BPI_CharacterAction_C_OnHitObjectCollisionOccured, InAction) == 0x000000, "Member 'BPI_CharacterAction_C_OnHitObjectCollisionOccured::InAction' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.OnHitObjectStopped
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharacterAction_C_OnHitObjectStopped final
{
public:
	struct FKoratActionDataList                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_OnHitObjectStopped) == 0x000004, "Wrong alignment on BPI_CharacterAction_C_OnHitObjectStopped");
static_assert(sizeof(BPI_CharacterAction_C_OnHitObjectStopped) == 0x000008, "Wrong size on BPI_CharacterAction_C_OnHitObjectStopped");
static_assert(offsetof(BPI_CharacterAction_C_OnHitObjectStopped, InAction) == 0x000000, "Member 'BPI_CharacterAction_C_OnHitObjectStopped::InAction' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_IsPlayableAction final
{
public:
	bool                                          IsPlayable;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_IsPlayableAction) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_IsPlayableAction");
static_assert(sizeof(BPI_CharacterAction_C_IsPlayableAction) == 0x000001, "Wrong size on BPI_CharacterAction_C_IsPlayableAction");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayableAction, IsPlayable) == 0x000000, "Member 'BPI_CharacterAction_C_IsPlayableAction::IsPlayable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_IsPlayableMove final
{
public:
	bool                                          IsPlayable;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_IsPlayableMove) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_IsPlayableMove");
static_assert(sizeof(BPI_CharacterAction_C_IsPlayableMove) == 0x000001, "Wrong size on BPI_CharacterAction_C_IsPlayableMove");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayableMove, IsPlayable) == 0x000000, "Member 'BPI_CharacterAction_C_IsPlayableMove::IsPlayable' has a wrong offset!");

// Function BPI_CharacterAction.BPI_CharacterAction_C.IsPlayableReaction
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharacterAction_C_IsPlayableReaction final
{
public:
	bool                                          IsPlayable;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharacterAction_C_IsPlayableReaction) == 0x000001, "Wrong alignment on BPI_CharacterAction_C_IsPlayableReaction");
static_assert(sizeof(BPI_CharacterAction_C_IsPlayableReaction) == 0x000001, "Wrong size on BPI_CharacterAction_C_IsPlayableReaction");
static_assert(offsetof(BPI_CharacterAction_C_IsPlayableReaction, IsPlayable) == 0x000000, "Member 'BPI_CharacterAction_C_IsPlayableReaction::IsPlayable' has a wrong offset!");

}

