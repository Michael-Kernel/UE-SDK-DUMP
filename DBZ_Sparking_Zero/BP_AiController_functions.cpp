#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AiController

#include "Basic.hpp"

#include "BP_AiController_classes.hpp"
#include "BP_AiController_parameters.hpp"


namespace SDK
{

// Function BP_AiController.BP_AiController_C.BP_AiController_AutoGenFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AiController_C::BP_AiController_AutoGenFunc(bool InEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "BP_AiController_AutoGenFunc");

	Params::BP_AiController_C_BP_AiController_AutoGenFunc Parms{};

	Parms.InEnable = InEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.ConvertOldFlow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratBattleKey                         NewType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBattleKey                              OldType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOldFlow                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AiController_C::ConvertOldFlow(EKoratBattleKey NewType, EBattleKey* OldType, bool* bOldFlow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "ConvertOldFlow");

	Params::BP_AiController_C_ConvertOldFlow Parms{};

	Parms.NewType = NewType;

	UObject::ProcessEvent(Func, &Parms);

	if (OldType != nullptr)
		*OldType = Parms.OldType;

	if (bOldFlow != nullptr)
		*bOldFlow = Parms.bOldFlow;
}


// Function BP_AiController.BP_AiController_C.Debug Command
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   InDebugCommand                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_AiController_C::Debug_Command(TArray<class FString>& InDebugCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "Debug Command");

	Params::BP_AiController_C_Debug_Command Parms{};

	Parms.InDebugCommand = std::move(InDebugCommand);

	UObject::ProcessEvent(Func, &Parms);

	InDebugCommand = std::move(Parms.InDebugCommand);
}


// Function BP_AiController.BP_AiController_C.Debug Draw
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::Debug_Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "Debug Draw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugChangeLv
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InCommandOpt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AiController_C::DebugChangeLv(const class FString& InCommandOpt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugChangeLv");

	Params::BP_AiController_C_DebugChangeLv Parms{};

	Parms.InCommandOpt = std::move(InCommandOpt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.DebugChangeType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InCommandOpt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AiController_C::DebugChangeType(const class FString& InCommandOpt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugChangeType");

	Params::BP_AiController_C_DebugChangeType Parms{};

	Parms.InCommandOpt = std::move(InCommandOpt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.DebugCharacterStatusMax
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugCharacterStatusMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugCharacterStatusMax");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugCharacterStatusMin
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugCharacterStatusMin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugCharacterStatusMin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugDispInfo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugDispInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugDispInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugDrawPathSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugDrawPathSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugDrawPathSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugDrawTargetDistance
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugDrawTargetDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugDrawTargetDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugDrawTargetDistanceOnOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InCommandOpt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AiController_C::DebugDrawTargetDistanceOnOff(const class FString& InCommandOpt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugDrawTargetDistanceOnOff");

	Params::BP_AiController_C_DebugDrawTargetDistanceOnOff Parms{};

	Parms.InCommandOpt = std::move(InCommandOpt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.DebugResetCoolDown
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::DebugResetCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugResetCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.DebugRoutineOrder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InCommandOpt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AiController_C::DebugRoutineOrder(const class FString& InCommandOpt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugRoutineOrder");

	Params::BP_AiController_C_DebugRoutineOrder Parms{};

	Parms.InCommandOpt = std::move(InCommandOpt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.DebugSearchOnOff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InCommandOpt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AiController_C::DebugSearchOnOff(const class FString& InCommandOpt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "DebugSearchOnOff");

	Params::BP_AiController_C_DebugSearchOnOff Parms{};

	Parms.InCommandOpt = std::move(InCommandOpt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.ExecuteInputProcess
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::ExecuteInputProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "ExecuteInputProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.ExecuteUbergraph_BP_AiController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AiController_C::ExecuteUbergraph_BP_AiController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "ExecuteUbergraph_BP_AiController");

	Params::BP_AiController_C_ExecuteUbergraph_BP_AiController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.FinalizeBehaviorTree
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::FinalizeBehaviorTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "FinalizeBehaviorTree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.GetMovementRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InMoveVector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutMoveRotator                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AiController_C::GetMovementRotation(const struct FVector2D& InMoveVector, struct FRotator* OutMoveRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "GetMovementRotation");

	Params::BP_AiController_C_GetMovementRotation Parms{};

	Parms.InMoveVector = std::move(InMoveVector);

	UObject::ProcessEvent(Func, &Parms);

	if (OutMoveRotator != nullptr)
		*OutMoveRotator = std::move(Parms.OutMoveRotator);
}


// Function BP_AiController.BP_AiController_C.InitializeBehaviorTree
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::InitializeBehaviorTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "InitializeBehaviorTree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.OnAiCommand
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FString>                   InDebugCommand                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_AiController_C::OnAiCommand(const TArray<class FString>& InDebugCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "OnAiCommand");

	Params::BP_AiController_C_OnAiCommand Parms{};

	Parms.InDebugCommand = std::move(InDebugCommand);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AiController_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "ReceiveTick");

	Params::BP_AiController_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AiController.BP_AiController_C.Set Locomotion Component
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::Set_Locomotion_Component()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "Set Locomotion Component");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.UpdateSpecificBehaviorTree
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::UpdateSpecificBehaviorTree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "UpdateSpecificBehaviorTree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AiController.BP_AiController_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AiController_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AiController_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

