#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubJump

#include "Basic.hpp"

#include "BP_CharacterLocomotionSubJump_classes.hpp"
#include "BP_CharacterLocomotionSubJump_parameters.hpp"


namespace SDK
{

// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.Check
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "Check");

	Params::BP_CharacterLocomotionSubJump_C_Check Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (CanStart != nullptr)
		*CanStart = Parms.CanStart;
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.CheckAndStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStarted                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "CheckAndStart");

	Params::BP_CharacterLocomotionSubJump_C_CheckAndStart Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStarted != nullptr)
		*IsStarted = Parms.IsStarted;
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.LandedJump
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::LandedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "LandedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.OnEndJumpFT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::OnEndJumpFT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "OnEndJumpFT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.OnEndJumpIN
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::OnEndJumpIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "OnEndJumpIN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.OnEndJumpOT
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::OnEndJumpOT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "OnEndJumpOT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.OnEndJumpUP
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::OnEndJumpUP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "OnEndJumpUP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.Set Jump Status
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EKoratJumpState                         InJumpStatus                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKoratCharacterActionFinishReason       InActionFinishReason                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::Set_Jump_Status(EKoratJumpState InJumpStatus, EKoratCharacterActionFinishReason InActionFinishReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "Set Jump Status");

	Params::BP_CharacterLocomotionSubJump_C_Set_Jump_Status Parms{};

	Parms.InJumpStatus = InJumpStatus;
	Parms.InActionFinishReason = InActionFinishReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.Start
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    InInSkip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "Start");

	Params::BP_CharacterLocomotionSubJump_C_Start Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InInSkip = InInSkip;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.StartFalling
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::StartFalling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "StartFalling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.StartJumpUp
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::StartJumpUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "StartJumpUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.StopJump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InChangeJumpToFly                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::StopJump(bool InChangeJumpToFly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "StopJump");

	Params::BP_CharacterLocomotionSubJump_C_StopJump Parms{};

	Parms.InChangeJumpToFly = InChangeJumpToFly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CharacterLocomotionComponent_C*InLocomotionComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// ECharacterLocomotionEventType           InEventType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CharacterLocomotionSubJump_C::Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "Update");

	Params::BP_CharacterLocomotionSubJump_C_Update Parms{};

	Parms.InLocomotionComponent = InLocomotionComponent;
	Parms.InEventType = InEventType;
	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_CharacterLocomotionSubJump.BP_CharacterLocomotionSubJump_C.UpdateRotationJump
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CharacterLocomotionSubJump_C::UpdateRotationJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterLocomotionSubJump_C", "UpdateRotationJump");

	UObject::ProcessEvent(Func, nullptr);
}

}

