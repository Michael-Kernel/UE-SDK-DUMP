#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SS

#include "Basic.hpp"

#include "MovieSceneTracks_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "KoratControlRigExtension_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "SSKeyInput_structs.hpp"
#include "CriWareAdxLipSync_structs.hpp"
#include "InputCore_structs.hpp"
#include "ControlRig_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum SS.EKoratDestructionSEType
// NumValues: 0x0005
enum class EKoratDestructionSEType : uint8
{
	None                                     = 0,
	Destruction                              = 1,
	Hit                                      = 2,
	Collision                                = 3,
	EKoratDestructionSEType_MAX              = 4,
};

// Enum SS.EKoratDestructionEffectType
// NumValues: 0x0005
enum class EKoratDestructionEffectType : uint8
{
	None                                     = 0,
	Destruction                              = 1,
	Hit                                      = 2,
	Collision                                = 3,
	EKoratDestructionEffectType_MAX          = 4,
};

// Enum SS.EKoratDestructionDamageLevel
// NumValues: 0x000F
enum class EKoratDestructionDamageLevel : uint8
{
	KNoDamage                                = 0,
	KNoEffect                                = 1,
	KTouch                                   = 2,
	KSmall                                   = 3,
	KMedium                                  = 4,
	KLarge                                   = 5,
	KDemo                                    = 6,
	KCollide                                 = 7,
	KDashSlide                               = 8,
	KDamageSlide                             = 9,
	KBlast                                   = 10,
	KMaximum                                 = 11,
	KCollapse                                = 12,
	KNum                                     = 13,
	EKoratDestructionDamageLevel_MAX         = 14,
};

// Enum SS.EKoratDestructionAttackParameterType
// NumValues: 0x0015
enum class EKoratDestructionAttackParameterType : uint8
{
	KMove                                    = 0,
	KFighting                                = 1,
	KSFighting                               = 2,
	KBullet                                  = 3,
	KSBullet                                 = 4,
	KBlast                                   = 5,
	KCharge                                  = 6,
	KMaxCharge                               = 7,
	KRush                                    = 8,
	KCollide                                 = 9,
	KWeakBlast                               = 10,
	KMiddleBlast                             = 11,
	KStrongBlast                             = 12,
	KGiantTouch                              = 13,
	KGiantStrongTouch                        = 14,
	KGeneralGiantFighting                    = 15,
	KGeneralGianlBullet                      = 16,
	KOrdinaryPersonFighting                  = 17,
	KOrdinaryPersonMove                      = 18,
	KCollapse                                = 19,
	EKoratDestructionAttackParameterType_MAX = 20,
};

// Enum SS.EKoratBuffNotifyType
// NumValues: 0x0005
enum class EKoratBuffNotifyType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	OneShotEvent                             = 2,
	Finish                                   = 3,
	EKoratBuffNotifyType_MAX                 = 4,
};

// Enum SS.ECharacterBattleState
// NumValues: 0x0006
enum class ECharacterBattleState : uint8
{
	Normal                                   = 0,
	PreSparkingRelease                       = 1,
	PreSparkingMode                          = 2,
	SparkingMode                             = 3,
	Stun                                     = 4,
	ECharacterBattleState_MAX                = 5,
};

// Enum SS.EKoratBattleDirectingActivate
// NumValues: 0x0033
enum class EKoratBattleDirectingActivate : uint8
{
	None                                     = 0,
	Victory                                  = 1,
	Defeat                                   = 2,
	DefeatWithBadEnd                         = 3,
	Activate                                 = 4,
	CpuThinkingChange                        = 5,
	CpuLevelChange                           = 6,
	CharacterChange                          = 7,
	CharacteCoalescence                      = 8,
	CharacteFormChange                       = 9,
	HPGaugeRecovery                          = 10,
	HPGaugeDamage                            = 11,
	HPGaugeDirectSet                         = 12,
	SPGaugeRecovery                          = 13,
	SPGaugeDamage                            = 14,
	SPGaugeDirectSet                         = 15,
	SkillStockRecovery                       = 16,
	FullRecovery                             = 17,
	SureToHitBlast                           = 18,
	OneShotDeadly                            = 19,
	BGMChange                                = 20,
	Voice                                    = 21,
	ZItem                                    = 22,
	StageChange                              = 23,
	EventRequest                             = 24,
	Conversation                             = 25,
	DirectingTableChange                     = 26,
	ResetElapsedTime                         = 27,
	StopElapsedTimer                         = 28,
	PlayElapsedTimer                         = 29,
	BulletForbid                             = 30,
	BulletAllow                              = 31,
	BlastForbid                              = 32,
	BlastAllow                               = 33,
	FormChangeForbid                         = 34,
	FormChangeAllow                          = 35,
	TaketurnsForbid                          = 36,
	TaketurnsAllow                           = 37,
	Buff                                     = 38,
	PracticeReset                            = 39,
	AiCommand                                = 40,
	AiEnabled                                = 41,
	PracticeEnable                           = 42,
	DispUnlockBlast                          = 43,
	DispUnlockFormChange                     = 44,
	DispUnlockCoalescence                    = 45,
	BlowoutBrakeTimeReduction                = 46,
	BattleHUDShow                            = 47,
	DispClearConditions                      = 48,
	PauseMenuUpdate                          = 49,
	EKoratBattleDirectingActivate_MAX        = 50,
};

// Enum SS.EKoratBattleKey
// NumValues: 0x0045
enum class EKoratBattleKey : uint8
{
	MoveFront                                = 0,
	MoveBack                                 = 1,
	MoveRight                                = 2,
	MoveLeft                                 = 3,
	MoveUp                                   = 4,
	MoveDown                                 = 5,
	Soar                                     = 6,
	Swoop                                    = 7,
	Jump                                     = 8,
	Step                                     = 9,
	Kidan                                    = 10,
	Charge                                   = 11,
	Special                                  = 12,
	BlastForte1                              = 13,
	BlastForte2                              = 14,
	BlastSkill1                              = 15,
	BlastSkill2                              = 16,
	UltimateBlast                            = 17,
	Guard                                    = 18,
	Rush                                     = 19,
	Counter                                  = 20,
	RevengeCounter                           = 21,
	SuperCounter                             = 22,
	SuperZCounter                            = 23,
	VanishingAssault                         = 24,
	Throw                                    = 25,
	ThrowDown                                = 26,
	Emote                                    = 27,
	DragonDashStart                          = 28,
	DragonDashEnd                            = 29,
	DragonHomingStart                        = 30,
	DragonHomingEnd                          = 31,
	DownRevival                              = 32,
	BlastBoost                               = 33,
	ImpactBoost                              = 34,
	PowerImpact                              = 35,
	CrashImpactAttack                        = 36,
	CrashImpactDefence                       = 37,
	SpeedImpact                              = 38,
	BlastImpact                              = 39,
	Directing                                = 40,
	LightningAttack                          = 41,
	SubUIView                                = 42,
	Emote0                                   = 43,
	Emote1                                   = 44,
	Emote2                                   = 45,
	Emote3                                   = 46,
	Transform00                              = 47,
	Transform01                              = 48,
	Transform02                              = 49,
	Transform03                              = 50,
	Transform04                              = 51,
	Transform05                              = 52,
	Transform06                              = 53,
	Transform07                              = 54,
	Transform08                              = 55,
	Transform09                              = 56,
	Transform10                              = 57,
	Transform11                              = 58,
	Replace0                                 = 59,
	Replace1                                 = 60,
	Replace2                                 = 61,
	Replace3                                 = 62,
	Replace4                                 = 63,
	MenuGiveup                               = 64,
	SystemPausing                            = 65,
	SystemLoading                            = 66,
	InputPadKey                              = 67,
	Max                                      = 68,
};

// Enum SS.EKoratBattleSearchFactor
// NumValues: 0x0006
enum class EKoratBattleSearchFactor : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	Sense                                    = 2,
	Auto                                     = 3,
	Aim                                      = 4,
	EKoratBattleSearchFactor_MAX             = 5,
};

// Enum SS.ETypeOfTeleportToPassToBattleCamera
// NumValues: 0x0016
enum class ETypeOfTeleportToPassToBattleCamera : uint8
{
	None                                     = 0,
	ActVAS                                   = 1,
	ActVAA                                   = 2,
	ActSZCV                                  = 3,
	ActZCO                                   = 4,
	ActRFM                                   = 5,
	ActRFMC                                  = 6,
	ActHSE                                   = 7,
	ActCRFVE                                 = 8,
	ActSM                                    = 9,
	ActSCS                                   = 10,
	ActTA2                                   = 11,
	ActTA3                                   = 12,
	ActRI1                                   = 13,
	ActSI2                                   = 14,
	ActCAS                                   = 15,
	ActHC2                                   = 16,
	ActHC3                                   = 17,
	ActHSM                                   = 18,
	ActHSMS                                  = 19,
	ActZBD                                   = 20,
	ETypeOfTeleportToPassToBattleCamera_MAX  = 21,
};

// Enum SS.ECameraZoomType
// NumValues: 0x000E
enum class ECameraZoomType : uint8
{
	ZoomNone                                 = 0,
	ZoomOutLV1                               = 1,
	ZoomOutLV2                               = 2,
	ZoomOutLV3                               = 3,
	ZoomOutLV4                               = 4,
	ZoomOutLV5                               = 5,
	ZoomOutLV6                               = 6,
	ZoomInLV1                                = 7,
	ZoomInLV2                                = 8,
	ZoomInLV3                                = 9,
	ZoomInLV4                                = 10,
	ZoomInLV5                                = 11,
	ZoomInLV6                                = 12,
	MAX                                      = 13,
};

// Enum SS.ENewBattleCameraType
// NumValues: 0x0018
enum class ENewBattleCameraType : uint8
{
	NONE                                     = 0,
	IDLE                                     = 1,
	IDLE_SLAVE                               = 2,
	IDLE_SLAVE2                              = 3,
	RUSH                                     = 4,
	BLOW_AWAY                                = 5,
	BLOWN_AWAY                               = 6,
	PASSIVE                                  = 7,
	REVENGE_COUNTER                          = 8,
	TELEPORT                                 = 9,
	OPPONENT_TELEPORTED                      = 10,
	OPPONENT_SEARCH                          = 11,
	WARP_PLAY_START                          = 12,
	WARP_MOVE_START                          = 13,
	TEST_OPPONENT_ZSEARCH_RELEASED           = 14,
	SONIC_SWAY                               = 15,
	SONIC_SWAY_FINISH                        = 16,
	SONIC_SWAYED                             = 17,
	SONIC_SWAYED_FINISH                      = 18,
	LONG_RUSH                                = 19,
	MEMBER_CHANGE_START                      = 20,
	MEMBER_CHANGE_END                        = 21,
	ZOOM_NOTIFY                              = 22,
	MAX                                      = 23,
};

// Enum SS.ESSSetActionCameraType
// NumValues: 0x0003
enum class ESSSetActionCameraType : uint8
{
	Sequence                                 = 0,
	CameraMode                               = 1,
	ESSSetActionCameraType_MAX               = 2,
};

// Enum SS.ESSMissionCleraMode
// NumValues: 0x0004
enum class ESSMissionCleraMode : uint8
{
	NotClear                                 = 0,
	Stamp                                    = 1,
	Reward                                   = 2,
	ESSMissionCleraMode_MAX                  = 3,
};

// Enum SS.EMovieMode
// NumValues: 0x0006
enum class EMovieMode : uint8
{
	EMovieModeNon                            = 0,
	EMovieModePlay                           = 1,
	EMovieModeStop                           = 2,
	EMovieModePause                          = 3,
	EMovieModeEnd                            = 4,
	EMovieMode_MAX                           = 5,
};

// Enum SS.EKoratBattleKeyInputState
// NumValues: 0x0004
enum class EKoratBattleKeyInputState : uint8
{
	JustPressed                              = 0,
	JustReleased                             = 1,
	Down                                     = 2,
	EKoratBattleKeyInputState_MAX            = 3,
};

// Enum SS.EKoratBattleCpuLevel
// NumValues: 0x0006
enum class EKoratBattleCpuLevel : uint8
{
	None                                     = 0,
	Week                                     = 1,
	Usual                                    = 2,
	Strong                                   = 3,
	FierceGod                                = 4,
	EKoratBattleCpuLevel_MAX                 = 5,
};

// Enum SS.EKoratBattleDirectingKnockDownType
// NumValues: 0x0005
enum class EKoratBattleDirectingKnockDownType : uint8
{
	None                                     = 0,
	BlastForte                               = 1,
	BlastSkill                               = 2,
	BlastUltimate                            = 3,
	EKoratBattleDirectingKnockDownType_MAX   = 4,
};

// Enum SS.EKoratBattleFormat
// NumValues: 0x0005
enum class EKoratBattleFormat : uint8
{
	OneVsOne                                 = 0,
	StarPickingCeremony                      = 1,
	WinningCeremony                          = 2,
	TeamBattle                               = 3,
	EKoratBattleFormat_MAX                   = 4,
};

// Enum SS.EKoratBattleDirectingConditionTargetType
// NumValues: 0x0005
enum class EKoratBattleDirectingConditionTargetType : uint8
{
	CharacterSlot                            = 0,
	PlayerTeam                               = 1,
	EnemyTeam                                = 2,
	Anyone                                   = 3,
	EKoratBattleDirectingConditionTargetType_MAX = 4,
};

// Enum SS.EKoratBattleDirectingTrigger
// NumValues: 0x001D
enum class EKoratBattleDirectingTrigger : uint8
{
	None                                     = 0,
	Unconditional                            = 1,
	HPGauge                                  = 2,
	ElapsedTime                              = 3,
	BeyondTime                               = 4,
	OnTime                                   = 5,
	KnockDown                                = 6,
	ActionStart                              = 7,
	ActionEnd                                = 8,
	ActionHit                                = 9,
	ActionNoHit                              = 10,
	DefendAttack                             = 11,
	SuperAscertainSuccess                    = 12,
	Combination                              = 13,
	RemaingTime                              = 14,
	RemaingTimeHP                            = 15,
	KnockDownHP                              = 16,
	StateChanged                             = 17,
	CurrentState                             = 18,
	FormChanged                              = 19,
	CurrentForm                              = 20,
	Taketurns                                = 21,
	Emote                                    = 22,
	Distance                                 = 23,
	FullPowerSmashDamageRange                = 24,
	WeakRetry                                = 25,
	UseOrb                                   = 26,
	AfterTutorialSpeedImpact                 = 27,
	EKoratBattleDirectingTrigger_MAX         = 28,
};

// Enum SS.EKoratBattleDirectingInequalitySign
// NumValues: 0x0004
enum class EKoratBattleDirectingInequalitySign : uint8
{
	More                                     = 0,
	Less                                     = 1,
	Instant                                  = 2,
	EKoratBattleDirectingInequalitySign_MAX  = 3,
};

// Enum SS.EKoratBattleDirectingAction
// NumValues: 0x000D
enum class EKoratBattleDirectingAction : uint8
{
	None                                     = 0,
	BlastForte_1                             = 1,
	BlastForte_2                             = 2,
	BlastSkill_1                             = 3,
	BlastSkill_2                             = 4,
	BlastUltimate                            = 5,
	Sparking                                 = 6,
	PowerImpact                              = 7,
	BrastImpact                              = 8,
	CrashImpact                              = 9,
	SpeadImpact                              = 10,
	Emote                                    = 11,
	EKoratBattleDirectingAction_MAX          = 12,
};

// Enum SS.EKoratBattleDirectingType
// NumValues: 0x000B
enum class EKoratBattleDirectingType : uint8
{
	None                                     = 0,
	Action                                   = 1,
	Parameters                               = 2,
	Performance                              = 3,
	Event                                    = 4,
	TableChange                              = 5,
	CharacterChange                          = 6,
	CharacterFormChange                      = 7,
	Survivor                                 = 8,
	Timer                                    = 9,
	EKoratBattleDirectingType_MAX            = 10,
};

// Enum SS.EKoratBattleCpuThinking
// NumValues: 0x0006
enum class EKoratBattleCpuThinking : uint8
{
	None                                     = 0,
	Week                                     = 1,
	Usual                                    = 2,
	Strong                                   = 3,
	FierceGod                                = 4,
	EKoratBattleCpuThinking_MAX              = 5,
};

// Enum SS.EKoratBattleRewardMode
// NumValues: 0x0005
enum class EKoratBattleRewardMode : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	WinLose                                  = 3,
	EKoratBattleRewardMode_MAX               = 4,
};

// Enum SS.EKoratBattleRewardClearCondition
// NumValues: 0x0005
enum class EKoratBattleRewardClearCondition : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Anather                                  = 2,
	All                                      = 3,
	EKoratBattleRewardClearCondition_MAX     = 4,
};

// Enum SS.EKoratBattleWaitConditions
// NumValues: 0x0004
enum class EKoratBattleWaitConditions : uint8
{
	None                                     = 0,
	Skip                                     = 1,
	Wait                                     = 2,
	EKoratBattleWaitConditions_MAX           = 3,
};

// Enum SS.EKoratBattleConversationMode
// NumValues: 0x0007
enum class EKoratBattleConversationMode : uint8
{
	Character                                = 0,
	Narration                                = 1,
	Gallery                                  = 2,
	TeamTalk                                 = 3,
	MainMenu                                 = 4,
	System                                   = 5,
	EKoratBattleConversationMode_MAX         = 6,
};

// Enum SS.EKoratBattleConversationSetMode
// NumValues: 0x0004
enum class EKoratBattleConversationSetMode : uint8
{
	Normal                                   = 0,
	Random                                   = 1,
	Order                                    = 2,
	EKoratBattleConversationSetMode_MAX      = 3,
};

// Enum SS.EKoratBattleConditionalTextMode
// NumValues: 0x0005
enum class EKoratBattleConditionalTextMode : uint8
{
	Clear                                    = 0,
	Another                                  = 1,
	Defeat                                   = 2,
	OrbAnother                               = 3,
	EKoratBattleConditionalTextMode_MAX      = 4,
};

// Enum SS.EKoratBattleRetryMode
// NumValues: 0x0009
enum class EKoratBattleRetryMode : uint8
{
	NormalRetry                              = 0,
	SampleResetRetry                         = 1,
	PracticeResetRetry1st                    = 2,
	PracticeResetRetry                       = 3,
	PracticeRetry                            = 4,
	TrainingResetRetry                       = 5,
	Hp0Retry                                 = 6,
	RestrictRetry                            = 7,
	EKoratBattleRetryMode_MAX                = 8,
};

// Enum SS.EKoratBattlePauseMode
// NumValues: 0x0006
enum class EKoratBattlePauseMode : uint8
{
	Normal                                   = 0,
	Training                                 = 1,
	BattleTraining                           = 2,
	Practice                                 = 3,
	Tutorial                                 = 4,
	EKoratBattlePauseMode_MAX                = 5,
};

// Enum SS.EKoratBattlePauseResultMode
// NumValues: 0x0007
enum class EKoratBattlePauseResultMode : uint8
{
	Non                                      = 0,
	Normal                                   = 1,
	TrainingSetting                          = 2,
	ReturnStandby                            = 3,
	FinishTraining                           = 4,
	TurorilaSkip                             = 5,
	EKoratBattlePauseResultMode_MAX          = 6,
};

// Enum SS.EKoratBattleDirectingOneShotDeadlyOrder
// NumValues: 0x0005
enum class EKoratBattleDirectingOneShotDeadlyOrder : uint8
{
	None                                     = 0,
	Player1                                  = 1,
	Player2                                  = 2,
	Both                                     = 3,
	EKoratBattleDirectingOneShotDeadlyOrder_MAX = 4,
};

// Enum SS.EKoratBattleDirectingRequestEventState
// NumValues: 0x0005
enum class EKoratBattleDirectingRequestEventState : uint8
{
	None                                     = 0,
	Begin                                    = 1,
	Running                                  = 2,
	End                                      = 3,
	EKoratBattleDirectingRequestEventState_MAX = 4,
};

// Enum SS.EKoratKnockDownBattleDirectingState
// NumValues: 0x0004
enum class EKoratKnockDownBattleDirectingState : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Running                                  = 2,
	EKoratKnockDownBattleDirectingState_MAX  = 3,
};

// Enum SS.EKoratTaketurnInfoState
// NumValues: 0x0005
enum class EKoratTaketurnInfoState : uint8
{
	WaitTaketurn                             = 0,
	CheckBegin                               = 1,
	CheckLast                                = 2,
	Finished                                 = 3,
	EKoratTaketurnInfoState_MAX              = 4,
};

// Enum SS.EKoratCharacterBattleCountType
// NumValues: 0x001E
enum class EKoratCharacterBattleCountType : uint8
{
	ZCounter                                 = 0,
	SuperCounterCount                        = 1,
	ShotEnergyBulletCount                    = 2,
	ReflectEnergyBulletCount                 = 3,
	ChargeCount                              = 4,
	SparkingCount                            = 5,
	ThrowCount                               = 6,
	GuardCount                               = 7,
	EXACount                                 = 8,
	SPMCount                                 = 9,
	ULTCount                                 = 10,
	SpeedImpactCount                         = 11,
	BlastImpactCount                         = 12,
	PowerImpactCount                         = 13,
	CrashImpactCount                         = 14,
	SpeedImpactWinCount                      = 15,
	BlastImpactWinCount                      = 16,
	PowerImpactWinCount                      = 17,
	CrashImpactWinCount                      = 18,
	EmoteCount                               = 19,
	VanishingAttack                          = 20,
	DragonHoming                             = 21,
	LightningAttack                          = 22,
	RevengeCounter                           = 23,
	SparkingCombo                            = 24,
	Transform                                = 25,
	DramaticFinish                           = 26,
	SpecialFatePreBattleProduction           = 27,
	Num                                      = 28,
	EKoratCharacterBattleCountType_MAX       = 29,
};

// Enum SS.EKoratAsyncTransitionJudgmentInPin
// NumValues: 0x0003
enum class EKoratAsyncTransitionJudgmentInPin : uint8
{
	Start                                    = 0,
	Stop                                     = 1,
	EKoratAsyncTransitionJudgmentInPin_MAX   = 2,
};

// Enum SS.EKoratAurLevel
// NumValues: 0x0006
enum class EKoratAurLevel : uint8
{
	None                                     = 0,
	Level1                                   = 1,
	Level4                                   = 2,
	Level2                                   = 3,
	Level3                                   = 4,
	EKoratAurLevel_MAX                       = 5,
};

// Enum SS.EKoratInverseKinematicsType
// NumValues: 0x0003
enum class EKoratInverseKinematicsType : uint8
{
	IKT_Hand_Throw_A                         = 0,
	IKT_Hand_Throw_B                         = 1,
	IKT_Hand_Throw_MAX                       = 2,
};

// Enum SS.EKoratInverseKinematicsMethod
// NumValues: 0x0005
enum class EKoratInverseKinematicsMethod : uint8
{
	IKM_None                                 = 0,
	IKM_TwoBoneIK                            = 1,
	IKM_CCDIK                                = 2,
	IKM_FABRIK                               = 3,
	IKM_MAX                                  = 4,
};

// Enum SS.EKoratCharacterLocomotionGroundRunningState
// NumValues: 0x0006
enum class EKoratCharacterLocomotionGroundRunningState : uint8
{
	None                                     = 0,
	RunningInExec                            = 1,
	RunningInDone                            = 2,
	RunningOutExec                           = 3,
	RunningOutDone                           = 4,
	EKoratCharacterLocomotionGroundRunningState_MAX = 5,
};

// Enum SS.EKoratDashUkemiType
// NumValues: 0x0003
enum class EKoratDashUkemiType : uint8
{
	Wall                                     = 0,
	Ground                                   = 1,
	EKoratDashUkemiType_MAX                  = 2,
};

// Enum SS.EKoratDashUkemiState
// NumValues: 0x0007
enum class EKoratDashUkemiState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	DASH_IN                                  = 2,
	DASH_LP                                  = 3,
	DASH_OT                                  = 4,
	DashCombatives                           = 5,
	EKoratDashUkemiState_MAX                 = 6,
};

// Enum SS.EKoratLocomotionState
// NumValues: 0x0017
enum class EKoratLocomotionState : uint8
{
	IdleMove                                 = 0,
	ShortDash                                = 1,
	Jump                                     = 2,
	Step                                     = 3,
	DragonDash                               = 4,
	Blow                                     = 5,
	DragonHoming                             = 6,
	ZBurstDash                               = 7,
	RevengeDash                              = 8,
	DashUpDown                               = 9,
	WallUkemi                                = 10,
	DashUkemi                                = 11,
	StunReaction                             = 12,
	BurstSmash                               = 13,
	HighSpeedMove                            = 14,
	SuperHighSpeedMove                       = 15,
	SuperHighSpeedMoveStr                    = 16,
	MoveStandUp                              = 17,
	BlastSkill1Dash                          = 18,
	BlastSkill2Dash                          = 19,
	BlastUltimateDash                        = 20,
	NumbReaction                             = 21,
	EKoratLocomotionState_MAX                = 22,
};

// Enum SS.EKoratShortDashState
// NumValues: 0x0004
enum class EKoratShortDashState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	OT                                       = 2,
	EKoratShortDashState_MAX                 = 3,
};

// Enum SS.EKoratDragonDashState
// NumValues: 0x0008
enum class EKoratDragonDashState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	BK                                       = 4,
	DashCombatives                           = 5,
	QuickIN                                  = 6,
	EKoratDragonDashState_MAX                = 7,
};

// Enum SS.EKoratBlowState
// NumValues: 0x0019
enum class EKoratBlowState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	BK                                       = 4,
	FallIN                                   = 5,
	FallLP                                   = 6,
	Bound                                    = 7,
	BoundIN                                  = 8,
	BoundOT                                  = 9,
	SlideLP                                  = 10,
	SlideOT                                  = 11,
	CrashToWallIN                            = 12,
	CrashToWallOT                            = 13,
	Down                                     = 14,
	DownRevivalIN                            = 15,
	DownRevivalOT                            = 16,
	UkemiStandUpIN                           = 17,
	UkemiStandUpOT                           = 18,
	Brake                                    = 19,
	Lift                                     = 20,
	Sweep                                    = 21,
	Crumple                                  = 22,
	FallUkemi                                = 23,
	EKoratBlowState_MAX                      = 24,
};

// Enum SS.EKoratBlowType
// NumValues: 0x0007
enum class EKoratBlowType : uint8
{
	Normal                                   = 0,
	Roll                                     = 1,
	Screw                                    = 2,
	Lift                                     = 3,
	Sweep                                    = 4,
	Crumple                                  = 5,
	EKoratBlowType_MAX                       = 6,
};

// Enum SS.EKoratDragonHomingState
// NumValues: 0x0006
enum class EKoratDragonHomingState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	DashCombatives                           = 4,
	EKoratDragonHomingState_MAX              = 5,
};

// Enum SS.EKoratHighSpeedMoveState
// NumValues: 0x0005
enum class EKoratHighSpeedMoveState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	EKoratHighSpeedMoveState_MAX             = 4,
};

// Enum SS.EKoratZBurstDashState
// NumValues: 0x0006
enum class EKoratZBurstDashState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	DashCombatives                           = 4,
	EKoratZBurstDashState_MAX                = 5,
};

// Enum SS.EKoratDashUpDownState
// NumValues: 0x0006
enum class EKoratDashUpDownState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	LP                                       = 2,
	OT                                       = 3,
	Landing                                  = 4,
	EKoratDashUpDownState_MAX                = 5,
};

// Enum SS.EKoratDashUpDownType
// NumValues: 0x0003
enum class EKoratDashUpDownType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	EKoratDashUpDownType_MAX                 = 2,
};

// Enum SS.EKoratJumpState
// NumValues: 0x0007
enum class EKoratJumpState : uint8
{
	OFF                                      = 0,
	IN_                                      = 1,
	UP                                       = 2,
	DW                                       = 3,
	OT                                       = 4,
	FT                                       = 5,
	EKoratJumpState_MAX                      = 6,
};

// Enum SS.EKoratStepState
// NumValues: 0x0005
enum class EKoratStepState : uint8
{
	OFF                                      = 0,
	TURN                                     = 1,
	IN_                                      = 2,
	OT                                       = 3,
	EKoratStepState_MAX                      = 4,
};

// Enum SS.EKoratStepType
// NumValues: 0x000A
enum class EKoratStepType : uint8
{
	Front                                    = 0,
	FlyBack                                  = 1,
	FlyLeft                                  = 2,
	FlyRight                                 = 3,
	GroundBack                               = 4,
	GroundLeft                               = 5,
	GroundRight                              = 6,
	LongFront                                = 7,
	LongBack                                 = 8,
	EKoratStepType_MAX                       = 9,
};

// Enum SS.EKoratStunReactionState
// NumValues: 0x0004
enum class EKoratStunReactionState : uint8
{
	OFF                                      = 0,
	STAND                                    = 1,
	DOWN                                     = 2,
	EKoratStunReactionState_MAX              = 3,
};

// Enum SS.EKoratWallUkemiState
// NumValues: 0x0004
enum class EKoratWallUkemiState : uint8
{
	OFF                                      = 0,
	STAND                                    = 1,
	DOWN                                     = 2,
	EKoratWallUkemiState_MAX                 = 3,
};

// Enum SS.EUKoratCharacterMovementAct
// NumValues: 0x0005
enum class EUKoratCharacterMovementAct : uint8
{
	Idle                                     = 0,
	Move                                     = 1,
	MoveToReference                          = 2,
	Crash                                    = 3,
	EUKoratCharacterMovementAct_MAX          = 4,
};

// Enum SS.EKoratViewSwitchEventType
// NumValues: 0x0004
enum class EKoratViewSwitchEventType : uint8
{
	KMesh                                    = 0,
	KShadow                                  = 1,
	KNum                                     = 2,
	EKoratViewSwitchEventType_MAX            = 3,
};

// Enum SS.EKoratViewSwitchOption
// NumValues: 0x0009
enum class EKoratViewSwitchOption : uint8
{
	KFirstPersonMode                         = 0,
	KAnimState                               = 1,
	KAnimNotify                              = 2,
	KLevelSequence                           = 3,
	KZItem                                   = 4,
	KLevelSequenceLow                        = 5,
	KNum                                     = 6,
	KDefault                                 = 3,
	EKoratViewSwitchOption_MAX               = 7,
};

// Enum SS.EKoratCharacterUIActionFootIKMode
// NumValues: 0x0005
enum class EKoratCharacterUIActionFootIKMode : uint8
{
	NotSet                                   = 0,
	Disable                                  = 1,
	EnableFlying                             = 2,
	EnableWalking                            = 3,
	EKoratCharacterUIActionFootIKMode_MAX    = 4,
};

// Enum SS.EKoratDestructionObjectType
// NumValues: 0x0012
enum class EKoratDestructionObjectType : uint8
{
	Uninit                                   = 0,
	RigidSObject                             = 1,
	FragmentibleSObject                      = 2,
	SwitchGroundSObject                      = 3,
	SwitchMObject                            = 4,
	SwitchGOject                             = 5,
	SwitchBObject                            = 6,
	FragmentibleGround                       = 7,
	Ground                                   = 8,
	FragmentiblePartObject                   = 9,
	NonDestructive                           = 10,
	AfterEvacuationSwitchGOject              = 11,
	AfterEvacuationSwitchBObject             = 12,
	AfterEvacuationRigidSObject              = 13,
	AfterEvacuationFragmentibleSObject       = 14,
	AfterEvacuationSwitchGroundSObject       = 15,
	AfterEvacuationSwitchMObject             = 16,
	EKoratDestructionObjectType_MAX          = 17,
};

// Enum SS.EKoratDestructionHitEventType
// NumValues: 0x0003
enum class EKoratDestructionHitEventType : uint8
{
	Hit                                      = 0,
	Overlay                                  = 1,
	EKoratDestructionHitEventType_MAX        = 2,
};

// Enum SS.EKoratStaticMeshDestructedExecType
// NumValues: 0x0005
enum class EKoratStaticMeshDestructedExecType : uint8
{
	None                                     = 0,
	Vanishing                                = 1,
	RigidDestruction                         = 2,
	SwitchDestruction                        = 3,
	EKoratStaticMeshDestructedExecType_MAX   = 4,
};

// Enum SS.EKoratDramaticDirectingTriggerListItem
// NumValues: 0x0019
enum class EKoratDramaticDirectingTriggerListItem : uint8
{
	None                                     = 0,
	Unconditional                            = 1,
	KnockDown                                = 2,
	KnockDownBlast1                          = 3,
	KnockDownBlast2                          = 4,
	KnockDownUB                              = 5,
	MoreHPGauge                              = 6,
	LseeHPGauge                              = 7,
	InstantHPGauge                           = 8,
	ElapsedTime                              = 9,
	OnTime                                   = 10,
	BeyondTime                               = 11,
	RemaingTime                              = 12,
	ActionHit                                = 13,
	DefendAttack                             = 14,
	ActionNoHit                              = 15,
	StateChanged                             = 16,
	CurrentState                             = 17,
	FormChanged                              = 18,
	CurrentForm                              = 19,
	Taketurns                                = 20,
	ActionEnd                                = 21,
	Emote                                    = 22,
	ActionStart                              = 23,
	EKoratDramaticDirectingTriggerListItem_MAX = 24,
};

// Enum SS.EKoratDramaticDirectionrListItem
// NumValues: 0x001E
enum class EKoratDramaticDirectionrListItem : uint8
{
	None                                     = 0,
	HPGaugeRecovery                          = 1,
	SPGaugeRecovery                          = 2,
	HPGaugeDamage                            = 3,
	SPGaugeDamage                            = 4,
	HPGaugeDirectSet                         = 5,
	SPGaugeDirectSet                         = 6,
	Conversation                             = 7,
	CharacterChange                          = 8,
	CharacteFormChange                       = 9,
	CharacteCoalescence                      = 10,
	ZItemEquip                               = 11,
	ZItemRemove                              = 12,
	SureToHitBlast1                          = 13,
	SureToHitBlast2                          = 14,
	SureToHitUB                              = 15,
	BlastForbid                              = 16,
	BlastAllow                               = 17,
	FormChangeForbid                         = 18,
	FormChangeAllow                          = 19,
	CpuLevelChange                           = 20,
	CpuThinkingChange                        = 21,
	BGMChange                                = 22,
	Activate                                 = 23,
	DirectingTableChange                     = 24,
	EventRequest                             = 25,
	Emote                                    = 26,
	Buff                                     = 27,
	ResetElapsedTime                         = 28,
	EKoratDramaticDirectionrListItem_MAX     = 29,
};

// Enum SS.EKoratEmitterParamDataType
// NumValues: 0x0003
enum class EKoratEmitterParamDataType : uint8
{
	LocatorActor                             = 0,
	Num                                      = 1,
	EKoratEmitterParamDataType_MAX           = 2,
};

// Enum SS.ESSEventSceneSubtitleLanguage
// NumValues: 0x0012
enum class ESSEventSceneSubtitleLanguage : uint8
{
	Japanese                                 = 0,
	Indonesian                               = 1,
	EnglishUS                                = 2,
	Korean                                   = 3,
	ChineseHans                              = 4,
	ChineseHant                              = 5,
	Thai                                     = 6,
	Arabic                                   = 7,
	FrenchFR                                 = 8,
	German                                   = 9,
	Italian                                  = 10,
	Polish                                   = 11,
	PortugueseBR                             = 12,
	Russian                                  = 13,
	SpanishES                                = 14,
	Spanish419                               = 15,
	Num                                      = 16,
	ESSEventSceneSubtitleLanguage_MAX        = 17,
};

// Enum SS.ESSEventSceneSubtitleLanguageGroup
// NumValues: 0x0012
enum class ESSEventSceneSubtitleLanguageGroup : uint8
{
	IDX_0                                    = 0,
	IDX_1                                    = 1,
	IDX_2                                    = 2,
	IDX_3                                    = 3,
	IDX_4                                    = 4,
	IDX_5                                    = 5,
	IDX_6                                    = 6,
	IDX_7                                    = 7,
	IDX_8                                    = 8,
	IDX_9                                    = 9,
	IDX_10                                   = 10,
	IDX_11                                   = 11,
	IDX_12                                   = 12,
	IDX_13                                   = 13,
	IDX_14                                   = 14,
	IDX_15                                   = 15,
	Num                                      = 16,
	ESSEventSceneSubtitleLanguageGroup_MAX   = 17,
};

// Enum SS.ESSEventSceneSubtitleType
// NumValues: 0x0005
enum class ESSEventSceneSubtitleType : uint8
{
	None                                     = 0,
	PT                                       = 1,
	TS                                       = 2,
	Num                                      = 3,
	ESSEventSceneSubtitleType_MAX            = 4,
};

// Enum SS.EKoratFreeTimelineActorPlayType
// NumValues: 0x0008
enum class EKoratFreeTimelineActorPlayType : uint8
{
	None                                     = 0,
	Play                                     = 1,
	PlayLP                                   = 2,
	PlayOT                                   = 3,
	Stop                                     = 4,
	PlayMAX                                  = 5,
	Num                                      = 6,
	EKoratFreeTimelineActorPlayType_MAX      = 7,
};

// Enum SS.EKoratFreeTimelineOverrideTransformPreset
// NumValues: 0x0013
enum class EKoratFreeTimelineOverrideTransformPreset : uint8
{
	Custom                                   = 0,
	Identity                                 = 1,
	HitLocationOnly                          = 2,
	HitLocationAndHitRotation                = 3,
	HitLocationAndCharaYaw                   = 4,
	HitLocationAndCharaInputMoveRotation     = 5,
	MyselfLocationOnly                       = 6,
	MyselfLocationAndMyselfRotation          = 7,
	MyselfLocationAndRotateAndScale          = 8,
	MyselfLocationAndHitRotation             = 9,
	MyselfLocationAndCharaYaw                = 10,
	MyselfLocationAndCharaInputMoveRotation  = 11,
	OldType                                  = 12,
	CharacterSocketLocation                  = 13,
	CharacterSocketLocationAndCharaYaw       = 14,
	CharacterSocketLocationAndCharaYawAndScale = 15,
	CharacterSocketLocationAndRotationAndScale = 16,
	DecalPreset                              = 17,
	EKoratFreeTimelineOverrideTransformPreset_MAX = 18,
};

// Enum SS.EKoratFreeTimelineTransformElement
// NumValues: 0x0011
enum class EKoratFreeTimelineTransformElement : uint8
{
	Identity                                 = 0,
	MyselfLocation                           = 1,
	MyselfRotation                           = 2,
	MyselfScale                              = 3,
	HitLocation                              = 4,
	HitRotation                              = 5,
	CharacterLocation                        = 6,
	CharacterYawRotation                     = 7,
	CharacterInputMoveRotation               = 8,
	OffsetLocation                           = 9,
	OffsetRotation                           = 10,
	OffsetScale                              = 11,
	CharacterSocketLocation                  = 12,
	CharacterSocketRotation                  = 13,
	CharacterSocketScale                     = 14,
	HitImpactPoint                           = 15,
	EKoratFreeTimelineTransformElement_MAX   = 16,
};

// Enum SS.EKoratFreeTimelineHitInfoState
// NumValues: 0x0008
enum class EKoratFreeTimelineHitInfoState : uint8
{
	None                                     = 0,
	New                                      = 1,
	UseRequest                               = 2,
	Using                                    = 3,
	Destroy                                  = 4,
	Continue                                 = 5,
	Num                                      = 6,
	EKoratFreeTimelineHitInfoState_MAX       = 7,
};

// Enum SS.EKoratFreeTimelinePlayType
// NumValues: 0x0007
enum class EKoratFreeTimelinePlayType : uint8
{
	None                                     = 0,
	Play                                     = 1,
	PlayLP                                   = 2,
	PlayOT                                   = 3,
	Stop                                     = 4,
	PlayMAX                                  = 5,
	EKoratFreeTimelinePlayType_MAX           = 6,
};

// Enum SS.EKoratDecalMaterialType
// NumValues: 0x0005
enum class EKoratDecalMaterialType : uint8
{
	Small                                    = 0,
	Middle                                   = 1,
	Large                                    = 2,
	Num                                      = 3,
	EKoratDecalMaterialType_MAX              = 4,
};

// Enum SS.EKoratMapWeatherType
// NumValues: 0x0003
enum class EKoratMapWeatherType : uint8
{
	CAMERA                                   = 0,
	CHARA                                    = 1,
	MAX                                      = 2,
};

// Enum SS.EKoratMovieSceneBattleSubtitleTargetType
// NumValues: 0x0003
enum class EKoratMovieSceneBattleSubtitleTargetType : uint8
{
	Myself                                   = 0,
	Opponent                                 = 1,
	EKoratMovieSceneBattleSubtitleTargetType_MAX = 2,
};

// Enum SS.EKoratMovieSceneEventSceneTriggerType
// NumValues: 0x0003
enum class EKoratMovieSceneEventSceneTriggerType : uint8
{
	Default                                  = 0,
	Constant                                 = 1,
	EKoratMovieSceneEventSceneTriggerType_MAX = 2,
};

// Enum SS.EKoratMovieSceneEventSceneSpeakerType
// NumValues: 0x000B
enum class EKoratMovieSceneEventSceneSpeakerType : uint8
{
	RebindEvent00                            = 0,
	RebindEvent01                            = 1,
	RebindEvent02                            = 2,
	RebindEvent03                            = 3,
	RebindEvent04                            = 4,
	RebindEvent05                            = 5,
	RebindEvent06                            = 6,
	RebindEvent07                            = 7,
	RebindEvent08                            = 8,
	RebindEvent09                            = 9,
	EKoratMovieSceneEventSceneSpeakerType_MAX = 10,
};

// Enum SS.EKoratMovieSceneLookAtPartFlags
// NumValues: 0x0008
enum class EKoratMovieSceneLookAtPartFlags : uint8
{
	None                                     = 0,
	Body                                     = 1,
	Head                                     = 2,
	Eye                                      = 3,
	BodyAndHead                              = 4,
	HeadAndEye                               = 5,
	BodyAndHeadAndEye                        = 6,
	EKoratMovieSceneLookAtPartFlags_MAX      = 7,
};

// Enum SS.EKoratFreeTimelineActorRequest
// NumValues: 0x0008
enum class EKoratFreeTimelineActorRequest : uint8
{
	None                                     = 0,
	OneShotPlay                              = 1,
	Play                                     = 2,
	Stop                                     = 3,
	Pause                                    = 4,
	Destroy                                  = 5,
	Num                                      = 6,
	EKoratFreeTimelineActorRequest_MAX       = 7,
};

// Enum SS.EKoratPostProcessAgentActorBindType
// NumValues: 0x0005
enum class EKoratPostProcessAgentActorBindType : uint8
{
	LEVEL                                    = 0,
	CHARACTER                                = 1,
	DYNAMIC                                  = 2,
	RESIDENT                                 = 3,
	MAX                                      = 4,
};

// Enum SS.EKoratPostProcessAgentType
// NumValues: 0x0004
enum class EKoratPostProcessAgentType : uint8
{
	CHAMELEON                                = 0,
	POSTPROCESSVOLUME                        = 1,
	CAMERA                                   = 2,
	MAX                                      = 3,
};

// Enum SS.EKoratPostProcessCameraType
// NumValues: 0x0004
enum class EKoratPostProcessCameraType : uint8
{
	ALL                                      = 0,
	SELF                                     = 1,
	OPPOMENT                                 = 2,
	EKoratPostProcessCameraType_MAX          = 3,
};

// Enum SS.EKoratPostProcessOverrideType
// NumValues: 0x0003
enum class EKoratPostProcessOverrideType : uint8
{
	OVERRIDE                                 = 0,
	RESET                                    = 1,
	EKoratPostProcessOverrideType_MAX        = 2,
};

// Enum SS.EKoratPostProcessChameleonBindType
// NumValues: 0x0019
enum class EKoratPostProcessChameleonBindType : uint8
{
	POST_COMMON                              = 0,
	STAGE_POS_00_00                          = 1,
	STAGE_POS_00_01                          = 2,
	STAGE_POS_00_02                          = 3,
	STAGE_POS_00_03                          = 4,
	STAGE_POS_00_04                          = 5,
	STAGE_POS_00_05                          = 6,
	STAGE_POS_00_06                          = 7,
	STAGE_POS_00_07                          = 8,
	STAGE_POS_00_08                          = 9,
	STAGE_POS_00_09                          = 10,
	CHARA                                    = 11,
	DYNAMIC                                  = 12,
	RESIDENT_POST_COMMON                     = 13,
	RESIDENT_STAGE_POS_00_00                 = 14,
	RESIDENT_STAGE_POS_00_01                 = 15,
	RESIDENT_STAGE_POS_00_02                 = 16,
	RESIDENT_STAGE_POS_00_03                 = 17,
	RESIDENT_STAGE_POS_00_04                 = 18,
	RESIDENT_STAGE_POS_00_05                 = 19,
	RESIDENT_STAGE_POS_00_06                 = 20,
	RESIDENT_STAGE_POS_00_07                 = 21,
	RESIDENT_STAGE_POS_00_08                 = 22,
	RESIDENT_STAGE_POS_00_09                 = 23,
	MAX                                      = 24,
};

// Enum SS.EKoratPostProcessVolumeBindType
// NumValues: 0x0016
enum class EKoratPostProcessVolumeBindType : uint8
{
	STAGE_POS_00_00                          = 0,
	STAGE_POS_00_01                          = 1,
	STAGE_POS_00_02                          = 2,
	STAGE_POS_00_03                          = 3,
	STAGE_POS_00_04                          = 4,
	STAGE_POS_00_05                          = 5,
	STAGE_POS_00_06                          = 6,
	STAGE_POS_00_07                          = 7,
	STAGE_POS_00_08                          = 8,
	STAGE_POS_00_09                          = 9,
	DYNAMIC                                  = 10,
	RESIDENT_STAGE_POS_00_00                 = 11,
	RESIDENT_STAGE_POS_00_01                 = 12,
	RESIDENT_STAGE_POS_00_02                 = 13,
	RESIDENT_STAGE_POS_00_03                 = 14,
	RESIDENT_STAGE_POS_00_04                 = 15,
	RESIDENT_STAGE_POS_00_05                 = 16,
	RESIDENT_STAGE_POS_00_06                 = 17,
	RESIDENT_STAGE_POS_00_07                 = 18,
	RESIDENT_STAGE_POS_00_08                 = 19,
	RESIDENT_STAGE_POS_00_09                 = 20,
	MAX                                      = 21,
};

// Enum SS.EKoratPostProcessPlayerID
// NumValues: 0x0004
enum class EKoratPostProcessPlayerID : uint8
{
	PLAYER_1P                                = 0,
	PLAYER_2P                                = 1,
	MAX                                      = 2,
	NONE                                     = 3,
};

// Enum SS.EKoratAdvancedBlendMode
// NumValues: 0x0010
enum class EKoratAdvancedBlendMode : uint8
{
	EKBM_Normal                              = 0,
	EKBM_ColorBurn                           = 1,
	EKBM_ColorDodge                          = 2,
	EKBM_Difference                          = 3,
	EKBM_Exclusion                           = 4,
	EKBM_Hardlight                           = 5,
	EKBM_LinearBurn                          = 6,
	EKBM_LinearLight                         = 7,
	EKBM_PinLight                            = 8,
	EKBM_SoftLight                           = 9,
	EKBM_Screen                              = 10,
	EKBM_Lighten                             = 11,
	EKBM_Darken                              = 12,
	EKBM_Overlay                             = 13,
	EKBM_Multiply                            = 14,
	EKBM_MAX                                 = 15,
};

// Enum SS.EKoratColorChannels
// NumValues: 0x0004
enum class EKoratColorChannels : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	EKoratColorChannels_MAX                  = 3,
};

// Enum SS.EKoratDrawingNoiseModes
// NumValues: 0x0003
enum class EKoratDrawingNoiseModes : uint8
{
	Simplex                                  = 0,
	Perlin                                   = 1,
	EKoratDrawingNoiseModes_MAX              = 2,
};

// Enum SS.EKoratLOOKPresetsEnum
// NumValues: 0x0097
enum class EKoratLOOKPresetsEnum : uint8
{
	Alienize1                                = 0,
	Alienize2                                = 1,
	Alienize3                                = 2,
	Alienize4                                = 3,
	Alienize5                                = 4,
	Alienize6                                = 5,
	Bloom1                                   = 6,
	Bloom2                                   = 7,
	Bloom3                                   = 8,
	Classic1                                 = 9,
	Classic2                                 = 10,
	Classic3                                 = 11,
	Classic4                                 = 12,
	Classic5                                 = 13,
	Classic6                                 = 14,
	Classic7                                 = 15,
	Classic8                                 = 16,
	Classic9                                 = 17,
	Classic10                                = 18,
	Classic11                                = 19,
	Classic12                                = 20,
	Classic13                                = 21,
	Classic14                                = 22,
	CLayerAqua                               = 23,
	CLayerBlue                               = 24,
	CLayerGreen                              = 25,
	CLayerOrange                             = 26,
	CLayerPurple                             = 27,
	CLayerRed                                = 28,
	CLayerYellow                             = 29,
	Color1                                   = 30,
	Color2                                   = 31,
	Color3                                   = 32,
	Color4                                   = 33,
	Color5                                   = 34,
	Color6                                   = 35,
	Dark1                                    = 36,
	Dark2                                    = 37,
	Dark3                                    = 38,
	Dark4                                    = 39,
	Dark5                                    = 40,
	Dark6                                    = 41,
	Dark7                                    = 42,
	Dark8                                    = 43,
	Draw1                                    = 44,
	Draw2                                    = 45,
	Draw3                                    = 46,
	Draw4                                    = 47,
	Draw5                                    = 48,
	Draw6                                    = 49,
	Draw7                                    = 50,
	Draw8                                    = 51,
	Draw9                                    = 52,
	Enhance1                                 = 53,
	Enhance2                                 = 54,
	Enhance3                                 = 55,
	Enhance4                                 = 56,
	Enhance5                                 = 57,
	Enhance6                                 = 58,
	Enhance7                                 = 59,
	Enhance8                                 = 60,
	Enhance9                                 = 61,
	Enhance10                                = 62,
	FakeHDR1                                 = 63,
	FakeHDR2                                 = 64,
	FakeHDR3                                 = 65,
	Invert                                   = 66,
	InvertGray                               = 67,
	Mono1                                    = 68,
	Mono2                                    = 69,
	Mono3                                    = 70,
	Mono4                                    = 71,
	Mono5                                    = 72,
	Mono6                                    = 73,
	Mono7                                    = 74,
	Mono8                                    = 75,
	Mono9                                    = 76,
	Mono10                                   = 77,
	Movie1                                   = 78,
	Movie2                                   = 79,
	Movie3                                   = 80,
	Movie4                                   = 81,
	Movie5                                   = 82,
	Movie6                                   = 83,
	Movie7                                   = 84,
	Old1                                     = 85,
	Old2                                     = 86,
	Old3                                     = 87,
	Old4                                     = 88,
	Posterize1                               = 89,
	Saturate1                                = 90,
	Saturate2                                = 91,
	Saturate3                                = 92,
	Steam1                                   = 93,
	Steam2                                   = 94,
	Steam3                                   = 95,
	Steam4                                   = 96,
	Steam5                                   = 97,
	Steam6                                   = 98,
	Steam7                                   = 99,
	Emulation_3_Strip                        = 100,
	Emulation_Bleach_Bypass                  = 101,
	Emulation_Cineon                         = 102,
	Emulation_Film2Vid_1                     = 103,
	Emulation_Film2Vid_2                     = 104,
	Emulation_Fuj_3510_1                     = 105,
	Emulation_Fuj_3510_2                     = 106,
	Emulation_Fuj_3510_3                     = 107,
	Emulation_General_Filmstock              = 108,
	Emulation_JR45                           = 109,
	Emulation_Kodachrome                     = 110,
	Emulation_Kodk_2383                      = 111,
	Emulation_Kodk_2393_1                    = 112,
	Emulation_Kodk_2393_2                    = 113,
	Emulation_Kodk_2395_1                    = 114,
	Emulation_Kodk_2395_2                    = 115,
	Emulation_SA5                            = 116,
	Emulation_SA6                            = 117,
	Emulation_SA7_1                          = 118,
	Emulation_SA7_2                          = 119,
	Emulation_SA7_3                          = 120,
	Emulation_SA7_4                          = 121,
	Emulation_SA8                            = 122,
	Emulation_SA9                            = 123,
	Filmic_Abduction                         = 124,
	Filmic_Cold_Blood_Murderer               = 125,
	Filmic_First_Date                        = 126,
	Filmic_Futurama                          = 127,
	Filmic_Gladiators                        = 128,
	Filmic_Golden_Age                        = 129,
	Filmic_Hacker_Room                       = 130,
	Filmic_Hazard                            = 131,
	Filmic_Holy_TealOrange                   = 132,
	Filmic_Horror_Night                      = 133,
	Filmic_Last_hope                         = 134,
	Filmic_Middle_Earth                      = 135,
	Filmic_Nature_Rise                       = 136,
	Filmic_Pandora                           = 137,
	Filmic_Rogue                             = 138,
	Lighting_Candle_Light                    = 139,
	Lighting_Day_to_Night                    = 140,
	Lighting_Moonlight                       = 141,
	Weather_Everest_H                        = 142,
	Weather_Everest_L                        = 143,
	Weather_Everest_M                        = 144,
	Weather_Heavy_Sunset                     = 145,
	Weather_Late_Sunset                      = 146,
	Weather_Lightning                        = 147,
	Weather_Underwater                       = 148,
	Weather_Winter                           = 149,
	EKoratLOOKPresetsEnum_MAX                = 150,
};

// Enum SS.EKoratPostprocessCndParamTypeFloat
// NumValues: 0x0004
enum class EKoratPostprocessCndParamTypeFloat : uint8
{
	DOF_Kernel_MaxBackgroundRadius           = 0,
	DOF_Kernel_MaxForegroundRadius           = 1,
	DOF_Scatter_MaxSpriteRatio               = 2,
	MAX                                      = 3,
};

// Enum SS.EKoratPostprocessCndParamTypeInt
// NumValues: 0x0002
enum class EKoratPostprocessCndParamTypeInt : uint8
{
	TEST                                     = 0,
	MAX                                      = 1,
};

// Enum SS.EKoratPostprocessCndParamTypeBool
// NumValues: 0x0002
enum class EKoratPostprocessCndParamTypeBool : uint8
{
	TEST                                     = 0,
	MAX                                      = 1,
};

// Enum SS.EPencilTransitionColorType
// NumValues: 0x0006
enum class EPencilTransitionColorType : uint8
{
	None                                     = 0,
	Screen                                   = 1,
	Character                                = 2,
	LingeringEffect                          = 3,
	Num                                      = 4,
	EPencilTransitionColorType_MAX           = 5,
};

// Enum SS.EKoratCharacterEffectOutlineColorType
// NumValues: 0x0005
enum class EKoratCharacterEffectOutlineColorType : uint8
{
	Type00                                   = 0,
	Type01                                   = 1,
	Type02                                   = 2,
	Num                                      = 3,
	EKoratCharacterEffectOutlineColorType_MAX = 4,
};

// Enum SS.EKoratSequenceSoundControlType
// NumValues: 0x0008
enum class EKoratSequenceSoundControlType : uint8
{
	None                                     = 0,
	Play                                     = 1,
	Pause                                    = 2,
	PauseBreak                               = 3,
	Stop                                     = 4,
	StopByManagedId                          = 5,
	RePlay                                   = 6,
	EKoratSequenceSoundControlType_MAX       = 7,
};

// Enum SS.EKoratSequenceSoundSheetType
// NumValues: 0x0003
enum class EKoratSequenceSoundSheetType : uint8
{
	General                                  = 0,
	Chara                                    = 1,
	EKoratSequenceSoundSheetType_MAX         = 2,
};

// Enum SS.EKoratSequenceSoundBGMType
// NumValues: 0x0003
enum class EKoratSequenceSoundBGMType : uint8
{
	BGM                                      = 0,
	InsertBGM                                = 1,
	EKoratSequenceSoundBGMType_MAX           = 2,
};

// Enum SS.EKoratPatternBGMName
// NumValues: 0x0005
enum class EKoratPatternBGMName : uint8
{
	None                                     = 0,
	Appearance                               = 1,
	Fate                                     = 2,
	Result                                   = 3,
	EKoratPatternBGMName_MAX                 = 4,
};

// Enum SS.EKoratSequenceSoundCameraType
// NumValues: 0x0004
enum class EKoratSequenceSoundCameraType : uint8
{
	ALL                                      = 0,
	SELF                                     = 1,
	OPPOMENT                                 = 2,
	EKoratSequenceSoundCameraType_MAX        = 3,
};

// Enum SS.ESSTriggerEffectMode
// NumValues: 0x0007
enum class ESSTriggerEffectMode : uint32
{
	KOFF                                     = 0,
	KFeedback                                = 1,
	KWeapon                                  = 2,
	KVibration                               = 3,
	KMultipleFeedback                        = 4,
	KMultipleVibration                       = 5,
	ESSTriggerEffectMode_MAX                 = 6,
};

// Enum SS.ESSMapLoadType
// NumValues: 0x0004
enum class ESSMapLoadType : uint8
{
	None                                     = 0,
	Swap                                     = 1,
	SwapBattleMap                            = 2,
	ESSMapLoadType_MAX                       = 3,
};

// Enum SS.ESSContainerSubLevelVisibleMode
// NumValues: 0x0004
enum class ESSContainerSubLevelVisibleMode : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	EndTransition                            = 2,
	ESSContainerSubLevelVisibleMode_MAX      = 3,
};

// Enum SS.ECharacterStateNotifyForWeather
// NumValues: 0x0005
enum class ECharacterStateNotifyForWeather : uint8
{
	ChargeStart                              = 0,
	ChargeCancel                             = 1,
	ChangeCharacter                          = 2,
	Num                                      = 3,
	ECharacterStateNotifyForWeather_MAX      = 4,
};

// Enum SS.EKoratWeatherRequestPhase
// NumValues: 0x0007
enum class EKoratWeatherRequestPhase : uint8
{
	PhaseNormal                              = 0,
	PhaseCharging                            = 1,
	PhaseSparking                            = 2,
	PhaseChargeCancel                        = 3,
	PhaseRestore                             = 4,
	PhaseForceRestore                        = 5,
	EKoratWeatherRequestPhase_MAX            = 6,
};

// Enum SS.EKoratWeatherRunState
// NumValues: 0x0005
enum class EKoratWeatherRunState : uint8
{
	Uninitialize                             = 0,
	Initialize                               = 1,
	Normal                                   = 2,
	Num                                      = 3,
	EKoratWeatherRunState_MAX                = 4,
};

// Enum SS.EKoratWeatherModeState
// NumValues: 0x000A
enum class EKoratWeatherModeState : uint8
{
	Normal                                   = 0,
	Charge                                   = 1,
	TransitionCharging                       = 2,
	Sparking                                 = 3,
	TransitionSparking                       = 4,
	TransitionForceSparking                  = 5,
	CancelCharge                             = 6,
	TransFinish                              = 7,
	Num                                      = 8,
	EKoratWeatherModeState_MAX               = 9,
};

// Enum SS.EKoratWeatherSection
// NumValues: 0x0007
enum class EKoratWeatherSection : uint8
{
	Level1                                   = 0,
	Level2                                   = 1,
	Level3                                   = 2,
	Level1to2                                = 3,
	Level2to3                                = 4,
	Level3to1                                = 5,
	EKoratWeatherSection_MAX                 = 6,
};

// Enum SS.ESofdec2MovieMode
// NumValues: 0x0006
enum class ESofdec2MovieMode : uint8
{
	ESofdec2MovieModeNon                     = 0,
	ESofdec2MovieModePlay                    = 1,
	ESofdec2MovieModeStop                    = 2,
	ESofdec2MovieModePause                   = 3,
	ESofdec2MovieModeEnd                     = 4,
	ESofdec2MovieMode_MAX                    = 5,
};

// Enum SS.EAiEnabledType
// NumValues: 0x0004
enum class EAiEnabledType : uint8
{
	None                                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EAiEnabledType_MAX                       = 3,
};

// Enum SS.ESSAiDefenseType
// NumValues: 0x0007
enum class ESSAiDefenseType : uint8
{
	Weak                                     = 0,
	Normal                                   = 1,
	Strong                                   = 2,
	WeakSearchOff                            = 3,
	NormalSearchOff                          = 4,
	StrongSearchOff                          = 5,
	Max                                      = 6,
};

// Enum SS.EAiCheckMoveDirectionType
// NumValues: 0x0007
enum class EAiCheckMoveDirectionType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Up                                       = 4,
	Down                                     = 5,
	EAiCheckMoveDirectionType_MAX            = 6,
};

// Enum SS.EAiRushDerivedActionType
// NumValues: 0x0007
enum class EAiRushDerivedActionType : uint8
{
	HFN                                      = 0,
	FLK                                      = 1,
	SCN                                      = 2,
	RHN                                      = 3,
	BWN                                      = 4,
	RWN                                      = 5,
	EAiRushDerivedActionType_MAX             = 6,
};

// Enum SS.EAiSparkingComboRemainingHpType
// NumValues: 0x0003
enum class EAiSparkingComboRemainingHpType : uint8
{
	HightHp                                  = 0,
	LowHp                                    = 1,
	EAiSparkingComboRemainingHpType_MAX      = 2,
};

// Enum SS.EAiSparkingComboPersonalityType
// NumValues: 0x0004
enum class EAiSparkingComboPersonalityType : uint8
{
	CautiousFaction                          = 0,
	Activist                                 = 1,
	Confident                                = 2,
	EAiSparkingComboPersonalityType_MAX      = 3,
};

// Enum SS.EAiEmotionType
// NumValues: 0x000A
enum class EAiEmotionType : uint8
{
	None                                     = 0,
	Aggression                               = 1,
	Cautiousness                             = 2,
	SenseOfSuperiority                       = 3,
	Fear                                     = 4,
	Selflessness                             = 5,
	Vigilance                                = 6,
	IntentToMurder                           = 7,
	Impatience                               = 8,
	EAiEmotionType_MAX                       = 9,
};

// Enum SS.ESSAiInputType
// NumValues: 0x0008
enum class ESSAiInputType : uint8
{
	None                                     = 0,
	Push                                     = 1,
	Hold                                     = 2,
	Repeat                                   = 3,
	LatePush                                 = 4,
	LateHold                                 = 5,
	LateRepeat                               = 6,
	ESSAiInputType_MAX                       = 7,
};

// Enum SS.ESSAiInputOffType
// NumValues: 0x0003
enum class ESSAiInputOffType : uint8
{
	None                                     = 0,
	PowerImpactOver                          = 1,
	ESSAiInputOffType_MAX                    = 2,
};

// Enum SS.ESSAiInputSuccessJudgmentType
// NumValues: 0x0013
enum class ESSAiInputSuccessJudgmentType : uint8
{
	ActionLabelEnd                           = 0,
	TimeEnd                                  = 1,
	RangeEnd                                 = 2,
	ImpactEnd                                = 3,
	ImmediateEnd                             = 4,
	NoBulletsNearbyEnd                       = 5,
	SparkingEnd                              = 6,
	PathMoveEnd                              = 7,
	SearchMoveEnd                            = 8,
	ChargeLvEnd                              = 9,
	DuringAction                             = 10,
	HeightDifEnd                             = 11,
	GroundEnd                                = 12,
	DisablesChargeEnd                        = 13,
	SpeedImpactOnceInputTiming               = 14,
	SpeedImpactRapidInputTiming              = 15,
	CrashImpactInputTimingAttack             = 16,
	CrashImpactInputTimingDefense            = 17,
	Max                                      = 18,
};

// Enum SS.ESSAiProgramMoveType
// NumValues: 0x0008
enum class ESSAiProgramMoveType : uint8
{
	None                                     = 0,
	DragonDashMove                           = 1,
	PathMove                                 = 2,
	PathDragonDash                           = 3,
	SearchMove                               = 4,
	SearchDragonDash                         = 5,
	SearchAlignTheYaxisOfTheRStickWithTheTarget = 6,
	Max                                      = 7,
};

// Enum SS.ESSAiPathMoveTargetType
// NumValues: 0x0004
enum class ESSAiPathMoveTargetType : uint8
{
	None                                     = 0,
	Target                                   = 1,
	SafeArea                                 = 2,
	Max                                      = 3,
};

// Enum SS.ESSAiRangeType
// NumValues: 0x0006
enum class ESSAiRangeType : uint8
{
	RangeShort                               = 0,
	RangeShortMedium                         = 1,
	RangeMedium                              = 2,
	RangeMediumLong                          = 3,
	RangeLong                                = 4,
	ESSAiRangeType_MAX                       = 5,
};

// Enum SS.ESSAiBlastType
// NumValues: 0x0012
enum class ESSAiBlastType : uint8
{
	None                                     = 0,
	B1_BoostUp                               = 1,
	B1_ReserveDefenseAssist                  = 2,
	B1_QuickDefenseAssist                    = 3,
	B1_AttackAssist                          = 4,
	B2UB_BeamBulletS                         = 5,
	B2UB_BeamBulletM                         = 6,
	B2UB_BeamBulletL                         = 7,
	B2UB_SelfExplosion                       = 8,
	B2UB_TargetExplosion                     = 9,
	B2UB_TackleDemo                          = 10,
	B2UB_TackleNoDemo                        = 11,
	B2UB_Throw                               = 12,
	B2UB_FastActivation                      = 13,
	B2UB_PenetrateObstacles                  = 14,
	B2UB_PossibleCounterBlast                = 15,
	B2UB_PossibleBreakGuard                  = 16,
	ESSAiBlastType_MAX                       = 17,
};

// Enum SS.ESSAiUsableDecoratorType
// NumValues: 0x000F
enum class ESSAiUsableDecoratorType : uint8
{
	None                                     = 0,
	CoolTime                                 = 1,
	B1_BoostUp                               = 2,
	B1_ReserveDefenseAssist                  = 3,
	B1_QuickDefenseAssist                    = 4,
	B1_AttackAssist                          = 5,
	B2UB_BeamBulletS                         = 6,
	B2UB_BeamBulletM                         = 7,
	B2UB_BeamBulletL                         = 8,
	B2UB_SelfExplosion                       = 9,
	B2UB_TargetExplosion                     = 10,
	B2UB_TackleDemo                          = 11,
	B2UB_TackleNoDemo                        = 12,
	B2UB_Throw                               = 13,
	ESSAiUsableDecoratorType_MAX             = 14,
};

// Enum SS.ESSAiFormChangeType
// NumValues: 0x000E
enum class ESSAiFormChangeType : uint8
{
	None                                     = 0,
	Transform0                               = 1,
	Transform1                               = 2,
	Transform2                               = 3,
	Transform3                               = 4,
	Fusion0                                  = 5,
	Fusion1                                  = 6,
	Fusion2                                  = 7,
	Fusion3                                  = 8,
	Potara0                                  = 9,
	Potara1                                  = 10,
	Potara2                                  = 11,
	Potara3                                  = 12,
	Max                                      = 13,
};

// Enum SS.ESSAiEmotionTargetType
// NumValues: 0x0003
enum class ESSAiEmotionTargetType : uint8
{
	Myself                                   = 0,
	Target                                   = 1,
	ESSAiEmotionTargetType_MAX               = 2,
};

// Enum SS.ESSAiEmotionSignType
// NumValues: 0x0003
enum class ESSAiEmotionSignType : uint8
{
	More                                     = 0,
	Less                                     = 1,
	ESSAiEmotionSignType_MAX                 = 2,
};

// Enum SS.ESSAiNodeConditionResultType
// NumValues: 0x0004
enum class ESSAiNodeConditionResultType : uint8
{
	None                                     = 0,
	ResultTrue                               = 1,
	ResultFalse                              = 2,
	ESSAiNodeConditionResultType_MAX         = 3,
};

// Enum SS.EAiDirectionOfAttack
// NumValues: 0x0005
enum class EAiDirectionOfAttack : uint8
{
	DirFront                                 = 0,
	DirUp                                    = 1,
	DirDown                                  = 2,
	DirMax                                   = 3,
	EAiDirectionOfAttack_MAX                 = 4,
};

// Enum SS.ESSAiPadGenerationProcess
// NumValues: 0x0008
enum class ESSAiPadGenerationProcess : uint8
{
	Idle                                     = 0,
	WaitingInputSuccess                      = 1,
	WaitingForIdling                         = 2,
	InputSucccess                            = 3,
	InputFailureTimeOut                      = 4,
	InputFailureCancel                       = 5,
	InputFailureTimeOutIdle                  = 6,
	ESSAiPadGenerationProcess_MAX            = 7,
};

// Enum SS.ESSAiProbabilityType
// NumValues: 0x004A
enum class ESSAiProbabilityType : uint8
{
	GuidelinesAttack                         = 0,
	GuidelinesDefense                        = 1,
	GuidelinesWatch                          = 2,
	InterruptRevengeCounter                  = 3,
	InterruptFastAvoidance                   = 4,
	InterruptDefAscertain                    = 5,
	InterruptDefGuardUp                      = 6,
	InterruptDefGuardDown                    = 7,
	InterruptDefGuard                        = 8,
	InterruptPassive                         = 9,
	InterruptRushHighSpeedMoveCounter        = 10,
	InterruptVanishingAttack                 = 11,
	InterruptDragonHomingSmash               = 12,
	InterruptLightningAttack                 = 13,
	InterruptRushHighSpeedMove               = 14,
	InterruptBurstMeteor                     = 15,
	InterruptSparkingCombo                   = 16,
	ShortRangeObstructiveActionShort         = 17,
	ShortRangeStepInDerivationAction         = 18,
	ShortRangeCharacterCombo                 = 19,
	ShortRangeRush                           = 20,
	ShortRangeSmash                          = 21,
	ShortRangeRushFLK                        = 22,
	ShortRangeRushSCN                        = 23,
	ShortRangeRushHFN                        = 24,
	ShortRangeRushRHNR                       = 25,
	ShortRangeRushLFN                        = 26,
	ShortRangeRushGSN                        = 27,
	ShortRangeVanishingAssault               = 28,
	ShortRangeThrow                          = 29,
	ShortRangeRushKidan                      = 30,
	ShortRangeSkillAttackAssist              = 31,
	ShortRangeBlastThrow                     = 32,
	ShortRangeMoveBack                       = 33,
	ShortRangeMoveSide                       = 34,
	ShortRangeMoveGuard                      = 35,
	MediumRangeObstructiveActionLong         = 36,
	MediumRangeDashAttack                    = 37,
	MediumRangeDragonDashAttack              = 38,
	MediumRangeRushKidan                     = 39,
	MediumRangeSmashKidan                    = 40,
	MediumRangeSkillRoot                     = 41,
	MediumRangeSkillBoostUp                  = 42,
	MediumRangeSkillReserveDefenseAssist     = 43,
	MediumRangeSkillQuickDefenseAssist       = 44,
	MediumRangeBlastRoot                     = 45,
	MediumRangeBlastBeamBulletS              = 46,
	MediumRangeBlastBeamBulletM              = 47,
	MediumRangeBlastBeamBulletL              = 48,
	MediumRangeBlastSelfExplosion            = 49,
	MediumRangeBlastTargetExplosion          = 50,
	MediumRangeBlastTackleDemo               = 51,
	MediumRangeBlastTackleNoDemo             = 52,
	MediumRangeMoveFront                     = 53,
	MediumRangeMoveBack                      = 54,
	MediumRangeMoveShortDash                 = 55,
	MediumRangeMoveSide                      = 56,
	MediumRangeCharge                        = 57,
	MediumRangeMoveUp                        = 58,
	MediumRangeMoveDown                      = 59,
	MediumRangeDashUp                        = 60,
	MediumRangeDashDown                      = 61,
	MediumRangeMoveGuard                     = 62,
	MediumRangeEmote                         = 63,
	LongRangeDragonDashAttack                = 64,
	LongRangeRushKidan                       = 65,
	LongRangeMoveFront                       = 66,
	LongRangeDragonDashMedium                = 67,
	LongRangeMoveSide                        = 68,
	LongRangeShortDash                       = 69,
	LongRangeCharge                          = 70,
	LongRangeMoveUp                          = 71,
	LongRangeMoveDown                        = 72,
	Max                                      = 73,
};

// Enum SS.ESSAiDefenseProbabilityType
// NumValues: 0x0013
enum class ESSAiDefenseProbabilityType : uint8
{
	RevengeCounter                           = 0,
	Repel                                    = 1,
	FastAvoidance                            = 2,
	ZCounter                                 = 3,
	SuperCounter                             = 4,
	RevengeDash                              = 5,
	ThrowEscape                              = 6,
	DefAscertain                             = 7,
	DefSuperAscertain                        = 8,
	DefZCounterSuperAscertain                = 9,
	DefGuardUp                               = 10,
	DefGuardDown                             = 11,
	DefGuard                                 = 12,
	Passive                                  = 13,
	DragonDashPassive                        = 14,
	RushHighSpeedMoveCounter                 = 15,
	CounterBlastImpact                       = 16,
	MoveStandup                              = 17,
	Max                                      = 18,
};

// Enum SS.ESSAiReactionSpeedType
// NumValues: 0x000C
enum class ESSAiReactionSpeedType : uint8
{
	CombativesGuard                          = 0,
	BulletGuard                              = 1,
	FastAvoidance                            = 2,
	ZCounter                                 = 3,
	SuperCounter                             = 4,
	ThrowEscape                              = 5,
	Ascertain                                = 6,
	SuperAscertain                           = 7,
	BlownAwayReaction                        = 8,
	RushHighSpeedMoveCounter                 = 9,
	CrashImpact                              = 10,
	Max                                      = 11,
};

// Enum SS.EKoratVibrationControllerType
// NumValues: 0x0004
enum class EKoratVibrationControllerType : uint8
{
	None                                     = 0,
	Player1                                  = 1,
	Player2                                  = 2,
	EKoratVibrationControllerType_MAX        = 3,
};

// Enum SS.EBattleCameraMode
// NumValues: 0x0005
enum class EBattleCameraMode : uint8
{
	BattleCameraModeBattle                   = 0,
	BattleCameraModeFree                     = 1,
	BattleCameraModeLock                     = 2,
	BattleCameraModeMax                      = 3,
	EBattleCameraMode_MAX                    = 4,
};

// Enum SS.EBattleCameraTarget
// NumValues: 0x0006
enum class EBattleCameraTarget : uint8
{
	BattleCameraTargetNon                    = 0,
	BattleCameraTargetBetween                = 1,
	BattleCameraTargetTarget                 = 2,
	BattleCameraTargetMy                     = 3,
	BattleCameraTargetMax                    = 4,
	EBattleCameraTarget_MAX                  = 5,
};

// Enum SS.EBattleCameraBind
// NumValues: 0x0005
enum class EBattleCameraBind : uint8
{
	EBattleCameraBindNon                     = 0,
	EBattleCameraBindMy                      = 1,
	EBattleCameraBindTarget                  = 2,
	EBattleCameraBindMax                     = 3,
	EBattleCameraBind_MAX                    = 4,
};

// Enum SS.EBattleCameraSocket
// NumValues: 0x0005
enum class EBattleCameraSocket : uint8
{
	EBattleCameraSocketNull                  = 0,
	EBattleCameraSocketWast                  = 1,
	EBattleCameraSocketHead                  = 2,
	EBattleCameraSocketMax                   = 3,
	EBattleCameraSocket_MAX                  = 4,
};

// Enum SS.EBattleCineCameraMode
// NumValues: 0x0005
enum class EBattleCineCameraMode : uint8
{
	BattleCameraModeBattle                   = 0,
	BattleCameraModeFree                     = 1,
	BattleCameraModeLock                     = 2,
	BattleCameraModeMax                      = 3,
	EBattleCineCameraMode_MAX                = 4,
};

// Enum SS.EBattleCineCameraTarget
// NumValues: 0x0006
enum class EBattleCineCameraTarget : uint8
{
	BattleCameraTargetNon                    = 0,
	BattleCameraTargetBetween                = 1,
	BattleCameraTargetTarget                 = 2,
	BattleCameraTargetMy                     = 3,
	BattleCameraTargetMax                    = 4,
	EBattleCineCameraTarget_MAX              = 5,
};

// Enum SS.EBattleCineCameraBind
// NumValues: 0x0005
enum class EBattleCineCameraBind : uint8
{
	EBattleCameraBindNon                     = 0,
	EBattleCameraBindMy                      = 1,
	EBattleCameraBindTarget                  = 2,
	EBattleCameraBindMax                     = 3,
	EBattleCineCameraBind_MAX                = 4,
};

// Enum SS.EBattleCineCameraSocket
// NumValues: 0x0005
enum class EBattleCineCameraSocket : uint8
{
	EBattleCameraSocketNull                  = 0,
	EBattleCameraSocketWast                  = 1,
	EBattleCameraSocketHead                  = 2,
	EBattleCameraSocketMax                   = 3,
	EBattleCineCameraSocket_MAX              = 4,
};

// Enum SS.EElapsedTimeType
// NumValues: 0x0003
enum class EElapsedTimeType : uint8
{
	Pure                                     = 0,
	Event                                    = 1,
	Max                                      = 2,
};

// Enum SS.EGeneralFateAttribute2
// NumValues: 0x0008
enum class EGeneralFateAttribute2 : uint8
{
	None                                     = 0,
	Friend                                   = 1,
	Enemy                                    = 2,
	Unknown                                  = 3,
	Rival                                    = 4,
	GreatApe                                 = 5,
	Mirror                                   = 6,
	Max                                      = 7,
};

// Enum SS.EGeneralFateDataType
// NumValues: 0x000B
enum class EGeneralFateDataType : uint8
{
	None                                     = 0,
	IntroductionFriend                       = 1,
	IntroductionEnemy                        = 2,
	IntroductionUnknown                      = 3,
	IntroductionRival                        = 4,
	IntroductionGreatApe                     = 5,
	IntroductionMirror                       = 6,
	VictoryFriend                            = 7,
	VictoryEnemy                             = 8,
	VictoryNormal                            = 9,
	Max                                      = 10,
};

// Enum SS.EFateMoraleType
// NumValues: 0x0004
enum class EFateMoraleType : uint8
{
	Neither                                  = 0,
	Justice                                  = 1,
	Evil                                     = 2,
	EFateMoraleType_MAX                      = 3,
};

// Enum SS.EFateExecutionOrderType
// NumValues: 0x0004
enum class EFateExecutionOrderType : uint8
{
	None                                     = 0,
	First                                    = 1,
	Second                                   = 2,
	EFateExecutionOrderType_MAX              = 3,
};

// Enum SS.EBattleImpactCharacterState
// NumValues: 0x0006
enum class EBattleImpactCharacterState : uint8
{
	KNone                                    = 0,
	KBattle                                  = 1,
	KWinner                                  = 2,
	KLoser                                   = 3,
	KNum                                     = 4,
	EBattleImpactCharacterState_MAX          = 5,
};

// Enum SS.ESSBattleImpactBlastBulletStatus
// NumValues: 0x0005
enum class ESSBattleImpactBlastBulletStatus : uint8
{
	BBS_Initial                              = 0,
	BBS_End                                  = 1,
	BBS_Begin                                = 2,
	BBS_Contest                              = 3,
	BBS_MAX                                  = 4,
};

// Enum SS.ESSBlaseImpactCharacterSide
// NumValues: 0x0003
enum class ESSBlaseImpactCharacterSide : uint8
{
	KMain                                    = 0,
	KSub                                     = 1,
	ESSBlaseImpactCharacterSide_MAX          = 2,
};

// Enum SS.EBattleImpactType
// NumValues: 0x000A
enum class EBattleImpactType : uint8
{
	KNone                                    = 0,
	KSpeed                                   = 1,
	KBlast                                   = 2,
	KPower                                   = 3,
	KPowerNtoG                               = 4,
	KPowerGtoN                               = 5,
	KPowerGtoG                               = 6,
	KCrash                                   = 7,
	KNum                                     = 8,
	EBattleImpactType_MAX                    = 9,
};

// Enum SS.EBattleImpactPhase
// NumValues: 0x0009
enum class EBattleImpactPhase : uint8
{
	KEnd                                     = 0,
	KBegin                                   = 1,
	KIntroduction                            = 2,
	KWait                                    = 3,
	KGame                                    = 4,
	KConclusion                              = 5,
	KFinish                                  = 6,
	KNum                                     = 7,
	EBattleImpactPhase_MAX                   = 8,
};

// Enum SS.ERushState
// NumValues: 0x0005
enum class ERushState : uint8
{
	NONE                                     = 0,
	FIX                                      = 1,
	CHASE                                    = 2,
	IDLE                                     = 3,
	ERushState_MAX                           = 4,
};

// Enum SS.EBattleSettleTransitionType
// NumValues: 0x0009
enum class EBattleSettleTransitionType : uint8
{
	None                                     = 0,
	KnockOut                                 = 1,
	DoubleKnockOut                           = 2,
	Event                                    = 3,
	TimeUp                                   = 4,
	Draw                                     = 5,
	RingOut                                  = 6,
	Giveup                                   = 7,
	EBattleSettleTransitionType_MAX          = 8,
};

// Enum SS.EBattleSettleAttackType
// NumValues: 0x000A
enum class EBattleSettleAttackType : uint8
{
	None                                     = 0,
	Rush                                     = 1,
	Smash                                    = 2,
	Heavy                                    = 3,
	Kidan                                    = 4,
	Blast                                    = 5,
	Demo                                     = 6,
	ShotBlast                                = 7,
	ChargeBlast                              = 8,
	EBattleSettleAttackType_MAX              = 9,
};

// Enum SS.ESSCstRequestCommand
// NumValues: 0x003B
enum class ESSCstRequestCommand : uint8
{
	None                                     = 0,
	CharaMotionEntrySelect                   = 1,
	CharaMotionStand                         = 2,
	CharaMotionStandNonInterpolation         = 3,
	CharaMotionEntrySelectLP                 = 4,
	CharaMotionLeave                         = 5,
	CharaMotionEntryTop                      = 6,
	CharaMotionNoEffectStand                 = 7,
	CharaJumpSectionLP                       = 8,
	FastIdleMotionChange                     = 9,
	WaitCharaMotion                          = 10,
	WaitCharaMotionToStandAll                = 11,
	WaitCameraInterpolate                    = 12,
	WaitCharaLoading                         = 13,
	WaitCharaCameraLoading                   = 14,
	WaitBgCharaState                         = 15,
	AddBgCharaState                          = 16,
	AddRollbackCommands                      = 17,
	CancelRollback                           = 18,
	WaitRollbackCharacter                    = 19,
	IncrementStartPlace                      = 20,
	DitherFadeOutAll                         = 21,
	DitherFadeIn                             = 22,
	WaitDitherFade                           = 23,
	ReplaceCharacter                         = 24,
	ChangeRollbackCharacter                  = 25,
	RemoveDisplayCharacter                   = 26,
	HiddenSpawnCharacter                     = 27,
	ResetPreviewCameraOffset                 = 28,
	PlayCharaCamera                          = 29,
	PlayAssignCharaCamera                    = 30,
	DestroyOldCharacter                      = 31,
	DelayOneFrame                            = 32,
	DelayOneSecond                           = 33,
	StopUiAction                             = 34,
	ChangeNextState                          = 35,
	WarpCharacter                            = 36,
	WarpTopCharacter                         = 37,
	ClearRollbackCharacter                   = 38,
	RestoreRollbackCharacter                 = 39,
	EnableHiddenCharacter                    = 40,
	DisableHiddenCharacter                   = 41,
	PlayFrameInBlindEffect                   = 42,
	WaitBlindedSignal                        = 43,
	PlayEntryCamera                          = 44,
	PlayTeamLight                            = 45,
	WaitOneshotCamera                        = 46,
	PlayTeamTalk                             = 47,
	ParallelRequest                          = 48,
	CameraRequestDelayTime                   = 49,
	WaitCameraRequestCmd                     = 50,
	ResetCameraRequestCmd                    = 51,
	InterruptRestriction                     = 52,
	FocusTransformStop                       = 53,
	FocusTransformPlay                       = 54,
	FocusChangeLastMarker                    = 55,
	RemoveDPOverCharacter                    = 56,
	WaitCharaReader                          = 57,
	Max                                      = 58,
};

// Enum SS.ESSBattleSetupBgCharaState
// NumValues: 0x0005
enum class ESSBattleSetupBgCharaState : uint8
{
	Loading                                  = 0,
	WarpWaiting                              = 1,
	SpawndHiddenStandby                      = 2,
	Invalid                                  = 3,
	ESSBattleSetupBgCharaState_MAX           = 4,
};

// Enum SS.ESSBattleTrainingBattleUiType
// NumValues: 0x0009
enum class ESSBattleTrainingBattleUiType : uint8
{
	TextArea                                 = 0,
	TrainingMain                             = 1,
	List_A                                   = 2,
	List_B                                   = 3,
	Base                                     = 4,
	Base_A                                   = 5,
	HelpDialog                               = 6,
	Num                                      = 7,
	ESSBattleTrainingBattleUiType_MAX        = 8,
};

// Enum SS.ESSBattleTrainingBattleUiCharaActionType
// NumValues: 0x0004
enum class ESSBattleTrainingBattleUiCharaActionType : uint8
{
	Entry                                    = 0,
	Wait                                     = 1,
	Decide                                   = 2,
	ESSBattleTrainingBattleUiCharaActionType_MAX = 3,
};

// Enum SS.ESSBattleTrainingUIType
// NumValues: 0x0006
enum class ESSBattleTrainingUIType : uint8
{
	Top                                      = 0,
	ListBase                                 = 1,
	ListItem                                 = 2,
	TextArea                                 = 3,
	Num                                      = 4,
	ESSBattleTrainingUIType_MAX              = 5,
};

// Enum SS.ESSBattleTrainingCharaActionType
// NumValues: 0x0004
enum class ESSBattleTrainingCharaActionType : uint8
{
	Entry                                    = 0,
	Wait                                     = 1,
	Decide                                   = 2,
	ESSBattleTrainingCharaActionType_MAX     = 3,
};

// Enum SS.ESSBattleTrainingSequencerType
// NumValues: 0x0003
enum class ESSBattleTrainingSequencerType : uint8
{
	In                                       = 0,
	Out                                      = 1,
	ESSBattleTrainingSequencerType_MAX       = 2,
};

// Enum SS.ESSBattleTrainingItemLevelType
// NumValues: 0x0006
enum class ESSBattleTrainingItemLevelType : uint8
{
	Elementary                               = 0,
	Intermediate                             = 1,
	Advanced                                 = 2,
	Explanation                              = 3,
	BattleRules                              = 4,
	ESSBattleTrainingItemLevelType_MAX       = 5,
};

// Enum SS.ESSBattleTrainingListItemChangeType
// NumValues: 0x0004
enum class ESSBattleTrainingListItemChangeType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	ESSBattleTrainingListItemChangeType_MAX  = 3,
};

// Enum SS.ESSBattleTrainingSettingReviewType
// NumValues: 0x0004
enum class ESSBattleTrainingSettingReviewType : uint8
{
	Appear                                   = 0,
	Win                                      = 1,
	Lose                                     = 2,
	ESSBattleTrainingSettingReviewType_MAX   = 3,
};

// Enum SS.ESSBGMCategoryType
// NumValues: 0x0009
enum class ESSBGMCategoryType : uint8
{
	None                                     = 0,
	BattleBGM                                = 1,
	SparkingBGM                              = 2,
	SynopsisBGM                              = 3,
	JingleBGM                                = 4,
	GalleryBGM                               = 5,
	DramaticBattleBGM                        = 6,
	StoryBGM                                 = 7,
	ESSBGMCategoryType_MAX                   = 8,
};

// Enum SS.ESSBGMOriginType
// NumValues: 0x0004
enum class ESSBGMOriginType : uint8
{
	None                                     = 0,
	Anime                                    = 1,
	Project                                  = 2,
	Max                                      = 3,
};

// Enum SS.ESSBGMPackageType
// NumValues: 0x0004
enum class ESSBGMPackageType : uint8
{
	Release                                  = 0,
	AnimeSongsBGMPack1                       = 1,
	AnimeSongsBGMPack2                       = 2,
	ESSBGMPackageType_MAX                    = 3,
};

// Enum SS.ESSBlackoutExecType
// NumValues: 0x0004
enum class ESSBlackoutExecType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	End                                      = 2,
	ESSBlackoutExecType_MAX                  = 3,
};

// Enum SS.ESSBlastDemoBranchType
// NumValues: 0x000C
enum class ESSBlastDemoBranchType : uint8
{
	None                                     = 0,
	Map                                      = 1,
	Wall                                     = 2,
	DramaticFinish                           = 3,
	Team                                     = 4,
	Ex                                       = 5,
	BuffForm                                 = 6,
	Giant                                    = 7,
	GiantDramaticFinish                      = 8,
	SpDerivA                                 = 9,
	SpDerivMax                               = 10,
	ESSBlastDemoBranchType_MAX               = 11,
};

// Enum SS.EYesNoType
// NumValues: 0x0004
enum class EYesNoType : uint8
{
	Unspecified                              = 0,
	Yes                                      = 1,
	No                                       = 2,
	EYesNoType_MAX                           = 3,
};

// Enum SS.EVictoryAppealWarpType
// NumValues: 0x0004
enum class EVictoryAppealWarpType : uint8
{
	MyselfSafeArea                           = 0,
	TargetSmallArea                          = 1,
	NoWarp                                   = 2,
	EVictoryAppealWarpType_MAX               = 3,
};

// Enum SS.EBlastDemoSpDerivationType
// NumValues: 0x0017
enum class EBlastDemoSpDerivationType : uint8
{
	Unspecified                              = 0,
	DynamiteKick                             = 1,
	AnyBlast1                                = 2,
	AnyBlast2                                = 3,
	AnyBlast3                                = 4,
	AnyBlast4                                = 5,
	AnyBlast5                                = 6,
	AnyBlast6                                = 7,
	AnyBlast7                                = 8,
	AnyBlast8                                = 9,
	AnyBlast9                                = 10,
	AnyBlast10                               = 11,
	AnyBlast11                               = 12,
	AnyBlast12                               = 13,
	AnyBlast13                               = 14,
	AnyBlast14                               = 15,
	AnyBlast15                               = 16,
	AnyBlast16                               = 17,
	AnyBlast17                               = 18,
	AnyBlast18                               = 19,
	AnyBlast19                               = 20,
	AnyBlast20                               = 21,
	EBlastDemoSpDerivationType_MAX           = 22,
};

// Enum SS.ESSBlastImpactCount
// NumValues: 0x0005
enum class ESSBlastImpactCount : uint8
{
	Count0                                   = 0,
	Count1                                   = 1,
	Count2                                   = 2,
	Count3                                   = 3,
	ESSBlastImpactCount_MAX                  = 4,
};

// Enum SS.ESSBlastImpactPositionType
// NumValues: 0x0004
enum class ESSBlastImpactPositionType : uint8
{
	KSafety                                  = 0,
	KDifferent                               = 1,
	KReturn                                  = 2,
	ESSBlastImpactPositionType_MAX           = 3,
};

// Enum SS.ESSBlastImpactActionDataType
// NumValues: 0x0005
enum class ESSBlastImpactActionDataType : uint8
{
	KStart                                   = 0,
	KCollision                               = 1,
	KWin                                     = 2,
	KLose                                    = 3,
	ESSBlastImpactActionDataType_MAX         = 4,
};

// Enum SS.ESSBlastImpactUiResult
// NumValues: 0x0004
enum class ESSBlastImpactUiResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	ESSBlastImpactUiResult_MAX               = 3,
};

// Enum SS.ESSBulletActorStatus
// NumValues: 0x0019
enum class ESSBulletActorStatus : uint8
{
	Initial                                  = 0,
	Begin                                    = 1,
	Charge                                   = 2,
	MoveBullet                               = 3,
	MoveBulletNoHomingUpdate                 = 4,
	MoveBulletUnHoming                       = 5,
	Stop                                     = 6,
	Trace                                    = 7,
	MoveByController                         = 8,
	Captured                                 = 9,
	Reflect                                  = 10,
	WaitForReflected                         = 11,
	UnReflected                              = 12,
	DoNothing                                = 13,
	LifeSpanEnd                              = 14,
	MultiHitStartCharacter                   = 15,
	MultiHitCharacter                        = 16,
	LastHitCharacter                         = 17,
	BeamHitCharacter                         = 18,
	MultiHitStartGeometry                    = 19,
	MultiHitGeometry                         = 20,
	LastHitGeometry                          = 21,
	Clash                                    = 22,
	WaitForDestroy                           = 23,
	ESSBulletActorStatus_MAX                 = 24,
};

// Enum SS.ESSBulletActorAfterReflectRequest
// NumValues: 0x0005
enum class ESSBulletActorAfterReflectRequest : uint8
{
	None                                     = 0,
	ReflectAfterTimeup                       = 1,
	StopAfterTimeup                          = 2,
	FinishAfterTimeup                        = 3,
	ESSBulletActorAfterReflectRequest_MAX    = 4,
};

// Enum SS.ESSBulletActorDestroyReason
// NumValues: 0x0008
enum class ESSBulletActorDestroyReason : uint8
{
	ExternalErase                            = 0,
	LifeSpanEnd                              = 1,
	HitCharacter                             = 2,
	BeamHitCharacter                         = 3,
	HitGeometory                             = 4,
	Clash                                    = 5,
	UnReflected                              = 6,
	ESSBulletActorDestroyReason_MAX          = 7,
};

// Enum SS.ESSBulletBeamViewOverrideScaleType
// NumValues: 0x0004
enum class ESSBulletBeamViewOverrideScaleType : uint8
{
	None                                     = 0,
	CharacterCollision                       = 1,
	ScaledCharacterCollision                 = 2,
	ESSBulletBeamViewOverrideScaleType_MAX   = 3,
};

// Enum SS.ESSBulletBeamViewCreateType
// NumValues: 0x0005
enum class ESSBulletBeamViewCreateType : uint8
{
	Debug                                    = 0,
	Bullet                                   = 1,
	TraceActor                               = 2,
	StartEnd                                 = 3,
	ESSBulletBeamViewCreateType_MAX          = 4,
};

// Enum SS.EBulletControlCommand
// NumValues: 0x000B
enum class EBulletControlCommand : uint8
{
	None                                     = 0,
	Shot                                     = 1,
	Catch                                    = 2,
	Erase                                    = 3,
	Teleport                                 = 4,
	DirectControlON                          = 5,
	DirectControlOFF                         = 6,
	EraseAfterPlayOT                         = 7,
	ImmediateDeath                           = 8,
	EndCharge                                = 9,
	EBulletControlCommand_MAX                = 10,
};

// Enum SS.ESSBulletLocatorPointType
// NumValues: 0x0003
enum class ESSBulletLocatorPointType : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	ESSBulletLocatorPointType_MAX            = 2,
};

// Enum SS.EKoratBulletRatType
// NumValues: 0x0004
enum class EKoratBulletRatType : uint8
{
	None                                     = 0,
	BurnMarkDecal                            = 1,
	LandElevationKnock                       = 2,
	EKoratBulletRatType_MAX                  = 3,
};

// Enum SS.ESSChameleonBlendModes
// NumValues: 0x0011
enum class ESSChameleonBlendModes : uint8
{
	Normal                                   = 0,
	ColorBurn                                = 1,
	ColorDodge                               = 2,
	Difference                               = 3,
	Exclusion                                = 4,
	Hardlight                                = 5,
	LinearBurn                               = 6,
	LinearDodge                              = 7,
	LinearLight                              = 8,
	PinLight                                 = 9,
	SoftLight                                = 10,
	Screen                                   = 11,
	Lighten                                  = 12,
	Darken                                   = 13,
	Overlay                                  = 14,
	Multiply                                 = 15,
	ESSChameleonBlendModes_MAX               = 16,
};

// Enum SS.ESSChameleonColorChannels
// NumValues: 0x0004
enum class ESSChameleonColorChannels : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	ESSChameleonColorChannels_MAX            = 3,
};

// Enum SS.ESSChameleonDrawingNoiseModes
// NumValues: 0x0003
enum class ESSChameleonDrawingNoiseModes : uint8
{
	Simplex                                  = 0,
	Perlin                                   = 1,
	ESSChameleonDrawingNoiseModes_MAX        = 2,
};

// Enum SS.ESSChameleonLOOKPresetsEnum
// NumValues: 0x0097
enum class ESSChameleonLOOKPresetsEnum : uint8
{
	Alienize1                                = 0,
	Alienize2                                = 1,
	Alienize3                                = 2,
	Alienize4                                = 3,
	Alienize5                                = 4,
	Alienize6                                = 5,
	Bloom1                                   = 6,
	Bloom2                                   = 7,
	Bloom3                                   = 8,
	Classic1                                 = 9,
	Classic2                                 = 10,
	Classic3                                 = 11,
	Classic4                                 = 12,
	Classic5                                 = 13,
	Classic6                                 = 14,
	Classic7                                 = 15,
	Classic8                                 = 16,
	Classic9                                 = 17,
	Classic10                                = 18,
	Classic11                                = 19,
	Classic12                                = 20,
	Classic13                                = 21,
	Classic14                                = 22,
	CLayerAqua                               = 23,
	CLayerBlue                               = 24,
	CLayerGreen                              = 25,
	CLayerOrange                             = 26,
	CLayerPurple                             = 27,
	CLayerRed                                = 28,
	CLayerYellow                             = 29,
	Color1                                   = 30,
	Color2                                   = 31,
	Color3                                   = 32,
	Color4                                   = 33,
	Color5                                   = 34,
	Color6                                   = 35,
	Dark1                                    = 36,
	Dark2                                    = 37,
	Dark3                                    = 38,
	Dark4                                    = 39,
	Dark5                                    = 40,
	Dark6                                    = 41,
	Dark7                                    = 42,
	Dark8                                    = 43,
	Draw1                                    = 44,
	Draw2                                    = 45,
	Draw3                                    = 46,
	Draw4                                    = 47,
	Draw5                                    = 48,
	Draw6                                    = 49,
	Draw7                                    = 50,
	Draw8                                    = 51,
	Draw9                                    = 52,
	Enhance1                                 = 53,
	Enhance2                                 = 54,
	Enhance3                                 = 55,
	Enhance4                                 = 56,
	Enhance5                                 = 57,
	Enhance6                                 = 58,
	Enhance7                                 = 59,
	Enhance8                                 = 60,
	Enhance9                                 = 61,
	Enhance10                                = 62,
	FakeHDR1                                 = 63,
	FakeHDR2                                 = 64,
	FakeHDR3                                 = 65,
	Invert                                   = 66,
	InvertGray                               = 67,
	Mono1                                    = 68,
	Mono2                                    = 69,
	Mono3                                    = 70,
	Mono4                                    = 71,
	Mono5                                    = 72,
	Mono6                                    = 73,
	Mono7                                    = 74,
	Mono8                                    = 75,
	Mono9                                    = 76,
	Mono10                                   = 77,
	Movie1                                   = 78,
	Movie2                                   = 79,
	Movie3                                   = 80,
	Movie4                                   = 81,
	Movie5                                   = 82,
	Movie6                                   = 83,
	Movie7                                   = 84,
	Old1                                     = 85,
	Old2                                     = 86,
	Old3                                     = 87,
	Old4                                     = 88,
	Posterize1                               = 89,
	Saturate1                                = 90,
	Saturate2                                = 91,
	Saturate3                                = 92,
	Steam1                                   = 93,
	Steam2                                   = 94,
	Steam3                                   = 95,
	Steam4                                   = 96,
	Steam5                                   = 97,
	Steam6                                   = 98,
	Steam7                                   = 99,
	Emulation_3_Strip                        = 100,
	Emulation_Bleach_Bypass                  = 101,
	Emulation_Cineon                         = 102,
	Emulation_Film2Vid_1                     = 103,
	Emulation_Film2Vid_2                     = 104,
	Emulation_Fuj_3510_1                     = 105,
	Emulation_Fuj_3510_2                     = 106,
	Emulation_Fuj_3510_3                     = 107,
	Emulation_General_Filmstock              = 108,
	Emulation_JR45                           = 109,
	Emulation_Kodachrome                     = 110,
	Emulation_Kodk_2383                      = 111,
	Emulation_Kodk_2393_1                    = 112,
	Emulation_Kodk_2393_2                    = 113,
	Emulation_Kodk_2395_1                    = 114,
	Emulation_Kodk_2395_2                    = 115,
	Emulation_SA5                            = 116,
	Emulation_SA6                            = 117,
	Emulation_SA7_1                          = 118,
	Emulation_SA7_2                          = 119,
	Emulation_SA7_3                          = 120,
	Emulation_SA7_4                          = 121,
	Emulation_SA8                            = 122,
	Emulation_SA9                            = 123,
	Filmic_Abduction                         = 124,
	Filmic_Cold_Blood_Murderer               = 125,
	Filmic_First_Date                        = 126,
	Filmic_Futurama                          = 127,
	Filmic_Gladiators                        = 128,
	Filmic_Golden_Age                        = 129,
	Filmic_Hacker_Room                       = 130,
	Filmic_Hazard                            = 131,
	Filmic_Holy_TealOrange                   = 132,
	Filmic_Horror_Night                      = 133,
	Filmic_Last_hope                         = 134,
	Filmic_Middle_Earth                      = 135,
	Filmic_Nature_Rise                       = 136,
	Filmic_Pandora                           = 137,
	Filmic_Rogue                             = 138,
	Lighting_Candle_Light                    = 139,
	Lighting_Day_to_Night                    = 140,
	Lighting_Moonlight                       = 141,
	Weather_Everest_H                        = 142,
	Weather_Everest_L                        = 143,
	Weather_Everest_M                        = 144,
	Weather_Heavy_Sunset                     = 145,
	Weather_Late_Sunset                      = 146,
	Weather_Lightning                        = 147,
	Weather_Underwater                       = 148,
	Weather_Winter                           = 149,
	ESSChameleonLOOKPresetsEnum_MAX          = 150,
};

// Enum SS.EKoratCharacterActionFinishReason
// NumValues: 0x0004
enum class EKoratCharacterActionFinishReason : uint8
{
	Other                                    = 0,
	DamageCancel                             = 1,
	PlayToEnd                                = 2,
	EKoratCharacterActionFinishReason_MAX    = 3,
};

// Enum SS.EKoratCharacterLocomotionDetailStatus
// NumValues: 0x005D
enum class EKoratCharacterLocomotionDetailStatus : uint8
{
	IdleMove                                 = 0,
	IdleMoveStandFar                         = 1,
	IdleMoveStandGround                      = 2,
	IdleMoveStandAir                         = 3,
	IdleMoveMoveNearGround                   = 4,
	IdleMoveMoveNearAir                      = 5,
	IdleMoveMoveFarGround                    = 6,
	IdleMoveMoveFarAir                       = 7,
	IdleMoveFly                              = 8,
	JumpIN                                   = 9,
	JumpUP                                   = 10,
	JumpDW                                   = 11,
	JumpOT                                   = 12,
	JumpFT                                   = 13,
	StepTURN                                 = 14,
	StepFront                                = 15,
	StepBackIN                               = 16,
	StepLeftIN                               = 17,
	StepRightIN                              = 18,
	StepLongFrontIN                          = 19,
	StepLongBackIN                           = 20,
	StepBackOT                               = 21,
	StepLeftOT                               = 22,
	StepRightOT                              = 23,
	StepLongFrontOT                          = 24,
	StepLongBackOT                           = 25,
	DragonDashIN                             = 26,
	DragonDashLP                             = 27,
	DragonDashBK                             = 28,
	DragonDashOT                             = 29,
	DragonDashQuickIn                        = 30,
	BlowIN                                   = 31,
	BlowLP                                   = 32,
	BlowBK                                   = 33,
	BlowOT                                   = 34,
	BlowBrake                                = 35,
	BlowFallIN                               = 36,
	BlowFallLP                               = 37,
	BlowBound                                = 38,
	BlowBoundIN                              = 39,
	BlowBoundOT                              = 40,
	BlowSlideLP                              = 41,
	BlowSlideOT                              = 42,
	BlowCrashToWallIN                        = 43,
	BlowCrashToWallOT                        = 44,
	BlowDown                                 = 45,
	BlowDownRevivalIN                        = 46,
	BlowDownRevivalOT                        = 47,
	BlowUkemiStandUp                         = 48,
	BlowUkemiStandUpIN                       = 49,
	BlowUkemiStandUpOT                       = 50,
	BlowLift                                 = 51,
	BlowSweep                                = 52,
	BlowCrumple                              = 53,
	BlowFallUkemi                            = 54,
	DragonHomingIN                           = 55,
	DragonHomingLP                           = 56,
	DragonHomingOT                           = 57,
	ZBurstDashIN                             = 58,
	ZBurstDashLP                             = 59,
	ZBurstDashOT                             = 60,
	RevengeDashIN                            = 61,
	RevengeDashLP                            = 62,
	RevengeDashOT                            = 63,
	BlastSkill1DashLP                        = 64,
	BlastSkill2DashLP                        = 65,
	BlastUltimateDashLP                      = 66,
	DashUpIN                                 = 67,
	DashUpLP                                 = 68,
	DashUpOT                                 = 69,
	DashDownIN                               = 70,
	DashDownLP                               = 71,
	DashDownOT                               = 72,
	WallUkemiIN                              = 73,
	DashUkemiIN                              = 74,
	DashUkemiDashIN                          = 75,
	DashUkemiDashLP                          = 76,
	DashUkemiDashOT                          = 77,
	StunReactionSTAND                        = 78,
	StunReactionDOWN                         = 79,
	NumbReactionSTAND                        = 80,
	NumbReactionDOWN                         = 81,
	BurstSmashIN                             = 82,
	BurstSmashLP                             = 83,
	HighSpeedMoveIN                          = 84,
	HighSpeedMoveLP                          = 85,
	HighSpeedMoveOT                          = 86,
	SuperHighSpeedMoveIN                     = 87,
	SuperHighSpeedMoveLP                     = 88,
	SuperHighSpeedMoveOT                     = 89,
	MoveStandUpIN                            = 90,
	MoveStandUpOT                            = 91,
	EKoratCharacterLocomotionDetailStatus_MAX = 92,
};

// Enum SS.EKoratCharacterInvincibleStatus
// NumValues: 0x0009
enum class EKoratCharacterInvincibleStatus : uint8
{
	None                                     = 0,
	All                                      = 1,
	CombativesOnly                           = 2,
	EnergyBulletOnly                         = 3,
	ThrowOnly                                = 4,
	DownState                                = 5,
	CombativesAndThrow                       = 6,
	NormalEnergyBulletOnly                   = 7,
	EKoratCharacterInvincibleStatus_MAX      = 8,
};

// Enum SS.EKoratCharacterSuperHighSpeedMoveSideStatus
// NumValues: 0x0004
enum class EKoratCharacterSuperHighSpeedMoveSideStatus : uint8
{
	None                                     = 0,
	LeftSide                                 = 1,
	RightSide                                = 2,
	EKoratCharacterSuperHighSpeedMoveSideStatus_MAX = 3,
};

// Enum SS.EKoratCharacterBlastBoostStatus
// NumValues: 0x0005
enum class EKoratCharacterBlastBoostStatus : uint8
{
	None                                     = 0,
	WaitInputBlastBoost                      = 1,
	NormalBlastBoost                         = 2,
	SparkingBlastBoost                       = 3,
	EKoratCharacterBlastBoostStatus_MAX      = 4,
};

// Enum SS.EKoratCharacterUnderWaterStatus
// NumValues: 0x0005
enum class EKoratCharacterUnderWaterStatus : uint8
{
	None                                     = 0,
	Surface                                  = 1,
	UnderWater                               = 2,
	Depth                                    = 3,
	EKoratCharacterUnderWaterStatus_MAX      = 4,
};

// Enum SS.EKoratEachCharacterUnderWaterStatus
// NumValues: 0x0005
enum class EKoratEachCharacterUnderWaterStatus : uint8
{
	None                                     = 0,
	Self                                     = 1,
	Opponent                                 = 2,
	Both                                     = 3,
	EKoratEachCharacterUnderWaterStatus_MAX  = 4,
};

// Enum SS.EKoratFixedGaugeType
// NumValues: 0x0004
enum class EKoratFixedGaugeType : uint8
{
	None                                     = 0,
	Min                                      = 1,
	Max                                      = 2,
	Sparking                                 = 3,
};

// Enum SS.EBulletConditionCountType
// NumValues: 0x0007
enum class EBulletConditionCountType : uint8
{
	Hit                                      = 0,
	Finish                                   = 1,
	Invalidated                              = 2,
	MultiHit                                 = 3,
	Reflecting                               = 4,
	Reflected                                = 5,
	Max                                      = 6,
};

// Enum SS.EBulletManagerGroupType
// NumValues: 0x000A
enum class EBulletManagerGroupType : uint8
{
	SKILL1                                   = 0,
	SKILL2                                   = 1,
	ULTBLAST                                 = 2,
	BLAST_GENERAL                            = 3,
	BIMPACT                                  = 4,
	BIMPACT_FIRE                             = 5,
	BIMPACT_PHASE                            = 6,
	BIMPACT_WIN                              = 7,
	BIMPACT_LOST                             = 8,
	Max                                      = 9,
};

// Enum SS.EBulletExplosionType
// NumValues: 0x0004
enum class EBulletExplosionType : uint8
{
	None                                     = 0,
	SingleExp                                = 1,
	GroupExp                                 = 2,
	Max                                      = 3,
};

// Enum SS.ESSCharacterCombativesDataAssetParamType
// NumValues: 0x0004
enum class ESSCharacterCombativesDataAssetParamType : uint8
{
	Parameter                                = 0,
	SubParameter                             = 1,
	Visual                                   = 2,
	ESSCharacterCombativesDataAssetParamType_MAX = 3,
};

// Enum SS.ESSCharacterLocationType
// NumValues: 0x0003
enum class ESSCharacterLocationType : uint8
{
	CLT_ActorWorld                           = 0,
	CLT_MeshWorld                            = 1,
	CLT_MAX                                  = 2,
};

// Enum SS.ESSCharacterItemCategory
// NumValues: 0x0012
enum class ESSCharacterItemCategory : uint8
{
	None                                     = 0,
	PowerUp                                  = 1,
	Costume                                  = 2,
	Equipment                                = 3,
	EntryAction                              = 4,
	EntryVoice                               = 5,
	VictoryAction                            = 6,
	VictoryVoice                             = 7,
	AppealAction                             = 8,
	AppealVoice                              = 9,
	Fusion                                   = 10,
	Potara                                   = 11,
	SparkingBGM                              = 12,
	AIType                                   = 13,
	AILevel                                  = 14,
	Emote                                    = 15,
	Controll                                 = 16,
	ESSCharacterItemCategory_MAX             = 17,
};

// Enum SS.ESSCharacterItemType
// NumValues: 0x0009
enum class ESSCharacterItemType : uint8
{
	None                                     = 0,
	Health                                   = 1,
	Strike                                   = 2,
	Energy                                   = 3,
	Combo                                    = 4,
	Blast                                    = 5,
	Special                                  = 6,
	Dramatic                                 = 7,
	ESSCharacterItemType_MAX                 = 8,
};

// Enum SS.ESSCharacterItemEquipCharacterCondition
// NumValues: 0x0004
enum class ESSCharacterItemEquipCharacterCondition : uint8
{
	None                                     = 0,
	Only                                     = 1,
	Except                                   = 2,
	ESSCharacterItemEquipCharacterCondition_MAX = 3,
};

// Enum SS.ESSCharacterItemCondition
// NumValues: 0x0007
enum class ESSCharacterItemCondition : uint8
{
	None                                     = 0,
	InWater                                  = 1,
	Sparkig                                  = 2,
	AtBattleStart                            = 4,
	AtCharacterEntry                         = 8,
	AtFastAvoidanceBlast                     = 16,
	ESSCharacterItemCondition_MAX            = 17,
};

// Enum SS.ESSCharacterItemCondition2
// NumValues: 0x0008
enum class ESSCharacterItemCondition2 : uint8
{
	None                                     = 0,
	InMap                                    = 1,
	HPPer                                    = 2,
	SPPer                                    = 4,
	StockNum                                 = 8,
	Gender                                   = 16,
	DP                                       = 32,
	ESSCharacterItemCondition2_MAX           = 33,
};

// Enum SS.ESSCharacterItemConditionIf
// NumValues: 0x0003
enum class ESSCharacterItemConditionIf : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	ESSCharacterItemConditionIf_MAX          = 2,
};

// Enum SS.ESSCharacterItemTarget
// NumValues: 0x0003
enum class ESSCharacterItemTarget : uint8
{
	Myself                                   = 0,
	Enemy                                    = 1,
	ESSCharacterItemTarget_MAX               = 2,
};

// Enum SS.ESSCharacterItemConditionTarget
// NumValues: 0x0004
enum class ESSCharacterItemConditionTarget : uint8
{
	None                                     = 0,
	Myself                                   = 1,
	Enemy                                    = 2,
	ESSCharacterItemConditionTarget_MAX      = 3,
};

// Enum SS.ESSCharacterItemTagTextType
// NumValues: 0x0006
enum class ESSCharacterItemTagTextType : uint8
{
	None                                     = 0,
	EquipCharaSlot1                          = 1,
	EquipCharaSlot2                          = 2,
	CombinedChara                            = 3,
	ChangedSkillName                         = 4,
	ESSCharacterItemTagTextType_MAX          = 5,
};

// Enum SS.EKoratCharacterFlyChangeType
// NumValues: 0x0004
enum class EKoratCharacterFlyChangeType : uint8
{
	None                                     = 0,
	CanFly                                   = 1,
	CannotFly                                = 2,
	EKoratCharacterFlyChangeType_MAX         = 3,
};

// Enum SS.ESSSimpleAimLookatBone
// NumValues: 0x0006
enum class ESSSimpleAimLookatBone : uint8
{
	Spine1                                   = 0,
	Spine2                                   = 1,
	Spine3                                   = 2,
	Neck                                     = 3,
	Head                                     = 4,
	ESSSimpleAimLookatBone_MAX               = 5,
};

// Enum SS.ESSSimpleAimTargetType
// NumValues: 0x0005
enum class ESSSimpleAimTargetType : uint8
{
	Location                                 = 0,
	Actor                                    = 1,
	Bone                                     = 2,
	Impact                                   = 3,
	ESSSimpleAimTargetType_MAX               = 4,
};

// Enum SS.ECharacterVoiceStatus
// NumValues: 0x0005
enum class ECharacterVoiceStatus : uint8
{
	Failed                                   = 0,
	BeforePlayback                           = 1,
	Playing                                  = 2,
	AfterPlayback                            = 3,
	ECharacterVoiceStatus_MAX                = 4,
};

// Enum SS.ECharacterWarpLinkType
// NumValues: 0x0008
enum class ECharacterWarpLinkType : uint8
{
	None                                     = 0,
	ToSelf                                   = 1,
	ToOther                                  = 2,
	ToCannonActor                            = 3,
	DirectTransform                          = 4,
	DirectPosition                           = 5,
	OtherSpace                               = 6,
	ECharacterWarpLinkType_MAX               = 7,
};

// Enum SS.ECharacterWarpAfterDirectionType
// NumValues: 0x0008
enum class ECharacterWarpAfterDirectionType : uint8
{
	None                                     = 0,
	MapCenter                                = 1,
	DirectDirection                          = 2,
	Facing                                   = 3,
	LookAtCannonActor                        = 4,
	LookAtDirectPosition                     = 5,
	CopyDirectTransform                      = 6,
	ECharacterWarpAfterDirectionType_MAX     = 7,
};

// Enum SS.ECharacterWarpResultAttachTimingType
// NumValues: 0x0004
enum class ECharacterWarpResultAttachTimingType : uint8
{
	None                                     = 0,
	Immidiate                                = 1,
	WaitRequest                              = 2,
	ECharacterWarpResultAttachTimingType_MAX = 3,
};

// Enum SS.ECharacterWarpReturnType
// NumValues: 0x0003
enum class ECharacterWarpReturnType : uint8
{
	None                                     = 0,
	KeepFinishDistance                       = 1,
	ECharacterWarpReturnType_MAX             = 2,
};

// Enum SS.ECharacterWarpIndependRequestType
// NumValues: 0x000A
enum class ECharacterWarpIndependRequestType : uint8
{
	None                                     = 0,
	AttachSelf                               = 1,
	AttachOther                              = 2,
	Finish                                   = 3,
	ReturnStartPosition                      = 4,
	ReturnToStartPositionTogather            = 5,
	MoveToDirectableArea                     = 6,
	MoveToDirectableAreaGround               = 7,
	MoveToDirectableAreaAir                  = 8,
	ECharacterWarpIndependRequestType_MAX    = 9,
};

// Enum SS.ECharacterWarpCallType
// NumValues: 0x0004
enum class ECharacterWarpCallType : uint8
{
	None                                     = 0,
	Impact                                   = 1,
	OneshotDeadly                            = 2,
	ECharacterWarpCallType_MAX               = 3,
};

// Enum SS.ECharacterWarpContextType
// NumValues: 0x0004
enum class ECharacterWarpContextType : uint8
{
	Normal                                   = 0,
	Impact                                   = 1,
	OneshotDeadly                            = 2,
	ECharacterWarpContextType_MAX            = 3,
};

// Enum SS.ESSWarpTargetType
// NumValues: 0x0004
enum class ESSWarpTargetType : uint8
{
	SafeArea                                 = 0,
	SmallArea                                = 1,
	StartLocation1P                          = 2,
	ESSWarpTargetType_MAX                    = 3,
};

// Enum SS.EWarpStartCondition
// NumValues: 0x0003
enum class EWarpStartCondition : uint8
{
	NoNeed                                   = 0,
	FitGround                                = 1,
	EWarpStartCondition_MAX                  = 2,
};

// Enum SS.EWarpStartVanishingType
// NumValues: 0x0005
enum class EWarpStartVanishingType : uint8
{
	Run                                      = 0,
	Vanishing1                               = 1,
	Vanishing2                               = 2,
	Vanishing3                               = 3,
	EWarpStartVanishingType_MAX              = 4,
};

// Enum SS.EWarpGroupType
// NumValues: 0x0003
enum class EWarpGroupType : uint8
{
	Both                                     = 0,
	Indivisual                               = 1,
	EWarpGroupType_MAX                       = 2,
};

// Enum SS.EWarpPointType
// NumValues: 0x0005
enum class EWarpPointType : uint8
{
	PlayerStart                              = 0,
	PointActor                               = 1,
	TraceLocator                             = 2,
	None                                     = 3,
	EWarpPointType_MAX                       = 4,
};

// Enum SS.EMapFlexibleAreaType
// NumValues: 0x0004
enum class EMapFlexibleAreaType : uint8
{
	None                                     = 0,
	WaterDirectablePoint                     = 1,
	SmallArea                                = 2,
	EMapFlexibleAreaType_MAX                 = 3,
};

// Enum SS.ECharacterWinType
// NumValues: 0x000A
enum class ECharacterWinType : uint8
{
	NormalVictory                            = 0,
	CompleteVictory                          = 1,
	NarrowVictory                            = 2,
	DramaticFinish                           = 3,
	GiantDramaticFinish                      = 4,
	DramaticMode                             = 5,
	Battle                                   = 6,
	AdventureIf                              = 7,
	Fate                                     = 8,
	ECharacterWinType_MAX                    = 9,
};

// Enum SS.ECharaSelectCharaReaderStatus
// NumValues: 0x0008
enum class ECharaSelectCharaReaderStatus : uint8
{
	Initial                                  = 0,
	Unload                                   = 1,
	Delay                                    = 2,
	LoadingCamera                            = 3,
	UnloadWait                               = 4,
	LoadingAll                               = 5,
	Loaded                                   = 6,
	ECharaSelectCharaReaderStatus_MAX        = 7,
};

// Enum SS.ESSCrashImpactBoostUiResult
// NumValues: 0x0004
enum class ESSCrashImpactBoostUiResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	ESSCrashImpactBoostUiResult_MAX          = 3,
};

// Enum SS.ECrashImpactAttackDirection
// NumValues: 0x0005
enum class ECrashImpactAttackDirection : uint8
{
	KFront                                   = 0,
	KRight                                   = 1,
	KLeft                                    = 2,
	KNum                                     = 3,
	ECrashImpactAttackDirection_MAX          = 4,
};

// Enum SS.ECrashImpactCameraDistance
// NumValues: 0x0004
enum class ECrashImpactCameraDistance : uint8
{
	KNear                                    = 0,
	KFar                                     = 1,
	KNum                                     = 2,
	ECrashImpactCameraDistance_MAX           = 3,
};

// Enum SS.ESSCrashImpactUiResult
// NumValues: 0x0004
enum class ESSCrashImpactUiResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	ESSCrashImpactUiResult_MAX               = 3,
};

// Enum SS.ESSMovieSoundCategory
// NumValues: 0x0005
enum class ESSMovieSoundCategory : uint8
{
	None                                     = 0,
	BGM                                      = 1,
	Voice                                    = 2,
	SE                                       = 3,
	ESSMovieSoundCategory_MAX                = 4,
};

// Enum SS.EDebugOnlineBtl_MatchType
// NumValues: 0x0005
enum class EDebugOnlineBtl_MatchType : uint8
{
	Local1P                                  = 0,
	Local2P                                  = 1,
	OnlineSearch                             = 2,
	Count                                    = 3,
	EDebugOnlineBtl_MAX                      = 4,
};

// Enum SS.EDebugOnlineBtl_BattleLogType
// NumValues: 0x0008
enum class EDebugOnlineBtl_BattleLogType : uint8
{
	None                                     = 0,
	LightA                                   = 1,
	LightB                                   = 2,
	LightC                                   = 3,
	LightD                                   = 4,
	LightE                                   = 5,
	Count                                    = 6,
	EDebugOnlineBtl_MAX                      = 7,
};

// Enum SS.EDebugOnlineBtl_TimeLimitType
// NumValues: 0x0006
enum class EDebugOnlineBtl_TimeLimitType : uint8
{
	TimeInf                                  = 0,
	Time120                                  = 1,
	Time180                                  = 2,
	Time240                                  = 3,
	Count                                    = 4,
	EDebugOnlineBtl_MAX                      = 5,
};

// Enum SS.EDebugOnlineBtl_ServerApiType
// NumValues: 0x0005
enum class EDebugOnlineBtl_ServerApiType : uint8
{
	DummyAuth                                = 0,
	Skip                                     = 1,
	Normal                                   = 2,
	Count                                    = 3,
	EDebugOnlineBtl_MAX                      = 4,
};

// Enum SS.EDebugOnlineBtl_AiType
// NumValues: 0x0004
enum class EDebugOnlineBtl_AiType : uint8
{
	Normal                                   = 0,
	NormalAddRand                            = 1,
	Count                                    = 2,
	EDebugOnlineBtl_MAX                      = 3,
};

// Enum SS.EDebugOnlineBtl_NetStressType
// NumValues: 0x0007
enum class EDebugOnlineBtl_NetStressType : uint8
{
	None                                     = 0,
	Light                                    = 1,
	Medium                                   = 2,
	Heavy                                    = 3,
	VeryHeavy                                = 4,
	Count                                    = 5,
	EDebugOnlineBtl_MAX                      = 6,
};

// Enum SS.ESSDlcItemType
// NumValues: 0x0007
enum class ESSDlcItemType : uint8
{
	None                                     = 0,
	Character                                = 1,
	CharacterItem                            = 2,
	Bgm                                      = 3,
	PlayerCardBG                             = 4,
	Num                                      = 5,
	ESSDlcItemType_MAX                       = 6,
};

// Enum SS.ESSDragonAdventureIFCharaActionType
// NumValues: 0x0004
enum class ESSDragonAdventureIFCharaActionType : uint8
{
	Entry                                    = 0,
	Wait                                     = 1,
	Decide                                   = 2,
	ESSDragonAdventureIFCharaActionType_MAX  = 3,
};

// Enum SS.ESSDragonAdventureIFChartSubLevelType
// NumValues: 0x0002
enum class ESSDragonAdventureIFChartSubLevelType : uint8
{
	IsLand                                   = 0,
	ESSDragonAdventureIFChartSubLevelType_MAX = 1,
};

// Enum SS.ESSDragonAdventureIFChartStoryMapUIType
// NumValues: 0x0002
enum class ESSDragonAdventureIFChartStoryMapUIType : uint8
{
	Map                                      = 0,
	ESSDragonAdventureIFChartStoryMapUIType_MAX = 1,
};

// Enum SS.ESSDragonAdventureIFChartDirectingSequencerType
// NumValues: 0x0002
enum class ESSDragonAdventureIFChartDirectingSequencerType : uint8
{
	ToEvent                                  = 0,
	ESSDragonAdventureIFChartDirectingSequencerType_MAX = 1,
};

// Enum SS.ESSDragonAdventureIFChartIconType
// NumValues: 0x0008
enum class ESSDragonAdventureIFChartIconType : uint8
{
	Battle                                   = 0,
	Talk                                     = 1,
	Unlock                                   = 2,
	BranchBattle                             = 3,
	BranchTalk                               = 4,
	BranchUnlock                             = 5,
	SideNote                                 = 6,
	ESSDragonAdventureIFChartIconType_MAX    = 7,
};

// Enum SS.ESSDragonAdventureIFChartMapDirectionType
// NumValues: 0x0005
enum class ESSDragonAdventureIFChartMapDirectionType : uint8
{
	U                                        = 0,
	D                                        = 1,
	L                                        = 2,
	R                                        = 3,
	ESSDragonAdventureIFChartMapDirectionType_MAX = 4,
};

// Enum SS.ESSDragonAdventureICommonDirectingSequencerType
// NumValues: 0x0006
enum class ESSDragonAdventureICommonDirectingSequencerType : uint8
{
	None                                     = 0,
	ToChart                                  = 1,
	ToCharaSel                               = 2,
	ToChartEf                                = 3,
	ToCharaSelEf                             = 4,
	ESSDragonAdventureICommonDirectingSequencerType_MAX = 5,
};

// Enum SS.EChangeRowType
// NumValues: 0x0007
enum class EChangeRowType : uint8
{
	Row_00to01                               = 0,
	Row_00to02                               = 1,
	Row_01to00                               = 2,
	Row_01to02                               = 3,
	Row_02to00                               = 4,
	Row_02to01                               = 5,
	Row_MAX                                  = 6,
};

// Enum SS.ESSDragonAdventureIFDirectingSequencerType
// NumValues: 0x0003
enum class ESSDragonAdventureIFDirectingSequencerType : uint8
{
	FlyAway                                  = 0,
	In                                       = 1,
	ESSDragonAdventureIFDirectingSequencerType_MAX = 2,
};

// Enum SS.ESSDragonAdventureIFChartSelectDirectionType
// NumValues: 0x0005
enum class ESSDragonAdventureIFChartSelectDirectionType : uint8
{
	U                                        = 0,
	D                                        = 1,
	L                                        = 2,
	R                                        = 3,
	ESSDragonAdventureIFChartSelectDirectionType_MAX = 4,
};

// Enum SS.ESSDragonAdventureIFEventIconType
// NumValues: 0x0003
enum class ESSDragonAdventureIFEventIconType : uint8
{
	Icon_S                                   = 0,
	Icon_L                                   = 1,
	Icon_MAX                                 = 2,
};

// Enum SS.ESSDragonAdventureIFEventDataType
// NumValues: 0x0005
enum class ESSDragonAdventureIFEventDataType : uint8
{
	FlyersData                               = 0,
	StoryData                                = 1,
	BattleData                               = 2,
	TimeSliceData                            = 3,
	ESSDragonAdventureIFEventDataType_MAX    = 4,
};

// Enum SS.ESSDragonAdventureIFChartCameraType
// NumValues: 0x0003
enum class ESSDragonAdventureIFChartCameraType : uint8
{
	Normal                                   = 0,
	Zoom                                     = 1,
	ESSDragonAdventureIFChartCameraType_MAX  = 2,
};

// Enum SS.ESSDramaticBattleCutEditorCommonUiType
// NumValues: 0x0003
enum class ESSDramaticBattleCutEditorCommonUiType : uint8
{
	None                                     = 0,
	SkipButton                               = 1,
	ESSDramaticBattleCutEditorCommonUiType_MAX = 2,
};

// Enum SS.ESSDramaticBattleCutEditorUIType
// NumValues: 0x0007
enum class ESSDramaticBattleCutEditorUIType : uint8
{
	None                                     = 0,
	UIWindow                                 = 1,
	Timeline                                 = 2,
	SceneView                                = 3,
	InitialSelect                            = 4,
	Picture                                  = 5,
	ESSDramaticBattleCutEditorUIType_MAX     = 6,
};

// Enum SS.ESSDramaticBattleCutEditorUIStatus
// NumValues: 0x0004
enum class ESSDramaticBattleCutEditorUIStatus : uint8
{
	None                                     = 0,
	Active                                   = 1,
	Inactive                                 = 2,
	ESSDramaticBattleCutEditorUIStatus_MAX   = 3,
};

// Enum SS.ESSDramaticBattleCutEditorFunctionOperationType
// NumValues: 0x000C
enum class ESSDramaticBattleCutEditorFunctionOperationType : uint8
{
	None                                     = 0,
	Unimplemented                            = 1,
	Execute                                  = 2,
	Select                                   = 3,
	Label                                    = 4,
	RichText                                 = 5,
	HorizontalSelector                       = 6,
	VHSelector                               = 7,
	List                                     = 8,
	Toggle                                   = 9,
	Check                                    = 10,
	ESSDramaticBattleCutEditorFunctionOperationType_MAX = 11,
};

// Enum SS.ESSDramaticBattleCutEditorFunctionParameterType
// NumValues: 0x001C
enum class ESSDramaticBattleCutEditorFunctionParameterType : uint8
{
	None                                     = 0,
	CutDuration                              = 1,
	CaptureThumbnail                         = 2,
	SetCutSlowPosition                       = 3,
	ActionName                               = 4,
	CharacterIndex                           = 5,
	Character                                = 6,
	Pose                                     = 7,
	Facial                                   = 8,
	CharacterSelect                          = 9,
	SetEffectActive                          = 10,
	SetActionSlowPosition                    = 11,
	CameraName                               = 12,
	ActionNameAlreadySet                     = 13,
	SubtitleIndex                            = 14,
	Subtitle1                                = 15,
	Subtitle2                                = 16,
	Subtitle3                                = 17,
	SubtitleBaseText                         = 18,
	SubtitleReplaceWord                      = 19,
	SubtitleSpeaker                          = 20,
	CharacterSetting                         = 21,
	RemoveSubtitle                           = 22,
	BGMName                                  = 23,
	SlowPosition                             = 24,
	LayerName                                = 25,
	FinishEdit                               = 26,
	ESSDramaticBattleCutEditorFunctionParameterType_MAX = 27,
};

// Enum SS.ESSDramaticBattleCutEditorCutType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorCutType : uint8
{
	Situation                                = 0,
	Demo                                     = 1,
	Picture                                  = 2,
	Initial                                  = 3,
	ESSDramaticBattleCutEditorCutType_MAX    = 4,
};

// Enum SS.ESSDramaticBattleCutEditorWindowLayout
// NumValues: 0x0004
enum class ESSDramaticBattleCutEditorWindowLayout : uint8
{
	ShowAll                                  = 0,
	HideAll                                  = 1,
	ShowUIWindow                             = 2,
	ESSDramaticBattleCutEditorWindowLayout_MAX = 3,
};

// Enum SS.ESSDramaticButtlleCutEditorInitialSelectMenuType
// NumValues: 0x0004
enum class ESSDramaticButtlleCutEditorInitialSelectMenuType : uint8
{
	CutTypeSelect                            = 0,
	Select3D                                 = 1,
	Select2D                                 = 2,
	ESSDramaticButtlleCutEditorInitialSelectMenuType_MAX = 3,
};

// Enum SS.ESSDramaticButtlleNewCutEditorSettingTopCategory
// NumValues: 0x000C
enum class ESSDramaticButtlleNewCutEditorSettingTopCategory : uint8
{
	None                                     = 0,
	Situation                                = 1,
	CharaLayout                              = 2,
	Camera                                   = 3,
	Caption                                  = 4,
	Bgm                                      = 5,
	EnvironmentEffect                        = 6,
	ScreenEffect                             = 7,
	Slow                                     = 8,
	Thumbnail                                = 9,
	EditEnd                                  = 10,
	ESSDramaticButtlleNewCutEditorSettingTopCategory_MAX = 11,
};

// Enum SS.ESSDramaticButtlleNewCutEditorSettingInnerCategory
// NumValues: 0x0012
enum class ESSDramaticButtlleNewCutEditorSettingInnerCategory : uint8
{
	None                                     = 0,
	CutType                                  = 1,
	Cut3D                                    = 2,
	Cut2D                                    = 3,
	LayoutChara                              = 4,
	LayoutPose                               = 5,
	LayoutFacial                             = 6,
	LayoutAura                               = 7,
	LayoutEffect                             = 8,
	LayoutStrongAura                         = 9,
	CaptionTalker                            = 10,
	CaptionText                              = 11,
	SlowStartSec                             = 12,
	SlowInCamera                             = 13,
	DustColor                                = 14,
	SlowStartEffect                          = 15,
	ThumbnailImage                           = 16,
	ESSDramaticButtlleNewCutEditorSettingInnerCategory_MAX = 17,
};

// Enum SS.EKoratDramaticBattleCutEditorInitialSelectImageCategory
// NumValues: 0x0006
enum class EKoratDramaticBattleCutEditorInitialSelectImageCategory : uint8
{
	None                                     = 0,
	Preset                                   = 1,
	UserScreenShot                           = 2,
	Select2D                                 = 3,
	Select3D                                 = 4,
	EKoratDramaticBattleCutEditorInitialSelectImageCategory_MAX = 5,
};

// Enum SS.EKoratDramaticBattleCutEditorInitialSelectImageNumCategory
// NumValues: 0x0005
enum class EKoratDramaticBattleCutEditorInitialSelectImageNumCategory : uint8
{
	None                                     = 0,
	Title                                    = 1,
	Thumbnail                                = 2,
	Preview                                  = 3,
	EKoratDramaticBattleCutEditorInitialSelectImageNumCategory_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIInputButtonType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorInitialSelectUIInputButtonType : uint8
{
	None                                     = 0,
	ChangeFilterLeft                         = 1,
	ChangeFilterRight                        = 2,
	PlayBGM                                  = 3,
	ESSDramaticBattleCutEditorInitialSelectUIInputButtonType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUI3DInputButtonType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorInitialSelectUI3DInputButtonType : uint8
{
	None                                     = 0,
	ChangeFilterLeft                         = 1,
	ChangeFilterRight                        = 2,
	PlayBGM                                  = 3,
	ESSDramaticBattleCutEditorInitialSelectUI3DInputButtonType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionType : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	NonSelectable                            = 2,
	SituationSelectable                      = 3,
	ESSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIWindowSelectItemTextConvertType
// NumValues: 0x000A
enum class ESSDramaticBattleCutEditorInitialSelectUIWindowSelectItemTextConvertType : uint8
{
	None                                     = 0,
	CharacterIndex                           = 1,
	CharacterSpecify                         = 2,
	CharacterPose                            = 3,
	CharacterFacial                          = 4,
	CharacterEffect                          = 5,
	SubtitleIndex                            = 6,
	SubtitleBaseText                         = 7,
	SubtitleReplaceWord                      = 8,
	ESSDramaticBattleCutEditorInitialSelectUIWindowSelectItemTextConvertType_MAX = 9,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIWindowUiType
// NumValues: 0x0010
enum class ESSDramaticBattleCutEditorInitialSelectUIWindowUiType : uint8
{
	None                                     = 0,
	EditWindow                               = 1,
	EditWindowButton                         = 2,
	EditWindowLabel                          = 3,
	PreviewPanel                             = 4,
	GeneralDialog                            = 5,
	ButtonGuide                              = 6,
	InitialSelectCutSelect                   = 7,
	InitialSelect3DSelect                    = 8,
	InitialSelect3DButton                    = 9,
	InitialSelect2DSelect                    = 10,
	InitialSelect2DButton                    = 11,
	InitialSelectExtra_001                   = 12,
	InitialSelectExtra_002                   = 13,
	InitialSelectExtra_003                   = 14,
	ESSDramaticBattleCutEditorInitialSelectUIWindowUiType_MAX = 15,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonFunctionType
// NumValues: 0x0004
enum class ESSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonFunctionType : uint8
{
	None                                     = 0,
	Decide                                   = 1,
	Cancel                                   = 2,
	ESSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonFunctionType_MAX = 3,
};

// Enum SS.ESSDramaticBattleCutEditorInitialSelectUIWindowDialogDataType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorInitialSelectUIWindowDialogDataType : uint8
{
	None                                     = 0,
	TestFinish                               = 1,
	NoActionName                             = 2,
	CannotExchangeCharacter                  = 3,
	ESSDramaticBattleCutEditorInitialSelectUIWindowDialogDataType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorSceneViewUiType
// NumValues: 0x0009
enum class ESSDramaticBattleCutEditorSceneViewUiType : uint8
{
	None                                     = 0,
	ThumbnailImage                           = 1,
	ThumbnailText                            = 2,
	ButtonGuide                              = 3,
	CaptureActor                             = 4,
	WindowEventSceneText                     = 5,
	AutomationCaptureWaiting                 = 6,
	AutomationCaptureUpdateMessag            = 7,
	ESSDramaticBattleCutEditorSceneViewUiType_MAX = 8,
};

// Enum SS.ESSDramaticBattleCutEditorSceneViewTextType
// NumValues: 0x0003
enum class ESSDramaticBattleCutEditorSceneViewTextType : uint8
{
	None                                     = 0,
	ThumbnailImageWidgetName                 = 1,
	ESSDramaticBattleCutEditorSceneViewTextType_MAX = 2,
};

// Enum SS.ESSDramaticBattleCutEditorTimeLineUiType
// NumValues: 0x0004
enum class ESSDramaticBattleCutEditorTimeLineUiType : uint8
{
	None                                     = 0,
	TimeLine                                 = 1,
	ButtonGuide                              = 2,
	ESSDramaticBattleCutEditorTimeLineUiType_MAX = 3,
};

// Enum SS.ESSDramaticBattleCutEditorTimeLineTextType
// NumValues: 0x000D
enum class ESSDramaticBattleCutEditorTimeLineTextType : uint8
{
	None                                     = 0,
	TrackNamePose                            = 1,
	TrackNameFacial                          = 2,
	TrackNameEffect                          = 3,
	KeyNameEffectOn                          = 4,
	KeyNameEffectOff                         = 5,
	TrackNameCamera                          = 6,
	TrackNameSubtitle                        = 7,
	KeyNameSubtitle1                         = 8,
	KeyNameSubtitle2                         = 9,
	KeyNameSubtitle3                         = 10,
	TrackNameBGM                             = 11,
	ESSDramaticBattleCutEditorTimeLineTextType_MAX = 12,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowInputButtonType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorUIWindowInputButtonType : uint8
{
	None                                     = 0,
	ChangeFilterLeft                         = 1,
	ChangeFilterRight                        = 2,
	PlayBGM                                  = 3,
	ESSDramaticBattleCutEditorUIWindowInputButtonType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowItemInvisibleType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorUIWindowItemInvisibleType : uint8
{
	None                                     = 0,
	NoSelectItemData                         = 1,
	ConditionHidden                          = 2,
	SelectItemFunction                       = 3,
	ESSDramaticBattleCutEditorUIWindowItemInvisibleType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowDisplayConditionType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorUIWindowDisplayConditionType : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	NonSelectable                            = 2,
	SituationSelectable                      = 3,
	ESSDramaticBattleCutEditorUIWindowDisplayConditionType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowSelectItemTextConvertType
// NumValues: 0x000A
enum class ESSDramaticBattleCutEditorUIWindowSelectItemTextConvertType : uint8
{
	None                                     = 0,
	CharacterIndex                           = 1,
	CharacterSpecify                         = 2,
	CharacterPose                            = 3,
	CharacterFacial                          = 4,
	CharacterEffect                          = 5,
	SubtitleIndex                            = 6,
	SubtitleBaseText                         = 7,
	SubtitleReplaceWord                      = 8,
	ESSDramaticBattleCutEditorUIWindowSelectItemTextConvertType_MAX = 9,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowUiType
// NumValues: 0x000D
enum class ESSDramaticBattleCutEditorUIWindowUiType : uint8
{
	None                                     = 0,
	EditWindow                               = 1,
	EditWindowButton                         = 2,
	EditWindowLabel                          = 3,
	PreviewPanel                             = 4,
	GeneralDialog                            = 5,
	ButtonGuide                              = 6,
	InitialSelectCutSelect                   = 7,
	InitialSelect3DSelect                    = 8,
	InitialSelect3DButton                    = 9,
	InitialSelect2DSelect                    = 10,
	InitialSelect2DButton                    = 11,
	ESSDramaticBattleCutEditorUIWindowUiType_MAX = 12,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowDialogButtonFunctionType
// NumValues: 0x0004
enum class ESSDramaticBattleCutEditorUIWindowDialogButtonFunctionType : uint8
{
	None                                     = 0,
	Decide                                   = 1,
	Cancel                                   = 2,
	ESSDramaticBattleCutEditorUIWindowDialogButtonFunctionType_MAX = 3,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowDialogDataType
// NumValues: 0x0005
enum class ESSDramaticBattleCutEditorUIWindowDialogDataType : uint8
{
	None                                     = 0,
	TestFinish                               = 1,
	NoActionName                             = 2,
	CannotExchangeCharacter                  = 3,
	ESSDramaticBattleCutEditorUIWindowDialogDataType_MAX = 4,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowPreviewUpdateDelayType
// NumValues: 0x0008
enum class ESSDramaticBattleCutEditorUIWindowPreviewUpdateDelayType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Pose                                     = 2,
	Facial                                   = 3,
	EffectActive                             = 4,
	Camera                                   = 5,
	Layer                                    = 6,
	ESSDramaticBattleCutEditorUIWindowPreviewUpdateDelayType_MAX = 7,
};

// Enum SS.ESSDramaticBattleCutEditorUIWindowTimeLineUpdateDelayType
// NumValues: 0x000A
enum class ESSDramaticBattleCutEditorUIWindowTimeLineUpdateDelayType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Pose                                     = 2,
	Facial                                   = 3,
	EffectActive                             = 4,
	Camera                                   = 5,
	Subtitle                                 = 6,
	BGM                                      = 7,
	SlowPosition                             = 8,
	ESSDramaticBattleCutEditorUIWindowTimeLineUpdateDelayType_MAX = 9,
};

// Enum SS.EKoratDramaticBattleListType
// NumValues: 0x0005
enum class EKoratDramaticBattleListType : uint8
{
	None                                     = 0,
	Extra                                    = 1,
	Template                                 = 2,
	Default                                  = 3,
	EKoratDramaticBattleListType_MAX         = 4,
};

// Enum SS.EKoratPostEditBattleStatus
// NumValues: 0x0005
enum class EKoratPostEditBattleStatus : uint8
{
	None                                     = 0,
	Success                                  = 1,
	Failure                                  = 2,
	Cancel                                   = 3,
	EKoratPostEditBattleStatus_MAX           = 4,
};

// Enum SS.EKoratDramaticEditFilterMode
// NumValues: 0x0007
enum class EKoratDramaticEditFilterMode : uint8
{
	None                                     = 0,
	Picture                                  = 1,
	BaseText                                 = 2,
	ReplaceWord                              = 3,
	ConvertionText                           = 4,
	Tag                                      = 5,
	EKoratDramaticEditFilterMode_MAX         = 6,
};

// Enum SS.EKoratDramaticEditCharacterMode
// NumValues: 0x0003
enum class EKoratDramaticEditCharacterMode : uint8
{
	BattleChara                              = 0,
	Npc                                      = 1,
	EKoratDramaticEditCharacterMode_MAX      = 2,
};

// Enum SS.EKoratDramaticEditSceneListMode
// NumValues: 0x0004
enum class EKoratDramaticEditSceneListMode : uint8
{
	Decide                                   = 0,
	Cancel                                   = 1,
	Edit                                     = 2,
	EKoratDramaticEditSceneListMode_MAX      = 3,
};

// Enum SS.EKoratDramaticEditDLCDialogMode
// NumValues: 0x0007
enum class EKoratDramaticEditDLCDialogMode : uint8
{
	None                                     = 0,
	ListBattle                               = 1,
	DetailBattle                             = 2,
	Edit                                     = 3,
	Post                                     = 4,
	Copy                                     = 5,
	EKoratDramaticEditDLCDialogMode_MAX      = 6,
};

// Enum SS.EKoratDramaticEditDisablePost
// NumValues: 0x0005
enum class EKoratDramaticEditDisablePost : uint8
{
	None                                     = 0,
	NotClear                                 = 1,
	TempThumbnail                            = 2,
	Penalty                                  = 3,
	EKoratDramaticEditDisablePost_MAX        = 4,
};

// Enum SS.ESimpleStageSelectPageType
// NumValues: 0x0004
enum class ESimpleStageSelectPageType : uint8
{
	Stage                                    = 0,
	Bgm                                      = 1,
	Rule                                     = 2,
	Max                                      = 3,
};

// Enum SS.EKoratDramaticListPressedButton
// NumValues: 0x0004
enum class EKoratDramaticListPressedButton : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	EKoratDramaticListPressedButton_MAX      = 3,
};

// Enum SS.EKoratDramaticListStatus
// NumValues: 0x0004
enum class EKoratDramaticListStatus : uint8
{
	None                                     = 0,
	ListHideAnim                             = 1,
	ListReDisplay                            = 2,
	EKoratDramaticListStatus_MAX             = 3,
};

// Enum SS.ESSDramaticBattleNewCutEditorCommonUiType
// NumValues: 0x000A
enum class ESSDramaticBattleNewCutEditorCommonUiType : uint8
{
	None                                     = 0,
	FoldEditWindow                           = 1,
	DimensionSelectWindow                    = 2,
	CutSelect2DWindow                        = 3,
	CutSelect3DWindow                        = 4,
	TextSubWindow                            = 5,
	MultiLineTextSubWindow                   = 6,
	BGMSubWindow                             = 7,
	LayoutCharaWindow                        = 8,
	ESSDramaticBattleNewCutEditorCommonUiType_MAX = 9,
};

// Enum SS.ESSDramaticBattleTipsCategoryType
// NumValues: 0x0009
enum class ESSDramaticBattleTipsCategoryType : uint8
{
	All                                      = 0,
	CustomBattle                             = 1,
	EditMode                                 = 2,
	ActivateCondition                        = 3,
	BattleProduction                         = 4,
	CutEditor                                = 5,
	Others                                   = 6,
	SingleTipsOnly                           = 7,
	ESSDramaticBattleTipsCategoryType_MAX    = 8,
};

// Enum SS.EKoratDramaticEditButtonMode
// NumValues: 0x0004
enum class EKoratDramaticEditButtonMode : uint8
{
	None                                     = 0,
	NotPosted                                = 1,
	Posted                                   = 2,
	EKoratDramaticEditButtonMode_MAX         = 3,
};

// Enum SS.EKoratDramaticEditBeforTransition
// NumValues: 0x000F
enum class EKoratDramaticEditBeforTransition : uint8
{
	None                                     = 0,
	EditTopBattle                            = 1,
	StageSelect                              = 2,
	Character                                = 3,
	GuestCharcter                            = 4,
	SceneEditor                              = 5,
	CutEditor                                = 6,
	ScenePreview                             = 7,
	SceneList                                = 8,
	CutUpdate                                = 9,
	CutUpdateEditThumbnail                   = 10,
	CutUpdateEditPreview                     = 11,
	CutUpdateSceneEditor                     = 12,
	CutUpdatePostBattle                      = 13,
	EKoratDramaticEditBeforTransition_MAX    = 14,
};

// Enum SS.EKoratDramaticWLibNetState
// NumValues: 0x0006
enum class EKoratDramaticWLibNetState : uint8
{
	Idle                                     = 0,
	Delay                                    = 1,
	Wait                                     = 2,
	Success                                  = 3,
	Failed                                   = 4,
	EKoratDramaticWLibNetState_MAX           = 5,
};

// Enum SS.EKoratDramaticEditState
// NumValues: 0x0004
enum class EKoratDramaticEditState : uint8
{
	Normal                                   = 0,
	EasyEditing                              = 1,
	EasyEdited                               = 2,
	EKoratDramaticEditState_MAX              = 3,
};

// Enum SS.EKoratDramaticEditSceneSettingState
// NumValues: 0x0007
enum class EKoratDramaticEditSceneSettingState : uint8
{
	Opening                                  = 0,
	NormalWin                                = 1,
	NormalLose                               = 2,
	SpecialWin                               = 3,
	SpecialLose                              = 4,
	DirectionEvent                           = 5,
	EKoratDramaticEditSceneSettingState_MAX  = 6,
};

// Enum SS.EKoratDramaticEditCutConsistency
// NumValues: 0x0005
enum class EKoratDramaticEditCutConsistency : uint8
{
	None                                     = 0,
	Match                                    = 1,
	TempAssemble                             = 2,
	Failure                                  = 3,
	EKoratDramaticEditCutConsistency_MAX     = 4,
};

// Enum SS.EKoratDramaticEditCutUpdateState
// NumValues: 0x0004
enum class EKoratDramaticEditCutUpdateState : uint8
{
	None                                     = 0,
	Interrupt                                = 1,
	Complete                                 = 2,
	EKoratDramaticEditCutUpdateState_MAX     = 3,
};

// Enum SS.EKoratDramaticDirectionSubMenuMode
// NumValues: 0x0004
enum class EKoratDramaticDirectionSubMenuMode : uint8
{
	None                                     = 0,
	BulkDelete                               = 1,
	Exchange                                 = 2,
	EKoratDramaticDirectionSubMenuMode_MAX   = 3,
};

// Enum SS.EKoratDramaticTriggerSubMenuMode
// NumValues: 0x0004
enum class EKoratDramaticTriggerSubMenuMode : uint8
{
	None                                     = 0,
	BulkDelete                               = 1,
	Exchange                                 = 2,
	EKoratDramaticTriggerSubMenuMode_MAX     = 3,
};

// Enum SS.EKoratDramaticDirectionMode
// NumValues: 0x0005
enum class EKoratDramaticDirectionMode : uint8
{
	None                                     = 0,
	Trigger                                  = 1,
	Details                                  = 2,
	SpecialEnding                            = 3,
	EKoratDramaticDirectionMode_MAX          = 4,
};

// Enum SS.EKoratDramaticEditDirectionDetailMode
// NumValues: 0x0009
enum class EKoratDramaticEditDirectionDetailMode : uint8
{
	DirectionChara                           = 0,
	DirectionNumeric                         = 1,
	DirectionFormChange                      = 2,
	DirectionConditions                      = 3,
	DirectionItem                            = 4,
	DirectionScene                           = 5,
	DirectionEmote                           = 6,
	TotalDirectionMode                       = 7,
	EKoratDramaticEditDirectionDetailMode_MAX = 8,
};

// Enum SS.EKoratDramaticEditDirectionDetailFormChangeMode
// NumValues: 0x0005
enum class EKoratDramaticEditDirectionDetailFormChangeMode : uint8
{
	FormChange                               = 0,
	FusionPotaraChange                       = 1,
	AllChange                                = 2,
	AllChangeWithCurrent                     = 3,
	EKoratDramaticEditDirectionDetailFormChangeMode_MAX = 4,
};

// Enum SS.EKoratDramaticEditConditionsMode
// NumValues: 0x000F
enum class EKoratDramaticEditConditionsMode : uint8
{
	None                                     = 0,
	TriggerText                              = 1,
	DirectingText                            = 2,
	ConditionsActionText                     = 3,
	ActivateActionText                       = 4,
	ConditonInputText                        = 5,
	ConversationSpeaker                      = 6,
	ConversationBaseText                     = 7,
	ConversationRwplaceWord                  = 8,
	BGMNameText                              = 9,
	TargetText                               = 10,
	StatusText                               = 11,
	BuffText                                 = 12,
	AiText                                   = 13,
	EKoratDramaticEditConditionsMode_MAX     = 14,
};

// Enum SS.EKoratDramaticEditTriggerMode
// NumValues: 0x0004
enum class EKoratDramaticEditTriggerMode : uint8
{
	NormalDirection                          = 0,
	SpecialEndingWin                         = 1,
	SpecialEndingLose                        = 2,
	EKoratDramaticEditTriggerMode_MAX        = 3,
};

// Enum SS.EKoratDramaticEditDirectionStep
// NumValues: 0x0006
enum class EKoratDramaticEditDirectionStep : uint8
{
	EditMajorItem                            = 0,
	EditTarget                               = 1,
	EditDetail                               = 2,
	EditDetail2                              = 3,
	EditNumOfActivation                      = 4,
	EKoratDramaticEditDirectionStep_MAX      = 5,
};

// Enum SS.EKoratSelectGuestCharacterUiMode
// NumValues: 0x0004
enum class EKoratSelectGuestCharacterUiMode : uint8
{
	None                                     = 0,
	Delete                                   = 1,
	Exchange                                 = 2,
	EKoratSelectGuestCharacterUiMode_MAX     = 3,
};

// Enum SS.EKoratSelectCharacterMode
// NumValues: 0x0003
enum class EKoratSelectCharacterMode : uint8
{
	Battle                                   = 0,
	Guest                                    = 1,
	Max                                      = 2,
};

// Enum SS.EKoratCharaPanelMode
// NumValues: 0x0004
enum class EKoratCharaPanelMode : uint8
{
	None                                     = 0,
	Question                                 = 1,
	Hidden                                   = 2,
	EKoratCharaPanelMode_MAX                 = 3,
};

// Enum SS.EKoratDramaticEditSceneCategory
// NumValues: 0x0005
enum class EKoratDramaticEditSceneCategory : uint8
{
	None                                     = 0,
	Thumbnail                                = 1,
	Title                                    = 2,
	Ending                                   = 3,
	EKoratDramaticEditSceneCategory_MAX      = 4,
};

// Enum SS.EKoratEditOpnFocusButton
// NumValues: 0x0007
enum class EKoratEditOpnFocusButton : uint8
{
	SummaryEditButtuns                       = 0,
	TitleEditButton                          = 1,
	BGMEditButton                            = 2,
	JingleButton                             = 3,
	EditSaveButton                           = 4,
	TotalButtonsNum                          = 5,
	EKoratEditOpnFocusButton_MAX             = 6,
};

// Enum SS.EKoratDramaticEditRuleMode
// NumValues: 0x0008
enum class EKoratDramaticEditRuleMode : uint8
{
	Stage                                    = 0,
	BGM                                      = 1,
	ChangeRule                               = 2,
	Time                                     = 3,
	Win                                      = 4,
	Lose                                     = 5,
	SumModeNum                               = 6,
	EKoratDramaticEditRuleMode_MAX           = 7,
};

// Enum SS.EKoratDramaticEditSummaryMode
// NumValues: 0x0005
enum class EKoratDramaticEditSummaryMode : uint8
{
	Image                                    = 0,
	BaseText                                 = 1,
	ReplaceWord                              = 2,
	SumModeNum                               = 3,
	EKoratDramaticEditSummaryMode_MAX        = 4,
};

// Enum SS.EKoratTemplateSelecterAnimButton
// NumValues: 0x0005
enum class EKoratTemplateSelecterAnimButton : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Num                                      = 3,
	EKoratTemplateSelecterAnimButton_MAX     = 4,
};

// Enum SS.FKoratSelectedButtonMode
// NumValues: 0x0009
enum class EFKoratSelectedButtonMode : uint8
{
	OpeningEdit                              = 0,
	CharaEdit                                = 1,
	BattleRuleEdit                           = 2,
	DirectionEdit                            = 3,
	EndingEdit                               = 4,
	TestPlay                                 = 5,
	Save                                     = 6,
	None                                     = 7,
	FKoratSelectedButtonMode_MAX             = 8,
};

// Enum SS.EKoratDramaticBattleListUiMode
// NumValues: 0x0005
enum class EKoratDramaticBattleListUiMode : uint8
{
	Extra100                                 = 0,
	Edit                                     = 1,
	Extra100InEdit                           = 2,
	None                                     = 3,
	EKoratDramaticBattleListUiMode_MAX       = 4,
};

// Enum SS.ESSImageGenerationStatus
// NumValues: 0x0005
enum class ESSImageGenerationStatus : uint8
{
	None                                     = 0,
	Request                                  = 1,
	Processing                               = 2,
	Complete                                 = 3,
	ESSImageGenerationStatus_MAX             = 4,
};

// Enum SS.ESSImageGenerationImageLabel
// NumValues: 0x0008
enum class ESSImageGenerationImageLabel : uint8
{
	None                                     = 0,
	MainBgImage                              = 1,
	PreviewImage01                           = 2,
	PreviewImage02                           = 3,
	PreviewImage03                           = 4,
	PreviewImage04                           = 5,
	PreviewImage05                           = 6,
	Max                                      = 7,
};

// Enum SS.EKoratDramaticEditImageCategory
// NumValues: 0x0005
enum class EKoratDramaticEditImageCategory : uint8
{
	None                                     = 0,
	Preset                                   = 1,
	UserScreenShot                           = 2,
	Setup                                    = 3,
	EKoratDramaticEditImageCategory_MAX      = 4,
};

// Enum SS.EKoratDramaticEditImageNumCategory
// NumValues: 0x0005
enum class EKoratDramaticEditImageNumCategory : uint8
{
	None                                     = 0,
	Title                                    = 1,
	Thumbnail                                = 2,
	Preview                                  = 3,
	EKoratDramaticEditImageNumCategory_MAX   = 4,
};

// Enum SS.EKoratDramaticSceneListDecideStatus
// NumValues: 0x0004
enum class EKoratDramaticSceneListDecideStatus : uint8
{
	None                                     = 0,
	ScenePanel                               = 1,
	NewCreate                                = 2,
	Max                                      = 3,
};

// Enum SS.EKoratDramaticUsedScene
// NumValues: 0x0005
enum class EKoratDramaticUsedScene : uint8
{
	None                                     = 0,
	Opening                                  = 1,
	NormalWin                                = 2,
	NormalLose                               = 3,
	Max                                      = 4,
};

// Enum SS.EKoratDramaticSceneDecideButton
// NumValues: 0x0007
enum class EKoratDramaticSceneDecideButton : uint8
{
	None                                     = 0,
	OpeningScene                             = 1,
	VictoryScene                             = 2,
	DefeatScene                              = 3,
	VictoryEnding                            = 4,
	DefeatEnding                             = 5,
	EKoratDramaticSceneDecideButton_MAX      = 6,
};

// Enum SS.EKoratDramaticSpEndDecideButton
// NumValues: 0x0008
enum class EKoratDramaticSpEndDecideButton : uint8
{
	None                                     = 0,
	SpVictoryCondition                       = 1,
	SpDefeatCondition                        = 2,
	SpVictoryScene                           = 3,
	SpDefeatScene                            = 4,
	SpVictoryEnding                          = 5,
	SpDefeatEnding                           = 6,
	EKoratDramaticSpEndDecideButton_MAX      = 7,
};

// Enum SS.EKoratDramaticEditTextCategory
// NumValues: 0x0006
enum class EKoratDramaticEditTextCategory : uint8
{
	None                                     = 0,
	BaseText                                 = 1,
	ReplaceWord                              = 2,
	Jingru                                   = 3,
	Tag                                      = 4,
	EKoratDramaticEditTextCategory_MAX       = 5,
};

// Enum SS.EKoratDramaticEditTextFilterCategory
// NumValues: 0x0004
enum class EKoratDramaticEditTextFilterCategory : uint8
{
	None                                     = 0,
	AllTag                                   = 1,
	Setup                                    = 2,
	EKoratDramaticEditTextFilterCategory_MAX = 3,
};

// Enum SS.EKoratDramaticBattleMode
// NumValues: 0x0005
enum class EKoratDramaticBattleMode : uint8
{
	Extra100                                 = 0,
	WorldLibrarie                            = 1,
	Edit                                     = 2,
	None                                     = 3,
	EKoratDramaticBattleMode_MAX             = 4,
};

// Enum SS.ESSDramaticSituationType
// NumValues: 0x0009
enum class ESSDramaticSituationType : uint8
{
	Event3D                                  = 0,
	Event2D                                  = 1,
	Battle3D_Blast                           = 2,
	Battle3D_ImpactSPE                       = 3,
	Battle3D_ImpactPOW_N2N                   = 4,
	Battle3D_ImpactPOW_G2N                   = 5,
	Battle3D_Appeal                          = 6,
	Battle3D_AppealWIN                       = 7,
	ESSDramaticSituationType_MAX             = 8,
};

// Enum SS.ESSDramaticRebindType
// NumValues: 0x0003
enum class ESSDramaticRebindType : uint8
{
	Battle                                   = 0,
	Event                                    = 1,
	Max                                      = 2,
};

// Enum SS.ESSDramaticTextAvailableTypeFlags
// NumValues: 0x0009
enum class ESSDramaticTextAvailableTypeFlags : uint8
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_MAX                                  = 129,
};

// Enum SS.ESSDramaticTextBaseTextFilterFlags
// NumValues: 0x0041
enum class ESSDramaticTextBaseTextFilterFlags : uint64
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_16                                   = 65536,
	BIT_17                                   = 131072,
	BIT_18                                   = 262144,
	BIT_19                                   = 524288,
	BIT_20                                   = 1048576,
	BIT_21                                   = 2097152,
	BIT_22                                   = 4194304,
	BIT_23                                   = 8388608,
	BIT_24                                   = 16777216,
	BIT_25                                   = 33554432,
	BIT_26                                   = 67108864,
	BIT_27                                   = 134217728,
	BIT_28                                   = 268435456,
	BIT_29                                   = 536870912,
	BIT_30                                   = 1073741824,
	BIT_31                                   = 2147483648,
	BIT_32                                   = 4294967296,
	BIT_33                                   = 8589934592,
	BIT_34                                   = 17179869184,
	BIT_35                                   = 34359738368,
	BIT_36                                   = 68719476736,
	BIT_37                                   = 137438953472,
	BIT_38                                   = 274877906944,
	BIT_39                                   = 549755813888,
	BIT_40                                   = 1099511627776,
	BIT_41                                   = 2199023255552,
	BIT_42                                   = 4398046511104,
	BIT_43                                   = 8796093022208,
	BIT_44                                   = 17592186044416,
	BIT_45                                   = 35184372088832,
	BIT_46                                   = 70368744177664,
	BIT_47                                   = 140737488355328,
	BIT_48                                   = 281474976710656,
	BIT_49                                   = 562949953421312,
	BIT_50                                   = 1125899906842624,
	BIT_51                                   = 2251799813685248,
	BIT_52                                   = 4503599627370496,
	BIT_53                                   = 9007199254740992,
	BIT_54                                   = 18014398509481984,
	BIT_55                                   = 36028797018963968,
	BIT_56                                   = 72057594037927936,
	BIT_57                                   = 144115188075855872,
	BIT_58                                   = 288230376151711744,
	BIT_59                                   = 576460752303423488,
	BIT_60                                   = 1152921504606846976,
	BIT_61                                   = 2305843009213693952,
	BIT_62                                   = 4611686018427387904,
	BIT_63                                   = 9223372036854775808,
	BIT_MAX                                  = 4611686018427387905,
};

// Enum SS.ESSDramaticTextWordTextFilterFlags
// NumValues: 0x0041
enum class ESSDramaticTextWordTextFilterFlags : uint64
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_16                                   = 65536,
	BIT_17                                   = 131072,
	BIT_18                                   = 262144,
	BIT_19                                   = 524288,
	BIT_20                                   = 1048576,
	BIT_21                                   = 2097152,
	BIT_22                                   = 4194304,
	BIT_23                                   = 8388608,
	BIT_24                                   = 16777216,
	BIT_25                                   = 33554432,
	BIT_26                                   = 67108864,
	BIT_27                                   = 134217728,
	BIT_28                                   = 268435456,
	BIT_29                                   = 536870912,
	BIT_30                                   = 1073741824,
	BIT_31                                   = 2147483648,
	BIT_32                                   = 4294967296,
	BIT_33                                   = 8589934592,
	BIT_34                                   = 17179869184,
	BIT_35                                   = 34359738368,
	BIT_36                                   = 68719476736,
	BIT_37                                   = 137438953472,
	BIT_38                                   = 274877906944,
	BIT_39                                   = 549755813888,
	BIT_40                                   = 1099511627776,
	BIT_41                                   = 2199023255552,
	BIT_42                                   = 4398046511104,
	BIT_43                                   = 8796093022208,
	BIT_44                                   = 17592186044416,
	BIT_45                                   = 35184372088832,
	BIT_46                                   = 70368744177664,
	BIT_47                                   = 140737488355328,
	BIT_48                                   = 281474976710656,
	BIT_49                                   = 562949953421312,
	BIT_50                                   = 1125899906842624,
	BIT_51                                   = 2251799813685248,
	BIT_52                                   = 4503599627370496,
	BIT_53                                   = 9007199254740992,
	BIT_54                                   = 18014398509481984,
	BIT_55                                   = 36028797018963968,
	BIT_56                                   = 72057594037927936,
	BIT_57                                   = 144115188075855872,
	BIT_58                                   = 288230376151711744,
	BIT_59                                   = 576460752303423488,
	BIT_60                                   = 1152921504606846976,
	BIT_61                                   = 2305843009213693952,
	BIT_62                                   = 4611686018427387904,
	BIT_63                                   = 9223372036854775808,
	BIT_MAX                                  = 4611686018427387905,
};

// Enum SS.ESSDramaticTextWordCategoryFlags
// NumValues: 0x0041
enum class ESSDramaticTextWordCategoryFlags : uint64
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_16                                   = 65536,
	BIT_17                                   = 131072,
	BIT_18                                   = 262144,
	BIT_19                                   = 524288,
	BIT_20                                   = 1048576,
	BIT_21                                   = 2097152,
	BIT_22                                   = 4194304,
	BIT_23                                   = 8388608,
	BIT_24                                   = 16777216,
	BIT_25                                   = 33554432,
	BIT_26                                   = 67108864,
	BIT_27                                   = 134217728,
	BIT_28                                   = 268435456,
	BIT_29                                   = 536870912,
	BIT_30                                   = 1073741824,
	BIT_31                                   = 2147483648,
	BIT_32                                   = 4294967296,
	BIT_33                                   = 8589934592,
	BIT_34                                   = 17179869184,
	BIT_35                                   = 34359738368,
	BIT_36                                   = 68719476736,
	BIT_37                                   = 137438953472,
	BIT_38                                   = 274877906944,
	BIT_39                                   = 549755813888,
	BIT_40                                   = 1099511627776,
	BIT_41                                   = 2199023255552,
	BIT_42                                   = 4398046511104,
	BIT_43                                   = 8796093022208,
	BIT_44                                   = 17592186044416,
	BIT_45                                   = 35184372088832,
	BIT_46                                   = 70368744177664,
	BIT_47                                   = 140737488355328,
	BIT_48                                   = 281474976710656,
	BIT_49                                   = 562949953421312,
	BIT_50                                   = 1125899906842624,
	BIT_51                                   = 2251799813685248,
	BIT_52                                   = 4503599627370496,
	BIT_53                                   = 9007199254740992,
	BIT_54                                   = 18014398509481984,
	BIT_55                                   = 36028797018963968,
	BIT_56                                   = 72057594037927936,
	BIT_57                                   = 144115188075855872,
	BIT_58                                   = 288230376151711744,
	BIT_59                                   = 576460752303423488,
	BIT_60                                   = 1152921504606846976,
	BIT_61                                   = 2305843009213693952,
	BIT_62                                   = 4611686018427387904,
	BIT_63                                   = 9223372036854775808,
	BIT_MAX                                  = 4611686018427387905,
};

// Enum SS.ESSDramaticTextTextCategoryFlags
// NumValues: 0x0041
enum class ESSDramaticTextTextCategoryFlags : uint64
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_16                                   = 65536,
	BIT_17                                   = 131072,
	BIT_18                                   = 262144,
	BIT_19                                   = 524288,
	BIT_20                                   = 1048576,
	BIT_21                                   = 2097152,
	BIT_22                                   = 4194304,
	BIT_23                                   = 8388608,
	BIT_24                                   = 16777216,
	BIT_25                                   = 33554432,
	BIT_26                                   = 67108864,
	BIT_27                                   = 134217728,
	BIT_28                                   = 268435456,
	BIT_29                                   = 536870912,
	BIT_30                                   = 1073741824,
	BIT_31                                   = 2147483648,
	BIT_32                                   = 4294967296,
	BIT_33                                   = 8589934592,
	BIT_34                                   = 17179869184,
	BIT_35                                   = 34359738368,
	BIT_36                                   = 68719476736,
	BIT_37                                   = 137438953472,
	BIT_38                                   = 274877906944,
	BIT_39                                   = 549755813888,
	BIT_40                                   = 1099511627776,
	BIT_41                                   = 2199023255552,
	BIT_42                                   = 4398046511104,
	BIT_43                                   = 8796093022208,
	BIT_44                                   = 17592186044416,
	BIT_45                                   = 35184372088832,
	BIT_46                                   = 70368744177664,
	BIT_47                                   = 140737488355328,
	BIT_48                                   = 281474976710656,
	BIT_49                                   = 562949953421312,
	BIT_50                                   = 1125899906842624,
	BIT_51                                   = 2251799813685248,
	BIT_52                                   = 4503599627370496,
	BIT_53                                   = 9007199254740992,
	BIT_54                                   = 18014398509481984,
	BIT_55                                   = 36028797018963968,
	BIT_56                                   = 72057594037927936,
	BIT_57                                   = 144115188075855872,
	BIT_58                                   = 288230376151711744,
	BIT_59                                   = 576460752303423488,
	BIT_60                                   = 1152921504606846976,
	BIT_61                                   = 2305843009213693952,
	BIT_62                                   = 4611686018427387904,
	BIT_63                                   = 9223372036854775808,
	BIT_MAX                                  = 4611686018427387905,
};

// Enum SS.ESSDramaticPictureAvailableTypeFlags
// NumValues: 0x0011
enum class ESSDramaticPictureAvailableTypeFlags : uint16
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_MAX                                  = 32769,
};

// Enum SS.ESSDramaticPictureFilterFlags
// NumValues: 0x0041
enum class ESSDramaticPictureFilterFlags : uint64
{
	BIT_0                                    = 1,
	BIT_1                                    = 2,
	BIT_2                                    = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	BIT_8                                    = 256,
	BIT_9                                    = 512,
	BIT_10                                   = 1024,
	BIT_11                                   = 2048,
	BIT_12                                   = 4096,
	BIT_13                                   = 8192,
	BIT_14                                   = 16384,
	BIT_15                                   = 32768,
	BIT_16                                   = 65536,
	BIT_17                                   = 131072,
	BIT_18                                   = 262144,
	BIT_19                                   = 524288,
	BIT_20                                   = 1048576,
	BIT_21                                   = 2097152,
	BIT_22                                   = 4194304,
	BIT_23                                   = 8388608,
	BIT_24                                   = 16777216,
	BIT_25                                   = 33554432,
	BIT_26                                   = 67108864,
	BIT_27                                   = 134217728,
	BIT_28                                   = 268435456,
	BIT_29                                   = 536870912,
	BIT_30                                   = 1073741824,
	BIT_31                                   = 2147483648,
	BIT_32                                   = 4294967296,
	BIT_33                                   = 8589934592,
	BIT_34                                   = 17179869184,
	BIT_35                                   = 34359738368,
	BIT_36                                   = 68719476736,
	BIT_37                                   = 137438953472,
	BIT_38                                   = 274877906944,
	BIT_39                                   = 549755813888,
	BIT_40                                   = 1099511627776,
	BIT_41                                   = 2199023255552,
	BIT_42                                   = 4398046511104,
	BIT_43                                   = 8796093022208,
	BIT_44                                   = 17592186044416,
	BIT_45                                   = 35184372088832,
	BIT_46                                   = 70368744177664,
	BIT_47                                   = 140737488355328,
	BIT_48                                   = 281474976710656,
	BIT_49                                   = 562949953421312,
	BIT_50                                   = 1125899906842624,
	BIT_51                                   = 2251799813685248,
	BIT_52                                   = 4503599627370496,
	BIT_53                                   = 9007199254740992,
	BIT_54                                   = 18014398509481984,
	BIT_55                                   = 36028797018963968,
	BIT_56                                   = 72057594037927936,
	BIT_57                                   = 144115188075855872,
	BIT_58                                   = 288230376151711744,
	BIT_59                                   = 576460752303423488,
	BIT_60                                   = 1152921504606846976,
	BIT_61                                   = 2305843009213693952,
	BIT_62                                   = 4611686018427387904,
	BIT_63                                   = 9223372036854775808,
	BIT_MAX                                  = 4611686018427387905,
};

// Enum SS.EKoratReplaceTextCategry
// NumValues: 0x0003
enum class EKoratReplaceTextCategry : uint8
{
	None                                     = 0,
	Persons                                  = 1,
	EKoratReplaceTextCategry_MAX             = 2,
};

// Enum SS.EKortaDramticMissionCategory
// NumValues: 0x0004
enum class EKortaDramticMissionCategory : uint8
{
	None                                     = 0,
	BattleWinNum                             = 1,
	SpecialWin                               = 2,
	EKortaDramticMissionCategory_MAX         = 3,
};

// Enum SS.ESSDRMEditSocketUseFlags
// NumValues: 0x0009
enum class ESSDRMEditSocketUseFlags : uint8
{
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 4,
	BIT_3                                    = 8,
	BIT_4                                    = 16,
	BIT_5                                    = 32,
	BIT_6                                    = 64,
	BIT_7                                    = 128,
	ESSDRMEditSocketUseFlags_MAX             = 129,
};

// Enum SS.EEffectActorBulletStatus
// NumValues: 0x000B
enum class EEffectActorBulletStatus : uint8
{
	None                                     = 0,
	Launching                                = 1,
	StartBlastImpact                         = 2,
	DuringBlastImpact                        = 3,
	WinBlastImpact                           = 4,
	LoseBlastImpact                          = 5,
	Repel                                    = 6,
	Discrete                                 = 7,
	Absorption                               = 8,
	Reject                                   = 9,
	EEffectActorBulletStatus_MAX             = 10,
};

// Enum SS.ESSEffectPlayMode
// NumValues: 0x0006
enum class ESSEffectPlayMode : uint8
{
	None                                     = 0,
	Play                                     = 1,
	Stop                                     = 2,
	StopAll                                  = 3,
	StopSeqAll                               = 4,
	ESSEffectPlayMode_MAX                    = 5,
};

// Enum SS.ESSEffectAnimNotifyRotationBase
// NumValues: 0x0004
enum class ESSEffectAnimNotifyRotationBase : uint8
{
	World                                    = 0,
	CharaFront                               = 1,
	BoneFront                                = 2,
	ESSEffectAnimNotifyRotationBase_MAX      = 3,
};

// Enum SS.ESSEffectBlastImpactSpawnPointType
// NumValues: 0x0004
enum class ESSEffectBlastImpactSpawnPointType : uint8
{
	None                                     = 0,
	BeamTop                                  = 1,
	Socket_Aim00                             = 2,
	ESSEffectBlastImpactSpawnPointType_MAX   = 3,
};

// Enum SS.ESSParticleAddListOptions
// NumValues: 0x0003
enum class ESSParticleAddListOptions : uint8
{
	Add                                      = 0,
	Replace                                  = 1,
	ESSParticleAddListOptions_MAX            = 2,
};

// Enum SS.SSEffectHighSpeedMoveJointIndex
// NumValues: 0x0020
enum class ESSEffectHighSpeedMoveJointIndex : uint8
{
	NECK                                     = 0,
	HEAD                                     = 1,
	WAIST                                    = 2,
	SPINE2                                   = 3,
	SPINE3                                   = 4,
	THGH_L                                   = 5,
	THGH_R                                   = 6,
	Socket_THIGH_L_Aura_Offset               = 7,
	Socket_THIGH_R_Aura_Offset               = 8,
	CLANK_L                                  = 9,
	CLANK_R                                  = 10,
	CLANKROLL_L                              = 11,
	CLANKROLL_R                              = 12,
	TOE1_L                                   = 13,
	TOE1_R                                   = 14,
	SHOULDER_L                               = 15,
	SHOULDER_R                               = 16,
	ELBOW_L                                  = 17,
	ELBOW_R                                  = 18,
	ELBOWROLL_L                              = 19,
	ELBOWROLL_R                              = 20,
	F_MIDDLE1_L                              = 21,
	F_MIDDLE1_R                              = 22,
	TAIL1                                    = 23,
	TAIL4                                    = 24,
	TAIL7                                    = 25,
	TAIL10                                   = 26,
	TAIL13                                   = 27,
	TAIL16                                   = 28,
	TAIL18                                   = 29,
	JOINT_MAX                                = 30,
	SSEffectHighSpeedMoveJointIndex_MAX      = 31,
};

// Enum SS.EKoratEffectSplineMeshTrailMaterialElementType
// NumValues: 0x000E
enum class EKoratEffectSplineMeshTrailMaterialElementType : uint8
{
	None                                     = 0,
	WristL                                   = 1,
	WristR                                   = 2,
	ElbowL                                   = 3,
	ElbowR                                   = 4,
	ToeL                                     = 5,
	ToeR                                     = 6,
	ClankL                                   = 7,
	ClankR                                   = 8,
	Tail                                     = 9,
	Horn                                     = 10,
	Equipment                                = 11,
	Etc                                      = 12,
	EKoratEffectSplineMeshTrailMaterialElementType_MAX = 13,
};

// Enum SS.EShowFromCameraMode
// NumValues: 0x0005
enum class EShowFromCameraMode : uint8
{
	FirstPerson                              = 0,
	Performance                              = 1,
	AllCamera                                = 2,
	NoCamera                                 = 3,
	MAX                                      = 4,
};

// Enum SS.EKoratEffectToonPointLightGroupType
// NumValues: 0x0005
enum class EKoratEffectToonPointLightGroupType : uint8
{
	None                                     = 0,
	World                                    = 1,
	Equipment                                = 2,
	Aura                                     = 3,
	EKoratEffectToonPointLightGroupType_MAX  = 4,
};

// Enum SS.EKoratEffectToonPointLightTargetType
// NumValues: 0x0004
enum class EKoratEffectToonPointLightTargetType : uint8
{
	Everyone                                 = 0,
	Myself                                   = 1,
	Others                                   = 2,
	EKoratEffectToonPointLightTargetType_MAX = 3,
};

// Enum SS.EKoratEffectToonPointLightDataType
// NumValues: 0x000B
enum class EKoratEffectToonPointLightDataType : uint8
{
	None                                     = 0,
	World                                    = 1,
	Aura                                     = 2,
	Shot                                     = 3,
	SmashShot                                = 4,
	Blast1a                                  = 5,
	Blast1b                                  = 6,
	Blast2a                                  = 7,
	Blast2b                                  = 8,
	BlastU                                   = 9,
	EKoratEffectToonPointLightDataType_MAX   = 10,
};

// Enum SS.EKoratEffectToonPointLightChangeSceneModeType
// NumValues: 0x0004
enum class EKoratEffectToonPointLightChangeSceneModeType : uint8
{
	None                                     = 0,
	EffectLinkedMode                         = 1,
	DemoMode                                 = 2,
	EKoratEffectToonPointLightChangeSceneModeType_MAX = 3,
};

// Enum SS.ESSLightingPositonMethod
// NumValues: 0x0006
enum class ESSLightingPositonMethod : uint8
{
	ActorLocation                            = 0,
	ToonLocation                             = 1,
	MeshLocation                             = 2,
	MeshBounds                               = 3,
	BoneLocation                             = 4,
	ESSLightingPositonMethod_MAX             = 5,
};

// Enum SS.ESSEndingUIType
// NumValues: 0x000B
enum class ESSEndingUIType : uint8
{
	MoviePlayer                              = 0,
	StaffRoll                                = 1,
	Name                                     = 2,
	VoiceActor                               = 3,
	Image                                    = 4,
	Post                                     = 5,
	SubPost                                  = 6,
	CompanyName                              = 7,
	Skip                                     = 8,
	Num                                      = 9,
	ESSEndingUIType_MAX                      = 10,
};

// Enum SS.ESSEndingRegion
// NumValues: 0x0005
enum class ESSEndingRegion : uint8
{
	None                                     = 0,
	AS                                       = 1,
	US                                       = 2,
	EU                                       = 3,
	ESSEndingRegion_MAX                      = 4,
};

// Enum SS.EKoratUnLockType
// NumValues: 0x0008
enum class EKoratUnLockType : uint8
{
	Non                                      = 0,
	Test                                     = 1,
	Default                                  = 2,
	Shop                                     = 3,
	Mission                                  = 4,
	Dlc                                      = 5,
	Battle                                   = 6,
	EKoratUnLockType_MAX                     = 7,
};

// Enum SS.EKoratShopUnLockType
// NumValues: 0x0006
enum class EKoratShopUnLockType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Param                                    = 2,
	Dlc                                      = 3,
	Server                                   = 4,
	EKoratShopUnLockType_MAX                 = 5,
};

// Enum SS.EKoratDramaticExtraUnLockType
// NumValues: 0x0003
enum class EKoratDramaticExtraUnLockType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	EKoratDramaticExtraUnLockType_MAX        = 2,
};

// Enum SS.EKoratUnLockMode
// NumValues: 0x0004
enum class EKoratUnLockMode : uint8
{
	Lock                                     = 0,
	New                                      = 1,
	Checked                                  = 2,
	EKoratUnLockMode_MAX                     = 3,
};

// Enum SS.EKoratUnLockRoute
// NumValues: 0x0003
enum class EKoratUnLockRoute : uint8
{
	GamePlay                                 = 0,
	DLC                                      = 1,
	EKoratUnLockRoute_MAX                    = 2,
};

// Enum SS.EKoratBranch
// NumValues: 0x0003
enum class EKoratBranch : uint8
{
	Succeed                                  = 0,
	Failed                                   = 1,
	EKoratBranch_MAX                         = 2,
};

// Enum SS.EKoratLoop
// NumValues: 0x0003
enum class EKoratLoop : uint8
{
	Continue                                 = 0,
	Complete                                 = 1,
	EKoratLoop_MAX                           = 2,
};

// Enum SS.EKoratDoUntil
// NumValues: 0x0003
enum class EKoratDoUntil : uint8
{
	Do                                       = 0,
	Until                                    = 1,
	EKoratDoUntil_MAX                        = 2,
};

// Enum SS.EKoratValid
// NumValues: 0x0003
enum class EKoratValid : uint8
{
	Valid                                    = 0,
	Invalid                                  = 1,
	EKoratValid_MAX                          = 2,
};

// Enum SS.EKoratInput2Proccess
// NumValues: 0x0003
enum class EKoratInput2Proccess : uint8
{
	Process1                                 = 0,
	Process2                                 = 1,
	EKoratInput2Proccess_MAX                 = 2,
};

// Enum SS.EKoratResetMode
// NumValues: 0x0007
enum class EKoratResetMode : uint8
{
	None                                     = 0,
	OnlyGameState                            = 1,
	ForBattle                                = 2,
	ForBattle_DelChara                       = 3,
	ForOutGame                               = 4,
	ForOutGame_DelChara                      = 5,
	EKoratResetMode_MAX                      = 6,
};

// Enum SS.EKoratRestartMode
// NumValues: 0x0004
enum class EKoratRestartMode : uint8
{
	None                                     = 0,
	ForBattle                                = 1,
	ForOutGame                               = 2,
	EKoratRestartMode_MAX                    = 3,
};

// Enum SS.EKoratBattleStartMode
// NumValues: 0x0005
enum class EKoratBattleStartMode : uint8
{
	First                                    = 0,
	PauseRetry                               = 1,
	FinishedRetry                            = 2,
	Replay                                   = 3,
	EKoratBattleStartMode_MAX                = 4,
};

// Enum SS.EKoratBattleMemberRule
// NumValues: 0x0005
enum class EKoratBattleMemberRule : uint8
{
	None                                     = 0,
	Single                                   = 1,
	Team                                     = 2,
	DP                                       = 3,
	EKoratBattleMemberRule_MAX               = 4,
};

// Enum SS.EKoratBattleMenu
// NumValues: 0x000C
enum class EKoratBattleMenu : uint8
{
	SetupBattle                              = 0,
	AdventureIf                              = 1,
	DramaticBattle                           = 2,
	BattleTraining                           = 3,
	Training                                 = 4,
	Gallery                                  = 5,
	BattleMode012                            = 6,
	BattleMode010                            = 7,
	Tutorial                                 = 8,
	SplitScreenBattle                        = 9,
	TenkaichiBudokai                         = 10,
	EKoratBattleMenu_MAX                     = 11,
};

// Enum SS.EKoratTransitionMode
// NumValues: 0x001F
enum class EKoratTransitionMode : uint8
{
	Battle                                   = 0,
	Title                                    = 1,
	MainMenu                                 = 2,
	AdvIfCharacterSelect                     = 3,
	AdvIfChart                               = 4,
	DramaticBattle                           = 5,
	DramaticBattleEdit                       = 6,
	BattleMode012                            = 7,
	BattleMode010                            = 8,
	BattleSetup                              = 9,
	DramaticBattleSetup                      = 10,
	StageSelect                              = 11,
	StageSelectDramaticEdit                  = 12,
	TenkaichiBudokai                         = 13,
	BattleTraining                           = 14,
	MissionZen                               = 15,
	MissionWhis                              = 16,
	Shop                                     = 17,
	ZCustomize                               = 18,
	CustomizeDramaticEdit                    = 19,
	GuestCostumeCustomize                    = 20,
	PictureBook                              = 21,
	MyData                                   = 22,
	Appreciation                             = 23,
	OnegaiShenron                            = 24,
	Event                                    = 25,
	Tutorial                                 = 26,
	Ending                                   = 27,
	EndSlate                                 = 28,
	None                                     = 29,
	EKoratTransitionMode_MAX                 = 30,
};

// Enum SS.EKoratInterruptSceneJumpDestination
// NumValues: 0x0009
enum class EKoratInterruptSceneJumpDestination : uint8
{
	None                                     = 0,
	SceneJumpRequest                         = 1,
	Invite                                   = 2,
	OnlineRoom                               = 3,
	AfterOnlineEnable                        = 4,
	BeforeOnlineEnable                       = 5,
	TitleMenu                                = 6,
	TitleCompanyLogo                         = 7,
	EKoratInterruptSceneJumpDestination_MAX  = 8,
};

// Enum SS.EKoratBattleSetupStartMode
// NumValues: 0x0005
enum class EKoratBattleSetupStartMode : uint8
{
	None                                     = 0,
	BattleSetupTop                           = 1,
	DebugBattleSetupTop                      = 2,
	TestCharacterSelect                      = 3,
	EKoratBattleSetupStartMode_MAX           = 4,
};

// Enum SS.EKoratBattleKeyMode
// NumValues: 0x0005
enum class EKoratBattleKeyMode : uint8
{
	Key1Pvs2P                                = 0,
	Key1PvsCom                               = 1,
	KeyComvs1P                               = 2,
	KeyComvsCom                              = 3,
	EKoratBattleKeyMode_MAX                  = 4,
};

// Enum SS.EKoratBattleControlMode
// NumValues: 0x0005
enum class EKoratBattleControlMode : uint8
{
	Pad                                      = 0,
	Com                                      = 1,
	Audience                                 = 2,
	Network                                  = 3,
	EKoratBattleControlMode_MAX              = 4,
};

// Enum SS.EKoratBattleOfflineMode
// NumValues: 0x0006
enum class EKoratBattleOfflineMode : uint8
{
	SingleBattle                             = 0,
	TeamBattle                               = 1,
	DPBattle                                 = 2,
	Tenkaichi                                = 3,
	Invalid                                  = 4,
	EKoratBattleOfflineMode_MAX              = 5,
};

// Enum SS.EKoratBattleOnlineMode
// NumValues: 0x000A
enum class EKoratBattleOnlineMode : uint8
{
	None                                     = 0,
	RankMatch                                = 1,
	QuickMatch                               = 2,
	Ranking                                  = 3,
	PlayerMatch                              = 4,
	Tenkaichi                                = 5,
	BattleMode011                            = 6,
	BattleMode010                            = 7,
	BattleMode012                            = 8,
	EKoratBattleOnlineMode_MAX               = 9,
};

// Enum SS.EKoratOnlineBattleMatchingState
// NumValues: 0x0005
enum class EKoratOnlineBattleMatchingState : uint8
{
	None                                     = 0,
	BeforeMatching                           = 1,
	Matching                                 = 2,
	Matched                                  = 3,
	EKoratOnlineBattleMatchingState_MAX      = 4,
};

// Enum SS.EKoratBattleTimeoverRule
// NumValues: 0x0003
enum class EKoratBattleTimeoverRule : uint8
{
	None                                     = 0,
	TimeOverHpLeft                           = 1,
	EKoratBattleTimeoverRule_MAX             = 2,
};

// Enum SS.EKoratBattleStartAppealType
// NumValues: 0x0004
enum class EKoratBattleStartAppealType : uint8
{
	Normal                                   = 0,
	NoAllAppeal                              = 1,
	NoCharacterAppeal                        = 2,
	EKoratBattleStartAppealType_MAX          = 3,
};

// Enum SS.EKoratBattleHitStopRequestPlayer
// NumValues: 0x0004
enum class EKoratBattleHitStopRequestPlayer : uint8
{
	None                                     = 0,
	Own                                      = 1,
	Opponent                                 = 2,
	EKoratBattleHitStopRequestPlayer_MAX     = 3,
};

// Enum SS.EKoratCharacterInstanceType
// NumValues: 0x0004
enum class EKoratCharacterInstanceType : uint8
{
	Battle                                   = 0,
	Support                                  = 1,
	EventUI                                  = 2,
	EKoratCharacterInstanceType_MAX          = 3,
};

// Enum SS.EKoratCharacterChangeMode
// NumValues: 0x0007
enum class EKoratCharacterChangeMode : uint8
{
	None                                     = 0,
	StyleChange                              = 1,
	Fusion                                   = 2,
	Potara                                   = 3,
	TeamMemberChange                         = 4,
	DamageCostume                            = 5,
	EKoratCharacterChangeMode_MAX            = 6,
};

// Enum SS.EKoratSafeSpawnAreaSize
// NumValues: 0x0003
enum class EKoratSafeSpawnAreaSize : uint8
{
	None                                     = 0,
	StyleChangeBig                           = 1,
	EKoratSafeSpawnAreaSize_MAX              = 2,
};

// Enum SS.EKoratStyleChangeSPRecoveryMode
// NumValues: 0x0003
enum class EKoratStyleChangeSPRecoveryMode : uint8
{
	Default                                  = 0,
	Max                                      = 1,
	TakeOver                                 = 2,
};

// Enum SS.EKoratCharacterStencil
// NumValues: 0x0005
enum class EKoratCharacterStencil : uint8
{
	None                                     = 0,
	Index1                                   = 1,
	Index2                                   = 2,
	Index3                                   = 3,
	EKoratCharacterStencil_MAX               = 4,
};

// Enum SS.EKoratCharacterPowerImpactStatus
// NumValues: 0x0009
enum class EKoratCharacterPowerImpactStatus : uint8
{
	None                                     = 0,
	Initial                                  = 1,
	GameStart                                = 2,
	GaugeUp                                  = 3,
	GaugeDown                                = 4,
	Penalty                                  = 5,
	InJudge                                  = 6,
	End                                      = 7,
	EKoratCharacterPowerImpactStatus_MAX     = 8,
};

// Enum SS.EKoratCharacterSpeedImpactStatus
// NumValues: 0x000A
enum class EKoratCharacterSpeedImpactStatus : uint8
{
	None                                     = 0,
	TimingInit                               = 1,
	TimingKeyWait                            = 2,
	TimingJudge                              = 3,
	TimingEnd                                = 4,
	RapidInit                                = 5,
	RapidKeyWait                             = 6,
	RapidJudge                               = 7,
	RapidEnd                                 = 8,
	EKoratCharacterSpeedImpactStatus_MAX     = 9,
};

// Enum SS.EKoratCharacterCrashImpactStatus
// NumValues: 0x0009
enum class EKoratCharacterCrashImpactStatus : uint8
{
	None                                     = 0,
	Initial                                  = 1,
	WaitStart                                = 2,
	WaitInput                                = 3,
	StartInput                               = 4,
	EndInput                                 = 5,
	EndGame                                  = 6,
	End                                      = 7,
	EKoratCharacterCrashImpactStatus_MAX     = 8,
};

// Enum SS.EKoratCharacterBlastImpactStatus
// NumValues: 0x0009
enum class EKoratCharacterBlastImpactStatus : uint8
{
	None                                     = 0,
	Prepare                                  = 1,
	InitTime                                 = 2,
	InitTimeWait                             = 3,
	UiStartTime                              = 4,
	InputTime                                = 5,
	JudgeTime                                = 6,
	FinishTime                               = 7,
	EKoratCharacterBlastImpactStatus_MAX     = 8,
};

// Enum SS.ESSBulletAfterReflectedEffect
// NumValues: 0x0006
enum class ESSBulletAfterReflectedEffect : uint8
{
	Reflect                                  = 0,
	Cancel                                   = 1,
	AutoReflect                              = 2,
	Erase                                    = 3,
	NoExplosion                              = 4,
	ESSBulletAfterReflectedEffect_MAX        = 5,
};

// Enum SS.ESSBulletCharacterFirstHitType
// NumValues: 0x0005
enum class ESSBulletCharacterFirstHitType : uint8
{
	SingleHit                                = 0,
	StopMultiHit                             = 1,
	PenerateMultiHit                         = 2,
	TraceMultiHit                            = 3,
	ESSBulletCharacterFirstHitType_MAX       = 4,
};

// Enum SS.ESSBulletCharacterLastHitType
// NumValues: 0x0004
enum class ESSBulletCharacterLastHitType : uint8
{
	PlayOT                                   = 0,
	Penerate                                 = 1,
	Destroy                                  = 2,
	ESSBulletCharacterLastHitType_MAX        = 3,
};

// Enum SS.ESSBulletGeometryFirstHitType
// NumValues: 0x0005
enum class ESSBulletGeometryFirstHitType : uint8
{
	SingleHit                                = 0,
	StopMultiHit                             = 1,
	PenerateMultiHit                         = 2,
	RunSurfaceMultiHit                       = 3,
	ESSBulletGeometryFirstHitType_MAX        = 4,
};

// Enum SS.ESSBulletGeometryLastHitType
// NumValues: 0x0004
enum class ESSBulletGeometryLastHitType : uint8
{
	PlayOT                                   = 0,
	Penerate                                 = 1,
	Destroy                                  = 2,
	ESSBulletGeometryLastHitType_MAX         = 3,
};

// Enum SS.EKoratEnergyBulletDirection
// NumValues: 0x0005
enum class EKoratEnergyBulletDirection : uint8
{
	EnemyDirection                           = 0,
	MyFrontDirection                         = 1,
	RepelBulletDirection                     = 2,
	DefaultDirection                         = 3,
	EKoratEnergyBulletDirection_MAX          = 4,
};

// Enum SS.ESSBulletStatusAtStart
// NumValues: 0x000A
enum class ESSBulletStatusAtStart : uint8
{
	Homing                                   = 0,
	NoHomingUpdate                           = 1,
	UnHoming                                 = 2,
	Stop                                     = 3,
	Trace                                    = 4,
	ChargeAndHoming                          = 5,
	ChargeAndUnHoming                        = 6,
	ChargeAndStop                            = 7,
	ChargeAndTrace                           = 8,
	ESSBulletStatusAtStart_MAX               = 9,
};

// Enum SS.ESSBulletStartPosition
// NumValues: 0x0003
enum class ESSBulletStartPosition : uint8
{
	Normal                                   = 0,
	Enemy                                    = 1,
	ESSBulletStartPosition_MAX               = 2,
};

// Enum SS.ESSBulletHitSituation
// NumValues: 0x0004
enum class ESSBulletHitSituation : uint8
{
	Other                                    = 0,
	Guard                                    = 1,
	Reflect                                  = 2,
	ESSBulletHitSituation_MAX                = 3,
};

// Enum SS.ESSBulletHitDirectionRule
// NumValues: 0x0003
enum class ESSBulletHitDirectionRule : uint8
{
	Bullet                                   = 0,
	ToHitTarget                              = 1,
	ESSBulletHitDirectionRule_MAX            = 2,
};

// Enum SS.ESSOptionManagerPlatformType
// NumValues: 0x0005
enum class ESSOptionManagerPlatformType : uint8
{
	Auto                                     = 0,
	Steam                                    = 1,
	Ps5                                      = 2,
	XSX                                      = 3,
	ESSOptionManagerPlatformType_MAX         = 4,
};

// Enum SS.ESSOptionManagerScreenQuality
// NumValues: 0x0005
enum class ESSOptionManagerScreenQuality : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Midium                                   = 2,
	High                                     = 3,
	ESSOptionManagerScreenQuality_MAX        = 4,
};

// Enum SS.EAspectRatioFilter
// NumValues: 0x0005
enum class EAspectRatioFilter : uint8
{
	None                                     = 0,
	Ratio4x3                                 = 1,
	Ratio16x9                                = 2,
	Ratio16x10                               = 4,
	EAspectRatioFilter_MAX                   = 5,
};

// Enum SS.ELevelNameIndex
// NumValues: 0x0008
enum class ELevelNameIndex : uint8
{
	Title                                    = 0,
	MainMenu                                 = 1,
	Adventure                                = 2,
	Battle                                   = 3,
	Mission                                  = 4,
	Collection                               = 5,
	Request                                  = 6,
	ELevelNameIndex_MAX                      = 7,
};

// Enum SS.EBattleSubLevel
// NumValues: 0x0017
enum class EBattleSubLevel : uint8
{
	WBP_MenuBattle                           = 0,
	WBP_Single                               = 1,
	WBP_Invasion                             = 2,
	WBP_Episode                              = 3,
	WBP_Tenkaichi                            = 4,
	WBP_Training                             = 5,
	WBP_Extra                                = 6,
	WBP_FreeMatch                            = 7,
	WBP_PlayerMatch                          = 8,
	WBP_RankMatch                            = 9,
	WBP_DefenseMode                          = 10,
	WBP_AttackMode                           = 11,
	WBP_PresetEpisode                        = 12,
	WBP_UserEpisode                          = 13,
	WBP_EditEpisode                          = 14,
	WBP_OnlineTenkaichi                      = 15,
	WBP_OfflineTenkaichi                     = 16,
	WBP_NormalTraining                       = 17,
	WBP_StageSetting                         = 18,
	WBP_EditFreeMatch                        = 19,
	WBP_ExtraOnlineMatch                     = 20,
	WBP_EditDeck                             = 21,
	WBP_MAX                                  = 22,
};

// Enum SS.ECollectionSubLevel
// NumValues: 0x000E
enum class ECollectionSubLevel : uint8
{
	WBP_MenuCollection                       = 0,
	WBP_Customize                            = 1,
	WBP_Shop                                 = 2,
	WBP_Library                              = 3,
	WBP_UserSetting                          = 4,
	WBP_CharaSetting                         = 5,
	WBP_ItemList                             = 6,
	WBP_CharaShop                            = 7,
	WBP_CostumeShop                          = 8,
	WBP_ItemShop                             = 9,
	WBP_CharaLibrary                         = 10,
	WBP_EventLibrary                         = 11,
	WBP_OtherLibrary                         = 12,
	WBP_MAX                                  = 13,
};

// Enum SS.EAdventureSubLevel
// NumValues: 0x0005
enum class EAdventureSubLevel : uint8
{
	WBP_MenuAdventure                        = 0,
	WBP_Beginning                            = 1,
	WBP_Continue                             = 2,
	WBP_ChapterSelect                        = 3,
	WBP_MAX                                  = 4,
};

// Enum SS.EMissionSubLevel
// NumValues: 0x0005
enum class EMissionSubLevel : uint8
{
	WBP_MenuMission                          = 0,
	WBP_Daily                                = 1,
	WBP_Weekly                               = 2,
	WBP_Total                                = 3,
	WBP_MAX                                  = 4,
};

// Enum SS.EKoratCustomNavigationRule
// NumValues: 0x0005
enum class EKoratCustomNavigationRule : uint8
{
	None                                     = 0,
	Geometry                                 = 1,
	Block                                    = 2,
	OverrideNavi                             = 3,
	EKoratCustomNavigationRule_MAX           = 4,
};

// Enum SS.EKoratBattleSearchStatus
// NumValues: 0x0005
enum class EKoratBattleSearchStatus : uint8
{
	None                                     = 0,
	Lockon                                   = 1,
	Lost                                     = 2,
	Aim                                      = 3,
	EKoratBattleSearchStatus_MAX             = 4,
};

// Enum SS.EKoratBattleSearchType
// NumValues: 0x0006
enum class EKoratBattleSearchType : uint8
{
	None                                     = 0,
	Aura                                     = 1,
	Scouter                                  = 2,
	Cyborg                                   = 3,
	God                                      = 4,
	EKoratBattleSearchType_MAX               = 5,
};

// Enum SS.EKoratBattleAuraType
// NumValues: 0x0004
enum class EKoratBattleAuraType : uint8
{
	None                                     = 0,
	Aura                                     = 1,
	God                                      = 2,
	EKoratBattleAuraType_MAX                 = 3,
};

// Enum SS.EKoratDirection
// NumValues: 0x0006
enum class EKoratDirection : uint8
{
	Front                                    = 0,
	Upper                                    = 1,
	Under                                    = 2,
	Left                                     = 3,
	Right                                    = 4,
	EKoratDirection_MAX                      = 5,
};

// Enum SS.EKoratAnimType
// NumValues: 0x0007
enum class EKoratAnimType : uint8
{
	None                                     = 0,
	Move                                     = 1,
	MovingAction                             = 2,
	Action                                   = 3,
	Reaction                                 = 4,
	AddtiveReaction                          = 5,
	EKoratAnimType_MAX                       = 6,
};

// Enum SS.EKoratPlayableAnimType
// NumValues: 0x0007
enum class EKoratPlayableAnimType : uint8
{
	All                                      = 0,
	MoveAndMovingAction                      = 1,
	Action                                   = 2,
	Reaction                                 = 3,
	MoveAndMovingActionAndReaction           = 4,
	ActionAndReaction                        = 5,
	EKoratPlayableAnimType_MAX               = 6,
};

// Enum SS.EKoratActionAttackType
// NumValues: 0x000C
enum class EKoratActionAttackType : uint8
{
	None                                     = 0,
	EnergyBullet                             = 1,
	Combatives                               = 2,
	BlastForte1                              = 3,
	BlastForte2                              = 4,
	BlastSkill1                              = 5,
	BlastSkill2                              = 6,
	BlastUltimate                            = 7,
	AttackAction                             = 8,
	SignCombatives                           = 9,
	TriggerSonicSway                         = 10,
	EKoratActionAttackType_MAX               = 11,
};

// Enum SS.EKoratBlastSlot
// NumValues: 0x0003
enum class EKoratBlastSlot : uint8
{
	Slot1                                    = 0,
	Slot2                                    = 1,
	EKoratBlastSlot_MAX                      = 2,
};

// Enum SS.EKoratSkillSlot
// NumValues: 0x0003
enum class EKoratSkillSlot : uint8
{
	Slot1                                    = 0,
	Slot2                                    = 1,
	EKoratSkillSlot_MAX                      = 2,
};

// Enum SS.EKoratBlastSlotType
// NumValues: 0x0007
enum class EKoratBlastSlotType : uint8
{
	None                                     = 0,
	BlastForte1                              = 1,
	BlastForte2                              = 2,
	BlastSkill1                              = 3,
	BlastSkill2                              = 4,
	BlastUltimate                            = 5,
	EKoratBlastSlotType_MAX                  = 6,
};

// Enum SS.EKoratBlastImpactCameraType
// NumValues: 0x0005
enum class EKoratBlastImpactCameraType : uint8
{
	None                                     = 0,
	Standard                                 = 1,
	Large                                    = 2,
	Giant                                    = 3,
	EKoratBlastImpactCameraType_MAX          = 4,
};

// Enum SS.EKoratBuffSpecialType
// NumValues: 0x0004
enum class EKoratBuffSpecialType : uint8
{
	None                                     = 0,
	Dodge                                    = 1,
	Genki                                    = 2,
	EKoratBuffSpecialType_MAX                = 3,
};

// Enum SS.EKoratBuffEffectiveTermType
// NumValues: 0x000A
enum class EKoratBuffEffectiveTermType : uint8
{
	None                                     = 0,
	Battle                                   = 1,
	Timer                                    = 2,
	Blast                                    = 4,
	TriggerCount                             = 8,
	Sparking                                 = 16,
	DamageReaction                           = 32,
	UltimateBlast                            = 64,
	ZeroSP                                   = 128,
	EKoratBuffEffectiveTermType_MAX          = 129,
};

// Enum SS.EKoratActionIdleType
// NumValues: 0x0003
enum class EKoratActionIdleType : uint8
{
	Normal                                   = 0,
	Relax                                    = 1,
	EKoratActionIdleType_MAX                 = 2,
};

// Enum SS.EKoratActionHitCheckType
// NumValues: 0x0005
enum class EKoratActionHitCheckType : uint8
{
	None                                     = 0,
	HitAndMiss                               = 1,
	MissOnly                                 = 2,
	ForceHit                                 = 3,
	EKoratActionHitCheckType_MAX             = 4,
};

// Enum SS.EKoratActionCategoryType
// NumValues: 0x0023
enum class EKoratActionCategoryType : uint8
{
	WaitOrMove                               = 0,
	PreliminaryOperation                     = 1,
	Rush                                     = 2,
	RushDerivative                           = 3,
	Smash                                    = 4,
	Kiadn                                    = 5,
	Jump                                     = 6,
	JumpDerivation                           = 7,
	UniqueMovement                           = 8,
	UniqueMoveDerivation                     = 9,
	Pursuit                                  = 10,
	UniqueAttack                             = 11,
	UniqueAction                             = 12,
	Steps                                    = 13,
	StepDerivation                           = 14,
	Guard                                    = 15,
	Counter                                  = 16,
	CounterDerivation                        = 17,
	HighCounter                              = 18,
	OpposeEnergyBullet                       = 19,
	Interrupt                                = 20,
	SpeedImpact                              = 21,
	BlastImpact                              = 22,
	PowerImpact                              = 23,
	CrashImpact                              = 24,
	BaseReaction                             = 25,
	BlownReaction                            = 26,
	ArmorReaction                            = 27,
	UniqueReaction                           = 28,
	Bound                                    = 29,
	Down                                     = 30,
	DownRevival                              = 31,
	GuardClear                               = 32,
	Directing                                = 33,
	EKoratActionCategoryType_MAX             = 34,
};

// Enum SS.EKoratActionSubCategoryType
// NumValues: 0x0024
enum class EKoratActionSubCategoryType : uint8
{
	None                                     = 0,
	ActHF                                    = 1,
	ActRW                                    = 2,
	ActFLK                                   = 3,
	ActSC                                    = 4,
	ActBW                                    = 5,
	ActRHa                                   = 6,
	ActHC                                    = 7,
	ActDS                                    = 8,
	ActES                                    = 9,
	ActSCS                                   = 10,
	ActTA                                    = 11,
	ActBC                                    = 12,
	ActRHu                                   = 13,
	ActPP                                    = 14,
	ActLF                                    = 15,
	ActHMJ                                   = 16,
	ActARSHA                                 = 17,
	ActARSHB                                 = 18,
	ActASMDF                                 = 19,
	ActAHFN                                  = 20,
	ActGS                                    = 21,
	ActFR                                    = 22,
	ActDT                                    = 23,
	ActRIN                                   = 24,
	ActRIA                                   = 25,
	ActRFM                                   = 26,
	ActEXA                                   = 27,
	ActSPM                                   = 28,
	ActULT                                   = 29,
	ActTRW                                   = 30,
	ActEMO                                   = 31,
	ActHSE                                   = 32,
	ActRSB                                   = 33,
	ActSMB                                   = 34,
	EKoratActionSubCategoryType_MAX          = 35,
};

// Enum SS.EKoratActionDetailsCategoryType
// NumValues: 0x000B
enum class EKoratActionDetailsCategoryType : uint8
{
	Undefined                                = 0,
	ActRFM                                   = 1,
	ActSM                                    = 2,
	ActVAA                                   = 3,
	ActVAS                                   = 4,
	ActHSE                                   = 5,
	ActSZCV                                  = 6,
	ActZCO                                   = 7,
	ActRFMC                                  = 8,
	ActCRF                                   = 9,
	EKoratActionDetailsCategoryType_MAX      = 10,
};

// Enum SS.EKoratActionRushDerivativeCategoryType
// NumValues: 0x0023
enum class EKoratActionRushDerivativeCategoryType : uint8
{
	Undefined                                = 0,
	HeavyFinish                              = 1,
	RushWave                                 = 2,
	MidAirKick                               = 3,
	Cannon                                   = 4,
	Explosion                                = 5,
	RollingHammer                            = 6,
	HeavyCrash                               = 7,
	DeltaHeaby                               = 8,
	EnergyStorm                              = 9,
	CannonSmash                              = 10,
	CannonAttack                             = 11,
	ExplosionCombo                           = 12,
	RollingHurricane                         = 13,
	RollingPress                             = 14,
	LiftStrike                               = 15,
	HomingJump                               = 16,
	AirComboRushCombatA                      = 17,
	AirComboRushCombatB                      = 18,
	AirComboFullPowerSmash                   = 19,
	AirComboHeavyFinish                      = 20,
	GrandSlash                               = 21,
	MidAirSlash                              = 22,
	TornadoSlash                             = 23,
	RushIn                                   = 24,
	RushInAttack                             = 25,
	RushHighSpeedMovement                    = 26,
	RushA5                                   = 27,
	RushB5                                   = 28,
	SmashFornt                               = 29,
	SmashUp                                  = 30,
	SmashDown                                = 31,
	SmashLeft                                = 32,
	SmashRight                               = 33,
	EKoratActionRushDerivativeCategoryType_MAX = 34,
};

// Enum SS.EKoratActionConditionDown
// NumValues: 0x0004
enum class EKoratActionConditionDown : uint8
{
	None                                     = 0,
	Supine                                   = 1,
	Prone                                    = 2,
	EKoratActionConditionDown_MAX            = 3,
};

// Enum SS.EKoratActionLookatPartFlags
// NumValues: 0x0008
enum class EKoratActionLookatPartFlags : uint8
{
	None                                     = 0,
	Body                                     = 1,
	Head                                     = 2,
	Eye                                      = 4,
	BodyAndHead                              = 3,
	HeadAndEye                               = 6,
	BodyAndHeadAndEye                        = 7,
	EKoratActionLookatPartFlags_MAX          = 8,
};

// Enum SS.EKoratActionLookatOperationType
// NumValues: 0x0004
enum class EKoratActionLookatOperationType : uint8
{
	None                                     = 0,
	ActionData                               = 1,
	LevelSequence                            = 2,
	EKoratActionLookatOperationType_MAX      = 3,
};

// Enum SS.EKoratBattleCameraAttachMode
// NumValues: 0x0008
enum class EKoratBattleCameraAttachMode : uint8
{
	KoratBattleCameraAttachModeMy            = 0,
	KoratBattleCameraAttachModeWorld         = 1,
	KoratBattleCameraAttachModeTarget        = 2,
	KoratBattleCameraAttachModeWorldMy       = 3,
	KoratBattleCameraAttachModePos           = 4,
	KoratBattleCameraAttachModeWorldMyMove   = 5,
	KoratBattleCameraAttachModeMax           = 6,
	EKoratBattleCameraAttachMode_MAX         = 7,
};

// Enum SS.EKoratBattleCameraLookAtChara
// NumValues: 0x0005
enum class EKoratBattleCameraLookAtChara : uint8
{
	KoratBattleCameraLookAtCharaMy           = 0,
	KoratBattleCameraLookAtCharaTarget       = 1,
	KoratBattleCameraLookAtCharaPos          = 2,
	KoratBattleCameraLookAtCharaMax          = 3,
	EKoratBattleCameraLookAtChara_MAX        = 4,
};

// Enum SS.ECameraType
// NumValues: 0x0006
enum class ECameraType : uint8
{
	CameraTypeNone                           = 0,
	CameraTypeDirectorMainCamera             = 1,
	CameraTypeManualCamera                   = 2,
	CameraTypeCutCamera                      = 3,
	CameraTypeMax                            = 4,
	ECameraType_MAX                          = 5,
};

// Enum SS.ELookAtTargetType
// NumValues: 0x0004
enum class ELookAtTargetType : uint8
{
	LookAtTargetTypeNone                     = 0,
	LookAtTargetTypeNormal                   = 1,
	LookAtTargetTypeMax                      = 2,
	ELookAtTargetType_MAX                    = 3,
};

// Enum SS.EFocusTargetType
// NumValues: 0x0004
enum class EFocusTargetType : uint8
{
	FocusTargetTypeNone                      = 0,
	FocusTargetTypeNormal                    = 1,
	FocusTargetTypeMax                       = 2,
	EFocusTargetType_MAX                     = 3,
};

// Enum SS.ECameraLocatorType
// NumValues: 0x0007
enum class ECameraLocatorType : uint8
{
	CameraLocatorTypeNormal                  = 0,
	CameraLocatorTypeNormalRoll              = 1,
	CameraLocatorTypeWeight                  = 2,
	CameraLocatorTypeWeightRoll              = 3,
	CameraLocatorTypeBoneAngle               = 4,
	CameraLocatorTypeMax                     = 5,
	ECameraLocatorType_MAX                   = 6,
};

// Enum SS.ECameraLocatorTargetType
// NumValues: 0x0024
enum class ECameraLocatorTargetType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Enemy                                    = 2,
	RebindSupporter0                         = 3,
	RebindSupporter1                         = 4,
	RebindSupporter2                         = 5,
	RebindSupporter3                         = 6,
	RebindSupporter4                         = 7,
	RebindSupporter5                         = 8,
	RebindSupporter6                         = 9,
	RebindSupporter7                         = 10,
	RebindSupporter8                         = 11,
	RebindSupporter9                         = 12,
	RebindEvent00                            = 13,
	RebindEvent01                            = 14,
	RebindEvent02                            = 15,
	RebindEvent03                            = 16,
	RebindEvent04                            = 17,
	RebindEvent05                            = 18,
	RebindEvent06                            = 19,
	RebindEvent07                            = 20,
	RebindEvent08                            = 21,
	RebindEvent09                            = 22,
	RebindMenu00                             = 23,
	RebindMenu01                             = 24,
	RebindMenu02                             = 25,
	RebindMenu03                             = 26,
	RebindMenu04                             = 27,
	RebindMenu05                             = 28,
	RebindMenu06                             = 29,
	RebindMenu07                             = 30,
	RebindMenu08                             = 31,
	RebindMenu09                             = 32,
	BlastImpactStart                         = 33,
	BlastImpactEnd                           = 34,
	MAX                                      = 35,
};

// Enum SS.ECameraLocatorOffsetID
// NumValues: 0x000C
enum class ECameraLocatorOffsetID : uint8
{
	None                                     = 0,
	LocatorOffset00                          = 1,
	LocatorOffset01                          = 2,
	LocatorOffset02                          = 3,
	LocatorOffset03                          = 4,
	LocatorOffset04                          = 5,
	LocatorOffset05                          = 6,
	LocatorOffset06                          = 7,
	LocatorOffset07                          = 8,
	LocatorOffset08                          = 9,
	LocatorOffset09                          = 10,
	MAX                                      = 11,
};

// Enum SS.ELookAtTargetLocatorType
// NumValues: 0x0004
enum class ELookAtTargetLocatorType : uint8
{
	LookAtTargetLocatorTypeNormal            = 0,
	LookAtTargetLocatorTypeWeight            = 1,
	LookAtTargetLocatorTypeMax               = 2,
	ELookAtTargetLocatorType_MAX             = 3,
};

// Enum SS.ECameraPhysicalDisparityLargeSmallType
// NumValues: 0x0005
enum class ECameraPhysicalDisparityLargeSmallType : uint8
{
	Normal                                   = 0,
	LargePlayer                              = 1,
	LargeEnemy                               = 2,
	LargeAndLarge                            = 3,
	MAX                                      = 4,
};

// Enum SS.ECameraPhysicalDisparityType
// NumValues: 0x000B
enum class ECameraPhysicalDisparityType : uint8
{
	None                                     = 0,
	Height                                   = 1,
	Height_Length                            = 2,
	Height_FocalLength                       = 3,
	Height_Length_FocalLength                = 4,
	Height_LengthHalf_FocalLengthHalf        = 5,
	Length                                   = 6,
	Length_FocalLength                       = 7,
	LengthHalf_FocalLengthHalf               = 8,
	FocalLength                              = 9,
	MAX                                      = 10,
};

// Enum SS.ECameraPhysicalDisparityTargetType
// NumValues: 0x0006
enum class ECameraPhysicalDisparityTargetType : uint8
{
	Player                                   = 0,
	Enemy                                    = 1,
	PlayerAndEnemy                           = 2,
	LagerOne                                 = 3,
	DistancePlayerAndEnemy                   = 4,
	MAX                                      = 5,
};

// Enum SS.ECameraPhysicalDisparityDecayType
// NumValues: 0x000D
enum class ECameraPhysicalDisparityDecayType : uint8
{
	Normal                                   = 0,
	Equal                                    = 1,
	Add10P                                   = 2,
	Add20P                                   = 3,
	Add30P                                   = 4,
	Add40P                                   = 5,
	Add50P                                   = 6,
	Add60P                                   = 7,
	Add70P                                   = 8,
	Add80P                                   = 9,
	Add90P                                   = 10,
	Add100P                                  = 11,
	MAX                                      = 12,
};

// Enum SS.ECameraGlobalSlot
// NumValues: 0x000C
enum class ECameraGlobalSlot : uint8
{
	MAIN_SLOT                                = 0,
	SUB_SLOT_0                               = 1,
	SUB_SLOT_1                               = 2,
	SUB_SLOT_2                               = 3,
	SUB_SLOT_3                               = 4,
	SUB_SLOT_4                               = 5,
	SUB_SLOT_5                               = 6,
	SUB_SLOT_6                               = 7,
	SUB_SLOT_7                               = 8,
	SUB_SLOT_8                               = 9,
	GLOBAL_SLOT_MAX                          = 10,
	ECameraGlobalSlot_MAX                    = 11,
};

// Enum SS.ECameraSlot
// NumValues: 0x000C
enum class ECameraSlot : uint8
{
	CINEMA_SLOT_0                            = 0,
	CINEMA_SLOT_1                            = 1,
	CINEMA_SLOT_2                            = 2,
	CINEMA_SLOT_3                            = 3,
	CINEMA_SLOT_4                            = 4,
	CINEMA_SLOT_5                            = 5,
	CINEMA_SLOT_6                            = 6,
	CINEMA_SLOT_7                            = 7,
	CINEMA_SLOT_8                            = 8,
	CINEMA_SLOT_9                            = 9,
	CINEMA_SLOT_10                           = 10,
	CINEMA_SLOT_MAX                          = 11,
};

// Enum SS.ECameraSideBySideMode
// NumValues: 0x0005
enum class ECameraSideBySideMode : uint8
{
	None                                     = 0,
	Double                                   = 1,
	Single1P                                 = 2,
	Single2P                                 = 3,
	ECameraSideBySideMode_MAX                = 4,
};

// Enum SS.ECameraAdditiveRotateInputMode
// NumValues: 0x0004
enum class ECameraAdditiveRotateInputMode : uint8
{
	Normal                                   = 0,
	StaticWorld                              = 1,
	AvoidTerrain                             = 2,
	MAX                                      = 3,
};

// Enum SS.ECameraLocatorSocketType
// NumValues: 0x00B8
enum class ECameraLocatorSocketType : uint8
{
	Null                                     = 0,
	Waist                                    = 1,
	Spine1                                   = 2,
	Spine2                                   = 3,
	Spine3                                   = 4,
	Neck                                     = 5,
	Head                                     = 6,
	Face                                     = 7,
	Horn1                                    = 8,
	Horn2                                    = 9,
	Horn3                                    = 10,
	Horn4                                    = 11,
	Horn5                                    = 12,
	Horn6                                    = 13,
	Horn7                                    = 14,
	Horn8                                    = 15,
	Horn9                                    = 16,
	Horn10                                   = 17,
	Horn11                                   = 18,
	Horn12                                   = 19,
	Horn13                                   = 20,
	Horn14                                   = 21,
	Horn15                                   = 22,
	Horn16                                   = 23,
	Horn17                                   = 24,
	Horn18                                   = 25,
	Clavicle_r                               = 26,
	Shoulder_r                               = 27,
	Elbow_r                                  = 28,
	Elbowroll_r                              = 29,
	Wrist_r                                  = 30,
	F_fore1_r                                = 31,
	F_fore2_r                                = 32,
	F_fore3_r                                = 33,
	F_middle1_r                              = 34,
	F_middle2_r                              = 35,
	F_middle3_r                              = 36,
	F_medicinal1_r                           = 37,
	F_medicinal2_r                           = 38,
	F_medicinal3_r                           = 39,
	F_little1_r                              = 40,
	F_little2_r                              = 41,
	F_little3_r                              = 42,
	F_thumb1_r                               = 43,
	F_thumb2_r                               = 44,
	F_thumb3_r                               = 45,
	Clavicleroll_r                           = 46,
	Clavicle_l                               = 47,
	Shoulder_l                               = 48,
	Elbow_l                                  = 49,
	Elbowroll_l                              = 50,
	Wrist_l                                  = 51,
	F_fore1_l                                = 52,
	F_fore2_l                                = 53,
	F_fore3_l                                = 54,
	F_middle1_l                              = 55,
	F_middle2_l                              = 56,
	F_middle3_l                              = 57,
	F_medicinal1_l                           = 58,
	F_medicinal2_l                           = 59,
	F_medicinal3_l                           = 60,
	F_little1_l                              = 61,
	F_little2_l                              = 62,
	F_little3_l                              = 63,
	F_thumb1_l                               = 64,
	F_thumb2_l                               = 65,
	F_thumb3_l                               = 66,
	Clavicleroll_l                           = 67,
	Cape_00                                  = 68,
	Cape_01                                  = 69,
	Cape_02                                  = 70,
	Cape_03                                  = 71,
	Cape_04                                  = 72,
	Cape_05                                  = 73,
	Cape_06                                  = 74,
	Cape_07                                  = 75,
	Cape_08                                  = 76,
	Cape_09                                  = 77,
	Cape_10                                  = 78,
	Cape_11                                  = 79,
	Cape_12                                  = 80,
	Cape_13                                  = 81,
	Cape_14                                  = 82,
	Cape_15                                  = 83,
	Cape_16                                  = 84,
	Cape_17                                  = 85,
	Cape_18                                  = 86,
	Cape_19                                  = 87,
	Cape_20                                  = 88,
	Cape_21                                  = 89,
	Cape_22                                  = 90,
	Cape_23                                  = 91,
	Cape_24                                  = 92,
	Cape_25                                  = 93,
	Cape_26                                  = 94,
	Cape_27                                  = 95,
	Cape_28                                  = 96,
	Cape_29                                  = 97,
	Cape_30                                  = 98,
	Cape_31                                  = 99,
	Cape_32                                  = 100,
	Cape_33                                  = 101,
	Cape_34                                  = 102,
	Cape_35                                  = 103,
	Cape_36                                  = 104,
	Cape_37                                  = 105,
	Thigh_r                                  = 106,
	Clank_r                                  = 107,
	Toe1_r                                   = 108,
	Toe2_r                                   = 109,
	Middle1_r                                = 110,
	Middle2_r                                = 111,
	Middle3_r                                = 112,
	Thumb1_r                                 = 113,
	Thumb2_r                                 = 114,
	Thumb3_r                                 = 115,
	Little1_r                                = 116,
	Little2_r                                = 117,
	Little3_r                                = 118,
	Clankroll_r                              = 119,
	Thigh_l                                  = 120,
	Clank_l                                  = 121,
	Toe1_l                                   = 122,
	Toe2_l                                   = 123,
	Little1_l                                = 124,
	Little2_l                                = 125,
	Little3_l                                = 126,
	Thumb1_l                                 = 127,
	Thumb2_l                                 = 128,
	Thumb3_l                                 = 129,
	Middle1_l                                = 130,
	Middle2_l                                = 131,
	Middle3_l                                = 132,
	Clankroll_l                              = 133,
	Spine1tail1                              = 134,
	Spine1tail2                              = 135,
	Spine1tail3                              = 136,
	Spine1tail4                              = 137,
	Spine1tail5                              = 138,
	Spine1tail6                              = 139,
	Spine1tail7                              = 140,
	Spine1tail8                              = 141,
	Spine1tail9                              = 142,
	Spine1tail10                             = 143,
	Spine1tail11                             = 144,
	Spine1tail12                             = 145,
	Spine1tail13                             = 146,
	Spine1tail14                             = 147,
	Spine1tail15                             = 148,
	Spine1tail16                             = 149,
	Spine1tail17                             = 150,
	Spine1tail18                             = 151,
	Tail1                                    = 152,
	Tail2                                    = 153,
	Tail3                                    = 154,
	Tail4                                    = 155,
	Tail5                                    = 156,
	Tail6                                    = 157,
	Tail7                                    = 158,
	Tail8                                    = 159,
	Tail9                                    = 160,
	Tail10                                   = 161,
	Tail11                                   = 162,
	Tail12                                   = 163,
	Tail13                                   = 164,
	Tail14                                   = 165,
	Tail15                                   = 166,
	Tail16                                   = 167,
	Tail17                                   = 168,
	Tail18                                   = 169,
	Tasset1_r                                = 170,
	Tasset2_r                                = 171,
	Tasset3_r                                = 172,
	Tasset1_l                                = 173,
	Tasset2_l                                = 174,
	Tasset3_l                                = 175,
	Tasset1_f                                = 176,
	Tasset2_f                                = 177,
	Tasset3_f                                = 178,
	EyeBall_l                                = 179,
	EyeBall_r                                = 180,
	Head_Effector_00                         = 181,
	Head_Adjustment                          = 182,
	MAX                                      = 183,
};

// Enum SS.ECameraManagerShakeMode
// NumValues: 0x0004
enum class ECameraManagerShakeMode : uint8
{
	REF_AND_PUSH                             = 0,
	REF_ONLY                                 = 1,
	PUSH_ONLY                                = 2,
	MAX                                      = 3,
};

// Enum SS.EBattleImpactTriggerType
// NumValues: 0x0005
enum class EBattleImpactTriggerType : uint8
{
	Speed                                    = 0,
	Power                                    = 1,
	Blast                                    = 2,
	Crush                                    = 3,
	Max                                      = 4,
};

// Enum SS.EBattleImpactTriggerEventOpt
// NumValues: 0x0009
enum class EBattleImpactTriggerEventOpt : uint8
{
	KCurrentTarget                           = 0,
	KIntroTarget                             = 1,
	KGameTarget                              = 2,
	KFinishTarget                            = 3,
	KMoveToSafetyPosition                    = 4,
	KMoveToDifferentPosition                 = 5,
	KReturnToPosition                        = 6,
	KNum                                     = 7,
	EBattleImpactTriggerEventOpt_MAX         = 8,
};

// Enum SS.EWarpRequestType
// NumValues: 0x0010
enum class EWarpRequestType : uint8
{
	Auto                                     = 0,
	ForceSafeGround                          = 1,
	ForceSafeGroundFit                       = 2,
	ForceSafeAir                             = 3,
	ForceSafeAuto                            = 4,
	ForceLargeSafeGround                     = 5,
	ForceLargeSafeAir                        = 6,
	ForceLargeSafeAuto                       = 7,
	ForceDifferenceGround                    = 8,
	ForceDifferenceAir                       = 9,
	ForceDifferenceAuto                      = 10,
	ForceWall                                = 11,
	ForceSmall                               = 12,
	ForceDisable                             = 13,
	DelegeteImpactProcedure                  = 14,
	MAX                                      = 15,
};

// Enum SS.EWarpRequestReturnType
// NumValues: 0x000A
enum class EWarpRequestReturnType : uint8
{
	ReturnAuto                               = 0,
	ReturnNone                               = 1,
	ReturnSafeSmall                          = 2,
	ReturnSafeGround                         = 3,
	ReturnSafeGroundFit                      = 4,
	ReturnSafeAir                            = 5,
	ReturnSafeLargeGround                    = 6,
	ReturnSafeLargeAir                       = 7,
	ReturnSafeLWall                          = 8,
	MAX                                      = 9,
};

// Enum SS.ECameraAdjustCompMode
// NumValues: 0x0005
enum class ECameraAdjustCompMode : uint8
{
	AVERAGE                                  = 0,
	BIG                                      = 1,
	PLAYER                                   = 2,
	ENEMY                                    = 3,
	MAX                                      = 4,
};

// Enum SS.ECameraBindingType
// NumValues: 0x000A
enum class ECameraBindingType : uint8
{
	NONE                                     = 0,
	OWNER                                    = 1,
	ANOTHER                                  = 2,
	MCAMERA                                  = 3,
	MTARGET                                  = 4,
	START                                    = 5,
	EVENT                                    = 6,
	NPC                                      = 7,
	ORIGIN                                   = 8,
	MAX                                      = 9,
};

// Enum SS.EShakeAssetType
// NumValues: 0x0015
enum class EShakeAssetType : uint8
{
	Stop                                     = 0,
	Life_SS                                  = 10,
	Life_S                                   = 11,
	Life_M                                   = 12,
	Life_L                                   = 13,
	Life_LL                                  = 14,
	Loop_SS                                  = 110,
	Loop_S                                   = 111,
	Loop_M                                   = 112,
	Loop_L                                   = 113,
	Loop_LL                                  = 114,
	Special_SSW                              = 210,
	Special_HANDY                            = 211,
	Special_HANDY_UI_00                      = 212,
	Special_HANDY_UI_01                      = 213,
	Special_HANDY_UI_02                      = 214,
	Special_HANDY_UI_03                      = 215,
	Test_00                                  = 250,
	Test_01                                  = 251,
	Test_02                                  = 252,
	EShakeAssetType_MAX                      = 253,
};

// Enum SS.EShakeTargetType
// NumValues: 0x0004
enum class EShakeTargetType : uint8
{
	Player                                   = 0,
	PlayerBullet                             = 1,
	HitEnemy                                 = 2,
	MAX                                      = 3,
};

// Enum SS.EShakeForceType
// NumValues: 0x000F
enum class EShakeForceType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	ForceZero                                = 2,
	ForceInfinite                            = 3,
	NormalFake                               = 4,
	ForceField0                              = 10,
	ForceField1                              = 11,
	ForceField2                              = 12,
	ForceField3                              = 13,
	ForceFieldRelease0                       = 30,
	ForceFieldRelease1                       = 31,
	AttitudeControl0                         = 50,
	AttitudeControl1                         = 51,
	RangedAttack0                            = 70,
	MAX                                      = 71,
};

// Enum SS.EShakeForceShapeType
// NumValues: 0x0005
enum class EShakeForceShapeType : uint8
{
	TruncatedCone                            = 0,
	Donut                                    = 1,
	Cylinder                                 = 2,
	Ball                                     = 3,
	MAX                                      = 4,
};

// Enum SS.EShakeListenerType
// NumValues: 0x0005
enum class EShakeListenerType : uint8
{
	PlayerAndEnemy                           = 0,
	PlayerOnly                               = 1,
	EnemyOnly                                = 2,
	MainCameraOnly                           = 3,
	MAX                                      = 4,
};

// Enum SS.EShakeForceLerpType
// NumValues: 0x0005
enum class EShakeForceLerpType : uint8
{
	Liner                                    = 0,
	EaseIn                                   = 1,
	EaseOut                                  = 2,
	EaseInOut                                = 3,
	MAX                                      = 4,
};

// Enum SS.ELerpType
// NumValues: 0x000B
enum class ELerpType : uint8
{
	Linear                                   = 0,
	EaseIn                                   = 1,
	EaseOut                                  = 2,
	EaseInOut                                = 3,
	ExpoIn                                   = 4,
	ExpoOut                                  = 5,
	ExpoInOut                                = 6,
	CircularIn                               = 7,
	CircularOut                              = 8,
	CircularInOut                            = 9,
	MAX                                      = 10,
};

// Enum SS.EBattleCameraDetourLerpType
// NumValues: 0x0007
enum class EBattleCameraDetourLerpType : uint8
{
	None                                     = 0,
	Turn                                     = 1,
	Swing                                    = 2,
	SwingBack                                = 3,
	ZBurst                                   = 4,
	Detour                                   = 5,
	MAX                                      = 6,
};

// Enum SS.EForceConnectDirectorMainCameraType
// NumValues: 0x0004
enum class EForceConnectDirectorMainCameraType : uint8
{
	None                                     = 0,
	MenuDirector                             = 1,
	BattleDirector                           = 2,
	MAX                                      = 3,
};

// Enum SS.ERootDirectorReconnectPriorityType
// NumValues: 0x000A
enum class ERootDirectorReconnectPriorityType : uint8
{
	None                                     = 0,
	DownEnemyToPlayer                        = 1,
	DownPlayerToEnemy                        = 2,
	DownPlayerToPlayer                       = 3,
	DownEnemyToEnemy                         = 4,
	UpEnemyToPlayer                          = 5,
	UpPlayerToEnemy                          = 6,
	UpPlayerToPlayer                         = 7,
	UpEnemyToEnemy                           = 8,
	MAX                                      = 9,
};

// Enum SS.ECameraDataCheckMode
// NumValues: 0x0005
enum class ECameraDataCheckMode : uint8
{
	NoOutput                                 = 0,
	Check                                    = 1,
	CheckAndErrDialog                        = 2,
	ValidateOnly                             = 3,
	MAX                                      = 4,
};

// Enum SS.ETypeOfTerrainToPassToBattleCamera
// NumValues: 0x0005
enum class ETypeOfTerrainToPassToBattleCamera : uint8
{
	Unknown                                  = 0,
	GroundSurface                            = 1,
	Wall                                     = 2,
	Air                                      = 3,
	ETypeOfTerrainToPassToBattleCamera_MAX   = 4,
};

// Enum SS.ESSCutCameraBlendRateType
// NumValues: 0x0004
enum class ESSCutCameraBlendRateType : uint8
{
	SSCutCameraBlendRateNone                 = 0,
	SSCutCameraBlendRateLinear               = 1,
	SSCutCameraBlendRateMax                  = 2,
	ESSCutCameraBlendRateType_MAX            = 3,
};

// Enum SS.ESSCutCameraBlendLineType
// NumValues: 0x0004
enum class ESSCutCameraBlendLineType : uint8
{
	SSCutCameraBlendLineNone                 = 0,
	SSCutCameraBlendLineStraight             = 1,
	SSCutCameraBlendLineMax                  = 2,
	ESSCutCameraBlendLineType_MAX            = 3,
};

// Enum SS.EKoratBattleCameraLookAtType
// NumValues: 0x0007
enum class EKoratBattleCameraLookAtType : uint8
{
	KoratBattleCameraLookAtTypeNon           = 0,
	KoratBattleCameraLookAtTypeMy            = 1,
	KoratBattleCameraLookAtTypeTarget        = 2,
	KoratBattleCameraLookAtTypeMtoT          = 3,
	KoratBattleCameraLookAtTypeTargetActor   = 4,
	KoratBattleCameraLookAtTypeMax           = 5,
	EKoratBattleCameraLookAtType_MAX         = 6,
};

// Enum SS.EKoratBattleCameraBlendType
// NumValues: 0x0007
enum class EKoratBattleCameraBlendType : uint8
{
	KoratBattleCameraBlendTypeLinear         = 0,
	KoratBattleCameraBlendTypeEaseIn         = 1,
	KoratBattleCameraBlendTypeEaseOut        = 2,
	KoratBattleCameraBlendTypeEaseInOut      = 3,
	KoratBattleCameraBlendTypeSigmoid        = 4,
	KoratBattleCameraBlendTypeMax            = 5,
	EKoratBattleCameraBlendType_MAX          = 6,
};

// Enum SS.EKoratBattleCameraLine
// NumValues: 0x0009
enum class EKoratBattleCameraLine : uint8
{
	KoratBattleCameraBlendLineStraight       = 0,
	KoratBattleCameraBlendLineArcR           = 1,
	KoratBattleCameraBlendLineArcL           = 2,
	KoratBattleCameraBlendLineCurve          = 3,
	KoratBattleCameraBlendLineCurveMy        = 4,
	KoratBattleCameraBlendLineCurveRev       = 5,
	KoratBattleCameraBlendLineCurveMyRev     = 6,
	KoratBattleCameraBlendLineMax            = 7,
	EKoratBattleCameraLine_MAX               = 8,
};

// Enum SS.EKoratBattleCameraMode
// NumValues: 0x0008
enum class EKoratBattleCameraMode : uint8
{
	KoratBattleCameraModeSequence            = 0,
	KoratBattleCameraModeBattle              = 1,
	KoratBattleCameraModeDragonDash          = 2,
	KoratBattleCameraModeDamageHit           = 3,
	KoratBattleCameraModPowerInpact          = 4,
	KoratBattleCameraModeHit                 = 5,
	KoratBattleCameraModeMax                 = 6,
	EKoratBattleCameraMode_MAX               = 7,
};

// Enum SS.EKoratBattleCameraShakeMode
// NumValues: 0x0005
enum class EKoratBattleCameraShakeMode : uint8
{
	KoratBattleCameraShakeModeMy             = 0,
	KoratBattleCameraShakeModeTarget         = 1,
	KoratBattleCameraShakeModeMT             = 2,
	KoratBattleCameraShakeModeLocation       = 3,
	EKoratBattleCameraShakeMode_MAX          = 4,
};

// Enum SS.EKoratBattleCameraShakeType
// NumValues: 0x000E
enum class EKoratBattleCameraShakeType : uint8
{
	KoratBattleCameraShakeTypeNon            = 0,
	KoratBattleCameraShakeTypeLifeSS         = 1,
	KoratBattleCameraShakeTypeLifeS          = 2,
	KoratBattleCameraShakeTypeLifeM          = 3,
	KoratBattleCameraShakeTypeLifeL          = 4,
	KoratBattleCameraShakeTypeLifeLL         = 5,
	KoratBattleCameraShakeTypeLoopSS         = 6,
	KoratBattleCameraShakeTypeLoopS          = 7,
	KoratBattleCameraShakeTypeLoopM          = 8,
	KoratBattleCameraShakeTypeLoopL          = 9,
	KoratBattleCameraShakeTypeLoopLL         = 10,
	KoratBattleCameraShakeTypeTurbulence     = 11,
	KoratBattleCameraShakeTypeMax            = 12,
	EKoratBattleCameraShakeType_MAX          = 13,
};

// Enum SS.EKoratFreeTimelineType
// NumValues: 0x0035
enum class EKoratFreeTimelineType : uint8
{
	None                                     = 0,
	BlastForte1                              = 1,
	BlastForte2                              = 2,
	BlastSkill1                              = 3,
	BlastSkill2                              = 4,
	Ultimate                                 = 5,
	AurLv1                                   = 6,
	Dds                                      = 7,
	Zds                                      = 8,
	Cge                                      = 9,
	ActTackle                                = 10,
	ActCannon                                = 11,
	ActBomb                                  = 12,
	ActWave                                  = 13,
	ActDash                                  = 14,
	ActBlow                                  = 15,
	AnnAirWall                               = 16,
	AnnGuardBreak                            = 17,
	AnnGuardBreakDisable                     = 18,
	AnnEnergyMax                             = 19,
	AnnCancel                                = 20,
	AnnHiSpeedMoveIn                         = 21,
	AnnHiSpeedMoveOt                         = 22,
	AnnMultiCounter                          = 23,
	ScrConcentrationLine                     = 24,
	ScrAirPressure                           = 25,
	ScrDebris                                = 26,
	ScrVistaMask                             = 27,
	ScrVignette                              = 28,
	Muzzule                                  = 29,
	SmashMuzzule                             = 30,
	AnnVectorFieldsS                         = 31,
	AnnVectorFieldsM                         = 32,
	AnnVectorFieldsL                         = 33,
	ActImpactWind                            = 34,
	ActStepWind                              = 35,
	ActShorStepWind                          = 36,
	ActLongStepWind                          = 37,
	AurLv2                                   = 38,
	AurLv3                                   = 39,
	AurLv4                                   = 40,
	ShakeVWeak                               = 41,
	ShakeWeak                                = 42,
	ShakeMedium                              = 43,
	ShakeStrong                              = 44,
	ShakeVStrong                             = 45,
	ActJustSmash                             = 46,
	ActJustTiming                            = 47,
	FormChange                               = 48,
	FormChangeRemove                         = 49,
	CgeSparking                              = 50,
	ZdsDds                                   = 51,
	EKoratFreeTimelineType_MAX               = 52,
};

// Enum SS.EKoratFreeTimelineAtbType
// NumValues: 0x001F
enum class EKoratFreeTimelineAtbType : uint8
{
	None                                     = 0,
	Run                                      = 1,
	DashJet                                  = 2,
	Landed                                   = 3,
	Step                                     = 4,
	StrongStep                               = 5,
	WeakStrike                               = 6,
	StrongStrike                             = 7,
	RadialJetSmoke                           = 8,
	MapCollide                               = 9,
	SphereSmoke                              = 10,
	ChargeAirPressureLoop                    = 11,
	BulletDebris                             = 12,
	BeamDebris                               = 13,
	JetDebris                                = 14,
	JetSmokeFired                            = 15,
	JetSmokeBeam                             = 16,
	JetSmokeNozzle                           = 17,
	GroundDustChargeA                        = 18,
	GroundDustChargeB                        = 19,
	ChargingDebris                           = 20,
	DomeExplosionDebrisMidium                = 21,
	DomeExplosionDebrisStrong                = 22,
	ChargingDust                             = 23,
	ChargeAirPressureInOut                   = 24,
	Dash                                     = 25,
	Jump                                     = 26,
	PWStaticelectricity                      = 27,
	HoistingRubbleS                          = 28,
	HoistingRubbleL                          = 29,
	EKoratFreeTimelineAtbType_MAX            = 30,
};

// Enum SS.EKoratFreeTimelineAtbBrkType
// NumValues: 0x0015
enum class EKoratFreeTimelineAtbBrkType : uint8
{
	None                                     = 0,
	KnockWeak                                = 1,
	KnockStrong                              = 2,
	RadialKnockWeak                          = 3,
	RadialKnockStrong                        = 4,
	ConeKnockWeak                            = 5,
	ConeKnockStrong                          = 6,
	LinearKnockWeak                          = 7,
	LinearKnockStrong                        = 8,
	SlashingKnockWeak                        = 9,
	SlashingKnowStrong                       = 10,
	ArcLeftKnockWeak                         = 11,
	ArcLeftKnockStrong                       = 12,
	ArcRightKnockWeak                        = 13,
	ArcRightKnockStrong                      = 14,
	SphericalKnockWeak                       = 15,
	SphericalKnockStrong                     = 16,
	NewtonKnockWeak                          = 17,
	NewtonKnockStrong                        = 18,
	GreatDestructionKnock                    = 19,
	EKoratFreeTimelineAtbBrkType_MAX         = 20,
};

// Enum SS.EKoratAttachRotRule
// NumValues: 0x0007
enum class EKoratAttachRotRule : uint8
{
	None                                     = 0,
	ChrFront                                 = 1,
	ChrFrontZLock                            = 2,
	ChrMoveDir                               = 3,
	TwoBoneDir                               = 4,
	World                                    = 5,
	EKoratAttachRotRule_MAX                  = 6,
};

// Enum SS.EKoratImpactTransformType
// NumValues: 0x0005
enum class EKoratImpactTransformType : uint8
{
	ImpactHand1                              = 0,
	ImpactHand2                              = 1,
	ImpactNullBetween                        = 2,
	Num                                      = 3,
	EKoratImpactTransformType_MAX            = 4,
};

// Enum SS.EKoratGenericCenterTransformType
// NumValues: 0x0004
enum class EKoratGenericCenterTransformType : uint8
{
	Null                                     = 0,
	Waist                                    = 1,
	Num                                      = 2,
	EKoratGenericCenterTransformType_MAX     = 3,
};

// Enum SS.EKoratSocketType
// NumValues: 0x0002
enum class EKoratSocketType : uint8
{
	SuperZCounter                            = 0,
	EKoratSocketType_MAX                     = 1,
};

// Enum SS.EKoratTargetPositionType
// NumValues: 0x0003
enum class EKoratTargetPositionType : uint8
{
	MyPosition                               = 0,
	OpponentPosition                         = 1,
	EKoratTargetPositionType_MAX             = 2,
};

// Enum SS.EKoratMoveDirectionType
// NumValues: 0x0007
enum class EKoratMoveDirectionType : uint8
{
	CharacterDirection                       = 0,
	CharacterDirection_CorrectionTowardCenter = 1,
	TargetDirection                          = 2,
	TargetDirection_CorrectionTowardCenter   = 3,
	TargetDirectionXY                        = 4,
	TargetDirectionXY_CorrectionTowardCenter = 5,
	EKoratMoveDirectionType_MAX              = 6,
};

// Enum SS.EKoratAlignRotationType
// NumValues: 0x0004
enum class EKoratAlignRotationType : uint8
{
	ActorXToTarget                           = 0,
	ActorZToWorldZ                           = 1,
	ActorXToTargetAndBodyPitchZero           = 2,
	EKoratAlignRotationType_MAX              = 3,
};

// Enum SS.EKoratSetCustomTimeDilationReason
// NumValues: 0x0007
enum class EKoratSetCustomTimeDilationReason : uint8
{
	None                                     = 0,
	Other                                    = 1,
	HitStop                                  = 2,
	Vanishing                                = 4,
	Demo                                     = 8,
	Combine_EffectAffect                     = 1,
	EKoratSetCustomTimeDilationReason_MAX    = 9,
};

// Enum SS.EKoratLevelSequenceValidateResultType
// NumValues: 0x0004
enum class EKoratLevelSequenceValidateResultType : uint8
{
	None                                     = 0,
	Warning                                  = 1,
	Modified                                 = 2,
	EKoratLevelSequenceValidateResultType_MAX = 3,
};

// Enum SS.EKoratInequalitySignType
// NumValues: 0x0006
enum class EKoratInequalitySignType : uint8
{
	Equal                                    = 0,
	NotLessThan                              = 1,
	NoMoreThan                               = 2,
	LessThan                                 = 3,
	MoreThan                                 = 4,
	EKoratInequalitySignType_MAX             = 5,
};

// Enum SS.EKoratCombativesCollisionType
// NumValues: 0x0005
enum class EKoratCombativesCollisionType : uint8
{
	Bone                                     = 0,
	Capsule                                  = 1,
	Box                                      = 2,
	Sphere                                   = 3,
	EKoratCombativesCollisionType_MAX        = 4,
};

// Enum SS.EKoratActionRotationBaseDirection
// NumValues: 0x0003
enum class EKoratActionRotationBaseDirection : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	EKoratActionRotationBaseDirection_MAX    = 2,
};

// Enum SS.EKoratActionBodyYawMode
// NumValues: 0x0003
enum class EKoratActionBodyYawMode : uint8
{
	Primary                                  = 0,
	SnapOpponent                             = 1,
	EKoratActionBodyYawMode_MAX              = 2,
};

// Enum SS.EKoratActionBodyPitchMode
// NumValues: 0x0008
enum class EKoratActionBodyPitchMode : uint8
{
	Opponent                                 = 0,
	SnapHorizontal                           = 1,
	SnapOpponent                             = 2,
	IdleAction                               = 3,
	MoveAction                               = 4,
	ChargeAction                             = 5,
	JumpAction                               = 6,
	EKoratActionBodyPitchMode_MAX            = 7,
};

// Enum SS.EKoratActionTiltTimingType
// NumValues: 0x0006
enum class EKoratActionTiltTimingType : uint8
{
	None                                     = 0,
	StartAction                              = 1,
	InAction                                 = 2,
	Charging                                 = 3,
	Reset                                    = 4,
	EKoratActionTiltTimingType_MAX           = 5,
};

// Enum SS.EKoratActionPenetrationMode
// NumValues: 0x0003
enum class EKoratActionPenetrationMode : uint8
{
	None                                     = 0,
	Everything                               = 1,
	EKoratActionPenetrationMode_MAX          = 2,
};

// Enum SS.EKoratNotEnoughPoolObjectsType
// NumValues: 0x0003
enum class EKoratNotEnoughPoolObjectsType : uint8
{
	None                                     = 0,
	AutoIncreate                             = 1,
	EKoratNotEnoughPoolObjectsType_MAX       = 2,
};

// Enum SS.EKoratTransformCopyExecuteType
// NumValues: 0x0005
enum class EKoratTransformCopyExecuteType : uint8
{
	None                                     = 0,
	Activate                                 = 1,
	Deactivate                               = 2,
	Trigger                                  = 3,
	EKoratTransformCopyExecuteType_MAX       = 4,
};

// Enum SS.EKoratCharacterMovementTransition
// NumValues: 0x0004
enum class EKoratCharacterMovementTransition : uint8
{
	None                                     = 0,
	Stop                                     = 1,
	StopImmediately                          = 2,
	EKoratCharacterMovementTransition_MAX    = 3,
};

// Enum SS.EKoratSuperZCounterTakeType
// NumValues: 0x0008
enum class EKoratSuperZCounterTakeType : uint8
{
	None                                     = 0,
	Take                                     = 1,
	Catch                                    = 2,
	Flick                                    = 3,
	DrownOut                                 = 4,
	Teleport                                 = 5,
	Absorption                               = 6,
	EKoratSuperZCounterTakeType_MAX          = 7,
};

// Enum SS.EKoratGrassStatus
// NumValues: 0x000B
enum class EKoratGrassStatus : uint8
{
	ChangingTransform                        = 0,
	Trampled                                 = 1,
	Deformed                                 = 2,
	UnTrampling                              = 3,
	UnDeforming                              = 4,
	WaitingToResumeGrow                      = 5,
	Growing                                  = 6,
	Burnt                                    = 7,
	FreshlyDeformed                          = 8,
	NOTHING                                  = 9,
	EKoratGrassStatus_MAX                    = 10,
};

// Enum SS.EKoratPursuitType
// NumValues: 0x0005
enum class EKoratPursuitType : uint8
{
	None                                     = 0,
	DragonHoming                             = 1,
	VanishingAttack                          = 2,
	LightningAttack                          = 3,
	EKoratPursuitType_MAX                    = 4,
};

// Enum SS.EKoratOffsetType
// NumValues: 0x0005
enum class EKoratOffsetType : uint8
{
	None                                     = 0,
	RushOffset                               = 1,
	CollisionOffset                          = 2,
	ExImpact                                 = 3,
	EKoratOffsetType_MAX                     = 4,
};

// Enum SS.ESituationOfOpponentWhenAttackHit
// NumValues: 0x000E
enum class ESituationOfOpponentWhenAttackHit : uint8
{
	Hit                                      = 0,
	Guard                                    = 1,
	GuardBreak                               = 2,
	AttackBreak                              = 3,
	Ascertain                                = 4,
	SuperZCounter                            = 5,
	SuperCounter                             = 6,
	Selfishness                              = 7,
	SuperArmor                               = 8,
	HyperArmor                               = 9,
	SparkingArmor                            = 10,
	ReactionArmor                            = 11,
	OffsetArmor                              = 12,
	ESituationOfOpponentWhenAttackHit_MAX    = 13,
};

// Enum SS.EKoratReactionDirection
// NumValues: 0x0012
enum class EKoratReactionDirection : uint8
{
	Default                                  = 0,
	HighFront                                = 1,
	HighBack                                 = 2,
	HighLeft                                 = 3,
	HighRight                                = 4,
	MidFront                                 = 5,
	MidBack                                  = 6,
	MidLeft                                  = 7,
	MidRight                                 = 8,
	LowFront                                 = 9,
	LowBack                                  = 10,
	LowLeft                                  = 11,
	LowRight                                 = 12,
	MidLowFront                              = 13,
	MidLowBack                               = 14,
	MidLowLeft                               = 15,
	MidLowRight                              = 16,
	EKoratReactionDirection_MAX              = 17,
};

// Enum SS.EKoratGuardDirection
// NumValues: 0x0005
enum class EKoratGuardDirection : uint8
{
	None                                     = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	EKoratGuardDirection_MAX                 = 4,
};

// Enum SS.EKoratChangeDirectionOfActionStartType
// NumValues: 0x0008
enum class EKoratChangeDirectionOfActionStartType : uint8
{
	None                                     = 0,
	MyToOpponent                             = 1,
	SameDirectionOfOpponent                  = 2,
	ReverseDirectionOfOpponent               = 3,
	FaceToFace                               = 4,
	SameDirectionToMy                        = 5,
	ReverseDirectionToMy                     = 6,
	EKoratChangeDirectionOfActionStartType_MAX = 7,
};

// Enum SS.EKoratSuperZCounterType
// NumValues: 0x0005
enum class EKoratSuperZCounterType : uint8
{
	None                                     = 0,
	Repel                                    = 1,
	Erase                                    = 2,
	RepelOnly                                = 3,
	EKoratSuperZCounterType_MAX              = 4,
};

// Enum SS.EBattleWinLose
// NumValues: 0x0009
enum class EBattleWinLose : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	Draw                                     = 3,
	Timeup                                   = 4,
	RingOut                                  = 5,
	Win1P                                    = 6,
	Win2P                                    = 7,
	EBattleWinLose_MAX                       = 8,
};

// Enum SS.EKoratArmorHitEffectType
// NumValues: 0x0004
enum class EKoratArmorHitEffectType : uint8
{
	Hit                                      = 0,
	Armor                                    = 1,
	HitTypeArmor                             = 2,
	EKoratArmorHitEffectType_MAX             = 3,
};

// Enum SS.EProcessingOrderPartitionOfPrePhysics
// NumValues: 0x0010
enum class EProcessingOrderPartitionOfPrePhysics : uint8
{
	PostProccessManagerTicking               = 0,
	CharacterWarpCtrl                        = 1,
	BattleImpactProcedure                    = 2,
	BattledirectingActor                     = 3,
	PadGenerationComponent                   = 4,
	CharacterMeshTickStopActor               = 5,
	PlayerController                         = 6,
	PlayerController1P                       = 7,
	PlayerController2P                       = 8,
	PlayerControllerNoEntry                  = 9,
	GameStateBase                            = 10,
	GameStateBaseAfter                       = 11,
	PlayerPawn                               = 12,
	PlayerRootComponet                       = 13,
	PlayerCapsuleComponent                   = 14,
	EProcessingOrderPartitionOfPrePhysics_MAX = 15,
};

// Enum SS.EProcessingOrderPartitionOfDuringPhysics
// NumValues: 0x0002
enum class EProcessingOrderPartitionOfDuringPhysics : uint8
{
	EndMove                                  = 0,
	EProcessingOrderPartitionOfDuringPhysics_MAX = 1,
};

// Enum SS.EProcessingOrderPartitionOfPostPhysics
// NumValues: 0x0028
enum class EProcessingOrderPartitionOfPostPhysics : uint8
{
	GameStateBase                            = 0,
	GameStateBaseAfter                       = 1,
	PlayerPawn                               = 2,
	PlayerRootComponet                       = 3,
	PlayerCapsuleComponent                   = 4,
	PlayerSocketComponent                    = 5,
	EndMove                                  = 6,
	CutCameraLocator                         = 7,
	BulletController                         = 8,
	BulletActor                              = 9,
	BulletBeamView                           = 10,
	EndBulletActor                           = 11,
	EndCombativesCollision                   = 12,
	NextFrameStartProcessing                 = 13,
	NextFrameActionDecision                  = 14,
	PlayerTransitionFlowComponent            = 15,
	PlayerMontageComponent                   = 16,
	PlayerGrappleComponent                   = 17,
	PlayerSafeSlowMoveComponent              = 18,
	PlayerAttackCollisionComponent           = 19,
	PlayerAttackCollisionActor               = 20,
	PlayerAttackCollisionActor1P             = 21,
	PlayerAttackCollisionActor2P             = 22,
	PlayerAttackCollisionActorNoEntry        = 23,
	PlayerLocomotionComponent                = 24,
	PlayerPushingComponent                   = 25,
	PlayerPushingComponentGiant              = 26,
	PlayerActionTargetComponent              = 27,
	PlayerAntiBulletComponent                = 28,
	BulletCommandManager                     = 29,
	PlayerHitCollisionComponent              = 30,
	PlayerHitCollisionComponent1P            = 31,
	PlayerHitCollisionComponent2P            = 32,
	PlayerHitCollisionComponentNoEntry       = 33,
	TriggerImpactGameComponent               = 34,
	PostProccessManagerTickingAfter          = 35,
	ActionManagerForLevelSequence            = 36,
	CutCameraDirector                        = 37,
	RootCameraDirector                       = 38,
	EProcessingOrderPartitionOfPostPhysics_MAX = 39,
};

// Enum SS.EProcessingOrderPartitionOfPostUpdateWork
// NumValues: 0x0003
enum class EProcessingOrderPartitionOfPostUpdateWork : uint8
{
	CutCameraDirector                        = 0,
	RootCameraDirector                       = 1,
	EProcessingOrderPartitionOfPostUpdateWork_MAX = 2,
};

// Enum SS.EKoratWindSpeedClass
// NumValues: 0x0008
enum class EKoratWindSpeedClass : uint8
{
	Calm                                     = 0,
	LightBreeze                              = 1,
	GentleBreeze                             = 2,
	ModerateBreeze                           = 3,
	FreshBreeze                              = 4,
	StrongBreeze                             = 5,
	Storm                                    = 6,
	EKoratWindSpeedClass_MAX                 = 7,
};

// Enum SS.EDebugVirtualNetPlayerRoleType
// NumValues: 0x0004
enum class EDebugVirtualNetPlayerRoleType : uint8
{
	Off                                      = 0,
	Host                                     = 1,
	Guest                                    = 2,
	EDebugVirtualNetPlayerRoleType_MAX       = 3,
};

// Enum SS.EScrollBarOnMouseType
// NumValues: 0x0005
enum class EScrollBarOnMouseType : uint8
{
	None                                     = 0,
	Hover                                    = 1,
	Drag                                     = 2,
	Normal                                   = 3,
	EScrollBarOnMouseType_MAX                = 4,
};

// Enum SS.EAutoRecoverSpGaugeAndSkillStockType
// NumValues: 0x0004
enum class EAutoRecoverSpGaugeAndSkillStockType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Stop                                     = 2,
	EAutoRecoverSpGaugeAndSkillStockType_MAX = 3,
};

// Enum SS.EKoratMainGameSaveMode
// NumValues: 0x001A
enum class EKoratMainGameSaveMode : uint8
{
	None                                     = 0,
	System                                   = 1,
	Option                                   = 2,
	Sound                                    = 3,
	BattleSetup                              = 4,
	BattleSetupOffline                       = 5,
	BattleSetupOnline                        = 6,
	BattleResult                             = 7,
	AdventureIf                              = 8,
	DramaticBattle                           = 9,
	DramaticBattleEdit                       = 10,
	MainMenu                                 = 11,
	BattleMode012                            = 12,
	BattleMode010                            = 13,
	TenkaichiBudokai                         = 14,
	BattleTraining                           = 15,
	MissionZen                               = 16,
	MissionWhis                              = 17,
	Shop                                     = 18,
	ZCustomize                               = 19,
	PictureBook                              = 20,
	MyData                                   = 21,
	Appreciation                             = 22,
	OnegaiShenron                            = 23,
	Event                                    = 24,
	EKoratMainGameSaveMode_MAX               = 25,
};

// Enum SS.EKoratMainGameSaveBattleSettingMode
// NumValues: 0x0004
enum class EKoratMainGameSaveBattleSettingMode : uint8
{
	OfflineBattle                            = 0,
	OnlineBattle                             = 1,
	BattleSaveModeMax                        = 2,
	EKoratMainGameSaveBattleSettingMode_MAX  = 3,
};

// Enum SS.EKoratCharacterEquipSettingSaveTarget
// NumValues: 0x0007
enum class EKoratCharacterEquipSettingSaveTarget : uint8
{
	Player                                   = 0,
	Player2                                  = 1,
	Com1                                     = 2,
	Com2                                     = 3,
	Num                                      = 4,
	Invalid                                  = 5,
	EKoratCharacterEquipSettingSaveTarget_MAX = 6,
};

// Enum SS.EMenuMissionMode
// NumValues: 0x0007
enum class EMenuMissionMode : uint8
{
	LifeLong                                 = 0,
	Tutorial                                 = 1,
	Mode02                                   = 2,
	Mode03                                   = 3,
	Trophy                                   = 4,
	None                                     = 5,
	EMenuMissionMode_MAX                     = 6,
};

// Enum SS.EMenuMissionFilter
// NumValues: 0x0006
enum class EMenuMissionFilter : uint8
{
	Achieved                                 = 0,
	NotAchieved                              = 1,
	MissionClearType                         = 2,
	Num                                      = 3,
	None                                     = 4,
	EMenuMissionFilter_MAX                   = 5,
};

// Enum SS.EMenuMissionSort
// NumValues: 0x0004
enum class EMenuMissionSort : uint8
{
	Name                                     = 0,
	Num                                      = 1,
	None                                     = 2,
	EMenuMissionSort_MAX                     = 3,
};

// Enum SS.EMenuMissionDialogType
// NumValues: 0x0005
enum class EMenuMissionDialogType : uint8
{
	MythicalOrbFull                          = 0,
	MythicalOrbUnableReceive                 = 1,
	Num                                      = 2,
	None                                     = 3,
	EMenuMissionDialogType_MAX               = 4,
};

// Enum SS.EMenuMissionVoiceType
// NumValues: 0x0007
enum class EMenuMissionVoiceType : uint8
{
	In                                       = 0,
	Receipt                                  = 1,
	BulkReceipt                              = 2,
	Add                                      = 3,
	Alone                                    = 4,
	Num                                      = 5,
	EMenuMissionVoiceType_MAX                = 6,
};

// Enum SS.EEmoteActionSlotType
// NumValues: 0x0008
enum class EEmoteActionSlotType : uint8
{
	SlotA                                    = 0,
	SlotB                                    = 1,
	SlotC                                    = 2,
	SlotD                                    = 3,
	SlotSparking                             = 4,
	Num                                      = 5,
	None                                     = 6,
	EEmoteActionSlotType_MAX                 = 7,
};

// Enum SS.EEmotePlayType
// NumValues: 0x0004
enum class EEmotePlayType : uint8
{
	Preview                                  = 0,
	InGame                                   = 1,
	Demo                                     = 2,
	EEmotePlayType_MAX                       = 3,
};

// Enum SS.ESSShopContentsType
// NumValues: 0x0018
enum class ESSShopContentsType : uint8
{
	None                                     = 0,
	Character                                = 1,
	StockItem                                = 2,
	PlayerCardBG                             = 3,
	BattleBGM                                = 4,
	EquipItemBegin                           = 5,
	EquipPowerUp                             = 6,
	EquipCostume                             = 7,
	EquipEquipment                           = 8,
	EquipEntryAction                         = 9,
	EquipEntryVoice                          = 10,
	EquipVictoryAction                       = 11,
	EquipVictoryVoice                        = 12,
	EquipAppealAction                        = 13,
	EquipAppealVoice                         = 14,
	EquipVoice                               = 15,
	EquipCombine                             = 16,
	EquipItemCombine                         = 17,
	EquipSparkingBGM                         = 18,
	EquipAIType                              = 19,
	EquipAILevel                             = 20,
	EquipControl                             = 21,
	EquipItemEnd                             = 22,
	ESSShopContentsType_MAX                  = 23,
};

// Enum SS.ESSBannerState
// NumValues: 0x0003
enum class ESSBannerState : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	ESSBannerState_MAX                       = 2,
};

// Enum SS.ESSShopFloorSaleState
// NumValues: 0x0003
enum class ESSShopFloorSaleState : uint8
{
	Open                                     = 0,
	Close                                    = 1,
	ESSShopFloorSaleState_MAX                = 2,
};

// Enum SS.ESSShopItemSaleState
// NumValues: 0x0003
enum class ESSShopItemSaleState : uint8
{
	Sales                                    = 0,
	NotSale                                  = 1,
	ESSShopItemSaleState_MAX                 = 2,
};

// Enum SS.ESSCurrencyType
// NumValues: 0x0004
enum class ESSCurrencyType : uint8
{
	None                                     = 0,
	Money                                    = 1,
	RewardPoint                              = 2,
	ESSCurrencyType_MAX                      = 3,
};

// Enum SS.ESSVanishingAssaultType
// NumValues: 0x0004
enum class ESSVanishingAssaultType : uint8
{
	Near                                     = 0,
	Mid                                      = 1,
	Far                                      = 2,
	ESSVanishingAssaultType_MAX              = 3,
};

// Enum SS.EKoratCharacterGenderType
// NumValues: 0x0004
enum class EKoratCharacterGenderType : uint8
{
	None                                     = 0,
	Male                                     = 1,
	Female                                   = 2,
	EKoratCharacterGenderType_MAX            = 3,
};

// Enum SS.EKoratCharaSortMenuElementsType
// NumValues: 0x000C
enum class EKoratCharaSortMenuElementsType : uint8
{
	None                                     = 0,
	Life                                     = 1,
	Blow                                     = 2,
	Energy                                   = 3,
	Rush                                     = 4,
	Blast                                    = 5,
	DP                                       = 6,
	Proficiency                              = 7,
	Text                                     = 8,
	EventPoint                               = 9,
	Default                                  = 10,
	EKoratCharaSortMenuElementsType_MAX      = 11,
};

// Enum SS.EKoratSortType
// NumValues: 0x0005
enum class EKoratSortType : uint8
{
	Upper                                    = 0,
	Lower                                    = 1,
	Num                                      = 2,
	Invalid                                  = 3,
	EKoratSortType_MAX                       = 4,
};

// Enum SS.EKoratSortFilterUseMode
// NumValues: 0x0005
enum class EKoratSortFilterUseMode : uint8
{
	Always                                   = 0,
	BattleMode010                            = 1,
	Num                                      = 2,
	Invalid                                  = 3,
	EKoratSortFilterUseMode_MAX              = 4,
};

// Enum SS.EKoratMpcParameterType
// NumValues: 0x0003
enum class EKoratMpcParameterType : uint8
{
	Scalar                                   = 0,
	Vector                                   = 1,
	EKoratMpcParameterType_MAX               = 2,
};

// Enum SS.EKoratMapChangeStartTiming
// NumValues: 0x0005
enum class EKoratMapChangeStartTiming : uint8
{
	PreHitDemo                               = 0,
	FrontOfAudience                          = 1,
	HitMap                                   = 2,
	StartInGameOT                            = 3,
	EKoratMapChangeStartTiming_MAX           = 4,
};

// Enum SS.EKoratMapChangeType
// NumValues: 0x0004
enum class EKoratMapChangeType : uint8
{
	None                                     = 0,
	Escape                                   = 1,
	Destruct                                 = 2,
	EKoratMapChangeType_MAX                  = 3,
};

// Enum SS.EKoratPlaySide
// NumValues: 0x0003
enum class EKoratPlaySide : uint8
{
	Player1                                  = 0,
	Player2                                  = 1,
	Max                                      = 2,
};

// Enum SS.ESSMenuButtonHoldDecideType
// NumValues: 0x0005
enum class ESSMenuButtonHoldDecideType : uint8
{
	None                                     = 0,
	Short                                    = 1,
	Middle                                   = 2,
	Long                                     = 3,
	ESSMenuButtonHoldDecideType_MAX          = 4,
};

// Enum SS.EKoratTimeLimitType
// NumValues: 0x000B
enum class EKoratTimeLimitType : uint8
{
	None                                     = 0,
	LimitSec90                               = 1,
	LimitSec120                              = 2,
	LimitSec180                              = 3,
	LimitSec240                              = 4,
	LimitSec300                              = 5,
	LimitSec360                              = 6,
	LimitSec600                              = 7,
	NoLimit                                  = 8,
	Invalid                                  = 9,
	EKoratTimeLimitType_MAX                  = 10,
};

// Enum SS.EStageSelectRuleSettingType
// NumValues: 0x0011
enum class EStageSelectRuleSettingType : uint8
{
	None                                     = 0,
	TimeLimit                                = 1,
	PowerupItem                              = 2,
	ComLevel                                 = 3,
	Com1Level                                = 4,
	Com2Level                                = 5,
	OutField                                 = 6,
	BattleRule                               = 7,
	Fly                                      = 8,
	PlayerSwitch                             = 9,
	PlayerFormChange                         = 10,
	PlayerCombine                            = 11,
	ComSwitch                                = 12,
	ComFormChange                            = 13,
	ComCombine                               = 14,
	Invalid                                  = 15,
	EStageSelectRuleSettingType_MAX          = 16,
};

// Enum SS.EKoratCommonOnOffType
// NumValues: 0x0005
enum class EKoratCommonOnOffType : uint8
{
	None                                     = 255,
	ON                                       = 0,
	OFF                                      = 1,
	Max                                      = 2,
	Invalid                                  = 3,
};

// Enum SS.EKoratBattleSetupTransition
// NumValues: 0x001D
enum class EKoratBattleSetupTransition : uint8
{
	None                                     = 0,
	BstStart                                 = 1,
	BstTop                                   = 2,
	BstTopTeam                               = 3,
	BstTopFromSt                             = 4,
	BstTopTeamFromSt                         = 5,
	BstComStart                              = 6,
	BstComTop                                = 7,
	BstComTopTeam                            = 8,
	BstComTopFromSt                          = 9,
	BstComTopTeamFromSt                      = 10,
	BstCustomize                             = 11,
	BstComCustomize                          = 12,
	BstCustomizeFromEt                       = 13,
	BstComCharacterSelect                    = 14,
	BstCharacterSelect                       = 15,
	BstComCharacterSelectFromEt              = 16,
	BstCharacterSelectFromEt                 = 17,
	BstComCharacterSelectEtStart             = 18,
	BstCharacterSelectEtStart                = 19,
	BstCharacterEntry                        = 20,
	BstCharacterSelectMovePlace1             = 21,
	BstCharacterSelectMovePlace2             = 22,
	BstComCharacterSelectMovePlace1          = 23,
	BstComCharacterSelectMovePlace2          = 24,
	BstPreBattleStart                        = 25,
	BstTopBegin                              = 2,
	BstTopEnd                                = 10,
	EKoratBattleSetupTransition_MAX          = 26,
};

// Enum SS.EKoratBattleSetupCustomizeTopCategoryButton
// NumValues: 0x0008
enum class EKoratBattleSetupCustomizeTopCategoryButton : uint8
{
	Costume                                  = 0,
	Ai                                       = 1,
	Appeal                                   = 2,
	FusionItem                               = 3,
	Bgm                                      = 4,
	Direction                                = 5,
	Num                                      = 6,
	EKoratBattleSetupCustomizeTopCategoryButton_MAX = 7,
};

// Enum SS.EKoratBattleSetupCustomizeComSettingButton
// NumValues: 0x0005
enum class EKoratBattleSetupCustomizeComSettingButton : uint8
{
	None                                     = 0,
	AiType                                   = 1,
	AiLevel                                  = 2,
	Num                                      = 3,
	EKoratBattleSetupCustomizeComSettingButton_MAX = 4,
};

// Enum SS.EBattleSetupFigurePatternType
// NumValues: 0x000A
enum class EBattleSetupFigurePatternType : uint8
{
	Normal                                   = 0,
	LargePlayer                              = 1,
	LargeEnemy                               = 2,
	LargeAndLarge                            = 3,
	SuperLargePlayer                         = 4,
	SuperLargeEnemy                          = 5,
	SuperLargeAndSuperLarge                  = 6,
	LargeAndSuperLarge                       = 7,
	SuperLargeAndLarge                       = 8,
	MAX                                      = 9,
};

// Enum SS.EBattleSetupLargeFigureType
// NumValues: 0x0004
enum class EBattleSetupLargeFigureType : uint8
{
	Normal                                   = 0,
	Large                                    = 1,
	SuperLarge                               = 2,
	MAX                                      = 3,
};

// Enum SS.EKoratMenuDramaticMode
// NumValues: 0x0005
enum class EKoratMenuDramaticMode : uint8
{
	None                                     = 0,
	Extra                                    = 1,
	Edit                                     = 2,
	World                                    = 3,
	Max                                      = 4,
};

// Enum SS.EKoratDramaticEditTextBalnkFilterCategory
// NumValues: 0x0005
enum class EKoratDramaticEditTextBalnkFilterCategory : uint8
{
	All                                      = 0,
	OneBlank                                 = 1,
	TwoBlank                                 = 2,
	None                                     = 3,
	EKoratDramaticEditTextBalnkFilterCategory_MAX = 4,
};

// Enum SS.EKoratMenuWLibStartMode
// NumValues: 0x0003
enum class EKoratMenuWLibStartMode : uint8
{
	None                                     = 0,
	MyPagePostedBattle                       = 1,
	Max                                      = 2,
};

// Enum SS.ESSWLibSideButtonType
// NumValues: 0x0013
enum class ESSWLibSideButtonType : uint8
{
	None                                     = 0,
	Home                                     = 1,
	HomeTop                                  = 2,
	HomeDaily                                = 3,
	HomeWeekly                               = 4,
	HomeMonthly                              = 5,
	HomeEvent                                = 6,
	HomeSeason                               = 7,
	HomeTotal                                = 8,
	MyPage                                   = 9,
	MyPagePostedBattle                       = 10,
	MyPageSavedReplay                        = 11,
	MyPageFavorite                           = 12,
	UserPosted                               = 13,
	UserPostedBattle                         = 14,
	UserPostedReplay                         = 15,
	Search                                   = 16,
	SearchHitCount                           = 17,
	ESSWLibSideButtonType_MAX                = 18,
};

// Enum SS.ESSWLibHomeCategoryButtonType
// NumValues: 0x0008
enum class ESSWLibHomeCategoryButtonType : uint8
{
	None                                     = 0,
	Newly                                    = 1,
	Official                                 = 2,
	RankingGood                              = 3,
	Difficulty                               = 4,
	Pickup                                   = 5,
	RankingPlayCount                         = 6,
	ESSWLibHomeCategoryButtonType_MAX        = 7,
};

// Enum SS.ESSWLibHomePeriodCategoryButtonType
// NumValues: 0x0008
enum class ESSWLibHomePeriodCategoryButtonType : uint8
{
	None                                     = 0,
	RankingEvent                             = 1,
	RankingGood                              = 2,
	RankingFavorite                          = 3,
	RankingPlayCount                         = 4,
	RankingDifficulty                        = 5,
	Pickup                                   = 6,
	ESSWLibHomePeriodCategoryButtonType_MAX  = 7,
};

// Enum SS.ESSWLibSearchMenuButtonType
// NumValues: 0x0006
enum class ESSWLibSearchMenuButtonType : uint8
{
	None                                     = 0,
	Detail                                   = 1,
	Tag                                      = 2,
	ID                                       = 3,
	Follow                                   = 4,
	ESSWLibSearchMenuButtonType_MAX          = 5,
};

// Enum SS.ESSWLibDetailSearchCharacterMenuButtonType
// NumValues: 0x0006
enum class ESSWLibDetailSearchCharacterMenuButtonType : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Secret                                   = 2,
	Free                                     = 3,
	Select                                   = 4,
	ESSWLibDetailSearchCharacterMenuButtonType_MAX = 5,
};

// Enum SS.ESSWLibBattleSortType
// NumValues: 0x0007
enum class ESSWLibBattleSortType : uint8
{
	None                                     = 0,
	PostedTime                               = 1,
	Good                                     = 2,
	Favorite                                 = 3,
	Play                                     = 4,
	Replay                                   = 5,
	ESSWLibBattleSortType_MAX                = 6,
};

// Enum SS.ESSWLibReplaySortType
// NumValues: 0x0005
enum class ESSWLibReplaySortType : uint8
{
	None                                     = 0,
	PostedTime                               = 1,
	PublicTime                               = 2,
	Good                                     = 3,
	ESSWLibReplaySortType_MAX                = 4,
};

// Enum SS.ESSWLibReplayFilterType
// NumValues: 0x0006
enum class ESSWLibReplayFilterType : uint8
{
	None                                     = 0,
	Posted                                   = 1,
	NotPosted                                = 2,
	Favorite                                 = 3,
	NotFavorite                              = 4,
	ESSWLibReplayFilterType_MAX              = 5,
};

// Enum SS.ESSDramaticBattleSearchConditionExist
// NumValues: 0x0005
enum class ESSDramaticBattleSearchConditionExist : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Exist                                    = 2,
	NotExist                                 = 3,
	ESSDramaticBattleSearchConditionExist_MAX = 4,
};

// Enum SS.ESSDramaticBattleSearchConditionPlayCount
// NumValues: 0x0004
enum class ESSDramaticBattleSearchConditionPlayCount : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Many                                     = 2,
	ESSDramaticBattleSearchConditionPlayCount_MAX = 3,
};

// Enum SS.ESSDramaticBattleSearchConditionDifficulty
// NumValues: 0x0007
enum class ESSDramaticBattleSearchConditionDifficulty : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Level00                                  = 2,
	Level10                                  = 3,
	Level20                                  = 4,
	Level30                                  = 5,
	ESSDramaticBattleSearchConditionDifficulty_MAX = 6,
};

// Enum SS.ESSDramaticBattleEditTriggerSwitcher
// NumValues: 0x0008
enum class ESSDramaticBattleEditTriggerSwitcher : uint8
{
	OneIcon                                  = 0,
	Attack                                   = 1,
	Change                                   = 2,
	Num                                      = 3,
	IconAndNum                               = 4,
	IconAndEmote                             = 5,
	Blank                                    = 6,
	ESSDramaticBattleEditTriggerSwitcher_MAX = 7,
};

// Enum SS.ESSDramaticBattleEditDetailSwitcher
// NumValues: 0x000D
enum class ESSDramaticBattleEditDetailSwitcher : uint8
{
	OneIcon                                  = 0,
	Arrow                                    = 1,
	IconAndNum                               = 2,
	IconAndEmote                             = 3,
	IconAndItem                              = 4,
	IconAndBuff                              = 5,
	Table                                    = 6,
	EventText                                = 7,
	Bgm                                      = 8,
	Scene                                    = 9,
	Blank                                    = 10,
	None                                     = 11,
	ESSDramaticBattleEditDetailSwitcher_MAX  = 12,
};

// Enum SS.ESSDramaticBattleEditDetailIconSwitcher
// NumValues: 0x000D
enum class ESSDramaticBattleEditDetailIconSwitcher : uint8
{
	Normal                                   = 0,
	Text                                     = 1,
	Brast                                    = 2,
	Change                                   = 3,
	Buff                                     = 4,
	Item                                     = 5,
	Bgm                                      = 6,
	Thimk                                    = 7,
	Emote                                    = 8,
	Scene                                    = 9,
	Time                                     = 10,
	Blank                                    = 11,
	ESSDramaticBattleEditDetailIconSwitcher_MAX = 12,
};

// Enum SS.ESSUserBlockStateFlags
// NumValues: 0x0006
enum class ESSUserBlockStateFlags : uint8
{
	Unblocked                                = 0,
	BlockedByMe                              = 1,
	BlockedByPeer                            = 2,
	Restricted                               = 4,
	BlockedOtherReason                       = 8,
	ESSUserBlockStateFlags_MAX               = 9,
};

// Enum SS.ESSWLibBattleDetailSearchMenuButtonType
// NumValues: 0x000B
enum class ESSWLibBattleDetailSearchMenuButtonType : uint8
{
	None                                     = 0,
	Difficulty                               = 1,
	PlayCount                                = 2,
	TimeLimit                                = 3,
	OutField                                 = 4,
	FormChangeAndCombine                     = 5,
	Switch                                   = 6,
	Fly                                      = 7,
	Stage                                    = 8,
	Character                                = 9,
	ESSWLibBattleDetailSearchMenuButtonType_MAX = 10,
};

// Enum SS.ESSWLibBattleDetailSearchMenuPageType
// NumValues: 0x0005
enum class ESSWLibBattleDetailSearchMenuPageType : uint8
{
	None                                     = 0,
	Search                                   = 1,
	Stage                                    = 2,
	Character                                = 3,
	ESSWLibBattleDetailSearchMenuPageType_MAX = 4,
};

// Enum SS.ESSWLibBattleReportReasonType
// NumValues: 0x0005
enum class ESSWLibBattleReportReasonType : uint8
{
	None                                     = 0,
	BattleContinuousPost                     = 1,
	BattleImproper                           = 2,
	BattleSameOriginal                       = 3,
	ESSWLibBattleReportReasonType_MAX        = 4,
};

// Enum SS.ESSWLibPenaltyReasonType
// NumValues: 0x0004
enum class ESSWLibPenaltyReasonType : uint8
{
	None                                     = 0,
	EditBattleReported                       = 1,
	EditBattleFalseReport                    = 2,
	ESSWLibPenaltyReasonType_MAX             = 3,
};

// Enum SS.ESSWLibPenaltyContentsRestrictType
// NumValues: 0x0004
enum class ESSWLibPenaltyContentsRestrictType : uint8
{
	None                                     = 0,
	EditBattleUpload                         = 1,
	EditBattleReport                         = 2,
	ESSWLibPenaltyContentsRestrictType_MAX   = 3,
};

// Enum SS.EKoratBattleAssistFinishType
// NumValues: 0x0004
enum class EKoratBattleAssistFinishType : uint8
{
	None                                     = 0,
	DeltaHeavy                               = 1,
	HeavyCrash                               = 2,
	Max                                      = 3,
};

// Enum SS.EKoratAllComLevelSetting
// NumValues: 0x0006
enum class EKoratAllComLevelSetting : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Middle                                   = 2,
	High                                     = 3,
	ExtraHigh                                = 4,
	Max                                      = 5,
};

// Enum SS.EKoratBattlePlayerStartSlot
// NumValues: 0x0008
enum class EKoratBattlePlayerStartSlot : uint8
{
	Normal1                                  = 0,
	Normal2                                  = 1,
	Normal3                                  = 2,
	Normal4                                  = 3,
	Normal5                                  = 4,
	Giant1                                   = 5,
	AdventureIf1                             = 6,
	Max                                      = 7,
};

// Enum SS.EKoratBattleDirectingCharacterStateType
// NumValues: 0x001A
enum class EKoratBattleDirectingCharacterStateType : uint8
{
	None                                     = 0,
	ZSearchOn                                = 1,
	ZSearchOff                               = 2,
	FormChanged                              = 3,
	Sparking                                 = 4,
	SparkingEnd                              = 5,
	CostumeDamaged                           = 6,
	Damage                                   = 7,
	GuardedDamage                            = 8,
	SelfDamage                               = 9,
	Down                                     = 10,
	SleepParalysis                           = 11,
	SleepParalysisEnd                        = 12,
	KnockDown                                = 13,
	AscertainSuccess                         = 14,
	SuperAscertainSuccess                    = 15,
	NoHit_EnergyBullet                       = 16,
	NoHit_Combatives                         = 17,
	NoHit_BlastForte1                        = 18,
	NoHit_BlastForte2                        = 19,
	NoHit_BlastSkill1                        = 20,
	NoHit_BlastSkill2                        = 21,
	NoHit_BlastUltimate                      = 22,
	SunFist                                  = 23,
	SunFistEnd                               = 24,
	EKoratBattleDirectingCharacterStateType_MAX = 25,
};

// Enum SS.EKoratNetworkWorkerRequest
// NumValues: 0x0028
enum class EKoratNetworkWorkerRequest : uint8
{
	None                                     = 0,
	Matching                                 = 1,
	Enable                                   = 2,
	Fence                                    = 3,
	Ranking                                  = 4,
	RoomSearch                               = 5,
	RoomCreate                               = 6,
	RoomJoin                                 = 7,
	InviteFriend                             = 8,
	FetchPlayerCard                          = 9,
	UploadBattle                             = 10,
	TopRankingBattleList                     = 11,
	PeriodRankingBattleList                  = 12,
	BattleThumbnail                          = 13,
	BattleDetail                             = 14,
	BattleData                               = 15,
	GoodBattle                               = 16,
	FavoriteBattle                           = 17,
	FavoriteBattleList                       = 18,
	BattleDelete                             = 19,
	FollowList                               = 20,
	UserBattleList                           = 21,
	BattleTagSearch                          = 22,
	BattleDetailSearch                       = 23,
	UploadReplay                             = 24,
	UserReplayList                           = 25,
	BattleReplayList                         = 26,
	ReplayData                               = 27,
	ReplayDelete                             = 28,
	ReplayGood                               = 29,
	ReplayFavorite                           = 30,
	ReplayPublic                             = 31,
	BattleResultWorldLib                     = 32,
	BattleReportWLib                         = 33,
	GetHourWLibBattleReportCount             = 34,
	TournamentAddCom                         = 35,
	PollNotice                               = 36,
	PollMiscInfo                             = 37,
	SyncPlayerCard                           = 38,
	Max                                      = 39,
};

// Enum SS.EKoratPlayingTime
// NumValues: 0x0009
enum class EKoratPlayingTime : uint8
{
	None                                     = 0,
	Range_00                                 = 1,
	Range_01                                 = 2,
	Range_02                                 = 3,
	Range_03                                 = 4,
	Range_04                                 = 5,
	Range_05                                 = 6,
	Num                                      = 7,
	EKoratPlayingTime_MAX                    = 8,
};

// Enum SS.EKoratOperationGuideBlock
// NumValues: 0x0015
enum class EKoratOperationGuideBlock : uint8
{
	None                                     = 0,
	Move                                     = 1,
	LongDistanceMove                         = 2,
	AttackLongDistance                       = 3,
	CloseMove                                = 4,
	ProximityCombatives                      = 5,
	Rush                                     = 6,
	LongDistanceCombatives                   = 7,
	Defence                                  = 8,
	Counter                                  = 9,
	Skill                                    = 10,
	Pursuit                                  = 11,
	Technique                                = 12,
	Sparking                                 = 13,
	StyleChange                              = 14,
	Change                                   = 15,
	Impact                                   = 16,
	Appeal                                   = 17,
	Recommendation                           = 18,
	Num                                      = 19,
	EKoratOperationGuideBlock_MAX            = 20,
};

// Enum SS.EKoratOperationGuideIcon
// NumValues: 0x0008
enum class EKoratOperationGuideIcon : uint8
{
	None                                     = 0,
	BlastForte1                              = 1,
	BlastForte2                              = 2,
	BlastSkill1                              = 3,
	BlastSkill2                              = 4,
	BlastUltimate                            = 5,
	Num                                      = 6,
	EKoratOperationGuideIcon_MAX             = 7,
};

// Enum SS.EKoratOperationGuideCategoryIcon
// NumValues: 0x000F
enum class EKoratOperationGuideCategoryIcon : uint8
{
	None                                     = 0,
	AttackUp                                 = 1,
	AttackDown                               = 2,
	DiffenceUp                               = 3,
	DiffenceDown                             = 4,
	SpUp                                     = 5,
	SpDown                                   = 6,
	BlustUp                                  = 7,
	BlustDown                                = 8,
	KidanUp                                  = 9,
	KidanDown                                = 10,
	EtcUp                                    = 11,
	EtcDown                                  = 12,
	Num                                      = 13,
	EKoratOperationGuideCategoryIcon_MAX     = 14,
};

// Enum SS.EKoratOperationGuideRushDerivative
// NumValues: 0x003F
enum class EKoratOperationGuideRushDerivative : uint8
{
	None                                     = 0,
	RushDerivative1                          = 1,
	RushDerivative2                          = 2,
	RushDerivative3                          = 3,
	RushDerivative4                          = 4,
	DerivedCombo1_1                          = 5,
	DerivedCombo1_2                          = 6,
	DerivedCombo2_1                          = 7,
	DerivedCombo2_2                          = 8,
	DerivedCombo3_1                          = 9,
	DerivedCombo3_2                          = 10,
	DerivedCombo4_1                          = 11,
	DerivedCombo4_2                          = 12,
	DerivedCombo1                            = 13,
	DerivedCombo2                            = 14,
	GsRushDerivative                         = 15,
	GsRushDerivedCombo1                      = 16,
	GsRushDerivedCombo2                      = 17,
	StepIn                                   = 18,
	RushIn                                   = 19,
	RushHighSpeedMovement                    = 20,
	DashJumpEnergyBullet                     = 21,
	JumpSmashEnergyBullet                    = 22,
	RepelBullet                              = 23,
	BlowBrake                                = 24,
	SonicSway                                = 25,
	ParryPursuit                             = 26,
	LiftStrike                               = 27,
	GrandSlash                               = 28,
	VanishingAttack                          = 29,
	LightningAttack                          = 30,
	BurstAttack                              = 31,
	BurstMeteor                              = 32,
	BurstSmash                               = 33,
	BurstRush                                = 34,
	DawnThrow                                = 35,
	SparkingRush                             = 36,
	RevengeCounter                           = 37,
	StepInSway                               = 38,
	HyperArmor                               = 39,
	SparkingArmor                            = 40,
	AutoReflect                              = 41,
	EnergyDrain                              = 42,
	CannotShoot                              = 43,
	Fly                                      = 44,
	FlyMyself                                = 45,
	HighSpeedMove                            = 46,
	SuperHighSpeedMove                       = 47,
	Fly_ON                                   = 48,
	StepInAttack                             = 49,
	RushInAttack                             = 50,
	Pursuit                                  = 51,
	BigCharaOn                               = 52,
	BigCharaOFF                              = 53,
	PowerImpuctOFF                           = 54,
	CrashImpuctOFF                           = 55,
	EnergyDrainON                            = 56,
	ComboSet                                 = 57,
	DashRising                               = 58,
	DashBlow                                 = 59,
	CannotShootAttack                        = 60,
	Num                                      = 61,
	EKoratOperationGuideRushDerivative_MAX   = 62,
};

// Enum SS.EKoratEffectHitAirWallType
// NumValues: 0x0004
enum class EKoratEffectHitAirWallType : uint8
{
	Unknown                                  = 0,
	Normal                                   = 1,
	Blow                                     = 2,
	EKoratEffectHitAirWallType_MAX           = 3,
};

// Enum SS.EKoratCharacterRadarChartParamType
// NumValues: 0x0008
enum class EKoratCharacterRadarChartParamType : uint8
{
	Life                                     = 0,
	Blow                                     = 1,
	Energy                                   = 2,
	Rush                                     = 3,
	Blast                                    = 4,
	Num                                      = 5,
	Invalid                                  = 6,
	EKoratCharacterRadarChartParamType_MAX   = 7,
};

// Enum SS.EKortaDramticBattleCategory
// NumValues: 0x0007
enum class EKortaDramticBattleCategory : uint8
{
	None                                     = 0,
	BeginnerClass                            = 1,
	AdvancedClass                            = 2,
	EliteClass                               = 3,
	LegeandSuperClass                        = 4,
	HighDegreeOfDifficulty                   = 5,
	EKortaDramticBattleCategory_MAX          = 6,
};

// Enum SS.EKoratInviteSceneJumpMode
// NumValues: 0x000B
enum class EKoratInviteSceneJumpMode : uint8
{
	None                                     = 0,
	InvitePlayerMatching                     = 1,
	DragonStory                              = 2,
	PlayerMatching                           = 3,
	RankMatching                             = 4,
	PlayerVsCom                              = 5,
	Trainning                                = 6,
	TenkaichiOnline                          = 7,
	BattleMode012                            = 8,
	BattleMode010                            = 9,
	Max                                      = 10,
};

// Enum SS.ESSHitEffectType
// NumValues: 0x0004
enum class ESSHitEffectType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	ESSHitEffectType_MAX                     = 3,
};

// Enum SS.EExhibitionType
// NumValues: 0x0006
enum class EExhibitionType : uint8
{
	None                                     = 0,
	Exhibition1                              = 1,
	Exhibition2                              = 2,
	Exhibition3                              = 3,
	Num                                      = 4,
	EExhibitionType_MAX                      = 5,
};

// Enum SS.EBlastDashMoveType
// NumValues: 0x0004
enum class EBlastDashMoveType : uint8
{
	UncontrollableStraight                   = 0,
	ControllableTarget                       = 1,
	ControllableTurn                         = 2,
	EBlastDashMoveType_MAX                   = 3,
};

// Enum SS.ESSDashAttackType
// NumValues: 0x0003
enum class ESSDashAttackType : uint8
{
	DragonDashAttack                         = 0,
	DragonHomingAttack                       = 1,
	ESSDashAttackType_MAX                    = 2,
};

// Enum SS.ESSBattleDataIncorrectPlayer
// NumValues: 0x0006
enum class ESSBattleDataIncorrectPlayer : uint8
{
	None                                     = 0,
	Player1                                  = 1,
	Player2                                  = 2,
	Both                                     = 3,
	Num                                      = 4,
	ESSBattleDataIncorrectPlayer_MAX         = 5,
};

// Enum SS.ESSEventSceneCharacterTypeDE
// NumValues: 0x000C
enum class ESSEventSceneCharacterTypeDE : uint8
{
	Empty                                    = 18446744073709551615,
	Character00                              = 0,
	Character01                              = 1,
	Character02                              = 2,
	Character03                              = 3,
	Character04                              = 4,
	Character05                              = 5,
	Character06                              = 6,
	Character07                              = 7,
	Character08                              = 8,
	Character09                              = 9,
	ESSEventSceneCharacterTypeDE_MAX         = 10,
};

// Enum SS.EEventSceneCameraPriority
// NumValues: 0x0004
enum class EEventSceneCameraPriority : uint8
{
	None                                     = 0,
	Directing                                = 1,
	FirstPerson                              = 2,
	EEventSceneCameraPriority_MAX            = 3,
};

// Enum SS.ESSEventSceneExitCode
// NumValues: 0x0007
enum class ESSEventSceneExitCode : uint8
{
	DEFAULT                                  = 0,
	CHOSE_TOP                                = 0,
	CHOSE_BOTTOM                             = 1,
	CHOSE_LEFT                               = 2,
	CHOSE_RIGHT                              = 3,
	INVALID                                  = 4,
	ESSEventSceneExitCode_MAX                = 5,
};

// Enum SS.ESSEventSceneSetupType
// NumValues: 0x0004
enum class ESSEventSceneSetupType : uint8
{
	Fullscreen                               = 0,
	Windowed                                 = 1,
	AutomationCapture                        = 2,
	ESSEventSceneSetupType_MAX               = 3,
};

// Enum SS.ESSEventSceneChoicesResult
// NumValues: 0x0005
enum class ESSEventSceneChoicesResult : uint8
{
	TOP                                      = 0,
	BOTTOM                                   = 1,
	LEFT                                     = 2,
	RIGHT                                    = 3,
	ESSEventSceneChoicesResult_MAX           = 4,
};

// Enum SS.ESSFlowConditionsInputDirectionType
// NumValues: 0x0006
enum class ESSFlowConditionsInputDirectionType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Neutral                                  = 4,
	ESSFlowConditionsInputDirectionType_MAX  = 5,
};

// Enum SS.ESSFlowConditionsJudgmentType
// NumValues: 0x0003
enum class ESSFlowConditionsJudgmentType : uint8
{
	Continue                                 = 0,
	Stop                                     = 1,
	ESSFlowConditionsJudgmentType_MAX        = 2,
};

// Enum SS.ESSFlowConditionsGroundType
// NumValues: 0x0003
enum class ESSFlowConditionsGroundType : uint8
{
	Ground                                   = 0,
	Flying                                   = 1,
	ESSFlowConditionsGroundType_MAX          = 2,
};

// Enum SS.ESSFlowConditionsDragonDashAttack
// NumValues: 0x0004
enum class ESSFlowConditionsDragonDashAttack : uint8
{
	NoDragonDashAssist                       = 0,
	Succeed                                  = 1,
	Failed                                   = 2,
	ESSFlowConditionsDragonDashAttack_MAX    = 3,
};

// Enum SS.ESSGalleryMyDataUIType
// NumValues: 0x0007
enum class ESSGalleryMyDataUIType : uint8
{
	BackGround                               = 0,
	Top                                      = 1,
	Record                                   = 2,
	IconTitle                                = 3,
	TextTitle                                = 4,
	Num                                      = 5,
	ESSGalleryMyDataUIType_MAX               = 6,
};

// Enum SS.ESSGalleryMyDataItemType
// NumValues: 0x0004
enum class ESSGalleryMyDataItemType : uint8
{
	Major                                    = 0,
	Minor                                    = 1,
	Num                                      = 2,
	ESSGalleryMyDataItemType_MAX             = 3,
};

// Enum SS.ESSGalleryMyDataMajorItemType
// NumValues: 0x0013
enum class ESSGalleryMyDataMajorItemType : uint8
{
	Character                                = 0,
	Stage                                    = 1,
	Money                                    = 2,
	PlayerLv                                 = 3,
	PlayTime                                 = 4,
	BattleMode012                            = 5,
	BattleMode010                            = 6,
	Tournament                               = 7,
	Tournament_Online                        = 8,
	RankMatch                                = 9,
	QuickMatch                               = 10,
	Story                                    = 11,
	Drama                                    = 12,
	Pray                                     = 13,
	Mission                                  = 14,
	Title                                    = 15,
	Item                                     = 16,
	Num                                      = 17,
	ESSGalleryMyDataMajorItemType_MAX        = 18,
};

// Enum SS.ESSGalleryMyDataMinorItemType
// NumValues: 0x0089
enum class ESSGalleryMyDataMinorItemType : uint8
{
	Character_UseRate                        = 0,
	Character_OpenCount                      = 1,
	Character_DefeatCount                    = 2,
	Character_WinCount                       = 3,
	Character_MaxHitCount                    = 4,
	Character_MaxHitChara                    = 5,
	Character_MaxDmgCount                    = 6,
	Character_MaxDmgChara                    = 7,
	Character_MostDefeatChara                = 8,
	Character_BAttackCount                   = 9,
	Character_DHormingCount                  = 10,
	Character_ZCounterCount                  = 11,
	Character_UCounterCount                  = 12,
	Character_ShootCount                     = 13,
	Character_RefCount                       = 14,
	Character_DmgCount                       = 15,
	Character_ReceivedDmgCount               = 16,
	Character_ImpactCount                    = 17,
	Character_ImpactWinCount                 = 18,
	Character_EmoteCount                     = 19,
	Character_SparkingCount                  = 20,
	Character_AverageBattleTime              = 21,
	Character_AverageSkillCount              = 22,
	Character_AverageBlastCount              = 23,
	Character_AverageUltCount                = 24,
	Stage_UseCount                           = 25,
	Stage_EscapeEffectCount                  = 26,
	Stage_BrakeEffectCount                   = 27,
	Money_Value                              = 28,
	Money_RewardPoint                        = 29,
	PlayerLv_Value                           = 30,
	PlayerLv_Rate                            = 31,
	PlayerLv_Exp                             = 32,
	PlayerLv_RatePoint                       = 33,
	PlayerLv_SingleRank                      = 34,
	PlayerLv_SingleRankPoint                 = 35,
	PlayerLv_DPRank                          = 36,
	PlayerLv_DPRankPoint                     = 37,
	PlayTime_Total                           = 38,
	PlayTime_Story                           = 39,
	PlayTime_Drama                           = 40,
	PlayTime_PVE                             = 41,
	PlayTime_EVE                             = 42,
	PlayTime_Tournament                      = 43,
	PlayTime_Training                        = 44,
	PlayTime_RankMatch                       = 45,
	PlayTime_QuickMatch                      = 46,
	PlayTime_BattleMode012                   = 47,
	PlayTime_BattleMode010                   = 48,
	BattleMode012_TeamingCount               = 49,
	BattleMode012_QualifyCount               = 50,
	BattleMode012_FinalCount                 = 51,
	BattleMode012_FinalWinCount              = 52,
	BattleMode010_DefeatCount                = 53,
	Tournament_PlayCount                     = 54,
	Tournament_WinCount                      = 55,
	Tournament_A_RulePlayCount               = 56,
	Tournament_B_RulePlayCount               = 57,
	Tournament_C_RulePlayCount               = 58,
	Tournament_D_RulePlayCount               = 59,
	Tournament_E_RulePlayCount               = 60,
	Tournament_F_RulePlayCount               = 61,
	Tournament_MaxWinCount                   = 62,
	Tournament_MaxRankValue                  = 63,
	Tournament_TopCharaCount                 = 64,
	Tournament_TopCharaName                  = 65,
	Tournament_PlayCount_Online              = 66,
	Tournament_WinCount_Online               = 67,
	Tournament_A_RulePlayCount_Online        = 68,
	Tournament_B_RulePlayCount_Online        = 69,
	Tournament_C_RulePlayCount_Online        = 70,
	Tournament_D_RulePlayCount_Online        = 71,
	Tournament_E_RulePlayCount_Online        = 72,
	Tournament_F_RulePlayCount_Online        = 73,
	Tournament_MaxWinCount_Online            = 74,
	Tournament_MaxRankValue_Online           = 75,
	Tournament_TopCharaCount_Online          = 76,
	Tournament_TopCharaName_Online           = 77,
	RankMatch_WinRate                        = 78,
	RankMatch_PlayCount                      = 79,
	RankMatch_WinCount                       = 80,
	RankMatch_LoseCount                      = 81,
	RankMatch_DrawCount                      = 82,
	RankMatch_MaxWinCount                    = 83,
	RankMatch_MaxRankValue                   = 84,
	RankMatch_TopCharaCount                  = 85,
	RankMatch_TopCharaName                   = 86,
	RankMatch_WinCount_DP                    = 87,
	RankMatch_LoseCount_DP                   = 88,
	RankMatch_DrawCount_DP                   = 89,
	RankMatch_MaxWinCount_DP                 = 90,
	RankMatch_MaxRankValue_DP                = 91,
	RankMatch_TopCharaCount_DP               = 92,
	RankMatch_TopCharaName_DP                = 93,
	QuickMatch_WinRate                       = 94,
	QuickMatch_PlayCount                     = 95,
	QuickMatch_WinCount                      = 96,
	QuickMatch_LoseCount                     = 97,
	QuickMatch_DrawCount                     = 98,
	QuickMatch_JoinCount                     = 99,
	QuickMatch_MaxWinCount                   = 100,
	QuickMatch_TopCharaCount                 = 101,
	QuickMatch_TopCharaName                  = 102,
	Story_RouteClearCount                    = 103,
	Drama_ClearCount                         = 104,
	Drama_PostCount                          = 105,
	Drama_PlayCount                          = 106,
	Drama_CreateCount                        = 107,
	Pray_A_Count                             = 108,
	Pray_B_Count                             = 109,
	Pray_C_Count                             = 110,
	Mission_ClearCount                       = 111,
	Mission_StampClearCount                  = 112,
	Mission_BonusClearCount                  = 113,
	Mission_SpClearCount                     = 114,
	Title_IconCount                          = 115,
	Title_TextCount                          = 116,
	Item_Count                               = 117,
	Item_Count_PowerUp                       = 118,
	Item_Count_Character                     = 119,
	Item_Count_Costume                       = 120,
	Item_Count_Equipment                     = 121,
	Item_Count_Emote                         = 122,
	Item_Count_Voice                         = 123,
	Item_Count_AiType                        = 124,
	Item_Count_PlayerCardBG                  = 125,
	OneChara_AllModeUseCount                 = 126,
	OneChara_AllModeUseRate                  = 127,
	OneChara_AllModeUseTime                  = 128,
	OneChara_AverageBattleTime               = 129,
	OneChara_AverageSkillCount               = 130,
	OneChara_AverageBlastCount               = 131,
	OneChara_AverageUltCount                 = 132,
	OneChara_EmoteCount                      = 133,
	OneChara_SparkingCount                   = 134,
	Num                                      = 135,
	ESSGalleryMyDataMinorItemType_MAX        = 136,
};

// Enum SS.ESSGalleryPictureBookGatheringType
// NumValues: 0x0005
enum class ESSGalleryPictureBookGatheringType : uint8
{
	Chara_00                                 = 0,
	Chara_01                                 = 1,
	Chara_02                                 = 2,
	Num                                      = 3,
	ESSGalleryPictureBookGatheringType_MAX   = 4,
};

// Enum SS.ESSGalleryPictureBookUIType
// NumValues: 0x0008
enum class ESSGalleryPictureBookUIType : uint8
{
	CharaList                                = 0,
	CharaInfo                                = 1,
	Gathering                                = 2,
	Title                                    = 3,
	CharaSel                                 = 4,
	ViewerMenu                               = 5,
	Num                                      = 6,
	ESSGalleryPictureBookUIType_MAX          = 7,
};

// Enum SS.ESSGalleryTheaterUIType
// NumValues: 0x000D
enum class ESSGalleryTheaterUIType : uint8
{
	LeftTabBase                              = 0,
	LeftTabReplay                            = 1,
	LeftTabMovie                             = 2,
	LeftTabBGM                               = 3,
	RightWinBase                             = 4,
	RightWinReplayList                       = 5,
	RightWinMovieList                        = 6,
	RightWinBGMList                          = 7,
	MoviePlayer                              = 8,
	BackGround                               = 9,
	SortFilterDialog                         = 10,
	Num                                      = 11,
	ESSGalleryTheaterUIType_MAX              = 12,
};

// Enum SS.ESSGenerateDestructionType
// NumValues: 0x0003
enum class ESSGenerateDestructionType : uint8
{
	Tick                                     = 0,
	Trigger                                  = 1,
	ESSGenerateDestructionType_MAX           = 2,
};

// Enum SS.EKoratVibrationTargetType
// NumValues: 0x0005
enum class EKoratVibrationTargetType : uint8
{
	None                                     = 0,
	Self                                     = 1,
	Opponent                                 = 2,
	Both                                     = 3,
	EKoratVibrationTargetType_MAX            = 4,
};

// Enum SS.EVersionID
// NumValues: 0x0020
enum class EVersionID : uint8
{
	None                                     = 0,
	Development                              = 1,
	Exhibition1                              = 10,
	Exhibition2                              = 11,
	Exhibition3                              = 12,
	Exhibition4                              = 13,
	Trial                                    = 20,
	CBT                                      = 30,
	OBT                                      = 40,
	PreMaster                                = 50,
	Products                                 = 60,
	DLC1                                     = 70,
	DLC2                                     = 71,
	DLC3                                     = 72,
	DLC4                                     = 73,
	Season1                                  = 100,
	Season2                                  = 101,
	Season3                                  = 102,
	Season4                                  = 103,
	Season5                                  = 104,
	Season6                                  = 105,
	Season7                                  = 106,
	Season8                                  = 107,
	Season9                                  = 108,
	Season10                                 = 109,
	Season11                                 = 110,
	Season12                                 = 111,
	Season13                                 = 112,
	Season14                                 = 113,
	Season15                                 = 114,
	Season16                                 = 115,
	EVersionID_MAX                           = 116,
};

// Enum SS.EVersionPresetID
// NumValues: 0x000C
enum class EVersionPresetID : uint8
{
	None                                     = 0,
	Development                              = 1,
	Regident                                 = 2,
	BT                                       = 3,
	MainGame                                 = 4,
	Exhibition1                              = 5,
	Trial                                    = 6,
	CBT                                      = 7,
	OBT                                      = 8,
	PreMaster                                = 9,
	Products                                 = 10,
	EVersionPresetID_MAX                     = 11,
};

// Enum SS.ESSLevelSequenceDirectorEffectRotationBase
// NumValues: 0x0004
enum class ESSLevelSequenceDirectorEffectRotationBase : uint8
{
	World                                    = 0,
	CharaFront                               = 1,
	BoneFront                                = 2,
	ESSLevelSequenceDirectorEffectRotationBase_MAX = 3,
};

// Enum SS.ESSHUDType
// NumValues: 0x0008
enum class ESSHUDType : uint8
{
	StyleGuide                               = 0,
	ChangeGuide                              = 1,
	EmoteGuide                               = 2,
	SkillGuide                               = 3,
	MainGauge                                = 4,
	BBoost                                   = 5,
	Buff                                     = 6,
	Max                                      = 7,
};

// Enum SS.ESSHUDChangeMode
// NumValues: 0x0004
enum class ESSHUDChangeMode : uint8
{
	None                                     = 0,
	StyleChange                              = 1,
	CharacterChange                          = 2,
	ESSHUDChangeMode_MAX                     = 3,
};

// Enum SS.EKoratCharacterHUDStatusReq
// NumValues: 0x0008
enum class EKoratCharacterHUDStatusReq : uint8
{
	None                                     = 0,
	MainGaugeHideStart                       = 1,
	MainGaugeHide                            = 2,
	MainGaugeHideEnd                         = 3,
	MainGaugeShowStart                       = 4,
	MainGaugeShow                            = 5,
	MainGaugeShowEnd                         = 6,
	EKoratCharacterHUDStatusReq_MAX          = 7,
};

// Enum SS.EKoratPlayModeType
// NumValues: 0x0010
enum class EKoratPlayModeType : uint8
{
	PlayMode_Story                           = 0,
	PlayMode_Drama                           = 1,
	PlayMode_PVE                             = 2,
	PlayMode_EVE                             = 3,
	PlayMode_Tournament                      = 4,
	PlayMode_Training                        = 5,
	PlayMode_RankMatch                       = 6,
	PlayMode_PlayerMatch                     = 7,
	PlayMode_BattleMode012                   = 8,
	PlayMode_BattleMode010                   = 9,
	PlayMode_Tutorial                        = 10,
	PlayMode_TournamentOnline                = 11,
	PlayMode_RankMatchDP                     = 12,
	PlayMode_BattleMode011                   = 13,
	Num                                      = 14,
	EKoratPlayModeType_MAX                   = 15,
};

// Enum SS.EKoratTutorialMode
// NumValues: 0x0005
enum class EKoratTutorialMode : uint8
{
	None                                     = 0,
	Movie                                    = 1,
	End                                      = 2,
	Num                                      = 3,
	EKoratTutorialMode_MAX                   = 4,
};

// Enum SS.EKoratTermsMode
// NumValues: 0x0006
enum class EKoratTermsMode : uint8
{
	None                                     = 0,
	Service                                  = 1,
	Policy                                   = 2,
	Data                                     = 3,
	Num                                      = 4,
	EKoratTermsMode_MAX                      = 5,
};

// Enum SS.EKoratDramaticCutCharacterType
// NumValues: 0x0014
enum class EKoratDramaticCutCharacterType : uint8
{
	Ally1                                    = 0,
	Ally2                                    = 1,
	Ally3                                    = 2,
	Ally4                                    = 3,
	Ally5                                    = 4,
	Enemy1                                   = 5,
	Enemy2                                   = 6,
	Enemy3                                   = 7,
	Enemy4                                   = 8,
	Enemy5                                   = 9,
	Guest1                                   = 10,
	Guest2                                   = 11,
	Guest3                                   = 12,
	Guest4                                   = 13,
	Guest5                                   = 14,
	Guest6                                   = 15,
	Guest7                                   = 16,
	Guest8                                   = 17,
	Num                                      = 18,
	EKoratDramaticCutCharacterType_MAX       = 19,
};

// Enum SS.EKoratDramaticEditTutorialMode
// NumValues: 0x0005
enum class EKoratDramaticEditTutorialMode : uint8
{
	None                                     = 0,
	TestPlayed                               = 1,
	Finished                                 = 2,
	Num                                      = 3,
	EKoratDramaticEditTutorialMode_MAX       = 4,
};

// Enum SS.EMainMenuListButtonBehaviour
// NumValues: 0x0007
enum class EMainMenuListButtonBehaviour : uint8
{
	None                                     = 0,
	OpenNextList                             = 1,
	LevelTransition                          = 2,
	LevelTransitionWithDialog                = 3,
	OpenWidget                               = 4,
	QuickMatch                               = 5,
	Max                                      = 6,
};

// Enum SS.EMainMenuListButtonQuickMatchType
// NumValues: 0x0004
enum class EMainMenuListButtonQuickMatchType : uint8
{
	Single                                   = 0,
	DP                                       = 1,
	Team                                     = 2,
	EMainMenuListButtonQuickMatchType_MAX    = 3,
};

// Enum SS.EMainMenuListPropertySettingsType
// NumValues: 0x000C
enum class EMainMenuListPropertySettingsType : uint8
{
	None                                     = 0,
	MatchRule                                = 1,
	Ping                                     = 2,
	Rank                                     = 3,
	TeamRule                                 = 4,
	Time                                     = 5,
	CompletionRate                           = 6,
	Language                                 = 7,
	BuffItem                                 = 8,
	Participants                             = 9,
	PrivateSlot                              = 10,
	Max                                      = 11,
};

// Enum SS.EMainMenuListMenuMode
// NumValues: 0x0003
enum class EMainMenuListMenuMode : uint8
{
	Normal                                   = 0,
	WishComeTrue                             = 1,
	EMainMenuListMenuMode_MAX                = 2,
};

// Enum SS.EMainMenuSettingsMode
// NumValues: 0x0004
enum class EMainMenuSettingsMode : uint8
{
	MatchingCondition                        = 0,
	RoomSearch                               = 1,
	RoomCreate                               = 2,
	EMainMenuSettingsMode_MAX                = 3,
};

// Enum SS.EMainMenuButtonBadgeCondition
// NumValues: 0x000A
enum class EMainMenuButtonBadgeCondition : uint8
{
	None                                     = 0,
	AnyUnrewardedMission                     = 1,
	UnrewardedWishMissions                   = 2,
	UnrewardedLifeLongMission                = 3,
	UnrewardedTutorialMission                = 4,
	UnrewardedMode02Mission                  = 5,
	UnrewardedMode03Mission                  = 6,
	UnRewardedTrophyMission                  = 7,
	NewProductInShop                         = 8,
	EMainMenuButtonBadgeCondition_MAX        = 9,
};

// Enum SS.EMainMenuOnlineCheckMode
// NumValues: 0x0005
enum class EMainMenuOnlineCheckMode : uint8
{
	None                                     = 0,
	SeverLoginOnly                           = 4,
	MatchingEnableOnly                       = 8,
	CheckMaintenanceRankMatch                = 16,
	EMainMenuOnlineCheckMode_MAX             = 17,
};

// Enum SS.EMainMenuSceneArea
// NumValues: 0x0008
enum class EMainMenuSceneArea : uint8
{
	None                                     = 0,
	Area00                                   = 1,
	Area01                                   = 2,
	Area02                                   = 3,
	Area03                                   = 4,
	Area04                                   = 5,
	Area05                                   = 6,
	Max                                      = 7,
};

// Enum SS.EMapAreaEditType
// NumValues: 0x000A
enum class EMapAreaEditType : uint8
{
	None                                     = 0,
	DirectableArea                           = 1,
	AirDirectableArea                        = 2,
	NearByWallArea                           = 3,
	WallDirectableArea                       = 4,
	WaterDirectableArea                      = 5,
	SmallDirectableArea                      = 6,
	SafeAreaBox                              = 7,
	SafeAreaCylinder                         = 8,
	EMapAreaEditType_MAX                     = 9,
};

// Enum SS.EAreaEditorUndoActionType
// NumValues: 0x0004
enum class EAreaEditorUndoActionType : uint8
{
	RemoveArea                               = 0,
	FitGround                                = 1,
	None                                     = 2,
	EAreaEditorUndoActionType_MAX            = 3,
};

// Enum SS.EMapAreaSizeType
// NumValues: 0x0005
enum class EMapAreaSizeType : uint8
{
	NORMAL                                   = 0,
	LARGE_GROUND                             = 1,
	LARGE_AIR                                = 2,
	SMALL                                    = 3,
	EMapAreaSizeType_MAX                     = 4,
};

// Enum SS.EMatchingCondPropValueType
// NumValues: 0x0003
enum class EMatchingCondPropValueType : uint8
{
	Numeric                                  = 0,
	String                                   = 1,
	EMatchingCondPropValueType_MAX           = 2,
};

// Enum SS.EMCPDynamicPropertyListType
// NumValues: 0x0004
enum class EMCPDynamicPropertyListType : uint8
{
	None                                     = 0,
	TournamentSearchList                     = 1,
	TournamentCreateList                     = 2,
	EMCPDynamicPropertyListType_MAX          = 3,
};

// Enum SS.EKoratWidgetShowHideAnimPattern
// NumValues: 0x0004
enum class EKoratWidgetShowHideAnimPattern : uint8
{
	Default                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Max                                      = 3,
};

// Enum SS.EAnimPlayStatus
// NumValues: 0x000C
enum class EAnimPlayStatus : uint8
{
	None                                     = 0,
	InputWait                                = 1,
	DetailShow                               = 2,
	StampAnim                                = 3,
	CardInfo                                 = 4,
	DetailWait                               = 5,
	DetailHide                               = 6,
	StampContinue                            = 7,
	DialogWiat                               = 8,
	BalkStampDialogWiat                      = 9,
	DialogFinish                             = 10,
	EAnimPlayStatus_MAX                      = 11,
};

// Enum SS.EMode02MissionState
// NumValues: 0x0005
enum class EMode02MissionState : uint8
{
	Normal                                   = 0,
	Relese                                   = 1,
	ReSelect                                 = 2,
	AnimFinish                               = 3,
	EMode02MissionState_MAX                  = 4,
};

// Enum SS.ESSMissionClassification
// NumValues: 0x0003
enum class ESSMissionClassification : uint8
{
	Battle                                   = 0,
	Collect                                  = 1,
	ESSMissionClassification_MAX             = 2,
};

// Enum SS.ESSMissionType
// NumValues: 0x0061
enum class ESSMissionType : uint8
{
	None                                     = 0,
	AdventureClereRate                       = 1,
	BattleNum                                = 2,
	TargetItemGetNum                         = 3,
	CharaUseNum                              = 4,
	CharaDefeatNum                           = 5,
	SpecifiedCharaBattleNum                  = 6,
	OffLineBattleNum                         = 7,
	OnLineBattleNum                          = 8,
	OffLineCharaUseNum                       = 9,
	OnLineCharaUseNum                        = 10,
	ComCharaDefeatNum                        = 11,
	CharaUseWinNum                           = 12,
	StageBattleNum                           = 13,
	LoginNum                                 = 14,
	PlayingTime                              = 15,
	ComboNum                                 = 16,
	NoDamageWinNum                           = 17,
	ChargeNumInBattle                        = 18,
	GuardNumInBattle                         = 19,
	BlastNumInBattle                         = 20,
	UltimateNumInBattle                      = 21,
	ThrowNumInBattle                         = 22,
	GalleryPlayerCardEditNum                 = 23,
	CharaDragonStoryClearNum                 = 24,
	BattleTrainingPlayNum                    = 25,
	DramaticExtraBattleClearNum              = 26,
	DramatiEditNum                           = 27,
	CharaGroupUseNum                         = 28,
	SeriesTitleCharaUseNum                   = 29,
	SpeciesUseNum                            = 30,
	CharaAttributeCategoryUseNum             = 31,
	BrastGroupUseNum                         = 32,
	ZCounterNumInBattle                      = 33,
	RevengeCounterNumInBattle                = 34,
	SuperCounterNumInBattle                  = 35,
	SkillNumInBattle                         = 36,
	SparkingNumInBattle                      = 37,
	SparkingConboNum                         = 38,
	ChangeNumInBattle                        = 39,
	EmoteNumInBattle                         = 40,
	DragonDashMovingDistance                 = 41,
	SpeardImpactNum                          = 42,
	CrashImpactNum                           = 43,
	PowerImpactNum                           = 44,
	BrastImpactNum                           = 45,
	SpectatorEvacuationNum                   = 46,
	DisintegrationNum                        = 47,
	SumDamageInOneBattle                     = 48,
	SpecialFateNum                           = 49,
	DramaticFinishNum                        = 50,
	RingOutWinNum                            = 51,
	TimeUpWinNum                             = 52,
	WinNum                                   = 53,
	WinningStreak                            = 54,
	CharaCustomizeNum                        = 55,
	MythicalOrbNum                           = 56,
	PrayANum                                 = 57,
	PrayBNum                                 = 58,
	PrayCNum                                 = 59,
	PlayerRank                               = 60,
	SingleBattleRank                         = 61,
	DPBattleRank                             = 62,
	MoneyAcquisition                         = 63,
	MoneyConsumption                         = 64,
	PowerUpItemNum                           = 65,
	CharaItemNum                             = 66,
	CharaUnlock                              = 67,
	TitleNum                                 = 68,
	CharaProficiencyRank                     = 69,
	AdventureIFRouteClear                    = 70,
	AdventureIFClearNum                      = 71,
	WorldLibPostBattleNum                    = 72,
	WorldLibSendGoodNum                      = 73,
	WorldLibRecvGoodNum                      = 74,
	WorldLibFavoriteNum                      = 75,
	WorldLibFavoritedNum                     = 76,
	WorldLibPlayNum                          = 77,
	WorldLibPlayedNum                        = 78,
	WorldLibEventPlayNum                     = 79,
	WorldLibOfficialPlayNum                  = 80,
	WorldLibReplayPostNum                    = 81,
	WorldLibReplayPlaybackNum                = 82,
	WorldLibCopyBattleNum                    = 83,
	WorldLibMasterAchieved                   = 84,
	WorldLibFirstClearPlayer                 = 85,
	CharacterActionHitNum                    = 86,
	CharacterWallActionHitNum                = 87,
	CharacActionTargetCharaHitNum            = 88,
	CharacThrowTargetCharaNum                = 89,
	SpecialFateCharactersNum                 = 90,
	CharacterDramaticFinishNum               = 91,
	TournamentVictoryNum                     = 92,
	TrophyAllUnlock                          = 93,
	TournamentOnlineVictoryNum               = 94,
	TournamentOnlineCharaVictoryNum          = 95,
	ESSMissionType_MAX                       = 96,
};

// Enum SS.ESSMissionReleaseTyming
// NumValues: 0x0004
enum class ESSMissionReleaseTyming : uint8
{
	None                                     = 0,
	AfterTutorial                            = 1,
	AfterCharacterUnlock                     = 2,
	ESSMissionReleaseTyming_MAX              = 3,
};

// Enum SS.EKoratMissionSelectAnimStatus
// NumValues: 0x0005
enum class EKoratMissionSelectAnimStatus : uint8
{
	None                                     = 0,
	AnimStart                                = 1,
	AnimPlaying                              = 2,
	AnimFinish                               = 3,
	EKoratMissionSelectAnimStatus_MAX        = 4,
};

// Enum SS.ESSMissionTabSideButonState
// NumValues: 0x0004
enum class ESSMissionTabSideButonState : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	ESSMissionTabSideButonState_MAX          = 3,
};

// Enum SS.ESSMovieResolution
// NumValues: 0x0004
enum class ESSMovieResolution : uint8
{
	High                                     = 0,
	Midium                                   = 1,
	Low                                      = 2,
	ESSMovieResolution_MAX                   = 3,
};

// Enum SS.ESSMovieAttributeType
// NumValues: 0x0003
enum class ESSMovieAttributeType : uint8
{
	Gallery                                  = 0,
	Num                                      = 1,
	ESSMovieAttributeType_MAX                = 2,
};

// Enum SS.EKoratNetworkTestCommand
// NumValues: 0x0006
enum class EKoratNetworkTestCommand : uint8
{
	None                                     = 0,
	OnlineEnable                             = 1,
	MatchingEnable                           = 2,
	GetPlayerRankingTop                      = 3,
	GetPlayerRankingMine                     = 4,
	EKoratNetworkTestCommand_MAX             = 5,
};

// Enum SS.EAdjustOrder
// NumValues: 0x0003
enum class EAdjustOrder : uint8
{
	LookAtTargetToCamera                     = 0,
	CameraToLookAtTarget                     = 1,
	MAX                                      = 2,
};

// Enum SS.ENotificationType
// NumValues: 0x0007
enum class ENotificationType : uint8
{
	None                                     = 0,
	Information                              = 1,
	Mission                                  = 2,
	Reward                                   = 3,
	Event                                    = 4,
	Shop                                     = 5,
	Max                                      = 6,
};

// Enum SS.ENotificationTiming
// NumValues: 0x0006
enum class ENotificationTiming : uint8
{
	None                                     = 0,
	Immediate                                = 1,
	MainMenu                                 = 2,
	WaitForOrder                             = 4,
	All                                      = 255,
	ENotificationTiming_MAX                  = 256,
};

// Enum SS.ENotificationMode
// NumValues: 0x0003
enum class ENotificationMode : uint8
{
	Normal                                   = 0,
	Critical                                 = 1,
	ENotificationMode_MAX                    = 2,
};

// Enum SS.ENotifyTextTranslationMode
// NumValues: 0x000C
enum class ENotifyTextTranslationMode : uint8
{
	None                                     = 0,
	TextTable                                = 1,
	NumericInt                               = 2,
	NumericFloat                             = 3,
	TextWithInt                              = 4,
	TextWithFloat                            = 5,
	TextNest                                 = 6,
	MissionId                                = 7,
	SimpleText                               = 8,
	CharacterId                              = 9,
	CharacterItemId                          = 10,
	ENotifyTextTranslationMode_MAX           = 11,
};

// Enum SS.ESSBattleMode010Difficulty
// NumValues: 0x0006
enum class ESSBattleMode010Difficulty : uint8
{
	None                                     = 0,
	Easy                                     = 1,
	Normal                                   = 2,
	Hard                                     = 3,
	VeryHard                                 = 4,
	ESSBattleMode010Difficulty_MAX           = 5,
};

// Enum SS.ESSPlayerCardUIType
// NumValues: 0x000E
enum class ESSPlayerCardUIType : uint8
{
	PlayerCard                               = 0,
	EditMenu                                 = 1,
	CharaList                                = 2,
	CommonList                               = 3,
	BGMList                                  = 4,
	TitleBase                                = 5,
	IconTitleList                            = 6,
	TextTitleList                            = 7,
	BackGround                               = 8,
	BGList                                   = 9,
	FollowRivalList                          = 10,
	SortFilterDialog                         = 11,
	Num                                      = 12,
	ESSPlayerCardUIType_MAX                  = 13,
};

// Enum SS.ESSPlayerCardMinorItemType
// NumValues: 0x0015
enum class ESSPlayerCardMinorItemType : uint8
{
	BattleMode012_TeamingCount               = 0,
	BattleMode012_QualifyCount               = 1,
	BattleMode012_FinalCount                 = 2,
	BattleMode012_FinalWinCount              = 3,
	BattleMode010_DefeatCount                = 4,
	Tournament_PlayCount                     = 5,
	Tournament_WinCount                      = 6,
	Tournament_MaxWinCount                   = 7,
	Tournament_MaxRankValue                  = 8,
	Tournament_TopCharaCount                 = 9,
	Tournament_TopCharaName                  = 10,
	RankMatch_WinRate                        = 11,
	RankMatch_PlayCount                      = 12,
	RankMatch_WinCount                       = 13,
	Drama_PostCount                          = 14,
	Drama_PostReplayCount                    = 15,
	Drama_FollowerCount                      = 16,
	Drama_FavoriteCount                      = 17,
	Drama_LikeCount                          = 18,
	Num                                      = 19,
	ESSPlayerCardMinorItemType_MAX           = 20,
};

// Enum SS.ESSPlayerCardMajorItemType
// NumValues: 0x0007
enum class ESSPlayerCardMajorItemType : uint8
{
	BattleMode012                            = 0,
	BattleMode010                            = 1,
	Tournament                               = 2,
	RankMatch                                = 3,
	Drama                                    = 4,
	Num                                      = 5,
	ESSPlayerCardMajorItemType_MAX           = 6,
};

// Enum SS.EPlayerBlockState
// NumValues: 0x0006
enum class EPlayerBlockState : uint8
{
	Unblocked                                = 0,
	BlockedByMe                              = 1,
	BlockedByPeer                            = 2,
	Restricted                               = 4,
	BlockedOtherReason                       = 8,
	EPlayerBlockState_MAX                    = 9,
};

// Enum SS.ESSFollowType
// NumValues: 0x0004
enum class ESSFollowType : uint8
{
	None                                     = 0,
	Follow                                   = 1,
	Rival                                    = 2,
	ESSFollowType_MAX                        = 3,
};

// Enum SS.ESSPowerGaugeResult
// NumValues: 0x0004
enum class ESSPowerGaugeResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	ESSPowerGaugeResult_MAX                  = 3,
};

// Enum SS.ESSPowerImpactLevelSequenceType
// NumValues: 0x0006
enum class ESSPowerImpactLevelSequenceType : uint8
{
	KSequencePrepare                         = 0,
	KSequenceCompeteLV1                      = 1,
	KSequenceCompeteLV2                      = 2,
	KSequenceCompeteLV3                      = 3,
	KSequenceEnd                             = 4,
	ESSPowerImpactLevelSequenceType_MAX      = 5,
};

// Enum SS.ESSReplayDataUIBattleMode
// NumValues: 0x000F
enum class ESSReplayDataUIBattleMode : uint8
{
	None                                     = 0,
	OnlineRankMatch                          = 1,
	OnlineCasualMatch                        = 2,
	Offline1PvsCom                           = 3,
	OfflineComvsCom                          = 4,
	OfflineTenkaichiBudokai                  = 5,
	OnlineTenkaichiBudokai                   = 6,
	DramaticBattle                           = 7,
	BattleMode010                            = 8,
	BattleMode012                            = 9,
	Offline1Pvs2P                            = 10,
	OfflineComvs1P                           = 11,
	OfflineBattle                            = 12,
	OnlineBattle                             = 13,
	ESSReplayDataUIBattleMode_MAX            = 14,
};

// Enum SS.ESSReplayDataUWinLose
// NumValues: 0x0005
enum class ESSReplayDataUWinLose : uint8
{
	None                                     = 0,
	Win1P                                    = 1,
	Lose1P                                   = 2,
	Draw                                     = 3,
	ESSReplayDataUWinLose_MAX                = 4,
};

// Enum SS.ESSReplayDataUISortCondition
// NumValues: 0x0004
enum class ESSReplayDataUISortCondition : uint8
{
	None                                     = 0,
	SaveDate                                 = 1,
	BattleMode                               = 2,
	ESSReplayDataUISortCondition_MAX         = 3,
};

// Enum SS.ESSReplayUIPlayState
// NumValues: 0x0005
enum class ESSReplayUIPlayState : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Playing                                  = 2,
	Pausing                                  = 3,
	ESSReplayUIPlayState_MAX                 = 4,
};

// Enum SS.ESSReplayUICamera
// NumValues: 0x0005
enum class ESSReplayUICamera : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Oponent                                  = 2,
	Spectator                                = 3,
	ESSReplayUICamera_MAX                    = 4,
};

// Enum SS.EKortaRewardType
// NumValues: 0x000F
enum class EKortaRewardType : uint8
{
	None                                     = 0,
	RankPoint                                = 1,
	Money                                    = 2,
	RewardPoint                              = 3,
	ZItem                                    = 4,
	TextTitle                                = 5,
	IconTitle                                = 6,
	Character                                = 7,
	MythicalOrb                              = 8,
	MiracleOrb                               = 9,
	EditPartsImage                           = 10,
	EditPartsText                            = 11,
	ZItemFrame                               = 12,
	EmoteFrame                               = 13,
	EKortaRewardType_MAX                     = 14,
};

// Enum SS.ESSShopBaseItemTagTextType
// NumValues: 0x0004
enum class ESSShopBaseItemTagTextType : uint8
{
	None                                     = 0,
	CharaName                                = 1,
	UnlockContentsNum                        = 2,
	ESSShopBaseItemTagTextType_MAX           = 3,
};

// Enum SS.ESSShopFloorUIFormat
// NumValues: 0x0003
enum class ESSShopFloorUIFormat : uint8
{
	SmallSize                                = 0,
	LargeSize                                = 1,
	ESSShopFloorUIFormat_MAX                 = 2,
};

// Enum SS.ESSSoundGroupType
// NumValues: 0x000A
enum class ESSSoundGroupType : uint8
{
	UI                                       = 0,
	SEBattle                                 = 1,
	BGM                                      = 2,
	Voice                                    = 3,
	EventVoice                               = 4,
	SEEvent                                  = 5,
	SEMap                                    = 6,
	SoundGroupTypeNum                        = 7,
	None                                     = 7,
	ESSSoundGroupType_MAX                    = 8,
};

// Enum SS.ESSCharacterVoiceLanguage
// NumValues: 0x0003
enum class ESSCharacterVoiceLanguage : uint8
{
	Japanese                                 = 0,
	English                                  = 1,
	ESSCharacterVoiceLanguage_MAX            = 2,
};

// Enum SS.ESSAnimeSongsModeWhenStartBroadCast
// NumValues: 0x0004
enum class ESSAnimeSongsModeWhenStartBroadCast : uint8
{
	PlayAlterNativeBGM                       = 0,
	StopBGM                                  = 1,
	MuteBGM                                  = 2,
	ESSAnimeSongsModeWhenStartBroadCast_MAX  = 3,
};

// Enum SS.EPlaySoundFromCameraMode
// NumValues: 0x0003
enum class EPlaySoundFromCameraMode : uint8
{
	FirstPerson                              = 0,
	Performance                              = 1,
	MAX                                      = 2,
};

// Enum SS.ESSSpeedImpactTimingUiJudge
// NumValues: 0x0005
enum class ESSSpeedImpactTimingUiJudge : uint8
{
	Just                                     = 0,
	Ok                                       = 1,
	Miss                                     = 2,
	None                                     = 3,
	ESSSpeedImpactTimingUiJudge_MAX          = 4,
};

// Enum SS.ESSStaffRollPartsType
// NumValues: 0x0007
enum class ESSStaffRollPartsType : uint8
{
	Name                                     = 0,
	VoiceActor                               = 1,
	Image                                    = 2,
	Post                                     = 3,
	SubPost                                  = 4,
	CompanyName                              = 5,
	ESSStaffRollPartsType_MAX                = 6,
};

// Enum SS.EStageSelectPageType
// NumValues: 0x0005
enum class EStageSelectPageType : uint8
{
	Stage                                    = 0,
	Bgm                                      = 1,
	Rule                                     = 2,
	Invalid                                  = 3,
	EStageSelectPageType_MAX                 = 4,
};

// Enum SS.EBattlePracticeAcceptedInputsType
// NumValues: 0x0044
enum class EBattlePracticeAcceptedInputsType : uint8
{
	None                                     = 0,
	NormalMove                               = 1,
	Step                                     = 2,
	ShortDash                                = 3,
	Jump                                     = 4,
	MoveUp                                   = 5,
	MoveDown                                 = 6,
	RushAttack                               = 7,
	RushInAttack                             = 8,
	SmashAttack                              = 9,
	Guard                                    = 10,
	GuardUp                                  = 11,
	GuardDown                                = 12,
	Throw                                    = 13,
	Charge                                   = 14,
	RushKidan                                = 15,
	SmashKidan                               = 16,
	Repel                                    = 17,
	RevengeCounter                           = 18,
	ThrowEscape                              = 19,
	Skill                                    = 20,
	Blast                                    = 21,
	UltimateBlast                            = 22,
	Change                                   = 23,
	Transform                                = 24,
	DragonDash                               = 25,
	ZBurstDash                               = 26,
	Soar                                     = 27,
	Swoop                                    = 28,
	SmashPassive                             = 29,
	WallPassive                              = 30,
	DragonDashPassive                        = 31,
	MoveStandup                              = 32,
	RushFLK                                  = 33,
	RushSCN                                  = 34,
	RushHFN                                  = 35,
	RushRHNR                                 = 36,
	RushLFN                                  = 37,
	RushGSN                                  = 38,
	PowerSmash                               = 39,
	JustSmash                                = 40,
	FullPowerSmash                           = 41,
	VanishingAssault                         = 42,
	DragonDashAttack                         = 43,
	DragonHoming                             = 44,
	DragonSmash                              = 45,
	BurstSmash                               = 46,
	VanishingAttack                          = 47,
	LightningAttack                          = 48,
	ChaseChange                              = 49,
	Ascertain                                = 50,
	SuperAscertain                           = 51,
	SuperCounter                             = 52,
	ZCounter                                 = 53,
	SparkingRush                             = 54,
	HyperSmash                               = 55,
	HighSpeedMove                            = 56,
	SuperHighSpeedMove                       = 57,
	BlastCombo                               = 58,
	SparkingCombo                            = 59,
	StepInSway                               = 60,
	BurstMeteor                              = 61,
	DashAttack                               = 62,
	DashRising                               = 63,
	DashBlow                                 = 64,
	DownThrow                                = 65,
	FastAvoidance                            = 66,
	EBattlePracticeAcceptedInputsType_MAX    = 67,
};

// Enum SS.EBattlePracticeJudgmentType
// NumValues: 0x0008
enum class EBattlePracticeJudgmentType : uint8
{
	None                                     = 0,
	ActionPlayed                             = 1,
	AttackHits                               = 2,
	GuardCrash                               = 3,
	ActionMove                               = 4,
	ActionAvoid                              = 5,
	SectionChanged                           = 6,
	EBattlePracticeJudgmentType_MAX          = 7,
};

// Enum SS.EKoratTeamCharacterIndex
// NumValues: 0x0006
enum class EKoratTeamCharacterIndex : uint8
{
	Slot0                                    = 0,
	Slot1                                    = 1,
	Slot2                                    = 2,
	Slot3                                    = 3,
	Slot4                                    = 4,
	EKoratTeamCharacterIndex_MAX             = 5,
};

// Enum SS.ESSTimeLineUiTrackColorType
// NumValues: 0x000F
enum class ESSTimeLineUiTrackColorType : uint8
{
	None                                     = 0,
	Subtitle                                 = 1,
	Camera                                   = 2,
	Bgm                                      = 3,
	Character1                               = 4,
	Character2                               = 5,
	Character3                               = 6,
	Character4                               = 7,
	Character5                               = 8,
	Character6                               = 9,
	Character7                               = 10,
	Character8                               = 11,
	Character9                               = 12,
	Character10                              = 13,
	MAX                                      = 14,
};

// Enum SS.EKoratHealthRecoveryMode
// NumValues: 0x0004
enum class EKoratHealthRecoveryMode : uint8
{
	None                                     = 0,
	SpecifiedParcentage                      = 1,
	Full                                     = 2,
	EKoratHealthRecoveryMode_MAX             = 3,
};

// Enum SS.ETournamentZItemCustomizeType
// NumValues: 0x0004
enum class ETournamentZItemCustomizeType : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	Random                                   = 2,
	ETournamentZItemCustomizeType_MAX        = 3,
};

// Enum SS.ETournamentTimeLimit
// NumValues: 0x0004
enum class ETournamentTimeLimit : uint8
{
	Time180                                  = 0,
	Time360                                  = 1,
	Time600                                  = 2,
	ETournamentTimeLimit_MAX                 = 3,
};

// Enum SS.ETournamentVoiceEventId
// NumValues: 0x0008
enum class ETournamentVoiceEventId : uint8
{
	EntryTop                                 = 0,
	DecidedTournament                        = 1,
	Round1Versus                             = 2,
	Round2Versus                             = 3,
	Round3Versus                             = 4,
	Round4Versus                             = 5,
	Victory                                  = 6,
	ETournamentVoiceEventId_MAX              = 7,
};

// Enum SS.ETournamentEntryAnimType
// NumValues: 0x0008
enum class ETournamentEntryAnimType : uint8
{
	EntryAnim_000                            = 0,
	EntryAnim_001                            = 1,
	EntryAnim_002                            = 2,
	EntryAnim_003                            = 3,
	EntryAnim_004                            = 4,
	EntryAnim_005                            = 5,
	EntryAnim_006                            = 6,
	EntryAnim_MAX                            = 7,
};

// Enum SS.ESSTrainingBattleUiType
// NumValues: 0x0004
enum class ESSTrainingBattleUiType : uint8
{
	TrainingTreinSet                         = 0,
	TrainingTreinSetR                        = 1,
	Num                                      = 2,
	ESSTrainingBattleUiType_MAX              = 3,
};

// Enum SS.ESSTrainingBattleUiCharaActionType
// NumValues: 0x0004
enum class ESSTrainingBattleUiCharaActionType : uint8
{
	Entry                                    = 0,
	Wait                                     = 1,
	Decide                                   = 2,
	ESSTrainingBattleUiCharaActionType_MAX   = 3,
};

// Enum SS.ETansitionLevelSequenceType
// NumValues: 0x000E
enum class ETansitionLevelSequenceType : uint8
{
	None                                     = 0,
	AdvIf                                    = 1,
	AdvIfChart                               = 2,
	MMUAdv                                   = 3,
	MMUDRB                                   = 4,
	MMUPRA                                   = 5,
	MMUTRA                                   = 6,
	DRMOPN                                   = 7,
	BTLDRE                                   = 8,
	DREDRB                                   = 9,
	PTHEVT                                   = 10,
	OPMOVIE                                  = 11,
	TitleMain                                = 12,
	ETansitionLevelSequenceType_MAX          = 13,
};

// Enum SS.ESSTutorialBattleUiType
// NumValues: 0x0003
enum class ESSTutorialBattleUiType : uint8
{
	TutorialUiAll                            = 0,
	Num                                      = 1,
	ESSTutorialBattleUiType_MAX              = 2,
};

// Enum SS.EWishCategory
// NumValues: 0x000C
enum class EWishCategory : uint8
{
	None                                     = 0,
	Wish000                                  = 1,
	Wish001                                  = 2,
	Wish002                                  = 3,
	Wish003                                  = 4,
	Wish004                                  = 5,
	Wish005                                  = 6,
	Wish006                                  = 7,
	Wish007                                  = 8,
	Wish008                                  = 9,
	Wish009                                  = 10,
	EWishCategory_MAX                        = 11,
};

// Enum SS.EDragonType
// NumValues: 0x0005
enum class EDragonType : uint8
{
	None                                     = 0,
	SH000                                    = 1,
	SH001                                    = 2,
	SH002                                    = 3,
	Max                                      = 4,
};

// ScriptStruct SS.KoratCharacterDataDragonDashMovementParameter
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterDataDragonDashMovementParameter final
{
public:
	bool                                          bIsUseParameter;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClearVelocityAtStart;                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveHoldTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationTimeToMaxSpeed;                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AccelerationCurve;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataDragonDashMovementParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataDragonDashMovementParameter");
static_assert(sizeof(FKoratCharacterDataDragonDashMovementParameter) == 0x000020, "Wrong size on FKoratCharacterDataDragonDashMovementParameter");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, bIsUseParameter) == 0x000000, "Member 'FKoratCharacterDataDragonDashMovementParameter::bIsUseParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, bIsClearVelocityAtStart) == 0x000001, "Member 'FKoratCharacterDataDragonDashMovementParameter::bIsClearVelocityAtStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, MaxSpeed) == 0x000004, "Member 'FKoratCharacterDataDragonDashMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, AddMoveHoldTime) == 0x000008, "Member 'FKoratCharacterDataDragonDashMovementParameter::AddMoveHoldTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, MaxAcceleration) == 0x00000C, "Member 'FKoratCharacterDataDragonDashMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratCharacterDataDragonDashMovementParameter::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, AccelerationTimeToMaxSpeed) == 0x000014, "Member 'FKoratCharacterDataDragonDashMovementParameter::AccelerationTimeToMaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashMovementParameter, AccelerationCurve) == 0x000018, "Member 'FKoratCharacterDataDragonDashMovementParameter::AccelerationCurve' has a wrong offset!");

// ScriptStruct SS.KoratRewardItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratRewardItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRewardItemDataList) == 0x000004, "Wrong alignment on FKoratRewardItemDataList");
static_assert(sizeof(FKoratRewardItemDataList) == 0x000008, "Wrong size on FKoratRewardItemDataList");
static_assert(offsetof(FKoratRewardItemDataList, Key) == 0x000000, "Member 'FKoratRewardItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratUnitBuffInfo
// 0x0198 (0x0198 - 0x0000)
struct alignas(0x08) FKoratUnitBuffInfo final
{
public:
	uint8                                         Pad_0[0x198];                                      // 0x0000(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratUnitBuffInfo) == 0x000008, "Wrong alignment on FKoratUnitBuffInfo");
static_assert(sizeof(FKoratUnitBuffInfo) == 0x000198, "Wrong size on FKoratUnitBuffInfo");

// ScriptStruct SS.BGMChrModeParam
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FBGMChrModeParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBGMChrModeParam) == 0x000004, "Wrong alignment on FBGMChrModeParam");
static_assert(sizeof(FBGMChrModeParam) == 0x00001C, "Wrong size on FBGMChrModeParam");

// ScriptStruct SS.KoratDramaticBattleCutEditorUIWindowSelectItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorUIWindowSelectItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorUIWindowSelectItemDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorUIWindowSelectItemDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorUIWindowSelectItemDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorUIWindowSelectItemDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorUIWindowSelectItemDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorUIWindowSelectItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataList) == 0x000004, "Wrong alignment on FKoratCharacterDataList");
static_assert(sizeof(FKoratCharacterDataList) == 0x000008, "Wrong size on FKoratCharacterDataList");
static_assert(offsetof(FKoratCharacterDataList, Key) == 0x000000, "Member 'FKoratCharacterDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratPlayerStartDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPlayerStartDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPlayerStartDataList) == 0x000004, "Wrong alignment on FKoratPlayerStartDataList");
static_assert(sizeof(FKoratPlayerStartDataList) == 0x000008, "Wrong size on FKoratPlayerStartDataList");
static_assert(offsetof(FKoratPlayerStartDataList, Key) == 0x000000, "Member 'FKoratPlayerStartDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSTrainingBattleUiCharacterInfo
// 0x0060 (0x0060 - 0x0000)
struct FSSTrainingBattleUiCharacterInfo final
{
public:
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              StartData;                                         // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESSTrainingBattleUiCharaActionType, TSoftObjectPtr<class ULevelSequence>> Actions;                                           // 0x0010(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTrainingBattleUiCharacterInfo) == 0x000008, "Wrong alignment on FSSTrainingBattleUiCharacterInfo");
static_assert(sizeof(FSSTrainingBattleUiCharacterInfo) == 0x000060, "Wrong size on FSSTrainingBattleUiCharacterInfo");
static_assert(offsetof(FSSTrainingBattleUiCharacterInfo, CharacterDataList) == 0x000000, "Member 'FSSTrainingBattleUiCharacterInfo::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleUiCharacterInfo, StartData) == 0x000008, "Member 'FSSTrainingBattleUiCharacterInfo::StartData' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleUiCharacterInfo, Actions) == 0x000010, "Member 'FSSTrainingBattleUiCharacterInfo::Actions' has a wrong offset!");

// ScriptStruct SS.KoratSearchData
// 0x0010 (0x0010 - 0x0000)
struct FKoratSearchData final
{
public:
	TArray<TSoftObjectPtr<class ULevelSequence>>  LevelSequenceArray;                                // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSearchData) == 0x000008, "Wrong alignment on FKoratSearchData");
static_assert(sizeof(FKoratSearchData) == 0x000010, "Wrong size on FKoratSearchData");
static_assert(offsetof(FKoratSearchData, LevelSequenceArray) == 0x000000, "Member 'FKoratSearchData::LevelSequenceArray' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCostumeIdData
// 0x0028 (0x0028 - 0x0000)
struct FKoratCharacterCostumeIdData final
{
public:
	class FString                                 CharacterID;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CostumeId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterIdEnabled;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterCostumeIdData) == 0x000008, "Wrong alignment on FKoratCharacterCostumeIdData");
static_assert(sizeof(FKoratCharacterCostumeIdData) == 0x000028, "Wrong size on FKoratCharacterCostumeIdData");
static_assert(offsetof(FKoratCharacterCostumeIdData, CharacterID) == 0x000000, "Member 'FKoratCharacterCostumeIdData::CharacterID' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCostumeIdData, CostumeId) == 0x000010, "Member 'FKoratCharacterCostumeIdData::CostumeId' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCostumeIdData, bCharacterIdEnabled) == 0x000020, "Member 'FKoratCharacterCostumeIdData::bCharacterIdEnabled' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCostumeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterCostumeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCostumeDataList) == 0x000004, "Wrong alignment on FKoratCharacterCostumeDataList");
static_assert(sizeof(FKoratCharacterCostumeDataList) == 0x000008, "Wrong size on FKoratCharacterCostumeDataList");
static_assert(offsetof(FKoratCharacterCostumeDataList, Key) == 0x000000, "Member 'FKoratCharacterCostumeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCharacterSettingData
// 0x0010 (0x0010 - 0x0000)
struct FSSCharacterSettingData final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSettingData) == 0x000004, "Wrong alignment on FSSCharacterSettingData");
static_assert(sizeof(FSSCharacterSettingData) == 0x000010, "Wrong size on FSSCharacterSettingData");
static_assert(offsetof(FSSCharacterSettingData, Character) == 0x000000, "Member 'FSSCharacterSettingData::Character' has a wrong offset!");
static_assert(offsetof(FSSCharacterSettingData, Costume) == 0x000008, "Member 'FSSCharacterSettingData::Costume' has a wrong offset!");

// ScriptStruct SS.KoratReplaceAnimationDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratReplaceAnimationDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratReplaceAnimationDataList) == 0x000004, "Wrong alignment on FKoratReplaceAnimationDataList");
static_assert(sizeof(FKoratReplaceAnimationDataList) == 0x000008, "Wrong size on FKoratReplaceAnimationDataList");
static_assert(offsetof(FKoratReplaceAnimationDataList, Key) == 0x000000, "Member 'FKoratReplaceAnimationDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBattlePracticePlayerInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSSBattlePracticePlayerInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattlePracticePlayerInfo) == 0x000008, "Wrong alignment on FSSBattlePracticePlayerInfo");
static_assert(sizeof(FSSBattlePracticePlayerInfo) == 0x000028, "Wrong size on FSSBattlePracticePlayerInfo");

// ScriptStruct SS.SSActionCameraParameterData
// 0x00C8 (0x00C8 - 0x0000)
struct FSSActionCameraParameterData final
{
public:
	bool                                          Disconnect;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationStartWaitTime;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationCam;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationLat;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterpolationCurveNameCam;                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterpolationCurveNameLat;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENewBattleCameraType                          BattleCameraType;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraZoomType                               ZoomLevel;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETypeOfTeleportToPassToBattleCamera           TeleportType;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AddWarpOffsetPos;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddWarpOffsetRot;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AddWarpOffsetRotCenterPos;                         // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpLagReset;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlendCancel;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ASSNotifyActionCameraTargetActor> TargetActor;                                       // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassiveAcceptStartTime;                            // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassiveAcceptEndTime;                              // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSActionCameraParameterData) == 0x000008, "Wrong alignment on FSSActionCameraParameterData");
static_assert(sizeof(FSSActionCameraParameterData) == 0x0000C8, "Wrong size on FSSActionCameraParameterData");
static_assert(offsetof(FSSActionCameraParameterData, Disconnect) == 0x000000, "Member 'FSSActionCameraParameterData::Disconnect' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, InterpolationStartWaitTime) == 0x000004, "Member 'FSSActionCameraParameterData::InterpolationStartWaitTime' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, InterpolationCam) == 0x000008, "Member 'FSSActionCameraParameterData::InterpolationCam' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, InterpolationLat) == 0x00000C, "Member 'FSSActionCameraParameterData::InterpolationLat' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, InterpolationCurveNameCam) == 0x000010, "Member 'FSSActionCameraParameterData::InterpolationCurveNameCam' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, InterpolationCurveNameLat) == 0x000020, "Member 'FSSActionCameraParameterData::InterpolationCurveNameLat' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, BattleCameraType) == 0x000030, "Member 'FSSActionCameraParameterData::BattleCameraType' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, ZoomLevel) == 0x000031, "Member 'FSSActionCameraParameterData::ZoomLevel' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, TeleportType) == 0x000032, "Member 'FSSActionCameraParameterData::TeleportType' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, AddWarpOffsetPos) == 0x000038, "Member 'FSSActionCameraParameterData::AddWarpOffsetPos' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, AddWarpOffsetRot) == 0x000050, "Member 'FSSActionCameraParameterData::AddWarpOffsetRot' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, AddWarpOffsetRotCenterPos) == 0x000068, "Member 'FSSActionCameraParameterData::AddWarpOffsetRotCenterPos' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, bWarpLagReset) == 0x000080, "Member 'FSSActionCameraParameterData::bWarpLagReset' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, Timeout) == 0x000084, "Member 'FSSActionCameraParameterData::Timeout' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, BlendCancel) == 0x000088, "Member 'FSSActionCameraParameterData::BlendCancel' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, TargetActor) == 0x000090, "Member 'FSSActionCameraParameterData::TargetActor' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, PassiveAcceptStartTime) == 0x0000C0, "Member 'FSSActionCameraParameterData::PassiveAcceptStartTime' has a wrong offset!");
static_assert(offsetof(FSSActionCameraParameterData, PassiveAcceptEndTime) == 0x0000C4, "Member 'FSSActionCameraParameterData::PassiveAcceptEndTime' has a wrong offset!");

// ScriptStruct SS.SSUnLockDetail
// 0x0002 (0x0002 - 0x0000)
struct FSSUnLockDetail final
{
public:
	bool                                          bGamePlayUnLock;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDLCUnLock;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSUnLockDetail) == 0x000001, "Wrong alignment on FSSUnLockDetail");
static_assert(sizeof(FSSUnLockDetail) == 0x000002, "Wrong size on FSSUnLockDetail");
static_assert(offsetof(FSSUnLockDetail, bGamePlayUnLock) == 0x000000, "Member 'FSSUnLockDetail::bGamePlayUnLock' has a wrong offset!");
static_assert(offsetof(FSSUnLockDetail, bDLCUnLock) == 0x000001, "Member 'FSSUnLockDetail::bDLCUnLock' has a wrong offset!");

// ScriptStruct SS.SSMapSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSMapSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMapSaveData) == 0x000001, "Wrong alignment on FSSMapSaveData");
static_assert(sizeof(FSSMapSaveData) == 0x000003, "Wrong size on FSSMapSaveData");
static_assert(offsetof(FSSMapSaveData, UnLockMode) == 0x000000, "Member 'FSSMapSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSMapSaveData, UnLockDetail) == 0x000001, "Member 'FSSMapSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.KoratBattleRetryCharaData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FKoratBattleRetryCharaData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleRetryCharaData) == 0x000008, "Wrong alignment on FKoratBattleRetryCharaData");
static_assert(sizeof(FKoratBattleRetryCharaData) == 0x000050, "Wrong size on FKoratBattleRetryCharaData");

// ScriptStruct SS.KoratCharacterPointLightData
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterPointLightData final
{
public:
	struct FLinearColor                           LightColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterPointLightData) == 0x000004, "Wrong alignment on FKoratCharacterPointLightData");
static_assert(sizeof(FKoratCharacterPointLightData) == 0x000020, "Wrong size on FKoratCharacterPointLightData");
static_assert(offsetof(FKoratCharacterPointLightData, LightColor) == 0x000000, "Member 'FKoratCharacterPointLightData::LightColor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterPointLightData, ShadowColor) == 0x000010, "Member 'FKoratCharacterPointLightData::ShadowColor' has a wrong offset!");

// ScriptStruct SS.KoratDestructionAttackParameter
// 0x0040 (0x0040 - 0x0000)
struct FKoratDestructionAttackParameter final
{
public:
	EKoratDestructionAttackParameterType          AttackParameterType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDestructionDamageLevel                  DamageLevel;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AFieldSystemActor>          MasterField;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereVolume;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldDelay;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotOffset;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UKoratInteractKnockDataAsset*           InteractData;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionAttackParameter) == 0x000008, "Wrong alignment on FKoratDestructionAttackParameter");
static_assert(sizeof(FKoratDestructionAttackParameter) == 0x000040, "Wrong size on FKoratDestructionAttackParameter");
static_assert(offsetof(FKoratDestructionAttackParameter, AttackParameterType) == 0x000000, "Member 'FKoratDestructionAttackParameter::AttackParameterType' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, DamageLevel) == 0x000001, "Member 'FKoratDestructionAttackParameter::DamageLevel' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, MasterField) == 0x000008, "Member 'FKoratDestructionAttackParameter::MasterField' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, SphereVolume) == 0x000010, "Member 'FKoratDestructionAttackParameter::SphereVolume' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, FieldDelay) == 0x000014, "Member 'FKoratDestructionAttackParameter::FieldDelay' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, RotOffset) == 0x000020, "Member 'FKoratDestructionAttackParameter::RotOffset' has a wrong offset!");
static_assert(offsetof(FKoratDestructionAttackParameter, InteractData) == 0x000038, "Member 'FKoratDestructionAttackParameter::InteractData' has a wrong offset!");

// ScriptStruct SS.SSCharacterEnergyBulletExplosionEffect
// 0x00D0 (0x00D0 - 0x0000)
struct FSSCharacterEnergyBulletExplosionEffect final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightValid;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLight;                                        // 0x0034(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ExplosionRadius;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameter       DestructionParameter;                              // 0x0058(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDrownOutable;                                   // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          DrownOutLevelSequence;                             // 0x00A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterEnergyBulletExplosionEffect) == 0x000008, "Wrong alignment on FSSCharacterEnergyBulletExplosionEffect");
static_assert(sizeof(FSSCharacterEnergyBulletExplosionEffect) == 0x0000D0, "Wrong size on FSSCharacterEnergyBulletExplosionEffect");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, LevelSequence) == 0x000000, "Member 'FSSCharacterEnergyBulletExplosionEffect::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, bIsPointLightValid) == 0x000030, "Member 'FSSCharacterEnergyBulletExplosionEffect::bIsPointLightValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, PointLight) == 0x000034, "Member 'FSSCharacterEnergyBulletExplosionEffect::PointLight' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, ExplosionRadius) == 0x000054, "Member 'FSSCharacterEnergyBulletExplosionEffect::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, DestructionParameter) == 0x000058, "Member 'FSSCharacterEnergyBulletExplosionEffect::DestructionParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, bIsDrownOutable) == 0x000098, "Member 'FSSCharacterEnergyBulletExplosionEffect::bIsDrownOutable' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletExplosionEffect, DrownOutLevelSequence) == 0x0000A0, "Member 'FSSCharacterEnergyBulletExplosionEffect::DrownOutLevelSequence' has a wrong offset!");

// ScriptStruct SS.SSCharacterEnergyBulletGroupExplosion
// 0x0110 (0x0110 - 0x0000)
struct FSSCharacterEnergyBulletGroupExplosion final
{
public:
	struct FSSCharacterEnergyBulletExplosionEffect GroupExplosion;                                    // 0x0000(0x00D0)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGroupExplosionState;                  // 0x00D0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupExplosionConditionCount;                      // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupExplosionGroup;                               // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterEnergyBulletGroupExplosion) == 0x000008, "Wrong alignment on FSSCharacterEnergyBulletGroupExplosion");
static_assert(sizeof(FSSCharacterEnergyBulletGroupExplosion) == 0x000110, "Wrong size on FSSCharacterEnergyBulletGroupExplosion");
static_assert(offsetof(FSSCharacterEnergyBulletGroupExplosion, GroupExplosion) == 0x000000, "Member 'FSSCharacterEnergyBulletGroupExplosion::GroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletGroupExplosion, LevelSequenceGroupExplosionState) == 0x0000D0, "Member 'FSSCharacterEnergyBulletGroupExplosion::LevelSequenceGroupExplosionState' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletGroupExplosion, GroupExplosionConditionCount) == 0x000100, "Member 'FSSCharacterEnergyBulletGroupExplosion::GroupExplosionConditionCount' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletGroupExplosion, GroupExplosionGroup) == 0x000104, "Member 'FSSCharacterEnergyBulletGroupExplosion::GroupExplosionGroup' has a wrong offset!");

// ScriptStruct SS.KoratDestructionDamageResult
// 0x0001 (0x0001 - 0x0000)
struct FKoratDestructionDamageResult final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDestructionDamageResult) == 0x000001, "Wrong alignment on FKoratDestructionDamageResult");
static_assert(sizeof(FKoratDestructionDamageResult) == 0x000001, "Wrong size on FKoratDestructionDamageResult");

// ScriptStruct SS.KoratCharacterItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterItemDataList) == 0x000004, "Wrong alignment on FKoratCharacterItemDataList");
static_assert(sizeof(FKoratCharacterItemDataList) == 0x000008, "Wrong size on FKoratCharacterItemDataList");
static_assert(offsetof(FKoratCharacterItemDataList, Key) == 0x000000, "Member 'FKoratCharacterItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSpawnCharacterCompileDescription
// 0x0050 (0x0050 - 0x0000)
struct FSSEventSceneSpawnCharacterCompileDescription final
{
public:
	struct FKoratCharacterDataList                Identifier;                                        // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x0008(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    Items;                                             // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClassPtr;                                          // 0x0020(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSpawnCharacterCompileDescription) == 0x000008, "Wrong alignment on FSSEventSceneSpawnCharacterCompileDescription");
static_assert(sizeof(FSSEventSceneSpawnCharacterCompileDescription) == 0x000050, "Wrong size on FSSEventSceneSpawnCharacterCompileDescription");
static_assert(offsetof(FSSEventSceneSpawnCharacterCompileDescription, Identifier) == 0x000000, "Member 'FSSEventSceneSpawnCharacterCompileDescription::Identifier' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSpawnCharacterCompileDescription, Costume) == 0x000008, "Member 'FSSEventSceneSpawnCharacterCompileDescription::Costume' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSpawnCharacterCompileDescription, Items) == 0x000010, "Member 'FSSEventSceneSpawnCharacterCompileDescription::Items' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSpawnCharacterCompileDescription, ClassPtr) == 0x000020, "Member 'FSSEventSceneSpawnCharacterCompileDescription::ClassPtr' has a wrong offset!");

// ScriptStruct SS.KoratReplaceTransitionActionData
// 0x0008 (0x0008 - 0x0000)
struct FKoratReplaceTransitionActionData final
{
public:
	struct FKoratReplaceAnimationDataList         ReplaceAnimation;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratReplaceTransitionActionData) == 0x000004, "Wrong alignment on FKoratReplaceTransitionActionData");
static_assert(sizeof(FKoratReplaceTransitionActionData) == 0x000008, "Wrong size on FKoratReplaceTransitionActionData");
static_assert(offsetof(FKoratReplaceTransitionActionData, ReplaceAnimation) == 0x000000, "Member 'FKoratReplaceTransitionActionData::ReplaceAnimation' has a wrong offset!");

// ScriptStruct SS.KoratSequencerBindingObjectRecord
// 0x0098 (0x0098 - 0x0000)
struct FKoratSequencerBindingObjectRecord final
{
public:
	class FString                                 RegexPatternName;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SearchTagKey;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SearchClass;                                       // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnableConvertTarget;                           // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BlueprintClass;                                    // 0x0050(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCharacter;                                      // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequencerBindingObjectRecord) == 0x000008, "Wrong alignment on FKoratSequencerBindingObjectRecord");
static_assert(sizeof(FKoratSequencerBindingObjectRecord) == 0x000098, "Wrong size on FKoratSequencerBindingObjectRecord");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, RegexPatternName) == 0x000000, "Member 'FKoratSequencerBindingObjectRecord::RegexPatternName' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, SearchTagKey) == 0x000010, "Member 'FKoratSequencerBindingObjectRecord::SearchTagKey' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, SearchClass) == 0x000018, "Member 'FKoratSequencerBindingObjectRecord::SearchClass' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, bSpawnableConvertTarget) == 0x000048, "Member 'FKoratSequencerBindingObjectRecord::bSpawnableConvertTarget' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, BlueprintClass) == 0x000050, "Member 'FKoratSequencerBindingObjectRecord::BlueprintClass' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, ActorName) == 0x000080, "Member 'FKoratSequencerBindingObjectRecord::ActorName' has a wrong offset!");
static_assert(offsetof(FKoratSequencerBindingObjectRecord, bIsCharacter) == 0x000090, "Member 'FKoratSequencerBindingObjectRecord::bIsCharacter' has a wrong offset!");

// ScriptStruct SS.SSBulletRatSpawnActorManagerParameterWithInit
// 0x0038 (0x0038 - 0x0000)
struct FSSBulletRatSpawnActorManagerParameterWithInit final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceXYCount;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocation;                                      // 0x0008(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevSpawnLocation;                                 // 0x0020(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletRatSpawnActorManagerParameterWithInit) == 0x000008, "Wrong alignment on FSSBulletRatSpawnActorManagerParameterWithInit");
static_assert(sizeof(FSSBulletRatSpawnActorManagerParameterWithInit) == 0x000038, "Wrong size on FSSBulletRatSpawnActorManagerParameterWithInit");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterWithInit, Distance) == 0x000000, "Member 'FSSBulletRatSpawnActorManagerParameterWithInit::Distance' has a wrong offset!");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterWithInit, DistanceXYCount) == 0x000004, "Member 'FSSBulletRatSpawnActorManagerParameterWithInit::DistanceXYCount' has a wrong offset!");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterWithInit, PrevLocation) == 0x000008, "Member 'FSSBulletRatSpawnActorManagerParameterWithInit::PrevLocation' has a wrong offset!");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterWithInit, PrevSpawnLocation) == 0x000020, "Member 'FSSBulletRatSpawnActorManagerParameterWithInit::PrevSpawnLocation' has a wrong offset!");

// ScriptStruct SS.SSBulletRatSpawnActorManagerParameterResident
// 0x0008 (0x0008 - 0x0000)
struct FSSBulletRatSpawnActorManagerParameterResident final
{
public:
	int32                                         SpawnNum;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExistNum;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletRatSpawnActorManagerParameterResident) == 0x000004, "Wrong alignment on FSSBulletRatSpawnActorManagerParameterResident");
static_assert(sizeof(FSSBulletRatSpawnActorManagerParameterResident) == 0x000008, "Wrong size on FSSBulletRatSpawnActorManagerParameterResident");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterResident, SpawnNum) == 0x000000, "Member 'FSSBulletRatSpawnActorManagerParameterResident::SpawnNum' has a wrong offset!");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameterResident, ExistNum) == 0x000004, "Member 'FSSBulletRatSpawnActorManagerParameterResident::ExistNum' has a wrong offset!");

// ScriptStruct SS.SSBulletRatSpawnActorManagerParameter
// 0x0040 (0x0040 - 0x0000)
struct FSSBulletRatSpawnActorManagerParameter final
{
public:
	struct FSSBulletRatSpawnActorManagerParameterWithInit WithInit;                                          // 0x0000(0x0038)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSBulletRatSpawnActorManagerParameterResident Resident;                                          // 0x0038(0x0008)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletRatSpawnActorManagerParameter) == 0x000008, "Wrong alignment on FSSBulletRatSpawnActorManagerParameter");
static_assert(sizeof(FSSBulletRatSpawnActorManagerParameter) == 0x000040, "Wrong size on FSSBulletRatSpawnActorManagerParameter");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameter, WithInit) == 0x000000, "Member 'FSSBulletRatSpawnActorManagerParameter::WithInit' has a wrong offset!");
static_assert(offsetof(FSSBulletRatSpawnActorManagerParameter, Resident) == 0x000038, "Member 'FSSBulletRatSpawnActorManagerParameter::Resident' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbDataAssetRecord
// 0x0038 (0x0038 - 0x0000)
struct FKoratEffectAtbDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotUseDefaultAsset;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectAtbDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectAtbDataAssetRecord");
static_assert(sizeof(FKoratEffectAtbDataAssetRecord) == 0x000038, "Wrong size on FKoratEffectAtbDataAssetRecord");
static_assert(offsetof(FKoratEffectAtbDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectAtbDataAssetRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectAtbDataAssetRecord, bNotUseDefaultAsset) == 0x000030, "Member 'FKoratEffectAtbDataAssetRecord::bNotUseDefaultAsset' has a wrong offset!");

// ScriptStruct SS.KoratDestructionLandedParameter
// 0x0018 (0x0018 - 0x0000)
struct FKoratDestructionLandedParameter final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionLandedParameter) == 0x000008, "Wrong alignment on FKoratDestructionLandedParameter");
static_assert(sizeof(FKoratDestructionLandedParameter) == 0x000018, "Wrong size on FKoratDestructionLandedParameter");
static_assert(offsetof(FKoratDestructionLandedParameter, Direction) == 0x000000, "Member 'FKoratDestructionLandedParameter::Direction' has a wrong offset!");

// ScriptStruct SS.KoratActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratActionDataList) == 0x000004, "Wrong alignment on FKoratActionDataList");
static_assert(sizeof(FKoratActionDataList) == 0x000008, "Wrong size on FKoratActionDataList");
static_assert(offsetof(FKoratActionDataList, Key) == 0x000000, "Member 'FKoratActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratAuraLevelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAuraLevelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAuraLevelDataList) == 0x000004, "Wrong alignment on FKoratAuraLevelDataList");
static_assert(sizeof(FKoratAuraLevelDataList) == 0x000008, "Wrong size on FKoratAuraLevelDataList");
static_assert(offsetof(FKoratAuraLevelDataList, Key) == 0x000000, "Member 'FKoratAuraLevelDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSAuraAssignDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSAuraAssignDataAssetRecord final
{
public:
	struct FKoratActionDataList                   ActionKey;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAuraLevelDataList                AuraLevelKey;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAuraAssignDataAssetRecord) == 0x000004, "Wrong alignment on FSSAuraAssignDataAssetRecord");
static_assert(sizeof(FSSAuraAssignDataAssetRecord) == 0x000010, "Wrong size on FSSAuraAssignDataAssetRecord");
static_assert(offsetof(FSSAuraAssignDataAssetRecord, ActionKey) == 0x000000, "Member 'FSSAuraAssignDataAssetRecord::ActionKey' has a wrong offset!");
static_assert(offsetof(FSSAuraAssignDataAssetRecord, AuraLevelKey) == 0x000008, "Member 'FSSAuraAssignDataAssetRecord::AuraLevelKey' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFCharacter
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FSSDragonAdventureIFCharacter final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  ActionSequencer;                                   // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  CameraSequencer;                                   // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFCharacter) == 0x000010, "Wrong alignment on FSSDragonAdventureIFCharacter");
static_assert(sizeof(FSSDragonAdventureIFCharacter) == 0x000090, "Wrong size on FSSDragonAdventureIFCharacter");
static_assert(offsetof(FSSDragonAdventureIFCharacter, ActionSequencer) == 0x000078, "Member 'FSSDragonAdventureIFCharacter::ActionSequencer' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacter, CameraSequencer) == 0x000080, "Member 'FSSDragonAdventureIFCharacter::CameraSequencer' has a wrong offset!");

// ScriptStruct SS.KoratInverseKinematicsFootTraceLine
// 0x0008 (0x0008 - 0x0000)
struct FKoratInverseKinematicsFootTraceLine final
{
public:
	float                                         Upper;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lower;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInverseKinematicsFootTraceLine) == 0x000004, "Wrong alignment on FKoratInverseKinematicsFootTraceLine");
static_assert(sizeof(FKoratInverseKinematicsFootTraceLine) == 0x000008, "Wrong size on FKoratInverseKinematicsFootTraceLine");
static_assert(offsetof(FKoratInverseKinematicsFootTraceLine, Upper) == 0x000000, "Member 'FKoratInverseKinematicsFootTraceLine::Upper' has a wrong offset!");
static_assert(offsetof(FKoratInverseKinematicsFootTraceLine, Lower) == 0x000004, "Member 'FKoratInverseKinematicsFootTraceLine::Lower' has a wrong offset!");

// ScriptStruct SS.SSPowerImpactEffectSequenceRecord
// 0x00F0 (0x00F0 - 0x0000)
struct FSSPowerImpactEffectSequenceRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Prepare;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Level1;                                            // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Level2;                                            // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Level3;                                            // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          END;                                               // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPowerImpactEffectSequenceRecord) == 0x000008, "Wrong alignment on FSSPowerImpactEffectSequenceRecord");
static_assert(sizeof(FSSPowerImpactEffectSequenceRecord) == 0x0000F0, "Wrong size on FSSPowerImpactEffectSequenceRecord");
static_assert(offsetof(FSSPowerImpactEffectSequenceRecord, Prepare) == 0x000000, "Member 'FSSPowerImpactEffectSequenceRecord::Prepare' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectSequenceRecord, Level1) == 0x000030, "Member 'FSSPowerImpactEffectSequenceRecord::Level1' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectSequenceRecord, Level2) == 0x000060, "Member 'FSSPowerImpactEffectSequenceRecord::Level2' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectSequenceRecord, Level3) == 0x000090, "Member 'FSSPowerImpactEffectSequenceRecord::Level3' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectSequenceRecord, END) == 0x0000C0, "Member 'FSSPowerImpactEffectSequenceRecord::END' has a wrong offset!");

// ScriptStruct SS.SSPowerImpactEffectRecord
// 0x03C0 (0x03C0 - 0x0000)
struct FSSPowerImpactEffectRecord final
{
public:
	struct FSSPowerImpactEffectSequenceRecord     NvsN;                                              // 0x0000(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSPowerImpactEffectSequenceRecord     GvsN;                                              // 0x00F0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSPowerImpactEffectSequenceRecord     NvsG;                                              // 0x01E0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSPowerImpactEffectSequenceRecord     GvsG;                                              // 0x02D0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPowerImpactEffectRecord) == 0x000008, "Wrong alignment on FSSPowerImpactEffectRecord");
static_assert(sizeof(FSSPowerImpactEffectRecord) == 0x0003C0, "Wrong size on FSSPowerImpactEffectRecord");
static_assert(offsetof(FSSPowerImpactEffectRecord, NvsN) == 0x000000, "Member 'FSSPowerImpactEffectRecord::NvsN' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectRecord, GvsN) == 0x0000F0, "Member 'FSSPowerImpactEffectRecord::GvsN' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectRecord, NvsG) == 0x0001E0, "Member 'FSSPowerImpactEffectRecord::NvsG' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactEffectRecord, GvsG) == 0x0002D0, "Member 'FSSPowerImpactEffectRecord::GvsG' has a wrong offset!");

// ScriptStruct SS.KoratDestructionFieldParameter
// 0x00B0 (0x00B0 - 0x0000)
struct FKoratDestructionFieldParameter final
{
public:
	struct FKoratDestructionAttackParameter       Parameter;                                         // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       Bounds;                                            // 0x0070(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EKoratDestructionEffectType                   DestructionEffectType;                             // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDestructionSEType                       DestructionSEType;                                 // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDestructionFieldParameter) == 0x000008, "Wrong alignment on FKoratDestructionFieldParameter");
static_assert(sizeof(FKoratDestructionFieldParameter) == 0x0000B0, "Wrong size on FKoratDestructionFieldParameter");
static_assert(offsetof(FKoratDestructionFieldParameter, Parameter) == 0x000000, "Member 'FKoratDestructionFieldParameter::Parameter' has a wrong offset!");
static_assert(offsetof(FKoratDestructionFieldParameter, Location) == 0x000040, "Member 'FKoratDestructionFieldParameter::Location' has a wrong offset!");
static_assert(offsetof(FKoratDestructionFieldParameter, Direction) == 0x000058, "Member 'FKoratDestructionFieldParameter::Direction' has a wrong offset!");
static_assert(offsetof(FKoratDestructionFieldParameter, Bounds) == 0x000070, "Member 'FKoratDestructionFieldParameter::Bounds' has a wrong offset!");
static_assert(offsetof(FKoratDestructionFieldParameter, DestructionEffectType) == 0x0000A8, "Member 'FKoratDestructionFieldParameter::DestructionEffectType' has a wrong offset!");
static_assert(offsetof(FKoratDestructionFieldParameter, DestructionSEType) == 0x0000A9, "Member 'FKoratDestructionFieldParameter::DestructionSEType' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingOneShotDeadlyInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FKoratBattleDirectingOneShotDeadlyInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingOneShotDeadlyInfo) == 0x000004, "Wrong alignment on FKoratBattleDirectingOneShotDeadlyInfo");
static_assert(sizeof(FKoratBattleDirectingOneShotDeadlyInfo) == 0x000030, "Wrong size on FKoratBattleDirectingOneShotDeadlyInfo");

// ScriptStruct SS.SSOptionLanguageVisibleFlags
// 0x0004 (0x0004 - 0x0000)
struct FSSOptionLanguageVisibleFlags final
{
public:
	bool                                          bLocalizationText;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalizationVoice;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackgroundEvent;                                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackgroundMenu;                                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionLanguageVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionLanguageVisibleFlags");
static_assert(sizeof(FSSOptionLanguageVisibleFlags) == 0x000004, "Wrong size on FSSOptionLanguageVisibleFlags");
static_assert(offsetof(FSSOptionLanguageVisibleFlags, bLocalizationText) == 0x000000, "Member 'FSSOptionLanguageVisibleFlags::bLocalizationText' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageVisibleFlags, bLocalizationVoice) == 0x000001, "Member 'FSSOptionLanguageVisibleFlags::bLocalizationVoice' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageVisibleFlags, bBackgroundEvent) == 0x000002, "Member 'FSSOptionLanguageVisibleFlags::bBackgroundEvent' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageVisibleFlags, bBackgroundMenu) == 0x000003, "Member 'FSSOptionLanguageVisibleFlags::bBackgroundMenu' has a wrong offset!");

// ScriptStruct SS.KoratAuraAssignDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratAuraAssignDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAuraAssignDataAssetRecord) == 0x000001, "Wrong alignment on FKoratAuraAssignDataAssetRecord");
static_assert(sizeof(FKoratAuraAssignDataAssetRecord) == 0x000001, "Wrong size on FKoratAuraAssignDataAssetRecord");

// ScriptStruct SS.SSAiAddEmotionParam
// 0x000C (0x000C - 0x0000)
struct FSSAiAddEmotionParam final
{
public:
	EAiEmotionType                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiAddEmotionParam) == 0x000004, "Wrong alignment on FSSAiAddEmotionParam");
static_assert(sizeof(FSSAiAddEmotionParam) == 0x00000C, "Wrong size on FSSAiAddEmotionParam");
static_assert(offsetof(FSSAiAddEmotionParam, Type) == 0x000000, "Member 'FSSAiAddEmotionParam::Type' has a wrong offset!");
static_assert(offsetof(FSSAiAddEmotionParam, Value) == 0x000004, "Member 'FSSAiAddEmotionParam::Value' has a wrong offset!");

// ScriptStruct SS.SSAiCommonEmotionParam
// 0x0010 (0x0010 - 0x0000)
struct FSSAiCommonEmotionParam
{
public:
	ESSAiEmotionTargetType                        TargetType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSAiAddEmotionParam                   AddParam;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiCommonEmotionParam) == 0x000004, "Wrong alignment on FSSAiCommonEmotionParam");
static_assert(sizeof(FSSAiCommonEmotionParam) == 0x000010, "Wrong size on FSSAiCommonEmotionParam");
static_assert(offsetof(FSSAiCommonEmotionParam, TargetType) == 0x000000, "Member 'FSSAiCommonEmotionParam::TargetType' has a wrong offset!");
static_assert(offsetof(FSSAiCommonEmotionParam, AddParam) == 0x000004, "Member 'FSSAiCommonEmotionParam::AddParam' has a wrong offset!");

// ScriptStruct SS.SSBattleDirectingStatus
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSSBattleDirectingStatus final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleDirectingStatus) == 0x000008, "Wrong alignment on FSSBattleDirectingStatus");
static_assert(sizeof(FSSBattleDirectingStatus) == 0x000028, "Wrong size on FSSBattleDirectingStatus");

// ScriptStruct SS.SSOptionControlVisibleFlags
// 0x000D (0x000D - 0x0000)
struct FSSOptionControlVisibleFlags final
{
public:
	bool                                          bCameraLRReverse;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraLRSpeed;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraUDReverse;                                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraUDSpeed;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVibration;                                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdaptivetrigger;                                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOperationType;                                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIconType;                                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlStyle;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPanelControlType;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraControlType;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpactInputType;                                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraType;                                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionControlVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionControlVisibleFlags");
static_assert(sizeof(FSSOptionControlVisibleFlags) == 0x00000D, "Wrong size on FSSOptionControlVisibleFlags");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraLRReverse) == 0x000000, "Member 'FSSOptionControlVisibleFlags::bCameraLRReverse' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraLRSpeed) == 0x000001, "Member 'FSSOptionControlVisibleFlags::bCameraLRSpeed' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraUDReverse) == 0x000002, "Member 'FSSOptionControlVisibleFlags::bCameraUDReverse' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraUDSpeed) == 0x000003, "Member 'FSSOptionControlVisibleFlags::bCameraUDSpeed' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bVibration) == 0x000004, "Member 'FSSOptionControlVisibleFlags::bVibration' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bAdaptivetrigger) == 0x000005, "Member 'FSSOptionControlVisibleFlags::bAdaptivetrigger' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bOperationType) == 0x000006, "Member 'FSSOptionControlVisibleFlags::bOperationType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bIconType) == 0x000007, "Member 'FSSOptionControlVisibleFlags::bIconType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bControlStyle) == 0x000008, "Member 'FSSOptionControlVisibleFlags::bControlStyle' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bPanelControlType) == 0x000009, "Member 'FSSOptionControlVisibleFlags::bPanelControlType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraControlType) == 0x00000A, "Member 'FSSOptionControlVisibleFlags::bCameraControlType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bImpactInputType) == 0x00000B, "Member 'FSSOptionControlVisibleFlags::bImpactInputType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlVisibleFlags, bCameraType) == 0x00000C, "Member 'FSSOptionControlVisibleFlags::bCameraType' has a wrong offset!");

// ScriptStruct SS.KoratHitEffectAfterHitStop
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratHitEffectAfterHitStop final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightValid;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightColor;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitEffectAfterHitStop) == 0x000010, "Wrong alignment on FKoratHitEffectAfterHitStop");
static_assert(sizeof(FKoratHitEffectAfterHitStop) == 0x0000A0, "Wrong size on FKoratHitEffectAfterHitStop");
static_assert(offsetof(FKoratHitEffectAfterHitStop, Actor) == 0x000000, "Member 'FKoratHitEffectAfterHitStop::Actor' has a wrong offset!");
static_assert(offsetof(FKoratHitEffectAfterHitStop, LevelSequence) == 0x000008, "Member 'FKoratHitEffectAfterHitStop::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratHitEffectAfterHitStop, bIsPointLightValid) == 0x000010, "Member 'FKoratHitEffectAfterHitStop::bIsPointLightValid' has a wrong offset!");
static_assert(offsetof(FKoratHitEffectAfterHitStop, LightColor) == 0x000014, "Member 'FKoratHitEffectAfterHitStop::LightColor' has a wrong offset!");
static_assert(offsetof(FKoratHitEffectAfterHitStop, ShadowColor) == 0x000024, "Member 'FKoratHitEffectAfterHitStop::ShadowColor' has a wrong offset!");
static_assert(offsetof(FKoratHitEffectAfterHitStop, Transform) == 0x000040, "Member 'FKoratHitEffectAfterHitStop::Transform' has a wrong offset!");

// ScriptStruct SS.KoratBuffId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FKoratBuffId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBuffId) == 0x000004, "Wrong alignment on FKoratBuffId");
static_assert(sizeof(FKoratBuffId) == 0x000004, "Wrong size on FKoratBuffId");

// ScriptStruct SS.KoratAiTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAiTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAiTypeDataList) == 0x000004, "Wrong alignment on FKoratAiTypeDataList");
static_assert(sizeof(FKoratAiTypeDataList) == 0x000008, "Wrong size on FKoratAiTypeDataList");
static_assert(offsetof(FKoratAiTypeDataList, Key) == 0x000000, "Member 'FKoratAiTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleCpuData
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleCpuData final
{
public:
	struct FKoratAiTypeDataList                   CpuThinkingType;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleCpuData) == 0x000004, "Wrong alignment on FKoratBattleCpuData");
static_assert(sizeof(FKoratBattleCpuData) == 0x000008, "Wrong size on FKoratBattleCpuData");
static_assert(offsetof(FKoratBattleCpuData, CpuThinkingType) == 0x000000, "Member 'FKoratBattleCpuData::CpuThinkingType' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleWLibHelpDialogData
// 0x0048 (0x0048 - 0x0000)
struct FSSDramaticBattleWLibHelpDialogData final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleWLibHelpDialogData) == 0x000008, "Wrong alignment on FSSDramaticBattleWLibHelpDialogData");
static_assert(sizeof(FSSDramaticBattleWLibHelpDialogData) == 0x000048, "Wrong size on FSSDramaticBattleWLibHelpDialogData");
static_assert(offsetof(FSSDramaticBattleWLibHelpDialogData, Description) == 0x000000, "Member 'FSSDramaticBattleWLibHelpDialogData::Description' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleWLibHelpDialogData, Texture) == 0x000018, "Member 'FSSDramaticBattleWLibHelpDialogData::Texture' has a wrong offset!");

// ScriptStruct SS.SSSingletonAssetKeyData
// 0x0020 (0x0020 - 0x0000)
struct FSSSingletonAssetKeyData final
{
public:
	class FString                                 RecordMapKey;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetNames;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSingletonAssetKeyData) == 0x000008, "Wrong alignment on FSSSingletonAssetKeyData");
static_assert(sizeof(FSSSingletonAssetKeyData) == 0x000020, "Wrong size on FSSSingletonAssetKeyData");
static_assert(offsetof(FSSSingletonAssetKeyData, RecordMapKey) == 0x000000, "Member 'FSSSingletonAssetKeyData::RecordMapKey' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetKeyData, AssetNames) == 0x000010, "Member 'FSSSingletonAssetKeyData::AssetNames' has a wrong offset!");

// ScriptStruct SS.SSSingletonAssetIndexMember
// 0x0098 (0x0098 - 0x0000)
struct FSSSingletonAssetIndexMember final
{
public:
	class FString                                 NameCPP;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              MetaDataMap;                                       // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	int32                                         Kind;                                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSSingletonAssetKeyData>       Records;                                           // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OuterRecord;                                       // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetNames;                                        // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSingletonAssetIndexMember) == 0x000008, "Wrong alignment on FSSSingletonAssetIndexMember");
static_assert(sizeof(FSSSingletonAssetIndexMember) == 0x000098, "Wrong size on FSSSingletonAssetIndexMember");
static_assert(offsetof(FSSSingletonAssetIndexMember, NameCPP) == 0x000000, "Member 'FSSSingletonAssetIndexMember::NameCPP' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetIndexMember, MetaDataMap) == 0x000010, "Member 'FSSSingletonAssetIndexMember::MetaDataMap' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetIndexMember, Kind) == 0x000060, "Member 'FSSSingletonAssetIndexMember::Kind' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetIndexMember, Records) == 0x000068, "Member 'FSSSingletonAssetIndexMember::Records' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetIndexMember, OuterRecord) == 0x000078, "Member 'FSSSingletonAssetIndexMember::OuterRecord' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetIndexMember, AssetNames) == 0x000088, "Member 'FSSSingletonAssetIndexMember::AssetNames' has a wrong offset!");

// ScriptStruct SS.KoratBlastSkillTypeDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBlastSkillTypeDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlastSkillTypeDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBlastSkillTypeDataAssetRecord");
static_assert(sizeof(FKoratBlastSkillTypeDataAssetRecord) == 0x000001, "Wrong size on FKoratBlastSkillTypeDataAssetRecord");

// ScriptStruct SS.ToonLighting
// 0x0001 (0x0001 - 0x0000)
struct FToonLighting final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToonLighting) == 0x000001, "Wrong alignment on FToonLighting");
static_assert(sizeof(FToonLighting) == 0x000001, "Wrong size on FToonLighting");

// ScriptStruct SS.KoratBGMDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBGMDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBGMDataList) == 0x000004, "Wrong alignment on FKoratBGMDataList");
static_assert(sizeof(FKoratBGMDataList) == 0x000008, "Wrong size on FKoratBGMDataList");
static_assert(offsetof(FKoratBGMDataList, Key) == 0x000000, "Member 'FKoratBGMDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratHitStopDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratHitStopDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitStopDataList) == 0x000004, "Wrong alignment on FKoratHitStopDataList");
static_assert(sizeof(FKoratHitStopDataList) == 0x000008, "Wrong size on FKoratHitStopDataList");
static_assert(offsetof(FKoratHitStopDataList, Key) == 0x000000, "Member 'FKoratHitStopDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSIconTitleSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSIconTitleSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSIconTitleSaveData) == 0x000001, "Wrong alignment on FSSIconTitleSaveData");
static_assert(sizeof(FSSIconTitleSaveData) == 0x000003, "Wrong size on FSSIconTitleSaveData");
static_assert(offsetof(FSSIconTitleSaveData, UnLockMode) == 0x000000, "Member 'FSSIconTitleSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSIconTitleSaveData, UnLockDetail) == 0x000001, "Member 'FSSIconTitleSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.KoratTrainingSetting
// 0x0040 (0x0040 - 0x0000)
struct FKoratTrainingSetting final
{
public:
	TArray<int32>                                 GejiButtonSet;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DisplayButtonSet;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ComButtonSet;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharacterData1P;                                   // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharacterData2P;                                   // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTrainingSetting) == 0x000008, "Wrong alignment on FKoratTrainingSetting");
static_assert(sizeof(FKoratTrainingSetting) == 0x000040, "Wrong size on FKoratTrainingSetting");
static_assert(offsetof(FKoratTrainingSetting, GejiButtonSet) == 0x000000, "Member 'FKoratTrainingSetting::GejiButtonSet' has a wrong offset!");
static_assert(offsetof(FKoratTrainingSetting, DisplayButtonSet) == 0x000010, "Member 'FKoratTrainingSetting::DisplayButtonSet' has a wrong offset!");
static_assert(offsetof(FKoratTrainingSetting, ComButtonSet) == 0x000020, "Member 'FKoratTrainingSetting::ComButtonSet' has a wrong offset!");
static_assert(offsetof(FKoratTrainingSetting, CharacterData1P) == 0x000030, "Member 'FKoratTrainingSetting::CharacterData1P' has a wrong offset!");
static_assert(offsetof(FKoratTrainingSetting, CharacterData2P) == 0x000038, "Member 'FKoratTrainingSetting::CharacterData2P' has a wrong offset!");

// ScriptStruct SS.KoratDamageReactionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDamageReactionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDamageReactionDataList) == 0x000004, "Wrong alignment on FKoratDamageReactionDataList");
static_assert(sizeof(FKoratDamageReactionDataList) == 0x000008, "Wrong size on FKoratDamageReactionDataList");
static_assert(offsetof(FKoratDamageReactionDataList, Key) == 0x000000, "Member 'FKoratDamageReactionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDamage
// 0x000C (0x000C - 0x0000)
struct FKoratDamage final
{
public:
	struct FKoratDamageReactionDataList           Reaction;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFront;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDamage) == 0x000004, "Wrong alignment on FKoratDamage");
static_assert(sizeof(FKoratDamage) == 0x00000C, "Wrong size on FKoratDamage");
static_assert(offsetof(FKoratDamage, Reaction) == 0x000000, "Member 'FKoratDamage::Reaction' has a wrong offset!");
static_assert(offsetof(FKoratDamage, bFromFront) == 0x000008, "Member 'FKoratDamage::bFromFront' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupRequestCommand
// 0x0018 (0x0018 - 0x0000)
struct FSSBattleSetupRequestCommand final
{
public:
	ESSCstRequestCommand                          Request;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemberSlot;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleSetupTransition                   CameraTransition;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0xF];                                        // 0x0009(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleSetupRequestCommand) == 0x000004, "Wrong alignment on FSSBattleSetupRequestCommand");
static_assert(sizeof(FSSBattleSetupRequestCommand) == 0x000018, "Wrong size on FSSBattleSetupRequestCommand");
static_assert(offsetof(FSSBattleSetupRequestCommand, Request) == 0x000000, "Member 'FSSBattleSetupRequestCommand::Request' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupRequestCommand, MemberSlot) == 0x000004, "Member 'FSSBattleSetupRequestCommand::MemberSlot' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupRequestCommand, CameraTransition) == 0x000008, "Member 'FSSBattleSetupRequestCommand::CameraTransition' has a wrong offset!");

// ScriptStruct SS.SSBuiltInMenuItem
// 0x0010 (0x0010 - 0x0000)
struct FSSBuiltInMenuItem final
{
public:
	class USSMenuButton*                          Button;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBuiltInMenuItem) == 0x000008, "Wrong alignment on FSSBuiltInMenuItem");
static_assert(sizeof(FSSBuiltInMenuItem) == 0x000010, "Wrong size on FSSBuiltInMenuItem");
static_assert(offsetof(FSSBuiltInMenuItem, Button) == 0x000000, "Member 'FSSBuiltInMenuItem::Button' has a wrong offset!");

// ScriptStruct SS.SSBattlePlayerCtrlInfo
// 0x0001 (0x0001 - 0x0000)
struct FSSBattlePlayerCtrlInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattlePlayerCtrlInfo) == 0x000001, "Wrong alignment on FSSBattlePlayerCtrlInfo");
static_assert(sizeof(FSSBattlePlayerCtrlInfo) == 0x000001, "Wrong size on FSSBattlePlayerCtrlInfo");

// ScriptStruct SS.SSPaperTheaterSoundData
// 0x0014 (0x0014 - 0x0000)
struct FSSPaperTheaterSoundData final
{
public:
	ESSSoundGroupType                             SoundGroup;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharacterID;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPaperTheaterSoundData) == 0x000004, "Wrong alignment on FSSPaperTheaterSoundData");
static_assert(sizeof(FSSPaperTheaterSoundData) == 0x000014, "Wrong size on FSSPaperTheaterSoundData");
static_assert(offsetof(FSSPaperTheaterSoundData, SoundGroup) == 0x000000, "Member 'FSSPaperTheaterSoundData::SoundGroup' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterSoundData, SoundName) == 0x000004, "Member 'FSSPaperTheaterSoundData::SoundName' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterSoundData, CharacterID) == 0x00000C, "Member 'FSSPaperTheaterSoundData::CharacterID' has a wrong offset!");

// ScriptStruct SS.SSPaperTheaterMessageData
// 0x0058 (0x0058 - 0x0000)
struct FSSPaperTheaterMessageData final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bNarration;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenSpeakerName;                                // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSpeakerName;                              // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SpeakerNameText;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      MessageBGM;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSPaperTheaterSoundData>       SoundDatas;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPaperTheaterMessageData) == 0x000008, "Wrong alignment on FSSPaperTheaterMessageData");
static_assert(sizeof(FSSPaperTheaterMessageData) == 0x000058, "Wrong size on FSSPaperTheaterMessageData");
static_assert(offsetof(FSSPaperTheaterMessageData, Text) == 0x000000, "Member 'FSSPaperTheaterMessageData::Text' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, bNarration) == 0x000018, "Member 'FSSPaperTheaterMessageData::bNarration' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, CharacterDataList) == 0x00001C, "Member 'FSSPaperTheaterMessageData::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, bHiddenSpeakerName) == 0x000024, "Member 'FSSPaperTheaterMessageData::bHiddenSpeakerName' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, bOverrideSpeakerName) == 0x000025, "Member 'FSSPaperTheaterMessageData::bOverrideSpeakerName' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, SpeakerNameText) == 0x000028, "Member 'FSSPaperTheaterMessageData::SpeakerNameText' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, MessageBGM) == 0x000040, "Member 'FSSPaperTheaterMessageData::MessageBGM' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterMessageData, SoundDatas) == 0x000048, "Member 'FSSPaperTheaterMessageData::SoundDatas' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataSuperHighSpeedMoveParameter
// 0x0050 (0x0050 - 0x0000)
struct FKoratCharacterDataSuperHighSpeedMoveParameter final
{
public:
	float                                         SparkingGaugeCost;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDuration;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistanceMin;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HiddenStartTime;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HiddenDuration;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleStartTime;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleDuration;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        StartTimeLineType;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USSActionCameraDataAsset*               StartActionCamera;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               StartOpponentActionCamera;                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeLineOffsetTime;                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        EndTimeLineType;                                   // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USSActionCameraDataAsset*               EndActionCamera;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               EndOpponentActionCamera;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataSuperHighSpeedMoveParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataSuperHighSpeedMoveParameter");
static_assert(sizeof(FKoratCharacterDataSuperHighSpeedMoveParameter) == 0x000050, "Wrong size on FKoratCharacterDataSuperHighSpeedMoveParameter");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, SparkingGaugeCost) == 0x000000, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::SparkingGaugeCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, MoveSpeed) == 0x000004, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, MoveDuration) == 0x000008, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::MoveDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, MoveDistanceMin) == 0x00000C, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::MoveDistanceMin' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, HiddenStartTime) == 0x000010, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::HiddenStartTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, HiddenDuration) == 0x000014, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::HiddenDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, InvincibleStartTime) == 0x000018, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::InvincibleStartTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, InvincibleDuration) == 0x00001C, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::InvincibleDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, StartTimeLineType) == 0x000020, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::StartTimeLineType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, StartActionCamera) == 0x000028, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::StartActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, StartOpponentActionCamera) == 0x000030, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::StartOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, EndTimeLineOffsetTime) == 0x000038, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::EndTimeLineOffsetTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, EndTimeLineType) == 0x00003C, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::EndTimeLineType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, EndActionCamera) == 0x000040, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::EndActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSuperHighSpeedMoveParameter, EndOpponentActionCamera) == 0x000048, "Member 'FKoratCharacterDataSuperHighSpeedMoveParameter::EndOpponentActionCamera' has a wrong offset!");

// ScriptStruct SS.KoratFormChangeCharacterEquipItems
// 0x0010 (0x0010 - 0x0000)
struct FKoratFormChangeCharacterEquipItems final
{
public:
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFormChangeCharacterEquipItems) == 0x000008, "Wrong alignment on FKoratFormChangeCharacterEquipItems");
static_assert(sizeof(FKoratFormChangeCharacterEquipItems) == 0x000010, "Wrong size on FKoratFormChangeCharacterEquipItems");
static_assert(offsetof(FKoratFormChangeCharacterEquipItems, EquipItems) == 0x000000, "Member 'FKoratFormChangeCharacterEquipItems::EquipItems' has a wrong offset!");

// ScriptStruct SS.KoratFormChangeCharacterItemEquipment
// 0x0050 (0x0050 - 0x0000)
struct FKoratFormChangeCharacterItemEquipment final
{
public:
	TMap<struct FKoratCharacterDataList, struct FKoratFormChangeCharacterEquipItems> FormChangeCharacterEquipItems;                     // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFormChangeCharacterItemEquipment) == 0x000008, "Wrong alignment on FKoratFormChangeCharacterItemEquipment");
static_assert(sizeof(FKoratFormChangeCharacterItemEquipment) == 0x000050, "Wrong size on FKoratFormChangeCharacterItemEquipment");
static_assert(offsetof(FKoratFormChangeCharacterItemEquipment, FormChangeCharacterEquipItems) == 0x000000, "Member 'FKoratFormChangeCharacterItemEquipment::FormChangeCharacterEquipItems' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowSelectHistory
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSDramaticBattleCutEditorUIWindowSelectHistory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedIndex;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowSelectHistory) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowSelectHistory");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowSelectHistory) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorUIWindowSelectHistory");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectHistory, SelectedIndex) == 0x000008, "Member 'FSSDramaticBattleCutEditorUIWindowSelectHistory::SelectedIndex' has a wrong offset!");

// ScriptStruct SS.SSMenuButtonImageItemEntry
// 0x0028 (0x0028 - 0x0000)
struct FSSMenuButtonImageItemEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMenuButtonImageItemEntry) == 0x000008, "Wrong alignment on FSSMenuButtonImageItemEntry");
static_assert(sizeof(FSSMenuButtonImageItemEntry) == 0x000028, "Wrong size on FSSMenuButtonImageItemEntry");
static_assert(offsetof(FSSMenuButtonImageItemEntry, Value1) == 0x000008, "Member 'FSSMenuButtonImageItemEntry::Value1' has a wrong offset!");
static_assert(offsetof(FSSMenuButtonImageItemEntry, DisplayName) == 0x000010, "Member 'FSSMenuButtonImageItemEntry::DisplayName' has a wrong offset!");

// ScriptStruct SS.SSSingletonAssetSelectItem
// 0x0028 (0x0028 - 0x0000)
struct FSSSingletonAssetSelectItem final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutput;                                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSingletonAssetSelectItem) == 0x000008, "Wrong alignment on FSSSingletonAssetSelectItem");
static_assert(sizeof(FSSSingletonAssetSelectItem) == 0x000028, "Wrong size on FSSSingletonAssetSelectItem");
static_assert(offsetof(FSSSingletonAssetSelectItem, DisplayName) == 0x000000, "Member 'FSSSingletonAssetSelectItem::DisplayName' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetSelectItem, Key) == 0x000010, "Member 'FSSSingletonAssetSelectItem::Key' has a wrong offset!");
static_assert(offsetof(FSSSingletonAssetSelectItem, bOutput) == 0x000020, "Member 'FSSSingletonAssetSelectItem::bOutput' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataModelParameter
// 0x0040 (0x0040 - 0x0000)
struct FKoratCharacterDataModelParameter final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterAsset;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSTrailDataAsset*                      TrailData;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataModelParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataModelParameter");
static_assert(sizeof(FKoratCharacterDataModelParameter) == 0x000040, "Wrong size on FKoratCharacterDataModelParameter");
static_assert(offsetof(FKoratCharacterDataModelParameter, Key) == 0x000000, "Member 'FKoratCharacterDataModelParameter::Key' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataModelParameter, CharacterAsset) == 0x000008, "Member 'FKoratCharacterDataModelParameter::CharacterAsset' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataModelParameter, TrailData) == 0x000038, "Member 'FKoratCharacterDataModelParameter::TrailData' has a wrong offset!");

// ScriptStruct SS.KoratBattlePlayLevel
// 0x0020 (0x0020 - 0x0000)
struct FKoratBattlePlayLevel final
{
public:
	struct FKoratFormChangeCharacterEquipItems    EquipItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CpuLevel;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   CpuThinkingType;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattlePlayLevel) == 0x000008, "Wrong alignment on FKoratBattlePlayLevel");
static_assert(sizeof(FKoratBattlePlayLevel) == 0x000020, "Wrong size on FKoratBattlePlayLevel");
static_assert(offsetof(FKoratBattlePlayLevel, EquipItems) == 0x000000, "Member 'FKoratBattlePlayLevel::EquipItems' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayLevel, CpuLevel) == 0x000010, "Member 'FKoratBattlePlayLevel::CpuLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayLevel, CpuThinkingType) == 0x000014, "Member 'FKoratBattlePlayLevel::CpuThinkingType' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemSaveState
// 0x000C (0x000C - 0x0000)
struct FSSCharacterItemSaveState final
{
public:
	int32                                         CostumeDamageLv;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeScratchLv;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftDisableEffectTime;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterItemSaveState) == 0x000004, "Wrong alignment on FSSCharacterItemSaveState");
static_assert(sizeof(FSSCharacterItemSaveState) == 0x00000C, "Wrong size on FSSCharacterItemSaveState");
static_assert(offsetof(FSSCharacterItemSaveState, CostumeDamageLv) == 0x000000, "Member 'FSSCharacterItemSaveState::CostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemSaveState, CostumeScratchLv) == 0x000004, "Member 'FSSCharacterItemSaveState::CostumeScratchLv' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemSaveState, LeftDisableEffectTime) == 0x000008, "Member 'FSSCharacterItemSaveState::LeftDisableEffectTime' has a wrong offset!");

// ScriptStruct SS.KoratBattlePlayCharacter
// 0x0228 (0x0228 - 0x0000)
struct FKoratBattlePlayCharacter final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      SparkingBGM;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceCharacterCamera;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CameraBlueprint;                                   // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceRebindRegexPattern;                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    EquipItem;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterItemDataList, struct FSSCharacterItemSaveState> ItemSaveState;                                     // 0x0070(0x0050)(NativeAccessSpecifierPublic)
	EKoratBattleControlMode                       BattleControlMode;                                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKnockDown;                                        // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlowIsFront;                                      // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRingOut;                                          // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPGaugeValue;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPGaugeValueMax;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPGaugeValue;                                      // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlastStockCount;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastGaugeValue;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextSkillGaugeGainHP;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMaxHP;                                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CpuLevel;                                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   CpuThinkingType;                                   // 0x00E4(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattlePlayLevel>          BattlePlayLevel;                                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CostumeDamageLv;                                   // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeScratchLv;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                OriginalCharacter;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EKoratBattleDirectingCharacterStateType> ChangedStates;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EKoratBattleDirectingCharacterStateType> PreChangedStates;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0xF8];                                     // 0x0130(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattlePlayCharacter) == 0x000008, "Wrong alignment on FKoratBattlePlayCharacter");
static_assert(sizeof(FKoratBattlePlayCharacter) == 0x000228, "Wrong size on FKoratBattlePlayCharacter");
static_assert(offsetof(FKoratBattlePlayCharacter, Character) == 0x000000, "Member 'FKoratBattlePlayCharacter::Character' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, Costume) == 0x000010, "Member 'FKoratBattlePlayCharacter::Costume' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, SparkingBGM) == 0x000018, "Member 'FKoratBattlePlayCharacter::SparkingBGM' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, bReplaceCharacterCamera) == 0x000020, "Member 'FKoratBattlePlayCharacter::bReplaceCharacterCamera' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, CameraBlueprint) == 0x000028, "Member 'FKoratBattlePlayCharacter::CameraBlueprint' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, SequenceRebindRegexPattern) == 0x000058, "Member 'FKoratBattlePlayCharacter::SequenceRebindRegexPattern' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, EquipItem) == 0x000060, "Member 'FKoratBattlePlayCharacter::EquipItem' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, ItemSaveState) == 0x000070, "Member 'FKoratBattlePlayCharacter::ItemSaveState' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, BattleControlMode) == 0x0000C0, "Member 'FKoratBattlePlayCharacter::BattleControlMode' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, bKnockDown) == 0x0000C1, "Member 'FKoratBattlePlayCharacter::bKnockDown' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, bBlowIsFront) == 0x0000C2, "Member 'FKoratBattlePlayCharacter::bBlowIsFront' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, bRingOut) == 0x0000C3, "Member 'FKoratBattlePlayCharacter::bRingOut' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, HPGaugeValue) == 0x0000C4, "Member 'FKoratBattlePlayCharacter::HPGaugeValue' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, HPGaugeValueMax) == 0x0000C8, "Member 'FKoratBattlePlayCharacter::HPGaugeValueMax' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, SPGaugeValue) == 0x0000CC, "Member 'FKoratBattlePlayCharacter::SPGaugeValue' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, BlastStockCount) == 0x0000D0, "Member 'FKoratBattlePlayCharacter::BlastStockCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, BlastGaugeValue) == 0x0000D4, "Member 'FKoratBattlePlayCharacter::BlastGaugeValue' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, NextSkillGaugeGainHP) == 0x0000D8, "Member 'FKoratBattlePlayCharacter::NextSkillGaugeGainHP' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, AddMaxHP) == 0x0000DC, "Member 'FKoratBattlePlayCharacter::AddMaxHP' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, CpuLevel) == 0x0000E0, "Member 'FKoratBattlePlayCharacter::CpuLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, CpuThinkingType) == 0x0000E4, "Member 'FKoratBattlePlayCharacter::CpuThinkingType' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, BattlePlayLevel) == 0x0000F0, "Member 'FKoratBattlePlayCharacter::BattlePlayLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, CostumeDamageLv) == 0x000100, "Member 'FKoratBattlePlayCharacter::CostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, CostumeScratchLv) == 0x000104, "Member 'FKoratBattlePlayCharacter::CostumeScratchLv' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, OriginalCharacter) == 0x000108, "Member 'FKoratBattlePlayCharacter::OriginalCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, ChangedStates) == 0x000110, "Member 'FKoratBattlePlayCharacter::ChangedStates' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayCharacter, PreChangedStates) == 0x000120, "Member 'FKoratBattlePlayCharacter::PreChangedStates' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListButtonDialogData
// 0x0090 (0x0090 - 0x0000)
struct FSSMainMenuListButtonDialogData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextBody;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              ReplaceTexts;                                      // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           ButtonTexts;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuListButtonDialogData) == 0x000008, "Wrong alignment on FSSMainMenuListButtonDialogData");
static_assert(sizeof(FSSMainMenuListButtonDialogData) == 0x000090, "Wrong size on FSSMainMenuListButtonDialogData");
static_assert(offsetof(FSSMainMenuListButtonDialogData, TitleText) == 0x000000, "Member 'FSSMainMenuListButtonDialogData::TitleText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonDialogData, TextBody) == 0x000018, "Member 'FSSMainMenuListButtonDialogData::TextBody' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonDialogData, ReplaceTexts) == 0x000030, "Member 'FSSMainMenuListButtonDialogData::ReplaceTexts' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonDialogData, ButtonTexts) == 0x000080, "Member 'FSSMainMenuListButtonDialogData::ButtonTexts' has a wrong offset!");

// ScriptStruct SS.KoratMatchingCondPropDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMatchingCondPropDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMatchingCondPropDataList) == 0x000004, "Wrong alignment on FKoratMatchingCondPropDataList");
static_assert(sizeof(FKoratMatchingCondPropDataList) == 0x000008, "Wrong size on FKoratMatchingCondPropDataList");
static_assert(offsetof(FKoratMatchingCondPropDataList, Key) == 0x000000, "Member 'FKoratMatchingCondPropDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListSettingsProperty
// 0x0028 (0x0028 - 0x0000)
struct FSSMainMenuListSettingsProperty final
{
public:
	class FText                                   PropertyLable;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMainMenuListPropertySettingsType             PropertyType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratMatchingCondPropDataList         PropertyItemDataList;                              // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuListSettingsProperty) == 0x000008, "Wrong alignment on FSSMainMenuListSettingsProperty");
static_assert(sizeof(FSSMainMenuListSettingsProperty) == 0x000028, "Wrong size on FSSMainMenuListSettingsProperty");
static_assert(offsetof(FSSMainMenuListSettingsProperty, PropertyLable) == 0x000000, "Member 'FSSMainMenuListSettingsProperty::PropertyLable' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListSettingsProperty, PropertyType) == 0x000018, "Member 'FSSMainMenuListSettingsProperty::PropertyType' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListSettingsProperty, PropertyItemDataList) == 0x00001C, "Member 'FSSMainMenuListSettingsProperty::PropertyItemDataList' has a wrong offset!");

// ScriptStruct SS.KoratButtonGuideDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratButtonGuideDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratButtonGuideDataList) == 0x000004, "Wrong alignment on FKoratButtonGuideDataList");
static_assert(sizeof(FKoratButtonGuideDataList) == 0x000008, "Wrong size on FKoratButtonGuideDataList");
static_assert(offsetof(FKoratButtonGuideDataList, Key) == 0x000000, "Member 'FKoratButtonGuideDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListOpenWidgetDataBase
// 0x00C0 (0x00C0 - 0x0000)
struct FSSMainMenuListOpenWidgetDataBase
{
public:
	TSoftClassPtr<class UClass>                   SettingsWidget;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuListSettingsProperty> SettingsProperties;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   SettingsTitle;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SettingsEnterLabel;                                // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMainMenuSettingsMode                         SettingsMode;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           Widgets;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FText>                           WidgetTitles;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNeedOnline;                                       // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMainMenuOnlineCheckMode                      OnlineCheckMode;                                   // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratButtonGuideDataList              ButtonGuide;                                       // 0x009C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ButtonGuideHiddenIndexes;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOnlineOnly;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuListOpenWidgetDataBase) == 0x000008, "Wrong alignment on FSSMainMenuListOpenWidgetDataBase");
static_assert(sizeof(FSSMainMenuListOpenWidgetDataBase) == 0x0000C0, "Wrong size on FSSMainMenuListOpenWidgetDataBase");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, SettingsWidget) == 0x000000, "Member 'FSSMainMenuListOpenWidgetDataBase::SettingsWidget' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, SettingsProperties) == 0x000030, "Member 'FSSMainMenuListOpenWidgetDataBase::SettingsProperties' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, SettingsTitle) == 0x000040, "Member 'FSSMainMenuListOpenWidgetDataBase::SettingsTitle' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, SettingsEnterLabel) == 0x000058, "Member 'FSSMainMenuListOpenWidgetDataBase::SettingsEnterLabel' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, SettingsMode) == 0x000070, "Member 'FSSMainMenuListOpenWidgetDataBase::SettingsMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, Widgets) == 0x000078, "Member 'FSSMainMenuListOpenWidgetDataBase::Widgets' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, WidgetTitles) == 0x000088, "Member 'FSSMainMenuListOpenWidgetDataBase::WidgetTitles' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, bNeedOnline) == 0x000098, "Member 'FSSMainMenuListOpenWidgetDataBase::bNeedOnline' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, OnlineCheckMode) == 0x000099, "Member 'FSSMainMenuListOpenWidgetDataBase::OnlineCheckMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, ButtonGuide) == 0x00009C, "Member 'FSSMainMenuListOpenWidgetDataBase::ButtonGuide' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, ButtonGuideHiddenIndexes) == 0x0000A8, "Member 'FSSMainMenuListOpenWidgetDataBase::ButtonGuideHiddenIndexes' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListOpenWidgetDataBase, bOnlineOnly) == 0x0000B8, "Member 'FSSMainMenuListOpenWidgetDataBase::bOnlineOnly' has a wrong offset!");

// ScriptStruct SS.SSMainMenuWidgetButtonData
// 0x0110 (0x0110 - 0x0000)
struct FSSMainMenuWidgetButtonData final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMainMenuListButtonBehaviour                  BehaviourType;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonVisible;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMainMenuListButtonQuickMatchType             QuickMatchType;                                    // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSMainMenuListOpenWidgetDataBase      WidgetData;                                        // 0x0038(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SceneIndex;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuWidgetButtonData) == 0x000008, "Wrong alignment on FSSMainMenuWidgetButtonData");
static_assert(sizeof(FSSMainMenuWidgetButtonData) == 0x000110, "Wrong size on FSSMainMenuWidgetButtonData");
static_assert(offsetof(FSSMainMenuWidgetButtonData, ButtonText) == 0x000000, "Member 'FSSMainMenuWidgetButtonData::ButtonText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, GuideText) == 0x000018, "Member 'FSSMainMenuWidgetButtonData::GuideText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, BehaviourType) == 0x000030, "Member 'FSSMainMenuWidgetButtonData::BehaviourType' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, bButtonVisible) == 0x000031, "Member 'FSSMainMenuWidgetButtonData::bButtonVisible' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, QuickMatchType) == 0x000032, "Member 'FSSMainMenuWidgetButtonData::QuickMatchType' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, WidgetData) == 0x000038, "Member 'FSSMainMenuWidgetButtonData::WidgetData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, ActivityId) == 0x0000F8, "Member 'FSSMainMenuWidgetButtonData::ActivityId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuWidgetButtonData, SceneIndex) == 0x000108, "Member 'FSSMainMenuWidgetButtonData::SceneIndex' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListOpenWidgetData
// 0x0010 (0x00D0 - 0x00C0)
struct FSSMainMenuListOpenWidgetData final : public FSSMainMenuListOpenWidgetDataBase
{
public:
	TArray<struct FSSMainMenuWidgetButtonData>    ButtonData;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuListOpenWidgetData) == 0x000008, "Wrong alignment on FSSMainMenuListOpenWidgetData");
static_assert(sizeof(FSSMainMenuListOpenWidgetData) == 0x0000D0, "Wrong size on FSSMainMenuListOpenWidgetData");
static_assert(offsetof(FSSMainMenuListOpenWidgetData, ButtonData) == 0x0000C0, "Member 'FSSMainMenuListOpenWidgetData::ButtonData' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListButtonBase
// 0x01D0 (0x01D0 - 0x0000)
struct FSSMainMenuListButtonBase
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMainMenuListButtonBehaviour                  BehaviourType;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonVisible;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSMainMenuListButtonDialogData        DialogData;                                        // 0x0038(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSSMainMenuListOpenWidgetData          WidgetData;                                        // 0x00C8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNeedOnline;                                       // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMainMenuOnlineCheckMode                      OnlineCheckMode;                                   // 0x0199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictDuringInstall;                            // 0x019A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlineOnly;                                       // 0x019B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActivityId;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratButtonGuideDataList              ButtonGuide;                                       // 0x01B0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ButtonGuideHiddenIndexes;                          // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EMainMenuButtonBadgeCondition                 NotificationBadgeCondition;                        // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuListButtonBase) == 0x000008, "Wrong alignment on FSSMainMenuListButtonBase");
static_assert(sizeof(FSSMainMenuListButtonBase) == 0x0001D0, "Wrong size on FSSMainMenuListButtonBase");
static_assert(offsetof(FSSMainMenuListButtonBase, ButtonText) == 0x000000, "Member 'FSSMainMenuListButtonBase::ButtonText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, GuideText) == 0x000018, "Member 'FSSMainMenuListButtonBase::GuideText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, BehaviourType) == 0x000030, "Member 'FSSMainMenuListButtonBase::BehaviourType' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, bButtonVisible) == 0x000031, "Member 'FSSMainMenuListButtonBase::bButtonVisible' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, DialogData) == 0x000038, "Member 'FSSMainMenuListButtonBase::DialogData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, WidgetData) == 0x0000C8, "Member 'FSSMainMenuListButtonBase::WidgetData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, bNeedOnline) == 0x000198, "Member 'FSSMainMenuListButtonBase::bNeedOnline' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, OnlineCheckMode) == 0x000199, "Member 'FSSMainMenuListButtonBase::OnlineCheckMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, bRestrictDuringInstall) == 0x00019A, "Member 'FSSMainMenuListButtonBase::bRestrictDuringInstall' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, bOnlineOnly) == 0x00019B, "Member 'FSSMainMenuListButtonBase::bOnlineOnly' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, bDisable) == 0x00019C, "Member 'FSSMainMenuListButtonBase::bDisable' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, ActivityId) == 0x0001A0, "Member 'FSSMainMenuListButtonBase::ActivityId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, ButtonGuide) == 0x0001B0, "Member 'FSSMainMenuListButtonBase::ButtonGuide' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, ButtonGuideHiddenIndexes) == 0x0001B8, "Member 'FSSMainMenuListButtonBase::ButtonGuideHiddenIndexes' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListButtonBase, NotificationBadgeCondition) == 0x0001C8, "Member 'FSSMainMenuListButtonBase::NotificationBadgeCondition' has a wrong offset!");

// ScriptStruct SS.FakeCameraSettings
// 0x0038 (0x0038 - 0x0000)
struct FFakeCameraSettings final
{
public:
	struct FVector                                EffectiveEndPoint;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationProportion;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFilmbackSettings                FilmbackSettings;                                  // 0x0024(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeCameraSettings) == 0x000008, "Wrong alignment on FFakeCameraSettings");
static_assert(sizeof(FFakeCameraSettings) == 0x000038, "Wrong size on FFakeCameraSettings");
static_assert(offsetof(FFakeCameraSettings, EffectiveEndPoint) == 0x000000, "Member 'FFakeCameraSettings::EffectiveEndPoint' has a wrong offset!");
static_assert(offsetof(FFakeCameraSettings, InterpolationProportion) == 0x000018, "Member 'FFakeCameraSettings::InterpolationProportion' has a wrong offset!");
static_assert(offsetof(FFakeCameraSettings, FilmbackSettings) == 0x000024, "Member 'FFakeCameraSettings::FilmbackSettings' has a wrong offset!");
static_assert(offsetof(FFakeCameraSettings, CurrentFocalLength) == 0x000030, "Member 'FFakeCameraSettings::CurrentFocalLength' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletDecalDataOverwrite
// 0x0038 (0x0038 - 0x0000)
struct FKoratEffectBulletDecalDataOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      BurnMarkMaterial;                                  // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletDecalDataOverwrite) == 0x000008, "Wrong alignment on FKoratEffectBulletDecalDataOverwrite");
static_assert(sizeof(FKoratEffectBulletDecalDataOverwrite) == 0x000038, "Wrong size on FKoratEffectBulletDecalDataOverwrite");
static_assert(offsetof(FKoratEffectBulletDecalDataOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletDecalDataOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletDecalDataOverwrite, BurnMarkMaterial) == 0x000008, "Member 'FKoratEffectBulletDecalDataOverwrite::BurnMarkMaterial' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatVectorOverwrite
// 0x0020 (0x0020 - 0x0000)
struct FKoratEffectBulletRatVectorOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VecotorValue;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatVectorOverwrite) == 0x000008, "Wrong alignment on FKoratEffectBulletRatVectorOverwrite");
static_assert(sizeof(FKoratEffectBulletRatVectorOverwrite) == 0x000020, "Wrong size on FKoratEffectBulletRatVectorOverwrite");
static_assert(offsetof(FKoratEffectBulletRatVectorOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatVectorOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatVectorOverwrite, VecotorValue) == 0x000008, "Member 'FKoratEffectBulletRatVectorOverwrite::VecotorValue' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatRandomValue
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletRatRandomValue final
{
public:
	float                                         RandomMax;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomMin;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatRandomValue) == 0x000004, "Wrong alignment on FKoratEffectBulletRatRandomValue");
static_assert(sizeof(FKoratEffectBulletRatRandomValue) == 0x000008, "Wrong size on FKoratEffectBulletRatRandomValue");
static_assert(offsetof(FKoratEffectBulletRatRandomValue, RandomMax) == 0x000000, "Member 'FKoratEffectBulletRatRandomValue::RandomMax' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatRandomValue, RandomMin) == 0x000004, "Member 'FKoratEffectBulletRatRandomValue::RandomMin' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatRandomValueOverwrite
// 0x000C (0x000C - 0x0000)
struct FKoratEffectBulletRatRandomValueOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatRandomValue       RandomValue;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatRandomValueOverwrite) == 0x000004, "Wrong alignment on FKoratEffectBulletRatRandomValueOverwrite");
static_assert(sizeof(FKoratEffectBulletRatRandomValueOverwrite) == 0x00000C, "Wrong size on FKoratEffectBulletRatRandomValueOverwrite");
static_assert(offsetof(FKoratEffectBulletRatRandomValueOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatRandomValueOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatRandomValueOverwrite, RandomValue) == 0x000004, "Member 'FKoratEffectBulletRatRandomValueOverwrite::RandomValue' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletSoundIdOverwrite
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletSoundIdOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundId;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletSoundIdOverwrite) == 0x000004, "Wrong alignment on FKoratEffectBulletSoundIdOverwrite");
static_assert(sizeof(FKoratEffectBulletSoundIdOverwrite) == 0x000008, "Wrong size on FKoratEffectBulletSoundIdOverwrite");
static_assert(offsetof(FKoratEffectBulletSoundIdOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletSoundIdOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletSoundIdOverwrite, SoundId) == 0x000004, "Member 'FKoratEffectBulletSoundIdOverwrite::SoundId' has a wrong offset!");

// ScriptStruct SS.KoratEffectInteractNiagaraTypeDataList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratEffectInteractNiagaraTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectInteractNiagaraTypeDataList) == 0x000008, "Wrong alignment on FKoratEffectInteractNiagaraTypeDataList");
static_assert(sizeof(FKoratEffectInteractNiagaraTypeDataList) == 0x000018, "Wrong size on FKoratEffectInteractNiagaraTypeDataList");
static_assert(offsetof(FKoratEffectInteractNiagaraTypeDataList, Key) == 0x000000, "Member 'FKoratEffectInteractNiagaraTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletKnockDataOverwrite
// 0x0020 (0x0020 - 0x0000)
struct FKoratEffectBulletKnockDataOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectInteractNiagaraTypeDataList LandElevationNiagaraType;                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletKnockDataOverwrite) == 0x000008, "Wrong alignment on FKoratEffectBulletKnockDataOverwrite");
static_assert(sizeof(FKoratEffectBulletKnockDataOverwrite) == 0x000020, "Wrong size on FKoratEffectBulletKnockDataOverwrite");
static_assert(offsetof(FKoratEffectBulletKnockDataOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletKnockDataOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletKnockDataOverwrite, LandElevationNiagaraType) == 0x000008, "Member 'FKoratEffectBulletKnockDataOverwrite::LandElevationNiagaraType' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatLineTraceParam
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectBulletRatLineTraceParam final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatLineTraceParam) == 0x000008, "Wrong alignment on FKoratEffectBulletRatLineTraceParam");
static_assert(sizeof(FKoratEffectBulletRatLineTraceParam) == 0x000030, "Wrong size on FKoratEffectBulletRatLineTraceParam");
static_assert(offsetof(FKoratEffectBulletRatLineTraceParam, StartPos) == 0x000000, "Member 'FKoratEffectBulletRatLineTraceParam::StartPos' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatLineTraceParam, EndPos) == 0x000018, "Member 'FKoratEffectBulletRatLineTraceParam::EndPos' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatLineTraceParamOverwrite
// 0x0038 (0x0038 - 0x0000)
struct FKoratEffectBulletRatLineTraceParamOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatLineTraceParam    LineTraceParam;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatLineTraceParamOverwrite) == 0x000008, "Wrong alignment on FKoratEffectBulletRatLineTraceParamOverwrite");
static_assert(sizeof(FKoratEffectBulletRatLineTraceParamOverwrite) == 0x000038, "Wrong size on FKoratEffectBulletRatLineTraceParamOverwrite");
static_assert(offsetof(FKoratEffectBulletRatLineTraceParamOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatLineTraceParamOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatLineTraceParamOverwrite, LineTraceParam) == 0x000008, "Member 'FKoratEffectBulletRatLineTraceParamOverwrite::LineTraceParam' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatFloatOverwrite
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletRatFloatOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatFloatOverwrite) == 0x000004, "Wrong alignment on FKoratEffectBulletRatFloatOverwrite");
static_assert(sizeof(FKoratEffectBulletRatFloatOverwrite) == 0x000008, "Wrong size on FKoratEffectBulletRatFloatOverwrite");
static_assert(offsetof(FKoratEffectBulletRatFloatOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatFloatOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatFloatOverwrite, Value) == 0x000004, "Member 'FKoratEffectBulletRatFloatOverwrite::Value' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatExistLimitParam
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletRatExistLimitParam final
{
public:
	int32                                         ExistLimit;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpanAppliedExistLimit;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatExistLimitParam) == 0x000004, "Wrong alignment on FKoratEffectBulletRatExistLimitParam");
static_assert(sizeof(FKoratEffectBulletRatExistLimitParam) == 0x000008, "Wrong size on FKoratEffectBulletRatExistLimitParam");
static_assert(offsetof(FKoratEffectBulletRatExistLimitParam, ExistLimit) == 0x000000, "Member 'FKoratEffectBulletRatExistLimitParam::ExistLimit' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatExistLimitParam, LifeSpanAppliedExistLimit) == 0x000004, "Member 'FKoratEffectBulletRatExistLimitParam::LifeSpanAppliedExistLimit' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatExistLimitParamOverwrite
// 0x000C (0x000C - 0x0000)
struct FKoratEffectBulletRatExistLimitParamOverwrite final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatExistLimitParam   ExistLimitParam;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatExistLimitParamOverwrite) == 0x000004, "Wrong alignment on FKoratEffectBulletRatExistLimitParamOverwrite");
static_assert(sizeof(FKoratEffectBulletRatExistLimitParamOverwrite) == 0x00000C, "Wrong size on FKoratEffectBulletRatExistLimitParamOverwrite");
static_assert(offsetof(FKoratEffectBulletRatExistLimitParamOverwrite, bOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatExistLimitParamOverwrite::bOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatExistLimitParamOverwrite, ExistLimitParam) == 0x000004, "Member 'FKoratEffectBulletRatExistLimitParamOverwrite::ExistLimitParam' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatDataAssetOverrideRecord
// 0x0100 (0x0100 - 0x0000)
struct FKoratEffectBulletRatDataAssetOverrideRecord final
{
public:
	struct FKoratEffectBulletDecalDataOverwrite   BurnMarkOverwrite;                                 // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatVectorOverwrite   BurnMarkScaleFactorOverwrite;                      // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValueOverwrite BurnMarkScaleRandomOverwrite;                      // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValueOverwrite BurnMarkRotationRandomOverwrite;                   // 0x0064(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletSoundIdOverwrite     BurnMarkSoundIdOverwrite;                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletKnockDataOverwrite   LandElevationOverwrite;                            // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValueOverwrite LandElevationScaleRandomOverwrite;                 // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletSoundIdOverwrite     LandElevationSoundIdOverwrite;                     // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatLineTraceParamOverwrite LineTraceParamOverwrite;                           // 0x00B0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatFloatOverwrite    SpawnDistanceOverwrite;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatExistLimitParamOverwrite ExistLimitParamOverwrite;                          // 0x00F0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBulletRatDataAssetOverrideRecord) == 0x000008, "Wrong alignment on FKoratEffectBulletRatDataAssetOverrideRecord");
static_assert(sizeof(FKoratEffectBulletRatDataAssetOverrideRecord) == 0x000100, "Wrong size on FKoratEffectBulletRatDataAssetOverrideRecord");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, BurnMarkOverwrite) == 0x000000, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::BurnMarkOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, BurnMarkScaleFactorOverwrite) == 0x000038, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::BurnMarkScaleFactorOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, BurnMarkScaleRandomOverwrite) == 0x000058, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::BurnMarkScaleRandomOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, BurnMarkRotationRandomOverwrite) == 0x000064, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::BurnMarkRotationRandomOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, BurnMarkSoundIdOverwrite) == 0x000070, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::BurnMarkSoundIdOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, LandElevationOverwrite) == 0x000078, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::LandElevationOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, LandElevationScaleRandomOverwrite) == 0x000098, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::LandElevationScaleRandomOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, LandElevationSoundIdOverwrite) == 0x0000A4, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::LandElevationSoundIdOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, LineTraceParamOverwrite) == 0x0000B0, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::LineTraceParamOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, SpawnDistanceOverwrite) == 0x0000E8, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::SpawnDistanceOverwrite' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetOverrideRecord, ExistLimitParamOverwrite) == 0x0000F0, "Member 'FKoratEffectBulletRatDataAssetOverrideRecord::ExistLimitParamOverwrite' has a wrong offset!");

// ScriptStruct SS.KoratReplaceTransitionActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratReplaceTransitionActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratReplaceTransitionActionDataList) == 0x000004, "Wrong alignment on FKoratReplaceTransitionActionDataList");
static_assert(sizeof(FKoratReplaceTransitionActionDataList) == 0x000008, "Wrong size on FKoratReplaceTransitionActionDataList");
static_assert(offsetof(FKoratReplaceTransitionActionDataList, Key) == 0x000000, "Member 'FKoratReplaceTransitionActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSMenuButtonTextItemEntry
// 0x0028 (0x0028 - 0x0000)
struct FSSMenuButtonTextItemEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMenuButtonTextItemEntry) == 0x000008, "Wrong alignment on FSSMenuButtonTextItemEntry");
static_assert(sizeof(FSSMenuButtonTextItemEntry) == 0x000028, "Wrong size on FSSMenuButtonTextItemEntry");
static_assert(offsetof(FSSMenuButtonTextItemEntry, Value1) == 0x000008, "Member 'FSSMenuButtonTextItemEntry::Value1' has a wrong offset!");
static_assert(offsetof(FSSMenuButtonTextItemEntry, DisplayName) == 0x000010, "Member 'FSSMenuButtonTextItemEntry::DisplayName' has a wrong offset!");

// ScriptStruct SS.SSMissionUserDataSaveData
// 0x0028 (0x0028 - 0x0000)
struct FSSMissionUserDataSaveData final
{
public:
	ESSMissionCleraMode                           ClearMode;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClearNum;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearNumFloatStorage;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearNumIntStorage;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNeedShowInfoIcon;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              MissionLimitSpan;                                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverLimit;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReleased;                                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlatformTrophyUnlock;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMissionUserDataSaveData) == 0x000008, "Wrong alignment on FSSMissionUserDataSaveData");
static_assert(sizeof(FSSMissionUserDataSaveData) == 0x000028, "Wrong size on FSSMissionUserDataSaveData");
static_assert(offsetof(FSSMissionUserDataSaveData, ClearMode) == 0x000000, "Member 'FSSMissionUserDataSaveData::ClearMode' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, ClearNum) == 0x000004, "Member 'FSSMissionUserDataSaveData::ClearNum' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, ClearNumFloatStorage) == 0x000008, "Member 'FSSMissionUserDataSaveData::ClearNumFloatStorage' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, ClearNumIntStorage) == 0x00000C, "Member 'FSSMissionUserDataSaveData::ClearNumIntStorage' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, bIsNeedShowInfoIcon) == 0x000010, "Member 'FSSMissionUserDataSaveData::bIsNeedShowInfoIcon' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, MissionLimitSpan) == 0x000018, "Member 'FSSMissionUserDataSaveData::MissionLimitSpan' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, bIsOverLimit) == 0x000020, "Member 'FSSMissionUserDataSaveData::bIsOverLimit' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, bIsReleased) == 0x000021, "Member 'FSSMissionUserDataSaveData::bIsReleased' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveData, bIsPlatformTrophyUnlock) == 0x000022, "Member 'FSSMissionUserDataSaveData::bIsPlatformTrophyUnlock' has a wrong offset!");

// ScriptStruct SS.KoratEventSceneLocatorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEventSceneLocatorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEventSceneLocatorDataList) == 0x000004, "Wrong alignment on FKoratEventSceneLocatorDataList");
static_assert(sizeof(FKoratEventSceneLocatorDataList) == 0x000008, "Wrong size on FKoratEventSceneLocatorDataList");
static_assert(offsetof(FKoratEventSceneLocatorDataList, Key) == 0x000000, "Member 'FKoratEventSceneLocatorDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectSelectingImageData
// 0x0040 (0x0040 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectSelectingImageData final
{
public:
	TSoftObjectPtr<class UTexture2D>              NowSelectingImage;                                 // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectSelectingImageData) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectSelectingImageData");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectSelectingImageData) == 0x000040, "Wrong size on FSSDramaticBattleCutEditorInitialSelectSelectingImageData");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectSelectingImageData, NowSelectingImage) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectSelectingImageData::NowSelectingImage' has a wrong offset!");

// ScriptStruct SS.KoratMissionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionDataList) == 0x000004, "Wrong alignment on FKoratMissionDataList");
static_assert(sizeof(FKoratMissionDataList) == 0x000008, "Wrong size on FKoratMissionDataList");
static_assert(offsetof(FKoratMissionDataList, Key) == 0x000000, "Member 'FKoratMissionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestFootIKModeInfo
// 0x0001 (0x0001 - 0x0000)
struct FKoratCharacterUIActionRequestFootIKModeInfo final
{
public:
	EKoratCharacterUIActionFootIKMode             UIActionFootIKMode;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestFootIKModeInfo) == 0x000001, "Wrong alignment on FKoratCharacterUIActionRequestFootIKModeInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestFootIKModeInfo) == 0x000001, "Wrong size on FKoratCharacterUIActionRequestFootIKModeInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestFootIKModeInfo, UIActionFootIKMode) == 0x000000, "Member 'FKoratCharacterUIActionRequestFootIKModeInfo::UIActionFootIKMode' has a wrong offset!");

// ScriptStruct SS.SSAreaEditUserEditingInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FSSAreaEditUserEditingInfo final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAreaEditUserEditingInfo) == 0x000010, "Wrong alignment on FSSAreaEditUserEditingInfo");
static_assert(sizeof(FSSAreaEditUserEditingInfo) == 0x000070, "Wrong size on FSSAreaEditUserEditingInfo");

// ScriptStruct SS.SSOptionButtonKeyInputItemEntry
// 0x0028 (0x0028 - 0x0000)
struct FSSOptionButtonKeyInputItemEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionButtonKeyInputItemEntry) == 0x000008, "Wrong alignment on FSSOptionButtonKeyInputItemEntry");
static_assert(sizeof(FSSOptionButtonKeyInputItemEntry) == 0x000028, "Wrong size on FSSOptionButtonKeyInputItemEntry");
static_assert(offsetof(FSSOptionButtonKeyInputItemEntry, Value1) == 0x000008, "Member 'FSSOptionButtonKeyInputItemEntry::Value1' has a wrong offset!");
static_assert(offsetof(FSSOptionButtonKeyInputItemEntry, DisplayName) == 0x000010, "Member 'FSSOptionButtonKeyInputItemEntry::DisplayName' has a wrong offset!");

// ScriptStruct SS.KoratDramaticMission
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticMission final
{
public:
	EKortaDramticMissionCategory                  DramaticMissionCategory;                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DramaticMissionClearNum;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticMission) == 0x000004, "Wrong alignment on FKoratDramaticMission");
static_assert(sizeof(FKoratDramaticMission) == 0x000008, "Wrong size on FKoratDramaticMission");
static_assert(offsetof(FKoratDramaticMission, DramaticMissionCategory) == 0x000000, "Member 'FKoratDramaticMission::DramaticMissionCategory' has a wrong offset!");
static_assert(offsetof(FKoratDramaticMission, DramaticMissionClearNum) == 0x000004, "Member 'FKoratDramaticMission::DramaticMissionClearNum' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleExtraDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleExtraDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleExtraDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleExtraDataList");
static_assert(sizeof(FKoratDramaticBattleExtraDataList) == 0x000008, "Wrong size on FKoratDramaticBattleExtraDataList");
static_assert(offsetof(FKoratDramaticBattleExtraDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleExtraDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticExtraOption
// 0x0030 (0x0030 - 0x0000)
struct FKoratDramaticExtraOption final
{
public:
	TArray<struct FKoratDramaticMission>          DramaticMissions;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratDramaticBattleExtraDataList> UnlockExtraBattles;                                // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EKoratDramaticExtraUnLockType                 UnLockType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticExtraOption) == 0x000008, "Wrong alignment on FKoratDramaticExtraOption");
static_assert(sizeof(FKoratDramaticExtraOption) == 0x000030, "Wrong size on FKoratDramaticExtraOption");
static_assert(offsetof(FKoratDramaticExtraOption, DramaticMissions) == 0x000000, "Member 'FKoratDramaticExtraOption::DramaticMissions' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraOption, Difficulty) == 0x000010, "Member 'FKoratDramaticExtraOption::Difficulty' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraOption, UnlockExtraBattles) == 0x000018, "Member 'FKoratDramaticExtraOption::UnlockExtraBattles' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraOption, UnLockType) == 0x000028, "Member 'FKoratDramaticExtraOption::UnLockType' has a wrong offset!");

// ScriptStruct SS.KoratBattleTeamChangeData
// 0x0018 (0x0018 - 0x0000)
struct FKoratBattleTeamChangeData final
{
public:
	struct FKoratPlayerStartDataList              PlayerStartData;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombined;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SPGaugeValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UTexture>                FaceChipTexture;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTeamChangeData) == 0x000004, "Wrong alignment on FKoratBattleTeamChangeData");
static_assert(sizeof(FKoratBattleTeamChangeData) == 0x000018, "Wrong size on FKoratBattleTeamChangeData");
static_assert(offsetof(FKoratBattleTeamChangeData, PlayerStartData) == 0x000000, "Member 'FKoratBattleTeamChangeData::PlayerStartData' has a wrong offset!");
static_assert(offsetof(FKoratBattleTeamChangeData, bCombined) == 0x000008, "Member 'FKoratBattleTeamChangeData::bCombined' has a wrong offset!");
static_assert(offsetof(FKoratBattleTeamChangeData, SPGaugeValue) == 0x00000C, "Member 'FKoratBattleTeamChangeData::SPGaugeValue' has a wrong offset!");
static_assert(offsetof(FKoratBattleTeamChangeData, FaceChipTexture) == 0x000010, "Member 'FKoratBattleTeamChangeData::FaceChipTexture' has a wrong offset!");

// ScriptStruct SS.SSMainMenu3rdMenuButtonData
// 0x0018 (0x01E8 - 0x01D0)
struct FSSMainMenu3rdMenuButtonData final : public FSSMainMenuListButtonBase
{
public:
	class FText                                   TitleText;                                         // 0x01D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenu3rdMenuButtonData) == 0x000008, "Wrong alignment on FSSMainMenu3rdMenuButtonData");
static_assert(sizeof(FSSMainMenu3rdMenuButtonData) == 0x0001E8, "Wrong size on FSSMainMenu3rdMenuButtonData");
static_assert(offsetof(FSSMainMenu3rdMenuButtonData, TitleText) == 0x0001D0, "Member 'FSSMainMenu3rdMenuButtonData::TitleText' has a wrong offset!");

// ScriptStruct SS.SSMainMenu2ndMenuButtonData
// 0x0028 (0x01F8 - 0x01D0)
struct FSSMainMenu2ndMenuButtonData final : public FSSMainMenuListButtonBase
{
public:
	TArray<struct FSSMainMenu3rdMenuButtonData>   ButtonData;                                        // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x01E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenu2ndMenuButtonData) == 0x000008, "Wrong alignment on FSSMainMenu2ndMenuButtonData");
static_assert(sizeof(FSSMainMenu2ndMenuButtonData) == 0x0001F8, "Wrong size on FSSMainMenu2ndMenuButtonData");
static_assert(offsetof(FSSMainMenu2ndMenuButtonData, ButtonData) == 0x0001D0, "Member 'FSSMainMenu2ndMenuButtonData::ButtonData' has a wrong offset!");
static_assert(offsetof(FSSMainMenu2ndMenuButtonData, TitleText) == 0x0001E0, "Member 'FSSMainMenu2ndMenuButtonData::TitleText' has a wrong offset!");

// ScriptStruct SS.SSAllAssetData
// 0x0040 (0x0040 - 0x0000)
struct FSSAllAssetData final
{
public:
	TArray<class FName>                           DependencyAssetNamesHard;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DependencyAssetNamesSoft;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferencerAssetNamesHard;                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferencerAssetNamesSoft;                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAllAssetData) == 0x000008, "Wrong alignment on FSSAllAssetData");
static_assert(sizeof(FSSAllAssetData) == 0x000040, "Wrong size on FSSAllAssetData");
static_assert(offsetof(FSSAllAssetData, DependencyAssetNamesHard) == 0x000000, "Member 'FSSAllAssetData::DependencyAssetNamesHard' has a wrong offset!");
static_assert(offsetof(FSSAllAssetData, DependencyAssetNamesSoft) == 0x000010, "Member 'FSSAllAssetData::DependencyAssetNamesSoft' has a wrong offset!");
static_assert(offsetof(FSSAllAssetData, ReferencerAssetNamesHard) == 0x000020, "Member 'FSSAllAssetData::ReferencerAssetNamesHard' has a wrong offset!");
static_assert(offsetof(FSSAllAssetData, ReferencerAssetNamesSoft) == 0x000030, "Member 'FSSAllAssetData::ReferencerAssetNamesSoft' has a wrong offset!");

// ScriptStruct SS.SSCharacterCombativesDesignatedData
// 0x0068 (0x0068 - 0x0000)
struct FSSCharacterCombativesDesignatedData final
{
public:
	TSet<struct FKoratCharacterDataList>          Opponents;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USSCombativesDataAsset*                 Parameter;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesSubDataAsset*              SubParameter;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesVisualDataAsset*           Visual;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterCombativesDesignatedData) == 0x000008, "Wrong alignment on FSSCharacterCombativesDesignatedData");
static_assert(sizeof(FSSCharacterCombativesDesignatedData) == 0x000068, "Wrong size on FSSCharacterCombativesDesignatedData");
static_assert(offsetof(FSSCharacterCombativesDesignatedData, Opponents) == 0x000000, "Member 'FSSCharacterCombativesDesignatedData::Opponents' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDesignatedData, Parameter) == 0x000050, "Member 'FSSCharacterCombativesDesignatedData::Parameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDesignatedData, SubParameter) == 0x000058, "Member 'FSSCharacterCombativesDesignatedData::SubParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDesignatedData, Visual) == 0x000060, "Member 'FSSCharacterCombativesDesignatedData::Visual' has a wrong offset!");

// ScriptStruct SS.SSSurfaceTypeSettingDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSSurfaceTypeSettingDataAssetRecord final
{
public:
	class FString                                 LabelName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSurfaceTypeSettingDataAssetRecord) == 0x000008, "Wrong alignment on FSSSurfaceTypeSettingDataAssetRecord");
static_assert(sizeof(FSSSurfaceTypeSettingDataAssetRecord) == 0x000010, "Wrong size on FSSSurfaceTypeSettingDataAssetRecord");
static_assert(offsetof(FSSSurfaceTypeSettingDataAssetRecord, LabelName) == 0x000000, "Member 'FSSSurfaceTypeSettingDataAssetRecord::LabelName' has a wrong offset!");

// ScriptStruct SS.SSSingletonAssetIndex
// 0x0010 (0x0010 - 0x0000)
struct FSSSingletonAssetIndex final
{
public:
	TArray<struct FSSSingletonAssetIndexMember>   Members;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSingletonAssetIndex) == 0x000008, "Wrong alignment on FSSSingletonAssetIndex");
static_assert(sizeof(FSSSingletonAssetIndex) == 0x000010, "Wrong size on FSSSingletonAssetIndex");
static_assert(offsetof(FSSSingletonAssetIndex, Members) == 0x000000, "Member 'FSSSingletonAssetIndex::Members' has a wrong offset!");

// ScriptStruct SS.SSAiBullet
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSSAiBullet final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiBullet) == 0x000004, "Wrong alignment on FSSAiBullet");
static_assert(sizeof(FSSAiBullet) == 0x00000C, "Wrong size on FSSAiBullet");

// ScriptStruct SS.SSPartsAnimationAsset
// 0x0038 (0x0038 - 0x0000)
struct FSSPartsAnimationAsset final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            Montage;                                           // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPartsAnimationAsset) == 0x000008, "Wrong alignment on FSSPartsAnimationAsset");
static_assert(sizeof(FSSPartsAnimationAsset) == 0x000038, "Wrong size on FSSPartsAnimationAsset");
static_assert(offsetof(FSSPartsAnimationAsset, Tag) == 0x000000, "Member 'FSSPartsAnimationAsset::Tag' has a wrong offset!");
static_assert(offsetof(FSSPartsAnimationAsset, Montage) == 0x000008, "Member 'FSSPartsAnimationAsset::Montage' has a wrong offset!");

// ScriptStruct SS.SSSupportAnimationAsset
// 0x0070 (0x0070 - 0x0000)
struct FSSSupportAnimationAsset final
{
public:
	TSoftObjectPtr<class UAnimMontage>            Montage;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSPartsAnimationAsset>         PartsAnimations;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSupportAnimationAsset) == 0x000008, "Wrong alignment on FSSSupportAnimationAsset");
static_assert(sizeof(FSSSupportAnimationAsset) == 0x000070, "Wrong size on FSSSupportAnimationAsset");
static_assert(offsetof(FSSSupportAnimationAsset, Montage) == 0x000000, "Member 'FSSSupportAnimationAsset::Montage' has a wrong offset!");
static_assert(offsetof(FSSSupportAnimationAsset, LevelSequence) == 0x000030, "Member 'FSSSupportAnimationAsset::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSSSupportAnimationAsset, PartsAnimations) == 0x000060, "Member 'FSSSupportAnimationAsset::PartsAnimations' has a wrong offset!");

// ScriptStruct SS.SSBlastDemoBranchSupportAnimation
// 0x0078 (0x0078 - 0x0000)
struct FSSBlastDemoBranchSupportAnimation final
{
public:
	ESSBlastDemoBranchType                        BranchType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplaceIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSSupportAnimationAsset               AnimationAsset;                                    // 0x0008(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastDemoBranchSupportAnimation) == 0x000008, "Wrong alignment on FSSBlastDemoBranchSupportAnimation");
static_assert(sizeof(FSSBlastDemoBranchSupportAnimation) == 0x000078, "Wrong size on FSSBlastDemoBranchSupportAnimation");
static_assert(offsetof(FSSBlastDemoBranchSupportAnimation, BranchType) == 0x000000, "Member 'FSSBlastDemoBranchSupportAnimation::BranchType' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchSupportAnimation, ReplaceIndex) == 0x000004, "Member 'FSSBlastDemoBranchSupportAnimation::ReplaceIndex' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchSupportAnimation, AnimationAsset) == 0x000008, "Member 'FSSBlastDemoBranchSupportAnimation::AnimationAsset' has a wrong offset!");

// ScriptStruct SS.SSMontageLevelSequence
// 0x00F8 (0x00F8 - 0x0000)
struct FSSMontageLevelSequence final
{
public:
	TSoftObjectPtr<class UAnimMontage>            Montage;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               ActionCameraAsset;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSPartsAnimationAsset>         PartsAnimations;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AddtiveReactionMontage;                            // 0x0078(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ArmorAddtiveReactionMontage;                       // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSSupportAnimationAsset>       SupportAnimations;                                 // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBlastDemoBranchSupportAnimation> BranchSupportAnimations;                           // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMontageLevelSequence) == 0x000008, "Wrong alignment on FSSMontageLevelSequence");
static_assert(sizeof(FSSMontageLevelSequence) == 0x0000F8, "Wrong size on FSSMontageLevelSequence");
static_assert(offsetof(FSSMontageLevelSequence, Montage) == 0x000000, "Member 'FSSMontageLevelSequence::Montage' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, LevelSequence) == 0x000030, "Member 'FSSMontageLevelSequence::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, ActionCameraAsset) == 0x000060, "Member 'FSSMontageLevelSequence::ActionCameraAsset' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, PartsAnimations) == 0x000068, "Member 'FSSMontageLevelSequence::PartsAnimations' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, AddtiveReactionMontage) == 0x000078, "Member 'FSSMontageLevelSequence::AddtiveReactionMontage' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, ArmorAddtiveReactionMontage) == 0x0000A8, "Member 'FSSMontageLevelSequence::ArmorAddtiveReactionMontage' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, SupportAnimations) == 0x0000D8, "Member 'FSSMontageLevelSequence::SupportAnimations' has a wrong offset!");
static_assert(offsetof(FSSMontageLevelSequence, BranchSupportAnimations) == 0x0000E8, "Member 'FSSMontageLevelSequence::BranchSupportAnimations' has a wrong offset!");

// ScriptStruct SS.SSMontageLevelSequenceArray
// 0x0010 (0x0010 - 0x0000)
struct FSSMontageLevelSequenceArray final
{
public:
	TArray<struct FSSMontageLevelSequence>        MontageLevelSequences;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMontageLevelSequenceArray) == 0x000008, "Wrong alignment on FSSMontageLevelSequenceArray");
static_assert(sizeof(FSSMontageLevelSequenceArray) == 0x000010, "Wrong size on FSSMontageLevelSequenceArray");
static_assert(offsetof(FSSMontageLevelSequenceArray, MontageLevelSequences) == 0x000000, "Member 'FSSMontageLevelSequenceArray::MontageLevelSequences' has a wrong offset!");

// ScriptStruct SS.SSSingletonAssetSelect
// 0x0010 (0x0010 - 0x0000)
struct FSSSingletonAssetSelect final
{
public:
	TArray<struct FSSSingletonAssetSelectItem>    Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSingletonAssetSelect) == 0x000008, "Wrong alignment on FSSSingletonAssetSelect");
static_assert(sizeof(FSSSingletonAssetSelect) == 0x000010, "Wrong size on FSSSingletonAssetSelect");
static_assert(offsetof(FSSSingletonAssetSelect, Items) == 0x000000, "Member 'FSSSingletonAssetSelect::Items' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditSocketDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditSocketDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditSocketDataList) == 0x000004, "Wrong alignment on FKoratDRMEditSocketDataList");
static_assert(sizeof(FKoratDRMEditSocketDataList) == 0x000008, "Wrong size on FKoratDRMEditSocketDataList");
static_assert(offsetof(FKoratDRMEditSocketDataList, Key) == 0x000000, "Member 'FKoratDRMEditSocketDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditActionDataList) == 0x000004, "Wrong alignment on FKoratDRMEditActionDataList");
static_assert(sizeof(FKoratDRMEditActionDataList) == 0x000008, "Wrong size on FKoratDRMEditActionDataList");
static_assert(offsetof(FKoratDRMEditActionDataList, Key) == 0x000000, "Member 'FKoratDRMEditActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterFigureDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterFigureDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterFigureDataList) == 0x000004, "Wrong alignment on FKoratCharacterFigureDataList");
static_assert(sizeof(FKoratCharacterFigureDataList) == 0x000008, "Wrong size on FKoratCharacterFigureDataList");
static_assert(offsetof(FKoratCharacterFigureDataList, Key) == 0x000000, "Member 'FKoratCharacterFigureDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditFacialDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditFacialDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditFacialDataList) == 0x000004, "Wrong alignment on FKoratDRMEditFacialDataList");
static_assert(sizeof(FKoratDRMEditFacialDataList) == 0x000008, "Wrong size on FKoratDRMEditFacialDataList");
static_assert(offsetof(FKoratDRMEditFacialDataList, Key) == 0x000000, "Member 'FKoratDRMEditFacialDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDRMEditSituationRebindCharacter
// 0x0060 (0x0060 - 0x0000)
struct FSSDRMEditSituationRebindCharacter final
{
public:
	struct FKoratDRMEditSocketDataList            OffsetSocket;                                      // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditActionDataList            PresetAction;                                      // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditFacialDataList            PresetFacial;                                      // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPresetPlayerSide;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterFigureDataList>  UnavailableFigures;                                // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        UnavailableCharacters;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDRMEditActionDataList>    UnavailableActions;                                // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDRMEditFacialDataList>    UnavailableFacials;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditSituationRebindCharacter) == 0x000008, "Wrong alignment on FSSDRMEditSituationRebindCharacter");
static_assert(sizeof(FSSDRMEditSituationRebindCharacter) == 0x000060, "Wrong size on FSSDRMEditSituationRebindCharacter");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, OffsetSocket) == 0x000000, "Member 'FSSDRMEditSituationRebindCharacter::OffsetSocket' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, PresetAction) == 0x000008, "Member 'FSSDRMEditSituationRebindCharacter::PresetAction' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, PresetFacial) == 0x000010, "Member 'FSSDRMEditSituationRebindCharacter::PresetFacial' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, bPresetPlayerSide) == 0x000018, "Member 'FSSDRMEditSituationRebindCharacter::bPresetPlayerSide' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, UnavailableFigures) == 0x000020, "Member 'FSSDRMEditSituationRebindCharacter::UnavailableFigures' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, UnavailableCharacters) == 0x000030, "Member 'FSSDRMEditSituationRebindCharacter::UnavailableCharacters' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, UnavailableActions) == 0x000040, "Member 'FSSDRMEditSituationRebindCharacter::UnavailableActions' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationRebindCharacter, UnavailableFacials) == 0x000050, "Member 'FSSDRMEditSituationRebindCharacter::UnavailableFacials' has a wrong offset!");

// ScriptStruct SS.KoratBattleConditionalTextInfoData
// 0x000C (0x000C - 0x0000)
struct FKoratBattleConditionalTextInfoData final
{
public:
	int32                                         TableNo;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionIndexNo;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionNo;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleConditionalTextInfoData) == 0x000004, "Wrong alignment on FKoratBattleConditionalTextInfoData");
static_assert(sizeof(FKoratBattleConditionalTextInfoData) == 0x00000C, "Wrong size on FKoratBattleConditionalTextInfoData");
static_assert(offsetof(FKoratBattleConditionalTextInfoData, TableNo) == 0x000000, "Member 'FKoratBattleConditionalTextInfoData::TableNo' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextInfoData, DirectionIndexNo) == 0x000004, "Member 'FKoratBattleConditionalTextInfoData::DirectionIndexNo' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextInfoData, ConditionNo) == 0x000008, "Member 'FKoratBattleConditionalTextInfoData::ConditionNo' has a wrong offset!");

// ScriptStruct SS.KoratBattleConditionalTextList
// 0x0028 (0x0028 - 0x0000)
struct FKoratBattleConditionalTextList final
{
public:
	class FText                                   ConditionalText;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleConditionalTextInfoData> ConditionalTextInfo;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleConditionalTextList) == 0x000008, "Wrong alignment on FKoratBattleConditionalTextList");
static_assert(sizeof(FKoratBattleConditionalTextList) == 0x000028, "Wrong size on FKoratBattleConditionalTextList");
static_assert(offsetof(FKoratBattleConditionalTextList, ConditionalText) == 0x000000, "Member 'FKoratBattleConditionalTextList::ConditionalText' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextList, ConditionalTextInfo) == 0x000018, "Member 'FKoratBattleConditionalTextList::ConditionalTextInfo' has a wrong offset!");

// ScriptStruct SS.KoratDownLoadContentsDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDownLoadContentsDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDownLoadContentsDataList) == 0x000004, "Wrong alignment on FKoratDownLoadContentsDataList");
static_assert(sizeof(FKoratDownLoadContentsDataList) == 0x000008, "Wrong size on FKoratDownLoadContentsDataList");
static_assert(offsetof(FKoratDownLoadContentsDataList, Key) == 0x000000, "Member 'FKoratDownLoadContentsDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSSummonTicketSaveData
// 0x0008 (0x0008 - 0x0000)
struct FSSSummonTicketSaveData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainCount;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSummonTicketSaveData) == 0x000004, "Wrong alignment on FSSSummonTicketSaveData");
static_assert(sizeof(FSSSummonTicketSaveData) == 0x000008, "Wrong size on FSSSummonTicketSaveData");
static_assert(offsetof(FSSSummonTicketSaveData, bEnable) == 0x000000, "Member 'FSSSummonTicketSaveData::bEnable' has a wrong offset!");
static_assert(offsetof(FSSSummonTicketSaveData, RemainCount) == 0x000004, "Member 'FSSSummonTicketSaveData::RemainCount' has a wrong offset!");

// ScriptStruct SS.SSMythicalOrbListSaveData
// 0x0068 (0x0068 - 0x0000)
struct FSSMythicalOrbListSaveData final
{
public:
	TArray<int32>                                 PosessedList;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OrbTotalCount;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WishComeTrueCount;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratDownLoadContentsDataList, struct FSSSummonTicketSaveData> SummonTickets;                                     // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMythicalOrbListSaveData) == 0x000008, "Wrong alignment on FSSMythicalOrbListSaveData");
static_assert(sizeof(FSSMythicalOrbListSaveData) == 0x000068, "Wrong size on FSSMythicalOrbListSaveData");
static_assert(offsetof(FSSMythicalOrbListSaveData, PosessedList) == 0x000000, "Member 'FSSMythicalOrbListSaveData::PosessedList' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbListSaveData, OrbTotalCount) == 0x000010, "Member 'FSSMythicalOrbListSaveData::OrbTotalCount' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbListSaveData, WishComeTrueCount) == 0x000014, "Member 'FSSMythicalOrbListSaveData::WishComeTrueCount' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbListSaveData, SummonTickets) == 0x000018, "Member 'FSSMythicalOrbListSaveData::SummonTickets' has a wrong offset!");

// ScriptStruct SS.FakePersSettings
// 0x0030 (0x0030 - 0x0000)
struct FFakePersSettings final
{
public:
	struct FVector                                EffectiveStartPoint;                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeEndInterpolationDistance;                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFakeCameraSettings>            FakeCamera;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakePersSettings) == 0x000008, "Wrong alignment on FFakePersSettings");
static_assert(sizeof(FFakePersSettings) == 0x000030, "Wrong size on FFakePersSettings");
static_assert(offsetof(FFakePersSettings, EffectiveStartPoint) == 0x000000, "Member 'FFakePersSettings::EffectiveStartPoint' has a wrong offset!");
static_assert(offsetof(FFakePersSettings, FakeEndInterpolationDistance) == 0x000018, "Member 'FFakePersSettings::FakeEndInterpolationDistance' has a wrong offset!");
static_assert(offsetof(FFakePersSettings, FakeCamera) == 0x000020, "Member 'FFakePersSettings::FakeCamera' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineParamBase
// 0x0001 (0x0001 - 0x0000)
struct FKoratFreeTimelineParamBase
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineParamBase) == 0x000001, "Wrong alignment on FKoratFreeTimelineParamBase");
static_assert(sizeof(FKoratFreeTimelineParamBase) == 0x000001, "Wrong size on FKoratFreeTimelineParamBase");

// ScriptStruct SS.ToonLightControlSettingAtCameraSequenceData
// 0x0010 (0x0010 - 0x0000)
struct FToonLightControlSettingAtCameraSequenceData final
{
public:
	bool                                          bDisableRecieveShadow;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTimeOfDisableRecieveShadow;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimeOfDisableRecieveShadow;                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToonLightControlSettingAtCameraSequenceData) == 0x000004, "Wrong alignment on FToonLightControlSettingAtCameraSequenceData");
static_assert(sizeof(FToonLightControlSettingAtCameraSequenceData) == 0x000010, "Wrong size on FToonLightControlSettingAtCameraSequenceData");
static_assert(offsetof(FToonLightControlSettingAtCameraSequenceData, bDisableRecieveShadow) == 0x000000, "Member 'FToonLightControlSettingAtCameraSequenceData::bDisableRecieveShadow' has a wrong offset!");
static_assert(offsetof(FToonLightControlSettingAtCameraSequenceData, InTimeOfDisableRecieveShadow) == 0x000004, "Member 'FToonLightControlSettingAtCameraSequenceData::InTimeOfDisableRecieveShadow' has a wrong offset!");
static_assert(offsetof(FToonLightControlSettingAtCameraSequenceData, OutTimeOfDisableRecieveShadow) == 0x000008, "Member 'FToonLightControlSettingAtCameraSequenceData::OutTimeOfDisableRecieveShadow' has a wrong offset!");

// ScriptStruct SS.KoratSoundHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FKoratSoundHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSoundHandle) == 0x000004, "Wrong alignment on FKoratSoundHandle");
static_assert(sizeof(FKoratSoundHandle) == 0x000004, "Wrong size on FKoratSoundHandle");

// ScriptStruct SS.KoratPatternSubtitlesDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPatternSubtitlesDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPatternSubtitlesDataList) == 0x000004, "Wrong alignment on FKoratPatternSubtitlesDataList");
static_assert(sizeof(FKoratPatternSubtitlesDataList) == 0x000008, "Wrong size on FKoratPatternSubtitlesDataList");
static_assert(offsetof(FKoratPatternSubtitlesDataList, Key) == 0x000000, "Member 'FKoratPatternSubtitlesDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleConversation
// 0x00F0 (0x00F0 - 0x0000)
struct FKoratBattleConversation final
{
public:
	EKoratBattleConversationMode                  BattleConversationMode;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASSCharacter*>                   ConversationCharacter;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpdateNameText;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FillInBlankWord;                                   // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FillInBlankWord2;                                  // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPatternSubtitlesDataList         PatternName;                                       // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBattleVoice;                                     // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EKoratTeamCharacterIndex, class FString> ConversationVoiceMap;                              // 0x0098(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          HiddenSubtitles;                                   // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HiddenSubtitlesOnly2P;                             // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLipsSyncroSupportCharacter;                      // 0x00EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratSoundHandle                      ExternalVoiceSoundHandle;                          // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleConversation) == 0x000008, "Wrong alignment on FKoratBattleConversation");
static_assert(sizeof(FKoratBattleConversation) == 0x0000F0, "Wrong size on FKoratBattleConversation");
static_assert(offsetof(FKoratBattleConversation, BattleConversationMode) == 0x000000, "Member 'FKoratBattleConversation::BattleConversationMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, ConversationCharacter) == 0x000008, "Member 'FKoratBattleConversation::ConversationCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, CharacterID) == 0x000018, "Member 'FKoratBattleConversation::CharacterID' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, UpdateNameText) == 0x000020, "Member 'FKoratBattleConversation::UpdateNameText' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, Text) == 0x000038, "Member 'FKoratBattleConversation::Text' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, FillInBlankWord) == 0x000050, "Member 'FKoratBattleConversation::FillInBlankWord' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, FillInBlankWord2) == 0x000068, "Member 'FKoratBattleConversation::FillInBlankWord2' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, Time) == 0x000080, "Member 'FKoratBattleConversation::Time' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, Volume) == 0x000084, "Member 'FKoratBattleConversation::Volume' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, Interval) == 0x000088, "Member 'FKoratBattleConversation::Interval' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, PatternName) == 0x00008C, "Member 'FKoratBattleConversation::PatternName' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, IsBattleVoice) == 0x000094, "Member 'FKoratBattleConversation::IsBattleVoice' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, ConversationVoiceMap) == 0x000098, "Member 'FKoratBattleConversation::ConversationVoiceMap' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, HiddenSubtitles) == 0x0000E8, "Member 'FKoratBattleConversation::HiddenSubtitles' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, HiddenSubtitlesOnly2P) == 0x0000E9, "Member 'FKoratBattleConversation::HiddenSubtitlesOnly2P' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, IsLipsSyncroSupportCharacter) == 0x0000EA, "Member 'FKoratBattleConversation::IsLipsSyncroSupportCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversation, ExternalVoiceSoundHandle) == 0x0000EC, "Member 'FKoratBattleConversation::ExternalVoiceSoundHandle' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultLines
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleResultLines final
{
public:
	TArray<struct FKoratBattleConversation>       Lines;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleResultLines) == 0x000008, "Wrong alignment on FKoratBattleResultLines");
static_assert(sizeof(FKoratBattleResultLines) == 0x000010, "Wrong size on FKoratBattleResultLines");
static_assert(offsetof(FKoratBattleResultLines, Lines) == 0x000000, "Member 'FKoratBattleResultLines::Lines' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTest
// 0x005F (0x0060 - 0x0001)
struct alignas(0x10) FKoratFreeTimelineTest final : public FKoratFreeTimelineParamBase
{
public:
	uint8                                         Pad_1[0x5F];                                       // 0x0001(0x005F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineTest) == 0x000010, "Wrong alignment on FKoratFreeTimelineTest");
static_assert(sizeof(FKoratFreeTimelineTest) == 0x000060, "Wrong size on FKoratFreeTimelineTest");

// ScriptStruct SS.KoratActionDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratActionDataAssetRecord final
{
public:
	class USSActionDataAsset*                     DataAsset;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlNumId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratActionDataAssetRecord) == 0x000008, "Wrong alignment on FKoratActionDataAssetRecord");
static_assert(sizeof(FKoratActionDataAssetRecord) == 0x000018, "Wrong size on FKoratActionDataAssetRecord");
static_assert(offsetof(FKoratActionDataAssetRecord, DataAsset) == 0x000000, "Member 'FKoratActionDataAssetRecord::DataAsset' has a wrong offset!");
static_assert(offsetof(FKoratActionDataAssetRecord, AlNumId) == 0x000008, "Member 'FKoratActionDataAssetRecord::AlNumId' has a wrong offset!");
static_assert(offsetof(FKoratActionDataAssetRecord, SortId) == 0x000010, "Member 'FKoratActionDataAssetRecord::SortId' has a wrong offset!");

// ScriptStruct SS.KoratSpaceAreaTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSpaceAreaTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpaceAreaTypeDataList) == 0x000004, "Wrong alignment on FKoratSpaceAreaTypeDataList");
static_assert(sizeof(FKoratSpaceAreaTypeDataList) == 0x000008, "Wrong size on FKoratSpaceAreaTypeDataList");
static_assert(offsetof(FKoratSpaceAreaTypeDataList, Key) == 0x000000, "Member 'FKoratSpaceAreaTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratInteractAtbTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratInteractAtbTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractAtbTypeDataList) == 0x000004, "Wrong alignment on FKoratInteractAtbTypeDataList");
static_assert(sizeof(FKoratInteractAtbTypeDataList) == 0x000008, "Wrong size on FKoratInteractAtbTypeDataList");
static_assert(offsetof(FKoratInteractAtbTypeDataList, Key) == 0x000000, "Member 'FKoratInteractAtbTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratSpaceAreaSettingDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratSpaceAreaSettingDataAssetRecord final
{
public:
	struct FKoratSpaceAreaTypeDataList            SpaceAreaType;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratInteractAtbTypeDataList          UseAttributeType;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DebugColor;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpaceAreaSettingDataAssetRecord) == 0x000004, "Wrong alignment on FKoratSpaceAreaSettingDataAssetRecord");
static_assert(sizeof(FKoratSpaceAreaSettingDataAssetRecord) == 0x000018, "Wrong size on FKoratSpaceAreaSettingDataAssetRecord");
static_assert(offsetof(FKoratSpaceAreaSettingDataAssetRecord, SpaceAreaType) == 0x000000, "Member 'FKoratSpaceAreaSettingDataAssetRecord::SpaceAreaType' has a wrong offset!");
static_assert(offsetof(FKoratSpaceAreaSettingDataAssetRecord, UseAttributeType) == 0x000008, "Member 'FKoratSpaceAreaSettingDataAssetRecord::UseAttributeType' has a wrong offset!");
static_assert(offsetof(FKoratSpaceAreaSettingDataAssetRecord, Priority) == 0x000010, "Member 'FKoratSpaceAreaSettingDataAssetRecord::Priority' has a wrong offset!");
static_assert(offsetof(FKoratSpaceAreaSettingDataAssetRecord, DebugColor) == 0x000014, "Member 'FKoratSpaceAreaSettingDataAssetRecord::DebugColor' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowDialogButtonData
// 0x0020 (0x0020 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowDialogButtonData final
{
public:
	ESSDramaticBattleCutEditorUIWindowDialogButtonFunctionType Function;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowDialogButtonData) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowDialogButtonData");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowDialogButtonData) == 0x000020, "Wrong size on FSSDramaticBattleCutEditorUIWindowDialogButtonData");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDialogButtonData, Function) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowDialogButtonData::Function' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDialogButtonData, Text) == 0x000008, "Member 'FSSDramaticBattleCutEditorUIWindowDialogButtonData::Text' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowDialogData
// 0x0040 (0x0040 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowDialogData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ContextText;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSSDramaticBattleCutEditorUIWindowDialogButtonData> Buttons;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowDialogData) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowDialogData");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowDialogData) == 0x000040, "Wrong size on FSSDramaticBattleCutEditorUIWindowDialogData");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDialogData, TitleText) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowDialogData::TitleText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDialogData, ContextText) == 0x000018, "Member 'FSSDramaticBattleCutEditorUIWindowDialogData::ContextText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDialogData, Buttons) == 0x000030, "Member 'FSSDramaticBattleCutEditorUIWindowDialogData::Buttons' has a wrong offset!");

// ScriptStruct SS.KoratAttackCollisionParameter
// 0x0068 (0x0068 - 0x0000)
struct FKoratAttackCollisionParameter final
{
public:
	EKoratCombativesCollisionType                 CollisionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartBoneName;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBoneName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAttackCollisionParameter) == 0x000008, "Wrong alignment on FKoratAttackCollisionParameter");
static_assert(sizeof(FKoratAttackCollisionParameter) == 0x000068, "Wrong size on FKoratAttackCollisionParameter");
static_assert(offsetof(FKoratAttackCollisionParameter, CollisionType) == 0x000000, "Member 'FKoratAttackCollisionParameter::CollisionType' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, StartBoneName) == 0x000004, "Member 'FKoratAttackCollisionParameter::StartBoneName' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, EndBoneName) == 0x00000C, "Member 'FKoratAttackCollisionParameter::EndBoneName' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, Radius) == 0x000014, "Member 'FKoratAttackCollisionParameter::Radius' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, HalfHeight) == 0x000018, "Member 'FKoratAttackCollisionParameter::HalfHeight' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, BoxExtent) == 0x000020, "Member 'FKoratAttackCollisionParameter::BoxExtent' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, Location) == 0x000038, "Member 'FKoratAttackCollisionParameter::Location' has a wrong offset!");
static_assert(offsetof(FKoratAttackCollisionParameter, Rotation) == 0x000050, "Member 'FKoratAttackCollisionParameter::Rotation' has a wrong offset!");

// ScriptStruct SS.KoratCharacterEffectColorSetData
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterEffectColorSetData final
{
public:
	class USSEffectColorDataAsset*                ColorData;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterEffectColorSetData) == 0x000008, "Wrong alignment on FKoratCharacterEffectColorSetData");
static_assert(sizeof(FKoratCharacterEffectColorSetData) == 0x000008, "Wrong size on FKoratCharacterEffectColorSetData");
static_assert(offsetof(FKoratCharacterEffectColorSetData, ColorData) == 0x000000, "Member 'FKoratCharacterEffectColorSetData::ColorData' has a wrong offset!");

// ScriptStruct SS.KoratRateOfHitBackAtArmorEndured
// 0x0010 (0x0010 - 0x0000)
struct FKoratRateOfHitBackAtArmorEndured final
{
public:
	float                                         RateAtSuperArmor;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateAtHyperArmor;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateAtSparkingArmor;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateAtReactionArmor;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRateOfHitBackAtArmorEndured) == 0x000004, "Wrong alignment on FKoratRateOfHitBackAtArmorEndured");
static_assert(sizeof(FKoratRateOfHitBackAtArmorEndured) == 0x000010, "Wrong size on FKoratRateOfHitBackAtArmorEndured");
static_assert(offsetof(FKoratRateOfHitBackAtArmorEndured, RateAtSuperArmor) == 0x000000, "Member 'FKoratRateOfHitBackAtArmorEndured::RateAtSuperArmor' has a wrong offset!");
static_assert(offsetof(FKoratRateOfHitBackAtArmorEndured, RateAtHyperArmor) == 0x000004, "Member 'FKoratRateOfHitBackAtArmorEndured::RateAtHyperArmor' has a wrong offset!");
static_assert(offsetof(FKoratRateOfHitBackAtArmorEndured, RateAtSparkingArmor) == 0x000008, "Member 'FKoratRateOfHitBackAtArmorEndured::RateAtSparkingArmor' has a wrong offset!");
static_assert(offsetof(FKoratRateOfHitBackAtArmorEndured, RateAtReactionArmor) == 0x00000C, "Member 'FKoratRateOfHitBackAtArmorEndured::RateAtReactionArmor' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionSlideMovementParameter
// 0x0014 (0x0014 - 0x0000)
struct FKoratBlowReactionSlideMovementParameter final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionSlideMovementParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionSlideMovementParameter");
static_assert(sizeof(FKoratBlowReactionSlideMovementParameter) == 0x000014, "Wrong size on FKoratBlowReactionSlideMovementParameter");
static_assert(offsetof(FKoratBlowReactionSlideMovementParameter, MaxSpeed) == 0x000000, "Member 'FKoratBlowReactionSlideMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionSlideMovementParameter, GravityScale) == 0x000004, "Member 'FKoratBlowReactionSlideMovementParameter::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionSlideMovementParameter, MaxAcceleration) == 0x000008, "Member 'FKoratBlowReactionSlideMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionSlideMovementParameter, GroundFriction) == 0x00000C, "Member 'FKoratBlowReactionSlideMovementParameter::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionSlideMovementParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratBlowReactionSlideMovementParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionUkemiStandUpMovementParameter
// 0x001C (0x001C - 0x0000)
struct FKoratBlowReactionUkemiStandUpMovementParameter final
{
public:
	bool                                          IsSpeedReset;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddMoveTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionUkemiStandUpMovementParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionUkemiStandUpMovementParameter");
static_assert(sizeof(FKoratBlowReactionUkemiStandUpMovementParameter) == 0x00001C, "Wrong size on FKoratBlowReactionUkemiStandUpMovementParameter");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, IsSpeedReset) == 0x000000, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::IsSpeedReset' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, MaxSpeed) == 0x000004, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, MaxAddMoveTime) == 0x000008, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, GravityScale) == 0x00000C, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, MaxAcceleration) == 0x000010, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, GroundFriction) == 0x000014, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpMovementParameter, BrakingDeceleration) == 0x000018, "Member 'FKoratBlowReactionUkemiStandUpMovementParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionUkemiStandUpParameter
// 0x003C (0x003C - 0x0000)
struct FKoratBlowReactionUkemiStandUpParameter final
{
public:
	float                                         InputTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionUkemiStandUpMovementParameter MovementParameterIN;                               // 0x0004(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionUkemiStandUpMovementParameter MovementParameterOT;                               // 0x0020(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionUkemiStandUpParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionUkemiStandUpParameter");
static_assert(sizeof(FKoratBlowReactionUkemiStandUpParameter) == 0x00003C, "Wrong size on FKoratBlowReactionUkemiStandUpParameter");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpParameter, InputTime) == 0x000000, "Member 'FKoratBlowReactionUkemiStandUpParameter::InputTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpParameter, MovementParameterIN) == 0x000004, "Member 'FKoratBlowReactionUkemiStandUpParameter::MovementParameterIN' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionUkemiStandUpParameter, MovementParameterOT) == 0x000020, "Member 'FKoratBlowReactionUkemiStandUpParameter::MovementParameterOT' has a wrong offset!");

// ScriptStruct SS.KoratMoveStandUpMovementParameter
// 0x0014 (0x0014 - 0x0000)
struct FKoratMoveStandUpMovementParameter final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddMoveTime;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMoveStandUpMovementParameter) == 0x000004, "Wrong alignment on FKoratMoveStandUpMovementParameter");
static_assert(sizeof(FKoratMoveStandUpMovementParameter) == 0x000014, "Wrong size on FKoratMoveStandUpMovementParameter");
static_assert(offsetof(FKoratMoveStandUpMovementParameter, MaxSpeed) == 0x000000, "Member 'FKoratMoveStandUpMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpMovementParameter, MaxAddMoveTime) == 0x000004, "Member 'FKoratMoveStandUpMovementParameter::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpMovementParameter, MaxAcceleration) == 0x000008, "Member 'FKoratMoveStandUpMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpMovementParameter, GroundFriction) == 0x00000C, "Member 'FKoratMoveStandUpMovementParameter::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpMovementParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratMoveStandUpMovementParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratMoveStandUpParameter
// 0x0030 (0x0030 - 0x0000)
struct FKoratMoveStandUpParameter final
{
public:
	class UCurveFloat*                            TurnCurve;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMoveStandUpMovementParameter     MovementParameterIN;                               // 0x0008(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratMoveStandUpMovementParameter     MovementParameterOT;                               // 0x001C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMoveStandUpParameter) == 0x000008, "Wrong alignment on FKoratMoveStandUpParameter");
static_assert(sizeof(FKoratMoveStandUpParameter) == 0x000030, "Wrong size on FKoratMoveStandUpParameter");
static_assert(offsetof(FKoratMoveStandUpParameter, TurnCurve) == 0x000000, "Member 'FKoratMoveStandUpParameter::TurnCurve' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpParameter, MovementParameterIN) == 0x000008, "Member 'FKoratMoveStandUpParameter::MovementParameterIN' has a wrong offset!");
static_assert(offsetof(FKoratMoveStandUpParameter, MovementParameterOT) == 0x00001C, "Member 'FKoratMoveStandUpParameter::MovementParameterOT' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionDashUkemiMovementParameter
// 0x0014 (0x0014 - 0x0000)
struct FKoratBlowReactionDashUkemiMovementParameter final
{
public:
	bool                                          IsSpeedReset;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddMoveTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionDashUkemiMovementParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionDashUkemiMovementParameter");
static_assert(sizeof(FKoratBlowReactionDashUkemiMovementParameter) == 0x000014, "Wrong size on FKoratBlowReactionDashUkemiMovementParameter");
static_assert(offsetof(FKoratBlowReactionDashUkemiMovementParameter, IsSpeedReset) == 0x000000, "Member 'FKoratBlowReactionDashUkemiMovementParameter::IsSpeedReset' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiMovementParameter, MaxSpeed) == 0x000004, "Member 'FKoratBlowReactionDashUkemiMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiMovementParameter, MaxAddMoveTime) == 0x000008, "Member 'FKoratBlowReactionDashUkemiMovementParameter::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiMovementParameter, MaxAcceleration) == 0x00000C, "Member 'FKoratBlowReactionDashUkemiMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiMovementParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratBlowReactionDashUkemiMovementParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataDragonDashParameter
// 0x0160 (0x0160 - 0x0000)
struct FKoratCharacterDataDragonDashParameter final
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterIN;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterLP;                               // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterBK;                               // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterOT;                               // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationSpeed;                                     // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationInitialSpeed;                              // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAcceleration;                              // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               NearRotationSpeed;                                 // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               NearRotationInitialSpeed;                          // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               NearRotationAcceleration;                          // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationSpeedSwitchDistance;                       // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeedInterpolateRange;                     // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPitchMin;                                  // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPitchMax;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDirectionInputAngleBack;                     // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         INAnimTimeRemainingFractionToLP;                   // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BKInvalidInputTimeLP;                              // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestartInputTimeOT;                                // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeedINOT;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeedBK;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsZMoveOnInputFront;                              // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZRotationSpeedOnInputFront;                        // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End0Distance;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End0Angle;                                         // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End1Speed;                                         // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End1Time;                                          // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostIN;                                          // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostLP;                                          // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostBK;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataDragonDashParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataDragonDashParameter");
static_assert(sizeof(FKoratCharacterDataDragonDashParameter) == 0x000160, "Wrong size on FKoratCharacterDataDragonDashParameter");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, MovementParameterIN) == 0x000000, "Member 'FKoratCharacterDataDragonDashParameter::MovementParameterIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, MovementParameterLP) == 0x000020, "Member 'FKoratCharacterDataDragonDashParameter::MovementParameterLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, MovementParameterBK) == 0x000040, "Member 'FKoratCharacterDataDragonDashParameter::MovementParameterBK' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, MovementParameterOT) == 0x000060, "Member 'FKoratCharacterDataDragonDashParameter::MovementParameterOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationSpeed) == 0x000080, "Member 'FKoratCharacterDataDragonDashParameter::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationInitialSpeed) == 0x000098, "Member 'FKoratCharacterDataDragonDashParameter::RotationInitialSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationAcceleration) == 0x0000B0, "Member 'FKoratCharacterDataDragonDashParameter::RotationAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, NearRotationSpeed) == 0x0000C8, "Member 'FKoratCharacterDataDragonDashParameter::NearRotationSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, NearRotationInitialSpeed) == 0x0000E0, "Member 'FKoratCharacterDataDragonDashParameter::NearRotationInitialSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, NearRotationAcceleration) == 0x0000F8, "Member 'FKoratCharacterDataDragonDashParameter::NearRotationAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationSpeedSwitchDistance) == 0x000110, "Member 'FKoratCharacterDataDragonDashParameter::RotationSpeedSwitchDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationSpeedInterpolateRange) == 0x000114, "Member 'FKoratCharacterDataDragonDashParameter::RotationSpeedInterpolateRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationPitchMin) == 0x000118, "Member 'FKoratCharacterDataDragonDashParameter::RotationPitchMin' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RotationPitchMax) == 0x00011C, "Member 'FKoratCharacterDataDragonDashParameter::RotationPitchMax' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, ChangeDirectionInputAngleBack) == 0x000120, "Member 'FKoratCharacterDataDragonDashParameter::ChangeDirectionInputAngleBack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, INAnimTimeRemainingFractionToLP) == 0x000124, "Member 'FKoratCharacterDataDragonDashParameter::INAnimTimeRemainingFractionToLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, BKInvalidInputTimeLP) == 0x000128, "Member 'FKoratCharacterDataDragonDashParameter::BKInvalidInputTimeLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, RestartInputTimeOT) == 0x00012C, "Member 'FKoratCharacterDataDragonDashParameter::RestartInputTimeOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, TurnSpeedINOT) == 0x000130, "Member 'FKoratCharacterDataDragonDashParameter::TurnSpeedINOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, TurnSpeedBK) == 0x000134, "Member 'FKoratCharacterDataDragonDashParameter::TurnSpeedBK' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, bIsZMoveOnInputFront) == 0x000138, "Member 'FKoratCharacterDataDragonDashParameter::bIsZMoveOnInputFront' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, ZRotationSpeedOnInputFront) == 0x00013C, "Member 'FKoratCharacterDataDragonDashParameter::ZRotationSpeedOnInputFront' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, End0Distance) == 0x000140, "Member 'FKoratCharacterDataDragonDashParameter::End0Distance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, End0Angle) == 0x000144, "Member 'FKoratCharacterDataDragonDashParameter::End0Angle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, End1Speed) == 0x000148, "Member 'FKoratCharacterDataDragonDashParameter::End1Speed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, End1Time) == 0x00014C, "Member 'FKoratCharacterDataDragonDashParameter::End1Time' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, SpCostIN) == 0x000150, "Member 'FKoratCharacterDataDragonDashParameter::SpCostIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, SpCostLP) == 0x000154, "Member 'FKoratCharacterDataDragonDashParameter::SpCostLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonDashParameter, SpCostBK) == 0x000158, "Member 'FKoratCharacterDataDragonDashParameter::SpCostBK' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionDashUkemiParameter
// 0x0188 (0x0188 - 0x0000)
struct FKoratBlowReactionDashUkemiParameter final
{
public:
	float                                         InputStartTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHitRemainTime;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionDashUkemiMovementParameter MovementParameter;                                 // 0x0008(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpCost;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashParameter DragonDashParameter;                               // 0x0020(0x0160)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DragonDashEndAdditionalTime;                       // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlowReactionDashUkemiParameter) == 0x000008, "Wrong alignment on FKoratBlowReactionDashUkemiParameter");
static_assert(sizeof(FKoratBlowReactionDashUkemiParameter) == 0x000188, "Wrong size on FKoratBlowReactionDashUkemiParameter");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, InputStartTime) == 0x000000, "Member 'FKoratBlowReactionDashUkemiParameter::InputStartTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, StartHitRemainTime) == 0x000004, "Member 'FKoratBlowReactionDashUkemiParameter::StartHitRemainTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, MovementParameter) == 0x000008, "Member 'FKoratBlowReactionDashUkemiParameter::MovementParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, SpCost) == 0x00001C, "Member 'FKoratBlowReactionDashUkemiParameter::SpCost' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, DragonDashParameter) == 0x000020, "Member 'FKoratBlowReactionDashUkemiParameter::DragonDashParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionDashUkemiParameter, DragonDashEndAdditionalTime) == 0x000180, "Member 'FKoratBlowReactionDashUkemiParameter::DragonDashEndAdditionalTime' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionBrakeParameter
// 0x0024 (0x0024 - 0x0000)
struct FKoratBlowReactionBrakeParameter final
{
public:
	float                                         InputStartTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputEndTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionUkemiStandUpMovementParameter MovementParameter;                                 // 0x0008(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionBrakeParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionBrakeParameter");
static_assert(sizeof(FKoratBlowReactionBrakeParameter) == 0x000024, "Wrong size on FKoratBlowReactionBrakeParameter");
static_assert(offsetof(FKoratBlowReactionBrakeParameter, InputStartTime) == 0x000000, "Member 'FKoratBlowReactionBrakeParameter::InputStartTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionBrakeParameter, InputEndTime) == 0x000004, "Member 'FKoratBlowReactionBrakeParameter::InputEndTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionBrakeParameter, MovementParameter) == 0x000008, "Member 'FKoratBlowReactionBrakeParameter::MovementParameter' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionWallUkemiMovementParameter
// 0x0014 (0x0014 - 0x0000)
struct FKoratBlowReactionWallUkemiMovementParameter final
{
public:
	bool                                          IsSpeedReset;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAddMoveTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionWallUkemiMovementParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionWallUkemiMovementParameter");
static_assert(sizeof(FKoratBlowReactionWallUkemiMovementParameter) == 0x000014, "Wrong size on FKoratBlowReactionWallUkemiMovementParameter");
static_assert(offsetof(FKoratBlowReactionWallUkemiMovementParameter, IsSpeedReset) == 0x000000, "Member 'FKoratBlowReactionWallUkemiMovementParameter::IsSpeedReset' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiMovementParameter, MaxSpeed) == 0x000004, "Member 'FKoratBlowReactionWallUkemiMovementParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiMovementParameter, MaxAddMoveTime) == 0x000008, "Member 'FKoratBlowReactionWallUkemiMovementParameter::MaxAddMoveTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiMovementParameter, MaxAcceleration) == 0x00000C, "Member 'FKoratBlowReactionWallUkemiMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiMovementParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratBlowReactionWallUkemiMovementParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionWallUkemiParameter
// 0x0020 (0x0020 - 0x0000)
struct FKoratBlowReactionWallUkemiParameter final
{
public:
	float                                         InputStartTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputEndTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHitRemainTime;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionWallUkemiMovementParameter MovementParameter;                                 // 0x000C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionWallUkemiParameter) == 0x000004, "Wrong alignment on FKoratBlowReactionWallUkemiParameter");
static_assert(sizeof(FKoratBlowReactionWallUkemiParameter) == 0x000020, "Wrong size on FKoratBlowReactionWallUkemiParameter");
static_assert(offsetof(FKoratBlowReactionWallUkemiParameter, InputStartTime) == 0x000000, "Member 'FKoratBlowReactionWallUkemiParameter::InputStartTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiParameter, InputEndTime) == 0x000004, "Member 'FKoratBlowReactionWallUkemiParameter::InputEndTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiParameter, StartHitRemainTime) == 0x000008, "Member 'FKoratBlowReactionWallUkemiParameter::StartHitRemainTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionWallUkemiParameter, MovementParameter) == 0x00000C, "Member 'FKoratBlowReactionWallUkemiParameter::MovementParameter' has a wrong offset!");

// ScriptStruct SS.KoratStunReactionParameter
// 0x0004 (0x0004 - 0x0000)
struct FKoratStunReactionParameter final
{
public:
	float                                         DownToRevivalTime;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratStunReactionParameter) == 0x000004, "Wrong alignment on FKoratStunReactionParameter");
static_assert(sizeof(FKoratStunReactionParameter) == 0x000004, "Wrong size on FKoratStunReactionParameter");
static_assert(offsetof(FKoratStunReactionParameter, DownToRevivalTime) == 0x000000, "Member 'FKoratStunReactionParameter::DownToRevivalTime' has a wrong offset!");

// ScriptStruct SS.KoratBlowReactionParameter
// 0x0288 (0x0288 - 0x0000)
struct FKoratBlowReactionParameter final
{
public:
	float                                         BlowToFallSpeed;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowToFallCheckTime;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowToIdleSpeed;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowToIdleCheckTime;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionSlideMovementParameter SlideMovementParameter;                            // 0x0010(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchSpeedForDown;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideToDownSpeed;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownToRevivalTime;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitFloorToBoundSpeed;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitFloorToSlideSpeed;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundScalePerpendicular;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundScaleParallel;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionUkemiStandUpParameter UkemiStandUpParameter;                             // 0x0040(0x003C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StandUpDashInputTime;                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMoveStandUpParameter             MoveStandUpParameter;                              // 0x0080(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionBrakeParameter       BrakeParameter;                                    // 0x00B0(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionWallUkemiParameter   WallUkemiParameter;                                // 0x00D4(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlowReactionDashUkemiParameter   DashUkemiParameter;                                // 0x00F8(0x0188)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratStunReactionParameter            StunReactionParameter;                             // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReactionLevel;                                     // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlowReactionParameter) == 0x000008, "Wrong alignment on FKoratBlowReactionParameter");
static_assert(sizeof(FKoratBlowReactionParameter) == 0x000288, "Wrong size on FKoratBlowReactionParameter");
static_assert(offsetof(FKoratBlowReactionParameter, BlowToFallSpeed) == 0x000000, "Member 'FKoratBlowReactionParameter::BlowToFallSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BlowToFallCheckTime) == 0x000004, "Member 'FKoratBlowReactionParameter::BlowToFallCheckTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BlowToIdleSpeed) == 0x000008, "Member 'FKoratBlowReactionParameter::BlowToIdleSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BlowToIdleCheckTime) == 0x00000C, "Member 'FKoratBlowReactionParameter::BlowToIdleCheckTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, SlideMovementParameter) == 0x000010, "Member 'FKoratBlowReactionParameter::SlideMovementParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, PitchSpeedForDown) == 0x000024, "Member 'FKoratBlowReactionParameter::PitchSpeedForDown' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, SlideToDownSpeed) == 0x000028, "Member 'FKoratBlowReactionParameter::SlideToDownSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, DownToRevivalTime) == 0x00002C, "Member 'FKoratBlowReactionParameter::DownToRevivalTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, HitFloorToBoundSpeed) == 0x000030, "Member 'FKoratBlowReactionParameter::HitFloorToBoundSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, HitFloorToSlideSpeed) == 0x000034, "Member 'FKoratBlowReactionParameter::HitFloorToSlideSpeed' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BoundScalePerpendicular) == 0x000038, "Member 'FKoratBlowReactionParameter::BoundScalePerpendicular' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BoundScaleParallel) == 0x00003C, "Member 'FKoratBlowReactionParameter::BoundScaleParallel' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, UkemiStandUpParameter) == 0x000040, "Member 'FKoratBlowReactionParameter::UkemiStandUpParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, StandUpDashInputTime) == 0x00007C, "Member 'FKoratBlowReactionParameter::StandUpDashInputTime' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, MoveStandUpParameter) == 0x000080, "Member 'FKoratBlowReactionParameter::MoveStandUpParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, BrakeParameter) == 0x0000B0, "Member 'FKoratBlowReactionParameter::BrakeParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, WallUkemiParameter) == 0x0000D4, "Member 'FKoratBlowReactionParameter::WallUkemiParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, DashUkemiParameter) == 0x0000F8, "Member 'FKoratBlowReactionParameter::DashUkemiParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, StunReactionParameter) == 0x000280, "Member 'FKoratBlowReactionParameter::StunReactionParameter' has a wrong offset!");
static_assert(offsetof(FKoratBlowReactionParameter, ReactionLevel) == 0x000284, "Member 'FKoratBlowReactionParameter::ReactionLevel' has a wrong offset!");

// ScriptStruct SS.KoratHitBackMovementData
// 0x02E0 (0x02E0 - 0x0000)
struct FKoratHitBackMovementData final
{
public:
	bool                                          IsSpeedReset;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepMaxHoldTime;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalAngle;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalAngle;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleToReduceTilt;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratRateOfHitBackAtArmorEndured      HitBackRate;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBlowReactionParameter            BlowReaction;                                      // 0x0040(0x0288)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   AlNumId;                                           // 0x02C8(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitBackMovementData) == 0x000008, "Wrong alignment on FKoratHitBackMovementData");
static_assert(sizeof(FKoratHitBackMovementData) == 0x0002E0, "Wrong size on FKoratHitBackMovementData");
static_assert(offsetof(FKoratHitBackMovementData, IsSpeedReset) == 0x000000, "Member 'FKoratHitBackMovementData::IsSpeedReset' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, Duration) == 0x000004, "Member 'FKoratHitBackMovementData::Duration' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, InitialSpeed) == 0x000008, "Member 'FKoratHitBackMovementData::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, MaxSpeed) == 0x00000C, "Member 'FKoratHitBackMovementData::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, StepMaxHoldTime) == 0x000010, "Member 'FKoratHitBackMovementData::StepMaxHoldTime' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, GravityScale) == 0x000014, "Member 'FKoratHitBackMovementData::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, MaxAcceleration) == 0x000018, "Member 'FKoratHitBackMovementData::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, GroundFriction) == 0x00001C, "Member 'FKoratHitBackMovementData::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, BrakingDeceleration) == 0x000020, "Member 'FKoratHitBackMovementData::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, VerticalAngle) == 0x000024, "Member 'FKoratHitBackMovementData::VerticalAngle' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, HorizontalAngle) == 0x000028, "Member 'FKoratHitBackMovementData::HorizontalAngle' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, AngleToReduceTilt) == 0x00002C, "Member 'FKoratHitBackMovementData::AngleToReduceTilt' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, HitBackRate) == 0x000030, "Member 'FKoratHitBackMovementData::HitBackRate' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, BlowReaction) == 0x000040, "Member 'FKoratHitBackMovementData::BlowReaction' has a wrong offset!");
static_assert(offsetof(FKoratHitBackMovementData, AlNumId) == 0x0002C8, "Member 'FKoratHitBackMovementData::AlNumId' has a wrong offset!");

// ScriptStruct SS.KoratHitStopData
// 0x0014 (0x0014 - 0x0000)
struct FKoratHitStopData final
{
public:
	float                                         HitSelfStop;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSelfTimeDilation;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitEnemyStop;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitEnemyTimeDilation;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopDelay;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitStopData) == 0x000004, "Wrong alignment on FKoratHitStopData");
static_assert(sizeof(FKoratHitStopData) == 0x000014, "Wrong size on FKoratHitStopData");
static_assert(offsetof(FKoratHitStopData, HitSelfStop) == 0x000000, "Member 'FKoratHitStopData::HitSelfStop' has a wrong offset!");
static_assert(offsetof(FKoratHitStopData, HitSelfTimeDilation) == 0x000004, "Member 'FKoratHitStopData::HitSelfTimeDilation' has a wrong offset!");
static_assert(offsetof(FKoratHitStopData, HitEnemyStop) == 0x000008, "Member 'FKoratHitStopData::HitEnemyStop' has a wrong offset!");
static_assert(offsetof(FKoratHitStopData, HitEnemyTimeDilation) == 0x00000C, "Member 'FKoratHitStopData::HitEnemyTimeDilation' has a wrong offset!");
static_assert(offsetof(FKoratHitStopData, HitStopDelay) == 0x000010, "Member 'FKoratHitStopData::HitStopDelay' has a wrong offset!");

// ScriptStruct SS.KoratCombativesKeyDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCombativesKeyDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCombativesKeyDataList) == 0x000004, "Wrong alignment on FKoratCombativesKeyDataList");
static_assert(sizeof(FKoratCombativesKeyDataList) == 0x000008, "Wrong size on FKoratCombativesKeyDataList");
static_assert(offsetof(FKoratCombativesKeyDataList, Key) == 0x000000, "Member 'FKoratCombativesKeyDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratAdditionalDamageInfo
// 0x000C (0x000C - 0x0000)
struct FKoratAdditionalDamageInfo final
{
public:
	int32                                         BuffIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCombativesKeyDataList            AdditionalCombativesKey;                           // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAdditionalDamageInfo) == 0x000004, "Wrong alignment on FKoratAdditionalDamageInfo");
static_assert(sizeof(FKoratAdditionalDamageInfo) == 0x00000C, "Wrong size on FKoratAdditionalDamageInfo");
static_assert(offsetof(FKoratAdditionalDamageInfo, BuffIndex) == 0x000000, "Member 'FKoratAdditionalDamageInfo::BuffIndex' has a wrong offset!");
static_assert(offsetof(FKoratAdditionalDamageInfo, AdditionalCombativesKey) == 0x000004, "Member 'FKoratAdditionalDamageInfo::AdditionalCombativesKey' has a wrong offset!");

// ScriptStruct SS.KoratReceivedDamageParameter
// 0x0AC0 (0x0AC0 - 0x0000)
struct FKoratReceivedDamageParameter final
{
public:
	struct FKoratActionDataList                   Action;                                            // 0x0000(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionAttackType                        AttackType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSettleAttackType                       SettleAttackType;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionHitCheckType                      HitCheckType;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBulletActor;                                    // 0x000B(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReactiveGuardableBullet;                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsImpossibleGuardBullet;                          // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratReactionDirection                       AttackDirection;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bColorSetIsValid;                                  // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterEffectColorSetData      ColorSet;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Explosion;                                         // 0x0018(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect ExplosionCancel;                                   // 0x00E8(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletGroupExplosion GroupExplosion;                                    // 0x01B8(0x0110)(Edit, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuard;                                // 0x02C8(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardValid;                           // 0x02F8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuard;                                   // 0x02FC(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardBreak;                           // 0x0320(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardBreakValid;                      // 0x0350(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardBreak;                              // 0x0354(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceHit;                                  // 0x0378(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightHitValid;                             // 0x03A8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightHit;                                     // 0x03AC(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceState;                                // 0x03D0(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorBreakLevel;                                   // 0x0400(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0404(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 PowerDpMultiplier;                                 // 0x0408(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         Shave;                                             // 0x0418(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoKnockDownAttack;                                // 0x041C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoftAttack;                                       // 0x041D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDamageReactionDataList           DamageStand;                                       // 0x0420(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              DamageMovement;                                    // 0x0428(0x02E0)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              GuardMovement;                                     // 0x0708(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      HitStop;                                           // 0x09E8(0x0014)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      GuardStop;                                         // 0x09FC(0x0014)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      RushOffsetStop;                                    // 0x0A10(0x0014)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      CollisionOffsetStop;                               // 0x0A24(0x0014)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      ExImpactStop;                                      // 0x0A38(0x0014)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAvoidHistep;                                      // 0x0A4C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuffAvoidable;                                    // 0x0A4D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptGuard;                                   // 0x0A4E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptReflect;                                 // 0x0A4F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackPowerMagnification;                          // 0x0A50(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USSCharacterBuff*                       Buff;                                              // 0x0A58(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A60[0x40];                                     // 0x0A60(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratAdditionalDamageInfo             AdditionalDamage;                                  // 0x0AA0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearchAfterHit;                            // 0x0AAC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AAD[0x3];                                      // 0x0AAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceZSearchEffectTime;                           // 0x0AB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeEnable;                              // 0x0AB4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeLastHitOnly;                         // 0x0AB5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeWreck;                               // 0x0AB6(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScratchCostumeEnable;                             // 0x0AB7(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraZoomType                               ExplosionHitLevel;                                 // 0x0AB8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReaction;                                    // 0x0AB9(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ABA[0x1];                                      // 0x0ABA(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSelfishnessAvoidable;                             // 0x0ABB(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackCollision;                                  // 0x0ABC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ABD[0x3];                                      // 0x0ABD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratReceivedDamageParameter) == 0x000008, "Wrong alignment on FKoratReceivedDamageParameter");
static_assert(sizeof(FKoratReceivedDamageParameter) == 0x000AC0, "Wrong size on FKoratReceivedDamageParameter");
static_assert(offsetof(FKoratReceivedDamageParameter, Action) == 0x000000, "Member 'FKoratReceivedDamageParameter::Action' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, AttackType) == 0x000008, "Member 'FKoratReceivedDamageParameter::AttackType' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, SettleAttackType) == 0x000009, "Member 'FKoratReceivedDamageParameter::SettleAttackType' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, HitCheckType) == 0x00000A, "Member 'FKoratReceivedDamageParameter::HitCheckType' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsBulletActor) == 0x00000B, "Member 'FKoratReceivedDamageParameter::bIsBulletActor' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsReactiveGuardableBullet) == 0x00000C, "Member 'FKoratReceivedDamageParameter::bIsReactiveGuardableBullet' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsImpossibleGuardBullet) == 0x00000D, "Member 'FKoratReceivedDamageParameter::bIsImpossibleGuardBullet' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, AttackDirection) == 0x00000E, "Member 'FKoratReceivedDamageParameter::AttackDirection' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bColorSetIsValid) == 0x00000F, "Member 'FKoratReceivedDamageParameter::bColorSetIsValid' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ColorSet) == 0x000010, "Member 'FKoratReceivedDamageParameter::ColorSet' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, Explosion) == 0x000018, "Member 'FKoratReceivedDamageParameter::Explosion' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ExplosionCancel) == 0x0000E8, "Member 'FKoratReceivedDamageParameter::ExplosionCancel' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, GroupExplosion) == 0x0001B8, "Member 'FKoratReceivedDamageParameter::GroupExplosion' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, LevelSequenceGuard) == 0x0002C8, "Member 'FKoratReceivedDamageParameter::LevelSequenceGuard' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsPointLightGuardValid) == 0x0002F8, "Member 'FKoratReceivedDamageParameter::bIsPointLightGuardValid' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, PointLightGuard) == 0x0002FC, "Member 'FKoratReceivedDamageParameter::PointLightGuard' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, LevelSequenceGuardBreak) == 0x000320, "Member 'FKoratReceivedDamageParameter::LevelSequenceGuardBreak' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsPointLightGuardBreakValid) == 0x000350, "Member 'FKoratReceivedDamageParameter::bIsPointLightGuardBreakValid' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, PointLightGuardBreak) == 0x000354, "Member 'FKoratReceivedDamageParameter::PointLightGuardBreak' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, LevelSequenceHit) == 0x000378, "Member 'FKoratReceivedDamageParameter::LevelSequenceHit' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bIsPointLightHitValid) == 0x0003A8, "Member 'FKoratReceivedDamageParameter::bIsPointLightHitValid' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, PointLightHit) == 0x0003AC, "Member 'FKoratReceivedDamageParameter::PointLightHit' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, LevelSequenceState) == 0x0003D0, "Member 'FKoratReceivedDamageParameter::LevelSequenceState' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ArmorBreakLevel) == 0x000400, "Member 'FKoratReceivedDamageParameter::ArmorBreakLevel' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, Power) == 0x000404, "Member 'FKoratReceivedDamageParameter::Power' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, PowerDpMultiplier) == 0x000408, "Member 'FKoratReceivedDamageParameter::PowerDpMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, Shave) == 0x000418, "Member 'FKoratReceivedDamageParameter::Shave' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bNoKnockDownAttack) == 0x00041C, "Member 'FKoratReceivedDamageParameter::bNoKnockDownAttack' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bSoftAttack) == 0x00041D, "Member 'FKoratReceivedDamageParameter::bSoftAttack' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, DamageStand) == 0x000420, "Member 'FKoratReceivedDamageParameter::DamageStand' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, DamageMovement) == 0x000428, "Member 'FKoratReceivedDamageParameter::DamageMovement' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, GuardMovement) == 0x000708, "Member 'FKoratReceivedDamageParameter::GuardMovement' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, HitStop) == 0x0009E8, "Member 'FKoratReceivedDamageParameter::HitStop' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, GuardStop) == 0x0009FC, "Member 'FKoratReceivedDamageParameter::GuardStop' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, RushOffsetStop) == 0x000A10, "Member 'FKoratReceivedDamageParameter::RushOffsetStop' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, CollisionOffsetStop) == 0x000A24, "Member 'FKoratReceivedDamageParameter::CollisionOffsetStop' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ExImpactStop) == 0x000A38, "Member 'FKoratReceivedDamageParameter::ExImpactStop' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bAvoidHistep) == 0x000A4C, "Member 'FKoratReceivedDamageParameter::bAvoidHistep' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bBuffAvoidable) == 0x000A4D, "Member 'FKoratReceivedDamageParameter::bBuffAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bInterruptGuard) == 0x000A4E, "Member 'FKoratReceivedDamageParameter::bInterruptGuard' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bInterruptReflect) == 0x000A4F, "Member 'FKoratReceivedDamageParameter::bInterruptReflect' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, AttackPowerMagnification) == 0x000A50, "Member 'FKoratReceivedDamageParameter::AttackPowerMagnification' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, Buff) == 0x000A58, "Member 'FKoratReceivedDamageParameter::Buff' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, AdditionalDamage) == 0x000AA0, "Member 'FKoratReceivedDamageParameter::AdditionalDamage' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bReduceZSearchAfterHit) == 0x000AAC, "Member 'FKoratReceivedDamageParameter::bReduceZSearchAfterHit' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ReduceZSearchEffectTime) == 0x000AB0, "Member 'FKoratReceivedDamageParameter::ReduceZSearchEffectTime' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bDamageCostumeEnable) == 0x000AB4, "Member 'FKoratReceivedDamageParameter::bDamageCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bDamageCostumeLastHitOnly) == 0x000AB5, "Member 'FKoratReceivedDamageParameter::bDamageCostumeLastHitOnly' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bDamageCostumeWreck) == 0x000AB6, "Member 'FKoratReceivedDamageParameter::bDamageCostumeWreck' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bScratchCostumeEnable) == 0x000AB7, "Member 'FKoratReceivedDamageParameter::bScratchCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, ExplosionHitLevel) == 0x000AB8, "Member 'FKoratReceivedDamageParameter::ExplosionHitLevel' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bForceReaction) == 0x000AB9, "Member 'FKoratReceivedDamageParameter::bForceReaction' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bSelfishnessAvoidable) == 0x000ABB, "Member 'FKoratReceivedDamageParameter::bSelfishnessAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratReceivedDamageParameter, bAttackCollision) == 0x000ABC, "Member 'FKoratReceivedDamageParameter::bAttackCollision' has a wrong offset!");

// ScriptStruct SS.KoratGaveDamageParameter
// 0x0B50 (0x0B50 - 0x0000)
struct FKoratGaveDamageParameter final
{
public:
	class ASSCharacter*                           GaveDamageCharacter;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReceivedDamageActor;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   Action;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitTransform;                                      // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratReceivedDamageParameter          ReceivedDamageParameter;                           // 0x0088(0x0AC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsBlastFinished;                                   // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratGaveDamageParameter) == 0x000010, "Wrong alignment on FKoratGaveDamageParameter");
static_assert(sizeof(FKoratGaveDamageParameter) == 0x000B50, "Wrong size on FKoratGaveDamageParameter");
static_assert(offsetof(FKoratGaveDamageParameter, GaveDamageCharacter) == 0x000000, "Member 'FKoratGaveDamageParameter::GaveDamageCharacter' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, ReceivedDamageActor) == 0x000008, "Member 'FKoratGaveDamageParameter::ReceivedDamageActor' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, Action) == 0x000010, "Member 'FKoratGaveDamageParameter::Action' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, HitTransform) == 0x000020, "Member 'FKoratGaveDamageParameter::HitTransform' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, HitBoneName) == 0x000080, "Member 'FKoratGaveDamageParameter::HitBoneName' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, ReceivedDamageParameter) == 0x000088, "Member 'FKoratGaveDamageParameter::ReceivedDamageParameter' has a wrong offset!");
static_assert(offsetof(FKoratGaveDamageParameter, IsBlastFinished) == 0x000B48, "Member 'FKoratGaveDamageParameter::IsBlastFinished' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditBaseTextDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditBaseTextDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditBaseTextDataList) == 0x000004, "Wrong alignment on FKoratDRMEditBaseTextDataList");
static_assert(sizeof(FKoratDRMEditBaseTextDataList) == 0x000008, "Wrong size on FKoratDRMEditBaseTextDataList");
static_assert(offsetof(FKoratDRMEditBaseTextDataList, Key) == 0x000000, "Member 'FKoratDRMEditBaseTextDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditWordTextDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditWordTextDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditWordTextDataList) == 0x000004, "Wrong alignment on FKoratDRMEditWordTextDataList");
static_assert(sizeof(FKoratDRMEditWordTextDataList) == 0x000008, "Wrong size on FKoratDRMEditWordTextDataList");
static_assert(offsetof(FKoratDRMEditWordTextDataList, Key) == 0x000000, "Member 'FKoratDRMEditWordTextDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBugEatingString
// 0x0018 (0x0018 - 0x0000)
struct FKoratBugEatingString final
{
public:
	struct FKoratDRMEditBaseTextDataList          OriginalText;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditWordTextDataList          ReplaceWord;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditWordTextDataList          ReplaceWord2;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBugEatingString) == 0x000004, "Wrong alignment on FKoratBugEatingString");
static_assert(sizeof(FKoratBugEatingString) == 0x000018, "Wrong size on FKoratBugEatingString");
static_assert(offsetof(FKoratBugEatingString, OriginalText) == 0x000000, "Member 'FKoratBugEatingString::OriginalText' has a wrong offset!");
static_assert(offsetof(FKoratBugEatingString, ReplaceWord) == 0x000008, "Member 'FKoratBugEatingString::ReplaceWord' has a wrong offset!");
static_assert(offsetof(FKoratBugEatingString, ReplaceWord2) == 0x000010, "Member 'FKoratBugEatingString::ReplaceWord2' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditPictureDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditPictureDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditPictureDataList) == 0x000004, "Wrong alignment on FKoratDRMEditPictureDataList");
static_assert(sizeof(FKoratDRMEditPictureDataList) == 0x000008, "Wrong size on FKoratDRMEditPictureDataList");
static_assert(offsetof(FKoratDRMEditPictureDataList, Key) == 0x000000, "Member 'FKoratDRMEditPictureDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleTimeSliceData
// 0x0038 (0x0038 - 0x0000)
struct FKoratBattleTimeSliceData final
{
public:
	class USSEventSceneDEDataAsset*               EventSceneData;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBugEatingString                  DisplayText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           TitleImageData;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMData;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EditSceneId;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTimeSliceData) == 0x000008, "Wrong alignment on FKoratBattleTimeSliceData");
static_assert(sizeof(FKoratBattleTimeSliceData) == 0x000038, "Wrong size on FKoratBattleTimeSliceData");
static_assert(offsetof(FKoratBattleTimeSliceData, EventSceneData) == 0x000000, "Member 'FKoratBattleTimeSliceData::EventSceneData' has a wrong offset!");
static_assert(offsetof(FKoratBattleTimeSliceData, DisplayText) == 0x000008, "Member 'FKoratBattleTimeSliceData::DisplayText' has a wrong offset!");
static_assert(offsetof(FKoratBattleTimeSliceData, TitleImageData) == 0x000020, "Member 'FKoratBattleTimeSliceData::TitleImageData' has a wrong offset!");
static_assert(offsetof(FKoratBattleTimeSliceData, BGMData) == 0x000028, "Member 'FKoratBattleTimeSliceData::BGMData' has a wrong offset!");
static_assert(offsetof(FKoratBattleTimeSliceData, EditSceneId) == 0x000030, "Member 'FKoratBattleTimeSliceData::EditSceneId' has a wrong offset!");

// ScriptStruct SS.KoratDramaticTimeSlices
// 0x00C0 (0x00C0 - 0x0000)
struct FKoratDramaticTimeSlices final
{
public:
	struct FKoratBattleTimeSliceData              OpeningEventData;                                  // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBattleTimeSliceData              NormalWinEventData;                                // 0x0038(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBattleTimeSliceData              NormalLoseEventData;                               // 0x0070(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   OpeningEditSceneId;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NormalWinEditSceneId;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NormalLoseEditSceneId;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticTimeSlices) == 0x000008, "Wrong alignment on FKoratDramaticTimeSlices");
static_assert(sizeof(FKoratDramaticTimeSlices) == 0x0000C0, "Wrong size on FKoratDramaticTimeSlices");
static_assert(offsetof(FKoratDramaticTimeSlices, OpeningEventData) == 0x000000, "Member 'FKoratDramaticTimeSlices::OpeningEventData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSlices, NormalWinEventData) == 0x000038, "Member 'FKoratDramaticTimeSlices::NormalWinEventData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSlices, NormalLoseEventData) == 0x000070, "Member 'FKoratDramaticTimeSlices::NormalLoseEventData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSlices, OpeningEditSceneId) == 0x0000A8, "Member 'FKoratDramaticTimeSlices::OpeningEditSceneId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSlices, NormalWinEditSceneId) == 0x0000B0, "Member 'FKoratDramaticTimeSlices::NormalWinEditSceneId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSlices, NormalLoseEditSceneId) == 0x0000B8, "Member 'FKoratDramaticTimeSlices::NormalLoseEditSceneId' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingCondition
// 0x0034 (0x0034 - 0x0000)
struct FKoratBattleDirectingCondition final
{
public:
	EKoratBattleDirectingTrigger                  Trigger;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingConditionTargetType      TargetType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharactersPos;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingConditionTargetType      NumericalValueTargetType;                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumericalValue;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingInequalitySign           InequalitySign;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingCharacterStateType       CharacterState;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingAction                   BattleDirectingAction;                             // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerCharactersPos;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyCharactersPos;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                ChangeCharacter;                                   // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionAttackType                        AttackType;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingKnockDownType            KnockDownType;                                     // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratValid                                   bEditable_TargetType;                              // 0x0026(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_CharactersPos;                           // 0x0027(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_NumericalValueTargetType;                // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_NumericalValue;                          // 0x0029(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_InequalitySign;                          // 0x002A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_CharacterState;                          // 0x002B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_BattleDirectingAction;                   // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_PlayerCharactersPos;                     // 0x002D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_EnemyCharactersPos;                      // 0x002E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_ChangeCharacter;                         // 0x002F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_AttackType;                              // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_KnockDownType;                           // 0x0031(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingCondition) == 0x000004, "Wrong alignment on FKoratBattleDirectingCondition");
static_assert(sizeof(FKoratBattleDirectingCondition) == 0x000034, "Wrong size on FKoratBattleDirectingCondition");
static_assert(offsetof(FKoratBattleDirectingCondition, Trigger) == 0x000000, "Member 'FKoratBattleDirectingCondition::Trigger' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, TargetType) == 0x000001, "Member 'FKoratBattleDirectingCondition::TargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, CharactersPos) == 0x000004, "Member 'FKoratBattleDirectingCondition::CharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, NumericalValueTargetType) == 0x000008, "Member 'FKoratBattleDirectingCondition::NumericalValueTargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, NumericalValue) == 0x00000C, "Member 'FKoratBattleDirectingCondition::NumericalValue' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, InequalitySign) == 0x000010, "Member 'FKoratBattleDirectingCondition::InequalitySign' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, CharacterState) == 0x000011, "Member 'FKoratBattleDirectingCondition::CharacterState' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, BattleDirectingAction) == 0x000012, "Member 'FKoratBattleDirectingCondition::BattleDirectingAction' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, PlayerCharactersPos) == 0x000014, "Member 'FKoratBattleDirectingCondition::PlayerCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, EnemyCharactersPos) == 0x000018, "Member 'FKoratBattleDirectingCondition::EnemyCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, ChangeCharacter) == 0x00001C, "Member 'FKoratBattleDirectingCondition::ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, AttackType) == 0x000024, "Member 'FKoratBattleDirectingCondition::AttackType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, KnockDownType) == 0x000025, "Member 'FKoratBattleDirectingCondition::KnockDownType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_TargetType) == 0x000026, "Member 'FKoratBattleDirectingCondition::bEditable_TargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_CharactersPos) == 0x000027, "Member 'FKoratBattleDirectingCondition::bEditable_CharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_NumericalValueTargetType) == 0x000028, "Member 'FKoratBattleDirectingCondition::bEditable_NumericalValueTargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_NumericalValue) == 0x000029, "Member 'FKoratBattleDirectingCondition::bEditable_NumericalValue' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_InequalitySign) == 0x00002A, "Member 'FKoratBattleDirectingCondition::bEditable_InequalitySign' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_CharacterState) == 0x00002B, "Member 'FKoratBattleDirectingCondition::bEditable_CharacterState' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_BattleDirectingAction) == 0x00002C, "Member 'FKoratBattleDirectingCondition::bEditable_BattleDirectingAction' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_PlayerCharactersPos) == 0x00002D, "Member 'FKoratBattleDirectingCondition::bEditable_PlayerCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_EnemyCharactersPos) == 0x00002E, "Member 'FKoratBattleDirectingCondition::bEditable_EnemyCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_ChangeCharacter) == 0x00002F, "Member 'FKoratBattleDirectingCondition::bEditable_ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_AttackType) == 0x000030, "Member 'FKoratBattleDirectingCondition::bEditable_AttackType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingCondition, bEditable_KnockDownType) == 0x000031, "Member 'FKoratBattleDirectingCondition::bEditable_KnockDownType' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFEventBlockSaveData
// 0x0005 (0x0005 - 0x0000)
struct FSSDragonAdventureIFEventBlockSaveData final
{
public:
	EKoratUnLockMode                              UnlockInfo;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDragonOrbInEffect;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnlockedByDragonOrb;                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0003(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFEventBlockSaveData) == 0x000001, "Wrong alignment on FSSDragonAdventureIFEventBlockSaveData");
static_assert(sizeof(FSSDragonAdventureIFEventBlockSaveData) == 0x000005, "Wrong size on FSSDragonAdventureIFEventBlockSaveData");
static_assert(offsetof(FSSDragonAdventureIFEventBlockSaveData, UnlockInfo) == 0x000000, "Member 'FSSDragonAdventureIFEventBlockSaveData::UnlockInfo' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventBlockSaveData, bIsDragonOrbInEffect) == 0x000001, "Member 'FSSDragonAdventureIFEventBlockSaveData::bIsDragonOrbInEffect' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventBlockSaveData, bIsUnlockedByDragonOrb) == 0x000002, "Member 'FSSDragonAdventureIFEventBlockSaveData::bIsUnlockedByDragonOrb' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventBlockSaveData, UnLockDetail) == 0x000003, "Member 'FSSDragonAdventureIFEventBlockSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFEventSaveData
// 0x0018 (0x0018 - 0x0000)
struct FSSDragonAdventureIFEventSaveData final
{
public:
	bool                                          bReadOnlyResultIndex;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultIndex;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUnLockMode                              UnlockInfo;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NormalClearCount;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnotherClearCount;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUnLockMode                              EpisodeRewardUnlockInfo;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0015(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFEventSaveData) == 0x000004, "Wrong alignment on FSSDragonAdventureIFEventSaveData");
static_assert(sizeof(FSSDragonAdventureIFEventSaveData) == 0x000018, "Wrong size on FSSDragonAdventureIFEventSaveData");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, bReadOnlyResultIndex) == 0x000000, "Member 'FSSDragonAdventureIFEventSaveData::bReadOnlyResultIndex' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, ResultIndex) == 0x000004, "Member 'FSSDragonAdventureIFEventSaveData::ResultIndex' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, UnlockInfo) == 0x000008, "Member 'FSSDragonAdventureIFEventSaveData::UnlockInfo' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, NormalClearCount) == 0x00000C, "Member 'FSSDragonAdventureIFEventSaveData::NormalClearCount' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, AnotherClearCount) == 0x000010, "Member 'FSSDragonAdventureIFEventSaveData::AnotherClearCount' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, EpisodeRewardUnlockInfo) == 0x000014, "Member 'FSSDragonAdventureIFEventSaveData::EpisodeRewardUnlockInfo' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventSaveData, UnLockDetail) == 0x000015, "Member 'FSSDragonAdventureIFEventSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFCharacterSaveData
// 0x00B8 (0x00B8 - 0x0000)
struct FSSDragonAdventureIFCharacterSaveData final
{
public:
	EKoratUnLockMode                              UnlockInfo;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSSDragonAdventureIFEventBlockSaveData> EventBlockDataMap;                                 // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FSSDragonAdventureIFEventSaveData> EventDataMap;                                      // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	class FName                                   LastEventBlockName;                                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasShowActivity;                                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x00B1(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFCharacterSaveData) == 0x000008, "Wrong alignment on FSSDragonAdventureIFCharacterSaveData");
static_assert(sizeof(FSSDragonAdventureIFCharacterSaveData) == 0x0000B8, "Wrong size on FSSDragonAdventureIFCharacterSaveData");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, UnlockInfo) == 0x000000, "Member 'FSSDragonAdventureIFCharacterSaveData::UnlockInfo' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, EventBlockDataMap) == 0x000008, "Member 'FSSDragonAdventureIFCharacterSaveData::EventBlockDataMap' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, EventDataMap) == 0x000058, "Member 'FSSDragonAdventureIFCharacterSaveData::EventDataMap' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, LastEventBlockName) == 0x0000A8, "Member 'FSSDragonAdventureIFCharacterSaveData::LastEventBlockName' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, bWasShowActivity) == 0x0000B0, "Member 'FSSDragonAdventureIFCharacterSaveData::bWasShowActivity' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFCharacterSaveData, UnLockDetail) == 0x0000B1, "Member 'FSSDragonAdventureIFCharacterSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFSaveData
// 0x0058 (0x0058 - 0x0000)
struct FSSDragonAdventureIFSaveData final
{
public:
	TMap<struct FKoratCharacterDataList, struct FSSDragonAdventureIFCharacterSaveData> CharacterData;                                     // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bDifficultyEasy;                                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFSaveData) == 0x000008, "Wrong alignment on FSSDragonAdventureIFSaveData");
static_assert(sizeof(FSSDragonAdventureIFSaveData) == 0x000058, "Wrong size on FSSDragonAdventureIFSaveData");
static_assert(offsetof(FSSDragonAdventureIFSaveData, CharacterData) == 0x000000, "Member 'FSSDragonAdventureIFSaveData::CharacterData' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFSaveData, bDifficultyEasy) == 0x000050, "Member 'FSSDragonAdventureIFSaveData::bDifficultyEasy' has a wrong offset!");

// ScriptStruct SS.KoratTransformCopyTargetInfo
// 0x0038 (0x0038 - 0x0000)
struct FKoratTransformCopyTargetInfo final
{
public:
	TSoftObjectPtr<class AActor>                  ReferenceActor;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, Interp, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTransformCopyTargetInfo) == 0x000008, "Wrong alignment on FKoratTransformCopyTargetInfo");
static_assert(sizeof(FKoratTransformCopyTargetInfo) == 0x000038, "Wrong size on FKoratTransformCopyTargetInfo");
static_assert(offsetof(FKoratTransformCopyTargetInfo, ReferenceActor) == 0x000000, "Member 'FKoratTransformCopyTargetInfo::ReferenceActor' has a wrong offset!");
static_assert(offsetof(FKoratTransformCopyTargetInfo, SocketName) == 0x000030, "Member 'FKoratTransformCopyTargetInfo::SocketName' has a wrong offset!");

// ScriptStruct SS.SSEffectFigureTransformDataRecord
// 0x00B0 (0x00B0 - 0x0000)
struct FSSEffectFigureTransformDataRecord final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          TransformList;                                     // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEffectFigureTransformDataRecord) == 0x000010, "Wrong alignment on FSSEffectFigureTransformDataRecord");
static_assert(sizeof(FSSEffectFigureTransformDataRecord) == 0x0000B0, "Wrong size on FSSEffectFigureTransformDataRecord");
static_assert(offsetof(FSSEffectFigureTransformDataRecord, Transform) == 0x000000, "Member 'FSSEffectFigureTransformDataRecord::Transform' has a wrong offset!");
static_assert(offsetof(FSSEffectFigureTransformDataRecord, TransformList) == 0x000060, "Member 'FSSEffectFigureTransformDataRecord::TransformList' has a wrong offset!");

// ScriptStruct SS.KoratAiCommandDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAiCommandDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAiCommandDataList) == 0x000004, "Wrong alignment on FKoratAiCommandDataList");
static_assert(sizeof(FKoratAiCommandDataList) == 0x000008, "Wrong size on FKoratAiCommandDataList");
static_assert(offsetof(FKoratAiCommandDataList, Key) == 0x000000, "Member 'FKoratAiCommandDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveDataTeamingCharacter
// 0x0018 (0x0018 - 0x0000)
struct FSSBattleSetupUserDataSaveDataTeamingCharacter final
{
public:
	TArray<struct FKoratCharacterDataList>        TeamMembers;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EKoratAllComLevelSetting                      ComLevel;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleSetupUserDataSaveDataTeamingCharacter) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveDataTeamingCharacter");
static_assert(sizeof(FSSBattleSetupUserDataSaveDataTeamingCharacter) == 0x000018, "Wrong size on FSSBattleSetupUserDataSaveDataTeamingCharacter");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataTeamingCharacter, TeamMembers) == 0x000000, "Member 'FSSBattleSetupUserDataSaveDataTeamingCharacter::TeamMembers' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataTeamingCharacter, ComLevel) == 0x000010, "Member 'FSSBattleSetupUserDataSaveDataTeamingCharacter::ComLevel' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneCompileDescriptionCO
// 0x0060 (0x0060 - 0x0000)
struct FSSEventSceneSubsceneCompileDescriptionCO final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Camera;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Subscene;                                          // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubsceneCompileDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneCompileDescriptionCO");
static_assert(sizeof(FSSEventSceneSubsceneCompileDescriptionCO) == 0x000060, "Wrong size on FSSEventSceneSubsceneCompileDescriptionCO");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionCO, Camera) == 0x000000, "Member 'FSSEventSceneSubsceneCompileDescriptionCO::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionCO, Subscene) == 0x000030, "Member 'FSSEventSceneSubsceneCompileDescriptionCO::Subscene' has a wrong offset!");

// ScriptStruct SS.KoratUIActionDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratUIActionDataAssetRecord final
{
public:
	class USSUIActionDataAsset*                   DataAsset;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUIActionDataAssetRecord) == 0x000008, "Wrong alignment on FKoratUIActionDataAssetRecord");
static_assert(sizeof(FKoratUIActionDataAssetRecord) == 0x000008, "Wrong size on FKoratUIActionDataAssetRecord");
static_assert(offsetof(FKoratUIActionDataAssetRecord, DataAsset) == 0x000000, "Member 'FKoratUIActionDataAssetRecord::DataAsset' has a wrong offset!");

// ScriptStruct SS.KoratRewardDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratRewardDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRewardDataList) == 0x000004, "Wrong alignment on FKoratRewardDataList");
static_assert(sizeof(FKoratRewardDataList) == 0x000008, "Wrong size on FKoratRewardDataList");
static_assert(offsetof(FKoratRewardDataList, Key) == 0x000000, "Member 'FKoratRewardDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleRewardRandom
// 0x000C (0x000C - 0x0000)
struct FKoratBattleRewardRandom final
{
public:
	struct FKoratRewardDataList                   RewardData;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleRewardRandom) == 0x000004, "Wrong alignment on FKoratBattleRewardRandom");
static_assert(sizeof(FKoratBattleRewardRandom) == 0x00000C, "Wrong size on FKoratBattleRewardRandom");
static_assert(offsetof(FKoratBattleRewardRandom, RewardData) == 0x000000, "Member 'FKoratBattleRewardRandom::RewardData' has a wrong offset!");
static_assert(offsetof(FKoratBattleRewardRandom, Probability) == 0x000008, "Member 'FKoratBattleRewardRandom::Probability' has a wrong offset!");

// ScriptStruct SS.SSEffectUpdateToonPointLightParam
// 0x0170 (0x0170 - 0x0000)
struct FSSEffectUpdateToonPointLightParam final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratEffectToonPointLightGroupType           GroupType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratEffectToonPointLightTargetType          TargetType;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightColor;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  Owner;                                             // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceDisableDynamicShadows;                        // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyValue;                                    // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WiggleStrength;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseStrength;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLightWeight;                                   // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseShadowWeight;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableWiggle;                                    // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSLightingPositonMethod                      EvaluationSpace;                                   // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEvaluationSpaceTrack;                          // 0x0122(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123[0x5];                                      // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WiggleMinMax;                                      // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TransformRootActor;                                // 0x0138(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckOwnerVisibility;                             // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectUpdateToonPointLightParam) == 0x000010, "Wrong alignment on FSSEffectUpdateToonPointLightParam");
static_assert(sizeof(FSSEffectUpdateToonPointLightParam) == 0x000170, "Wrong size on FSSEffectUpdateToonPointLightParam");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, KeyName) == 0x000000, "Member 'FSSEffectUpdateToonPointLightParam::KeyName' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, GroupType) == 0x000010, "Member 'FSSEffectUpdateToonPointLightParam::GroupType' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, TargetType) == 0x000011, "Member 'FSSEffectUpdateToonPointLightParam::TargetType' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, Priority) == 0x000014, "Member 'FSSEffectUpdateToonPointLightParam::Priority' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, Transform) == 0x000020, "Member 'FSSEffectUpdateToonPointLightParam::Transform' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, LightColor) == 0x000098, "Member 'FSSEffectUpdateToonPointLightParam::LightColor' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, ShadowColor) == 0x0000A8, "Member 'FSSEffectUpdateToonPointLightParam::ShadowColor' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, Intensity) == 0x0000B8, "Member 'FSSEffectUpdateToonPointLightParam::Intensity' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, Owner) == 0x0000C0, "Member 'FSSEffectUpdateToonPointLightParam::Owner' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, RelativeLocation) == 0x0000F0, "Member 'FSSEffectUpdateToonPointLightParam::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, ForceDisableDynamicShadows) == 0x000108, "Member 'FSSEffectUpdateToonPointLightParam::ForceDisableDynamicShadows' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, FrequencyValue) == 0x00010C, "Member 'FSSEffectUpdateToonPointLightParam::FrequencyValue' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, WiggleStrength) == 0x000110, "Member 'FSSEffectUpdateToonPointLightParam::WiggleStrength' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, EaseStrength) == 0x000114, "Member 'FSSEffectUpdateToonPointLightParam::EaseStrength' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, BaseLightWeight) == 0x000118, "Member 'FSSEffectUpdateToonPointLightParam::BaseLightWeight' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, BaseShadowWeight) == 0x00011C, "Member 'FSSEffectUpdateToonPointLightParam::BaseShadowWeight' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, bDisableWiggle) == 0x000120, "Member 'FSSEffectUpdateToonPointLightParam::bDisableWiggle' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, EvaluationSpace) == 0x000121, "Member 'FSSEffectUpdateToonPointLightParam::EvaluationSpace' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, bHasEvaluationSpaceTrack) == 0x000122, "Member 'FSSEffectUpdateToonPointLightParam::bHasEvaluationSpaceTrack' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, WiggleMinMax) == 0x000128, "Member 'FSSEffectUpdateToonPointLightParam::WiggleMinMax' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, TransformRootActor) == 0x000138, "Member 'FSSEffectUpdateToonPointLightParam::TransformRootActor' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointLightParam, bCheckOwnerVisibility) == 0x000168, "Member 'FSSEffectUpdateToonPointLightParam::bCheckOwnerVisibility' has a wrong offset!");

// ScriptStruct SS.SSDRMEditCharacterUniqueActionResource
// 0x0038 (0x0038 - 0x0000)
struct FSSDRMEditCharacterUniqueActionResource final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratMLSDataAsset*                     MLS;                                               // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditCharacterUniqueActionResource) == 0x000008, "Wrong alignment on FSSDRMEditCharacterUniqueActionResource");
static_assert(sizeof(FSSDRMEditCharacterUniqueActionResource) == 0x000038, "Wrong size on FSSDRMEditCharacterUniqueActionResource");
static_assert(offsetof(FSSDRMEditCharacterUniqueActionResource, LevelSequence) == 0x000000, "Member 'FSSDRMEditCharacterUniqueActionResource::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSSDRMEditCharacterUniqueActionResource, MLS) == 0x000030, "Member 'FSSDRMEditCharacterUniqueActionResource::MLS' has a wrong offset!");

// ScriptStruct SS.SSDRMEditCharacterUniqueAction
// 0x0050 (0x0050 - 0x0000)
struct FSSDRMEditCharacterUniqueAction final
{
public:
	TMap<struct FKoratCharacterDataList, struct FSSDRMEditCharacterUniqueActionResource> Resources;                                         // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditCharacterUniqueAction) == 0x000008, "Wrong alignment on FSSDRMEditCharacterUniqueAction");
static_assert(sizeof(FSSDRMEditCharacterUniqueAction) == 0x000050, "Wrong size on FSSDRMEditCharacterUniqueAction");
static_assert(offsetof(FSSDRMEditCharacterUniqueAction, Resources) == 0x000000, "Member 'FSSDRMEditCharacterUniqueAction::Resources' has a wrong offset!");

// ScriptStruct SS.KoratBattleConversationSet
// 0x0018 (0x0018 - 0x0000)
struct FKoratBattleConversationSet final
{
public:
	EKoratBattleConversationSetMode               BattleConversationSetMode;                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleConversation>       BattleConversation;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleConversationSet) == 0x000008, "Wrong alignment on FKoratBattleConversationSet");
static_assert(sizeof(FKoratBattleConversationSet) == 0x000018, "Wrong size on FKoratBattleConversationSet");
static_assert(offsetof(FKoratBattleConversationSet, BattleConversationSetMode) == 0x000000, "Member 'FKoratBattleConversationSet::BattleConversationSetMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleConversationSet, BattleConversation) == 0x000008, "Member 'FKoratBattleConversationSet::BattleConversation' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveDataSameCharacterEquip
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleSetupUserDataSaveDataSameCharacterEquip final
{
public:
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataSaveDataSameCharacterEquip) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveDataSameCharacterEquip");
static_assert(sizeof(FSSBattleSetupUserDataSaveDataSameCharacterEquip) == 0x000010, "Wrong size on FSSBattleSetupUserDataSaveDataSameCharacterEquip");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataSameCharacterEquip, EquipItems) == 0x000000, "Member 'FSSBattleSetupUserDataSaveDataSameCharacterEquip::EquipItems' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveDataCharacterEquip
// 0x0020 (0x0020 - 0x0000)
struct FSSBattleSetupUserDataSaveDataCharacterEquip final
{
public:
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBattleSetupUserDataSaveDataSameCharacterEquip> SameCharacterEquip;                                // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataSaveDataCharacterEquip) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveDataCharacterEquip");
static_assert(sizeof(FSSBattleSetupUserDataSaveDataCharacterEquip) == 0x000020, "Wrong size on FSSBattleSetupUserDataSaveDataCharacterEquip");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataCharacterEquip, EquipItems) == 0x000000, "Member 'FSSBattleSetupUserDataSaveDataCharacterEquip::EquipItems' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataCharacterEquip, SameCharacterEquip) == 0x000010, "Member 'FSSBattleSetupUserDataSaveDataCharacterEquip::SameCharacterEquip' has a wrong offset!");

// ScriptStruct SS.KoratAuraTransformOffset
// 0x0070 (0x0070 - 0x0000)
struct FKoratAuraTransformOffset final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUse;                                              // 0x0060(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAuraTransformOffset) == 0x000010, "Wrong alignment on FKoratAuraTransformOffset");
static_assert(sizeof(FKoratAuraTransformOffset) == 0x000070, "Wrong size on FKoratAuraTransformOffset");
static_assert(offsetof(FKoratAuraTransformOffset, Transform) == 0x000000, "Member 'FKoratAuraTransformOffset::Transform' has a wrong offset!");
static_assert(offsetof(FKoratAuraTransformOffset, bUse) == 0x000060, "Member 'FKoratAuraTransformOffset::bUse' has a wrong offset!");

// ScriptStruct SS.SSMapAreaEditorResourcePoolInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSMapAreaEditorResourcePoolInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMapAreaEditorResourcePoolInfo) == 0x000008, "Wrong alignment on FSSMapAreaEditorResourcePoolInfo");
static_assert(sizeof(FSSMapAreaEditorResourcePoolInfo) == 0x000010, "Wrong size on FSSMapAreaEditorResourcePoolInfo");

// ScriptStruct SS.SSMovieSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSMovieSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMovieSaveData) == 0x000001, "Wrong alignment on FSSMovieSaveData");
static_assert(sizeof(FSSMovieSaveData) == 0x000003, "Wrong size on FSSMovieSaveData");
static_assert(offsetof(FSSMovieSaveData, UnLockMode) == 0x000000, "Member 'FSSMovieSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSMovieSaveData, UnLockDetail) == 0x000001, "Member 'FSSMovieSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSOptionControlParam
// 0x0040 (0x0040 - 0x0000)
struct FSSOptionControlParam final
{
public:
	bool                                          bCameraLRReverse;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraLRSpeed;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraUDReverse;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraUDSpeed;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVibration;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Adaptivetrigger;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OperationType;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconType;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PadIconType;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlStyle;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PanelControlType;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraControlType;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactInputType;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdaptivetriggerMax;                                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHanded;                                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraType;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionControlParam) == 0x000004, "Wrong alignment on FSSOptionControlParam");
static_assert(sizeof(FSSOptionControlParam) == 0x000040, "Wrong size on FSSOptionControlParam");
static_assert(offsetof(FSSOptionControlParam, bCameraLRReverse) == 0x000000, "Member 'FSSOptionControlParam::bCameraLRReverse' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, CameraLRSpeed) == 0x000004, "Member 'FSSOptionControlParam::CameraLRSpeed' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, bCameraUDReverse) == 0x000008, "Member 'FSSOptionControlParam::bCameraUDReverse' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, CameraUDSpeed) == 0x00000C, "Member 'FSSOptionControlParam::CameraUDSpeed' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, bVibration) == 0x000010, "Member 'FSSOptionControlParam::bVibration' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, Adaptivetrigger) == 0x000014, "Member 'FSSOptionControlParam::Adaptivetrigger' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, OperationType) == 0x000018, "Member 'FSSOptionControlParam::OperationType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, IconType) == 0x00001C, "Member 'FSSOptionControlParam::IconType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, PadIconType) == 0x000020, "Member 'FSSOptionControlParam::PadIconType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, ControlStyle) == 0x000024, "Member 'FSSOptionControlParam::ControlStyle' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, PanelControlType) == 0x000028, "Member 'FSSOptionControlParam::PanelControlType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, CameraControlType) == 0x00002C, "Member 'FSSOptionControlParam::CameraControlType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, ImpactInputType) == 0x000030, "Member 'FSSOptionControlParam::ImpactInputType' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, AdaptivetriggerMax) == 0x000034, "Member 'FSSOptionControlParam::AdaptivetriggerMax' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, bLeftHanded) == 0x000038, "Member 'FSSOptionControlParam::bLeftHanded' has a wrong offset!");
static_assert(offsetof(FSSOptionControlParam, CameraType) == 0x00003C, "Member 'FSSOptionControlParam::CameraType' has a wrong offset!");

// ScriptStruct SS.SSAnimNode_LookAt
// 0x0000 (0x0250 - 0x0250)
struct FSSAnimNode_LookAt final : public FAnimNode_LookAt
{
public:
	float                                         InLookAtClamp;                                     // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAnimNode_LookAt) == 0x000010, "Wrong alignment on FSSAnimNode_LookAt");
static_assert(sizeof(FSSAnimNode_LookAt) == 0x000250, "Wrong size on FSSAnimNode_LookAt");
static_assert(offsetof(FSSAnimNode_LookAt, InLookAtClamp) == 0x000248, "Member 'FSSAnimNode_LookAt::InLookAtClamp' has a wrong offset!");

// ScriptStruct SS.SSResource
// 0x0020 (0x0020 - 0x0000)
struct FSSResource final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BaseFilename;                                      // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Instance;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    Class;                                             // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSResource) == 0x000008, "Wrong alignment on FSSResource");
static_assert(sizeof(FSSResource) == 0x000020, "Wrong size on FSSResource");
static_assert(offsetof(FSSResource, BaseFilename) == 0x000004, "Member 'FSSResource::BaseFilename' has a wrong offset!");
static_assert(offsetof(FSSResource, Instance) == 0x000010, "Member 'FSSResource::Instance' has a wrong offset!");
static_assert(offsetof(FSSResource, Class) == 0x000018, "Member 'FSSResource::Class' has a wrong offset!");

// ScriptStruct SS.KoratCharacterEffectColorSetDataTypeDataList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratCharacterEffectColorSetDataTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterEffectColorSetDataTypeDataList) == 0x000008, "Wrong alignment on FKoratCharacterEffectColorSetDataTypeDataList");
static_assert(sizeof(FKoratCharacterEffectColorSetDataTypeDataList) == 0x000018, "Wrong size on FKoratCharacterEffectColorSetDataTypeDataList");
static_assert(offsetof(FKoratCharacterEffectColorSetDataTypeDataList, Key) == 0x000000, "Member 'FKoratCharacterEffectColorSetDataTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectMultipleColorData
// 0x0128 (0x0128 - 0x0000)
struct FKoratEffectMultipleColorData final
{
public:
	TMap<struct FKoratCharacterEffectColorSetDataTypeDataList, struct FKoratCharacterEffectColorSetData> ColorTypeMap;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xA0];                                      // 0x0050(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratEffectColorTypeReplaceDataAsset*  ReplaceSettings;                                   // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugSourceCharacterName;                          // 0x0110(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSCharacter>            DebugSourceCharacter;                              // 0x0120(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectMultipleColorData) == 0x000008, "Wrong alignment on FKoratEffectMultipleColorData");
static_assert(sizeof(FKoratEffectMultipleColorData) == 0x000128, "Wrong size on FKoratEffectMultipleColorData");
static_assert(offsetof(FKoratEffectMultipleColorData, ColorTypeMap) == 0x000000, "Member 'FKoratEffectMultipleColorData::ColorTypeMap' has a wrong offset!");
static_assert(offsetof(FKoratEffectMultipleColorData, ReplaceSettings) == 0x0000F0, "Member 'FKoratEffectMultipleColorData::ReplaceSettings' has a wrong offset!");
static_assert(offsetof(FKoratEffectMultipleColorData, DebugSourceCharacterName) == 0x000110, "Member 'FKoratEffectMultipleColorData::DebugSourceCharacterName' has a wrong offset!");
static_assert(offsetof(FKoratEffectMultipleColorData, DebugSourceCharacter) == 0x000120, "Member 'FKoratEffectMultipleColorData::DebugSourceCharacter' has a wrong offset!");

// ScriptStruct SS.KoratCharacterAttributeTagDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterAttributeTagDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterAttributeTagDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterAttributeTagDataAssetRecord");
static_assert(sizeof(FKoratCharacterAttributeTagDataAssetRecord) == 0x000020, "Wrong size on FKoratCharacterAttributeTagDataAssetRecord");
static_assert(offsetof(FKoratCharacterAttributeTagDataAssetRecord, SortId) == 0x000000, "Member 'FKoratCharacterAttributeTagDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAttributeTagDataAssetRecord, Name) == 0x000008, "Member 'FKoratCharacterAttributeTagDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSliderButtonDescription
// 0x0018 (0x0018 - 0x0000)
struct FSSMainMenuSliderButtonDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                IconResource;                                      // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                NameResource;                                      // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSliderButtonDescription) == 0x000008, "Wrong alignment on FSSMainMenuSliderButtonDescription");
static_assert(sizeof(FSSMainMenuSliderButtonDescription) == 0x000018, "Wrong size on FSSMainMenuSliderButtonDescription");
static_assert(offsetof(FSSMainMenuSliderButtonDescription, IconResource) == 0x000008, "Member 'FSSMainMenuSliderButtonDescription::IconResource' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSliderButtonDescription, NameResource) == 0x000010, "Member 'FSSMainMenuSliderButtonDescription::NameResource' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleDetailSearchParam
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FKoratDramaticBattleDetailSearchParam final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleDetailSearchParam) == 0x000008, "Wrong alignment on FKoratDramaticBattleDetailSearchParam");
static_assert(sizeof(FKoratDramaticBattleDetailSearchParam) == 0x000038, "Wrong size on FKoratDramaticBattleDetailSearchParam");

// ScriptStruct SS.KoratBattleDirectingInfo
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleDirectingInfo final
{
public:
	int32                                         BattleRewardCount;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishBattleDirectingsNo;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleDirectingInfo) == 0x000004, "Wrong alignment on FKoratBattleDirectingInfo");
static_assert(sizeof(FKoratBattleDirectingInfo) == 0x000008, "Wrong size on FKoratBattleDirectingInfo");
static_assert(offsetof(FKoratBattleDirectingInfo, BattleRewardCount) == 0x000000, "Member 'FKoratBattleDirectingInfo::BattleRewardCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingInfo, FinishBattleDirectingsNo) == 0x000004, "Member 'FKoratBattleDirectingInfo::FinishBattleDirectingsNo' has a wrong offset!");

// ScriptStruct SS.SSWarpRegionTransform
// 0x0060 (0x0060 - 0x0000)
struct FSSWarpRegionTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWarpRegionTransform) == 0x000010, "Wrong alignment on FSSWarpRegionTransform");
static_assert(sizeof(FSSWarpRegionTransform) == 0x000060, "Wrong size on FSSWarpRegionTransform");
static_assert(offsetof(FSSWarpRegionTransform, Transform) == 0x000000, "Member 'FSSWarpRegionTransform::Transform' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingKnockdownHistory
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FKoratBattleDirectingKnockdownHistory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingKnockdownHistory) == 0x000004, "Wrong alignment on FKoratBattleDirectingKnockdownHistory");
static_assert(sizeof(FKoratBattleDirectingKnockdownHistory) == 0x000008, "Wrong size on FKoratBattleDirectingKnockdownHistory");

// ScriptStruct SS.KoratBattleTeamDirectingData
// 0x0003 (0x0003 - 0x0000)
struct FKoratBattleTeamDirectingData final
{
public:
	bool                                          bNoChange;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoFormChange;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoCombine;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTeamDirectingData) == 0x000001, "Wrong alignment on FKoratBattleTeamDirectingData");
static_assert(sizeof(FKoratBattleTeamDirectingData) == 0x000003, "Wrong size on FKoratBattleTeamDirectingData");
static_assert(offsetof(FKoratBattleTeamDirectingData, bNoChange) == 0x000000, "Member 'FKoratBattleTeamDirectingData::bNoChange' has a wrong offset!");
static_assert(offsetof(FKoratBattleTeamDirectingData, bNoFormChange) == 0x000001, "Member 'FKoratBattleTeamDirectingData::bNoFormChange' has a wrong offset!");
static_assert(offsetof(FKoratBattleTeamDirectingData, bNoCombine) == 0x000002, "Member 'FKoratBattleTeamDirectingData::bNoCombine' has a wrong offset!");

// ScriptStruct SS.SSEvalAreaLimitInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSEvalAreaLimitInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEvalAreaLimitInfo) == 0x000004, "Wrong alignment on FSSEvalAreaLimitInfo");
static_assert(sizeof(FSSEvalAreaLimitInfo) == 0x000008, "Wrong size on FSSEvalAreaLimitInfo");

// ScriptStruct SS.KoratBulletRatSpawnedObjectInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FKoratBulletRatSpawnedObjectInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBulletRatSpawnedObjectInfo) == 0x000004, "Wrong alignment on FKoratBulletRatSpawnedObjectInfo");
static_assert(sizeof(FKoratBulletRatSpawnedObjectInfo) == 0x000010, "Wrong size on FKoratBulletRatSpawnedObjectInfo");

// ScriptStruct SS.KoratAuraLevelDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratAuraLevelDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAuraLevelDataAssetRecord) == 0x000001, "Wrong alignment on FKoratAuraLevelDataAssetRecord");
static_assert(sizeof(FKoratAuraLevelDataAssetRecord) == 0x000001, "Wrong size on FKoratAuraLevelDataAssetRecord");

// ScriptStruct SS.SSEventSceneGuideWidgets
// 0x0020 (0x0020 - 0x0000)
struct FSSEventSceneGuideWidgets
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSOperationGuideSet*                   GuideWidget;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USSMenuManager*                         SkipWidget;                                        // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneGuideWidgets) == 0x000008, "Wrong alignment on FSSEventSceneGuideWidgets");
static_assert(sizeof(FSSEventSceneGuideWidgets) == 0x000020, "Wrong size on FSSEventSceneGuideWidgets");
static_assert(offsetof(FSSEventSceneGuideWidgets, GuideWidget) == 0x000008, "Member 'FSSEventSceneGuideWidgets::GuideWidget' has a wrong offset!");
static_assert(offsetof(FSSEventSceneGuideWidgets, SkipWidget) == 0x000010, "Member 'FSSEventSceneGuideWidgets::SkipWidget' has a wrong offset!");

// ScriptStruct SS.SSEventSceneGuideWidgetsTS
// 0x0000 (0x0020 - 0x0020)
struct FSSEventSceneGuideWidgetsTS final : public FSSEventSceneGuideWidgets
{
};
static_assert(alignof(FSSEventSceneGuideWidgetsTS) == 0x000008, "Wrong alignment on FSSEventSceneGuideWidgetsTS");
static_assert(sizeof(FSSEventSceneGuideWidgetsTS) == 0x000020, "Wrong size on FSSEventSceneGuideWidgetsTS");

// ScriptStruct SS.KoratNotificationDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratNotificationDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratNotificationDataList) == 0x000004, "Wrong alignment on FKoratNotificationDataList");
static_assert(sizeof(FKoratNotificationDataList) == 0x000008, "Wrong size on FKoratNotificationDataList");
static_assert(offsetof(FKoratNotificationDataList, Key) == 0x000000, "Member 'FKoratNotificationDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMapBattleCount
// 0x0008 (0x0008 - 0x0000)
struct FKoratMapBattleCount final
{
public:
	int32                                         ChangeEscapeCount;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeDestructCount;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapBattleCount) == 0x000004, "Wrong alignment on FKoratMapBattleCount");
static_assert(sizeof(FKoratMapBattleCount) == 0x000008, "Wrong size on FKoratMapBattleCount");
static_assert(offsetof(FKoratMapBattleCount, ChangeEscapeCount) == 0x000000, "Member 'FKoratMapBattleCount::ChangeEscapeCount' has a wrong offset!");
static_assert(offsetof(FKoratMapBattleCount, ChangeDestructCount) == 0x000004, "Member 'FKoratMapBattleCount::ChangeDestructCount' has a wrong offset!");

// ScriptStruct SS.KoratBattleAssetDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratBattleAssetDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   BlueprintClass;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleAssetDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBattleAssetDataAssetRecord");
static_assert(sizeof(FKoratBattleAssetDataAssetRecord) == 0x000030, "Wrong size on FKoratBattleAssetDataAssetRecord");
static_assert(offsetof(FKoratBattleAssetDataAssetRecord, BlueprintClass) == 0x000000, "Member 'FKoratBattleAssetDataAssetRecord::BlueprintClass' has a wrong offset!");

// ScriptStruct SS.KoratSPGaugeVariation
// 0x000C (0x000C - 0x0000)
struct FKoratSPGaugeVariation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Damage;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSPGaugeVariation) == 0x000004, "Wrong alignment on FKoratSPGaugeVariation");
static_assert(sizeof(FKoratSPGaugeVariation) == 0x00000C, "Wrong size on FKoratSPGaugeVariation");
static_assert(offsetof(FKoratSPGaugeVariation, Value) == 0x000000, "Member 'FKoratSPGaugeVariation::Value' has a wrong offset!");
static_assert(offsetof(FKoratSPGaugeVariation, Time) == 0x000004, "Member 'FKoratSPGaugeVariation::Time' has a wrong offset!");
static_assert(offsetof(FKoratSPGaugeVariation, Damage) == 0x000008, "Member 'FKoratSPGaugeVariation::Damage' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataHighSpeedMoveParameter
// 0x0068 (0x0068 - 0x0000)
struct FKoratCharacterDataHighSpeedMoveParameter final
{
public:
	float                                         SparkingGaugeCost;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HiddenStartTime;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HiddenDuration;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleStartTime;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleDuration;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AddToSpeedCurveIN;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AddToSpeedCurveLP;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AddToSpeedCurveOT;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddToSpeedScale;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        StartTimeLineType;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USSActionCameraDataAsset*               StartActionCamera;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               StartOpponentActionCamera;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeLineOffsetTime;                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        EndTimeLineType;                                   // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USSActionCameraDataAsset*               EndActionCamera;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               EndOpponentActionCamera;                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataHighSpeedMoveParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataHighSpeedMoveParameter");
static_assert(sizeof(FKoratCharacterDataHighSpeedMoveParameter) == 0x000068, "Wrong size on FKoratCharacterDataHighSpeedMoveParameter");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, SparkingGaugeCost) == 0x000000, "Member 'FKoratCharacterDataHighSpeedMoveParameter::SparkingGaugeCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, HiddenStartTime) == 0x000004, "Member 'FKoratCharacterDataHighSpeedMoveParameter::HiddenStartTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, HiddenDuration) == 0x000008, "Member 'FKoratCharacterDataHighSpeedMoveParameter::HiddenDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, InvincibleStartTime) == 0x00000C, "Member 'FKoratCharacterDataHighSpeedMoveParameter::InvincibleStartTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, InvincibleDuration) == 0x000010, "Member 'FKoratCharacterDataHighSpeedMoveParameter::InvincibleDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, AddToSpeedCurveIN) == 0x000018, "Member 'FKoratCharacterDataHighSpeedMoveParameter::AddToSpeedCurveIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, AddToSpeedCurveLP) == 0x000020, "Member 'FKoratCharacterDataHighSpeedMoveParameter::AddToSpeedCurveLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, AddToSpeedCurveOT) == 0x000028, "Member 'FKoratCharacterDataHighSpeedMoveParameter::AddToSpeedCurveOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, AddToSpeedScale) == 0x000030, "Member 'FKoratCharacterDataHighSpeedMoveParameter::AddToSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, MaxAcceleration) == 0x000034, "Member 'FKoratCharacterDataHighSpeedMoveParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, BrakingDeceleration) == 0x000038, "Member 'FKoratCharacterDataHighSpeedMoveParameter::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, StartTimeLineType) == 0x00003C, "Member 'FKoratCharacterDataHighSpeedMoveParameter::StartTimeLineType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, StartActionCamera) == 0x000040, "Member 'FKoratCharacterDataHighSpeedMoveParameter::StartActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, StartOpponentActionCamera) == 0x000048, "Member 'FKoratCharacterDataHighSpeedMoveParameter::StartOpponentActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, EndTimeLineOffsetTime) == 0x000050, "Member 'FKoratCharacterDataHighSpeedMoveParameter::EndTimeLineOffsetTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, EndTimeLineType) == 0x000054, "Member 'FKoratCharacterDataHighSpeedMoveParameter::EndTimeLineType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, EndActionCamera) == 0x000058, "Member 'FKoratCharacterDataHighSpeedMoveParameter::EndActionCamera' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataHighSpeedMoveParameter, EndOpponentActionCamera) == 0x000060, "Member 'FKoratCharacterDataHighSpeedMoveParameter::EndOpponentActionCamera' has a wrong offset!");

// ScriptStruct SS.KoratBulletEffectDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBulletEffectDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBulletEffectDataList) == 0x000004, "Wrong alignment on FKoratBulletEffectDataList");
static_assert(sizeof(FKoratBulletEffectDataList) == 0x000008, "Wrong size on FKoratBulletEffectDataList");
static_assert(offsetof(FKoratBulletEffectDataList, Key) == 0x000000, "Member 'FKoratBulletEffectDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectStaDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectStaDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectStaDataList) == 0x000004, "Wrong alignment on FKoratEffectStaDataList");
static_assert(sizeof(FKoratEffectStaDataList) == 0x000008, "Wrong size on FKoratEffectStaDataList");
static_assert(offsetof(FKoratEffectStaDataList, Key) == 0x000000, "Member 'FKoratEffectStaDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratWorldPointLightDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratWorldPointLightDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWorldPointLightDataList) == 0x000004, "Wrong alignment on FKoratWorldPointLightDataList");
static_assert(sizeof(FKoratWorldPointLightDataList) == 0x000008, "Wrong size on FKoratWorldPointLightDataList");
static_assert(offsetof(FKoratWorldPointLightDataList, Key) == 0x000000, "Member 'FKoratWorldPointLightDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectExpDataAssetByColor
// 0x0038 (0x0038 - 0x0000)
struct FKoratEffectExpDataAssetByColor final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratWorldPointLightDataList          ColorBranchWorldToonPointLight;                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectExpDataAssetByColor) == 0x000008, "Wrong alignment on FKoratEffectExpDataAssetByColor");
static_assert(sizeof(FKoratEffectExpDataAssetByColor) == 0x000038, "Wrong size on FKoratEffectExpDataAssetByColor");
static_assert(offsetof(FKoratEffectExpDataAssetByColor, LevelSequence) == 0x000000, "Member 'FKoratEffectExpDataAssetByColor::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetByColor, ColorBranchWorldToonPointLight) == 0x000030, "Member 'FKoratEffectExpDataAssetByColor::ColorBranchWorldToonPointLight' has a wrong offset!");

// ScriptStruct SS.KoratDestructionAttackParameterDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDestructionAttackParameterDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionAttackParameterDataList) == 0x000004, "Wrong alignment on FKoratDestructionAttackParameterDataList");
static_assert(sizeof(FKoratDestructionAttackParameterDataList) == 0x000008, "Wrong size on FKoratDestructionAttackParameterDataList");
static_assert(offsetof(FKoratDestructionAttackParameterDataList, Key) == 0x000000, "Member 'FKoratDestructionAttackParameterDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectDrownOutDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectDrownOutDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectDrownOutDataList) == 0x000004, "Wrong alignment on FKoratEffectDrownOutDataList");
static_assert(sizeof(FKoratEffectDrownOutDataList) == 0x000008, "Wrong size on FKoratEffectDrownOutDataList");
static_assert(offsetof(FKoratEffectDrownOutDataList, Key) == 0x000000, "Member 'FKoratEffectDrownOutDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectExpDataAssetRecord
// 0x0068 (0x0068 - 0x0000)
struct FKoratEffectExpDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratEffectExpDataAssetByColor> LevelSequenceByColor;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FKoratWorldPointLightDataList          DefaultWorldToonPointLight;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpRadius;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionAttackParameter;                        // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionFieldScale;                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrownOutable;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectDrownOutDataList           DrownOutEffect;                                    // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectExpDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectExpDataAssetRecord");
static_assert(sizeof(FKoratEffectExpDataAssetRecord) == 0x000068, "Wrong size on FKoratEffectExpDataAssetRecord");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectExpDataAssetRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, LevelSequenceByColor) == 0x000030, "Member 'FKoratEffectExpDataAssetRecord::LevelSequenceByColor' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, DefaultWorldToonPointLight) == 0x000040, "Member 'FKoratEffectExpDataAssetRecord::DefaultWorldToonPointLight' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, ExpRadius) == 0x000048, "Member 'FKoratEffectExpDataAssetRecord::ExpRadius' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, DestructionAttackParameter) == 0x00004C, "Member 'FKoratEffectExpDataAssetRecord::DestructionAttackParameter' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, DestructionFieldScale) == 0x000054, "Member 'FKoratEffectExpDataAssetRecord::DestructionFieldScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, bIsDrownOutable) == 0x000058, "Member 'FKoratEffectExpDataAssetRecord::bIsDrownOutable' has a wrong offset!");
static_assert(offsetof(FKoratEffectExpDataAssetRecord, DrownOutEffect) == 0x00005C, "Member 'FKoratEffectExpDataAssetRecord::DrownOutEffect' has a wrong offset!");

// ScriptStruct SS.KoratEffectExpDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectExpDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectExpDataList) == 0x000004, "Wrong alignment on FKoratEffectExpDataList");
static_assert(sizeof(FKoratEffectExpDataList) == 0x000008, "Wrong size on FKoratEffectExpDataList");
static_assert(offsetof(FKoratEffectExpDataList, Key) == 0x000000, "Member 'FKoratEffectExpDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBulletGroupExplosionSetting
// 0x0018 (0x0018 - 0x0000)
struct FSSBulletGroupExplosionSetting final
{
public:
	bool                                          bEnableGroupExplosion;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectExpDataList                GroupExplosion;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectStaDataList                GroupExplosionState;                               // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupExplosionConditionCount;                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletGroupExplosionSetting) == 0x000004, "Wrong alignment on FSSBulletGroupExplosionSetting");
static_assert(sizeof(FSSBulletGroupExplosionSetting) == 0x000018, "Wrong size on FSSBulletGroupExplosionSetting");
static_assert(offsetof(FSSBulletGroupExplosionSetting, bEnableGroupExplosion) == 0x000000, "Member 'FSSBulletGroupExplosionSetting::bEnableGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletGroupExplosionSetting, GroupExplosion) == 0x000004, "Member 'FSSBulletGroupExplosionSetting::GroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletGroupExplosionSetting, GroupExplosionState) == 0x00000C, "Member 'FSSBulletGroupExplosionSetting::GroupExplosionState' has a wrong offset!");
static_assert(offsetof(FSSBulletGroupExplosionSetting, GroupExplosionConditionCount) == 0x000014, "Member 'FSSBulletGroupExplosionSetting::GroupExplosionConditionCount' has a wrong offset!");

// ScriptStruct SS.KoratWindMotorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratWindMotorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWindMotorDataList) == 0x000004, "Wrong alignment on FKoratWindMotorDataList");
static_assert(sizeof(FKoratWindMotorDataList) == 0x000008, "Wrong size on FKoratWindMotorDataList");
static_assert(offsetof(FKoratWindMotorDataList, Key) == 0x000000, "Member 'FKoratWindMotorDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectHitDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitDataList) == 0x000004, "Wrong alignment on FKoratEffectHitDataList");
static_assert(sizeof(FKoratEffectHitDataList) == 0x000008, "Wrong size on FKoratEffectHitDataList");
static_assert(offsetof(FKoratEffectHitDataList, Key) == 0x000000, "Member 'FKoratEffectHitDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletRatDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatDataList) == 0x000004, "Wrong alignment on FKoratEffectBulletRatDataList");
static_assert(sizeof(FKoratEffectBulletRatDataList) == 0x000008, "Wrong size on FKoratEffectBulletRatDataList");
static_assert(offsetof(FKoratEffectBulletRatDataList, Key) == 0x000000, "Member 'FKoratEffectBulletRatDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEquipmentPointLightDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEquipmentPointLightDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEquipmentPointLightDataList) == 0x000004, "Wrong alignment on FKoratEquipmentPointLightDataList");
static_assert(sizeof(FKoratEquipmentPointLightDataList) == 0x000008, "Wrong size on FKoratEquipmentPointLightDataList");
static_assert(offsetof(FKoratEquipmentPointLightDataList, Key) == 0x000000, "Member 'FKoratEquipmentPointLightDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBulletDataAssetRecordEffect
// 0x0460 (0x0460 - 0x0000)
struct FSSBulletDataAssetRecordEffect final
{
public:
	struct FKoratBulletEffectDataList             Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          BulletLevelSequenceIn;                             // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          SmashLevelSequenceChargeIn;                        // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          SmashLevelSequenceLoop2;                           // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          ChargeLevelSequence;                               // 0x0098(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashLevelSequence;                          // 0x00C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashSmashLevelSequence1;                    // 0x00F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashSmashLevelSequence2;                    // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          BlastImpactLevelSequenceLead;                      // 0x0158(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          BlastImpactLevelSequenceBehind;                    // 0x0188(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          UniqueExplosionLevelSequence;                      // 0x01B8(0x0030)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UniqueExpRadius;                                   // 0x01E8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectExpDataAssetRecord         UniqueExplosionData;                               // 0x01F0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratWindMotorDataList                BulletWindMotor;                                   // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                CharacterHitExplosion;                             // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectStaDataList                State;                                             // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                CharacterMultiStageHitExplosion;                   // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectStaDataList                StateMultiHit;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                CharacterHitDemoReplacementExplosion;              // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectStaDataList                CharacterHitDemoReplacementState;                  // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCharacterHitGroupExplosion;                 // 0x0290(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectExpDataList                CharacterHitGroupExplosion;                        // 0x0294(0x0008)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectStaDataList                CharacterHitGroupExplosionState;                   // 0x029C(0x0008)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterHitGroupExplosionConditionCount;          // 0x02A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSBulletGroupExplosionSetting         CharacterHitGroupExpSetting;                       // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSBulletGroupExplosionSetting         DemoReplacementGroupExpSetting;                    // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBelongOtherGroupExplosion;                        // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBulletEffectDataList             BelongGroupExplosionType;                          // 0x02DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                GeometryHitExplosion;                              // 0x02E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                GeometryMultiStageHitExplosion;                    // 0x02EC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                ClashExplosion;                                    // 0x02F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                BeamExplosion;                                     // 0x02FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                Cancel;                                            // 0x0304(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                Reflect;                                           // 0x030C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                WaitForReflect;                                    // 0x0314(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                AutoReflect;                                       // 0x031C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectExpDataList                EraseExplosion;                                    // 0x0324(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectHitDataList                Hit;                                               // 0x032C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectHitDataList                Guard;                                             // 0x0334(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectHitDataList                GuardBreak;                                        // 0x033C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatDataList          BulletGroundReaction;                              // 0x0344(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatDataAssetOverrideRecord BulletGroundReactionOverwrite;                     // 0x0350(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bLockRoll;                                         // 0x0450(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEquipmentPointLightDataList      EquipmentPointLightDataList;                       // 0x0454(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBulletDataAssetRecordEffect) == 0x000008, "Wrong alignment on FSSBulletDataAssetRecordEffect");
static_assert(sizeof(FSSBulletDataAssetRecordEffect) == 0x000460, "Wrong size on FSSBulletDataAssetRecordEffect");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, Key) == 0x000000, "Member 'FSSBulletDataAssetRecordEffect::Key' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BulletLevelSequenceIn) == 0x000008, "Member 'FSSBulletDataAssetRecordEffect::BulletLevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, SmashLevelSequenceChargeIn) == 0x000038, "Member 'FSSBulletDataAssetRecordEffect::SmashLevelSequenceChargeIn' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, SmashLevelSequenceLoop2) == 0x000068, "Member 'FSSBulletDataAssetRecordEffect::SmashLevelSequenceLoop2' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, ChargeLevelSequence) == 0x000098, "Member 'FSSBulletDataAssetRecordEffect::ChargeLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, MuzzleFlashLevelSequence) == 0x0000C8, "Member 'FSSBulletDataAssetRecordEffect::MuzzleFlashLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, MuzzleFlashSmashLevelSequence1) == 0x0000F8, "Member 'FSSBulletDataAssetRecordEffect::MuzzleFlashSmashLevelSequence1' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, MuzzleFlashSmashLevelSequence2) == 0x000128, "Member 'FSSBulletDataAssetRecordEffect::MuzzleFlashSmashLevelSequence2' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BlastImpactLevelSequenceLead) == 0x000158, "Member 'FSSBulletDataAssetRecordEffect::BlastImpactLevelSequenceLead' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BlastImpactLevelSequenceBehind) == 0x000188, "Member 'FSSBulletDataAssetRecordEffect::BlastImpactLevelSequenceBehind' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, UniqueExplosionLevelSequence) == 0x0001B8, "Member 'FSSBulletDataAssetRecordEffect::UniqueExplosionLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, UniqueExpRadius) == 0x0001E8, "Member 'FSSBulletDataAssetRecordEffect::UniqueExpRadius' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, UniqueExplosionData) == 0x0001F0, "Member 'FSSBulletDataAssetRecordEffect::UniqueExplosionData' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BulletWindMotor) == 0x000258, "Member 'FSSBulletDataAssetRecordEffect::BulletWindMotor' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitExplosion) == 0x000260, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, State) == 0x000268, "Member 'FSSBulletDataAssetRecordEffect::State' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterMultiStageHitExplosion) == 0x000270, "Member 'FSSBulletDataAssetRecordEffect::CharacterMultiStageHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, StateMultiHit) == 0x000278, "Member 'FSSBulletDataAssetRecordEffect::StateMultiHit' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitDemoReplacementExplosion) == 0x000280, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitDemoReplacementExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitDemoReplacementState) == 0x000288, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitDemoReplacementState' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, bEnableCharacterHitGroupExplosion) == 0x000290, "Member 'FSSBulletDataAssetRecordEffect::bEnableCharacterHitGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitGroupExplosion) == 0x000294, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitGroupExplosionState) == 0x00029C, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitGroupExplosionState' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitGroupExplosionConditionCount) == 0x0002A4, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitGroupExplosionConditionCount' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, CharacterHitGroupExpSetting) == 0x0002A8, "Member 'FSSBulletDataAssetRecordEffect::CharacterHitGroupExpSetting' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, DemoReplacementGroupExpSetting) == 0x0002C0, "Member 'FSSBulletDataAssetRecordEffect::DemoReplacementGroupExpSetting' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, bBelongOtherGroupExplosion) == 0x0002D8, "Member 'FSSBulletDataAssetRecordEffect::bBelongOtherGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BelongGroupExplosionType) == 0x0002DC, "Member 'FSSBulletDataAssetRecordEffect::BelongGroupExplosionType' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, GeometryHitExplosion) == 0x0002E4, "Member 'FSSBulletDataAssetRecordEffect::GeometryHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, GeometryMultiStageHitExplosion) == 0x0002EC, "Member 'FSSBulletDataAssetRecordEffect::GeometryMultiStageHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, ClashExplosion) == 0x0002F4, "Member 'FSSBulletDataAssetRecordEffect::ClashExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BeamExplosion) == 0x0002FC, "Member 'FSSBulletDataAssetRecordEffect::BeamExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, Cancel) == 0x000304, "Member 'FSSBulletDataAssetRecordEffect::Cancel' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, Reflect) == 0x00030C, "Member 'FSSBulletDataAssetRecordEffect::Reflect' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, WaitForReflect) == 0x000314, "Member 'FSSBulletDataAssetRecordEffect::WaitForReflect' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, AutoReflect) == 0x00031C, "Member 'FSSBulletDataAssetRecordEffect::AutoReflect' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, EraseExplosion) == 0x000324, "Member 'FSSBulletDataAssetRecordEffect::EraseExplosion' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, Hit) == 0x00032C, "Member 'FSSBulletDataAssetRecordEffect::Hit' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, Guard) == 0x000334, "Member 'FSSBulletDataAssetRecordEffect::Guard' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, GuardBreak) == 0x00033C, "Member 'FSSBulletDataAssetRecordEffect::GuardBreak' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BulletGroundReaction) == 0x000344, "Member 'FSSBulletDataAssetRecordEffect::BulletGroundReaction' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, BulletGroundReactionOverwrite) == 0x000350, "Member 'FSSBulletDataAssetRecordEffect::BulletGroundReactionOverwrite' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, bLockRoll) == 0x000450, "Member 'FSSBulletDataAssetRecordEffect::bLockRoll' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordEffect, EquipmentPointLightDataList) == 0x000454, "Member 'FSSBulletDataAssetRecordEffect::EquipmentPointLightDataList' has a wrong offset!");

// ScriptStruct SS.KoratCharacterGroundMoveParameter
// 0x0028 (0x0028 - 0x0000)
struct FKoratCharacterGroundMoveParameter final
{
public:
	float                                         WalkMotionTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkMotionDistance;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkDistanceScale;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunMotionTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunMotionDistance;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunDistanceScale;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GroundRunningSpeedIn;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GroundRunningSpeedOut;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterGroundMoveParameter) == 0x000008, "Wrong alignment on FKoratCharacterGroundMoveParameter");
static_assert(sizeof(FKoratCharacterGroundMoveParameter) == 0x000028, "Wrong size on FKoratCharacterGroundMoveParameter");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, WalkMotionTime) == 0x000000, "Member 'FKoratCharacterGroundMoveParameter::WalkMotionTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, WalkMotionDistance) == 0x000004, "Member 'FKoratCharacterGroundMoveParameter::WalkMotionDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, WalkDistanceScale) == 0x000008, "Member 'FKoratCharacterGroundMoveParameter::WalkDistanceScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, RunMotionTime) == 0x00000C, "Member 'FKoratCharacterGroundMoveParameter::RunMotionTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, RunMotionDistance) == 0x000010, "Member 'FKoratCharacterGroundMoveParameter::RunMotionDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, RunDistanceScale) == 0x000014, "Member 'FKoratCharacterGroundMoveParameter::RunDistanceScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, GroundRunningSpeedIn) == 0x000018, "Member 'FKoratCharacterGroundMoveParameter::GroundRunningSpeedIn' has a wrong offset!");
static_assert(offsetof(FKoratCharacterGroundMoveParameter, GroundRunningSpeedOut) == 0x000020, "Member 'FKoratCharacterGroundMoveParameter::GroundRunningSpeedOut' has a wrong offset!");

// ScriptStruct SS.SSFreeTournamentNextBattleInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSSFreeTournamentNextBattleInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSFreeTournamentNextBattleInfo) == 0x000004, "Wrong alignment on FSSFreeTournamentNextBattleInfo");
static_assert(sizeof(FSSFreeTournamentNextBattleInfo) == 0x00000C, "Wrong size on FSSFreeTournamentNextBattleInfo");

// ScriptStruct SS.KoratDramaticBattleCutEditorFunctionOperationDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorFunctionOperationDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorFunctionOperationDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorFunctionOperationDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorFunctionOperationDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorFunctionOperationDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorFunctionOperationDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorFunctionOperationDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultPlayerRecord
// 0x003C (0x003C - 0x0000)
struct FKoratBattleResultPlayerRecord final
{
public:
	int32                                         MatchDisconnectionCount;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleRank;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleRankPoint;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamRank;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamRankPoint;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TenkaichiRank;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TenkaichiRankPoint;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Money;                                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPoint;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRatePoint;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPoint;                                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassPoint;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleResultPlayerRecord) == 0x000004, "Wrong alignment on FKoratBattleResultPlayerRecord");
static_assert(sizeof(FKoratBattleResultPlayerRecord) == 0x00003C, "Wrong size on FKoratBattleResultPlayerRecord");
static_assert(offsetof(FKoratBattleResultPlayerRecord, MatchDisconnectionCount) == 0x000000, "Member 'FKoratBattleResultPlayerRecord::MatchDisconnectionCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, Rank) == 0x000004, "Member 'FKoratBattleResultPlayerRecord::Rank' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RankPoint) == 0x000008, "Member 'FKoratBattleResultPlayerRecord::RankPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RankMatchSingleRank) == 0x00000C, "Member 'FKoratBattleResultPlayerRecord::RankMatchSingleRank' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RankMatchSingleRankPoint) == 0x000010, "Member 'FKoratBattleResultPlayerRecord::RankMatchSingleRankPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RankMatchTeamRank) == 0x000014, "Member 'FKoratBattleResultPlayerRecord::RankMatchTeamRank' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RankMatchTeamRankPoint) == 0x000018, "Member 'FKoratBattleResultPlayerRecord::RankMatchTeamRankPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, TenkaichiRank) == 0x00001C, "Member 'FKoratBattleResultPlayerRecord::TenkaichiRank' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, TenkaichiRankPoint) == 0x000020, "Member 'FKoratBattleResultPlayerRecord::TenkaichiRankPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, Money) == 0x000024, "Member 'FKoratBattleResultPlayerRecord::Money' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, EventPoint) == 0x000028, "Member 'FKoratBattleResultPlayerRecord::EventPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, PlayerRatePoint) == 0x00002C, "Member 'FKoratBattleResultPlayerRecord::PlayerRatePoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, RewardPoint) == 0x000030, "Member 'FKoratBattleResultPlayerRecord::RewardPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, BattlePassPoint) == 0x000034, "Member 'FKoratBattleResultPlayerRecord::BattlePassPoint' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultPlayerRecord, PlayTime) == 0x000038, "Member 'FKoratBattleResultPlayerRecord::PlayTime' has a wrong offset!");

// ScriptStruct SS.KoratBlastGroupDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastGroupDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastGroupDataList) == 0x000004, "Wrong alignment on FKoratBlastGroupDataList");
static_assert(sizeof(FKoratBlastGroupDataList) == 0x000008, "Wrong size on FKoratBlastGroupDataList");
static_assert(offsetof(FKoratBlastGroupDataList, Key) == 0x000000, "Member 'FKoratBlastGroupDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBlastActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastActionDataList) == 0x000004, "Wrong alignment on FKoratBlastActionDataList");
static_assert(sizeof(FKoratBlastActionDataList) == 0x000008, "Wrong size on FKoratBlastActionDataList");
static_assert(offsetof(FKoratBlastActionDataList, Key) == 0x000000, "Member 'FKoratBlastActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBattleCountBlastHitInfo
// 0x0014 (0x0014 - 0x0000)
struct FKoratCharacterBattleCountBlastHitInfo final
{
public:
	struct FKoratBlastActionDataList              BlastAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                TargetCharacter;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBlastDemoBranchType                        DemoBranchType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBattleCountBlastHitInfo) == 0x000004, "Wrong alignment on FKoratCharacterBattleCountBlastHitInfo");
static_assert(sizeof(FKoratCharacterBattleCountBlastHitInfo) == 0x000014, "Wrong size on FKoratCharacterBattleCountBlastHitInfo");
static_assert(offsetof(FKoratCharacterBattleCountBlastHitInfo, BlastAction) == 0x000000, "Member 'FKoratCharacterBattleCountBlastHitInfo::BlastAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCountBlastHitInfo, TargetCharacter) == 0x000008, "Member 'FKoratCharacterBattleCountBlastHitInfo::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCountBlastHitInfo, DemoBranchType) == 0x000010, "Member 'FKoratCharacterBattleCountBlastHitInfo::DemoBranchType' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBattleCount
// 0x0258 (0x0258 - 0x0000)
struct FKoratCharacterBattleCount final
{
public:
	int32                                         MaxComboNum;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxComboDamage;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GivenDamage;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakenDamage;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              BattleTime;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EKoratCharacterBattleCountType, int32>   BattleNumCount;                                    // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratBlastGroupDataList, int32>  UseBlastGroupCount;                                // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratActionDataList, int32>      AttackHitCount;                                    // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratBlastActionDataList, int32> RunBlastCount;                                     // 0x0110(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterBattleCountBlastHitInfo, int32> BlastHitDemoInfo;                                  // 0x0160(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, int32>   ThrowFinishInfo;                                   // 0x01B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterItemDataList, int32> RunEmoteCount;                                     // 0x0200(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DragonDashMileage;                                 // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBattleCount) == 0x000008, "Wrong alignment on FKoratCharacterBattleCount");
static_assert(sizeof(FKoratCharacterBattleCount) == 0x000258, "Wrong size on FKoratCharacterBattleCount");
static_assert(offsetof(FKoratCharacterBattleCount, MaxComboNum) == 0x000000, "Member 'FKoratCharacterBattleCount::MaxComboNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, MaxComboDamage) == 0x000004, "Member 'FKoratCharacterBattleCount::MaxComboDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, KillCount) == 0x000008, "Member 'FKoratCharacterBattleCount::KillCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, GivenDamage) == 0x00000C, "Member 'FKoratCharacterBattleCount::GivenDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, TakenDamage) == 0x000010, "Member 'FKoratCharacterBattleCount::TakenDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, BattleTime) == 0x000018, "Member 'FKoratCharacterBattleCount::BattleTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, BattleNumCount) == 0x000020, "Member 'FKoratCharacterBattleCount::BattleNumCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, UseBlastGroupCount) == 0x000070, "Member 'FKoratCharacterBattleCount::UseBlastGroupCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, AttackHitCount) == 0x0000C0, "Member 'FKoratCharacterBattleCount::AttackHitCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, RunBlastCount) == 0x000110, "Member 'FKoratCharacterBattleCount::RunBlastCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, BlastHitDemoInfo) == 0x000160, "Member 'FKoratCharacterBattleCount::BlastHitDemoInfo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, ThrowFinishInfo) == 0x0001B0, "Member 'FKoratCharacterBattleCount::ThrowFinishInfo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, RunEmoteCount) == 0x000200, "Member 'FKoratCharacterBattleCount::RunEmoteCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBattleCount, DragonDashMileage) == 0x000250, "Member 'FKoratCharacterBattleCount::DragonDashMileage' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultCharacterRecord
// 0x0480 (0x0480 - 0x0000)
struct FKoratBattleResultCharacterRecord final
{
public:
	struct FKoratBattlePlayCharacter              BattlePlayCharacter;                               // 0x0000(0x0228)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratCharacterBattleCount             BattleCount;                                       // 0x0228(0x0258)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleResultCharacterRecord) == 0x000008, "Wrong alignment on FKoratBattleResultCharacterRecord");
static_assert(sizeof(FKoratBattleResultCharacterRecord) == 0x000480, "Wrong size on FKoratBattleResultCharacterRecord");
static_assert(offsetof(FKoratBattleResultCharacterRecord, BattlePlayCharacter) == 0x000000, "Member 'FKoratBattleResultCharacterRecord::BattlePlayCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultCharacterRecord, BattleCount) == 0x000228, "Member 'FKoratBattleResultCharacterRecord::BattleCount' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultCharacterIDRecord
// 0x0258 (0x0258 - 0x0000)
struct FKoratBattleResultCharacterIDRecord final
{
public:
	struct FKoratCharacterBattleCount             BattleCount;                                       // 0x0000(0x0258)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleResultCharacterIDRecord) == 0x000008, "Wrong alignment on FKoratBattleResultCharacterIDRecord");
static_assert(sizeof(FKoratBattleResultCharacterIDRecord) == 0x000258, "Wrong size on FKoratBattleResultCharacterIDRecord");
static_assert(offsetof(FKoratBattleResultCharacterIDRecord, BattleCount) == 0x000000, "Member 'FKoratBattleResultCharacterIDRecord::BattleCount' has a wrong offset!");

// ScriptStruct SS.KoratMapDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMapDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapDataList) == 0x000004, "Wrong alignment on FKoratMapDataList");
static_assert(sizeof(FKoratMapDataList) == 0x000008, "Wrong size on FKoratMapDataList");
static_assert(offsetof(FKoratMapDataList, Key) == 0x000000, "Member 'FKoratMapDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultMapRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleResultMapRecord final
{
public:
	struct FKoratMapBattleCount                   BattleCount;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleResultMapRecord) == 0x000004, "Wrong alignment on FKoratBattleResultMapRecord");
static_assert(sizeof(FKoratBattleResultMapRecord) == 0x000008, "Wrong size on FKoratBattleResultMapRecord");
static_assert(offsetof(FKoratBattleResultMapRecord, BattleCount) == 0x000000, "Member 'FKoratBattleResultMapRecord::BattleCount' has a wrong offset!");

// ScriptStruct SS.KoratBattleReward
// 0x0030 (0x0030 - 0x0000)
struct FKoratBattleReward final
{
public:
	EKoratBattleRewardMode                        RewardMode;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratRewardDataList                   RewardData;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleRewardRandom>       RewardDataRandom;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AcquisitionStart;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HowMmnyTimes;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleRewardClearCondition              ClearCondition;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleReward) == 0x000008, "Wrong alignment on FKoratBattleReward");
static_assert(sizeof(FKoratBattleReward) == 0x000030, "Wrong size on FKoratBattleReward");
static_assert(offsetof(FKoratBattleReward, RewardMode) == 0x000000, "Member 'FKoratBattleReward::RewardMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleReward, RewardData) == 0x000004, "Member 'FKoratBattleReward::RewardData' has a wrong offset!");
static_assert(offsetof(FKoratBattleReward, RewardDataRandom) == 0x000010, "Member 'FKoratBattleReward::RewardDataRandom' has a wrong offset!");
static_assert(offsetof(FKoratBattleReward, AcquisitionStart) == 0x000020, "Member 'FKoratBattleReward::AcquisitionStart' has a wrong offset!");
static_assert(offsetof(FKoratBattleReward, HowMmnyTimes) == 0x000024, "Member 'FKoratBattleReward::HowMmnyTimes' has a wrong offset!");
static_assert(offsetof(FKoratBattleReward, ClearCondition) == 0x000028, "Member 'FKoratBattleReward::ClearCondition' has a wrong offset!");

// ScriptStruct SS.KoratBattleResult
// 0x0220 (0x0220 - 0x0000)
struct FKoratBattleResult final
{
public:
	EBattleWinLose                                BattleWinLose;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleSettlementIndex;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToBadEnd;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleResultPlayerRecord         PlayerRecord;                                      // 0x000C(0x003C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FKoratPlayerStartDataList, struct FKoratBattleResultCharacterRecord> CharacterRecord;                                   // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FKoratBattleResultCharacterIDRecord> OriginalCharacterIDRecord;                         // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FKoratBattleResultCharacterIDRecord> CharacterIDRecord;                                 // 0x00E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratMapDataList, struct FKoratBattleResultMapRecord> MapRecord;                                         // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      OriginalMap;                                       // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpConclusion;                                    // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleTimeSliceData              ConclusionEventData;                               // 0x0198(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EBattleSettleTransitionType                   BattleSettleTransitionType;                        // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialFatePreBattleProduction;                   // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        SpecialFatePreBattleProductionCharacters;          // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDramaticFinish;                                   // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleClearCount;                                  // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleAnotherClearCount;                           // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleAnotherClear;                               // 0x01F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleReward>             BattleReward;                                      // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDragonType>                           UnacquiredMythicalOrb;                             // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bResultStart;                                      // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleResult) == 0x000008, "Wrong alignment on FKoratBattleResult");
static_assert(sizeof(FKoratBattleResult) == 0x000220, "Wrong size on FKoratBattleResult");
static_assert(offsetof(FKoratBattleResult, BattleWinLose) == 0x000000, "Member 'FKoratBattleResult::BattleWinLose' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, BattleSettlementIndex) == 0x000004, "Member 'FKoratBattleResult::BattleSettlementIndex' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, bToBadEnd) == 0x000008, "Member 'FKoratBattleResult::bToBadEnd' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, PlayerRecord) == 0x00000C, "Member 'FKoratBattleResult::PlayerRecord' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, CharacterRecord) == 0x000048, "Member 'FKoratBattleResult::CharacterRecord' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, OriginalCharacterIDRecord) == 0x000098, "Member 'FKoratBattleResult::OriginalCharacterIDRecord' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, CharacterIDRecord) == 0x0000E8, "Member 'FKoratBattleResult::CharacterIDRecord' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, MapRecord) == 0x000138, "Member 'FKoratBattleResult::MapRecord' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, OriginalMap) == 0x000188, "Member 'FKoratBattleResult::OriginalMap' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, IsSpConclusion) == 0x000190, "Member 'FKoratBattleResult::IsSpConclusion' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, ConclusionEventData) == 0x000198, "Member 'FKoratBattleResult::ConclusionEventData' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, BattleSettleTransitionType) == 0x0001D0, "Member 'FKoratBattleResult::BattleSettleTransitionType' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, bSpecialFatePreBattleProduction) == 0x0001D1, "Member 'FKoratBattleResult::bSpecialFatePreBattleProduction' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, SpecialFatePreBattleProductionCharacters) == 0x0001D8, "Member 'FKoratBattleResult::SpecialFatePreBattleProductionCharacters' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, bDramaticFinish) == 0x0001E8, "Member 'FKoratBattleResult::bDramaticFinish' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, BattleClearCount) == 0x0001EC, "Member 'FKoratBattleResult::BattleClearCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, BattleAnotherClearCount) == 0x0001F0, "Member 'FKoratBattleResult::BattleAnotherClearCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, bBattleAnotherClear) == 0x0001F4, "Member 'FKoratBattleResult::bBattleAnotherClear' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, BattleReward) == 0x0001F8, "Member 'FKoratBattleResult::BattleReward' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, UnacquiredMythicalOrb) == 0x000208, "Member 'FKoratBattleResult::UnacquiredMythicalOrb' has a wrong offset!");
static_assert(offsetof(FKoratBattleResult, bResultStart) == 0x000218, "Member 'FKoratBattleResult::bResultStart' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataMovementParameter
// 0x0240 (0x0240 - 0x0000)
struct FKoratCharacterDataMovementParameter final
{
public:
	float                                         NormalSpeed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDistance;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedInterpolateRange;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalWalkSpeed;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearWalkSpeed;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterGroundMoveParameter     GroundMoveParameter;                               // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EMovementMode                                 StartMovementMode;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpMaxHoldTime;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpMaxCount;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashJumpTransitionableHeight;                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashJumpXYVelocity;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashJumpZVelocity;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingHeight;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingNoMotionHeight;                         // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoActionPitchHeight;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingFallScale;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkableFloorAngle;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocity;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControl;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlBoostMultiplier;                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlBoostVelocityThreshold;                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationWalking;                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationFlying;                         // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LockOnTurnSpeed;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransitionRelaxIdle;                            // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveEffectStartSpeed;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveEffectEndSpeed;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoJumpToFly;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpToFlySeconds;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepNearInputAngleFront;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepNearInputAngleLeftRight;                       // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStepNear4Direction;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepFarInputAngleFront;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStepFar2Direction;                              // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionTurnSpeed;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionTiltSpeed;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataHighSpeedMoveParameter HighSpeedMove;                                     // 0x00E0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataHighSpeedMoveParameter SuperHighSpeedMove;                                // 0x0148(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataSuperHighSpeedMoveParameter SuperHighSpeedMoveStr;                             // 0x01B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FluffyCurve;                                       // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishingTraceShiftDistance;                       // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInWallAngle;                                  // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInWallMinElapsedTime;                         // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInWallMaxElapsedTime;                         // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInGroundAngle;                                // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInGroundMinElapsedTime;                       // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmbedInGroundMaxElapsedTime;                       // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbDistance;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallAngle;                                         // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAngleWall;                                    // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAngleAirWall;                                 // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAngleGround;                                  // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideAngleAirGround;                               // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataMovementParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataMovementParameter");
static_assert(sizeof(FKoratCharacterDataMovementParameter) == 0x000240, "Wrong size on FKoratCharacterDataMovementParameter");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NormalSpeed) == 0x000000, "Member 'FKoratCharacterDataMovementParameter::NormalSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NearSpeed) == 0x000004, "Member 'FKoratCharacterDataMovementParameter::NearSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NearDistance) == 0x000008, "Member 'FKoratCharacterDataMovementParameter::NearDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SpeedInterpolateRange) == 0x00000C, "Member 'FKoratCharacterDataMovementParameter::SpeedInterpolateRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NormalWalkSpeed) == 0x000010, "Member 'FKoratCharacterDataMovementParameter::NormalWalkSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NearWalkSpeed) == 0x000014, "Member 'FKoratCharacterDataMovementParameter::NearWalkSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, GroundMoveParameter) == 0x000018, "Member 'FKoratCharacterDataMovementParameter::GroundMoveParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, StartMovementMode) == 0x000040, "Member 'FKoratCharacterDataMovementParameter::StartMovementMode' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, JumpMaxHoldTime) == 0x000044, "Member 'FKoratCharacterDataMovementParameter::JumpMaxHoldTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, JumpMaxCount) == 0x000048, "Member 'FKoratCharacterDataMovementParameter::JumpMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, DashJumpTransitionableHeight) == 0x00004C, "Member 'FKoratCharacterDataMovementParameter::DashJumpTransitionableHeight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, DashJumpXYVelocity) == 0x000050, "Member 'FKoratCharacterDataMovementParameter::DashJumpXYVelocity' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, DashJumpZVelocity) == 0x000054, "Member 'FKoratCharacterDataMovementParameter::DashJumpZVelocity' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AutoLandingHeight) == 0x000058, "Member 'FKoratCharacterDataMovementParameter::AutoLandingHeight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AutoLandingNoMotionHeight) == 0x00005C, "Member 'FKoratCharacterDataMovementParameter::AutoLandingNoMotionHeight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, NoActionPitchHeight) == 0x000060, "Member 'FKoratCharacterDataMovementParameter::NoActionPitchHeight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AutoLandingFallScale) == 0x000064, "Member 'FKoratCharacterDataMovementParameter::AutoLandingFallScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, GravityScale) == 0x000068, "Member 'FKoratCharacterDataMovementParameter::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, WalkableFloorAngle) == 0x00006C, "Member 'FKoratCharacterDataMovementParameter::WalkableFloorAngle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, MaxAcceleration) == 0x000070, "Member 'FKoratCharacterDataMovementParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, JumpZVelocity) == 0x000074, "Member 'FKoratCharacterDataMovementParameter::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AirControl) == 0x000078, "Member 'FKoratCharacterDataMovementParameter::AirControl' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AirControlBoostMultiplier) == 0x00007C, "Member 'FKoratCharacterDataMovementParameter::AirControlBoostMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, AirControlBoostVelocityThreshold) == 0x000080, "Member 'FKoratCharacterDataMovementParameter::AirControlBoostVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, GroundFriction) == 0x000084, "Member 'FKoratCharacterDataMovementParameter::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, BrakingDecelerationWalking) == 0x000088, "Member 'FKoratCharacterDataMovementParameter::BrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, BrakingDecelerationFlying) == 0x00008C, "Member 'FKoratCharacterDataMovementParameter::BrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, RotationRate) == 0x000090, "Member 'FKoratCharacterDataMovementParameter::RotationRate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, LockOnTurnSpeed) == 0x0000A8, "Member 'FKoratCharacterDataMovementParameter::LockOnTurnSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, bIsTransitionRelaxIdle) == 0x0000AC, "Member 'FKoratCharacterDataMovementParameter::bIsTransitionRelaxIdle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, MoveEffectStartSpeed) == 0x0000B0, "Member 'FKoratCharacterDataMovementParameter::MoveEffectStartSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, MoveEffectEndSpeed) == 0x0000B4, "Member 'FKoratCharacterDataMovementParameter::MoveEffectEndSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, bIsAutoJumpToFly) == 0x0000B8, "Member 'FKoratCharacterDataMovementParameter::bIsAutoJumpToFly' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, JumpToFlySeconds) == 0x0000BC, "Member 'FKoratCharacterDataMovementParameter::JumpToFlySeconds' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, StepNearInputAngleFront) == 0x0000C0, "Member 'FKoratCharacterDataMovementParameter::StepNearInputAngleFront' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, StepNearInputAngleLeftRight) == 0x0000C4, "Member 'FKoratCharacterDataMovementParameter::StepNearInputAngleLeftRight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, bIsStepNear4Direction) == 0x0000C8, "Member 'FKoratCharacterDataMovementParameter::bIsStepNear4Direction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, StepFarInputAngleFront) == 0x0000CC, "Member 'FKoratCharacterDataMovementParameter::StepFarInputAngleFront' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, bIsStepFar2Direction) == 0x0000D0, "Member 'FKoratCharacterDataMovementParameter::bIsStepFar2Direction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, ActionTurnSpeed) == 0x0000D4, "Member 'FKoratCharacterDataMovementParameter::ActionTurnSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, ActionTiltSpeed) == 0x0000D8, "Member 'FKoratCharacterDataMovementParameter::ActionTiltSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, HighSpeedMove) == 0x0000E0, "Member 'FKoratCharacterDataMovementParameter::HighSpeedMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SuperHighSpeedMove) == 0x000148, "Member 'FKoratCharacterDataMovementParameter::SuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SuperHighSpeedMoveStr) == 0x0001B0, "Member 'FKoratCharacterDataMovementParameter::SuperHighSpeedMoveStr' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, FluffyCurve) == 0x000200, "Member 'FKoratCharacterDataMovementParameter::FluffyCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, VanishingTraceShiftDistance) == 0x000208, "Member 'FKoratCharacterDataMovementParameter::VanishingTraceShiftDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInWallAngle) == 0x00020C, "Member 'FKoratCharacterDataMovementParameter::EmbedInWallAngle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInWallMinElapsedTime) == 0x000210, "Member 'FKoratCharacterDataMovementParameter::EmbedInWallMinElapsedTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInWallMaxElapsedTime) == 0x000214, "Member 'FKoratCharacterDataMovementParameter::EmbedInWallMaxElapsedTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInGroundAngle) == 0x000218, "Member 'FKoratCharacterDataMovementParameter::EmbedInGroundAngle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInGroundMinElapsedTime) == 0x00021C, "Member 'FKoratCharacterDataMovementParameter::EmbedInGroundMinElapsedTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, EmbedInGroundMaxElapsedTime) == 0x000220, "Member 'FKoratCharacterDataMovementParameter::EmbedInGroundMaxElapsedTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, ClimbDistance) == 0x000224, "Member 'FKoratCharacterDataMovementParameter::ClimbDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, WallAngle) == 0x000228, "Member 'FKoratCharacterDataMovementParameter::WallAngle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SlideAngleWall) == 0x00022C, "Member 'FKoratCharacterDataMovementParameter::SlideAngleWall' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SlideAngleAirWall) == 0x000230, "Member 'FKoratCharacterDataMovementParameter::SlideAngleAirWall' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SlideAngleGround) == 0x000234, "Member 'FKoratCharacterDataMovementParameter::SlideAngleGround' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataMovementParameter, SlideAngleAirGround) == 0x000238, "Member 'FKoratCharacterDataMovementParameter::SlideAngleAirGround' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubtitleRuntimeDescriptionDE
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSSEventSceneSubtitleRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneSubtitleRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneSubtitleRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneSubtitleRuntimeDescriptionDE) == 0x000030, "Wrong size on FSSEventSceneSubtitleRuntimeDescriptionDE");

// ScriptStruct SS.KoratCharacterDataShortDashParameter
// 0x0030 (0x0030 - 0x0000)
struct FKoratCharacterDataShortDashParameter final
{
public:
	class UCurveFloat*                            AddToSpeedCurve;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddToSpeedScale;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTimeToOT;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStopClearSpeed;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopBrakingDeceleration;                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCost;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataShortDashParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataShortDashParameter");
static_assert(sizeof(FKoratCharacterDataShortDashParameter) == 0x000030, "Wrong size on FKoratCharacterDataShortDashParameter");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, AddToSpeedCurve) == 0x000000, "Member 'FKoratCharacterDataShortDashParameter::AddToSpeedCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, AddToSpeedScale) == 0x000008, "Member 'FKoratCharacterDataShortDashParameter::AddToSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, MaxAcceleration) == 0x00000C, "Member 'FKoratCharacterDataShortDashParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, BrakingDeceleration) == 0x000010, "Member 'FKoratCharacterDataShortDashParameter::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, ElapsedTimeToOT) == 0x000014, "Member 'FKoratCharacterDataShortDashParameter::ElapsedTimeToOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, Duration) == 0x000018, "Member 'FKoratCharacterDataShortDashParameter::Duration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, CoolTime) == 0x00001C, "Member 'FKoratCharacterDataShortDashParameter::CoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, bIsStopClearSpeed) == 0x000020, "Member 'FKoratCharacterDataShortDashParameter::bIsStopClearSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, StopBrakingDeceleration) == 0x000024, "Member 'FKoratCharacterDataShortDashParameter::StopBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataShortDashParameter, SpCost) == 0x000028, "Member 'FKoratCharacterDataShortDashParameter::SpCost' has a wrong offset!");

// ScriptStruct SS.SSChameleonVector3DN
// 0x0018 (0x0018 - 0x0000)
struct FSSChameleonVector3DN final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Z;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSChameleonVector3DN) == 0x000008, "Wrong alignment on FSSChameleonVector3DN");
static_assert(sizeof(FSSChameleonVector3DN) == 0x000018, "Wrong size on FSSChameleonVector3DN");
static_assert(offsetof(FSSChameleonVector3DN, X) == 0x000000, "Member 'FSSChameleonVector3DN::X' has a wrong offset!");
static_assert(offsetof(FSSChameleonVector3DN, Y) == 0x000008, "Member 'FSSChameleonVector3DN::Y' has a wrong offset!");
static_assert(offsetof(FSSChameleonVector3DN, Z) == 0x000010, "Member 'FSSChameleonVector3DN::Z' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSlowRuntimeDescriptionDE
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSEventSceneSlowRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneSlowRuntimeDescriptionDE) == 0x000004, "Wrong alignment on FSSEventSceneSlowRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneSlowRuntimeDescriptionDE) == 0x000008, "Wrong size on FSSEventSceneSlowRuntimeDescriptionDE");

// ScriptStruct SS.KoratCharacterDataStepParameter
// 0x001C (0x001C - 0x0000)
struct FKoratCharacterDataStepParameter final
{
public:
	bool                                          bIsUseOTParameter;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClearVelocityAtStart;                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRotateToTarget;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepMaxHoldTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataStepParameter) == 0x000004, "Wrong alignment on FKoratCharacterDataStepParameter");
static_assert(sizeof(FKoratCharacterDataStepParameter) == 0x00001C, "Wrong size on FKoratCharacterDataStepParameter");
static_assert(offsetof(FKoratCharacterDataStepParameter, bIsUseOTParameter) == 0x000000, "Member 'FKoratCharacterDataStepParameter::bIsUseOTParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, bIsClearVelocityAtStart) == 0x000001, "Member 'FKoratCharacterDataStepParameter::bIsClearVelocityAtStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, bIsRotateToTarget) == 0x000002, "Member 'FKoratCharacterDataStepParameter::bIsRotateToTarget' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, MaxSpeed) == 0x000004, "Member 'FKoratCharacterDataStepParameter::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, StepMaxHoldTime) == 0x000008, "Member 'FKoratCharacterDataStepParameter::StepMaxHoldTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, GravityScale) == 0x00000C, "Member 'FKoratCharacterDataStepParameter::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, MaxAcceleration) == 0x000010, "Member 'FKoratCharacterDataStepParameter::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, GroundFriction) == 0x000014, "Member 'FKoratCharacterDataStepParameter::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStepParameter, BrakingDeceleration) == 0x000018, "Member 'FKoratCharacterDataStepParameter::BrakingDeceleration' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataDragonHomingParameter
// 0x0070 (0x0070 - 0x0000)
struct FKoratCharacterDataDragonHomingParameter final
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterIN;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterLP;                               // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterOT;                               // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TurnSpeedINOT;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostIN;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostLP;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataDragonHomingParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataDragonHomingParameter");
static_assert(sizeof(FKoratCharacterDataDragonHomingParameter) == 0x000070, "Wrong size on FKoratCharacterDataDragonHomingParameter");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, MovementParameterIN) == 0x000000, "Member 'FKoratCharacterDataDragonHomingParameter::MovementParameterIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, MovementParameterLP) == 0x000020, "Member 'FKoratCharacterDataDragonHomingParameter::MovementParameterLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, MovementParameterOT) == 0x000040, "Member 'FKoratCharacterDataDragonHomingParameter::MovementParameterOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, TurnSpeedINOT) == 0x000060, "Member 'FKoratCharacterDataDragonHomingParameter::TurnSpeedINOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, SpCostIN) == 0x000064, "Member 'FKoratCharacterDataDragonHomingParameter::SpCostIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDragonHomingParameter, SpCostLP) == 0x000068, "Member 'FKoratCharacterDataDragonHomingParameter::SpCostLP' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditSituationDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditSituationDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditSituationDataList) == 0x000004, "Wrong alignment on FKoratDRMEditSituationDataList");
static_assert(sizeof(FKoratDRMEditSituationDataList) == 0x000008, "Wrong size on FKoratDRMEditSituationDataList");
static_assert(offsetof(FKoratDRMEditSituationDataList, Key) == 0x000000, "Member 'FKoratDRMEditSituationDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticGuestCharacterStruct
// 0x0020 (0x0020 - 0x0000)
struct FKoratDramaticGuestCharacterStruct final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeItem;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    EquipItem;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticGuestCharacterStruct) == 0x000008, "Wrong alignment on FKoratDramaticGuestCharacterStruct");
static_assert(sizeof(FKoratDramaticGuestCharacterStruct) == 0x000020, "Wrong size on FKoratDramaticGuestCharacterStruct");
static_assert(offsetof(FKoratDramaticGuestCharacterStruct, Character) == 0x000000, "Member 'FKoratDramaticGuestCharacterStruct::Character' has a wrong offset!");
static_assert(offsetof(FKoratDramaticGuestCharacterStruct, CostumeItem) == 0x000008, "Member 'FKoratDramaticGuestCharacterStruct::CostumeItem' has a wrong offset!");
static_assert(offsetof(FKoratDramaticGuestCharacterStruct, EquipItem) == 0x000010, "Member 'FKoratDramaticGuestCharacterStruct::EquipItem' has a wrong offset!");

// ScriptStruct SS.SSOptionSoundVisibleFlags
// 0x0004 (0x0004 - 0x0000)
struct FSSOptionSoundVisibleFlags final
{
public:
	bool                                          bBgmVolume;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeVolume;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoiceVolume;                                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimSong;                                         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionSoundVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionSoundVisibleFlags");
static_assert(sizeof(FSSOptionSoundVisibleFlags) == 0x000004, "Wrong size on FSSOptionSoundVisibleFlags");
static_assert(offsetof(FSSOptionSoundVisibleFlags, bBgmVolume) == 0x000000, "Member 'FSSOptionSoundVisibleFlags::bBgmVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundVisibleFlags, bSeVolume) == 0x000001, "Member 'FSSOptionSoundVisibleFlags::bSeVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundVisibleFlags, bVoiceVolume) == 0x000002, "Member 'FSSOptionSoundVisibleFlags::bVoiceVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundVisibleFlags, bAnimSong) == 0x000003, "Member 'FSSOptionSoundVisibleFlags::bAnimSong' has a wrong offset!");

// ScriptStruct SS.SSOptionEtcVisibleFlags
// 0x0004 (0x0004 - 0x0000)
struct FSSOptionEtcVisibleFlags final
{
public:
	bool                                          bAnalysis;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEULA;                                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrivacyPolicy;                                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightsNotation;                                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionEtcVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionEtcVisibleFlags");
static_assert(sizeof(FSSOptionEtcVisibleFlags) == 0x000004, "Wrong size on FSSOptionEtcVisibleFlags");
static_assert(offsetof(FSSOptionEtcVisibleFlags, bAnalysis) == 0x000000, "Member 'FSSOptionEtcVisibleFlags::bAnalysis' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcVisibleFlags, bEULA) == 0x000001, "Member 'FSSOptionEtcVisibleFlags::bEULA' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcVisibleFlags, bPrivacyPolicy) == 0x000002, "Member 'FSSOptionEtcVisibleFlags::bPrivacyPolicy' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcVisibleFlags, bRightsNotation) == 0x000003, "Member 'FSSOptionEtcVisibleFlags::bRightsNotation' has a wrong offset!");

// ScriptStruct SS.SSOptionBrightnessVisibleFlags
// 0x0005 (0x0005 - 0x0000)
struct FSSOptionBrightnessVisibleFlags final
{
public:
	bool                                          bHDR;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHDR_Brightness;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHDR_Black;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHDR_Contrast;                                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSDR_Brightness;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionBrightnessVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionBrightnessVisibleFlags");
static_assert(sizeof(FSSOptionBrightnessVisibleFlags) == 0x000005, "Wrong size on FSSOptionBrightnessVisibleFlags");
static_assert(offsetof(FSSOptionBrightnessVisibleFlags, bHDR) == 0x000000, "Member 'FSSOptionBrightnessVisibleFlags::bHDR' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessVisibleFlags, bHDR_Brightness) == 0x000001, "Member 'FSSOptionBrightnessVisibleFlags::bHDR_Brightness' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessVisibleFlags, bHDR_Black) == 0x000002, "Member 'FSSOptionBrightnessVisibleFlags::bHDR_Black' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessVisibleFlags, bHDR_Contrast) == 0x000003, "Member 'FSSOptionBrightnessVisibleFlags::bHDR_Contrast' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessVisibleFlags, bSDR_Brightness) == 0x000004, "Member 'FSSOptionBrightnessVisibleFlags::bSDR_Brightness' has a wrong offset!");

// ScriptStruct SS.SSOptionVideoVisibleFlags
// 0x0010 (0x0010 - 0x0000)
struct FSSOptionVideoVisibleFlags final
{
public:
	bool                                          bFullscreenMode;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResolution;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScreenNo;                                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResolutionScale;                                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiAlias;                                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShadow;                                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTexture;                                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPostProcess;                                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEffect;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoliage;                                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMotionBlur;                                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandyCameraShake;                                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLod;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChaos;                                            // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVsync;                                            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDof;                                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionVideoVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionVideoVisibleFlags");
static_assert(sizeof(FSSOptionVideoVisibleFlags) == 0x000010, "Wrong size on FSSOptionVideoVisibleFlags");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bFullscreenMode) == 0x000000, "Member 'FSSOptionVideoVisibleFlags::bFullscreenMode' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bResolution) == 0x000001, "Member 'FSSOptionVideoVisibleFlags::bResolution' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bScreenNo) == 0x000002, "Member 'FSSOptionVideoVisibleFlags::bScreenNo' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bResolutionScale) == 0x000003, "Member 'FSSOptionVideoVisibleFlags::bResolutionScale' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bAntiAlias) == 0x000004, "Member 'FSSOptionVideoVisibleFlags::bAntiAlias' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bShadow) == 0x000005, "Member 'FSSOptionVideoVisibleFlags::bShadow' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bTexture) == 0x000006, "Member 'FSSOptionVideoVisibleFlags::bTexture' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bPostProcess) == 0x000007, "Member 'FSSOptionVideoVisibleFlags::bPostProcess' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bEffect) == 0x000008, "Member 'FSSOptionVideoVisibleFlags::bEffect' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bFoliage) == 0x000009, "Member 'FSSOptionVideoVisibleFlags::bFoliage' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bMotionBlur) == 0x00000A, "Member 'FSSOptionVideoVisibleFlags::bMotionBlur' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bHandyCameraShake) == 0x00000B, "Member 'FSSOptionVideoVisibleFlags::bHandyCameraShake' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bLod) == 0x00000C, "Member 'FSSOptionVideoVisibleFlags::bLod' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bChaos) == 0x00000D, "Member 'FSSOptionVideoVisibleFlags::bChaos' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bVsync) == 0x00000E, "Member 'FSSOptionVideoVisibleFlags::bVsync' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoVisibleFlags, bDof) == 0x00000F, "Member 'FSSOptionVideoVisibleFlags::bDof' has a wrong offset!");

// ScriptStruct SS.SSOptionKeyControlVisibleFlags
// 0x0005 (0x0005 - 0x0000)
struct FSSOptionKeyControlVisibleFlags final
{
public:
	bool                                          bAssistControl;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHanded;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTutorialMode;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveDataReset;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserNotification;                                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionKeyControlVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionKeyControlVisibleFlags");
static_assert(sizeof(FSSOptionKeyControlVisibleFlags) == 0x000005, "Wrong size on FSSOptionKeyControlVisibleFlags");
static_assert(offsetof(FSSOptionKeyControlVisibleFlags, bAssistControl) == 0x000000, "Member 'FSSOptionKeyControlVisibleFlags::bAssistControl' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlVisibleFlags, bLeftHanded) == 0x000001, "Member 'FSSOptionKeyControlVisibleFlags::bLeftHanded' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlVisibleFlags, bTutorialMode) == 0x000002, "Member 'FSSOptionKeyControlVisibleFlags::bTutorialMode' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlVisibleFlags, bSaveDataReset) == 0x000003, "Member 'FSSOptionKeyControlVisibleFlags::bSaveDataReset' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlVisibleFlags, bUserNotification) == 0x000004, "Member 'FSSOptionKeyControlVisibleFlags::bUserNotification' has a wrong offset!");

// ScriptStruct SS.SSOptionAssistVisibleFlags
// 0x0007 (0x0007 - 0x0000)
struct FSSOptionAssistVisibleFlags final
{
public:
	bool                                          bCombo;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuit;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDash;                                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDashAttack;                                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuard;                                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassive;                                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevengeCounter;                                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionAssistVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionAssistVisibleFlags");
static_assert(sizeof(FSSOptionAssistVisibleFlags) == 0x000007, "Wrong size on FSSOptionAssistVisibleFlags");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bCombo) == 0x000000, "Member 'FSSOptionAssistVisibleFlags::bCombo' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bPursuit) == 0x000001, "Member 'FSSOptionAssistVisibleFlags::bPursuit' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bDragonDash) == 0x000002, "Member 'FSSOptionAssistVisibleFlags::bDragonDash' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bDragonDashAttack) == 0x000003, "Member 'FSSOptionAssistVisibleFlags::bDragonDashAttack' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bGuard) == 0x000004, "Member 'FSSOptionAssistVisibleFlags::bGuard' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bPassive) == 0x000005, "Member 'FSSOptionAssistVisibleFlags::bPassive' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistVisibleFlags, bRevengeCounter) == 0x000006, "Member 'FSSOptionAssistVisibleFlags::bRevengeCounter' has a wrong offset!");

// ScriptStruct SS.SSOptionVisibleFlags
// 0x0070 (0x0070 - 0x0000)
struct FSSOptionVisibleFlags final
{
public:
	struct FSSOptionControlVisibleFlags           Control;                                           // 0x0000(0x000D)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionSoundVisibleFlags             Sound;                                             // 0x000D(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionLanguageVisibleFlags          Language;                                          // 0x0011(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionEtcVisibleFlags               Etc;                                               // 0x0015(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionBrightnessVisibleFlags        Brightness;                                        // 0x0019(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionVideoVisibleFlags             Video;                                             // 0x001E(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionKeyControlVisibleFlags        KeyControl;                                        // 0x002E(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistVisibleFlags            Assist;                                            // 0x0033(0x0007)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionControlVisibleFlags           Control2P;                                         // 0x003A(0x000D)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionBrightnessVisibleFlags        Brightness2P;                                      // 0x0047(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionVideoVisibleFlags             Video2P;                                           // 0x004C(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionKeyControlVisibleFlags        KeyControl2P;                                      // 0x005C(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistVisibleFlags            Assist2P;                                          // 0x0061(0x0007)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bControl;                                          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSound;                                            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLanguage;                                         // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEtc;                                              // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrightness;                                       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVideo;                                            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeyControl;                                       // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCredit;                                           // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionVisibleFlags) == 0x000001, "Wrong alignment on FSSOptionVisibleFlags");
static_assert(sizeof(FSSOptionVisibleFlags) == 0x000070, "Wrong size on FSSOptionVisibleFlags");
static_assert(offsetof(FSSOptionVisibleFlags, Control) == 0x000000, "Member 'FSSOptionVisibleFlags::Control' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Sound) == 0x00000D, "Member 'FSSOptionVisibleFlags::Sound' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Language) == 0x000011, "Member 'FSSOptionVisibleFlags::Language' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Etc) == 0x000015, "Member 'FSSOptionVisibleFlags::Etc' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Brightness) == 0x000019, "Member 'FSSOptionVisibleFlags::Brightness' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Video) == 0x00001E, "Member 'FSSOptionVisibleFlags::Video' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, KeyControl) == 0x00002E, "Member 'FSSOptionVisibleFlags::KeyControl' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Assist) == 0x000033, "Member 'FSSOptionVisibleFlags::Assist' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Control2P) == 0x00003A, "Member 'FSSOptionVisibleFlags::Control2P' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Brightness2P) == 0x000047, "Member 'FSSOptionVisibleFlags::Brightness2P' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Video2P) == 0x00004C, "Member 'FSSOptionVisibleFlags::Video2P' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, KeyControl2P) == 0x00005C, "Member 'FSSOptionVisibleFlags::KeyControl2P' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, Assist2P) == 0x000061, "Member 'FSSOptionVisibleFlags::Assist2P' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bControl) == 0x000068, "Member 'FSSOptionVisibleFlags::bControl' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bSound) == 0x000069, "Member 'FSSOptionVisibleFlags::bSound' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bLanguage) == 0x00006A, "Member 'FSSOptionVisibleFlags::bLanguage' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bEtc) == 0x00006B, "Member 'FSSOptionVisibleFlags::bEtc' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bBrightness) == 0x00006C, "Member 'FSSOptionVisibleFlags::bBrightness' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bVideo) == 0x00006D, "Member 'FSSOptionVisibleFlags::bVideo' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bKeyControl) == 0x00006E, "Member 'FSSOptionVisibleFlags::bKeyControl' has a wrong offset!");
static_assert(offsetof(FSSOptionVisibleFlags, bCredit) == 0x00006F, "Member 'FSSOptionVisibleFlags::bCredit' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataZBurstDashParameter
// 0x0068 (0x0068 - 0x0000)
struct FKoratCharacterDataZBurstDashParameter final
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterIN;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterLP;                               // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterOT;                               // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TurnSpeedINOT;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostIN;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataZBurstDashParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataZBurstDashParameter");
static_assert(sizeof(FKoratCharacterDataZBurstDashParameter) == 0x000068, "Wrong size on FKoratCharacterDataZBurstDashParameter");
static_assert(offsetof(FKoratCharacterDataZBurstDashParameter, MovementParameterIN) == 0x000000, "Member 'FKoratCharacterDataZBurstDashParameter::MovementParameterIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataZBurstDashParameter, MovementParameterLP) == 0x000020, "Member 'FKoratCharacterDataZBurstDashParameter::MovementParameterLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataZBurstDashParameter, MovementParameterOT) == 0x000040, "Member 'FKoratCharacterDataZBurstDashParameter::MovementParameterOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataZBurstDashParameter, TurnSpeedINOT) == 0x000060, "Member 'FKoratCharacterDataZBurstDashParameter::TurnSpeedINOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataZBurstDashParameter, SpCostIN) == 0x000064, "Member 'FKoratCharacterDataZBurstDashParameter::SpCostIN' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataRevengeDashParameter
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterDataRevengeDashParameter final
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterIN;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataRevengeDashParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataRevengeDashParameter");
static_assert(sizeof(FKoratCharacterDataRevengeDashParameter) == 0x000020, "Wrong size on FKoratCharacterDataRevengeDashParameter");
static_assert(offsetof(FKoratCharacterDataRevengeDashParameter, MovementParameterIN) == 0x000000, "Member 'FKoratCharacterDataRevengeDashParameter::MovementParameterIN' has a wrong offset!");

// ScriptStruct SS.BattleImpactLevelSequenceParams
// 0x0020 (0x0020 - 0x0000)
struct FBattleImpactLevelSequenceParams final
{
public:
	class USSActionCameraDataAsset*               ActionCameraAsset;                                 // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLerpTime;                                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraSlot;                                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraBranch;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualCameraReconnect;                             // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleImpactLevelSequenceParams) == 0x000008, "Wrong alignment on FBattleImpactLevelSequenceParams");
static_assert(sizeof(FBattleImpactLevelSequenceParams) == 0x000020, "Wrong size on FBattleImpactLevelSequenceParams");
static_assert(offsetof(FBattleImpactLevelSequenceParams, ActionCameraAsset) == 0x000000, "Member 'FBattleImpactLevelSequenceParams::ActionCameraAsset' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, StartFrame) == 0x000008, "Member 'FBattleImpactLevelSequenceParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, bLoop) == 0x00000C, "Member 'FBattleImpactLevelSequenceParams::bLoop' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, CameraLerpTime) == 0x000010, "Member 'FBattleImpactLevelSequenceParams::CameraLerpTime' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, CameraSlot) == 0x000014, "Member 'FBattleImpactLevelSequenceParams::CameraSlot' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, CameraBranch) == 0x000018, "Member 'FBattleImpactLevelSequenceParams::CameraBranch' has a wrong offset!");
static_assert(offsetof(FBattleImpactLevelSequenceParams, ManualCameraReconnect) == 0x00001C, "Member 'FBattleImpactLevelSequenceParams::ManualCameraReconnect' has a wrong offset!");

// ScriptStruct SS.BattleReplayState
// 0x0008 (0x0008 - 0x0000)
struct FBattleReplayState final
{
public:
	int32                                         ReplayIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSumsError;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleReplayState) == 0x000004, "Wrong alignment on FBattleReplayState");
static_assert(sizeof(FBattleReplayState) == 0x000008, "Wrong size on FBattleReplayState");
static_assert(offsetof(FBattleReplayState, ReplayIndex) == 0x000000, "Member 'FBattleReplayState::ReplayIndex' has a wrong offset!");
static_assert(offsetof(FBattleReplayState, bCheckSumsError) == 0x000004, "Member 'FBattleReplayState::bCheckSumsError' has a wrong offset!");
static_assert(offsetof(FBattleReplayState, bPlaying) == 0x000005, "Member 'FBattleReplayState::bPlaying' has a wrong offset!");

// ScriptStruct SS.KoratMissionCharaSequencerData
// 0x0038 (0x0038 - 0x0000)
struct FKoratMissionCharaSequencerData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          SequencerData;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMissionCharaSequencerData) == 0x000008, "Wrong alignment on FKoratMissionCharaSequencerData");
static_assert(sizeof(FKoratMissionCharaSequencerData) == 0x000038, "Wrong size on FKoratMissionCharaSequencerData");
static_assert(offsetof(FKoratMissionCharaSequencerData, SequencerData) == 0x000000, "Member 'FKoratMissionCharaSequencerData::SequencerData' has a wrong offset!");
static_assert(offsetof(FKoratMissionCharaSequencerData, Duration) == 0x000030, "Member 'FKoratMissionCharaSequencerData::Duration' has a wrong offset!");

// ScriptStruct SS.KoratMissionCharaData
// 0x0020 (0x0020 - 0x0000)
struct FKoratMissionCharaData final
{
public:
	struct FKoratCharacterDataList                CharacterData;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              LocatorData;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratMissionCharaSequencerData> CharaSequencerData;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionCharaData) == 0x000008, "Wrong alignment on FKoratMissionCharaData");
static_assert(sizeof(FKoratMissionCharaData) == 0x000020, "Wrong size on FKoratMissionCharaData");
static_assert(offsetof(FKoratMissionCharaData, CharacterData) == 0x000000, "Member 'FKoratMissionCharaData::CharacterData' has a wrong offset!");
static_assert(offsetof(FKoratMissionCharaData, LocatorData) == 0x000008, "Member 'FKoratMissionCharaData::LocatorData' has a wrong offset!");
static_assert(offsetof(FKoratMissionCharaData, CharaSequencerData) == 0x000010, "Member 'FKoratMissionCharaData::CharaSequencerData' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataDashUpDownParameter
// 0x00E8 (0x00E8 - 0x0000)
struct FKoratCharacterDataDashUpDownParameter final
{
public:
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterUpIN;                             // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterUpLP;                             // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterUpOT;                             // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterDownIN;                           // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterDownLP;                           // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameterDownOT;                           // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinTimeUpLp;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableActionUpOT;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeDownLp;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableActionDownOT;                                // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableActionDownLanding;                           // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostUpIN;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostUpLP;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostDownIN;                                      // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpCostDownLP;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataDashUpDownParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataDashUpDownParameter");
static_assert(sizeof(FKoratCharacterDataDashUpDownParameter) == 0x0000E8, "Wrong size on FKoratCharacterDataDashUpDownParameter");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterUpIN) == 0x000000, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterUpIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterUpLP) == 0x000020, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterUpLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterUpOT) == 0x000040, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterUpOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterDownIN) == 0x000060, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterDownIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterDownLP) == 0x000080, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterDownLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MovementParameterDownOT) == 0x0000A0, "Member 'FKoratCharacterDataDashUpDownParameter::MovementParameterDownOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MinTimeUpLp) == 0x0000C0, "Member 'FKoratCharacterDataDashUpDownParameter::MinTimeUpLp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, EnableActionUpOT) == 0x0000C4, "Member 'FKoratCharacterDataDashUpDownParameter::EnableActionUpOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, MinTimeDownLp) == 0x0000C8, "Member 'FKoratCharacterDataDashUpDownParameter::MinTimeDownLp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, EnableActionDownOT) == 0x0000CC, "Member 'FKoratCharacterDataDashUpDownParameter::EnableActionDownOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, EnableActionDownLanding) == 0x0000D0, "Member 'FKoratCharacterDataDashUpDownParameter::EnableActionDownLanding' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, SpCostUpIN) == 0x0000D4, "Member 'FKoratCharacterDataDashUpDownParameter::SpCostUpIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, SpCostUpLP) == 0x0000D8, "Member 'FKoratCharacterDataDashUpDownParameter::SpCostUpLP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, SpCostDownIN) == 0x0000DC, "Member 'FKoratCharacterDataDashUpDownParameter::SpCostDownIN' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataDashUpDownParameter, SpCostDownLP) == 0x0000E0, "Member 'FKoratCharacterDataDashUpDownParameter::SpCostDownLP' has a wrong offset!");

// ScriptStruct SS.KoratAttackHomingData
// 0x0058 (0x0058 - 0x0000)
struct FKoratAttackHomingData final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRehoming;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShortRangeOnly;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClearVelocityAtStart;                            // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddMovementTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingMaxAngle;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMoveOutOfHomingAngleRange;                       // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IsMoveTargetOffset;                                // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MoveRotation;                                      // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAttackHomingData) == 0x000008, "Wrong alignment on FKoratAttackHomingData");
static_assert(sizeof(FKoratAttackHomingData) == 0x000058, "Wrong size on FKoratAttackHomingData");
static_assert(offsetof(FKoratAttackHomingData, SortId) == 0x000000, "Member 'FKoratAttackHomingData::SortId' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, IsRehoming) == 0x000004, "Member 'FKoratAttackHomingData::IsRehoming' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, IsShortRangeOnly) == 0x000005, "Member 'FKoratAttackHomingData::IsShortRangeOnly' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, IsClearVelocityAtStart) == 0x000006, "Member 'FKoratAttackHomingData::IsClearVelocityAtStart' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, AddMovementTime) == 0x000008, "Member 'FKoratAttackHomingData::AddMovementTime' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, MaxSpeed) == 0x00000C, "Member 'FKoratAttackHomingData::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, GravityScale) == 0x000010, "Member 'FKoratAttackHomingData::GravityScale' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, MaxAcceleration) == 0x000014, "Member 'FKoratAttackHomingData::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, GroundFriction) == 0x000018, "Member 'FKoratAttackHomingData::GroundFriction' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, BrakingDeceleration) == 0x00001C, "Member 'FKoratAttackHomingData::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, HomingMaxAngle) == 0x000020, "Member 'FKoratAttackHomingData::HomingMaxAngle' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, IsMoveOutOfHomingAngleRange) == 0x000024, "Member 'FKoratAttackHomingData::IsMoveOutOfHomingAngleRange' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, IsMoveTargetOffset) == 0x000028, "Member 'FKoratAttackHomingData::IsMoveTargetOffset' has a wrong offset!");
static_assert(offsetof(FKoratAttackHomingData, MoveRotation) == 0x000040, "Member 'FKoratAttackHomingData::MoveRotation' has a wrong offset!");

// ScriptStruct SS.KoratBindingIdSetting
// 0x0028 (0x0028 - 0x0000)
struct FKoratBindingIdSetting final
{
public:
	class FString                                 PatternName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddTagName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddTagSameDisplayName;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoAddTag;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0xE];                                       // 0x001A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBindingIdSetting) == 0x000008, "Wrong alignment on FKoratBindingIdSetting");
static_assert(sizeof(FKoratBindingIdSetting) == 0x000028, "Wrong size on FKoratBindingIdSetting");
static_assert(offsetof(FKoratBindingIdSetting, PatternName) == 0x000000, "Member 'FKoratBindingIdSetting::PatternName' has a wrong offset!");
static_assert(offsetof(FKoratBindingIdSetting, AddTagName) == 0x000010, "Member 'FKoratBindingIdSetting::AddTagName' has a wrong offset!");
static_assert(offsetof(FKoratBindingIdSetting, bAddTagSameDisplayName) == 0x000018, "Member 'FKoratBindingIdSetting::bAddTagSameDisplayName' has a wrong offset!");
static_assert(offsetof(FKoratBindingIdSetting, bEnableAutoAddTag) == 0x000019, "Member 'FKoratBindingIdSetting::bEnableAutoAddTag' has a wrong offset!");

// ScriptStruct SS.KoratGroupIdDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratGroupIdDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratGroupIdDataList) == 0x000004, "Wrong alignment on FKoratGroupIdDataList");
static_assert(sizeof(FKoratGroupIdDataList) == 0x000008, "Wrong size on FKoratGroupIdDataList");
static_assert(offsetof(FKoratGroupIdDataList, Key) == 0x000000, "Member 'FKoratGroupIdDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratManagedId
// 0x0048 (0x0048 - 0x0000)
struct FKoratManagedId final
{
public:
	class FName                                   ManagedId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratGroupIdDataList                  GroupId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionKey;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentActorName;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceActorName;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratManagedId) == 0x000008, "Wrong alignment on FKoratManagedId");
static_assert(sizeof(FKoratManagedId) == 0x000048, "Wrong size on FKoratManagedId");
static_assert(offsetof(FKoratManagedId, ManagedId) == 0x000000, "Member 'FKoratManagedId::ManagedId' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, GroupId) == 0x000008, "Member 'FKoratManagedId::GroupId' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, FormId) == 0x000010, "Member 'FKoratManagedId::FormId' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, ActionKey) == 0x000018, "Member 'FKoratManagedId::ActionKey' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, ParentActorName) == 0x000020, "Member 'FKoratManagedId::ParentActorName' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, SequenceActorName) == 0x000028, "Member 'FKoratManagedId::SequenceActorName' has a wrong offset!");
static_assert(offsetof(FKoratManagedId, ActorName) == 0x000030, "Member 'FKoratManagedId::ActorName' has a wrong offset!");

// ScriptStruct SS.SSSupportingCharacterData
// 0x0048 (0x0048 - 0x0000)
struct FSSSupportingCharacterData final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritDamageModel;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritEquipItems;                                // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratCharacterMLSDataAsset*            CharacterMLS;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   FirstAction;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeDamageLv;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeScratchLv;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubCharacterCostume;                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubCharacterEquipItems;                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubCharacterFormChanage;                        // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x15];                                      // 0x0033(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSupportingCharacterData) == 0x000008, "Wrong alignment on FSSSupportingCharacterData");
static_assert(sizeof(FSSSupportingCharacterData) == 0x000048, "Wrong size on FSSSupportingCharacterData");
static_assert(offsetof(FSSSupportingCharacterData, Character) == 0x000000, "Member 'FSSSupportingCharacterData::Character' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, Costume) == 0x000008, "Member 'FSSSupportingCharacterData::Costume' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, bInheritDamageModel) == 0x000010, "Member 'FSSSupportingCharacterData::bInheritDamageModel' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, bInheritEquipItems) == 0x000011, "Member 'FSSSupportingCharacterData::bInheritEquipItems' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, CharacterMLS) == 0x000018, "Member 'FSSSupportingCharacterData::CharacterMLS' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, FirstAction) == 0x000020, "Member 'FSSSupportingCharacterData::FirstAction' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, CostumeDamageLv) == 0x000028, "Member 'FSSSupportingCharacterData::CostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, CostumeScratchLv) == 0x00002C, "Member 'FSSSupportingCharacterData::CostumeScratchLv' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, bIsSubCharacterCostume) == 0x000030, "Member 'FSSSupportingCharacterData::bIsSubCharacterCostume' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, bIsSubCharacterEquipItems) == 0x000031, "Member 'FSSSupportingCharacterData::bIsSubCharacterEquipItems' has a wrong offset!");
static_assert(offsetof(FSSSupportingCharacterData, bIsSubCharacterFormChanage) == 0x000032, "Member 'FSSSupportingCharacterData::bIsSubCharacterFormChanage' has a wrong offset!");

// ScriptStruct SS.SSBattleLoadingObjectContainer
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FSSBattleLoadingObjectContainer final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleLoadingObjectContainer) == 0x000010, "Wrong alignment on FSSBattleLoadingObjectContainer");
static_assert(sizeof(FSSBattleLoadingObjectContainer) == 0x0000B0, "Wrong size on FSSBattleLoadingObjectContainer");

// ScriptStruct SS.SSDRMEditBlankTextBlank
// 0x0010 (0x0010 - 0x0000)
struct FSSDRMEditBlankTextBlank final
{
public:
	uint64                                        WordCategoryFlags;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditWordTextDataList          DefaultWord;                                       // 0x0008(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditBlankTextBlank) == 0x000008, "Wrong alignment on FSSDRMEditBlankTextBlank");
static_assert(sizeof(FSSDRMEditBlankTextBlank) == 0x000010, "Wrong size on FSSDRMEditBlankTextBlank");
static_assert(offsetof(FSSDRMEditBlankTextBlank, WordCategoryFlags) == 0x000000, "Member 'FSSDRMEditBlankTextBlank::WordCategoryFlags' has a wrong offset!");
static_assert(offsetof(FSSDRMEditBlankTextBlank, DefaultWord) == 0x000008, "Member 'FSSDRMEditBlankTextBlank::DefaultWord' has a wrong offset!");

// ScriptStruct SS.SSBlastDemoBranchSupportCharacter
// 0x0050 (0x0050 - 0x0000)
struct FSSBlastDemoBranchSupportCharacter final
{
public:
	ESSBlastDemoBranchType                        BranchType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplaceIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSSupportingCharacterData             CharacterData;                                     // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastDemoBranchSupportCharacter) == 0x000008, "Wrong alignment on FSSBlastDemoBranchSupportCharacter");
static_assert(sizeof(FSSBlastDemoBranchSupportCharacter) == 0x000050, "Wrong size on FSSBlastDemoBranchSupportCharacter");
static_assert(offsetof(FSSBlastDemoBranchSupportCharacter, BranchType) == 0x000000, "Member 'FSSBlastDemoBranchSupportCharacter::BranchType' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchSupportCharacter, ReplaceIndex) == 0x000004, "Member 'FSSBlastDemoBranchSupportCharacter::ReplaceIndex' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchSupportCharacter, CharacterData) == 0x000008, "Member 'FSSBlastDemoBranchSupportCharacter::CharacterData' has a wrong offset!");

// ScriptStruct SS.SSUnionSupportCharacter
// 0x0010 (0x0010 - 0x0000)
struct FSSUnionSupportCharacter final
{
public:
	struct FKoratCharacterDataList                SubCharacter;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemDataList            EquipItem;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSUnionSupportCharacter) == 0x000004, "Wrong alignment on FSSUnionSupportCharacter");
static_assert(sizeof(FSSUnionSupportCharacter) == 0x000010, "Wrong size on FSSUnionSupportCharacter");
static_assert(offsetof(FSSUnionSupportCharacter, SubCharacter) == 0x000000, "Member 'FSSUnionSupportCharacter::SubCharacter' has a wrong offset!");
static_assert(offsetof(FSSUnionSupportCharacter, EquipItem) == 0x000008, "Member 'FSSUnionSupportCharacter::EquipItem' has a wrong offset!");

// ScriptStruct SS.SSCharacterBattleSearchScaleParameter
// 0x0010 (0x0010 - 0x0000)
struct FSSCharacterBattleSearchScaleParameter final
{
public:
	float                                         AuraSearchScaleOwnInAction;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchScaleTargetInAction;                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchScaleInSparkingMode;                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EasyFindingScaleByTarget;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterBattleSearchScaleParameter) == 0x000004, "Wrong alignment on FSSCharacterBattleSearchScaleParameter");
static_assert(sizeof(FSSCharacterBattleSearchScaleParameter) == 0x000010, "Wrong size on FSSCharacterBattleSearchScaleParameter");
static_assert(offsetof(FSSCharacterBattleSearchScaleParameter, AuraSearchScaleOwnInAction) == 0x000000, "Member 'FSSCharacterBattleSearchScaleParameter::AuraSearchScaleOwnInAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleSearchScaleParameter, AuraSearchScaleTargetInAction) == 0x000004, "Member 'FSSCharacterBattleSearchScaleParameter::AuraSearchScaleTargetInAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleSearchScaleParameter, AuraSearchScaleInSparkingMode) == 0x000008, "Member 'FSSCharacterBattleSearchScaleParameter::AuraSearchScaleInSparkingMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleSearchScaleParameter, EasyFindingScaleByTarget) == 0x00000C, "Member 'FSSCharacterBattleSearchScaleParameter::EasyFindingScaleByTarget' has a wrong offset!");

// ScriptStruct SS.SSMissionIds
// 0x0010 (0x0010 - 0x0000)
struct FSSMissionIds final
{
public:
	TArray<struct FKoratMissionDataList>          MissionIds;                                        // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMissionIds) == 0x000008, "Wrong alignment on FSSMissionIds");
static_assert(sizeof(FSSMissionIds) == 0x000010, "Wrong size on FSSMissionIds");
static_assert(offsetof(FSSMissionIds, MissionIds) == 0x000000, "Member 'FSSMissionIds::MissionIds' has a wrong offset!");

// ScriptStruct SS.KoratVanishingMove
// 0x0030 (0x0030 - 0x0000)
struct FKoratVanishingMove final
{
public:
	EKoratTargetPositionType                      PositionType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratMoveDirectionType                       DirectionType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratAlignRotationType                       RotationType;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveVector;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotate;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrectionTowardCenter;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedLocationAfterSpecifiedTime;               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPossibleRushHighSpeedMoveRevenge;                 // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOpponentRadius;                                // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOneselfRadius;                                 // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontalWhenNearToGround;                       // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVanishingMove) == 0x000008, "Wrong alignment on FKoratVanishingMove");
static_assert(sizeof(FKoratVanishingMove) == 0x000030, "Wrong size on FKoratVanishingMove");
static_assert(offsetof(FKoratVanishingMove, PositionType) == 0x000000, "Member 'FKoratVanishingMove::PositionType' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, DirectionType) == 0x000001, "Member 'FKoratVanishingMove::DirectionType' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, RotationType) == 0x000002, "Member 'FKoratVanishingMove::RotationType' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, MoveVector) == 0x000008, "Member 'FKoratVanishingMove::MoveVector' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, Rotate) == 0x000020, "Member 'FKoratVanishingMove::Rotate' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, CorrectionTowardCenter) == 0x000024, "Member 'FKoratVanishingMove::CorrectionTowardCenter' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, EstimatedLocationAfterSpecifiedTime) == 0x000028, "Member 'FKoratVanishingMove::EstimatedLocationAfterSpecifiedTime' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, bPossibleRushHighSpeedMoveRevenge) == 0x00002C, "Member 'FKoratVanishingMove::bPossibleRushHighSpeedMoveRevenge' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, bUseOpponentRadius) == 0x00002D, "Member 'FKoratVanishingMove::bUseOpponentRadius' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, bUseOneselfRadius) == 0x00002E, "Member 'FKoratVanishingMove::bUseOneselfRadius' has a wrong offset!");
static_assert(offsetof(FKoratVanishingMove, bHorizontalWhenNearToGround) == 0x00002F, "Member 'FKoratVanishingMove::bHorizontalWhenNearToGround' has a wrong offset!");

// ScriptStruct SS.KoratTaketurnsDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratTaketurnsDataAssetRecord final
{
public:
	struct FKoratVanishingMove                    ChaseChangeEntranceParameter;                      // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AnimMontageOffset;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrawVanishingEffect;                            // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratTaketurnsDataAssetRecord) == 0x000008, "Wrong alignment on FKoratTaketurnsDataAssetRecord");
static_assert(sizeof(FKoratTaketurnsDataAssetRecord) == 0x000050, "Wrong size on FKoratTaketurnsDataAssetRecord");
static_assert(offsetof(FKoratTaketurnsDataAssetRecord, ChaseChangeEntranceParameter) == 0x000000, "Member 'FKoratTaketurnsDataAssetRecord::ChaseChangeEntranceParameter' has a wrong offset!");
static_assert(offsetof(FKoratTaketurnsDataAssetRecord, AnimMontageOffset) == 0x000030, "Member 'FKoratTaketurnsDataAssetRecord::AnimMontageOffset' has a wrong offset!");
static_assert(offsetof(FKoratTaketurnsDataAssetRecord, bIsDrawVanishingEffect) == 0x000048, "Member 'FKoratTaketurnsDataAssetRecord::bIsDrawVanishingEffect' has a wrong offset!");

// ScriptStruct SS.SSMissionUserDataTemp
// 0x0018 (0x0018 - 0x0000)
struct FSSMissionUserDataTemp final
{
public:
	struct FKoratMissionDataList                  MissionId;                                         // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSMissionDataRecord*                   MIssionData;                                       // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMissionUserDataTemp) == 0x000008, "Wrong alignment on FSSMissionUserDataTemp");
static_assert(sizeof(FSSMissionUserDataTemp) == 0x000018, "Wrong size on FSSMissionUserDataTemp");
static_assert(offsetof(FSSMissionUserDataTemp, MissionId) == 0x000000, "Member 'FSSMissionUserDataTemp::MissionId' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataTemp, MIssionData) == 0x000008, "Member 'FSSMissionUserDataTemp::MIssionData' has a wrong offset!");

// ScriptStruct SS.KoratEnergyBulletDirectionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEnergyBulletDirectionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEnergyBulletDirectionDataList) == 0x000004, "Wrong alignment on FKoratEnergyBulletDirectionDataList");
static_assert(sizeof(FKoratEnergyBulletDirectionDataList) == 0x000008, "Wrong size on FKoratEnergyBulletDirectionDataList");
static_assert(offsetof(FKoratEnergyBulletDirectionDataList, Key) == 0x000000, "Member 'FKoratEnergyBulletDirectionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBoneDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterBoneDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterBoneDataList) == 0x000004, "Wrong alignment on FKoratCharacterBoneDataList");
static_assert(sizeof(FKoratCharacterBoneDataList) == 0x000008, "Wrong size on FKoratCharacterBoneDataList");
static_assert(offsetof(FKoratCharacterBoneDataList, Key) == 0x000000, "Member 'FKoratCharacterBoneDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBulletMoveParam
// 0x0038 (0x0038 - 0x0000)
struct FSSBulletMoveParam final
{
public:
	class USSBulletCurveSpeed*                    SpeedCurve;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SpeedRandamScale;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletCurveHoming*                   HomingCurve;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         HomingRandamScale;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingEndTime;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHomingAvoidDisable;                               // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwichHomingAvoidDisableTime;                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USSBulletCurveGravity*                  GravityCurve;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletMoveParam) == 0x000008, "Wrong alignment on FSSBulletMoveParam");
static_assert(sizeof(FSSBulletMoveParam) == 0x000038, "Wrong size on FSSBulletMoveParam");
static_assert(offsetof(FSSBulletMoveParam, SpeedCurve) == 0x000000, "Member 'FSSBulletMoveParam::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, SpeedRandamScale) == 0x000008, "Member 'FSSBulletMoveParam::SpeedRandamScale' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, HomingCurve) == 0x000010, "Member 'FSSBulletMoveParam::HomingCurve' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, HomingRandamScale) == 0x000018, "Member 'FSSBulletMoveParam::HomingRandamScale' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, HomingEndTime) == 0x000020, "Member 'FSSBulletMoveParam::HomingEndTime' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, bHomingAvoidDisable) == 0x000024, "Member 'FSSBulletMoveParam::bHomingAvoidDisable' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, SwichHomingAvoidDisableTime) == 0x000028, "Member 'FSSBulletMoveParam::SwichHomingAvoidDisableTime' has a wrong offset!");
static_assert(offsetof(FSSBulletMoveParam, GravityCurve) == 0x000030, "Member 'FSSBulletMoveParam::GravityCurve' has a wrong offset!");

// ScriptStruct SS.KoratHitBackMovementDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratHitBackMovementDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitBackMovementDataList) == 0x000004, "Wrong alignment on FKoratHitBackMovementDataList");
static_assert(sizeof(FKoratHitBackMovementDataList) == 0x000008, "Wrong size on FKoratHitBackMovementDataList");
static_assert(offsetof(FKoratHitBackMovementDataList, Key) == 0x000000, "Member 'FKoratHitBackMovementDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratArmorBreakLevelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratArmorBreakLevelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratArmorBreakLevelDataList) == 0x000004, "Wrong alignment on FKoratArmorBreakLevelDataList");
static_assert(sizeof(FKoratArmorBreakLevelDataList) == 0x000008, "Wrong size on FKoratArmorBreakLevelDataList");
static_assert(offsetof(FKoratArmorBreakLevelDataList, Key) == 0x000000, "Member 'FKoratArmorBreakLevelDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterEnergyBulletParameter
// 0x02F8 (0x02F8 - 0x0000)
struct FKoratCharacterEnergyBulletParameter final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PowerDpMultiplier;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Shave;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeamPower;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeamShave;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendEnergy;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepelSkillGaugeGain;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoKnockDownAttack;                                // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoftAttack;                                       // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeSpan;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanLifeSpanEndInMultiHit;                         // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeSpanAfterPassedTarget;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireNum;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireLimit;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionAttackType                        AttackType;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnergyBullectCollisionPriority;                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USSBulletShapeBase>         CollisionShapeClass;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletCurveCollisionSize*            CollisionSizeCurve;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletCurveCollisionSize*            CollisionHeightOverriveCurve;                      // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideBeamCollisionSize;                        // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeamCollisionSize;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterCollisionSize;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeometryCollisionSize;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClashCollisionSize;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletCharacterFirstHitType                CharacterFirstHitType;                             // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterCollisionRevibeNum;                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterCollisionRevibeSpan;                      // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletCharacterLastHitType                 CharacterLastHitType;                              // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeSpanAfterCharacterLastHit;                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletGeometryFirstHitType                 GeometryFirstHitType;                              // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeometryCollisionRevibeNum;                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeometryCollisionRevibeSpan;                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletGeometryLastHitType                  GeometryLastHitType;                               // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletStatusAtStart                        StatusAtStart;                                     // 0x009D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletStartPosition                        StartPosition;                                     // 0x009E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F[0x1];                                       // 0x009F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEnergyBulletDirectionDataList    EnergyBulletDirection;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterBoneDataList            HomingTarget;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngleLimitAtStart;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAngleLimitAtStartYaw;                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletCurveDirection*                DirectionCurve;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotRange;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootFollowsStartPosition;                         // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootFollowsStartRotation;                         // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPointDiffusionRadius;                        // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEnergyBulletDirectionDataList    BulletDirectionAtReflect;                          // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterBoneDataList            TargetBoneAtReflect;                               // 0x00D4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleLimitAtReflect;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHomingAtReflect;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEnergyBulletDirectionDataList    AutoReflectDirectionType;                          // 0x00E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSBulletMoveParam                     MoveParam;                                         // 0x00F0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideMoveParamAtReflect;                       // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSBulletMoveParam                     MoveParamAtReflect;                                // 0x0130(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ESSBulletHitDirectionRule                     HitDirectionRule;                                  // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHitDirectionPitchLock;                      // 0x0169(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitDirectionPitch;                                 // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand1;                                      // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand2;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageDown1;                                       // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageDown2;                                       // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageBlownOff;                                    // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStandUp;                                     // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement1;                                   // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement2;                                   // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitStopDataList                  HitStop;                                           // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          GuardMovement1;                                    // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          GuardMovement2;                                    // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitStopDataList                  GuardStop;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand1_ForGiant;                             // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand2_ForGiant;                             // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageDown1_ForGiant;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageDown2_ForGiant;                              // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageBlownOff_ForGiant;                           // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStandUp_ForGiant;                            // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement1_ForGiant;                          // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement2_ForGiant;                          // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitStopDataList                  HitStop_ForGiant;                                  // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          GuardMovement1_ForGiant;                           // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          GuardMovement2_ForGiant;                           // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitStopDataList                  GuardStop_ForGiant;                                // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorBreakLevelDataList          ArmorBreakLevel;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuard;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleReflect;                                // 0x0239(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleAbsorption;                             // 0x023A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSuperZCounterType                       SuperZCounterType;                                 // 0x023B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleSuperZCounterAbsorption;                // 0x023C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptGuard;                                   // 0x023D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptReflect;                                 // 0x023E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishAtOwnerDamage;                              // 0x023F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnergyBullectCollisionSpecial;                    // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnergyBullectCollisionInvincible;                 // 0x0241(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpecialShield;                                  // 0x0242(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlastImpactBulletShift;                           // 0x0243(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastImpactBulletShiftRate;                        // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastImpactBulletScale;                            // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidHistep;                                      // 0x024C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuffAvoidable;                                    // 0x024D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreActionTarget;                               // 0x024E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReactiveGuardable;                              // 0x024F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeEnable;                              // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeLastHitOnly;                         // 0x0251(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeWreck;                               // 0x0252(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScratchCostumeEnable;                             // 0x0253(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSplitHit;                                   // 0x0254(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplitHeight;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomHitDirectionPitch;                           // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           BottomDamageStand1;                                // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           BottomDamageStand2;                                // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           BottomDamageStand1_ForGiant;                       // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           BottomDamageStand2_ForGiant;                       // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearch;                                    // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceAuraSearchDistance;                          // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceAutoSearchDistance;                          // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceZSearchEffectTime;                           // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfishnessAvoidable;                             // 0x0290(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDestructionAttackParameter       DestructionAttackParameter;                        // 0x0298(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDestruction;                                // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveSelfDamage;                                // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfDamagePower;                                   // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SelfDamagePowerDpMultiplier;                       // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BuffIndex;                                         // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraZoomType                               ExplosionHitLevel;                                 // 0x02F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterEnergyBulletParameter) == 0x000008, "Wrong alignment on FKoratCharacterEnergyBulletParameter");
static_assert(sizeof(FKoratCharacterEnergyBulletParameter) == 0x0002F8, "Wrong size on FKoratCharacterEnergyBulletParameter");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, Power) == 0x000000, "Member 'FKoratCharacterEnergyBulletParameter::Power' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, PowerDpMultiplier) == 0x000008, "Member 'FKoratCharacterEnergyBulletParameter::PowerDpMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, Shave) == 0x000018, "Member 'FKoratCharacterEnergyBulletParameter::Shave' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BeamPower) == 0x00001C, "Member 'FKoratCharacterEnergyBulletParameter::BeamPower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BeamShave) == 0x000020, "Member 'FKoratCharacterEnergyBulletParameter::BeamShave' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ExpendEnergy) == 0x000024, "Member 'FKoratCharacterEnergyBulletParameter::ExpendEnergy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, RepelSkillGaugeGain) == 0x000028, "Member 'FKoratCharacterEnergyBulletParameter::RepelSkillGaugeGain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bNoKnockDownAttack) == 0x00002C, "Member 'FKoratCharacterEnergyBulletParameter::bNoKnockDownAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bSoftAttack) == 0x00002D, "Member 'FKoratCharacterEnergyBulletParameter::bSoftAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, LifeSpan) == 0x000030, "Member 'FKoratCharacterEnergyBulletParameter::LifeSpan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bCanLifeSpanEndInMultiHit) == 0x000034, "Member 'FKoratCharacterEnergyBulletParameter::bCanLifeSpanEndInMultiHit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, LifeSpanAfterPassedTarget) == 0x000038, "Member 'FKoratCharacterEnergyBulletParameter::LifeSpanAfterPassedTarget' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, FireNum) == 0x00003C, "Member 'FKoratCharacterEnergyBulletParameter::FireNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, FireLimit) == 0x000040, "Member 'FKoratCharacterEnergyBulletParameter::FireLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, AttackType) == 0x000044, "Member 'FKoratCharacterEnergyBulletParameter::AttackType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, EnergyBullectCollisionPriority) == 0x000048, "Member 'FKoratCharacterEnergyBulletParameter::EnergyBullectCollisionPriority' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CollisionShapeClass) == 0x000050, "Member 'FKoratCharacterEnergyBulletParameter::CollisionShapeClass' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CollisionSizeCurve) == 0x000058, "Member 'FKoratCharacterEnergyBulletParameter::CollisionSizeCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CollisionHeightOverriveCurve) == 0x000060, "Member 'FKoratCharacterEnergyBulletParameter::CollisionHeightOverriveCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bOverrideBeamCollisionSize) == 0x000068, "Member 'FKoratCharacterEnergyBulletParameter::bOverrideBeamCollisionSize' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BeamCollisionSize) == 0x00006C, "Member 'FKoratCharacterEnergyBulletParameter::BeamCollisionSize' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CharacterCollisionSize) == 0x000070, "Member 'FKoratCharacterEnergyBulletParameter::CharacterCollisionSize' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GeometryCollisionSize) == 0x000074, "Member 'FKoratCharacterEnergyBulletParameter::GeometryCollisionSize' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ClashCollisionSize) == 0x000078, "Member 'FKoratCharacterEnergyBulletParameter::ClashCollisionSize' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CharacterFirstHitType) == 0x00007C, "Member 'FKoratCharacterEnergyBulletParameter::CharacterFirstHitType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CharacterCollisionRevibeNum) == 0x000080, "Member 'FKoratCharacterEnergyBulletParameter::CharacterCollisionRevibeNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CharacterCollisionRevibeSpan) == 0x000084, "Member 'FKoratCharacterEnergyBulletParameter::CharacterCollisionRevibeSpan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, CharacterLastHitType) == 0x000088, "Member 'FKoratCharacterEnergyBulletParameter::CharacterLastHitType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, LifeSpanAfterCharacterLastHit) == 0x00008C, "Member 'FKoratCharacterEnergyBulletParameter::LifeSpanAfterCharacterLastHit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GeometryFirstHitType) == 0x000090, "Member 'FKoratCharacterEnergyBulletParameter::GeometryFirstHitType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GeometryCollisionRevibeNum) == 0x000094, "Member 'FKoratCharacterEnergyBulletParameter::GeometryCollisionRevibeNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GeometryCollisionRevibeSpan) == 0x000098, "Member 'FKoratCharacterEnergyBulletParameter::GeometryCollisionRevibeSpan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GeometryLastHitType) == 0x00009C, "Member 'FKoratCharacterEnergyBulletParameter::GeometryLastHitType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, StatusAtStart) == 0x00009D, "Member 'FKoratCharacterEnergyBulletParameter::StatusAtStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, StartPosition) == 0x00009E, "Member 'FKoratCharacterEnergyBulletParameter::StartPosition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, EnergyBulletDirection) == 0x0000A0, "Member 'FKoratCharacterEnergyBulletParameter::EnergyBulletDirection' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HomingTarget) == 0x0000A8, "Member 'FKoratCharacterEnergyBulletParameter::HomingTarget' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HomingAngleLimitAtStart) == 0x0000B0, "Member 'FKoratCharacterEnergyBulletParameter::HomingAngleLimitAtStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HomingAngleLimitAtStartYaw) == 0x0000B4, "Member 'FKoratCharacterEnergyBulletParameter::HomingAngleLimitAtStartYaw' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DirectionCurve) == 0x0000B8, "Member 'FKoratCharacterEnergyBulletParameter::DirectionCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ShotRange) == 0x0000C0, "Member 'FKoratCharacterEnergyBulletParameter::ShotRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bRootFollowsStartPosition) == 0x0000C4, "Member 'FKoratCharacterEnergyBulletParameter::bRootFollowsStartPosition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bRootFollowsStartRotation) == 0x0000C5, "Member 'FKoratCharacterEnergyBulletParameter::bRootFollowsStartRotation' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, TargetPointDiffusionRadius) == 0x0000C8, "Member 'FKoratCharacterEnergyBulletParameter::TargetPointDiffusionRadius' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BulletDirectionAtReflect) == 0x0000CC, "Member 'FKoratCharacterEnergyBulletParameter::BulletDirectionAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, TargetBoneAtReflect) == 0x0000D4, "Member 'FKoratCharacterEnergyBulletParameter::TargetBoneAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, AngleLimitAtReflect) == 0x0000DC, "Member 'FKoratCharacterEnergyBulletParameter::AngleLimitAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bHomingAtReflect) == 0x0000E0, "Member 'FKoratCharacterEnergyBulletParameter::bHomingAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, AutoReflectDirectionType) == 0x0000E4, "Member 'FKoratCharacterEnergyBulletParameter::AutoReflectDirectionType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, MoveParam) == 0x0000F0, "Member 'FKoratCharacterEnergyBulletParameter::MoveParam' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bOverrideMoveParamAtReflect) == 0x000128, "Member 'FKoratCharacterEnergyBulletParameter::bOverrideMoveParamAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, MoveParamAtReflect) == 0x000130, "Member 'FKoratCharacterEnergyBulletParameter::MoveParamAtReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HitDirectionRule) == 0x000168, "Member 'FKoratCharacterEnergyBulletParameter::HitDirectionRule' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bEnableHitDirectionPitchLock) == 0x000169, "Member 'FKoratCharacterEnergyBulletParameter::bEnableHitDirectionPitchLock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HitDirectionPitch) == 0x00016C, "Member 'FKoratCharacterEnergyBulletParameter::HitDirectionPitch' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStand1) == 0x000170, "Member 'FKoratCharacterEnergyBulletParameter::DamageStand1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStand2) == 0x000178, "Member 'FKoratCharacterEnergyBulletParameter::DamageStand2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageDown1) == 0x000180, "Member 'FKoratCharacterEnergyBulletParameter::DamageDown1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageDown2) == 0x000188, "Member 'FKoratCharacterEnergyBulletParameter::DamageDown2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageBlownOff) == 0x000190, "Member 'FKoratCharacterEnergyBulletParameter::DamageBlownOff' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStandUp) == 0x000198, "Member 'FKoratCharacterEnergyBulletParameter::DamageStandUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageMovement1) == 0x0001A0, "Member 'FKoratCharacterEnergyBulletParameter::DamageMovement1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageMovement2) == 0x0001A8, "Member 'FKoratCharacterEnergyBulletParameter::DamageMovement2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HitStop) == 0x0001B0, "Member 'FKoratCharacterEnergyBulletParameter::HitStop' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardMovement1) == 0x0001B8, "Member 'FKoratCharacterEnergyBulletParameter::GuardMovement1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardMovement2) == 0x0001C0, "Member 'FKoratCharacterEnergyBulletParameter::GuardMovement2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardStop) == 0x0001C8, "Member 'FKoratCharacterEnergyBulletParameter::GuardStop' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStand1_ForGiant) == 0x0001D0, "Member 'FKoratCharacterEnergyBulletParameter::DamageStand1_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStand2_ForGiant) == 0x0001D8, "Member 'FKoratCharacterEnergyBulletParameter::DamageStand2_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageDown1_ForGiant) == 0x0001E0, "Member 'FKoratCharacterEnergyBulletParameter::DamageDown1_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageDown2_ForGiant) == 0x0001E8, "Member 'FKoratCharacterEnergyBulletParameter::DamageDown2_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageBlownOff_ForGiant) == 0x0001F0, "Member 'FKoratCharacterEnergyBulletParameter::DamageBlownOff_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageStandUp_ForGiant) == 0x0001F8, "Member 'FKoratCharacterEnergyBulletParameter::DamageStandUp_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageMovement1_ForGiant) == 0x000200, "Member 'FKoratCharacterEnergyBulletParameter::DamageMovement1_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DamageMovement2_ForGiant) == 0x000208, "Member 'FKoratCharacterEnergyBulletParameter::DamageMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, HitStop_ForGiant) == 0x000210, "Member 'FKoratCharacterEnergyBulletParameter::HitStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardMovement1_ForGiant) == 0x000218, "Member 'FKoratCharacterEnergyBulletParameter::GuardMovement1_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardMovement2_ForGiant) == 0x000220, "Member 'FKoratCharacterEnergyBulletParameter::GuardMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, GuardStop_ForGiant) == 0x000228, "Member 'FKoratCharacterEnergyBulletParameter::GuardStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ArmorBreakLevel) == 0x000230, "Member 'FKoratCharacterEnergyBulletParameter::ArmorBreakLevel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bImpossibleGuard) == 0x000238, "Member 'FKoratCharacterEnergyBulletParameter::bImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bImpossibleReflect) == 0x000239, "Member 'FKoratCharacterEnergyBulletParameter::bImpossibleReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bImpossibleAbsorption) == 0x00023A, "Member 'FKoratCharacterEnergyBulletParameter::bImpossibleAbsorption' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, SuperZCounterType) == 0x00023B, "Member 'FKoratCharacterEnergyBulletParameter::SuperZCounterType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bImpossibleSuperZCounterAbsorption) == 0x00023C, "Member 'FKoratCharacterEnergyBulletParameter::bImpossibleSuperZCounterAbsorption' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bInterruptGuard) == 0x00023D, "Member 'FKoratCharacterEnergyBulletParameter::bInterruptGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bInterruptReflect) == 0x00023E, "Member 'FKoratCharacterEnergyBulletParameter::bInterruptReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bFinishAtOwnerDamage) == 0x00023F, "Member 'FKoratCharacterEnergyBulletParameter::bFinishAtOwnerDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bEnergyBullectCollisionSpecial) == 0x000240, "Member 'FKoratCharacterEnergyBulletParameter::bEnergyBullectCollisionSpecial' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bEnergyBullectCollisionInvincible) == 0x000241, "Member 'FKoratCharacterEnergyBulletParameter::bEnergyBullectCollisionInvincible' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bIsSpecialShield) == 0x000242, "Member 'FKoratCharacterEnergyBulletParameter::bIsSpecialShield' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bBlastImpactBulletShift) == 0x000243, "Member 'FKoratCharacterEnergyBulletParameter::bBlastImpactBulletShift' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BlastImpactBulletShiftRate) == 0x000244, "Member 'FKoratCharacterEnergyBulletParameter::BlastImpactBulletShiftRate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BlastImpactBulletScale) == 0x000248, "Member 'FKoratCharacterEnergyBulletParameter::BlastImpactBulletScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bAvoidHistep) == 0x00024C, "Member 'FKoratCharacterEnergyBulletParameter::bAvoidHistep' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bBuffAvoidable) == 0x00024D, "Member 'FKoratCharacterEnergyBulletParameter::bBuffAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bIgnoreActionTarget) == 0x00024E, "Member 'FKoratCharacterEnergyBulletParameter::bIgnoreActionTarget' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bIsReactiveGuardable) == 0x00024F, "Member 'FKoratCharacterEnergyBulletParameter::bIsReactiveGuardable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bDamageCostumeEnable) == 0x000250, "Member 'FKoratCharacterEnergyBulletParameter::bDamageCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bDamageCostumeLastHitOnly) == 0x000251, "Member 'FKoratCharacterEnergyBulletParameter::bDamageCostumeLastHitOnly' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bDamageCostumeWreck) == 0x000252, "Member 'FKoratCharacterEnergyBulletParameter::bDamageCostumeWreck' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bScratchCostumeEnable) == 0x000253, "Member 'FKoratCharacterEnergyBulletParameter::bScratchCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bEnableSplitHit) == 0x000254, "Member 'FKoratCharacterEnergyBulletParameter::bEnableSplitHit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, SplitHeight) == 0x000258, "Member 'FKoratCharacterEnergyBulletParameter::SplitHeight' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BottomHitDirectionPitch) == 0x00025C, "Member 'FKoratCharacterEnergyBulletParameter::BottomHitDirectionPitch' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BottomDamageStand1) == 0x000260, "Member 'FKoratCharacterEnergyBulletParameter::BottomDamageStand1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BottomDamageStand2) == 0x000268, "Member 'FKoratCharacterEnergyBulletParameter::BottomDamageStand2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BottomDamageStand1_ForGiant) == 0x000270, "Member 'FKoratCharacterEnergyBulletParameter::BottomDamageStand1_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BottomDamageStand2_ForGiant) == 0x000278, "Member 'FKoratCharacterEnergyBulletParameter::BottomDamageStand2_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bReduceZSearch) == 0x000280, "Member 'FKoratCharacterEnergyBulletParameter::bReduceZSearch' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ReduceAuraSearchDistance) == 0x000284, "Member 'FKoratCharacterEnergyBulletParameter::ReduceAuraSearchDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ReduceAutoSearchDistance) == 0x000288, "Member 'FKoratCharacterEnergyBulletParameter::ReduceAutoSearchDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ReduceZSearchEffectTime) == 0x00028C, "Member 'FKoratCharacterEnergyBulletParameter::ReduceZSearchEffectTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bSelfishnessAvoidable) == 0x000290, "Member 'FKoratCharacterEnergyBulletParameter::bSelfishnessAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, DestructionAttackParameter) == 0x000298, "Member 'FKoratCharacterEnergyBulletParameter::DestructionAttackParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bEnableDestruction) == 0x0002D8, "Member 'FKoratCharacterEnergyBulletParameter::bEnableDestruction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, bReceiveSelfDamage) == 0x0002D9, "Member 'FKoratCharacterEnergyBulletParameter::bReceiveSelfDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, SelfDamagePower) == 0x0002DC, "Member 'FKoratCharacterEnergyBulletParameter::SelfDamagePower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, SelfDamagePowerDpMultiplier) == 0x0002E0, "Member 'FKoratCharacterEnergyBulletParameter::SelfDamagePowerDpMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, BuffIndex) == 0x0002F0, "Member 'FKoratCharacterEnergyBulletParameter::BuffIndex' has a wrong offset!");
static_assert(offsetof(FKoratCharacterEnergyBulletParameter, ExplosionHitLevel) == 0x0002F4, "Member 'FKoratCharacterEnergyBulletParameter::ExplosionHitLevel' has a wrong offset!");

// ScriptStruct SS.SSStampData
// 0x0018 (0x0018 - 0x0000)
struct FSSStampData final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         boxNo;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StampId;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSStampData) == 0x000008, "Wrong alignment on FSSStampData");
static_assert(sizeof(FSSStampData) == 0x000018, "Wrong size on FSSStampData");
static_assert(offsetof(FSSStampData, Frame) == 0x000000, "Member 'FSSStampData::Frame' has a wrong offset!");
static_assert(offsetof(FSSStampData, boxNo) == 0x000004, "Member 'FSSStampData::boxNo' has a wrong offset!");
static_assert(offsetof(FSSStampData, StampId) == 0x000008, "Member 'FSSStampData::StampId' has a wrong offset!");

// ScriptStruct SS.KoratBlastActionCategoryDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastActionCategoryDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastActionCategoryDataList) == 0x000004, "Wrong alignment on FKoratBlastActionCategoryDataList");
static_assert(sizeof(FKoratBlastActionCategoryDataList) == 0x000008, "Wrong size on FKoratBlastActionCategoryDataList");
static_assert(offsetof(FKoratBlastActionCategoryDataList, Key) == 0x000000, "Member 'FKoratBlastActionCategoryDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBlastActionDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratBlastActionDataAssetRecord final
{
public:
	TMap<struct FKoratBlastActionCategoryDataList, struct FKoratActionDataList> Actions;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastActionDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBlastActionDataAssetRecord");
static_assert(sizeof(FKoratBlastActionDataAssetRecord) == 0x000050, "Wrong size on FKoratBlastActionDataAssetRecord");
static_assert(offsetof(FKoratBlastActionDataAssetRecord, Actions) == 0x000000, "Member 'FKoratBlastActionDataAssetRecord::Actions' has a wrong offset!");

// ScriptStruct SS.SSOutlinePrameter
// 0x0078 (0x0078 - 0x0000)
struct FSSOutlinePrameter final
{
public:
	float                                         FillRate;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillRateEnable;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUse;                                              // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnable;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionalVisibility;                               // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionalVisibilityEnable;                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendAmount;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendAmountEnable;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrightnessEnable;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bColorEnable;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThicknessEnable;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                ColorMap;                                          // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bColorMapEnable;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseContrast;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoiseContrastEnable;                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSOutlinePrameter) == 0x000008, "Wrong alignment on FSSOutlinePrameter");
static_assert(sizeof(FSSOutlinePrameter) == 0x000078, "Wrong size on FSSOutlinePrameter");
static_assert(offsetof(FSSOutlinePrameter, FillRate) == 0x000000, "Member 'FSSOutlinePrameter::FillRate' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bFillRateEnable) == 0x000004, "Member 'FSSOutlinePrameter::bFillRateEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bUse) == 0x000005, "Member 'FSSOutlinePrameter::bUse' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bUseEnable) == 0x000006, "Member 'FSSOutlinePrameter::bUseEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bOptionalVisibility) == 0x000007, "Member 'FSSOutlinePrameter::bOptionalVisibility' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bOptionalVisibilityEnable) == 0x000008, "Member 'FSSOutlinePrameter::bOptionalVisibilityEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, BlendAmount) == 0x00000C, "Member 'FSSOutlinePrameter::BlendAmount' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bBlendAmountEnable) == 0x000010, "Member 'FSSOutlinePrameter::bBlendAmountEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, Brightness) == 0x000014, "Member 'FSSOutlinePrameter::Brightness' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bBrightnessEnable) == 0x000018, "Member 'FSSOutlinePrameter::bBrightnessEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, Color) == 0x00001C, "Member 'FSSOutlinePrameter::Color' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bColorEnable) == 0x00002C, "Member 'FSSOutlinePrameter::bColorEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, Thickness) == 0x000030, "Member 'FSSOutlinePrameter::Thickness' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bThicknessEnable) == 0x000034, "Member 'FSSOutlinePrameter::bThicknessEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, ColorMap) == 0x000038, "Member 'FSSOutlinePrameter::ColorMap' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bColorMapEnable) == 0x000068, "Member 'FSSOutlinePrameter::bColorMapEnable' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, NoiseContrast) == 0x00006C, "Member 'FSSOutlinePrameter::NoiseContrast' has a wrong offset!");
static_assert(offsetof(FSSOutlinePrameter, bNoiseContrastEnable) == 0x000070, "Member 'FSSOutlinePrameter::bNoiseContrastEnable' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupTransitionDataRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleSetupTransitionDataRecord final
{
public:
	class ULevelSequence*                         Sequencer;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupTransitionDataRecord) == 0x000008, "Wrong alignment on FKoratBattleSetupTransitionDataRecord");
static_assert(sizeof(FKoratBattleSetupTransitionDataRecord) == 0x000008, "Wrong size on FKoratBattleSetupTransitionDataRecord");
static_assert(offsetof(FKoratBattleSetupTransitionDataRecord, Sequencer) == 0x000000, "Member 'FKoratBattleSetupTransitionDataRecord::Sequencer' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupMenuTransitionData
// 0x0050 (0x0050 - 0x0000)
struct FKoratBattleSetupMenuTransitionData final
{
public:
	TMap<EKoratBattleSetupTransition, struct FKoratBattleSetupTransitionDataRecord> TransitionData;                                    // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupMenuTransitionData) == 0x000008, "Wrong alignment on FKoratBattleSetupMenuTransitionData");
static_assert(sizeof(FKoratBattleSetupMenuTransitionData) == 0x000050, "Wrong size on FKoratBattleSetupMenuTransitionData");
static_assert(offsetof(FKoratBattleSetupMenuTransitionData, TransitionData) == 0x000000, "Member 'FKoratBattleSetupMenuTransitionData::TransitionData' has a wrong offset!");

// ScriptStruct SS.KoratMode02MissionBeforAfterData
// 0x0038 (0x0038 - 0x0000)
struct FKoratMode02MissionBeforAfterData final
{
public:
	struct FKoratMissionDataList                  Mode02MissionBefor;                                // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMissionDataList                  Mode02MissionAfter;                                // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMissionUserDataSaveData             BeforeMissionUserData;                             // 0x0010(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMode02MissionBeforAfterData) == 0x000008, "Wrong alignment on FKoratMode02MissionBeforAfterData");
static_assert(sizeof(FKoratMode02MissionBeforAfterData) == 0x000038, "Wrong size on FKoratMode02MissionBeforAfterData");
static_assert(offsetof(FKoratMode02MissionBeforAfterData, Mode02MissionBefor) == 0x000000, "Member 'FKoratMode02MissionBeforAfterData::Mode02MissionBefor' has a wrong offset!");
static_assert(offsetof(FKoratMode02MissionBeforAfterData, Mode02MissionAfter) == 0x000008, "Member 'FKoratMode02MissionBeforAfterData::Mode02MissionAfter' has a wrong offset!");
static_assert(offsetof(FKoratMode02MissionBeforAfterData, BeforeMissionUserData) == 0x000010, "Member 'FKoratMode02MissionBeforAfterData::BeforeMissionUserData' has a wrong offset!");

// ScriptStruct SS.KoratGuardReactionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratGuardReactionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratGuardReactionDataList) == 0x000004, "Wrong alignment on FKoratGuardReactionDataList");
static_assert(sizeof(FKoratGuardReactionDataList) == 0x000008, "Wrong size on FKoratGuardReactionDataList");
static_assert(offsetof(FKoratGuardReactionDataList, Key) == 0x000000, "Member 'FKoratGuardReactionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCombativesParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FKoratCharacterCombativesParameter final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PowerDpMultiplier;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Shave;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyDamage;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyGain;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoKnockDownAttack;                                // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDamageReactionDataList           DamageStand;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand_ForGiant;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               HitActionCameraData;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               GuardActionCameraData;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               RushOffsetActionCameraData;                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               CollisionOffsetActionCameraData;                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               ExImpactActionCameraData;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratGuardReactionDataList            GuardUp;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratGuardReactionDataList            GuardDown;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratGuardReactionDataList            GuardFront;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratGuardReactionDataList            GuardFront_ForGiant;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDirection                               AttackDiretion;                                    // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCharacterMovementTransition             MovementTransition;                                // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSuperZCounterTakeType                   SuperZCounterTakeType;                             // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratArmorBreakLevelDataList          ArmorBreakLevel;                                   // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZCounterAvoidable;                                // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuperCounterAvoidable;                            // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuperCounterAvoidableRevengeCounterShort;         // 0x008E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuperSelfishness;                                 // 0x008F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuffAvoidable;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidHistep;                                      // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPossibleAscertain;                                // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptGuard;                                   // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   ActionSameRushDerived;                             // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearchAfterHit;                            // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceAuraSearchDistance;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceAutoSearchDistance;                          // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceZSearchEffectTime;                           // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDownTargetAttackableCombatives;                 // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeEnable;                              // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeLastHitOnly;                         // 0x00AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageCostumeWreck;                               // 0x00AF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScratchCostumeEnable;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoMovementEnduringArmor;                          // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoStopEnduringArmor;                              // 0x00B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveSelfDamage;                                // 0x00B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfDamagePower;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SelfDamagePowerDpMultiplier;                       // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnergyBullectCollision;                           // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnergyBullectCollisionPriority;                    // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnergyBullectCollisionSpecial;                    // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDestroyBullet;                               // 0x00D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetPitch;                                       // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetYaw;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBulletHitDirectionRule                     HitDirectionRule;                                  // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterCombativesParameter) == 0x000008, "Wrong alignment on FKoratCharacterCombativesParameter");
static_assert(sizeof(FKoratCharacterCombativesParameter) == 0x0000E0, "Wrong size on FKoratCharacterCombativesParameter");
static_assert(offsetof(FKoratCharacterCombativesParameter, Power) == 0x000000, "Member 'FKoratCharacterCombativesParameter::Power' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, PowerDpMultiplier) == 0x000008, "Member 'FKoratCharacterCombativesParameter::PowerDpMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, Shave) == 0x000018, "Member 'FKoratCharacterCombativesParameter::Shave' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, EnergyDamage) == 0x00001C, "Member 'FKoratCharacterCombativesParameter::EnergyDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, EnergyGain) == 0x000020, "Member 'FKoratCharacterCombativesParameter::EnergyGain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bNoKnockDownAttack) == 0x000024, "Member 'FKoratCharacterCombativesParameter::bNoKnockDownAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, DamageStand) == 0x000028, "Member 'FKoratCharacterCombativesParameter::DamageStand' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, DamageStand_ForGiant) == 0x000030, "Member 'FKoratCharacterCombativesParameter::DamageStand_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, HitActionCameraData) == 0x000038, "Member 'FKoratCharacterCombativesParameter::HitActionCameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, GuardActionCameraData) == 0x000040, "Member 'FKoratCharacterCombativesParameter::GuardActionCameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, RushOffsetActionCameraData) == 0x000048, "Member 'FKoratCharacterCombativesParameter::RushOffsetActionCameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, CollisionOffsetActionCameraData) == 0x000050, "Member 'FKoratCharacterCombativesParameter::CollisionOffsetActionCameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ExImpactActionCameraData) == 0x000058, "Member 'FKoratCharacterCombativesParameter::ExImpactActionCameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, GuardUp) == 0x000060, "Member 'FKoratCharacterCombativesParameter::GuardUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, GuardDown) == 0x000068, "Member 'FKoratCharacterCombativesParameter::GuardDown' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, GuardFront) == 0x000070, "Member 'FKoratCharacterCombativesParameter::GuardFront' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, GuardFront_ForGiant) == 0x000078, "Member 'FKoratCharacterCombativesParameter::GuardFront_ForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, AttackDiretion) == 0x000080, "Member 'FKoratCharacterCombativesParameter::AttackDiretion' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, MovementTransition) == 0x000081, "Member 'FKoratCharacterCombativesParameter::MovementTransition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, SuperZCounterTakeType) == 0x000082, "Member 'FKoratCharacterCombativesParameter::SuperZCounterTakeType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ArmorBreakLevel) == 0x000084, "Member 'FKoratCharacterCombativesParameter::ArmorBreakLevel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bZCounterAvoidable) == 0x00008C, "Member 'FKoratCharacterCombativesParameter::bZCounterAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bSuperCounterAvoidable) == 0x00008D, "Member 'FKoratCharacterCombativesParameter::bSuperCounterAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bSuperCounterAvoidableRevengeCounterShort) == 0x00008E, "Member 'FKoratCharacterCombativesParameter::bSuperCounterAvoidableRevengeCounterShort' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bSuperSelfishness) == 0x00008F, "Member 'FKoratCharacterCombativesParameter::bSuperSelfishness' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bBuffAvoidable) == 0x000090, "Member 'FKoratCharacterCombativesParameter::bBuffAvoidable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bAvoidHistep) == 0x000091, "Member 'FKoratCharacterCombativesParameter::bAvoidHistep' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bPossibleAscertain) == 0x000092, "Member 'FKoratCharacterCombativesParameter::bPossibleAscertain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bInterruptGuard) == 0x000093, "Member 'FKoratCharacterCombativesParameter::bInterruptGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ActionSameRushDerived) == 0x000094, "Member 'FKoratCharacterCombativesParameter::ActionSameRushDerived' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bReduceZSearchAfterHit) == 0x00009C, "Member 'FKoratCharacterCombativesParameter::bReduceZSearchAfterHit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ReduceAuraSearchDistance) == 0x0000A0, "Member 'FKoratCharacterCombativesParameter::ReduceAuraSearchDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ReduceAutoSearchDistance) == 0x0000A4, "Member 'FKoratCharacterCombativesParameter::ReduceAutoSearchDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, ReduceZSearchEffectTime) == 0x0000A8, "Member 'FKoratCharacterCombativesParameter::ReduceZSearchEffectTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bIsDownTargetAttackableCombatives) == 0x0000AC, "Member 'FKoratCharacterCombativesParameter::bIsDownTargetAttackableCombatives' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bDamageCostumeEnable) == 0x0000AD, "Member 'FKoratCharacterCombativesParameter::bDamageCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bDamageCostumeLastHitOnly) == 0x0000AE, "Member 'FKoratCharacterCombativesParameter::bDamageCostumeLastHitOnly' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bDamageCostumeWreck) == 0x0000AF, "Member 'FKoratCharacterCombativesParameter::bDamageCostumeWreck' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bScratchCostumeEnable) == 0x0000B0, "Member 'FKoratCharacterCombativesParameter::bScratchCostumeEnable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bNoMovementEnduringArmor) == 0x0000B1, "Member 'FKoratCharacterCombativesParameter::bNoMovementEnduringArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bNoStopEnduringArmor) == 0x0000B2, "Member 'FKoratCharacterCombativesParameter::bNoStopEnduringArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bReceiveSelfDamage) == 0x0000B3, "Member 'FKoratCharacterCombativesParameter::bReceiveSelfDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, SelfDamagePower) == 0x0000B4, "Member 'FKoratCharacterCombativesParameter::SelfDamagePower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, SelfDamagePowerDpMultiplier) == 0x0000B8, "Member 'FKoratCharacterCombativesParameter::SelfDamagePowerDpMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bEnergyBullectCollision) == 0x0000C8, "Member 'FKoratCharacterCombativesParameter::bEnergyBullectCollision' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, EnergyBullectCollisionPriority) == 0x0000CC, "Member 'FKoratCharacterCombativesParameter::EnergyBullectCollisionPriority' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bEnergyBullectCollisionSpecial) == 0x0000D0, "Member 'FKoratCharacterCombativesParameter::bEnergyBullectCollisionSpecial' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, bForceDestroyBullet) == 0x0000D1, "Member 'FKoratCharacterCombativesParameter::bForceDestroyBullet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, OffsetPitch) == 0x0000D4, "Member 'FKoratCharacterCombativesParameter::OffsetPitch' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, OffsetYaw) == 0x0000D8, "Member 'FKoratCharacterCombativesParameter::OffsetYaw' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombativesParameter, HitDirectionRule) == 0x0000DC, "Member 'FKoratCharacterCombativesParameter::HitDirectionRule' has a wrong offset!");

// ScriptStruct SS.SSAiHpEmotionParam
// 0x0008 (0x0018 - 0x0010)
struct FSSAiHpEmotionParam final : public FSSAiCommonEmotionParam
{
public:
	int32                                         Hp;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiEmotionSignType                          SignType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiHpEmotionParam) == 0x000004, "Wrong alignment on FSSAiHpEmotionParam");
static_assert(sizeof(FSSAiHpEmotionParam) == 0x000018, "Wrong size on FSSAiHpEmotionParam");
static_assert(offsetof(FSSAiHpEmotionParam, Hp) == 0x000010, "Member 'FSSAiHpEmotionParam::Hp' has a wrong offset!");
static_assert(offsetof(FSSAiHpEmotionParam, SignType) == 0x000014, "Member 'FSSAiHpEmotionParam::SignType' has a wrong offset!");

// ScriptStruct SS.KoratBlastGroupDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratBlastGroupDataAssetRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastGroupDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBlastGroupDataAssetRecord");
static_assert(sizeof(FKoratBlastGroupDataAssetRecord) == 0x000018, "Wrong size on FKoratBlastGroupDataAssetRecord");
static_assert(offsetof(FKoratBlastGroupDataAssetRecord, Text) == 0x000000, "Member 'FKoratBlastGroupDataAssetRecord::Text' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSceneTransitionSequence
// 0x0068 (0x0068 - 0x0000)
struct FSSMainMenuSceneTransitionSequence final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelSequence>>  SubSequence;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   PlaySection;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTransformTrack;                              // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratPlayerStartDataList>      RelationCharacters;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRebindLocator;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuSceneTransitionSequence) == 0x000008, "Wrong alignment on FSSMainMenuSceneTransitionSequence");
static_assert(sizeof(FSSMainMenuSceneTransitionSequence) == 0x000068, "Wrong size on FSSMainMenuSceneTransitionSequence");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, Sequence) == 0x000000, "Member 'FSSMainMenuSceneTransitionSequence::Sequence' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, SubSequence) == 0x000030, "Member 'FSSMainMenuSceneTransitionSequence::SubSequence' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, PlaySection) == 0x000040, "Member 'FSSMainMenuSceneTransitionSequence::PlaySection' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, bAllowTransformTrack) == 0x000048, "Member 'FSSMainMenuSceneTransitionSequence::bAllowTransformTrack' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, RelationCharacters) == 0x000050, "Member 'FSSMainMenuSceneTransitionSequence::RelationCharacters' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionSequence, bRebindLocator) == 0x000060, "Member 'FSSMainMenuSceneTransitionSequence::bRebindLocator' has a wrong offset!");

// ScriptStruct SS.KoratBlastReactionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastReactionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastReactionDataList) == 0x000004, "Wrong alignment on FKoratBlastReactionDataList");
static_assert(sizeof(FKoratBlastReactionDataList) == 0x000008, "Wrong size on FKoratBlastReactionDataList");
static_assert(offsetof(FKoratBlastReactionDataList, Key) == 0x000000, "Member 'FKoratBlastReactionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBlastForteTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastForteTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastForteTypeDataList) == 0x000004, "Wrong alignment on FKoratBlastForteTypeDataList");
static_assert(sizeof(FKoratBlastForteTypeDataList) == 0x000008, "Wrong size on FKoratBlastForteTypeDataList");
static_assert(offsetof(FKoratBlastForteTypeDataList, Key) == 0x000000, "Member 'FKoratBlastForteTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSWarpRequestInfoDataAsset
// 0x0028 (0x0028 - 0x0000)
struct FSSWarpRequestInfoDataAsset final
{
public:
	bool                                          bSaveReturnLocation;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpUseSequencerKey;                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpUseSequencerReturnKey;                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpRequestType                              WarpRequestType;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpRequestReturnType                        WarpRequestReturnType;                             // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpCenterOtherCharacter;                         // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpSaveRootMotionOffset;                         // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpLoadRootMotionOffset;                         // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForceLocatorName;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpSaveAndLoadRootMotionOffset;                  // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpReturnWarpRootMotionOffsetAdd;                // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0xE];                                       // 0x001A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpRequestInfoDataAsset) == 0x000008, "Wrong alignment on FSSWarpRequestInfoDataAsset");
static_assert(sizeof(FSSWarpRequestInfoDataAsset) == 0x000028, "Wrong size on FSSWarpRequestInfoDataAsset");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bSaveReturnLocation) == 0x000000, "Member 'FSSWarpRequestInfoDataAsset::bSaveReturnLocation' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpUseSequencerKey) == 0x000001, "Member 'FSSWarpRequestInfoDataAsset::bWarpUseSequencerKey' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpUseSequencerReturnKey) == 0x000002, "Member 'FSSWarpRequestInfoDataAsset::bWarpUseSequencerReturnKey' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, WarpRequestType) == 0x000003, "Member 'FSSWarpRequestInfoDataAsset::WarpRequestType' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, WarpRequestReturnType) == 0x000004, "Member 'FSSWarpRequestInfoDataAsset::WarpRequestReturnType' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpCenterOtherCharacter) == 0x000005, "Member 'FSSWarpRequestInfoDataAsset::bWarpCenterOtherCharacter' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpSaveRootMotionOffset) == 0x000006, "Member 'FSSWarpRequestInfoDataAsset::bWarpSaveRootMotionOffset' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpLoadRootMotionOffset) == 0x000007, "Member 'FSSWarpRequestInfoDataAsset::bWarpLoadRootMotionOffset' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, ForceLocatorName) == 0x000008, "Member 'FSSWarpRequestInfoDataAsset::ForceLocatorName' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpSaveAndLoadRootMotionOffset) == 0x000018, "Member 'FSSWarpRequestInfoDataAsset::bWarpSaveAndLoadRootMotionOffset' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfoDataAsset, bWarpReturnWarpRootMotionOffsetAdd) == 0x000019, "Member 'FSSWarpRequestInfoDataAsset::bWarpReturnWarpRootMotionOffsetAdd' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBlastForteParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FKoratCharacterBlastForteParameter final
{
public:
	bool                                          bWeakSpecialShield;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x000C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastForteTypeDataList           Type;                                              // 0x0014(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendBlastStock;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerExpendBlastStock;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSSupportingCharacterData>     SupportCharacters;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBlastDemoBranchSupportCharacter> BranchSupportCharacters;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastForteName;                                    // 0x0060(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsImpossibleGuard;                                // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptibleExplosion;                           // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptibleBarrier;                             // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x007B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackstepWhenWithinDistance;                        // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         SureToHitRange;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBlastForteParameter) == 0x000008, "Wrong alignment on FKoratCharacterBlastForteParameter");
static_assert(sizeof(FKoratCharacterBlastForteParameter) == 0x0000E0, "Wrong size on FKoratCharacterBlastForteParameter");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bWeakSpecialShield) == 0x000000, "Member 'FKoratCharacterBlastForteParameter::bWeakSpecialShield' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, MapHitReaction) == 0x000004, "Member 'FKoratCharacterBlastForteParameter::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, CharacterHitReaction) == 0x00000C, "Member 'FKoratCharacterBlastForteParameter::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, Type) == 0x000014, "Member 'FKoratCharacterBlastForteParameter::Type' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bPenetrate) == 0x00001C, "Member 'FKoratCharacterBlastForteParameter::bPenetrate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bDontJostle) == 0x00001D, "Member 'FKoratCharacterBlastForteParameter::bDontJostle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bKienzan) == 0x00001E, "Member 'FKoratCharacterBlastForteParameter::bKienzan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bMultiStageOff) == 0x00001F, "Member 'FKoratCharacterBlastForteParameter::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, ExpendBlastStock) == 0x000020, "Member 'FKoratCharacterBlastForteParameter::ExpendBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, TriggerExpendBlastStock) == 0x000024, "Member 'FKoratCharacterBlastForteParameter::TriggerExpendBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bNonLockUsable) == 0x000028, "Member 'FKoratCharacterBlastForteParameter::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, SupportCharacters) == 0x000030, "Member 'FKoratCharacterBlastForteParameter::SupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, BranchSupportCharacters) == 0x000040, "Member 'FKoratCharacterBlastForteParameter::BranchSupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, BlastForteName) == 0x000060, "Member 'FKoratCharacterBlastForteParameter::BlastForteName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bIsImpossibleGuard) == 0x000078, "Member 'FKoratCharacterBlastForteParameter::bIsImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bInterruptibleExplosion) == 0x000079, "Member 'FKoratCharacterBlastForteParameter::bInterruptibleExplosion' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bInterruptibleBarrier) == 0x00007A, "Member 'FKoratCharacterBlastForteParameter::bInterruptibleBarrier' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bBackstepWhenNearMode) == 0x00007B, "Member 'FKoratCharacterBlastForteParameter::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, BackstepWhenWithinDistance) == 0x00007C, "Member 'FKoratCharacterBlastForteParameter::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bTurnBeforeTransition) == 0x000080, "Member 'FKoratCharacterBlastForteParameter::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bTurnCGSection) == 0x000081, "Member 'FKoratCharacterBlastForteParameter::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, bTurnHTSection) == 0x000082, "Member 'FKoratCharacterBlastForteParameter::bTurnHTSection' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, WarpRequestInfoDataAssetSD) == 0x000088, "Member 'FKoratCharacterBlastForteParameter::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, WarpRequestInfoDataAssetHD) == 0x0000B0, "Member 'FKoratCharacterBlastForteParameter::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastForteParameter, SureToHitRange) == 0x0000D8, "Member 'FKoratCharacterBlastForteParameter::SureToHitRange' has a wrong offset!");

// ScriptStruct SS.SSLaboCharacterPresetDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSLaboCharacterPresetDataAssetRecord final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSLaboCharacterPresetDataAssetRecord) == 0x000004, "Wrong alignment on FSSLaboCharacterPresetDataAssetRecord");
static_assert(sizeof(FSSLaboCharacterPresetDataAssetRecord) == 0x000010, "Wrong size on FSSLaboCharacterPresetDataAssetRecord");
static_assert(offsetof(FSSLaboCharacterPresetDataAssetRecord, CharacterID) == 0x000000, "Member 'FSSLaboCharacterPresetDataAssetRecord::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSLaboCharacterPresetDataAssetRecord, CostumeId) == 0x000008, "Member 'FSSLaboCharacterPresetDataAssetRecord::CostumeId' has a wrong offset!");

// ScriptStruct SS.KoratButtonGuideData
// 0x0028 (0x0028 - 0x0000)
struct FKoratButtonGuideData final
{
public:
	bool                                          ButtonTypeHold;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableHoldButtonAutoKeyBind;                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RepeatHoldButton;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GuideText;                                         // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	ESSKeyInputType                               KeyInputType;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseHitOff;                                       // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratButtonGuideData) == 0x000008, "Wrong alignment on FKoratButtonGuideData");
static_assert(sizeof(FKoratButtonGuideData) == 0x000028, "Wrong size on FKoratButtonGuideData");
static_assert(offsetof(FKoratButtonGuideData, ButtonTypeHold) == 0x000000, "Member 'FKoratButtonGuideData::ButtonTypeHold' has a wrong offset!");
static_assert(offsetof(FKoratButtonGuideData, DisableHoldButtonAutoKeyBind) == 0x000001, "Member 'FKoratButtonGuideData::DisableHoldButtonAutoKeyBind' has a wrong offset!");
static_assert(offsetof(FKoratButtonGuideData, RepeatHoldButton) == 0x000002, "Member 'FKoratButtonGuideData::RepeatHoldButton' has a wrong offset!");
static_assert(offsetof(FKoratButtonGuideData, GuideText) == 0x000008, "Member 'FKoratButtonGuideData::GuideText' has a wrong offset!");
static_assert(offsetof(FKoratButtonGuideData, KeyInputType) == 0x000020, "Member 'FKoratButtonGuideData::KeyInputType' has a wrong offset!");
static_assert(offsetof(FKoratButtonGuideData, MouseHitOff) == 0x000021, "Member 'FKoratButtonGuideData::MouseHitOff' has a wrong offset!");

// ScriptStruct SS.KoratButtonGuideDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratButtonGuideDataAssetRecord final
{
public:
	TArray<struct FKoratButtonGuideData>          ButtonGuideData;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratButtonGuideDataAssetRecord) == 0x000008, "Wrong alignment on FKoratButtonGuideDataAssetRecord");
static_assert(sizeof(FKoratButtonGuideDataAssetRecord) == 0x000010, "Wrong size on FKoratButtonGuideDataAssetRecord");
static_assert(offsetof(FKoratButtonGuideDataAssetRecord, ButtonGuideData) == 0x000000, "Member 'FKoratButtonGuideDataAssetRecord::ButtonGuideData' has a wrong offset!");

// ScriptStruct SS.SSAiMemberEmotionParam
// 0x0008 (0x0018 - 0x0010)
struct FSSAiMemberEmotionParam final : public FSSAiCommonEmotionParam
{
public:
	int32                                         RemainingMembers;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiEmotionSignType                          SignType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiMemberEmotionParam) == 0x000004, "Wrong alignment on FSSAiMemberEmotionParam");
static_assert(sizeof(FSSAiMemberEmotionParam) == 0x000018, "Wrong size on FSSAiMemberEmotionParam");
static_assert(offsetof(FSSAiMemberEmotionParam, RemainingMembers) == 0x000010, "Member 'FSSAiMemberEmotionParam::RemainingMembers' has a wrong offset!");
static_assert(offsetof(FSSAiMemberEmotionParam, SignType) == 0x000014, "Member 'FSSAiMemberEmotionParam::SignType' has a wrong offset!");

// ScriptStruct SS.KoratBuffFormTypeDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FKoratBuffFormTypeDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffFormTypeDataAssetRecord) == 0x000004, "Wrong alignment on FKoratBuffFormTypeDataAssetRecord");
static_assert(sizeof(FKoratBuffFormTypeDataAssetRecord) == 0x000004, "Wrong size on FKoratBuffFormTypeDataAssetRecord");
static_assert(offsetof(FKoratBuffFormTypeDataAssetRecord, SortId) == 0x000000, "Member 'FKoratBuffFormTypeDataAssetRecord::SortId' has a wrong offset!");

// ScriptStruct SS.SSEffectMaterialInstanceReplace
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSSEffectMaterialInstanceReplace final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectMaterialInstanceReplace) == 0x000008, "Wrong alignment on FSSEffectMaterialInstanceReplace");
static_assert(sizeof(FSSEffectMaterialInstanceReplace) == 0x000008, "Wrong size on FSSEffectMaterialInstanceReplace");

// ScriptStruct SS.KoratBlastSkillTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastSkillTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastSkillTypeDataList) == 0x000004, "Wrong alignment on FKoratBlastSkillTypeDataList");
static_assert(sizeof(FKoratBlastSkillTypeDataList) == 0x000008, "Wrong size on FKoratBlastSkillTypeDataList");
static_assert(offsetof(FKoratBlastSkillTypeDataList, Key) == 0x000000, "Member 'FKoratBlastSkillTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratLungeEndDamageDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratLungeEndDamageDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratLungeEndDamageDataList) == 0x000004, "Wrong alignment on FKoratLungeEndDamageDataList");
static_assert(sizeof(FKoratLungeEndDamageDataList) == 0x000008, "Wrong size on FKoratLungeEndDamageDataList");
static_assert(offsetof(FKoratLungeEndDamageDataList, Key) == 0x000000, "Member 'FKoratLungeEndDamageDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBlastSkillParameter
// 0x0140 (0x0140 - 0x0000)
struct FKoratCharacterBlastSkillParameter final
{
public:
	float                                         LungeSpeed;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendEnergy;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerExpendEnergy;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendHelth;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StealHelth;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChargeTime;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChargeDamageRate;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBlastImpact;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlastImpactPower;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSpeedImpact;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakSpecialShield;                                // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x002C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x0034(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastSkillTypeDataList           Type;                                              // 0x003C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionHitBulletCount;                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionFinishedBulletCount;            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratLungeEndDamageDataList           DamageLungeEnd;                                    // 0x004C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x0057(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeEscapeEvenet;                            // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestruct;                                // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestructDemoGuard;                       // 0x005A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuard;                                  // 0x005B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuardFullCharge;                        // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSteel;                                      // 0x005D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRecoverSteel;                                   // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKamehameHa;                                       // 0x005F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfDestruction;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedKaiouken;                                     // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSetDirectionDamage;                          // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSSupportingCharacterData>     SupportCharacters;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x20];                                      // 0x0078(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastSkillName;                                    // 0x0098(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratBlastImpactCameraType                   BlastImpactCameraType;                             // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardCrash;                                       // 0x0101(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlastGroupDataList               BlastGroup;                                        // 0x0104(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SureToHitRange;                                    // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionAttackParameterData;                    // 0x0110(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionOpponentAttackParameterData;            // 0x0118(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionSupportAttackParameterData;             // 0x0120(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnableHideNearDestructionStaticMesh;            // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoVanishingWhenDoBlastCombo;                      // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VanishingDistance;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepWhenWithinDistance;                        // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBlastSkillParameter) == 0x000008, "Wrong alignment on FKoratCharacterBlastSkillParameter");
static_assert(sizeof(FKoratCharacterBlastSkillParameter) == 0x000140, "Wrong size on FKoratCharacterBlastSkillParameter");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, LungeSpeed) == 0x000000, "Member 'FKoratCharacterBlastSkillParameter::LungeSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, ReloadTime) == 0x000004, "Member 'FKoratCharacterBlastSkillParameter::ReloadTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, ExpendEnergy) == 0x000008, "Member 'FKoratCharacterBlastSkillParameter::ExpendEnergy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, TriggerExpendEnergy) == 0x00000C, "Member 'FKoratCharacterBlastSkillParameter::TriggerExpendEnergy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, ExpendHelth) == 0x000010, "Member 'FKoratCharacterBlastSkillParameter::ExpendHelth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, StealHelth) == 0x000014, "Member 'FKoratCharacterBlastSkillParameter::StealHelth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, MaxChargeTime) == 0x000018, "Member 'FKoratCharacterBlastSkillParameter::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, MaxChargeDamageRate) == 0x00001C, "Member 'FKoratCharacterBlastSkillParameter::MaxChargeDamageRate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bCanBlastImpact) == 0x000020, "Member 'FKoratCharacterBlastSkillParameter::bCanBlastImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, BlastImpactPower) == 0x000024, "Member 'FKoratCharacterBlastSkillParameter::BlastImpactPower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bCanSpeedImpact) == 0x000028, "Member 'FKoratCharacterBlastSkillParameter::bCanSpeedImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bWeakSpecialShield) == 0x000029, "Member 'FKoratCharacterBlastSkillParameter::bWeakSpecialShield' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, MapHitReaction) == 0x00002C, "Member 'FKoratCharacterBlastSkillParameter::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, CharacterHitReaction) == 0x000034, "Member 'FKoratCharacterBlastSkillParameter::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, Type) == 0x00003C, "Member 'FKoratCharacterBlastSkillParameter::Type' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, TransitionConditionHitBulletCount) == 0x000044, "Member 'FKoratCharacterBlastSkillParameter::TransitionConditionHitBulletCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, TransitionConditionFinishedBulletCount) == 0x000048, "Member 'FKoratCharacterBlastSkillParameter::TransitionConditionFinishedBulletCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, DamageLungeEnd) == 0x00004C, "Member 'FKoratCharacterBlastSkillParameter::DamageLungeEnd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bPenetrate) == 0x000054, "Member 'FKoratCharacterBlastSkillParameter::bPenetrate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bDontJostle) == 0x000055, "Member 'FKoratCharacterBlastSkillParameter::bDontJostle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bKienzan) == 0x000056, "Member 'FKoratCharacterBlastSkillParameter::bKienzan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bMultiStageOff) == 0x000057, "Member 'FKoratCharacterBlastSkillParameter::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bMapChangeEscapeEvenet) == 0x000058, "Member 'FKoratCharacterBlastSkillParameter::bMapChangeEscapeEvenet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bMapChangeDestruct) == 0x000059, "Member 'FKoratCharacterBlastSkillParameter::bMapChangeDestruct' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bMapChangeDestructDemoGuard) == 0x00005A, "Member 'FKoratCharacterBlastSkillParameter::bMapChangeDestructDemoGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bImpossibleGuard) == 0x00005B, "Member 'FKoratCharacterBlastSkillParameter::bImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bImpossibleGuardFullCharge) == 0x00005C, "Member 'FKoratCharacterBlastSkillParameter::bImpossibleGuardFullCharge' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bEnableSteel) == 0x00005D, "Member 'FKoratCharacterBlastSkillParameter::bEnableSteel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bNoRecoverSteel) == 0x00005E, "Member 'FKoratCharacterBlastSkillParameter::bNoRecoverSteel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bKamehameHa) == 0x00005F, "Member 'FKoratCharacterBlastSkillParameter::bKamehameHa' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bSelfDestruction) == 0x000060, "Member 'FKoratCharacterBlastSkillParameter::bSelfDestruction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bNeedKaiouken) == 0x000061, "Member 'FKoratCharacterBlastSkillParameter::bNeedKaiouken' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bForceSetDirectionDamage) == 0x000062, "Member 'FKoratCharacterBlastSkillParameter::bForceSetDirectionDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bNonLockUsable) == 0x000063, "Member 'FKoratCharacterBlastSkillParameter::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, SupportCharacters) == 0x000068, "Member 'FKoratCharacterBlastSkillParameter::SupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, BlastSkillName) == 0x000098, "Member 'FKoratCharacterBlastSkillParameter::BlastSkillName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, WarpRequestInfoDataAssetSD) == 0x0000B0, "Member 'FKoratCharacterBlastSkillParameter::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, WarpRequestInfoDataAssetHD) == 0x0000D8, "Member 'FKoratCharacterBlastSkillParameter::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, BlastImpactCameraType) == 0x000100, "Member 'FKoratCharacterBlastSkillParameter::BlastImpactCameraType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bGuardCrash) == 0x000101, "Member 'FKoratCharacterBlastSkillParameter::bGuardCrash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, BlastGroup) == 0x000104, "Member 'FKoratCharacterBlastSkillParameter::BlastGroup' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, SureToHitRange) == 0x00010C, "Member 'FKoratCharacterBlastSkillParameter::SureToHitRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, DestructionAttackParameterData) == 0x000110, "Member 'FKoratCharacterBlastSkillParameter::DestructionAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, DestructionOpponentAttackParameterData) == 0x000118, "Member 'FKoratCharacterBlastSkillParameter::DestructionOpponentAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, DestructionSupportAttackParameterData) == 0x000120, "Member 'FKoratCharacterBlastSkillParameter::DestructionSupportAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bIsEnableHideNearDestructionStaticMesh) == 0x000128, "Member 'FKoratCharacterBlastSkillParameter::bIsEnableHideNearDestructionStaticMesh' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bDoVanishingWhenDoBlastCombo) == 0x000129, "Member 'FKoratCharacterBlastSkillParameter::bDoVanishingWhenDoBlastCombo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, VanishingDistance) == 0x00012C, "Member 'FKoratCharacterBlastSkillParameter::VanishingDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bBackstepWhenNearMode) == 0x000130, "Member 'FKoratCharacterBlastSkillParameter::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, BackstepWhenWithinDistance) == 0x000134, "Member 'FKoratCharacterBlastSkillParameter::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bTurnBeforeTransition) == 0x000138, "Member 'FKoratCharacterBlastSkillParameter::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bTurnCGSection) == 0x000139, "Member 'FKoratCharacterBlastSkillParameter::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastSkillParameter, bTurnHTSection) == 0x00013A, "Member 'FKoratCharacterBlastSkillParameter::bTurnHTSection' has a wrong offset!");

// ScriptStruct SS.KoratBlastForteTermDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBlastForteTermDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlastForteTermDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBlastForteTermDataAssetRecord");
static_assert(sizeof(FKoratBlastForteTermDataAssetRecord) == 0x000001, "Wrong size on FKoratBlastForteTermDataAssetRecord");

// ScriptStruct SS.SSMainMenuCharacterWaitAnimData
// 0x0050 (0x0050 - 0x0000)
struct FSSMainMenuCharacterWaitAnimData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratPlayerStartDataList>      RelationCharacters;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReservedWaitAnimIndex;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlayNextOwn;                                 // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTransformTrack;                              // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstPlay;                                        // 0x004E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindLocator;                                    // 0x004F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuCharacterWaitAnimData) == 0x000008, "Wrong alignment on FSSMainMenuCharacterWaitAnimData");
static_assert(sizeof(FSSMainMenuCharacterWaitAnimData) == 0x000050, "Wrong size on FSSMainMenuCharacterWaitAnimData");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, Sequence) == 0x000000, "Member 'FSSMainMenuCharacterWaitAnimData::Sequence' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, Duration) == 0x000030, "Member 'FSSMainMenuCharacterWaitAnimData::Duration' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, RelationCharacters) == 0x000038, "Member 'FSSMainMenuCharacterWaitAnimData::RelationCharacters' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, ReservedWaitAnimIndex) == 0x000048, "Member 'FSSMainMenuCharacterWaitAnimData::ReservedWaitAnimIndex' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, bAllowPlayNextOwn) == 0x00004C, "Member 'FSSMainMenuCharacterWaitAnimData::bAllowPlayNextOwn' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, bAllowTransformTrack) == 0x00004D, "Member 'FSSMainMenuCharacterWaitAnimData::bAllowTransformTrack' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, bFirstPlay) == 0x00004E, "Member 'FSSMainMenuCharacterWaitAnimData::bFirstPlay' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterWaitAnimData, bRebindLocator) == 0x00004F, "Member 'FSSMainMenuCharacterWaitAnimData::bRebindLocator' has a wrong offset!");

// ScriptStruct SS.SSAiActionEmotionParam
// 0x0020 (0x0020 - 0x0000)
struct FSSAiActionEmotionParam final
{
public:
	TArray<class FName>                           Actions;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSAiAddEmotionParam                   Param;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiActionEmotionParam) == 0x000008, "Wrong alignment on FSSAiActionEmotionParam");
static_assert(sizeof(FSSAiActionEmotionParam) == 0x000020, "Wrong size on FSSAiActionEmotionParam");
static_assert(offsetof(FSSAiActionEmotionParam, Actions) == 0x000000, "Member 'FSSAiActionEmotionParam::Actions' has a wrong offset!");
static_assert(offsetof(FSSAiActionEmotionParam, Param) == 0x000010, "Member 'FSSAiActionEmotionParam::Param' has a wrong offset!");

// ScriptStruct SS.KoratBulletKeyDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBulletKeyDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBulletKeyDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBulletKeyDataAssetRecord");
static_assert(sizeof(FKoratBulletKeyDataAssetRecord) == 0x000001, "Wrong size on FKoratBulletKeyDataAssetRecord");

// ScriptStruct SS.SSMainMenuCharacterData
// 0x0030 (0x0030 - 0x0000)
struct FSSMainMenuCharacterData final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              LocatorData;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceOrigin;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSMainMenuCharacterWaitAnimData> WaitAnimData;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuCharacterData) == 0x000008, "Wrong alignment on FSSMainMenuCharacterData");
static_assert(sizeof(FSSMainMenuCharacterData) == 0x000030, "Wrong size on FSSMainMenuCharacterData");
static_assert(offsetof(FSSMainMenuCharacterData, CharacterID) == 0x000000, "Member 'FSSMainMenuCharacterData::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterData, CostumeId) == 0x000008, "Member 'FSSMainMenuCharacterData::CostumeId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterData, LocatorData) == 0x000010, "Member 'FSSMainMenuCharacterData::LocatorData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterData, bForceOrigin) == 0x000018, "Member 'FSSMainMenuCharacterData::bForceOrigin' has a wrong offset!");
static_assert(offsetof(FSSMainMenuCharacterData, WaitAnimData) == 0x000020, "Member 'FSSMainMenuCharacterData::WaitAnimData' has a wrong offset!");

// ScriptStruct SS.KoratUILevelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratUILevelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUILevelDataList) == 0x000004, "Wrong alignment on FKoratUILevelDataList");
static_assert(sizeof(FKoratUILevelDataList) == 0x000008, "Wrong size on FKoratUILevelDataList");
static_assert(offsetof(FKoratUILevelDataList, Key) == 0x000000, "Member 'FKoratUILevelDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSMainMenuTransitionBattleData
// 0x0008 (0x0008 - 0x0000)
struct FSSMainMenuTransitionBattleData final
{
public:
	bool                                          OnlineBattleFlg;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleOnlineMode                        BattleOnlineMode;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleKeyMode                           BattleKeyMode;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleMenu                              BattleMenu;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleTimeLimit;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuTransitionBattleData) == 0x000004, "Wrong alignment on FSSMainMenuTransitionBattleData");
static_assert(sizeof(FSSMainMenuTransitionBattleData) == 0x000008, "Wrong size on FSSMainMenuTransitionBattleData");
static_assert(offsetof(FSSMainMenuTransitionBattleData, OnlineBattleFlg) == 0x000000, "Member 'FSSMainMenuTransitionBattleData::OnlineBattleFlg' has a wrong offset!");
static_assert(offsetof(FSSMainMenuTransitionBattleData, BattleOnlineMode) == 0x000001, "Member 'FSSMainMenuTransitionBattleData::BattleOnlineMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuTransitionBattleData, BattleKeyMode) == 0x000002, "Member 'FSSMainMenuTransitionBattleData::BattleKeyMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuTransitionBattleData, BattleMenu) == 0x000003, "Member 'FSSMainMenuTransitionBattleData::BattleMenu' has a wrong offset!");
static_assert(offsetof(FSSMainMenuTransitionBattleData, BattleTimeLimit) == 0x000004, "Member 'FSSMainMenuTransitionBattleData::BattleTimeLimit' has a wrong offset!");

// ScriptStruct SS.SSMainMenuTransitionMissionData
// 0x0001 (0x0001 - 0x0000)
struct FSSMainMenuTransitionMissionData final
{
public:
	EMenuMissionMode                              MissionMode;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuTransitionMissionData) == 0x000001, "Wrong alignment on FSSMainMenuTransitionMissionData");
static_assert(sizeof(FSSMainMenuTransitionMissionData) == 0x000001, "Wrong size on FSSMainMenuTransitionMissionData");
static_assert(offsetof(FSSMainMenuTransitionMissionData, MissionMode) == 0x000000, "Member 'FSSMainMenuTransitionMissionData::MissionMode' has a wrong offset!");

// ScriptStruct SS.SSMainmenuTransitionCrossFadeData
// 0x0068 (0x0068 - 0x0000)
struct FSSMainmenuTransitionCrossFadeData final
{
public:
	bool                                          bEnableCossFade;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             Curve;                                             // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainmenuTransitionCrossFadeData) == 0x000008, "Wrong alignment on FSSMainmenuTransitionCrossFadeData");
static_assert(sizeof(FSSMainmenuTransitionCrossFadeData) == 0x000068, "Wrong size on FSSMainmenuTransitionCrossFadeData");
static_assert(offsetof(FSSMainmenuTransitionCrossFadeData, bEnableCossFade) == 0x000000, "Member 'FSSMainmenuTransitionCrossFadeData::bEnableCossFade' has a wrong offset!");
static_assert(offsetof(FSSMainmenuTransitionCrossFadeData, Widget) == 0x000008, "Member 'FSSMainmenuTransitionCrossFadeData::Widget' has a wrong offset!");
static_assert(offsetof(FSSMainmenuTransitionCrossFadeData, Curve) == 0x000038, "Member 'FSSMainmenuTransitionCrossFadeData::Curve' has a wrong offset!");

// ScriptStruct SS.SSMainMenuLevelTransitionData
// 0x0140 (0x0140 - 0x0000)
struct FSSMainMenuLevelTransitionData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequencer;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  SubLevel;                                          // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  LightSubLevelToPassTheSequene;                     // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratUILevelDataList                  UILevel;                                           // 0x0090(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WaitSectionLabel;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransfarSequencer;                                // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeColor;                                         // 0x00AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              PivotLocator;                                      // 0x00BC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMainMenuTransitionMissionData       MissionSettings;                                   // 0x00C4(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSMainMenuTransitionBattleData        BattleSettings;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlaySequenceOnly;                                 // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindLocator;                                    // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSMainmenuTransitionCrossFadeData     CrossFadeSettings;                                 // 0x00D8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuLevelTransitionData) == 0x000008, "Wrong alignment on FSSMainMenuLevelTransitionData");
static_assert(sizeof(FSSMainMenuLevelTransitionData) == 0x000140, "Wrong size on FSSMainMenuLevelTransitionData");
static_assert(offsetof(FSSMainMenuLevelTransitionData, Sequencer) == 0x000000, "Member 'FSSMainMenuLevelTransitionData::Sequencer' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, SubLevel) == 0x000030, "Member 'FSSMainMenuLevelTransitionData::SubLevel' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, LightSubLevelToPassTheSequene) == 0x000060, "Member 'FSSMainMenuLevelTransitionData::LightSubLevelToPassTheSequene' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, UILevel) == 0x000090, "Member 'FSSMainMenuLevelTransitionData::UILevel' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, WaitSectionLabel) == 0x000098, "Member 'FSSMainMenuLevelTransitionData::WaitSectionLabel' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, bTransfarSequencer) == 0x0000A8, "Member 'FSSMainMenuLevelTransitionData::bTransfarSequencer' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, FadeColor) == 0x0000AC, "Member 'FSSMainMenuLevelTransitionData::FadeColor' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, PivotLocator) == 0x0000BC, "Member 'FSSMainMenuLevelTransitionData::PivotLocator' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, MissionSettings) == 0x0000C4, "Member 'FSSMainMenuLevelTransitionData::MissionSettings' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, BattleSettings) == 0x0000C8, "Member 'FSSMainMenuLevelTransitionData::BattleSettings' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, bPlaySequenceOnly) == 0x0000D0, "Member 'FSSMainMenuLevelTransitionData::bPlaySequenceOnly' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, bRebindLocator) == 0x0000D1, "Member 'FSSMainMenuLevelTransitionData::bRebindLocator' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLevelTransitionData, CrossFadeSettings) == 0x0000D8, "Member 'FSSMainMenuLevelTransitionData::CrossFadeSettings' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubSceneGreatGreatGrandchild
// 0x0140 (0x0140 - 0x0000)
struct FSSMainMenuSubSceneGreatGreatGrandchild final
{
public:
	struct FSSMainMenuLevelTransitionData         LevelTransition;                                   // 0x0000(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubSceneGreatGreatGrandchild) == 0x000008, "Wrong alignment on FSSMainMenuSubSceneGreatGreatGrandchild");
static_assert(sizeof(FSSMainMenuSubSceneGreatGreatGrandchild) == 0x000140, "Wrong size on FSSMainMenuSubSceneGreatGreatGrandchild");
static_assert(offsetof(FSSMainMenuSubSceneGreatGreatGrandchild, LevelTransition) == 0x000000, "Member 'FSSMainMenuSubSceneGreatGreatGrandchild::LevelTransition' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubSceneGreatGrandchild
// 0x0150 (0x0150 - 0x0000)
struct FSSMainMenuSubSceneGreatGrandchild final
{
public:
	struct FSSMainMenuLevelTransitionData         LevelTransition;                                   // 0x0000(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuSubSceneGreatGreatGrandchild> ChildScene;                                        // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubSceneGreatGrandchild) == 0x000008, "Wrong alignment on FSSMainMenuSubSceneGreatGrandchild");
static_assert(sizeof(FSSMainMenuSubSceneGreatGrandchild) == 0x000150, "Wrong size on FSSMainMenuSubSceneGreatGrandchild");
static_assert(offsetof(FSSMainMenuSubSceneGreatGrandchild, LevelTransition) == 0x000000, "Member 'FSSMainMenuSubSceneGreatGrandchild::LevelTransition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneGreatGrandchild, ChildScene) == 0x000140, "Member 'FSSMainMenuSubSceneGreatGrandchild::ChildScene' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubSceneGrandchild
// 0x0190 (0x0190 - 0x0000)
struct FSSMainMenuSubSceneGrandchild final
{
public:
	TArray<struct FSSMainMenuCharacterData>       CharacterList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          FixedCamSequencer;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMainMenuLevelTransitionData         LevelTransition;                                   // 0x0040(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuSubSceneGreatGrandchild> ChildScene;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubSceneGrandchild) == 0x000008, "Wrong alignment on FSSMainMenuSubSceneGrandchild");
static_assert(sizeof(FSSMainMenuSubSceneGrandchild) == 0x000190, "Wrong size on FSSMainMenuSubSceneGrandchild");
static_assert(offsetof(FSSMainMenuSubSceneGrandchild, CharacterList) == 0x000000, "Member 'FSSMainMenuSubSceneGrandchild::CharacterList' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneGrandchild, FixedCamSequencer) == 0x000010, "Member 'FSSMainMenuSubSceneGrandchild::FixedCamSequencer' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneGrandchild, LevelTransition) == 0x000040, "Member 'FSSMainMenuSubSceneGrandchild::LevelTransition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneGrandchild, ChildScene) == 0x000180, "Member 'FSSMainMenuSubSceneGrandchild::ChildScene' has a wrong offset!");

// ScriptStruct SS.KoratCharacterEffectColorReplaceTypeDataList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratCharacterEffectColorReplaceTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterEffectColorReplaceTypeDataList) == 0x000008, "Wrong alignment on FKoratCharacterEffectColorReplaceTypeDataList");
static_assert(sizeof(FKoratCharacterEffectColorReplaceTypeDataList) == 0x000018, "Wrong size on FKoratCharacterEffectColorReplaceTypeDataList");
static_assert(offsetof(FKoratCharacterEffectColorReplaceTypeDataList, Key) == 0x000000, "Member 'FKoratCharacterEffectColorReplaceTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectColorDataDetail
// 0x0148 (0x0148 - 0x0000)
struct FKoratEffectColorDataDetail final
{
public:
	struct FKoratEffectMultipleColorData          MultipleEffectColorsData;                          // 0x0000(0x0128)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterEffectColorReplaceTypeDataList> ReplaceSettingArray;                               // 0x0128(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterEffectColorReplaceTypeDataList> OverwriteReplaceSetting;                           // 0x0138(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectColorDataDetail) == 0x000008, "Wrong alignment on FKoratEffectColorDataDetail");
static_assert(sizeof(FKoratEffectColorDataDetail) == 0x000148, "Wrong size on FKoratEffectColorDataDetail");
static_assert(offsetof(FKoratEffectColorDataDetail, MultipleEffectColorsData) == 0x000000, "Member 'FKoratEffectColorDataDetail::MultipleEffectColorsData' has a wrong offset!");
static_assert(offsetof(FKoratEffectColorDataDetail, ReplaceSettingArray) == 0x000128, "Member 'FKoratEffectColorDataDetail::ReplaceSettingArray' has a wrong offset!");
static_assert(offsetof(FKoratEffectColorDataDetail, OverwriteReplaceSetting) == 0x000138, "Member 'FKoratEffectColorDataDetail::OverwriteReplaceSetting' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBlastUltimateParameter
// 0x0188 (0x0188 - 0x0000)
struct FKoratCharacterBlastUltimateParameter final
{
public:
	float                                         LungeSpeed;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendEnergy;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerExpendEnergy;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendHelth;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StealHelth;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChargeTime;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChargeDamageRate;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBlastImpact;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlastImpactPower;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSpeedImpact;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakSpecialShield;                                // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x002C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x0034(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastSkillTypeDataList           Type;                                              // 0x003C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionHitBulletCount;                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionFinishedBulletCount;            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratLungeEndDamageDataList           DamageLungeEnd;                                    // 0x004C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           GaveActionDataList;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bGaveAfterStateToBlowFalling;                      // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGaveAfterStateToBlowFallingAlsoSIOT;              // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   GaveAfterActionDataList;                           // 0x006C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          GaveAfterHitBackData;                              // 0x0074(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           ReceivedActionDataList;                            // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x0092(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x0093(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeEscapeEvenet;                            // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestruct;                                // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestructDemoGuard;                       // 0x0096(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuard;                                  // 0x0097(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuardFullCharge;                        // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSteel;                                      // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRecoverSteel;                                   // 0x009A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKamehameHa;                                       // 0x009B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfDestruction;                                  // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedKaiouken;                                     // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExScale;                                          // 0x009E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSetDirectionDamage;                          // 0x009F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBodyChange;                                       // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSSupportingCharacterData>     SupportCharacters;                                 // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBlastDemoBranchSupportCharacter> BranchSupportCharacters;                           // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastUltimateName;                                 // 0x00D8(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratBlastImpactCameraType                   BlastImpactCameraType;                             // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConsecutiveInputMaxNum;                            // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveHitDistance;                                   // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLimitTime;                                     // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardCrash;                                       // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBlastGroupDataList               BlastGroup;                                        // 0x0154(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SureToHitRange;                                    // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionAttackParameterData;                    // 0x0160(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionOpponentAttackParameterData;            // 0x0168(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDestructionAttackParameterDataList DestructionSupportAttackParameterData;             // 0x0170(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnableHideNearDestructionStaticMesh;            // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepWhenWithinDistance;                        // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183[0x5];                                      // 0x0183(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBlastUltimateParameter) == 0x000008, "Wrong alignment on FKoratCharacterBlastUltimateParameter");
static_assert(sizeof(FKoratCharacterBlastUltimateParameter) == 0x000188, "Wrong size on FKoratCharacterBlastUltimateParameter");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, LungeSpeed) == 0x000000, "Member 'FKoratCharacterBlastUltimateParameter::LungeSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, ReloadTime) == 0x000004, "Member 'FKoratCharacterBlastUltimateParameter::ReloadTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, ExpendEnergy) == 0x000008, "Member 'FKoratCharacterBlastUltimateParameter::ExpendEnergy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, TriggerExpendEnergy) == 0x00000C, "Member 'FKoratCharacterBlastUltimateParameter::TriggerExpendEnergy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, ExpendHelth) == 0x000010, "Member 'FKoratCharacterBlastUltimateParameter::ExpendHelth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, StealHelth) == 0x000014, "Member 'FKoratCharacterBlastUltimateParameter::StealHelth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, MaxChargeTime) == 0x000018, "Member 'FKoratCharacterBlastUltimateParameter::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, MaxChargeDamageRate) == 0x00001C, "Member 'FKoratCharacterBlastUltimateParameter::MaxChargeDamageRate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bCanBlastImpact) == 0x000020, "Member 'FKoratCharacterBlastUltimateParameter::bCanBlastImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BlastImpactPower) == 0x000024, "Member 'FKoratCharacterBlastUltimateParameter::BlastImpactPower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bCanSpeedImpact) == 0x000028, "Member 'FKoratCharacterBlastUltimateParameter::bCanSpeedImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bWeakSpecialShield) == 0x000029, "Member 'FKoratCharacterBlastUltimateParameter::bWeakSpecialShield' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, MapHitReaction) == 0x00002C, "Member 'FKoratCharacterBlastUltimateParameter::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, CharacterHitReaction) == 0x000034, "Member 'FKoratCharacterBlastUltimateParameter::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, Type) == 0x00003C, "Member 'FKoratCharacterBlastUltimateParameter::Type' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, TransitionConditionHitBulletCount) == 0x000044, "Member 'FKoratCharacterBlastUltimateParameter::TransitionConditionHitBulletCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, TransitionConditionFinishedBulletCount) == 0x000048, "Member 'FKoratCharacterBlastUltimateParameter::TransitionConditionFinishedBulletCount' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, DamageLungeEnd) == 0x00004C, "Member 'FKoratCharacterBlastUltimateParameter::DamageLungeEnd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, GaveActionDataList) == 0x000058, "Member 'FKoratCharacterBlastUltimateParameter::GaveActionDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bGaveAfterStateToBlowFalling) == 0x000068, "Member 'FKoratCharacterBlastUltimateParameter::bGaveAfterStateToBlowFalling' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bGaveAfterStateToBlowFallingAlsoSIOT) == 0x000069, "Member 'FKoratCharacterBlastUltimateParameter::bGaveAfterStateToBlowFallingAlsoSIOT' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, GaveAfterActionDataList) == 0x00006C, "Member 'FKoratCharacterBlastUltimateParameter::GaveAfterActionDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, GaveAfterHitBackData) == 0x000074, "Member 'FKoratCharacterBlastUltimateParameter::GaveAfterHitBackData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, ReceivedActionDataList) == 0x000080, "Member 'FKoratCharacterBlastUltimateParameter::ReceivedActionDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bPenetrate) == 0x000090, "Member 'FKoratCharacterBlastUltimateParameter::bPenetrate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bDontJostle) == 0x000091, "Member 'FKoratCharacterBlastUltimateParameter::bDontJostle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bKienzan) == 0x000092, "Member 'FKoratCharacterBlastUltimateParameter::bKienzan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bMultiStageOff) == 0x000093, "Member 'FKoratCharacterBlastUltimateParameter::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bMapChangeEscapeEvenet) == 0x000094, "Member 'FKoratCharacterBlastUltimateParameter::bMapChangeEscapeEvenet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bMapChangeDestruct) == 0x000095, "Member 'FKoratCharacterBlastUltimateParameter::bMapChangeDestruct' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bMapChangeDestructDemoGuard) == 0x000096, "Member 'FKoratCharacterBlastUltimateParameter::bMapChangeDestructDemoGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bImpossibleGuard) == 0x000097, "Member 'FKoratCharacterBlastUltimateParameter::bImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bImpossibleGuardFullCharge) == 0x000098, "Member 'FKoratCharacterBlastUltimateParameter::bImpossibleGuardFullCharge' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bEnableSteel) == 0x000099, "Member 'FKoratCharacterBlastUltimateParameter::bEnableSteel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bNoRecoverSteel) == 0x00009A, "Member 'FKoratCharacterBlastUltimateParameter::bNoRecoverSteel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bKamehameHa) == 0x00009B, "Member 'FKoratCharacterBlastUltimateParameter::bKamehameHa' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bSelfDestruction) == 0x00009C, "Member 'FKoratCharacterBlastUltimateParameter::bSelfDestruction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bNeedKaiouken) == 0x00009D, "Member 'FKoratCharacterBlastUltimateParameter::bNeedKaiouken' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bExScale) == 0x00009E, "Member 'FKoratCharacterBlastUltimateParameter::bExScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bForceSetDirectionDamage) == 0x00009F, "Member 'FKoratCharacterBlastUltimateParameter::bForceSetDirectionDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bBodyChange) == 0x0000A0, "Member 'FKoratCharacterBlastUltimateParameter::bBodyChange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bNonLockUsable) == 0x0000A1, "Member 'FKoratCharacterBlastUltimateParameter::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, SupportCharacters) == 0x0000A8, "Member 'FKoratCharacterBlastUltimateParameter::SupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BranchSupportCharacters) == 0x0000B8, "Member 'FKoratCharacterBlastUltimateParameter::BranchSupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BlastUltimateName) == 0x0000D8, "Member 'FKoratCharacterBlastUltimateParameter::BlastUltimateName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, WarpRequestInfoDataAssetSD) == 0x0000F0, "Member 'FKoratCharacterBlastUltimateParameter::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, WarpRequestInfoDataAssetHD) == 0x000118, "Member 'FKoratCharacterBlastUltimateParameter::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BlastImpactCameraType) == 0x000140, "Member 'FKoratCharacterBlastUltimateParameter::BlastImpactCameraType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, ConsecutiveInputMaxNum) == 0x000144, "Member 'FKoratCharacterBlastUltimateParameter::ConsecutiveInputMaxNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, MoveHitDistance) == 0x000148, "Member 'FKoratCharacterBlastUltimateParameter::MoveHitDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, MoveLimitTime) == 0x00014C, "Member 'FKoratCharacterBlastUltimateParameter::MoveLimitTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bGuardCrash) == 0x000150, "Member 'FKoratCharacterBlastUltimateParameter::bGuardCrash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BlastGroup) == 0x000154, "Member 'FKoratCharacterBlastUltimateParameter::BlastGroup' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, SureToHitRange) == 0x00015C, "Member 'FKoratCharacterBlastUltimateParameter::SureToHitRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, DestructionAttackParameterData) == 0x000160, "Member 'FKoratCharacterBlastUltimateParameter::DestructionAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, DestructionOpponentAttackParameterData) == 0x000168, "Member 'FKoratCharacterBlastUltimateParameter::DestructionOpponentAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, DestructionSupportAttackParameterData) == 0x000170, "Member 'FKoratCharacterBlastUltimateParameter::DestructionSupportAttackParameterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bIsEnableHideNearDestructionStaticMesh) == 0x000178, "Member 'FKoratCharacterBlastUltimateParameter::bIsEnableHideNearDestructionStaticMesh' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bBackstepWhenNearMode) == 0x000179, "Member 'FKoratCharacterBlastUltimateParameter::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, BackstepWhenWithinDistance) == 0x00017C, "Member 'FKoratCharacterBlastUltimateParameter::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bTurnBeforeTransition) == 0x000180, "Member 'FKoratCharacterBlastUltimateParameter::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bTurnCGSection) == 0x000181, "Member 'FKoratCharacterBlastUltimateParameter::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FKoratCharacterBlastUltimateParameter, bTurnHTSection) == 0x000182, "Member 'FKoratCharacterBlastUltimateParameter::bTurnHTSection' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCounterCondition
// 0x000A (0x000A - 0x0000)
struct FKoratCharacterCounterCondition final
{
public:
	bool                                          bInvincible;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetectedSignCombatives;                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessAscertain;                                 // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessSonicSway;                                 // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessFastAvoidance;                             // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessZCounter;                                  // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessSuperCounter;                              // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSuperZCounterTakeType                   SuccessSuperZCounter;                              // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessSelfishness;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfishnessByCombatives;                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCounterCondition) == 0x000001, "Wrong alignment on FKoratCharacterCounterCondition");
static_assert(sizeof(FKoratCharacterCounterCondition) == 0x00000A, "Wrong size on FKoratCharacterCounterCondition");
static_assert(offsetof(FKoratCharacterCounterCondition, bInvincible) == 0x000000, "Member 'FKoratCharacterCounterCondition::bInvincible' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bDetectedSignCombatives) == 0x000001, "Member 'FKoratCharacterCounterCondition::bDetectedSignCombatives' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessAscertain) == 0x000002, "Member 'FKoratCharacterCounterCondition::bSuccessAscertain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessSonicSway) == 0x000003, "Member 'FKoratCharacterCounterCondition::bSuccessSonicSway' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessFastAvoidance) == 0x000004, "Member 'FKoratCharacterCounterCondition::bSuccessFastAvoidance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessZCounter) == 0x000005, "Member 'FKoratCharacterCounterCondition::bSuccessZCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessSuperCounter) == 0x000006, "Member 'FKoratCharacterCounterCondition::bSuccessSuperCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, SuccessSuperZCounter) == 0x000007, "Member 'FKoratCharacterCounterCondition::SuccessSuperZCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSuccessSelfishness) == 0x000008, "Member 'FKoratCharacterCounterCondition::bSuccessSelfishness' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCounterCondition, bSelfishnessByCombatives) == 0x000009, "Member 'FKoratCharacterCounterCondition::bSelfishnessByCombatives' has a wrong offset!");

// ScriptStruct SS.SSAiLevelReactionSpeed
// 0x0010 (0x0010 - 0x0000)
struct FSSAiLevelReactionSpeed final
{
public:
	float                                         MinReactionSpeed;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxReactionSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LevelCurve;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiLevelReactionSpeed) == 0x000008, "Wrong alignment on FSSAiLevelReactionSpeed");
static_assert(sizeof(FSSAiLevelReactionSpeed) == 0x000010, "Wrong size on FSSAiLevelReactionSpeed");
static_assert(offsetof(FSSAiLevelReactionSpeed, MinReactionSpeed) == 0x000000, "Member 'FSSAiLevelReactionSpeed::MinReactionSpeed' has a wrong offset!");
static_assert(offsetof(FSSAiLevelReactionSpeed, MaxReactionSpeed) == 0x000004, "Member 'FSSAiLevelReactionSpeed::MaxReactionSpeed' has a wrong offset!");
static_assert(offsetof(FSSAiLevelReactionSpeed, LevelCurve) == 0x000008, "Member 'FSSAiLevelReactionSpeed::LevelCurve' has a wrong offset!");

// ScriptStruct SS.SSVersionBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSVersionBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Version;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        CompatibleWithVersion;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSSVersionBase) == 0x000008, "Wrong alignment on FSSVersionBase");
static_assert(sizeof(FSSVersionBase) == 0x000010, "Wrong size on FSSVersionBase");
static_assert(offsetof(FSSVersionBase, Version) == 0x000008, "Member 'FSSVersionBase::Version' has a wrong offset!");
static_assert(offsetof(FSSVersionBase, CompatibleWithVersion) == 0x00000C, "Member 'FSSVersionBase::CompatibleWithVersion' has a wrong offset!");

// ScriptStruct SS.SSKoratVersionContent
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionContent final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionContent) == 0x000008, "Wrong alignment on FSSKoratVersionContent");
static_assert(sizeof(FSSKoratVersionContent) == 0x000010, "Wrong size on FSSKoratVersionContent");

// ScriptStruct SS.KoratPatternVoiceDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPatternVoiceDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPatternVoiceDataList) == 0x000004, "Wrong alignment on FKoratPatternVoiceDataList");
static_assert(sizeof(FKoratPatternVoiceDataList) == 0x000008, "Wrong size on FKoratPatternVoiceDataList");
static_assert(offsetof(FKoratPatternVoiceDataList, Key) == 0x000000, "Member 'FKoratPatternVoiceDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratChainPlaySoundDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratChainPlaySoundDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundCueID;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundCueName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPatternVoiceDataList             PatternName;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSequenceSoundSheetType                  SheetType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSSoundGroupType                             SoundGroupType;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSlowPlaySpeed;                              // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteOnFormChange;                               // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlay2D;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSequenceSoundCameraType                 CameraType;                                        // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SetPlayVoiceName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMDataList;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratPatternBGMName                          PatternBGMDataName;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSequenceSoundBGMType                    BGMType;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeInTime;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCrossFade;                                       // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratChainPlaySoundDataAssetRecord) == 0x000008, "Wrong alignment on FKoratChainPlaySoundDataAssetRecord");
static_assert(sizeof(FKoratChainPlaySoundDataAssetRecord) == 0x000050, "Wrong size on FKoratChainPlaySoundDataAssetRecord");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SortId) == 0x000000, "Member 'FKoratChainPlaySoundDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SoundCueID) == 0x000004, "Member 'FKoratChainPlaySoundDataAssetRecord::SoundCueID' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SoundCueName) == 0x000008, "Member 'FKoratChainPlaySoundDataAssetRecord::SoundCueName' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, PatternName) == 0x000018, "Member 'FKoratChainPlaySoundDataAssetRecord::PatternName' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SheetType) == 0x000020, "Member 'FKoratChainPlaySoundDataAssetRecord::SheetType' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SoundGroupType) == 0x000021, "Member 'FKoratChainPlaySoundDataAssetRecord::SoundGroupType' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, bEnableSlowPlaySpeed) == 0x000022, "Member 'FKoratChainPlaySoundDataAssetRecord::bEnableSlowPlaySpeed' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, bDeleteOnFormChange) == 0x000023, "Member 'FKoratChainPlaySoundDataAssetRecord::bDeleteOnFormChange' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, FadeOutDuration) == 0x000024, "Member 'FKoratChainPlaySoundDataAssetRecord::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, Volume) == 0x000028, "Member 'FKoratChainPlaySoundDataAssetRecord::Volume' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, IsPlay2D) == 0x00002C, "Member 'FKoratChainPlaySoundDataAssetRecord::IsPlay2D' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, CameraType) == 0x00002D, "Member 'FKoratChainPlaySoundDataAssetRecord::CameraType' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, SetPlayVoiceName) == 0x000030, "Member 'FKoratChainPlaySoundDataAssetRecord::SetPlayVoiceName' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, BGMDataList) == 0x000038, "Member 'FKoratChainPlaySoundDataAssetRecord::BGMDataList' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, PatternBGMDataName) == 0x000040, "Member 'FKoratChainPlaySoundDataAssetRecord::PatternBGMDataName' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, BGMType) == 0x000041, "Member 'FKoratChainPlaySoundDataAssetRecord::BGMType' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, FadeInTime) == 0x000044, "Member 'FKoratChainPlaySoundDataAssetRecord::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, FadeOutTime) == 0x000048, "Member 'FKoratChainPlaySoundDataAssetRecord::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKoratChainPlaySoundDataAssetRecord, IsCrossFade) == 0x00004C, "Member 'FKoratChainPlaySoundDataAssetRecord::IsCrossFade' has a wrong offset!");

// ScriptStruct SS.KoratCharacterRimLightData
// 0x0044 (0x0044 - 0x0000)
struct FKoratCharacterRimLightData final
{
public:
	bool                                          bUseChrColorMult;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ChrColorMult;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseChrColorAdd;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ChrColorAdd;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseChrRimlightColorMult;                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ChrRimlightColorMult;                              // 0x002C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseChrRimlightPower;                              // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChrRimlightPower;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterRimLightData) == 0x000004, "Wrong alignment on FKoratCharacterRimLightData");
static_assert(sizeof(FKoratCharacterRimLightData) == 0x000044, "Wrong size on FKoratCharacterRimLightData");
static_assert(offsetof(FKoratCharacterRimLightData, bUseChrColorMult) == 0x000000, "Member 'FKoratCharacterRimLightData::bUseChrColorMult' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, ChrColorMult) == 0x000004, "Member 'FKoratCharacterRimLightData::ChrColorMult' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, bUseChrColorAdd) == 0x000014, "Member 'FKoratCharacterRimLightData::bUseChrColorAdd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, ChrColorAdd) == 0x000018, "Member 'FKoratCharacterRimLightData::ChrColorAdd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, bUseChrRimlightColorMult) == 0x000028, "Member 'FKoratCharacterRimLightData::bUseChrRimlightColorMult' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, ChrRimlightColorMult) == 0x00002C, "Member 'FKoratCharacterRimLightData::ChrRimlightColorMult' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, bUseChrRimlightPower) == 0x00003C, "Member 'FKoratCharacterRimLightData::bUseChrRimlightPower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterRimLightData, ChrRimlightPower) == 0x000040, "Member 'FKoratCharacterRimLightData::ChrRimlightPower' has a wrong offset!");

// ScriptStruct SS.KoratInstanceParameterColor
// 0x0018 (0x0018 - 0x0000)
struct FKoratInstanceParameterColor final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParameterColor;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInstanceParameterColor) == 0x000004, "Wrong alignment on FKoratInstanceParameterColor");
static_assert(sizeof(FKoratInstanceParameterColor) == 0x000018, "Wrong size on FKoratInstanceParameterColor");
static_assert(offsetof(FKoratInstanceParameterColor, ParameterName) == 0x000000, "Member 'FKoratInstanceParameterColor::ParameterName' has a wrong offset!");
static_assert(offsetof(FKoratInstanceParameterColor, ParameterColor) == 0x000008, "Member 'FKoratInstanceParameterColor::ParameterColor' has a wrong offset!");

// ScriptStruct SS.KoratBuffData
// 0x0010 (0x0010 - 0x0000)
struct FKoratBuffData final
{
public:
	TArray<class UKoratBuffPhaseDataAsset*>       PhaseBuffList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffData) == 0x000008, "Wrong alignment on FKoratBuffData");
static_assert(sizeof(FKoratBuffData) == 0x000010, "Wrong size on FKoratBuffData");
static_assert(offsetof(FKoratBuffData, PhaseBuffList) == 0x000000, "Member 'FKoratBuffData::PhaseBuffList' has a wrong offset!");

// ScriptStruct SS.KoratBuffDataArray
// 0x0010 (0x0010 - 0x0000)
struct FKoratBuffDataArray final
{
public:
	TArray<struct FKoratBuffData>                 BuffList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffDataArray) == 0x000008, "Wrong alignment on FKoratBuffDataArray");
static_assert(sizeof(FKoratBuffDataArray) == 0x000010, "Wrong size on FKoratBuffDataArray");
static_assert(offsetof(FKoratBuffDataArray, BuffList) == 0x000000, "Member 'FKoratBuffDataArray::BuffList' has a wrong offset!");

// ScriptStruct SS.KoratRimLightFrequencyData
// 0x0010 (0x0010 - 0x0000)
struct FKoratRimLightFrequencyData final
{
public:
	bool                                          bUseFrequency;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Frequency;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWiggleFrequency;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WiggleFrequency;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRimLightFrequencyData) == 0x000004, "Wrong alignment on FKoratRimLightFrequencyData");
static_assert(sizeof(FKoratRimLightFrequencyData) == 0x000010, "Wrong size on FKoratRimLightFrequencyData");
static_assert(offsetof(FKoratRimLightFrequencyData, bUseFrequency) == 0x000000, "Member 'FKoratRimLightFrequencyData::bUseFrequency' has a wrong offset!");
static_assert(offsetof(FKoratRimLightFrequencyData, Frequency) == 0x000004, "Member 'FKoratRimLightFrequencyData::Frequency' has a wrong offset!");
static_assert(offsetof(FKoratRimLightFrequencyData, bUseWiggleFrequency) == 0x000008, "Member 'FKoratRimLightFrequencyData::bUseWiggleFrequency' has a wrong offset!");
static_assert(offsetof(FKoratRimLightFrequencyData, WiggleFrequency) == 0x00000C, "Member 'FKoratRimLightFrequencyData::WiggleFrequency' has a wrong offset!");

// ScriptStruct SS.SSEffectPedestalLevelSequencePlaySection
// 0x000C (0x000C - 0x0000)
struct FSSEffectPedestalLevelSequencePlaySection final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEffectPedestalLevelSequencePlaySection) == 0x000004, "Wrong alignment on FSSEffectPedestalLevelSequencePlaySection");
static_assert(sizeof(FSSEffectPedestalLevelSequencePlaySection) == 0x00000C, "Wrong size on FSSEffectPedestalLevelSequencePlaySection");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlaySection, Label) == 0x000000, "Member 'FSSEffectPedestalLevelSequencePlaySection::Label' has a wrong offset!");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlaySection, LoopCount) == 0x000008, "Member 'FSSEffectPedestalLevelSequencePlaySection::LoopCount' has a wrong offset!");

// ScriptStruct SS.SSEffectPedestalLevelSequencePlayOrder
// 0x0040 (0x0040 - 0x0000)
struct FSSEffectPedestalLevelSequencePlayOrder final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSEffectPedestalLevelSequencePlaySection> PlaySections;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEffectPedestalLevelSequencePlayOrder) == 0x000008, "Wrong alignment on FSSEffectPedestalLevelSequencePlayOrder");
static_assert(sizeof(FSSEffectPedestalLevelSequencePlayOrder) == 0x000040, "Wrong size on FSSEffectPedestalLevelSequencePlayOrder");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlayOrder, LevelSequence) == 0x000000, "Member 'FSSEffectPedestalLevelSequencePlayOrder::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlayOrder, PlaySections) == 0x000030, "Member 'FSSEffectPedestalLevelSequencePlayOrder::PlaySections' has a wrong offset!");

// ScriptStruct SS.KoratEffectAnn
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectAnn final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAnn) == 0x000008, "Wrong alignment on FKoratEffectAnn");
static_assert(sizeof(FKoratEffectAnn) == 0x000008, "Wrong size on FKoratEffectAnn");
static_assert(offsetof(FKoratEffectAnn, LevelSequence) == 0x000000, "Member 'FKoratEffectAnn::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratEffectScr
// 0x0018 (0x0018 - 0x0000)
struct FKoratEffectScr final
{
public:
	class ULevelSequence*                         LevelSequenceIn;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceLoop;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceOut;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectScr) == 0x000008, "Wrong alignment on FKoratEffectScr");
static_assert(sizeof(FKoratEffectScr) == 0x000018, "Wrong size on FKoratEffectScr");
static_assert(offsetof(FKoratEffectScr, LevelSequenceIn) == 0x000000, "Member 'FKoratEffectScr::LevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FKoratEffectScr, LevelSequenceLoop) == 0x000008, "Member 'FKoratEffectScr::LevelSequenceLoop' has a wrong offset!");
static_assert(offsetof(FKoratEffectScr, LevelSequenceOut) == 0x000010, "Member 'FKoratEffectScr::LevelSequenceOut' has a wrong offset!");

// ScriptStruct SS.SSMapInteractiveWindParams
// 0x0024 (0x0024 - 0x0000)
struct FSSMapInteractiveWindParams final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindRollIntensity;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindKoratSpeed;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrassWindStrength;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrassDirWindMultiplier;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindDirection;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMapInteractiveWindParams) == 0x000004, "Wrong alignment on FSSMapInteractiveWindParams");
static_assert(sizeof(FSSMapInteractiveWindParams) == 0x000024, "Wrong size on FSSMapInteractiveWindParams");
static_assert(offsetof(FSSMapInteractiveWindParams, bEnable) == 0x000000, "Member 'FSSMapInteractiveWindParams::bEnable' has a wrong offset!");
static_assert(offsetof(FSSMapInteractiveWindParams, WindRollIntensity) == 0x000004, "Member 'FSSMapInteractiveWindParams::WindRollIntensity' has a wrong offset!");
static_assert(offsetof(FSSMapInteractiveWindParams, WindKoratSpeed) == 0x000008, "Member 'FSSMapInteractiveWindParams::WindKoratSpeed' has a wrong offset!");
static_assert(offsetof(FSSMapInteractiveWindParams, GrassWindStrength) == 0x00000C, "Member 'FSSMapInteractiveWindParams::GrassWindStrength' has a wrong offset!");
static_assert(offsetof(FSSMapInteractiveWindParams, GrassDirWindMultiplier) == 0x000010, "Member 'FSSMapInteractiveWindParams::GrassDirWindMultiplier' has a wrong offset!");
static_assert(offsetof(FSSMapInteractiveWindParams, WindDirection) == 0x000014, "Member 'FSSMapInteractiveWindParams::WindDirection' has a wrong offset!");

// ScriptStruct SS.KoratEffectSta
// 0x0018 (0x0018 - 0x0000)
struct FKoratEffectSta final
{
public:
	class ULevelSequence*                         LevelSequenceIn;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceLoop;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceOut;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectSta) == 0x000008, "Wrong alignment on FKoratEffectSta");
static_assert(sizeof(FKoratEffectSta) == 0x000018, "Wrong size on FKoratEffectSta");
static_assert(offsetof(FKoratEffectSta, LevelSequenceIn) == 0x000000, "Member 'FKoratEffectSta::LevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FKoratEffectSta, LevelSequenceLoop) == 0x000008, "Member 'FKoratEffectSta::LevelSequenceLoop' has a wrong offset!");
static_assert(offsetof(FKoratEffectSta, LevelSequenceOut) == 0x000010, "Member 'FKoratEffectSta::LevelSequenceOut' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineLineTraceParam
// 0x0100 (0x0100 - 0x0000)
struct FKoratFreeTimelineLineTraceParam final
{
public:
	bool                                          bUseStartPosManual;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartPosition;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStartOffsetPosManual;                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartOffsetPosition;                               // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEndPostion;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndPosition;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CalcedEndPosition;                                 // 0x0068(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  RotatorLineTraceHit;                               // 0x0080(0x0020)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OverridePositionForSpaceAreaBySocketName;          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOffsetPositionForSpaceArea;                    // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetPositionForSpaceArea;                        // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionPresetName;                               // 0x00F0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineLineTraceParam) == 0x000010, "Wrong alignment on FKoratFreeTimelineLineTraceParam");
static_assert(sizeof(FKoratFreeTimelineLineTraceParam) == 0x000100, "Wrong size on FKoratFreeTimelineLineTraceParam");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, bUseStartPosManual) == 0x000000, "Member 'FKoratFreeTimelineLineTraceParam::bUseStartPosManual' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, StartPosition) == 0x000008, "Member 'FKoratFreeTimelineLineTraceParam::StartPosition' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, bUseStartOffsetPosManual) == 0x000020, "Member 'FKoratFreeTimelineLineTraceParam::bUseStartOffsetPosManual' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, StartOffsetPosition) == 0x000028, "Member 'FKoratFreeTimelineLineTraceParam::StartOffsetPosition' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, bUseEndPostion) == 0x000040, "Member 'FKoratFreeTimelineLineTraceParam::bUseEndPostion' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, EndPosition) == 0x000048, "Member 'FKoratFreeTimelineLineTraceParam::EndPosition' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, Length) == 0x000060, "Member 'FKoratFreeTimelineLineTraceParam::Length' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, CalcedEndPosition) == 0x000068, "Member 'FKoratFreeTimelineLineTraceParam::CalcedEndPosition' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, RotatorLineTraceHit) == 0x000080, "Member 'FKoratFreeTimelineLineTraceParam::RotatorLineTraceHit' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, OverridePositionForSpaceAreaBySocketName) == 0x0000C0, "Member 'FKoratFreeTimelineLineTraceParam::OverridePositionForSpaceAreaBySocketName' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, bUseOffsetPositionForSpaceArea) == 0x0000D0, "Member 'FKoratFreeTimelineLineTraceParam::bUseOffsetPositionForSpaceArea' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, OffsetPositionForSpaceArea) == 0x0000D8, "Member 'FKoratFreeTimelineLineTraceParam::OffsetPositionForSpaceArea' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineLineTraceParam, CollisionPresetName) == 0x0000F0, "Member 'FKoratFreeTimelineLineTraceParam::CollisionPresetName' has a wrong offset!");

// ScriptStruct SS.KoratEffectRat
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectRat final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectRat) == 0x000008, "Wrong alignment on FKoratEffectRat");
static_assert(sizeof(FKoratEffectRat) == 0x000008, "Wrong size on FKoratEffectRat");
static_assert(offsetof(FKoratEffectRat, LevelSequence) == 0x000000, "Member 'FKoratEffectRat::LevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneBranchRuntimeDescriptionCO
// 0x0020 (0x0020 - 0x0000)
struct FSSEventSceneBranchRuntimeDescriptionCO final
{
public:
	class FText                                   Feelings;                                          // 0x0000(0x0018)(Transient, NativeAccessSpecifierPublic)
	class USSEventSceneDecisionBranchVision*      VisionWidget;                                      // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneBranchRuntimeDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneBranchRuntimeDescriptionCO");
static_assert(sizeof(FSSEventSceneBranchRuntimeDescriptionCO) == 0x000020, "Wrong size on FSSEventSceneBranchRuntimeDescriptionCO");
static_assert(offsetof(FSSEventSceneBranchRuntimeDescriptionCO, Feelings) == 0x000000, "Member 'FSSEventSceneBranchRuntimeDescriptionCO::Feelings' has a wrong offset!");
static_assert(offsetof(FSSEventSceneBranchRuntimeDescriptionCO, VisionWidget) == 0x000018, "Member 'FSSEventSceneBranchRuntimeDescriptionCO::VisionWidget' has a wrong offset!");

// ScriptStruct SS.KoratEffectEnv
// 0x0018 (0x0018 - 0x0000)
struct FKoratEffectEnv final
{
public:
	class ULevelSequence*                         LevelSequenceIn;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceLoop;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequenceOut;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectEnv) == 0x000008, "Wrong alignment on FKoratEffectEnv");
static_assert(sizeof(FKoratEffectEnv) == 0x000018, "Wrong size on FKoratEffectEnv");
static_assert(offsetof(FKoratEffectEnv, LevelSequenceIn) == 0x000000, "Member 'FKoratEffectEnv::LevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FKoratEffectEnv, LevelSequenceLoop) == 0x000008, "Member 'FKoratEffectEnv::LevelSequenceLoop' has a wrong offset!");
static_assert(offsetof(FKoratEffectEnv, LevelSequenceOut) == 0x000010, "Member 'FKoratEffectEnv::LevelSequenceOut' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrk
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectAtbBrk final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbBrk) == 0x000008, "Wrong alignment on FKoratEffectAtbBrk");
static_assert(sizeof(FKoratEffectAtbBrk) == 0x000008, "Wrong size on FKoratEffectAtbBrk");
static_assert(offsetof(FKoratEffectAtbBrk, LevelSequence) == 0x000000, "Member 'FKoratEffectAtbBrk::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratMenuData
// 0x0000 (0x0008 - 0x0008)
struct FKoratMenuData final : public FTableRowBase
{
};
static_assert(alignof(FKoratMenuData) == 0x000008, "Wrong alignment on FKoratMenuData");
static_assert(sizeof(FKoratMenuData) == 0x000008, "Wrong size on FKoratMenuData");

// ScriptStruct SS.SSBattleDirectionSettingUserDataSaveData
// 0x0014 (0x0014 - 0x0000)
struct FSSBattleDirectionSettingUserDataSaveData final
{
public:
	struct FKoratMapDataList                      BattleStage;                                       // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BattleBGM;                                         // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratTimeLimitType                           Timelimit;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnhanceditems;                                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleDirectionSettingUserDataSaveData) == 0x000004, "Wrong alignment on FSSBattleDirectionSettingUserDataSaveData");
static_assert(sizeof(FSSBattleDirectionSettingUserDataSaveData) == 0x000014, "Wrong size on FSSBattleDirectionSettingUserDataSaveData");
static_assert(offsetof(FSSBattleDirectionSettingUserDataSaveData, BattleStage) == 0x000000, "Member 'FSSBattleDirectionSettingUserDataSaveData::BattleStage' has a wrong offset!");
static_assert(offsetof(FSSBattleDirectionSettingUserDataSaveData, BattleBGM) == 0x000008, "Member 'FSSBattleDirectionSettingUserDataSaveData::BattleBGM' has a wrong offset!");
static_assert(offsetof(FSSBattleDirectionSettingUserDataSaveData, Timelimit) == 0x000010, "Member 'FSSBattleDirectionSettingUserDataSaveData::Timelimit' has a wrong offset!");
static_assert(offsetof(FSSBattleDirectionSettingUserDataSaveData, bEnhanceditems) == 0x000011, "Member 'FSSBattleDirectionSettingUserDataSaveData::bEnhanceditems' has a wrong offset!");

// ScriptStruct SS.KoratSpaceAreaReplaceSetting
// 0x0050 (0x0050 - 0x0000)
struct FKoratSpaceAreaReplaceSetting final
{
public:
	TMap<struct FKoratSpaceAreaTypeDataList, struct FKoratInteractAtbTypeDataList> SettingMap;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpaceAreaReplaceSetting) == 0x000008, "Wrong alignment on FKoratSpaceAreaReplaceSetting");
static_assert(sizeof(FKoratSpaceAreaReplaceSetting) == 0x000050, "Wrong size on FKoratSpaceAreaReplaceSetting");
static_assert(offsetof(FKoratSpaceAreaReplaceSetting, SettingMap) == 0x000000, "Member 'FKoratSpaceAreaReplaceSetting::SettingMap' has a wrong offset!");

// ScriptStruct SS.KoratArmorData
// 0x0008 (0x0008 - 0x0000)
struct FKoratArmorData final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotThrowable;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreaseSmashLevelGauge;                          // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratArmorHitEffectType                      ArmorHitEffectType;                                // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseArmorBreakEffectSe;                           // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratArmorData) == 0x000004, "Wrong alignment on FKoratArmorData");
static_assert(sizeof(FKoratArmorData) == 0x000008, "Wrong size on FKoratArmorData");
static_assert(offsetof(FKoratArmorData, DamageRate) == 0x000000, "Member 'FKoratArmorData::DamageRate' has a wrong offset!");
static_assert(offsetof(FKoratArmorData, bNotThrowable) == 0x000004, "Member 'FKoratArmorData::bNotThrowable' has a wrong offset!");
static_assert(offsetof(FKoratArmorData, bIncreaseSmashLevelGauge) == 0x000005, "Member 'FKoratArmorData::bIncreaseSmashLevelGauge' has a wrong offset!");
static_assert(offsetof(FKoratArmorData, ArmorHitEffectType) == 0x000006, "Member 'FKoratArmorData::ArmorHitEffectType' has a wrong offset!");
static_assert(offsetof(FKoratArmorData, IsUseArmorBreakEffectSe) == 0x000007, "Member 'FKoratArmorData::IsUseArmorBreakEffectSe' has a wrong offset!");

// ScriptStruct SS.KoratArmorBreakLevelData
// 0x0020 (0x0020 - 0x0000)
struct FKoratArmorBreakLevelData final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BreakLevel;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BreakLevelForGiant;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratArmorBreakLevelData) == 0x000008, "Wrong alignment on FKoratArmorBreakLevelData");
static_assert(sizeof(FKoratArmorBreakLevelData) == 0x000020, "Wrong size on FKoratArmorBreakLevelData");
static_assert(offsetof(FKoratArmorBreakLevelData, SortId) == 0x000000, "Member 'FKoratArmorBreakLevelData::SortId' has a wrong offset!");
static_assert(offsetof(FKoratArmorBreakLevelData, BreakLevel) == 0x000008, "Member 'FKoratArmorBreakLevelData::BreakLevel' has a wrong offset!");
static_assert(offsetof(FKoratArmorBreakLevelData, BreakLevelForGiant) == 0x000018, "Member 'FKoratArmorBreakLevelData::BreakLevelForGiant' has a wrong offset!");

// ScriptStruct SS.KoratArmorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratArmorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratArmorDataList) == 0x000004, "Wrong alignment on FKoratArmorDataList");
static_assert(sizeof(FKoratArmorDataList) == 0x000008, "Wrong size on FKoratArmorDataList");
static_assert(offsetof(FKoratArmorDataList, Key) == 0x000000, "Member 'FKoratArmorDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratArmorLevelData
// 0x0010 (0x0010 - 0x0000)
struct FKoratArmorLevelData final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorDataList                    Armor;                                             // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitBackRate;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratArmorLevelData) == 0x000004, "Wrong alignment on FKoratArmorLevelData");
static_assert(sizeof(FKoratArmorLevelData) == 0x000010, "Wrong size on FKoratArmorLevelData");
static_assert(offsetof(FKoratArmorLevelData, Level) == 0x000000, "Member 'FKoratArmorLevelData::Level' has a wrong offset!");
static_assert(offsetof(FKoratArmorLevelData, Armor) == 0x000004, "Member 'FKoratArmorLevelData::Armor' has a wrong offset!");
static_assert(offsetof(FKoratArmorLevelData, HitBackRate) == 0x00000C, "Member 'FKoratArmorLevelData::HitBackRate' has a wrong offset!");

// ScriptStruct SS.KoratGrassGlobalParamsData
// 0x0048 (0x0048 - 0x0000)
struct FKoratGrassGlobalParamsData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindTextureRotation;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindStrength;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOpacity;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowSpeed;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSize;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerMoveAlpha;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeSize;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirWindMultiplier;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindDirection;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LandscapeZeroWorldCoords;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratGrassGlobalParamsData) == 0x000004, "Wrong alignment on FKoratGrassGlobalParamsData");
static_assert(sizeof(FKoratGrassGlobalParamsData) == 0x000048, "Wrong size on FKoratGrassGlobalParamsData");
static_assert(offsetof(FKoratGrassGlobalParamsData, bEnable) == 0x000000, "Member 'FKoratGrassGlobalParamsData::bEnable' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, WindTextureRotation) == 0x000004, "Member 'FKoratGrassGlobalParamsData::WindTextureRotation' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, WindStrength) == 0x000008, "Member 'FKoratGrassGlobalParamsData::WindStrength' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, CloudShadowOpacity) == 0x00000C, "Member 'FKoratGrassGlobalParamsData::CloudShadowOpacity' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, CloudShadowSpeed) == 0x000010, "Member 'FKoratGrassGlobalParamsData::CloudShadowSpeed' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, CloudSize) == 0x000014, "Member 'FKoratGrassGlobalParamsData::CloudSize' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, PlayerMoveAlpha) == 0x000018, "Member 'FKoratGrassGlobalParamsData::PlayerMoveAlpha' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, LandscapeSize) == 0x00001C, "Member 'FKoratGrassGlobalParamsData::LandscapeSize' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, WindSpeed) == 0x000020, "Member 'FKoratGrassGlobalParamsData::WindSpeed' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, DirWindMultiplier) == 0x000024, "Member 'FKoratGrassGlobalParamsData::DirWindMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, WindDirection) == 0x000028, "Member 'FKoratGrassGlobalParamsData::WindDirection' has a wrong offset!");
static_assert(offsetof(FKoratGrassGlobalParamsData, LandscapeZeroWorldCoords) == 0x000038, "Member 'FKoratGrassGlobalParamsData::LandscapeZeroWorldCoords' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataArmorLevelParameter
// 0x0010 (0x0010 - 0x0000)
struct FKoratCharacterDataArmorLevelParameter final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorDataList                    Armor;                                             // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitBackRate;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataArmorLevelParameter) == 0x000004, "Wrong alignment on FKoratCharacterDataArmorLevelParameter");
static_assert(sizeof(FKoratCharacterDataArmorLevelParameter) == 0x000010, "Wrong size on FKoratCharacterDataArmorLevelParameter");
static_assert(offsetof(FKoratCharacterDataArmorLevelParameter, Level) == 0x000000, "Member 'FKoratCharacterDataArmorLevelParameter::Level' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataArmorLevelParameter, Armor) == 0x000004, "Member 'FKoratCharacterDataArmorLevelParameter::Armor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataArmorLevelParameter, HitBackRate) == 0x00000C, "Member 'FKoratCharacterDataArmorLevelParameter::HitBackRate' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSequenceRuntimeDescriptionDE
// 0x0010 (0x0010 - 0x0000)
struct FSSEventSceneSequenceRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSequenceRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneSequenceRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneSequenceRuntimeDescriptionDE) == 0x000010, "Wrong size on FSSEventSceneSequenceRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneSequenceRuntimeDescriptionDE, LevelSequence) == 0x000008, "Member 'FSSEventSceneSequenceRuntimeDescriptionDE::LevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSituationRuntimeDescriptionDE
// 0x0028 (0x0028 - 0x0000)
struct FSSEventSceneSituationRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSEventSceneSequenceRuntimeDescriptionDE SituationLevelSequence;                            // 0x0008(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE PreviewLevelSequence;                              // 0x0018(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSituationRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneSituationRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneSituationRuntimeDescriptionDE) == 0x000028, "Wrong size on FSSEventSceneSituationRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneSituationRuntimeDescriptionDE, SituationLevelSequence) == 0x000008, "Member 'FSSEventSceneSituationRuntimeDescriptionDE::SituationLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSituationRuntimeDescriptionDE, PreviewLevelSequence) == 0x000018, "Member 'FSSEventSceneSituationRuntimeDescriptionDE::PreviewLevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratSequencePlayInfo
// 0x0020 (0x0020 - 0x0000)
struct FKoratSequencePlayInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextLabel;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectAfterglow;                                 // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequencePlayInfo) == 0x000004, "Wrong alignment on FKoratSequencePlayInfo");
static_assert(sizeof(FKoratSequencePlayInfo) == 0x000020, "Wrong size on FKoratSequencePlayInfo");
static_assert(offsetof(FKoratSequencePlayInfo, Label) == 0x000000, "Member 'FKoratSequencePlayInfo::Label' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, NextLabel) == 0x000008, "Member 'FKoratSequencePlayInfo::NextLabel' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, Rate) == 0x000010, "Member 'FKoratSequencePlayInfo::Rate' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, LoopCount) == 0x000014, "Member 'FKoratSequencePlayInfo::LoopCount' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, Duration) == 0x000018, "Member 'FKoratSequencePlayInfo::Duration' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, bPauseAtEnd) == 0x00001C, "Member 'FKoratSequencePlayInfo::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayInfo, bConnectAfterglow) == 0x00001D, "Member 'FKoratSequencePlayInfo::bConnectAfterglow' has a wrong offset!");

// ScriptStruct SS.KoratCharacterActionSpawnSequenceParameter
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterActionSpawnSequenceParameter final
{
public:
	struct FKoratActionDataList                   ActionDataList;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         SequencePlayInfo;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterActionSpawnSequenceParameter) == 0x000008, "Wrong alignment on FKoratCharacterActionSpawnSequenceParameter");
static_assert(sizeof(FKoratCharacterActionSpawnSequenceParameter) == 0x000020, "Wrong size on FKoratCharacterActionSpawnSequenceParameter");
static_assert(offsetof(FKoratCharacterActionSpawnSequenceParameter, ActionDataList) == 0x000000, "Member 'FKoratCharacterActionSpawnSequenceParameter::ActionDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterActionSpawnSequenceParameter, LevelSequence) == 0x000008, "Member 'FKoratCharacterActionSpawnSequenceParameter::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratCharacterActionSpawnSequenceParameter, SequencePlayInfo) == 0x000010, "Member 'FKoratCharacterActionSpawnSequenceParameter::SequencePlayInfo' has a wrong offset!");

// ScriptStruct SS.SSEventSceneGuideWidgetsCO
// 0x0008 (0x0028 - 0x0020)
struct FSSEventSceneGuideWidgetsCO final : public FSSEventSceneGuideWidgets
{
public:
	class USSEventSceneCameraSwitch*              IconWidget;                                        // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSSEventSceneGuideWidgetsCO) == 0x000008, "Wrong alignment on FSSEventSceneGuideWidgetsCO");
static_assert(sizeof(FSSEventSceneGuideWidgetsCO) == 0x000028, "Wrong size on FSSEventSceneGuideWidgetsCO");
static_assert(offsetof(FSSEventSceneGuideWidgetsCO, IconWidget) == 0x000020, "Member 'FSSEventSceneGuideWidgetsCO::IconWidget' has a wrong offset!");

// ScriptStruct SS.KoratActionTiltParameter
// 0x0010 (0x0010 - 0x0000)
struct FKoratActionTiltParameter final
{
public:
	EKoratActionTiltTimingType                    TiltTimingType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratActionTiltParameter) == 0x000004, "Wrong alignment on FKoratActionTiltParameter");
static_assert(sizeof(FKoratActionTiltParameter) == 0x000010, "Wrong size on FKoratActionTiltParameter");
static_assert(offsetof(FKoratActionTiltParameter, TiltTimingType) == 0x000000, "Member 'FKoratActionTiltParameter::TiltTimingType' has a wrong offset!");
static_assert(offsetof(FKoratActionTiltParameter, InterpSpeed) == 0x000004, "Member 'FKoratActionTiltParameter::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FKoratActionTiltParameter, MinAngle) == 0x000008, "Member 'FKoratActionTiltParameter::MinAngle' has a wrong offset!");
static_assert(offsetof(FKoratActionTiltParameter, MaxAngle) == 0x00000C, "Member 'FKoratActionTiltParameter::MaxAngle' has a wrong offset!");

// ScriptStruct SS.KoratDramaticEditWholeSaveData
// 0x0010 (0x0010 - 0x0000)
struct FKoratDramaticEditWholeSaveData final
{
public:
	int32                                         CreateCount;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostCount;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDramaticEditTutorialMode                EditTutorialState;                                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticEditWholeSaveData) == 0x000004, "Wrong alignment on FKoratDramaticEditWholeSaveData");
static_assert(sizeof(FKoratDramaticEditWholeSaveData) == 0x000010, "Wrong size on FKoratDramaticEditWholeSaveData");
static_assert(offsetof(FKoratDramaticEditWholeSaveData, CreateCount) == 0x000000, "Member 'FKoratDramaticEditWholeSaveData::CreateCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditWholeSaveData, PostCount) == 0x000004, "Member 'FKoratDramaticEditWholeSaveData::PostCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditWholeSaveData, PlayCount) == 0x000008, "Member 'FKoratDramaticEditWholeSaveData::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditWholeSaveData, EditTutorialState) == 0x00000C, "Member 'FKoratDramaticEditWholeSaveData::EditTutorialState' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineAtbSpaceParam
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratFreeTimelineAtbSpaceParam final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformActor;                                    // 0x0020(0x0060)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JudgedWorldPosition;                               // 0x0080(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineAtbSpaceParam) == 0x000010, "Wrong alignment on FKoratFreeTimelineAtbSpaceParam");
static_assert(sizeof(FKoratFreeTimelineAtbSpaceParam) == 0x0000A0, "Wrong size on FKoratFreeTimelineAtbSpaceParam");
static_assert(offsetof(FKoratFreeTimelineAtbSpaceParam, Position) == 0x000000, "Member 'FKoratFreeTimelineAtbSpaceParam::Position' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineAtbSpaceParam, TransformActor) == 0x000020, "Member 'FKoratFreeTimelineAtbSpaceParam::TransformActor' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineAtbSpaceParam, JudgedWorldPosition) == 0x000080, "Member 'FKoratFreeTimelineAtbSpaceParam::JudgedWorldPosition' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineAtbColliderParam
// 0x00B0 (0x00B0 - 0x0000)
struct FKoratFreeTimelineAtbColliderParam final
{
public:
	class UShapeComponent*                        Collider;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SelectCollider;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionPresetName;                               // 0x0038(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x70];                                      // 0x0040(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineAtbColliderParam) == 0x000008, "Wrong alignment on FKoratFreeTimelineAtbColliderParam");
static_assert(sizeof(FKoratFreeTimelineAtbColliderParam) == 0x0000B0, "Wrong size on FKoratFreeTimelineAtbColliderParam");
static_assert(offsetof(FKoratFreeTimelineAtbColliderParam, Collider) == 0x000000, "Member 'FKoratFreeTimelineAtbColliderParam::Collider' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineAtbColliderParam, SelectCollider) == 0x000008, "Member 'FKoratFreeTimelineAtbColliderParam::SelectCollider' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineAtbColliderParam, CollisionPresetName) == 0x000038, "Member 'FKoratFreeTimelineAtbColliderParam::CollisionPresetName' has a wrong offset!");

// ScriptStruct SS.KoratInteractAttributeData
// 0x0018 (0x0018 - 0x0000)
struct FKoratInteractAttributeData final
{
public:
	struct FKoratInteractAtbTypeDataList          AttributeType;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratSpaceAreaTypeDataList            SpaceAreaType;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  HitActor;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractAttributeData) == 0x000004, "Wrong alignment on FKoratInteractAttributeData");
static_assert(sizeof(FKoratInteractAttributeData) == 0x000018, "Wrong size on FKoratInteractAttributeData");
static_assert(offsetof(FKoratInteractAttributeData, AttributeType) == 0x000000, "Member 'FKoratInteractAttributeData::AttributeType' has a wrong offset!");
static_assert(offsetof(FKoratInteractAttributeData, SpaceAreaType) == 0x000008, "Member 'FKoratInteractAttributeData::SpaceAreaType' has a wrong offset!");
static_assert(offsetof(FKoratInteractAttributeData, HitActor) == 0x000010, "Member 'FKoratInteractAttributeData::HitActor' has a wrong offset!");

// ScriptStruct SS.FreeTimelineActorParamater
// 0x0480 (0x0480 - 0x0000)
struct FFreeTimelineActorParamater final
{
public:
	class ASSCharacter*                           ActionOwnerActor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnFreeTimeActor;                                // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratFreeTimelineLineTraceParam       LineTraceParams;                                   // 0x0040(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratFreeTimelineAtbSpaceParam        SpaceParams;                                       // 0x0140(0x00A0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratFreeTimelineAtbColliderParam     ColliderParams;                                    // 0x01E0(0x00B0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EKoratFreeTimelineActorRequest                RequestPlayerState;                                // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStartTransform;                             // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0xE];                                      // 0x0292(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x02A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReferenceActor;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionActionDataKey;                               // 0x0308(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterEffectColorSetData      OptionCharEffectColorDataSet;                      // 0x0310(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectColorDataDetail            CharacterEffectMutipleColorDataSet;                // 0x0318(0x0148)(Transient, NativeAccessSpecifierPublic)
	struct FKoratInteractAttributeData            EffectInteractData;                                // 0x0460(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFreeTimelineActorParamater) == 0x000010, "Wrong alignment on FFreeTimelineActorParamater");
static_assert(sizeof(FFreeTimelineActorParamater) == 0x000480, "Wrong size on FFreeTimelineActorParamater");
static_assert(offsetof(FFreeTimelineActorParamater, ActionOwnerActor) == 0x000000, "Member 'FFreeTimelineActorParamater::ActionOwnerActor' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, OwnerActor) == 0x000008, "Member 'FFreeTimelineActorParamater::OwnerActor' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, SpawnFreeTimeActor) == 0x000010, "Member 'FFreeTimelineActorParamater::SpawnFreeTimeActor' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, LineTraceParams) == 0x000040, "Member 'FFreeTimelineActorParamater::LineTraceParams' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, SpaceParams) == 0x000140, "Member 'FFreeTimelineActorParamater::SpaceParams' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, ColliderParams) == 0x0001E0, "Member 'FFreeTimelineActorParamater::ColliderParams' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, RequestPlayerState) == 0x000290, "Member 'FFreeTimelineActorParamater::RequestPlayerState' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, bEnableStartTransform) == 0x000291, "Member 'FFreeTimelineActorParamater::bEnableStartTransform' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, StartTransform) == 0x0002A0, "Member 'FFreeTimelineActorParamater::StartTransform' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, ReferenceActor) == 0x000300, "Member 'FFreeTimelineActorParamater::ReferenceActor' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, OptionActionDataKey) == 0x000308, "Member 'FFreeTimelineActorParamater::OptionActionDataKey' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, OptionCharEffectColorDataSet) == 0x000310, "Member 'FFreeTimelineActorParamater::OptionCharEffectColorDataSet' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, CharacterEffectMutipleColorDataSet) == 0x000318, "Member 'FFreeTimelineActorParamater::CharacterEffectMutipleColorDataSet' has a wrong offset!");
static_assert(offsetof(FFreeTimelineActorParamater, EffectInteractData) == 0x000460, "Member 'FFreeTimelineActorParamater::EffectInteractData' has a wrong offset!");

// ScriptStruct SS.SSEffectSplineMeshes
// 0x0010 (0x0010 - 0x0000)
struct FSSEffectSplineMeshes final
{
public:
	TArray<class USplineMeshComponent*>           Meshes;                                            // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEffectSplineMeshes) == 0x000008, "Wrong alignment on FSSEffectSplineMeshes");
static_assert(sizeof(FSSEffectSplineMeshes) == 0x000010, "Wrong size on FSSEffectSplineMeshes");
static_assert(offsetof(FSSEffectSplineMeshes, Meshes) == 0x000000, "Member 'FSSEffectSplineMeshes::Meshes' has a wrong offset!");

// ScriptStruct SS.SSEffectParticleComponents
// 0x0030 (0x0030 - 0x0000)
struct FSSEffectParticleComponents final
{
public:
	TArray<class UParticleSystemComponent*>       EffComponents;                                     // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<float>                                 SplineDists;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SplineSpawnDists;                                  // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEffectParticleComponents) == 0x000008, "Wrong alignment on FSSEffectParticleComponents");
static_assert(sizeof(FSSEffectParticleComponents) == 0x000030, "Wrong size on FSSEffectParticleComponents");
static_assert(offsetof(FSSEffectParticleComponents, EffComponents) == 0x000000, "Member 'FSSEffectParticleComponents::EffComponents' has a wrong offset!");
static_assert(offsetof(FSSEffectParticleComponents, SplineDists) == 0x000010, "Member 'FSSEffectParticleComponents::SplineDists' has a wrong offset!");
static_assert(offsetof(FSSEffectParticleComponents, SplineSpawnDists) == 0x000020, "Member 'FSSEffectParticleComponents::SplineSpawnDists' has a wrong offset!");

// ScriptStruct SS.KoratEffectLimitsDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FKoratEffectLimitsDataAssetRecord final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectLimitsDataAssetRecord) == 0x000004, "Wrong alignment on FKoratEffectLimitsDataAssetRecord");
static_assert(sizeof(FKoratEffectLimitsDataAssetRecord) == 0x000004, "Wrong size on FKoratEffectLimitsDataAssetRecord");
static_assert(offsetof(FKoratEffectLimitsDataAssetRecord, Count) == 0x000000, "Member 'FKoratEffectLimitsDataAssetRecord::Count' has a wrong offset!");

// ScriptStruct SS.SSEffectSplineMeshInfo
// 0x0020 (0x0020 - 0x0000)
struct FSSEffectSplineMeshInfo final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TuningParameter;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectSplineMeshInfo) == 0x000008, "Wrong alignment on FSSEffectSplineMeshInfo");
static_assert(sizeof(FSSEffectSplineMeshInfo) == 0x000020, "Wrong size on FSSEffectSplineMeshInfo");
static_assert(offsetof(FSSEffectSplineMeshInfo, Mesh) == 0x000000, "Member 'FSSEffectSplineMeshInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FSSEffectSplineMeshInfo, Material) == 0x000008, "Member 'FSSEffectSplineMeshInfo::Material' has a wrong offset!");
static_assert(offsetof(FSSEffectSplineMeshInfo, DynamicMaterial) == 0x000010, "Member 'FSSEffectSplineMeshInfo::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSSEffectSplineMeshInfo, TuningParameter) == 0x000018, "Member 'FSSEffectSplineMeshInfo::TuningParameter' has a wrong offset!");

// ScriptStruct SS.SSBulletSplineMeshInfo
// 0x0030 (0x0030 - 0x0000)
struct FSSBulletSplineMeshInfo final
{
public:
	class UStaticMesh*                            TopMesh;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LoopMesh;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            BottomMesh;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LoopOnlyMesh;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TuningParameter;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletSplineMeshInfo) == 0x000008, "Wrong alignment on FSSBulletSplineMeshInfo");
static_assert(sizeof(FSSBulletSplineMeshInfo) == 0x000030, "Wrong size on FSSBulletSplineMeshInfo");
static_assert(offsetof(FSSBulletSplineMeshInfo, TopMesh) == 0x000000, "Member 'FSSBulletSplineMeshInfo::TopMesh' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, LoopMesh) == 0x000008, "Member 'FSSBulletSplineMeshInfo::LoopMesh' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, BottomMesh) == 0x000010, "Member 'FSSBulletSplineMeshInfo::BottomMesh' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, LoopOnlyMesh) == 0x000018, "Member 'FSSBulletSplineMeshInfo::LoopOnlyMesh' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, Material) == 0x000020, "Member 'FSSBulletSplineMeshInfo::Material' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, Scale) == 0x000028, "Member 'FSSBulletSplineMeshInfo::Scale' has a wrong offset!");
static_assert(offsetof(FSSBulletSplineMeshInfo, TuningParameter) == 0x00002C, "Member 'FSSBulletSplineMeshInfo::TuningParameter' has a wrong offset!");

// ScriptStruct SS.SSEffectLoopEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FSSEffectLoopEffectInfo final
{
public:
	class UParticleSystem*                        Template;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnLinkScaleUpdate;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttributeCheck;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectLoopEffectInfo) == 0x000008, "Wrong alignment on FSSEffectLoopEffectInfo");
static_assert(sizeof(FSSEffectLoopEffectInfo) == 0x000018, "Wrong size on FSSEffectLoopEffectInfo");
static_assert(offsetof(FSSEffectLoopEffectInfo, Template) == 0x000000, "Member 'FSSEffectLoopEffectInfo::Template' has a wrong offset!");
static_assert(offsetof(FSSEffectLoopEffectInfo, Distance) == 0x000008, "Member 'FSSEffectLoopEffectInfo::Distance' has a wrong offset!");
static_assert(offsetof(FSSEffectLoopEffectInfo, Scale) == 0x00000C, "Member 'FSSEffectLoopEffectInfo::Scale' has a wrong offset!");
static_assert(offsetof(FSSEffectLoopEffectInfo, bUnLinkScaleUpdate) == 0x000010, "Member 'FSSEffectLoopEffectInfo::bUnLinkScaleUpdate' has a wrong offset!");
static_assert(offsetof(FSSEffectLoopEffectInfo, bAttributeCheck) == 0x000011, "Member 'FSSEffectLoopEffectInfo::bAttributeCheck' has a wrong offset!");

// ScriptStruct SS.KoratCostumeModel
// 0x0010 (0x0010 - 0x0000)
struct FKoratCostumeModel final
{
public:
	class FName                                   CostumeModelID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeDamageLv;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeScratchLv;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCostumeModel) == 0x000004, "Wrong alignment on FKoratCostumeModel");
static_assert(sizeof(FKoratCostumeModel) == 0x000010, "Wrong size on FKoratCostumeModel");
static_assert(offsetof(FKoratCostumeModel, CostumeModelID) == 0x000000, "Member 'FKoratCostumeModel::CostumeModelID' has a wrong offset!");
static_assert(offsetof(FKoratCostumeModel, CostumeDamageLv) == 0x000008, "Member 'FKoratCostumeModel::CostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FKoratCostumeModel, CostumeScratchLv) == 0x00000C, "Member 'FKoratCostumeModel::CostumeScratchLv' has a wrong offset!");

// ScriptStruct SS.KoratIconTitleDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratIconTitleDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratIconTitleDataList) == 0x000004, "Wrong alignment on FKoratIconTitleDataList");
static_assert(sizeof(FKoratIconTitleDataList) == 0x000008, "Wrong size on FKoratIconTitleDataList");
static_assert(offsetof(FKoratIconTitleDataList, Key) == 0x000000, "Member 'FKoratIconTitleDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticThumbnailText
// 0x001C (0x001C - 0x0000)
struct FKoratDramaticThumbnailText final
{
public:
	struct FKoratBugEatingString                  ThumbnailText;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 ThumbnailColor;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticThumbnailText) == 0x000004, "Wrong alignment on FKoratDramaticThumbnailText");
static_assert(sizeof(FKoratDramaticThumbnailText) == 0x00001C, "Wrong size on FKoratDramaticThumbnailText");
static_assert(offsetof(FKoratDramaticThumbnailText, ThumbnailText) == 0x000000, "Member 'FKoratDramaticThumbnailText::ThumbnailText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnailText, ThumbnailColor) == 0x000018, "Member 'FKoratDramaticThumbnailText::ThumbnailColor' has a wrong offset!");

// ScriptStruct SS.KoratDramaticThumbnail
// 0x00C0 (0x00C0 - 0x0000)
struct FKoratDramaticThumbnail final
{
public:
	struct FKoratDRMEditPictureDataList           NonActiveThumbnail;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NonActiveThumbnailDynamicImagesCutId;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticThumbnailText            ThumbnailText1;                                    // 0x0010(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticThumbnailText            ThumbnailText2;                                    // 0x002C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ThumbanilSwitcherIdx;                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratDRMEditPictureDataList>   SlideshowImages;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      SlideshowDynamicImagesCutId;                       // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FKoratDRMEditWordTextDataList>  TagTexts;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticThumbnail) == 0x000008, "Wrong alignment on FKoratDramaticThumbnail");
static_assert(sizeof(FKoratDramaticThumbnail) == 0x0000C0, "Wrong size on FKoratDramaticThumbnail");
static_assert(offsetof(FKoratDramaticThumbnail, NonActiveThumbnail) == 0x000000, "Member 'FKoratDramaticThumbnail::NonActiveThumbnail' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, NonActiveThumbnailDynamicImagesCutId) == 0x000008, "Member 'FKoratDramaticThumbnail::NonActiveThumbnailDynamicImagesCutId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, ThumbnailText1) == 0x000010, "Member 'FKoratDramaticThumbnail::ThumbnailText1' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, ThumbnailText2) == 0x00002C, "Member 'FKoratDramaticThumbnail::ThumbnailText2' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, ThumbanilSwitcherIdx) == 0x000048, "Member 'FKoratDramaticThumbnail::ThumbanilSwitcherIdx' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, SlideshowImages) == 0x000050, "Member 'FKoratDramaticThumbnail::SlideshowImages' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, SlideshowDynamicImagesCutId) == 0x000060, "Member 'FKoratDramaticThumbnail::SlideshowDynamicImagesCutId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticThumbnail, TagTexts) == 0x0000B0, "Member 'FKoratDramaticThumbnail::TagTexts' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleListSaveDataRecord
// 0x00E8 (0x00E8 - 0x0000)
struct FKoratDramaticBattleListSaveDataRecord final
{
public:
	struct FKoratDRMEditBaseTextDataList          OriginalText;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditWordTextDataList          ReplaceWord;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticThumbnail                DramaticBattleThumbnail;                           // 0x0010(0x00C0)(NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratIconTitleDataList                IconTitleDataList;                                 // 0x00D4(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGood;                                             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDlc;                                              // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEvent;                                            // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoost;                                            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleListSaveDataRecord) == 0x000008, "Wrong alignment on FKoratDramaticBattleListSaveDataRecord");
static_assert(sizeof(FKoratDramaticBattleListSaveDataRecord) == 0x0000E8, "Wrong size on FKoratDramaticBattleListSaveDataRecord");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, OriginalText) == 0x000000, "Member 'FKoratDramaticBattleListSaveDataRecord::OriginalText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, ReplaceWord) == 0x000008, "Member 'FKoratDramaticBattleListSaveDataRecord::ReplaceWord' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, DramaticBattleThumbnail) == 0x000010, "Member 'FKoratDramaticBattleListSaveDataRecord::DramaticBattleThumbnail' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, PlayCount) == 0x0000D0, "Member 'FKoratDramaticBattleListSaveDataRecord::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, IconTitleDataList) == 0x0000D4, "Member 'FKoratDramaticBattleListSaveDataRecord::IconTitleDataList' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, bGood) == 0x0000DC, "Member 'FKoratDramaticBattleListSaveDataRecord::bGood' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, bFavorite) == 0x0000DD, "Member 'FKoratDramaticBattleListSaveDataRecord::bFavorite' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, bDlc) == 0x0000DE, "Member 'FKoratDramaticBattleListSaveDataRecord::bDlc' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, bEvent) == 0x0000DF, "Member 'FKoratDramaticBattleListSaveDataRecord::bEvent' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleListSaveDataRecord, bBoost) == 0x0000E0, "Member 'FKoratDramaticBattleListSaveDataRecord::bBoost' has a wrong offset!");

// ScriptStruct SS.KoratEffectRatDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectRatDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectRatDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectRatDataAssetRecord");
static_assert(sizeof(FKoratEffectRatDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectRatDataAssetRecord");
static_assert(offsetof(FKoratEffectRatDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectRatDataAssetRecord::LevelSequence' has a wrong offset!");

// ScriptStruct SS.SSCharacterSearchReduceParameter
// 0x0010 (0x0010 - 0x0000)
struct FSSCharacterSearchReduceParameter final
{
public:
	class ASSCharacter*                           TargetCharacter;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearch;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceZSearchEffectTime;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSearchReduceParameter) == 0x000008, "Wrong alignment on FSSCharacterSearchReduceParameter");
static_assert(sizeof(FSSCharacterSearchReduceParameter) == 0x000010, "Wrong size on FSSCharacterSearchReduceParameter");
static_assert(offsetof(FSSCharacterSearchReduceParameter, TargetCharacter) == 0x000000, "Member 'FSSCharacterSearchReduceParameter::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchReduceParameter, bReduceZSearch) == 0x000008, "Member 'FSSCharacterSearchReduceParameter::bReduceZSearch' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchReduceParameter, ReduceZSearchEffectTime) == 0x00000C, "Member 'FSSCharacterSearchReduceParameter::ReduceZSearchEffectTime' has a wrong offset!");

// ScriptStruct SS.SSCharacterSearchHandOverParameter
// 0x0018 (0x0018 - 0x0000)
struct FSSCharacterSearchHandOverParameter final
{
public:
	EKoratBattleSearchStatus                      Status;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeepAutoSearchDistanceSec;                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchKeepSec;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetKeepViewSec;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearch;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceZSearchEffectTime;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSearchHandOverParameter) == 0x000004, "Wrong alignment on FSSCharacterSearchHandOverParameter");
static_assert(sizeof(FSSCharacterSearchHandOverParameter) == 0x000018, "Wrong size on FSSCharacterSearchHandOverParameter");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, Status) == 0x000000, "Member 'FSSCharacterSearchHandOverParameter::Status' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, KeepAutoSearchDistanceSec) == 0x000004, "Member 'FSSCharacterSearchHandOverParameter::KeepAutoSearchDistanceSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, AuraSearchKeepSec) == 0x000008, "Member 'FSSCharacterSearchHandOverParameter::AuraSearchKeepSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, TargetKeepViewSec) == 0x00000C, "Member 'FSSCharacterSearchHandOverParameter::TargetKeepViewSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, bReduceZSearch) == 0x000010, "Member 'FSSCharacterSearchHandOverParameter::bReduceZSearch' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchHandOverParameter, ReduceZSearchEffectTime) == 0x000014, "Member 'FSSCharacterSearchHandOverParameter::ReduceZSearchEffectTime' has a wrong offset!");

// ScriptStruct SS.SSWarpFixSizeCylinderRegion
// 0x0050 (0x0050 - 0x0000)
struct FSSWarpFixSizeCylinderRegion final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapAreaSizeType                              AreaSize;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpFixSizeCylinderRegion) == 0x000010, "Wrong alignment on FSSWarpFixSizeCylinderRegion");
static_assert(sizeof(FSSWarpFixSizeCylinderRegion) == 0x000050, "Wrong size on FSSWarpFixSizeCylinderRegion");
static_assert(offsetof(FSSWarpFixSizeCylinderRegion, Translation) == 0x000000, "Member 'FSSWarpFixSizeCylinderRegion::Translation' has a wrong offset!");
static_assert(offsetof(FSSWarpFixSizeCylinderRegion, Rotation) == 0x000020, "Member 'FSSWarpFixSizeCylinderRegion::Rotation' has a wrong offset!");
static_assert(offsetof(FSSWarpFixSizeCylinderRegion, AreaSize) == 0x000040, "Member 'FSSWarpFixSizeCylinderRegion::AreaSize' has a wrong offset!");

// ScriptStruct SS.SSWarpDirectablePoint
// 0x0070 (0x0070 - 0x0000)
struct FSSWarpDirectablePoint final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpFixSizeCylinderRegion           Region;                                            // 0x0010(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsUnderWater;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEffective;                                       // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MostGroundHeight;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeedRecoveryWarp;                                // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpDirectablePoint) == 0x000010, "Wrong alignment on FSSWarpDirectablePoint");
static_assert(sizeof(FSSWarpDirectablePoint) == 0x000070, "Wrong size on FSSWarpDirectablePoint");
static_assert(offsetof(FSSWarpDirectablePoint, ID) == 0x000000, "Member 'FSSWarpDirectablePoint::ID' has a wrong offset!");
static_assert(offsetof(FSSWarpDirectablePoint, Region) == 0x000010, "Member 'FSSWarpDirectablePoint::Region' has a wrong offset!");
static_assert(offsetof(FSSWarpDirectablePoint, bIsUnderWater) == 0x000060, "Member 'FSSWarpDirectablePoint::bIsUnderWater' has a wrong offset!");
static_assert(offsetof(FSSWarpDirectablePoint, IsEffective) == 0x000061, "Member 'FSSWarpDirectablePoint::IsEffective' has a wrong offset!");
static_assert(offsetof(FSSWarpDirectablePoint, MostGroundHeight) == 0x000064, "Member 'FSSWarpDirectablePoint::MostGroundHeight' has a wrong offset!");
static_assert(offsetof(FSSWarpDirectablePoint, IsNeedRecoveryWarp) == 0x000068, "Member 'FSSWarpDirectablePoint::IsNeedRecoveryWarp' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineHitInformation
// 0x0140 (0x0140 - 0x0000)
struct FKoratFreeTimelineHitInformation final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EPhysicalSurface                              SurfaceType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  HitAxisRotate;                                     // 0x0010(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0030(0x00E8)(BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FKoratSpaceAreaTypeDataList            SpaceAreaType;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AKoratSpaceArea>         SpaceAreaActor;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  HitActor;                                          // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineHitInformation) == 0x000010, "Wrong alignment on FKoratFreeTimelineHitInformation");
static_assert(sizeof(FKoratFreeTimelineHitInformation) == 0x000140, "Wrong size on FKoratFreeTimelineHitInformation");
static_assert(offsetof(FKoratFreeTimelineHitInformation, SurfaceType) == 0x000004, "Member 'FKoratFreeTimelineHitInformation::SurfaceType' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineHitInformation, HitAxisRotate) == 0x000010, "Member 'FKoratFreeTimelineHitInformation::HitAxisRotate' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineHitInformation, HitResult) == 0x000030, "Member 'FKoratFreeTimelineHitInformation::HitResult' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineHitInformation, SpaceAreaType) == 0x000118, "Member 'FKoratFreeTimelineHitInformation::SpaceAreaType' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineHitInformation, SpaceAreaActor) == 0x000120, "Member 'FKoratFreeTimelineHitInformation::SpaceAreaActor' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineHitInformation, HitActor) == 0x000128, "Member 'FKoratFreeTimelineHitInformation::HitActor' has a wrong offset!");

// ScriptStruct SS.SSCharacterSearchScaleInActionParameter
// 0x0010 (0x0010 - 0x0000)
struct FSSCharacterSearchScaleInActionParameter final
{
public:
	struct FKoratActionDataList                   ActionDataList;                                    // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchScaleOwn;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchScaleTarget;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSearchScaleInActionParameter) == 0x000004, "Wrong alignment on FSSCharacterSearchScaleInActionParameter");
static_assert(sizeof(FSSCharacterSearchScaleInActionParameter) == 0x000010, "Wrong size on FSSCharacterSearchScaleInActionParameter");
static_assert(offsetof(FSSCharacterSearchScaleInActionParameter, ActionDataList) == 0x000000, "Member 'FSSCharacterSearchScaleInActionParameter::ActionDataList' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchScaleInActionParameter, AuraSearchScaleOwn) == 0x000008, "Member 'FSSCharacterSearchScaleInActionParameter::AuraSearchScaleOwn' has a wrong offset!");
static_assert(offsetof(FSSCharacterSearchScaleInActionParameter, AuraSearchScaleTarget) == 0x00000C, "Member 'FSSCharacterSearchScaleInActionParameter::AuraSearchScaleTarget' has a wrong offset!");

// ScriptStruct SS.KoratEventSceneLocatorRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratEventSceneLocatorRecord final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEventSceneLocatorRecord) == 0x000008, "Wrong alignment on FKoratEventSceneLocatorRecord");
static_assert(sizeof(FKoratEventSceneLocatorRecord) == 0x000010, "Wrong size on FKoratEventSceneLocatorRecord");
static_assert(offsetof(FKoratEventSceneLocatorRecord, Transforms) == 0x000000, "Member 'FKoratEventSceneLocatorRecord::Transforms' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingBuffDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratBattleDirectingBuffDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratBuffPhaseDataAsset*               BuffData;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleDirectingBuffDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBattleDirectingBuffDataAssetRecord");
static_assert(sizeof(FKoratBattleDirectingBuffDataAssetRecord) == 0x000028, "Wrong size on FKoratBattleDirectingBuffDataAssetRecord");
static_assert(offsetof(FKoratBattleDirectingBuffDataAssetRecord, SortId) == 0x000000, "Member 'FKoratBattleDirectingBuffDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingBuffDataAssetRecord, DisplayName) == 0x000008, "Member 'FKoratBattleDirectingBuffDataAssetRecord::DisplayName' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingBuffDataAssetRecord, BuffData) == 0x000020, "Member 'FKoratBattleDirectingBuffDataAssetRecord::BuffData' has a wrong offset!");

// ScriptStruct SS.KoratBattlePlayMap
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattlePlayMap final
{
public:
	struct FKoratMapDataList                      Map;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattlePlayMap) == 0x000004, "Wrong alignment on FKoratBattlePlayMap");
static_assert(sizeof(FKoratBattlePlayMap) == 0x000008, "Wrong size on FKoratBattlePlayMap");
static_assert(offsetof(FKoratBattlePlayMap, Map) == 0x000000, "Member 'FKoratBattlePlayMap::Map' has a wrong offset!");

// ScriptStruct SS.SSParticleBranchList
// 0x0018 (0x0018 - 0x0000)
struct FSSParticleBranchList final
{
public:
	class FName                                   Prefix;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UParticleSystem>> Particles;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSParticleBranchList) == 0x000008, "Wrong alignment on FSSParticleBranchList");
static_assert(sizeof(FSSParticleBranchList) == 0x000018, "Wrong size on FSSParticleBranchList");
static_assert(offsetof(FSSParticleBranchList, Prefix) == 0x000000, "Member 'FSSParticleBranchList::Prefix' has a wrong offset!");
static_assert(offsetof(FSSParticleBranchList, Particles) == 0x000008, "Member 'FSSParticleBranchList::Particles' has a wrong offset!");

// ScriptStruct SS.KoratDramaticDirectionItemListElement
// 0x0038 (0x0038 - 0x0000)
struct FKoratDramaticDirectionItemListElement final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ItemNameText;                                      // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticDirectionItemListElement) == 0x000008, "Wrong alignment on FKoratDramaticDirectionItemListElement");
static_assert(sizeof(FKoratDramaticDirectionItemListElement) == 0x000038, "Wrong size on FKoratDramaticDirectionItemListElement");
static_assert(offsetof(FKoratDramaticDirectionItemListElement, DisplayText) == 0x000000, "Member 'FKoratDramaticDirectionItemListElement::DisplayText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDirectionItemListElement, ItemNameText) == 0x000018, "Member 'FKoratDramaticDirectionItemListElement::ItemNameText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDirectionItemListElement, OrderNum) == 0x000030, "Member 'FKoratDramaticDirectionItemListElement::OrderNum' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertAtackTypeTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertAtackTypeTextData final
{
public:
	EKoratActionAttackType                        InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertAtackTypeTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertAtackTypeTextData");
static_assert(sizeof(FKoraDramaticInsertAtackTypeTextData) == 0x000040, "Wrong size on FKoraDramaticInsertAtackTypeTextData");
static_assert(offsetof(FKoraDramaticInsertAtackTypeTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertAtackTypeTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertAtackTypeTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertAtackTypeTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratBattleTeamChangeMembers
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleTeamChangeMembers final
{
public:
	TArray<struct FKoratBattleTeamChangeData>     Characters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTeamChangeMembers) == 0x000008, "Wrong alignment on FKoratBattleTeamChangeMembers");
static_assert(sizeof(FKoratBattleTeamChangeMembers) == 0x000010, "Wrong size on FKoratBattleTeamChangeMembers");
static_assert(offsetof(FKoratBattleTeamChangeMembers, Characters) == 0x000000, "Member 'FKoratBattleTeamChangeMembers::Characters' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCutEditorUIWindowDisplayConditionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCutEditorUIWindowButtonGuideDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowSelectItemDataOption
// 0x0028 (0x0028 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowSelectItemDataOption final
{
public:
	class FText                                   WindowTitleText;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList UIWindowButtonGuide;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowSelectItemDataList ListItemTemplate;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowSelectItemDataOption) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowSelectItemDataOption");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowSelectItemDataOption) == 0x000028, "Wrong size on FSSDramaticBattleCutEditorUIWindowSelectItemDataOption");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataOption, WindowTitleText) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataOption::WindowTitleText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataOption, UIWindowButtonGuide) == 0x000018, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataOption::UIWindowButtonGuide' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataOption, ListItemTemplate) == 0x000020, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataOption::ListItemTemplate' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCutEditorFunctionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorFunctionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorFunctionDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorFunctionDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorFunctionDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorFunctionDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorFunctionDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorFunctionDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList DisplayCondition;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorFunctionDataList Function;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticBattleCutEditorUIWindowSelectItemDataList> Items;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSDramaticBattleCutEditorUIWindowSelectItemDataOption Option;                                            // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord) == 0x000060, "Wrong size on FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord, Text) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord::Text' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord, DisplayCondition) == 0x000018, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord::DisplayCondition' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord, Function) == 0x000020, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord::Function' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord, Items) == 0x000028, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord::Items' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord, Option) == 0x000038, "Member 'FSSDramaticBattleCutEditorUIWindowSelectItemDataAssetRecord::Option' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingBuffDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleDirectingBuffDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleDirectingBuffDataList) == 0x000004, "Wrong alignment on FKoratBattleDirectingBuffDataList");
static_assert(sizeof(FKoratBattleDirectingBuffDataList) == 0x000008, "Wrong size on FKoratBattleDirectingBuffDataList");
static_assert(offsetof(FKoratBattleDirectingBuffDataList, Key) == 0x000000, "Member 'FKoratBattleDirectingBuffDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertBuffTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertBuffTextData final
{
public:
	struct FKoratBattleDirectingBuffDataList      InsertItemName;                                    // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertBuffTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertBuffTextData");
static_assert(sizeof(FKoraDramaticInsertBuffTextData) == 0x000040, "Wrong size on FKoraDramaticInsertBuffTextData");
static_assert(offsetof(FKoraDramaticInsertBuffTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertBuffTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertBuffTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertBuffTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratBattleCombinedInfo
// 0x000C (0x000C - 0x0000)
struct FKoratBattleCombinedInfo final
{
public:
	int32                                         PlayerNo;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaNo1;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaNo2;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleCombinedInfo) == 0x000004, "Wrong alignment on FKoratBattleCombinedInfo");
static_assert(sizeof(FKoratBattleCombinedInfo) == 0x00000C, "Wrong size on FKoratBattleCombinedInfo");
static_assert(offsetof(FKoratBattleCombinedInfo, PlayerNo) == 0x000000, "Member 'FKoratBattleCombinedInfo::PlayerNo' has a wrong offset!");
static_assert(offsetof(FKoratBattleCombinedInfo, CharaNo1) == 0x000004, "Member 'FKoratBattleCombinedInfo::CharaNo1' has a wrong offset!");
static_assert(offsetof(FKoratBattleCombinedInfo, CharaNo2) == 0x000008, "Member 'FKoratBattleCombinedInfo::CharaNo2' has a wrong offset!");

// ScriptStruct SS.KoratBattleResultConversation
// 0x0048 (0x0048 - 0x0000)
struct FKoratBattleResultConversation final
{
public:
	int32                                         ConditionNumber;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UpdateNameText;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleResultConversation) == 0x000008, "Wrong alignment on FKoratBattleResultConversation");
static_assert(sizeof(FKoratBattleResultConversation) == 0x000048, "Wrong size on FKoratBattleResultConversation");
static_assert(offsetof(FKoratBattleResultConversation, ConditionNumber) == 0x000000, "Member 'FKoratBattleResultConversation::ConditionNumber' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultConversation, CharacterID) == 0x000004, "Member 'FKoratBattleResultConversation::CharacterID' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultConversation, UpdateNameText) == 0x000010, "Member 'FKoratBattleResultConversation::UpdateNameText' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultConversation, Text) == 0x000028, "Member 'FKoratBattleResultConversation::Text' has a wrong offset!");
static_assert(offsetof(FKoratBattleResultConversation, Volume) == 0x000040, "Member 'FKoratBattleResultConversation::Volume' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditBaseText
// 0x000C (0x000C - 0x0000)
struct FKoratDRMEditBaseText final
{
public:
	bool                                          bBlank;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditBaseText) == 0x000004, "Wrong alignment on FKoratDRMEditBaseText");
static_assert(sizeof(FKoratDRMEditBaseText) == 0x00000C, "Wrong size on FKoratDRMEditBaseText");
static_assert(offsetof(FKoratDRMEditBaseText, bBlank) == 0x000000, "Member 'FKoratDRMEditBaseText::bBlank' has a wrong offset!");
static_assert(offsetof(FKoratDRMEditBaseText, Key) == 0x000004, "Member 'FKoratDRMEditBaseText::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleConditionalTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoratBattleConditionalTextData final
{
public:
	TArray<struct FKoratBattleConditionalTextList> ClearConditionalText;                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleConditionalTextList> AnotherConditionalText;                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleConditionalTextList> DefeatConditionalText;                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleConditionalTextList> MiracleOrbAnotherConditionalText;                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleConditionalTextData) == 0x000008, "Wrong alignment on FKoratBattleConditionalTextData");
static_assert(sizeof(FKoratBattleConditionalTextData) == 0x000040, "Wrong size on FKoratBattleConditionalTextData");
static_assert(offsetof(FKoratBattleConditionalTextData, ClearConditionalText) == 0x000000, "Member 'FKoratBattleConditionalTextData::ClearConditionalText' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextData, AnotherConditionalText) == 0x000010, "Member 'FKoratBattleConditionalTextData::AnotherConditionalText' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextData, DefeatConditionalText) == 0x000020, "Member 'FKoratBattleConditionalTextData::DefeatConditionalText' has a wrong offset!");
static_assert(offsetof(FKoratBattleConditionalTextData, MiracleOrbAnotherConditionalText) == 0x000030, "Member 'FKoratBattleConditionalTextData::MiracleOrbAnotherConditionalText' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrkTypeData
// 0x0000 (0x0008 - 0x0008)
struct FKoratEffectAtbBrkTypeData final : public FTableRowBase
{
};
static_assert(alignof(FKoratEffectAtbBrkTypeData) == 0x000008, "Wrong alignment on FKoratEffectAtbBrkTypeData");
static_assert(sizeof(FKoratEffectAtbBrkTypeData) == 0x000008, "Wrong size on FKoratEffectAtbBrkTypeData");

// ScriptStruct SS.KoratBattleDirectingDetails
// 0x0160 (0x0160 - 0x0000)
struct FKoratBattleDirectingDetails final
{
public:
	EKoratBattleDirectingActivate                 DirectingActivate;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleDirectingConditionTargetType      TargetType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetCharactersPos;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCharacterSettingData                FormChangeCharacter;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EKoratBattleDirectingAction                   BattleDirectingActivateAction;                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivateNumericalValue;                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   CpuThinkingType;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateCpuLevel;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      IdName;                                            // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipItem;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterItemDataList            EquipItem;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingBuffDataList      Buff;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBattleConversation               BattleConversation;                                // 0x0048(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   SceneId;                                           // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEventSceneDEDataAsset*               EventData;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiCommandDataList                RequestAiCommand;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipTarget;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratValid                                   bEditable_TargetType;                              // 0x0151(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_TargetCharactersPos;                     // 0x0152(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_FormChangeCharacter;                     // 0x0153(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_BattleDirectingActivateAction;           // 0x0154(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_ActivateNumericalValue;                  // 0x0155(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_CpuThinkingType;                         // 0x0156(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_UpdateCpuLevel;                          // 0x0157(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_IdName;                                  // 0x0158(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_IsEquipItem;                             // 0x0159(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_EquipItem;                               // 0x015A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_Buff;                                    // 0x015B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_BattleConversation;                      // 0x015C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EKoratValid                                   bEditable_EventData;                               // 0x015D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingDetails) == 0x000008, "Wrong alignment on FKoratBattleDirectingDetails");
static_assert(sizeof(FKoratBattleDirectingDetails) == 0x000160, "Wrong size on FKoratBattleDirectingDetails");
static_assert(offsetof(FKoratBattleDirectingDetails, DirectingActivate) == 0x000000, "Member 'FKoratBattleDirectingDetails::DirectingActivate' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, TargetType) == 0x000001, "Member 'FKoratBattleDirectingDetails::TargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, TargetCharactersPos) == 0x000004, "Member 'FKoratBattleDirectingDetails::TargetCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, FormChangeCharacter) == 0x000008, "Member 'FKoratBattleDirectingDetails::FormChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, BattleDirectingActivateAction) == 0x000018, "Member 'FKoratBattleDirectingDetails::BattleDirectingActivateAction' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, ActivateNumericalValue) == 0x00001C, "Member 'FKoratBattleDirectingDetails::ActivateNumericalValue' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, CpuThinkingType) == 0x000020, "Member 'FKoratBattleDirectingDetails::CpuThinkingType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, UpdateCpuLevel) == 0x000028, "Member 'FKoratBattleDirectingDetails::UpdateCpuLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, IdName) == 0x00002C, "Member 'FKoratBattleDirectingDetails::IdName' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, IsEquipItem) == 0x000034, "Member 'FKoratBattleDirectingDetails::IsEquipItem' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, EquipItem) == 0x000038, "Member 'FKoratBattleDirectingDetails::EquipItem' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, Buff) == 0x000040, "Member 'FKoratBattleDirectingDetails::Buff' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, BattleConversation) == 0x000048, "Member 'FKoratBattleDirectingDetails::BattleConversation' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, SceneId) == 0x000138, "Member 'FKoratBattleDirectingDetails::SceneId' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, EventData) == 0x000140, "Member 'FKoratBattleDirectingDetails::EventData' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, RequestAiCommand) == 0x000148, "Member 'FKoratBattleDirectingDetails::RequestAiCommand' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bSkipTarget) == 0x000150, "Member 'FKoratBattleDirectingDetails::bSkipTarget' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_TargetType) == 0x000151, "Member 'FKoratBattleDirectingDetails::bEditable_TargetType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_TargetCharactersPos) == 0x000152, "Member 'FKoratBattleDirectingDetails::bEditable_TargetCharactersPos' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_FormChangeCharacter) == 0x000153, "Member 'FKoratBattleDirectingDetails::bEditable_FormChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_BattleDirectingActivateAction) == 0x000154, "Member 'FKoratBattleDirectingDetails::bEditable_BattleDirectingActivateAction' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_ActivateNumericalValue) == 0x000155, "Member 'FKoratBattleDirectingDetails::bEditable_ActivateNumericalValue' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_CpuThinkingType) == 0x000156, "Member 'FKoratBattleDirectingDetails::bEditable_CpuThinkingType' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_UpdateCpuLevel) == 0x000157, "Member 'FKoratBattleDirectingDetails::bEditable_UpdateCpuLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_IdName) == 0x000158, "Member 'FKoratBattleDirectingDetails::bEditable_IdName' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_IsEquipItem) == 0x000159, "Member 'FKoratBattleDirectingDetails::bEditable_IsEquipItem' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_EquipItem) == 0x00015A, "Member 'FKoratBattleDirectingDetails::bEditable_EquipItem' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_Buff) == 0x00015B, "Member 'FKoratBattleDirectingDetails::bEditable_Buff' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_BattleConversation) == 0x00015C, "Member 'FKoratBattleDirectingDetails::bEditable_BattleConversation' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingDetails, bEditable_EventData) == 0x00015D, "Member 'FKoratBattleDirectingDetails::bEditable_EventData' has a wrong offset!");

// ScriptStruct SS.KoratInteractKnockPlayData
// 0x0038 (0x0038 - 0x0000)
struct FKoratInteractKnockPlayData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          SequenceAsset;                                     // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratInteractKnockPlayData) == 0x000008, "Wrong alignment on FKoratInteractKnockPlayData");
static_assert(sizeof(FKoratInteractKnockPlayData) == 0x000038, "Wrong size on FKoratInteractKnockPlayData");
static_assert(offsetof(FKoratInteractKnockPlayData, SequenceAsset) == 0x000000, "Member 'FKoratInteractKnockPlayData::SequenceAsset' has a wrong offset!");
static_assert(offsetof(FKoratInteractKnockPlayData, CueId) == 0x000030, "Member 'FKoratInteractKnockPlayData::CueId' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirecting
// 0x00D0 (0x00D0 - 0x0000)
struct FKoratBattleDirecting final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivationProbability;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfActivation;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunConcluded;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExclusiveCondition;                               // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleDirectingCondition         Condition;                                         // 0x0010(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingCondition         AndCondition0;                                     // 0x0044(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingCondition         AndCondition1;                                     // 0x0078(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleDirectingDetails>   Details;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAuto;                                             // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleWaitConditions                    BattleWaitCondition;                               // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleWaitTime;                                    // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConversationInterruptExecution;                   // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectionSkip;                                    // 0x00C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirecting) == 0x000008, "Wrong alignment on FKoratBattleDirecting");
static_assert(sizeof(FKoratBattleDirecting) == 0x0000D0, "Wrong size on FKoratBattleDirecting");
static_assert(offsetof(FKoratBattleDirecting, bValid) == 0x000000, "Member 'FKoratBattleDirecting::bValid' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, ActivationProbability) == 0x000004, "Member 'FKoratBattleDirecting::ActivationProbability' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, NumOfActivation) == 0x000008, "Member 'FKoratBattleDirecting::NumOfActivation' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, bRunConcluded) == 0x00000C, "Member 'FKoratBattleDirecting::bRunConcluded' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, bExclusiveCondition) == 0x00000D, "Member 'FKoratBattleDirecting::bExclusiveCondition' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, Condition) == 0x000010, "Member 'FKoratBattleDirecting::Condition' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, AndCondition0) == 0x000044, "Member 'FKoratBattleDirecting::AndCondition0' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, AndCondition1) == 0x000078, "Member 'FKoratBattleDirecting::AndCondition1' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, Details) == 0x0000B0, "Member 'FKoratBattleDirecting::Details' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, bAuto) == 0x0000C0, "Member 'FKoratBattleDirecting::bAuto' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, BattleWaitCondition) == 0x0000C1, "Member 'FKoratBattleDirecting::BattleWaitCondition' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, BattleWaitTime) == 0x0000C4, "Member 'FKoratBattleDirecting::BattleWaitTime' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, bConversationInterruptExecution) == 0x0000C8, "Member 'FKoratBattleDirecting::bConversationInterruptExecution' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirecting, bDirectionSkip) == 0x0000C9, "Member 'FKoratBattleDirecting::bDirectionSkip' has a wrong offset!");

// ScriptStruct SS.KoratInteractNiagaraDataRecord
// 0x0088 (0x0088 - 0x0000)
struct FKoratInteractNiagaraDataRecord final
{
public:
	struct FKoratEffectInteractNiagaraTypeDataList NiagaraType;                                       // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraSystem;                                     // 0x0018(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0048(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialPropertyName;                              // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratInteractAtbBranchDataAsset*       BranchDataList;                                    // 0x0080(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractNiagaraDataRecord) == 0x000008, "Wrong alignment on FKoratInteractNiagaraDataRecord");
static_assert(sizeof(FKoratInteractNiagaraDataRecord) == 0x000088, "Wrong size on FKoratInteractNiagaraDataRecord");
static_assert(offsetof(FKoratInteractNiagaraDataRecord, NiagaraType) == 0x000000, "Member 'FKoratInteractNiagaraDataRecord::NiagaraType' has a wrong offset!");
static_assert(offsetof(FKoratInteractNiagaraDataRecord, NiagaraSystem) == 0x000018, "Member 'FKoratInteractNiagaraDataRecord::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FKoratInteractNiagaraDataRecord, SkeletalMesh) == 0x000048, "Member 'FKoratInteractNiagaraDataRecord::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FKoratInteractNiagaraDataRecord, MaterialPropertyName) == 0x000078, "Member 'FKoratInteractNiagaraDataRecord::MaterialPropertyName' has a wrong offset!");
static_assert(offsetof(FKoratInteractNiagaraDataRecord, BranchDataList) == 0x000080, "Member 'FKoratInteractNiagaraDataRecord::BranchDataList' has a wrong offset!");

// ScriptStruct SS.SSMaterialBranchList
// 0x0018 (0x0018 - 0x0000)
struct FSSMaterialBranchList final
{
public:
	class FName                                   Prefix;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMaterialBranchList) == 0x000008, "Wrong alignment on FSSMaterialBranchList");
static_assert(sizeof(FSSMaterialBranchList) == 0x000018, "Wrong size on FSSMaterialBranchList");
static_assert(offsetof(FSSMaterialBranchList, Prefix) == 0x000000, "Member 'FSSMaterialBranchList::Prefix' has a wrong offset!");
static_assert(offsetof(FSSMaterialBranchList, Materials) == 0x000008, "Member 'FSSMaterialBranchList::Materials' has a wrong offset!");

// ScriptStruct SS.KoratCustomEffectColorData
// 0x0158 (0x0158 - 0x0000)
struct FKoratCustomEffectColorData final
{
public:
	bool                                          bEnableShaderColor;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UKoratEffectShaderColorDataAsset> InstanceParamColorAsset;                           // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAura;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UKoratEffectAuraDataAsset> AuraParamAsset;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOutline;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSOutlinePrameter                     OutlineParameter;                                  // 0x0078(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableStencilColor;                               // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UKoratEffectShaderColorDataAsset> StencilColorAsset;                                 // 0x00F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableParticleBranch;                             // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSParticleBranchList>          ParticleBranchLists;                               // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableMaterialBranch;                             // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSMaterialBranchList>          MaterialBranchLists;                               // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCustomEffectColorData) == 0x000008, "Wrong alignment on FKoratCustomEffectColorData");
static_assert(sizeof(FKoratCustomEffectColorData) == 0x000158, "Wrong size on FKoratCustomEffectColorData");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableShaderColor) == 0x000000, "Member 'FKoratCustomEffectColorData::bEnableShaderColor' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, InstanceParamColorAsset) == 0x000008, "Member 'FKoratCustomEffectColorData::InstanceParamColorAsset' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableAura) == 0x000038, "Member 'FKoratCustomEffectColorData::bEnableAura' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, AuraParamAsset) == 0x000040, "Member 'FKoratCustomEffectColorData::AuraParamAsset' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableOutline) == 0x000070, "Member 'FKoratCustomEffectColorData::bEnableOutline' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, OutlineParameter) == 0x000078, "Member 'FKoratCustomEffectColorData::OutlineParameter' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableStencilColor) == 0x0000F0, "Member 'FKoratCustomEffectColorData::bEnableStencilColor' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, StencilColorAsset) == 0x0000F8, "Member 'FKoratCustomEffectColorData::StencilColorAsset' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableParticleBranch) == 0x000128, "Member 'FKoratCustomEffectColorData::bEnableParticleBranch' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, ParticleBranchLists) == 0x000130, "Member 'FKoratCustomEffectColorData::ParticleBranchLists' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, bEnableMaterialBranch) == 0x000140, "Member 'FKoratCustomEffectColorData::bEnableMaterialBranch' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorData, MaterialBranchLists) == 0x000148, "Member 'FKoratCustomEffectColorData::MaterialBranchLists' has a wrong offset!");

// ScriptStruct SS.KoratOverrideCharacterColorData
// 0x0168 (0x0168 - 0x0000)
struct FKoratOverrideCharacterColorData final
{
public:
	TArray<struct FKoratCharacterDataList>        SelectCharacterId;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCustomEffectColorData            CustomColorData;                                   // 0x0010(0x0158)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOverrideCharacterColorData) == 0x000008, "Wrong alignment on FKoratOverrideCharacterColorData");
static_assert(sizeof(FKoratOverrideCharacterColorData) == 0x000168, "Wrong size on FKoratOverrideCharacterColorData");
static_assert(offsetof(FKoratOverrideCharacterColorData, SelectCharacterId) == 0x000000, "Member 'FKoratOverrideCharacterColorData::SelectCharacterId' has a wrong offset!");
static_assert(offsetof(FKoratOverrideCharacterColorData, CustomColorData) == 0x000010, "Member 'FKoratOverrideCharacterColorData::CustomColorData' has a wrong offset!");

// ScriptStruct SS.KoratSOSpeeds
// 0x0020 (0x0020 - 0x0000)
struct FKoratSOSpeeds final
{
public:
	float                                         SpeedX;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedY;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedZ;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceToWind;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindAmp;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindFreq;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindAmpZ;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindWeightZ;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSOSpeeds) == 0x000004, "Wrong alignment on FKoratSOSpeeds");
static_assert(sizeof(FKoratSOSpeeds) == 0x000020, "Wrong size on FKoratSOSpeeds");
static_assert(offsetof(FKoratSOSpeeds, SpeedX) == 0x000000, "Member 'FKoratSOSpeeds::SpeedX' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, SpeedY) == 0x000004, "Member 'FKoratSOSpeeds::SpeedY' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, SpeedZ) == 0x000008, "Member 'FKoratSOSpeeds::SpeedZ' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, bForceToWind) == 0x00000C, "Member 'FKoratSOSpeeds::bForceToWind' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, WindAmp) == 0x000010, "Member 'FKoratSOSpeeds::WindAmp' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, WindFreq) == 0x000014, "Member 'FKoratSOSpeeds::WindFreq' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, WindAmpZ) == 0x000018, "Member 'FKoratSOSpeeds::WindAmpZ' has a wrong offset!");
static_assert(offsetof(FKoratSOSpeeds, WindWeightZ) == 0x00001C, "Member 'FKoratSOSpeeds::WindWeightZ' has a wrong offset!");

// ScriptStruct SS.SSOutlineMeshSetting
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FSSOutlineMeshSetting final
{
public:
	class FName                                   MainMeshName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutlineMeshName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecievePointLightEffect;                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveShell;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x66];                                      // 0x0012(0x0066)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSOutlineMeshSetting) == 0x000008, "Wrong alignment on FSSOutlineMeshSetting");
static_assert(sizeof(FSSOutlineMeshSetting) == 0x000078, "Wrong size on FSSOutlineMeshSetting");
static_assert(offsetof(FSSOutlineMeshSetting, MainMeshName) == 0x000000, "Member 'FSSOutlineMeshSetting::MainMeshName' has a wrong offset!");
static_assert(offsetof(FSSOutlineMeshSetting, OutlineMeshName) == 0x000008, "Member 'FSSOutlineMeshSetting::OutlineMeshName' has a wrong offset!");
static_assert(offsetof(FSSOutlineMeshSetting, bRecievePointLightEffect) == 0x000010, "Member 'FSSOutlineMeshSetting::bRecievePointLightEffect' has a wrong offset!");
static_assert(offsetof(FSSOutlineMeshSetting, bReceiveShell) == 0x000011, "Member 'FSSOutlineMeshSetting::bReceiveShell' has a wrong offset!");

// ScriptStruct SS.KoratEffectStaDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectStaDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectStaDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectStaDataAssetRecord");
static_assert(sizeof(FKoratEffectStaDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectStaDataAssetRecord");
static_assert(offsetof(FKoratEffectStaDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectStaDataAssetRecord::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratLungeEndDamageDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratLungeEndDamageDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratLungeEndDamageDataAssetRecord) == 0x000001, "Wrong alignment on FKoratLungeEndDamageDataAssetRecord");
static_assert(sizeof(FKoratLungeEndDamageDataAssetRecord) == 0x000001, "Wrong size on FKoratLungeEndDamageDataAssetRecord");

// ScriptStruct SS.DirectionalLightControlSettingData
// 0x0048 (0x0048 - 0x0000)
struct FDirectionalLightControlSettingData final
{
public:
	bool                                          bTestSubLevelVisibility;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDirectionalLightVector;                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideDirectionalLightVector;                    // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDirectionalLightColor;                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideDirectionalLightColor;                     // 0x0024(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSkylightAmbientColor;                     // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideSkylightAmbientColor;                      // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightControlSettingData) == 0x000008, "Wrong alignment on FDirectionalLightControlSettingData");
static_assert(sizeof(FDirectionalLightControlSettingData) == 0x000048, "Wrong size on FDirectionalLightControlSettingData");
static_assert(offsetof(FDirectionalLightControlSettingData, bTestSubLevelVisibility) == 0x000000, "Member 'FDirectionalLightControlSettingData::bTestSubLevelVisibility' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, bOverrideDirectionalLightVector) == 0x000001, "Member 'FDirectionalLightControlSettingData::bOverrideDirectionalLightVector' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, OverrideDirectionalLightVector) == 0x000008, "Member 'FDirectionalLightControlSettingData::OverrideDirectionalLightVector' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, bOverrideDirectionalLightColor) == 0x000020, "Member 'FDirectionalLightControlSettingData::bOverrideDirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, OverrideDirectionalLightColor) == 0x000024, "Member 'FDirectionalLightControlSettingData::OverrideDirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, bOverrideSkylightAmbientColor) == 0x000034, "Member 'FDirectionalLightControlSettingData::bOverrideSkylightAmbientColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightControlSettingData, OverrideSkylightAmbientColor) == 0x000038, "Member 'FDirectionalLightControlSettingData::OverrideSkylightAmbientColor' has a wrong offset!");

// ScriptStruct SS.DirectionalLightSettingPerLevel
// 0x0048 (0x0050 - 0x0008)
struct FDirectionalLightSettingPerLevel final : public FTableRowBase
{
public:
	struct FDirectionalLightControlSettingData    DirectionalLightSettingsData;                      // 0x0008(0x0048)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightSettingPerLevel) == 0x000008, "Wrong alignment on FDirectionalLightSettingPerLevel");
static_assert(sizeof(FDirectionalLightSettingPerLevel) == 0x000050, "Wrong size on FDirectionalLightSettingPerLevel");
static_assert(offsetof(FDirectionalLightSettingPerLevel, DirectionalLightSettingsData) == 0x000008, "Member 'FDirectionalLightSettingPerLevel::DirectionalLightSettingsData' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingSetup
// 0x0100 (0x0100 - 0x0000)
struct FKoratBattleDirectingSetup final
{
public:
	struct FKoratBattleDirectingCondition         SpVictoryCondition;                                // 0x0000(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleTimeSliceData              SpVictoryEventData;                                // 0x0038(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SpVictorySceneId;                                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingCondition         SpDefeatCondition;                                 // 0x0078(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleTimeSliceData              SpDefeatEventData;                                 // 0x00B0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SpDefeatSceneId;                                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleDirecting>          Items;                                             // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleDirectingSetup) == 0x000008, "Wrong alignment on FKoratBattleDirectingSetup");
static_assert(sizeof(FKoratBattleDirectingSetup) == 0x000100, "Wrong size on FKoratBattleDirectingSetup");
static_assert(offsetof(FKoratBattleDirectingSetup, SpVictoryCondition) == 0x000000, "Member 'FKoratBattleDirectingSetup::SpVictoryCondition' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, SpVictoryEventData) == 0x000038, "Member 'FKoratBattleDirectingSetup::SpVictoryEventData' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, SpVictorySceneId) == 0x000070, "Member 'FKoratBattleDirectingSetup::SpVictorySceneId' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, SpDefeatCondition) == 0x000078, "Member 'FKoratBattleDirectingSetup::SpDefeatCondition' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, SpDefeatEventData) == 0x0000B0, "Member 'FKoratBattleDirectingSetup::SpDefeatEventData' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, SpDefeatSceneId) == 0x0000E8, "Member 'FKoratBattleDirectingSetup::SpDefeatSceneId' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingSetup, Items) == 0x0000F0, "Member 'FKoratBattleDirectingSetup::Items' has a wrong offset!");

// ScriptStruct SS.KoratBattleChangeSettingData
// 0x0003 (0x0003 - 0x0000)
struct FKoratBattleChangeSettingData final
{
public:
	EKoratAllComLevelSetting                      AllComLevel;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCommonOnOffType                         AllFormChange;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCommonOnOffType                         AllCombine;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleChangeSettingData) == 0x000001, "Wrong alignment on FKoratBattleChangeSettingData");
static_assert(sizeof(FKoratBattleChangeSettingData) == 0x000003, "Wrong size on FKoratBattleChangeSettingData");
static_assert(offsetof(FKoratBattleChangeSettingData, AllComLevel) == 0x000000, "Member 'FKoratBattleChangeSettingData::AllComLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattleChangeSettingData, AllFormChange) == 0x000001, "Member 'FKoratBattleChangeSettingData::AllFormChange' has a wrong offset!");
static_assert(offsetof(FKoratBattleChangeSettingData, AllCombine) == 0x000002, "Member 'FKoratBattleChangeSettingData::AllCombine' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingData
// 0x0100 (0x0100 - 0x0000)
struct FKoratBattleDirectingData final
{
public:
	EKoratBattleMenu                              BattleMenu;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleFormat                            BattleFormat;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleMemberRule                        BattleMemberRule;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timelimit;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BattleBGM;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnhanceditems;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutField;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoMartialArts;                                    // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleTeamDirectingData>  TeamSetting;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSuddenlySparking;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleCpuData                    CpuData;                                           // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleConditionalTextData        ConditionalTextData;                               // 0x0038(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleDirectingSetup>     Tables;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FKoratBattleResultLines>   AdvResultLines;                                    // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleReward>             BattleReward;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLiveCommentary;                                   // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundAtomCueSheet>> CharacterCueSheetList;                             // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleDirectingData) == 0x000008, "Wrong alignment on FKoratBattleDirectingData");
static_assert(sizeof(FKoratBattleDirectingData) == 0x000100, "Wrong size on FKoratBattleDirectingData");
static_assert(offsetof(FKoratBattleDirectingData, BattleMenu) == 0x000000, "Member 'FKoratBattleDirectingData::BattleMenu' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, BattleFormat) == 0x000001, "Member 'FKoratBattleDirectingData::BattleFormat' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, BattleMemberRule) == 0x000002, "Member 'FKoratBattleDirectingData::BattleMemberRule' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, Timelimit) == 0x000004, "Member 'FKoratBattleDirectingData::Timelimit' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, BattleBGM) == 0x000008, "Member 'FKoratBattleDirectingData::BattleBGM' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, bEnhanceditems) == 0x000010, "Member 'FKoratBattleDirectingData::bEnhanceditems' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, bOutField) == 0x000011, "Member 'FKoratBattleDirectingData::bOutField' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, bNoMartialArts) == 0x000012, "Member 'FKoratBattleDirectingData::bNoMartialArts' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, TeamSetting) == 0x000018, "Member 'FKoratBattleDirectingData::TeamSetting' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, bSuddenlySparking) == 0x000028, "Member 'FKoratBattleDirectingData::bSuddenlySparking' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, CpuData) == 0x00002C, "Member 'FKoratBattleDirectingData::CpuData' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, ConditionalTextData) == 0x000038, "Member 'FKoratBattleDirectingData::ConditionalTextData' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, Tables) == 0x000078, "Member 'FKoratBattleDirectingData::Tables' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, AdvResultLines) == 0x000088, "Member 'FKoratBattleDirectingData::AdvResultLines' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, BattleReward) == 0x0000D8, "Member 'FKoratBattleDirectingData::BattleReward' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, bLiveCommentary) == 0x0000E8, "Member 'FKoratBattleDirectingData::bLiveCommentary' has a wrong offset!");
static_assert(offsetof(FKoratBattleDirectingData, CharacterCueSheetList) == 0x0000F0, "Member 'FKoratBattleDirectingData::CharacterCueSheetList' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessViewAgentItem
// 0x0058 (0x0058 - 0x0000)
struct FKoratPostProcessViewAgentItem
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SerialNo;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StrPlaySequenceCharcter;                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StrRebindCharcter;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentSequenceName;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tracks;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessViewAgentItem) == 0x000008, "Wrong alignment on FKoratPostProcessViewAgentItem");
static_assert(sizeof(FKoratPostProcessViewAgentItem) == 0x000058, "Wrong size on FKoratPostProcessViewAgentItem");
static_assert(offsetof(FKoratPostProcessViewAgentItem, Priority) == 0x000008, "Member 'FKoratPostProcessViewAgentItem::Priority' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, SerialNo) == 0x00000C, "Member 'FKoratPostProcessViewAgentItem::SerialNo' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, Active) == 0x000010, "Member 'FKoratPostProcessViewAgentItem::Active' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, StrPlaySequenceCharcter) == 0x000018, "Member 'FKoratPostProcessViewAgentItem::StrPlaySequenceCharcter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, StrRebindCharcter) == 0x000028, "Member 'FKoratPostProcessViewAgentItem::StrRebindCharcter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, ParentSequenceName) == 0x000038, "Member 'FKoratPostProcessViewAgentItem::ParentSequenceName' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessViewAgentItem, Tracks) == 0x000048, "Member 'FKoratPostProcessViewAgentItem::Tracks' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessViewAgentValueItem
// 0x0010 (0x0068 - 0x0058)
struct FKoratPostProcessViewAgentValueItem final : public FKoratPostProcessViewAgentItem
{
public:
	class FString                                 Value;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessViewAgentValueItem) == 0x000008, "Wrong alignment on FKoratPostProcessViewAgentValueItem");
static_assert(sizeof(FKoratPostProcessViewAgentValueItem) == 0x000068, "Wrong size on FKoratPostProcessViewAgentValueItem");
static_assert(offsetof(FKoratPostProcessViewAgentValueItem, Value) == 0x000058, "Member 'FKoratPostProcessViewAgentValueItem::Value' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessViewActorSubItem
// 0x0050 (0x0050 - 0x0000)
struct FKoratPostProcessViewActorSubItem final
{
public:
	TMap<class FString, struct FKoratPostProcessViewAgentValueItem> AgentNameList;                                     // 0x0000(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessViewActorSubItem) == 0x000008, "Wrong alignment on FKoratPostProcessViewActorSubItem");
static_assert(sizeof(FKoratPostProcessViewActorSubItem) == 0x000050, "Wrong size on FKoratPostProcessViewActorSubItem");
static_assert(offsetof(FKoratPostProcessViewActorSubItem, AgentNameList) == 0x000000, "Member 'FKoratPostProcessViewActorSubItem::AgentNameList' has a wrong offset!");

// ScriptStruct SS.SSOptionAssistParam
// 0x0008 (0x0008 - 0x0000)
struct FSSOptionAssistParam final
{
public:
	bool                                          bCombo;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuit;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDash;                                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDashAttack;                                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuard;                                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassive;                                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevengeCounter;                                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClassicMode;                                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionAssistParam) == 0x000001, "Wrong alignment on FSSOptionAssistParam");
static_assert(sizeof(FSSOptionAssistParam) == 0x000008, "Wrong size on FSSOptionAssistParam");
static_assert(offsetof(FSSOptionAssistParam, bCombo) == 0x000000, "Member 'FSSOptionAssistParam::bCombo' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bPursuit) == 0x000001, "Member 'FSSOptionAssistParam::bPursuit' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bDragonDash) == 0x000002, "Member 'FSSOptionAssistParam::bDragonDash' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bDragonDashAttack) == 0x000003, "Member 'FSSOptionAssistParam::bDragonDashAttack' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bGuard) == 0x000004, "Member 'FSSOptionAssistParam::bGuard' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bPassive) == 0x000005, "Member 'FSSOptionAssistParam::bPassive' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bRevengeCounter) == 0x000006, "Member 'FSSOptionAssistParam::bRevengeCounter' has a wrong offset!");
static_assert(offsetof(FSSOptionAssistParam, bClassicMode) == 0x000007, "Member 'FSSOptionAssistParam::bClassicMode' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetting
// 0x0318 (0x0318 - 0x0000)
struct FKoratBattleSetting final
{
public:
	bool                                          bBattleMapParameterIsValid;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattlePlayMap                    BattlePlayMap;                                     // 0x0004(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBattleCharacterParameterIsValid;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKoratPlayerStartDataList, struct FKoratBattlePlayCharacter> BattlePlayCharacter;                               // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FKoratPlayerStartDataList, struct FKoratBattlePlayCharacter> BattlePlayCharacterTeam;                           // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      SparkingBGM1P;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      SparkingBGM2P;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleTeamChangeMembers>  BattleTeamChangeMembers;                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleCombinedInfo>       BattleCombinedInfo;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratFormChangeCharacterItemEquipment> FormChangeCharacterItemEquipment;                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AlliesTeamMemberNo;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyTeamMemberNo;                                 // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleKeyMode                           BattleKeyMode;                                     // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlineBattleFlg;                                  // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleOfflineMode                       BattleOfflineMode;                                 // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleOnlineMode                        BattleOnlineMode;                                  // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugVirtualNetPlayerRoleType                DbgNetRollType;                                    // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlineBattleSlaveFlg;                             // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBattleChangeSettingData          BattleChangeSettingData;                           // 0x00FE(0x0003)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleDirectingData              BattleDirectingData;                               // 0x0108(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingInfo              BattleDirectingInfo;                               // 0x0208(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistParam                   AlliesTeamAssist;                                  // 0x0210(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistParam                   EnemyTeamAssist;                                   // 0x0218(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionControlParam                  AlliesBattleOptionParamControl;                    // 0x0220(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionControlParam                  EnemyBattleOptionParamControl;                     // 0x0260(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FKoratPlayerStartDataList, struct FKoratBattlePlayCharacter> BattlePlayCharacterTeamBackup;                     // 0x02A0(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleTeamChangeMembers>  BattleTeamChangeMembersBackup;                     // 0x02F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratBattlePlayMap                    BattleMapBackUp;                                   // 0x0300(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoBattleLoop;                                   // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBattleLoopCharacterRandom;                    // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBattleLoopMapRandom;                          // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBattleLoopPadAddRandom;                       // 0x030B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoBattleLoopErrorRestartOnlineAutoBattleMenu;   // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleTimeoverRule                      BattleTimeoverRule;                                // 0x030D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30E[0x2];                                      // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetryPlayLevel;                                    // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleStartAppealType                   StartAppealType;                                   // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleSetting) == 0x000008, "Wrong alignment on FKoratBattleSetting");
static_assert(sizeof(FKoratBattleSetting) == 0x000318, "Wrong size on FKoratBattleSetting");
static_assert(offsetof(FKoratBattleSetting, bBattleMapParameterIsValid) == 0x000000, "Member 'FKoratBattleSetting::bBattleMapParameterIsValid' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattlePlayMap) == 0x000004, "Member 'FKoratBattleSetting::BattlePlayMap' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bBattleCharacterParameterIsValid) == 0x00000C, "Member 'FKoratBattleSetting::bBattleCharacterParameterIsValid' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattlePlayCharacter) == 0x000010, "Member 'FKoratBattleSetting::BattlePlayCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattlePlayCharacterTeam) == 0x000060, "Member 'FKoratBattleSetting::BattlePlayCharacterTeam' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, SparkingBGM1P) == 0x0000B0, "Member 'FKoratBattleSetting::SparkingBGM1P' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, SparkingBGM2P) == 0x0000B8, "Member 'FKoratBattleSetting::SparkingBGM2P' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleTeamChangeMembers) == 0x0000C0, "Member 'FKoratBattleSetting::BattleTeamChangeMembers' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleCombinedInfo) == 0x0000D0, "Member 'FKoratBattleSetting::BattleCombinedInfo' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, FormChangeCharacterItemEquipment) == 0x0000E0, "Member 'FKoratBattleSetting::FormChangeCharacterItemEquipment' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, AlliesTeamMemberNo) == 0x0000F0, "Member 'FKoratBattleSetting::AlliesTeamMemberNo' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, EnemyTeamMemberNo) == 0x0000F4, "Member 'FKoratBattleSetting::EnemyTeamMemberNo' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleKeyMode) == 0x0000F8, "Member 'FKoratBattleSetting::BattleKeyMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bOnlineBattleFlg) == 0x0000F9, "Member 'FKoratBattleSetting::bOnlineBattleFlg' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleOfflineMode) == 0x0000FA, "Member 'FKoratBattleSetting::BattleOfflineMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleOnlineMode) == 0x0000FB, "Member 'FKoratBattleSetting::BattleOnlineMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, DbgNetRollType) == 0x0000FC, "Member 'FKoratBattleSetting::DbgNetRollType' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bOnlineBattleSlaveFlg) == 0x0000FD, "Member 'FKoratBattleSetting::bOnlineBattleSlaveFlg' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleChangeSettingData) == 0x0000FE, "Member 'FKoratBattleSetting::BattleChangeSettingData' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleDirectingData) == 0x000108, "Member 'FKoratBattleSetting::BattleDirectingData' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleDirectingInfo) == 0x000208, "Member 'FKoratBattleSetting::BattleDirectingInfo' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, AlliesTeamAssist) == 0x000210, "Member 'FKoratBattleSetting::AlliesTeamAssist' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, EnemyTeamAssist) == 0x000218, "Member 'FKoratBattleSetting::EnemyTeamAssist' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, AlliesBattleOptionParamControl) == 0x000220, "Member 'FKoratBattleSetting::AlliesBattleOptionParamControl' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, EnemyBattleOptionParamControl) == 0x000260, "Member 'FKoratBattleSetting::EnemyBattleOptionParamControl' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattlePlayCharacterTeamBackup) == 0x0002A0, "Member 'FKoratBattleSetting::BattlePlayCharacterTeamBackup' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleTeamChangeMembersBackup) == 0x0002F0, "Member 'FKoratBattleSetting::BattleTeamChangeMembersBackup' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleMapBackUp) == 0x000300, "Member 'FKoratBattleSetting::BattleMapBackUp' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bAutoBattleLoop) == 0x000308, "Member 'FKoratBattleSetting::bAutoBattleLoop' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bAutoBattleLoopCharacterRandom) == 0x000309, "Member 'FKoratBattleSetting::bAutoBattleLoopCharacterRandom' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bAutoBattleLoopMapRandom) == 0x00030A, "Member 'FKoratBattleSetting::bAutoBattleLoopMapRandom' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bAutoBattleLoopPadAddRandom) == 0x00030B, "Member 'FKoratBattleSetting::bAutoBattleLoopPadAddRandom' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, bAutoBattleLoopErrorRestartOnlineAutoBattleMenu) == 0x00030C, "Member 'FKoratBattleSetting::bAutoBattleLoopErrorRestartOnlineAutoBattleMenu' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, BattleTimeoverRule) == 0x00030D, "Member 'FKoratBattleSetting::BattleTimeoverRule' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, RetryPlayLevel) == 0x000310, "Member 'FKoratBattleSetting::RetryPlayLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetting, StartAppealType) == 0x000314, "Member 'FKoratBattleSetting::StartAppealType' has a wrong offset!");

// ScriptStruct SS.KoratFacialInformation
// 0x0058 (0x0058 - 0x0000)
struct FKoratFacialInformation final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Eye;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mouth;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MouthOpen;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MouthClose;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeUPosition_L;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeVPosition_L;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeUPosition_R;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeVPosition_R;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeScaleRatio_X;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeScaleRatio_Y;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFacialInformation) == 0x000004, "Wrong alignment on FKoratFacialInformation");
static_assert(sizeof(FKoratFacialInformation) == 0x000058, "Wrong size on FKoratFacialInformation");
static_assert(offsetof(FKoratFacialInformation, Control) == 0x000000, "Member 'FKoratFacialInformation::Control' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, Eye) == 0x000008, "Member 'FKoratFacialInformation::Eye' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, Mouth) == 0x000010, "Member 'FKoratFacialInformation::Mouth' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, MouthOpen) == 0x000018, "Member 'FKoratFacialInformation::MouthOpen' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, MouthClose) == 0x000020, "Member 'FKoratFacialInformation::MouthClose' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeUPosition_L) == 0x000028, "Member 'FKoratFacialInformation::EyeUPosition_L' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeVPosition_L) == 0x00002C, "Member 'FKoratFacialInformation::EyeVPosition_L' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeUPosition_R) == 0x000030, "Member 'FKoratFacialInformation::EyeUPosition_R' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeVPosition_R) == 0x000034, "Member 'FKoratFacialInformation::EyeVPosition_R' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeScaleRatio_X) == 0x000038, "Member 'FKoratFacialInformation::EyeScaleRatio_X' has a wrong offset!");
static_assert(offsetof(FKoratFacialInformation, EyeScaleRatio_Y) == 0x00003C, "Member 'FKoratFacialInformation::EyeScaleRatio_Y' has a wrong offset!");

// ScriptStruct SS.KoratExFacialInformation
// 0x0010 (0x0010 - 0x0000)
struct FKoratExFacialInformation final
{
public:
	class FName                                   Control;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtensionType;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratExFacialInformation) == 0x000004, "Wrong alignment on FKoratExFacialInformation");
static_assert(sizeof(FKoratExFacialInformation) == 0x000010, "Wrong size on FKoratExFacialInformation");
static_assert(offsetof(FKoratExFacialInformation, Control) == 0x000000, "Member 'FKoratExFacialInformation::Control' has a wrong offset!");
static_assert(offsetof(FKoratExFacialInformation, ExtensionType) == 0x000008, "Member 'FKoratExFacialInformation::ExtensionType' has a wrong offset!");

// ScriptStruct SS.KoratRigUnit_SetFicialExpression
// 0x0068 (0x00A8 - 0x0040)
struct FKoratRigUnit_SetFicialExpression final : public FRigUnit_HighlevelBaseMutable
{
public:
	TArray<struct FKoratFacialInformation>        FacialInformations;                                // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratExFacialInformation>      ExFacialInformations;                              // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OpenVertical;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseVertical;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultVerticalAlpha;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnalyzerStatus;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaying;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMaxOpen;                                         // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControlValue;                                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeCurveValue;                                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenCurveValue;                                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseCurveValue;                                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      CachedControlIndex;                                // 0x0088(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SetFicialExpression) == 0x000008, "Wrong alignment on FKoratRigUnit_SetFicialExpression");
static_assert(sizeof(FKoratRigUnit_SetFicialExpression) == 0x0000A8, "Wrong size on FKoratRigUnit_SetFicialExpression");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, FacialInformations) == 0x000040, "Member 'FKoratRigUnit_SetFicialExpression::FacialInformations' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, ExFacialInformations) == 0x000050, "Member 'FKoratRigUnit_SetFicialExpression::ExFacialInformations' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, OpenVertical) == 0x000060, "Member 'FKoratRigUnit_SetFicialExpression::OpenVertical' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, CloseVertical) == 0x000064, "Member 'FKoratRigUnit_SetFicialExpression::CloseVertical' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, DefaultVerticalAlpha) == 0x000068, "Member 'FKoratRigUnit_SetFicialExpression::DefaultVerticalAlpha' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, AnalyzerStatus) == 0x00006C, "Member 'FKoratRigUnit_SetFicialExpression::AnalyzerStatus' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, IsPlaying) == 0x000070, "Member 'FKoratRigUnit_SetFicialExpression::IsPlaying' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, IsMaxOpen) == 0x000071, "Member 'FKoratRigUnit_SetFicialExpression::IsMaxOpen' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, ControlValue) == 0x000074, "Member 'FKoratRigUnit_SetFicialExpression::ControlValue' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, EyeCurveValue) == 0x000078, "Member 'FKoratRigUnit_SetFicialExpression::EyeCurveValue' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, OpenCurveValue) == 0x00007C, "Member 'FKoratRigUnit_SetFicialExpression::OpenCurveValue' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, CloseCurveValue) == 0x000080, "Member 'FKoratRigUnit_SetFicialExpression::CloseCurveValue' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_SetFicialExpression, CachedControlIndex) == 0x000088, "Member 'FKoratRigUnit_SetFicialExpression::CachedControlIndex' has a wrong offset!");

// ScriptStruct SS.KoratBattleRetrySetting
// 0x0028 (0x0028 - 0x0000)
struct FKoratBattleRetrySetting final
{
public:
	EKoratBattleRetryMode                         BattleRetryMode;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleRetryCharaData>     RetryCharaData;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleRetrySetting) == 0x000008, "Wrong alignment on FKoratBattleRetrySetting");
static_assert(sizeof(FKoratBattleRetrySetting) == 0x000028, "Wrong size on FKoratBattleRetrySetting");
static_assert(offsetof(FKoratBattleRetrySetting, BattleRetryMode) == 0x000000, "Member 'FKoratBattleRetrySetting::BattleRetryMode' has a wrong offset!");
static_assert(offsetof(FKoratBattleRetrySetting, RetryCharaData) == 0x000008, "Member 'FKoratBattleRetrySetting::RetryCharaData' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingActionSurveillanceInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FKoratBattleDirectingActionSurveillanceInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingActionSurveillanceInfo) == 0x000008, "Wrong alignment on FKoratBattleDirectingActionSurveillanceInfo");
static_assert(sizeof(FKoratBattleDirectingActionSurveillanceInfo) == 0x000028, "Wrong size on FKoratBattleDirectingActionSurveillanceInfo");

// ScriptStruct SS.KoratRigUnit_MeshClippingCurve
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FKoratRigUnit_MeshClippingCurve final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MeshClippingCurve) == 0x000008, "Wrong alignment on FKoratRigUnit_MeshClippingCurve");
static_assert(sizeof(FKoratRigUnit_MeshClippingCurve) == 0x000098, "Wrong size on FKoratRigUnit_MeshClippingCurve");

// ScriptStruct SS.KoratRigUnit_MeshClippingDefinition
// 0x0080 (0x0080 - 0x0000)
struct FKoratRigUnit_MeshClippingDefinition final
{
public:
	struct FRigElementKey                         bone;                                              // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      BoneIndex;                                         // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratRigUnit_MeshClippingCurve> Curves;                                            // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_MeshClippingDefinition) == 0x000008, "Wrong alignment on FKoratRigUnit_MeshClippingDefinition");
static_assert(sizeof(FKoratRigUnit_MeshClippingDefinition) == 0x000080, "Wrong size on FKoratRigUnit_MeshClippingDefinition");
static_assert(offsetof(FKoratRigUnit_MeshClippingDefinition, bone) == 0x000000, "Member 'FKoratRigUnit_MeshClippingDefinition::bone' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MeshClippingDefinition, BoneIndex) == 0x000010, "Member 'FKoratRigUnit_MeshClippingDefinition::BoneIndex' has a wrong offset!");
static_assert(offsetof(FKoratRigUnit_MeshClippingDefinition, Curves) == 0x000030, "Member 'FKoratRigUnit_MeshClippingDefinition::Curves' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingCharacterInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FKoratBattleDirectingCharacterInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingCharacterInfo) == 0x000004, "Wrong alignment on FKoratBattleDirectingCharacterInfo");
static_assert(sizeof(FKoratBattleDirectingCharacterInfo) == 0x000010, "Wrong size on FKoratBattleDirectingCharacterInfo");

// ScriptStruct SS.SSBattleDirectingParam
// 0x0118 (0x0118 - 0x0000)
struct alignas(0x08) FSSBattleDirectingParam final
{
public:
	uint8                                         Pad_0[0x118];                                      // 0x0000(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleDirectingParam) == 0x000008, "Wrong alignment on FSSBattleDirectingParam");
static_assert(sizeof(FSSBattleDirectingParam) == 0x000118, "Wrong size on FSSBattleDirectingParam");

// ScriptStruct SS.KoratRigUnit_MeshClippingElbow
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FKoratRigUnit_MeshClippingElbow final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MeshClippingElbow) == 0x000008, "Wrong alignment on FKoratRigUnit_MeshClippingElbow");
static_assert(sizeof(FKoratRigUnit_MeshClippingElbow) == 0x000080, "Wrong size on FKoratRigUnit_MeshClippingElbow");

// ScriptStruct SS.KoratRigUnit_SetElbowR_MT
// 0x0080 (0x00C0 - 0x0040)
struct FKoratRigUnit_SetElbowR_MT final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FKoratRigUnit_MeshClippingElbow        Right;                                             // 0x0040(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SetElbowR_MT) == 0x000008, "Wrong alignment on FKoratRigUnit_SetElbowR_MT");
static_assert(sizeof(FKoratRigUnit_SetElbowR_MT) == 0x0000C0, "Wrong size on FKoratRigUnit_SetElbowR_MT");
static_assert(offsetof(FKoratRigUnit_SetElbowR_MT, Right) == 0x000040, "Member 'FKoratRigUnit_SetElbowR_MT::Right' has a wrong offset!");

// ScriptStruct SS.KoratTaketurnInfoData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FKoratTaketurnInfoData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratTaketurnInfoData) == 0x000004, "Wrong alignment on FKoratTaketurnInfoData");
static_assert(sizeof(FKoratTaketurnInfoData) == 0x00000C, "Wrong size on FKoratTaketurnInfoData");

// ScriptStruct SS.SSDebugBattlePlayerCommandInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSSDebugBattlePlayerCommandInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDebugBattlePlayerCommandInfo) == 0x000004, "Wrong alignment on FSSDebugBattlePlayerCommandInfo");
static_assert(sizeof(FSSDebugBattlePlayerCommandInfo) == 0x000010, "Wrong size on FSSDebugBattlePlayerCommandInfo");

// ScriptStruct SS.KoratMovieSceneBattleSubtitlePayload
// 0x0100 (0x0100 - 0x0000)
struct FKoratMovieSceneBattleSubtitlePayload final
{
public:
	EKoratMovieSceneBattleSubtitleTargetType      TargetType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBattleVoice;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleConversation               BattleConversation;                                // 0x0008(0x00F0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bFateBranchType;                                   // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneBattleSubtitlePayload) == 0x000008, "Wrong alignment on FKoratMovieSceneBattleSubtitlePayload");
static_assert(sizeof(FKoratMovieSceneBattleSubtitlePayload) == 0x000100, "Wrong size on FKoratMovieSceneBattleSubtitlePayload");
static_assert(offsetof(FKoratMovieSceneBattleSubtitlePayload, TargetType) == 0x000000, "Member 'FKoratMovieSceneBattleSubtitlePayload::TargetType' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneBattleSubtitlePayload, IsBattleVoice) == 0x000001, "Member 'FKoratMovieSceneBattleSubtitlePayload::IsBattleVoice' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneBattleSubtitlePayload, BattleConversation) == 0x000008, "Member 'FKoratMovieSceneBattleSubtitlePayload::BattleConversation' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneBattleSubtitlePayload, bFateBranchType) == 0x0000F8, "Member 'FKoratMovieSceneBattleSubtitlePayload::bFateBranchType' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneBattleSubtitleSectionData
// 0x00A8 (0x00F8 - 0x0050)
struct FKoratMovieSceneBattleSubtitleSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FKoratMovieSceneBattleSubtitlePayload> KeyValues;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x88];                                      // 0x0070(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneBattleSubtitleSectionData) == 0x000008, "Wrong alignment on FKoratMovieSceneBattleSubtitleSectionData");
static_assert(sizeof(FKoratMovieSceneBattleSubtitleSectionData) == 0x0000F8, "Wrong size on FKoratMovieSceneBattleSubtitleSectionData");
static_assert(offsetof(FKoratMovieSceneBattleSubtitleSectionData, Times) == 0x000050, "Member 'FKoratMovieSceneBattleSubtitleSectionData::Times' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneBattleSubtitleSectionData, KeyValues) == 0x000060, "Member 'FKoratMovieSceneBattleSubtitleSectionData::KeyValues' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneBattleSubtitleTemplate
// 0x0100 (0x0120 - 0x0020)
struct FKoratMovieSceneBattleSubtitleTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FKoratMovieSceneBattleSubtitleSectionData EventData;                                         // 0x0020(0x00F8)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0118(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneBattleSubtitleTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneBattleSubtitleTemplate");
static_assert(sizeof(FKoratMovieSceneBattleSubtitleTemplate) == 0x000120, "Wrong size on FKoratMovieSceneBattleSubtitleTemplate");
static_assert(offsetof(FKoratMovieSceneBattleSubtitleTemplate, EventData) == 0x000020, "Member 'FKoratMovieSceneBattleSubtitleTemplate::EventData' has a wrong offset!");

// ScriptStruct SS.SSDitherComponentStruct
// 0x0008 (0x0008 - 0x0000)
struct FSSDitherComponentStruct final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDitherComponentStruct) == 0x000004, "Wrong alignment on FSSDitherComponentStruct");
static_assert(sizeof(FSSDitherComponentStruct) == 0x000008, "Wrong size on FSSDitherComponentStruct");
static_assert(offsetof(FSSDitherComponentStruct, Alpha) == 0x000000, "Member 'FSSDitherComponentStruct::Alpha' has a wrong offset!");
static_assert(offsetof(FSSDitherComponentStruct, Time) == 0x000004, "Member 'FSSDitherComponentStruct::Time' has a wrong offset!");

// ScriptStruct SS.KoratBattleRewardDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleRewardDataAssetRecord final
{
public:
	TArray<struct FKoratBattleReward>             BattleReward;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleRewardDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBattleRewardDataAssetRecord");
static_assert(sizeof(FKoratBattleRewardDataAssetRecord) == 0x000010, "Wrong size on FKoratBattleRewardDataAssetRecord");
static_assert(offsetof(FKoratBattleRewardDataAssetRecord, BattleReward) == 0x000000, "Member 'FKoratBattleRewardDataAssetRecord::BattleReward' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneImpactTemplate
// 0x0240 (0x0260 - 0x0020)
struct FKoratMovieSceneEventSceneImpactTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneActorReferenceData          RebindEvent00Reference;                            // 0x0020(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          RebindEvent01Reference;                            // 0x0140(0x0120)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneEventSceneImpactTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneImpactTemplate");
static_assert(sizeof(FKoratMovieSceneEventSceneImpactTemplate) == 0x000260, "Wrong size on FKoratMovieSceneEventSceneImpactTemplate");
static_assert(offsetof(FKoratMovieSceneEventSceneImpactTemplate, RebindEvent00Reference) == 0x000020, "Member 'FKoratMovieSceneEventSceneImpactTemplate::RebindEvent00Reference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneImpactTemplate, RebindEvent01Reference) == 0x000140, "Member 'FKoratMovieSceneEventSceneImpactTemplate::RebindEvent01Reference' has a wrong offset!");

// ScriptStruct SS.SSComboBoxItemsInt32
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSComboBoxItemsInt32 final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSComboBoxItemsInt32) == 0x000008, "Wrong alignment on FSSComboBoxItemsInt32");
static_assert(sizeof(FSSComboBoxItemsInt32) == 0x000010, "Wrong size on FSSComboBoxItemsInt32");

// ScriptStruct SS.KoratTermsDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratTermsDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTermsDataList) == 0x000004, "Wrong alignment on FKoratTermsDataList");
static_assert(sizeof(FKoratTermsDataList) == 0x000008, "Wrong size on FKoratTermsDataList");
static_assert(offsetof(FKoratTermsDataList, Key) == 0x000000, "Member 'FKoratTermsDataList::Key' has a wrong offset!");

// ScriptStruct SS.MovieSceneKawaiiPhysicsSectionTemplate
// 0x0000 (0x0080 - 0x0080)
struct FMovieSceneKawaiiPhysicsSectionTemplate final : public FMovieSceneParameterSectionTemplate
{
};
static_assert(alignof(FMovieSceneKawaiiPhysicsSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneKawaiiPhysicsSectionTemplate");
static_assert(sizeof(FMovieSceneKawaiiPhysicsSectionTemplate) == 0x000080, "Wrong size on FMovieSceneKawaiiPhysicsSectionTemplate");

// ScriptStruct SS.SSDragonAdventureIFEventDataAssetRecord
// 0x0198 (0x0198 - 0x0000)
struct FSSDragonAdventureIFEventDataAssetRecord final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonAdventureIFBattleDataAsset*    BattleData;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonAdventureIFStoryDataAsset*     StoryData;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonAdventureIFTimeSliceDataAsset* TimeSliceData;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonAdventureIFFlyersDataAsset*    FlyersData;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      NextEvent;                                         // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 AnotherClearIndexArray;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          WriteOnceBranch;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WriteOnceIndex;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BranchEventName;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      NextEventByBranch;                                 // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      RequiredEventBlockMap;                             // 0x00E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            NotRequiredEventIndexMap;                          // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUnlockEventBlock;                                 // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBadEvend;                                       // 0x0189(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BadEvendRetryEventName;                            // 0x018C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFEventDataAssetRecord) == 0x000008, "Wrong alignment on FSSDragonAdventureIFEventDataAssetRecord");
static_assert(sizeof(FSSDragonAdventureIFEventDataAssetRecord) == 0x000198, "Wrong size on FSSDragonAdventureIFEventDataAssetRecord");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, EventName) == 0x000000, "Member 'FSSDragonAdventureIFEventDataAssetRecord::EventName' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, BattleData) == 0x000008, "Member 'FSSDragonAdventureIFEventDataAssetRecord::BattleData' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, StoryData) == 0x000010, "Member 'FSSDragonAdventureIFEventDataAssetRecord::StoryData' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, TimeSliceData) == 0x000018, "Member 'FSSDragonAdventureIFEventDataAssetRecord::TimeSliceData' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, FlyersData) == 0x000020, "Member 'FSSDragonAdventureIFEventDataAssetRecord::FlyersData' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, NextEvent) == 0x000028, "Member 'FSSDragonAdventureIFEventDataAssetRecord::NextEvent' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, AnotherClearIndexArray) == 0x000078, "Member 'FSSDragonAdventureIFEventDataAssetRecord::AnotherClearIndexArray' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, WriteOnceBranch) == 0x000088, "Member 'FSSDragonAdventureIFEventDataAssetRecord::WriteOnceBranch' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, WriteOnceIndex) == 0x00008C, "Member 'FSSDragonAdventureIFEventDataAssetRecord::WriteOnceIndex' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, BranchEventName) == 0x000090, "Member 'FSSDragonAdventureIFEventDataAssetRecord::BranchEventName' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, NextEventByBranch) == 0x000098, "Member 'FSSDragonAdventureIFEventDataAssetRecord::NextEventByBranch' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, RequiredEventBlockMap) == 0x0000E8, "Member 'FSSDragonAdventureIFEventDataAssetRecord::RequiredEventBlockMap' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, NotRequiredEventIndexMap) == 0x000138, "Member 'FSSDragonAdventureIFEventDataAssetRecord::NotRequiredEventIndexMap' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, bUnlockEventBlock) == 0x000188, "Member 'FSSDragonAdventureIFEventDataAssetRecord::bUnlockEventBlock' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, bIsBadEvend) == 0x000189, "Member 'FSSDragonAdventureIFEventDataAssetRecord::bIsBadEvend' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEventDataAssetRecord, BadEvendRetryEventName) == 0x00018C, "Member 'FSSDragonAdventureIFEventDataAssetRecord::BadEvendRetryEventName' has a wrong offset!");

// ScriptStruct SS.KoratBattleScenePhaseDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratBattleScenePhaseDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequencer;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleScenePhaseDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBattleScenePhaseDataAssetRecord");
static_assert(sizeof(FKoratBattleScenePhaseDataAssetRecord) == 0x000030, "Wrong size on FKoratBattleScenePhaseDataAssetRecord");
static_assert(offsetof(FKoratBattleScenePhaseDataAssetRecord, Sequencer) == 0x000000, "Member 'FKoratBattleScenePhaseDataAssetRecord::Sequencer' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneOutlineStencilIndexTemplate
// 0x0108 (0x0128 - 0x0020)
struct FKoratMovieSceneOutlineStencilIndexTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneByteChannel                 Stencil;                                           // 0x0020(0x0108)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneOutlineStencilIndexTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneOutlineStencilIndexTemplate");
static_assert(sizeof(FKoratMovieSceneOutlineStencilIndexTemplate) == 0x000128, "Wrong size on FKoratMovieSceneOutlineStencilIndexTemplate");
static_assert(offsetof(FKoratMovieSceneOutlineStencilIndexTemplate, Stencil) == 0x000020, "Member 'FKoratMovieSceneOutlineStencilIndexTemplate::Stencil' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubtitleDisplayTime
// 0x0008 (0x0008 - 0x0000)
struct FSSEventSceneSubtitleDisplayTime final
{
public:
	int32                                         LengthThreshold;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTimeSeconds;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubtitleDisplayTime) == 0x000004, "Wrong alignment on FSSEventSceneSubtitleDisplayTime");
static_assert(sizeof(FSSEventSceneSubtitleDisplayTime) == 0x000008, "Wrong size on FSSEventSceneSubtitleDisplayTime");
static_assert(offsetof(FSSEventSceneSubtitleDisplayTime, LengthThreshold) == 0x000000, "Member 'FSSEventSceneSubtitleDisplayTime::LengthThreshold' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubtitleDisplayTime, DisplayTimeSeconds) == 0x000004, "Member 'FSSEventSceneSubtitleDisplayTime::DisplayTimeSeconds' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubtitleDisplayTimeGroup
// 0x0010 (0x0010 - 0x0000)
struct FSSEventSceneSubtitleDisplayTimeGroup final
{
public:
	TArray<struct FSSEventSceneSubtitleDisplayTime> DisplayTimes;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubtitleDisplayTimeGroup) == 0x000008, "Wrong alignment on FSSEventSceneSubtitleDisplayTimeGroup");
static_assert(sizeof(FSSEventSceneSubtitleDisplayTimeGroup) == 0x000010, "Wrong size on FSSEventSceneSubtitleDisplayTimeGroup");
static_assert(offsetof(FSSEventSceneSubtitleDisplayTimeGroup, DisplayTimes) == 0x000000, "Member 'FSSEventSceneSubtitleDisplayTimeGroup::DisplayTimes' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupFigurePatternTransitionData
// 0x0050 (0x0050 - 0x0000)
struct FKoratBattleSetupFigurePatternTransitionData final
{
public:
	TMap<EBattleSetupFigurePatternType, struct FKoratBattleSetupTransitionDataRecord> TransitionData;                                    // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupFigurePatternTransitionData) == 0x000008, "Wrong alignment on FKoratBattleSetupFigurePatternTransitionData");
static_assert(sizeof(FKoratBattleSetupFigurePatternTransitionData) == 0x000050, "Wrong size on FKoratBattleSetupFigurePatternTransitionData");
static_assert(offsetof(FKoratBattleSetupFigurePatternTransitionData, TransitionData) == 0x000000, "Member 'FKoratBattleSetupFigurePatternTransitionData::TransitionData' has a wrong offset!");

// ScriptStruct SS.SSSubLevelTransitionData
// 0x0001 (0x0001 - 0x0000)
struct FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSubLevelTransitionData) == 0x000001, "Wrong alignment on FSSSubLevelTransitionData");
static_assert(sizeof(FSSSubLevelTransitionData) == 0x000001, "Wrong size on FSSSubLevelTransitionData");

// ScriptStruct SS.SSAdventureIfTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSAdventureIfTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAdventureIfTransitionData) == 0x000004, "Wrong alignment on FSSAdventureIfTransitionData");
static_assert(sizeof(FSSAdventureIfTransitionData) == 0x000010, "Wrong size on FSSAdventureIfTransitionData");

// ScriptStruct SS.KoratFreeTimelinePlaybckSettings
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FKoratFreeTimelinePlaybckSettings final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterEffectColorSetData      OptionCharEffectColorDataSet;                      // 0x00A8(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelinePlaybckSettings) == 0x000010, "Wrong alignment on FKoratFreeTimelinePlaybckSettings");
static_assert(sizeof(FKoratFreeTimelinePlaybckSettings) == 0x0000C0, "Wrong size on FKoratFreeTimelinePlaybckSettings");
static_assert(offsetof(FKoratFreeTimelinePlaybckSettings, OptionCharEffectColorDataSet) == 0x0000A8, "Member 'FKoratFreeTimelinePlaybckSettings::OptionCharEffectColorDataSet' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelinePlayerHandle
// 0x0120 (0x0120 - 0x0000)
struct FKoratFreeTimelinePlayerHandle final
{
public:
	int32                                         UniqueHandleId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayedOTLabel;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratPlayerRequestController*          RequestController;                                 // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratFreeTimelinePlaybckSettings      PlaybackSettings;                                  // 0x0010(0x00C0)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlayDetailInfo;                                    // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FKoratSequencePlayInfo                 PrevRequestPlayInfo;                               // 0x00E0(0x0020)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class UKoratFreeTimelinePlayerBase*           FreeTimelinePlayerInstance;                        // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UsedAsset;                                         // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelinePlayerHandle) == 0x000010, "Wrong alignment on FKoratFreeTimelinePlayerHandle");
static_assert(sizeof(FKoratFreeTimelinePlayerHandle) == 0x000120, "Wrong size on FKoratFreeTimelinePlayerHandle");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, UniqueHandleId) == 0x000000, "Member 'FKoratFreeTimelinePlayerHandle::UniqueHandleId' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, bPlayedOTLabel) == 0x000004, "Member 'FKoratFreeTimelinePlayerHandle::bPlayedOTLabel' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, RequestController) == 0x000008, "Member 'FKoratFreeTimelinePlayerHandle::RequestController' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, PlaybackSettings) == 0x000010, "Member 'FKoratFreeTimelinePlayerHandle::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, PlayDetailInfo) == 0x0000D0, "Member 'FKoratFreeTimelinePlayerHandle::PlayDetailInfo' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, PrevRequestPlayInfo) == 0x0000E0, "Member 'FKoratFreeTimelinePlayerHandle::PrevRequestPlayInfo' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, FreeTimelinePlayerInstance) == 0x000100, "Member 'FKoratFreeTimelinePlayerHandle::FreeTimelinePlayerInstance' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelinePlayerHandle, UsedAsset) == 0x000108, "Member 'FKoratFreeTimelinePlayerHandle::UsedAsset' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupMenuData
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratBattleSetupMenuData final
{
public:
	TMap<EKoratBattleSetupTransition, struct FKoratBattleSetupMenuTransitionData> TransitionData;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EKoratBattleSetupTransition, struct FKoratBattleSetupTransitionDataRecord> IdleData;                                          // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupMenuData) == 0x000008, "Wrong alignment on FKoratBattleSetupMenuData");
static_assert(sizeof(FKoratBattleSetupMenuData) == 0x0000A0, "Wrong size on FKoratBattleSetupMenuData");
static_assert(offsetof(FKoratBattleSetupMenuData, TransitionData) == 0x000000, "Member 'FKoratBattleSetupMenuData::TransitionData' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupMenuData, IdleData) == 0x000050, "Member 'FKoratBattleSetupMenuData::IdleData' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTypeSetting
// 0x0028 (0x0028 - 0x0000)
struct FKoratFreeTimelineTypeSetting final
{
public:
	bool                                          bUseOldFreeTimelineType;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineType                        FromOldFreeTimelineType;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsset;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        FromLevelSequece;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFreeTimelineTypeSetting) == 0x000008, "Wrong alignment on FKoratFreeTimelineTypeSetting");
static_assert(sizeof(FKoratFreeTimelineTypeSetting) == 0x000028, "Wrong size on FKoratFreeTimelineTypeSetting");
static_assert(offsetof(FKoratFreeTimelineTypeSetting, bUseOldFreeTimelineType) == 0x000000, "Member 'FKoratFreeTimelineTypeSetting::bUseOldFreeTimelineType' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineTypeSetting, FromOldFreeTimelineType) == 0x000001, "Member 'FKoratFreeTimelineTypeSetting::FromOldFreeTimelineType' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineTypeSetting, bUseAsset) == 0x000002, "Member 'FKoratFreeTimelineTypeSetting::bUseAsset' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineTypeSetting, FromLevelSequece) == 0x000008, "Member 'FKoratFreeTimelineTypeSetting::FromLevelSequece' has a wrong offset!");

// ScriptStruct SS.KoratBlastActionCategoryDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBlastActionCategoryDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlastActionCategoryDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBlastActionCategoryDataAssetRecord");
static_assert(sizeof(FKoratBlastActionCategoryDataAssetRecord) == 0x000001, "Wrong size on FKoratBlastActionCategoryDataAssetRecord");

// ScriptStruct SS.KoratGuardReactionDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratGuardReactionDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratGuardReactionDataAssetRecord) == 0x000001, "Wrong alignment on FKoratGuardReactionDataAssetRecord");
static_assert(sizeof(FKoratGuardReactionDataAssetRecord) == 0x000001, "Wrong size on FKoratGuardReactionDataAssetRecord");

// ScriptStruct SS.KoratBlastForteTypeDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBlastForteTypeDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlastForteTypeDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBlastForteTypeDataAssetRecord");
static_assert(sizeof(FKoratBlastForteTypeDataAssetRecord) == 0x000001, "Wrong size on FKoratBlastForteTypeDataAssetRecord");

// ScriptStruct SS.KoratBlastReactionDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratBlastReactionDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBlastReactionDataAssetRecord) == 0x000001, "Wrong alignment on FKoratBlastReactionDataAssetRecord");
static_assert(sizeof(FKoratBlastReactionDataAssetRecord) == 0x000001, "Wrong size on FKoratBlastReactionDataAssetRecord");

// ScriptStruct SS.KoratBuffCategoryDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FKoratBuffCategoryDataAssetRecord final
{
public:
	int32                                         OverlapMaxNum;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffCategoryDataAssetRecord) == 0x000004, "Wrong alignment on FKoratBuffCategoryDataAssetRecord");
static_assert(sizeof(FKoratBuffCategoryDataAssetRecord) == 0x000004, "Wrong size on FKoratBuffCategoryDataAssetRecord");
static_assert(offsetof(FKoratBuffCategoryDataAssetRecord, OverlapMaxNum) == 0x000000, "Member 'FKoratBuffCategoryDataAssetRecord::OverlapMaxNum' has a wrong offset!");

// ScriptStruct SS.KoratInteractAtbDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratInteractAtbDataAssetRecord final
{
public:
	class UKoratEffectAtbDataAsset*               EffectAtbDataAsset;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratParticleBranchDataAsset*          ParticleBranchRecored;                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractAtbDataAssetRecord) == 0x000008, "Wrong alignment on FKoratInteractAtbDataAssetRecord");
static_assert(sizeof(FKoratInteractAtbDataAssetRecord) == 0x000010, "Wrong size on FKoratInteractAtbDataAssetRecord");
static_assert(offsetof(FKoratInteractAtbDataAssetRecord, EffectAtbDataAsset) == 0x000000, "Member 'FKoratInteractAtbDataAssetRecord::EffectAtbDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratInteractAtbDataAssetRecord, ParticleBranchRecored) == 0x000008, "Member 'FKoratInteractAtbDataAssetRecord::ParticleBranchRecored' has a wrong offset!");

// ScriptStruct SS.KoratBulletEffectDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FKoratBulletEffectDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBulletEffectDataAssetRecord) == 0x000004, "Wrong alignment on FKoratBulletEffectDataAssetRecord");
static_assert(sizeof(FKoratBulletEffectDataAssetRecord) == 0x000004, "Wrong size on FKoratBulletEffectDataAssetRecord");
static_assert(offsetof(FKoratBulletEffectDataAssetRecord, SortId) == 0x000000, "Member 'FKoratBulletEffectDataAssetRecord::SortId' has a wrong offset!");

// ScriptStruct SS.KoratAttbuteParticleDataRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratAttbuteParticleDataRecord final
{
public:
	class FString                                 PrefixName;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UParticleSystem>> ParticleList;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAttbuteParticleDataRecord) == 0x000008, "Wrong alignment on FKoratAttbuteParticleDataRecord");
static_assert(sizeof(FKoratAttbuteParticleDataRecord) == 0x000020, "Wrong size on FKoratAttbuteParticleDataRecord");
static_assert(offsetof(FKoratAttbuteParticleDataRecord, PrefixName) == 0x000000, "Member 'FKoratAttbuteParticleDataRecord::PrefixName' has a wrong offset!");
static_assert(offsetof(FKoratAttbuteParticleDataRecord, ParticleList) == 0x000010, "Member 'FKoratAttbuteParticleDataRecord::ParticleList' has a wrong offset!");

// ScriptStruct SS.KoratCameraModeDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FKoratCameraModeDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCameraModeDataAssetRecord) == 0x000004, "Wrong alignment on FKoratCameraModeDataAssetRecord");
static_assert(sizeof(FKoratCameraModeDataAssetRecord) == 0x000004, "Wrong size on FKoratCameraModeDataAssetRecord");
static_assert(offsetof(FKoratCameraModeDataAssetRecord, SortId) == 0x000000, "Member 'FKoratCameraModeDataAssetRecord::SortId' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineRequestInfo
// 0x000C (0x000C - 0x0000)
struct FKoratFreeTimelineRequestInfo final
{
public:
	EKoratFreeTimelineActorRequest                CurrentState;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratFreeTimelineActorRequest                RequestState;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestPlayCount;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneShotExecuted;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateAfterChangeState;                           // 0x0009(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineRequestInfo) == 0x000004, "Wrong alignment on FKoratFreeTimelineRequestInfo");
static_assert(sizeof(FKoratFreeTimelineRequestInfo) == 0x00000C, "Wrong size on FKoratFreeTimelineRequestInfo");
static_assert(offsetof(FKoratFreeTimelineRequestInfo, CurrentState) == 0x000000, "Member 'FKoratFreeTimelineRequestInfo::CurrentState' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineRequestInfo, RequestState) == 0x000001, "Member 'FKoratFreeTimelineRequestInfo::RequestState' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineRequestInfo, RequestPlayCount) == 0x000004, "Member 'FKoratFreeTimelineRequestInfo::RequestPlayCount' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineRequestInfo, bOneShotExecuted) == 0x000008, "Member 'FKoratFreeTimelineRequestInfo::bOneShotExecuted' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineRequestInfo, bUpdateAfterChangeState) == 0x000009, "Member 'FKoratFreeTimelineRequestInfo::bUpdateAfterChangeState' has a wrong offset!");

// ScriptStruct SS.KoratAuraHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FKoratAuraHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAuraHandle) == 0x000004, "Wrong alignment on FKoratAuraHandle");
static_assert(sizeof(FKoratAuraHandle) == 0x000004, "Wrong size on FKoratAuraHandle");

// ScriptStruct SS.KoratByteParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FKoratByteParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneByteChannel                 ParameterCurve;                                    // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratByteParameterNameAndCurve) == 0x000008, "Wrong alignment on FKoratByteParameterNameAndCurve");
static_assert(sizeof(FKoratByteParameterNameAndCurve) == 0x000110, "Wrong size on FKoratByteParameterNameAndCurve");
static_assert(offsetof(FKoratByteParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FKoratByteParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FKoratByteParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FKoratByteParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct SS.KoratCharacterAuraComponentDebugAuraLevel
// 0x01E0 (0x01E0 - 0x0000)
struct FKoratCharacterAuraComponentDebugAuraLevel final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AuraLevel;                                         // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AKoratFreeTimelineActor> FreeTimelineActor;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USSAuraDataAsset>        AuraDataAsset;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USSAuraAssignDataAsset>  AuraAssignData;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectColorDataDetail            EffectColorDetail;                                 // 0x0028(0x0148)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FKoratAuraTransformOffset              TransformOffset;                                   // 0x0170(0x0070)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterAuraComponentDebugAuraLevel) == 0x000010, "Wrong alignment on FKoratCharacterAuraComponentDebugAuraLevel");
static_assert(sizeof(FKoratCharacterAuraComponentDebugAuraLevel) == 0x0001E0, "Wrong size on FKoratCharacterAuraComponentDebugAuraLevel");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, Priority) == 0x000000, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::Priority' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, AuraLevel) == 0x000004, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::AuraLevel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, FreeTimelineActor) == 0x00000C, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::FreeTimelineActor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, AuraDataAsset) == 0x000014, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::AuraDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, AuraAssignData) == 0x00001C, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::AuraAssignData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, EffectColorDetail) == 0x000028, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::EffectColorDetail' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAuraComponentDebugAuraLevel, TransformOffset) == 0x000170, "Member 'FKoratCharacterAuraComponentDebugAuraLevel::TransformOffset' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessChameleonComponentBaseCacheParameters
// 0x0ED8 (0x0ED8 - 0x0000)
struct FKoratPostProcessChameleonComponentBaseCacheParameters final
{
public:
	bool                                          BleachBypass;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityBleachBypass;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DistanceFog;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityDistanceFog;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DistanceFogNearColor;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DistanceFogFarColor;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFogDistance;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFogEdgeSharpness;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChannelClamper;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityChannelClamper;                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelClamperRedIntensity;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelClamperGreenIntensity;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelClamperBlueIntensity;                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChannelSwapper;                                    // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityChannelSwapper;                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratColorChannels                           ChannelSwapperRed;                                 // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratColorChannels                           ChannelSwapperGreen;                               // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratColorChannels                           ChannelSwapperBlue;                                // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScreenDrops;                                       // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ScreenDropsLayer1Map;                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer1Intensity;                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer1Speed;                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer1Noise;                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ScreenDropsLayer2Map;                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer2Intensity;                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer2Speed;                            // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer2Noise;                            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ScreenDropsLayer3Map;                              // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer3Intensity;                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer3Speed;                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsLayer3Noise;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScreenDropsDiffuseColor;                           // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsSplashesAmount;                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsSplashesTiling;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsSplashesIntensity;                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsBump;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenDropsDiffuseIntensity;                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alcohol;                                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlcoholSpeed;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlcoholOffset;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Drug;                                              // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrugSpeed;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mosaic;                                            // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MosaicScale;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Blur;                                              // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityBlur;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurAmount;                                        // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlurSamples;                                       // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DevOutline;                                        // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistortionTiring_U_Min;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionTiring_U_Max;                            // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionTiring_V_Min;                            // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionTiring_V_Max;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed_U;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed_V;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionValue;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DistortionMap;                                     // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo1;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor_S1_;                                  // 0x011C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBlendAmount_S1_;                            // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBrightness_S1_;                             // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineThickness_S1_;                              // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseFill_S1_;                                       // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBlendAmount_S1_;                               // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBrightness_S1_;                                // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ColorMap_S1_;                                      // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseContrast_S1_;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo2;                                        // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor_S2_;                                  // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBlendAmount_S2_;                            // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBrightness_S2_;                             // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineThickness_S2_;                              // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseFill_S2_;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBlendAmount_S2_;                               // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBrightness_S2_;                                // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ColorMap_S2_;                                      // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseContrast_S2_;                                 // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo3;                                        // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor_S3_;                                  // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBlendAmount_S3_;                            // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineBrightness_S3_;                             // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutlineThickness_S3_;                              // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseFill_S3_;                                       // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBlendAmount_S3_;                               // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBrightness_S3_;                                // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ColorMap_S3_;                                      // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseContrast_S3_;                                 // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo4;                                        // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseFill_S4_;                                       // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBlendAmount_S4_;                               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillBrightness_S4_;                                // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Colorize;                                          // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityColorize;                          // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorizeDetail;                                    // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Comic;                                             // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityComic;                             // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ComicBlendColor;                                   // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComicThreshold;                                    // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComicPreMultiplier;                                // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComicDesaturation;                                 // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComicPatternIntensity;                             // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComicPatternLineCount;                             // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComicPatternRotation;                              // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EdgeDetect;                                        // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EdgeDetectThreshold;                               // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrmarizedColor;                                    // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityDrmarizedColor;                    // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCDrowMapTornValue;                                // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCFinalPower;                                      // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCHatchPower;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCHatchRotation;                                   // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCHatchSpeed;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCLineBlendIntencity;                              // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCOterLineTargetBlendIntencity;                    // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCThicknessValue;                                  // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCEdgeDetection;                                   // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCEdgeColorBrightness;                             // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCEdgeHatchBias;                                   // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCDistortionDetail;                                // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCDistortionAnimSpeed;                             // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCDistortionStrength;                              // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCDistortionPower;                                 // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo_DrmarizedColor;                          // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Glitch;                                            // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlitchSpeed;                                       // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlitchLines;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlitchBlocking;                                    // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlitchGridDistortionPower;                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlitchGridDistortionSize;                          // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlitchGridDistortionSpeed;                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MonitorEffects;                                    // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MonitorEffectsLineCount;                           // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorEffectsIntensity1;                          // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorEffectsIntensity2;                          // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorEffectsDistortion1;                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorEffectsDistortion2;                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonitorEffectsPictureScale;                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MonitorEffectsTiled;                               // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BrightnessStrength;                                // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityBrightnessStrength;                // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HuePanner;                                         // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HuePannerSpeed;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Monochrome;                                        // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityMonochrome;                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MonochromeColor;                                   // 0x02B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RadialBlur;                                        // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityRadialBlur;                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadialBlur_Intensity;                              // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadialBlurWidth;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RadialBlurSamples;                                 // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadialBlurMaskDensity;                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RadialBlurCenter;                                  // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RadialBlurSampleOffset;                            // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RadialBlur_WorldToScreen;                          // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RadialBlur_IntensityDistanceAttenuation;           // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RadialBlur_CurveDistanceAttenuation;               // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Scratches;                                         // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ScratchesDistortionMap;                            // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScratchesDistortionAmount;                         // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScratchesColor;                                    // 0x0324(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScratchesNoising;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FakeVolumeShadow;                                  // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityFVS;                               // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FVSPivot_XY;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSColorCommon;                                    // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSShadowStrength;                                 // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSExcludeEmissive;                                // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSDepthDistance;                                  // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSDepthInvert;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSSamplesCommon;                                  // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSLineLengthCommon;                               // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSFadeFactorCommon;                               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSBrightness;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FVS_WorldToScreen;                                 // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FVSPivotX;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSPivotY;                                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSCharaMaskingValue;                              // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSMapTolerance;                                   // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FVSContrast;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invert;                                            // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityInvert;                            // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Pulse;                                             // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityPulse;                             // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseCenterX;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseCenterY;                                      // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseSpeed;                                        // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseSmoothing;                                    // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BWSpeedLines;                                      // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityBWSpeedLines;                      // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesIntensityBlackLine;                    // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesIntensityWhiteLine;                    // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesPivotX;                                // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesPivotY;                                // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesLineWidth;                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesLineSpeed;                             // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesMaskRadius;                            // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BWSpeedLinesMaskHardness;                          // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BWSpeedLinesUseNoiseMask;                          // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BWSpeedLinesNoiseSpeed;                            // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BWSpeedLines_WorldToScreen;                        // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BWSpeedLines_IntensityDistanceAttenuation;         // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BWSpeedLinesCenter;                                // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BWSpeedLines_CurveDistanceAttenuation;             // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tiles;                                             // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TilesCentered;                                     // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FA[0x2];                                      // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TilesCount;                                        // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TVNoise;                                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TVNoiseContrast;                                   // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TVNoiseIntensity;                                  // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LOOK_;                                             // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratLOOKPresetsEnum                         LOOK_Presets;                                      // 0x040D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Circles;                                           // 0x040E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40F[0x1];                                      // 0x040F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CirclesRatio;                                      // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CirclesTiling;                                     // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sonar;                                             // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SonarColor;                                        // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonarColorIntensity;                               // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonarDepth;                                        // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonarWaveDistance;                                 // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonarDistortionIntensity;                          // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonarSharpness;                                    // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DistanceDistortion;                                // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DistanceDistortionNormal;                          // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionAmount;                          // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionEdgeDistance;                    // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionEdgeFading;                      // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionMovementSpeed;                   // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionMovementScale;                   // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionAffectedBrightness;              // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDistortionUnaffectedBrightness;            // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Drawing;                                           // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DrawingPaperTexture;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDrawingNoiseModes                       DrawingNoiseAlgorithm;                             // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawingInkAmount;                                  // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingLinerAmount;                                // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawingBlendingColor;                              // 0x0484(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingAnimationSpeed;                             // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MagicTransitions;                                  // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MagicTransitionsFinalTexture;                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MagicTransitionsMaskTexture;                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicTransitionsTransitionAmount;                  // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicTransitionsFlashingIntensity;                 // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicTransitionsFlashingTolerance;                 // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MagicTransitionsFlashingColor;                     // 0x04BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZS_ScouterSearch;                                  // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityZSScouterSearch;                   // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScouterColor;                                      // 0x04D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseBlendIntensity;                               // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanLineBlendIntensity;                            // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanLineCount;                                     // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridIntensity;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridTile;                                          // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteRudiusScouter;                             // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteDensityScouter;                            // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo_ZSScouterSearch;                         // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SearchColor;                                       // 0x0504(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchThickness;                                   // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZS_AuraSearch;                                     // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityZSAuraSearch;                      // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distortion1;                                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distortion2;                                       // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderScale;                                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteRudius;                                    // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteDensity;                                   // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo_ZSAuraSearch;                            // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuraColor;                                         // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionDetail;                                  // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed;                                         // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionStrength;                                // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionPower;                                   // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sharpen;                                           // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacitySharpen;                           // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SharpenValue;                                      // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToonShading;                                       // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityToonShading;                       // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToonShadingUseDiffuseBuffer;                       // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56D[0x3];                                      // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ToonShadingDetails;                                // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToonShadingFading;                                 // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToonShadingSize;                                   // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToonShadingSobelStrength;                          // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VistaMask;                                         // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityVistaMask;                         // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VistaMaskScale;                                    // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VistaMaskRote;                                     // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VistaMaskDistance;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VistaMaskOffset;                                   // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Neon;                                              // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NeonRenderingOpacity;                              // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeonColor;                                         // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeonBackgroundColor;                               // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeonPower;                                         // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeonNoise;                                         // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeonNoiseSpeed;                                    // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomDepthHighlighter;                            // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDepthHighlighterHighlightColor;              // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomDepthHighlighterHighlightOpacity;            // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomDepthHighlighterOutlineColor;                // 0x05F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomDepthHighlighterOutlineOpacity;              // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomDepthHighlighter_Clip_;                      // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomDepthHighlighter_C_HighlightColor;           // 0x060C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomDepthHighlighter_C_HighlightOpacity;         // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomDepthHighlighter_C_OutlineColor;             // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomDepthHighlighter_C_OutlineOpacity;           // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unbound;                                           // 0x0635(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _2DTransform;                                      // 0x0636(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_637[0x1];                                      // 0x0637(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _2DTransformAnchorPoint_X_;                        // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformAnchorPoint_Y_;                        // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformRotate;                                // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformPan_X_;                                // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformPan_Y_;                                // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformScale_X_;                              // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _2DTransformScale_Y_;                              // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _2DTransformTiled;                                 // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _2DTransformBackgroundColor;                       // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SketchColor;                                       // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_669[0x3];                                      // 0x0669(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacitySC;                                // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCBGPencilValue;                                   // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCCharaPencilValue;                                // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCCoverColorValue;                                 // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumber1P;                                    // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumber2P;                                    // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCCharaCoverColorValue;                            // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCBGDesaturation;                                  // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCCharaDesaturation;                               // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumberBG;                                    // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumberCharaOUT;                              // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumberObj;                                   // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCFlipNumberSky;                                   // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCChrPencilShadowRange;                            // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCChrEdgeLineSamplingScale;                        // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCBGEdgeLineSamplingScale;                         // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SCChrPencilRangeContrast;                          // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SCEF1_color;                                       // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SCEF2_color;                                       // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Letterboxing;                                      // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LetterboxingTexture;                               // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterboxingSize;                                  // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LetterboxingHorizontal;                            // 0x06E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LetterboxingVertical;                              // 0x06E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Snow;                                              // 0x06E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E7[0x1];                                      // 0x06E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SnowAmount;                                        // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDistortion;                                    // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSize;                                          // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpeed_X_;                                      // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpeed_Y_;                                      // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldSplash;                                       // 0x06FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldSplashDistort;                                // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSplashSmoothness;                             // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSplashTiling;                                 // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WorldSplashColorTint;                              // 0x070C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JaggedLine;                                        // 0x071C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71D[0x3];                                      // 0x071D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityJaggedLine;                        // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastJLine;                                     // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityJLine;                                    // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerJLine;                                        // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFrequencyJLine;                               // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceThresholdJLine;                           // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurLengthJLine;                                   // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BlurDirectionJLine;                                // 0x0740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurSamplesJLine;                                  // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Digitize;                                          // 0x0754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_755[0x3];                                      // 0x0755(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DigitizeCellColor;                                 // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DigitizeCellPosition;                              // 0x0768(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DigitizeCellPositionOverTime;                      // 0x0780(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeDistance;                                  // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeDistanceSharpness;                         // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeCellSize;                                  // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeCellColorMultiplier;                       // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeCellDistortion;                            // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DigitizeBackgroundColorMultiplier;                 // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FakeLensFlare;                                     // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityFakeLensFlare;                     // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X_Offset;                                          // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y_Offset;                                          // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeSunRotePivot;                                  // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _3DSunAngleVector;                                 // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertFlareRotation;                               // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BloomTexture;                                      // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BloomMultColor;                                    // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomTexScale;                                     // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomRoteValue;                                    // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomIntencity;                                    // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F4[0x4];                                      // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FlareTexture;                                      // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FlareMultColor;                                    // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlareTexScale;                                     // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlareRoteValue;                                    // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlareIntencity;                                    // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81C[0x4];                                      // 0x081C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SparkleTexture;                                    // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SparkleMultColor;                                  // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkleTexScale;                                   // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkleRoteValue;                                  // 0x083C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkleIntencity;                                  // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sketch;                                            // 0x0844(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_845[0x3];                                      // 0x0845(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacitySketch;                            // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SketchBackgroundColor;                             // 0x084C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SketchPower;                                       // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SketchPatternRotation;                             // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SketchPatternSpeed;                                // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Wired;                                             // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WiredColor;                                        // 0x086C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WiredPower;                                        // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorFeaturette;                                   // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_881[0x3];                                      // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityActorFeaturette;                   // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActorFeaturetteBackgroundMultiplier;               // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorFeaturetteBackgroundDesaturation;             // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActorFeaturetteForegroundMultiplier;               // 0x089C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorFeaturetteForegroundSaturation;               // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorFeaturetteBlurAmount;                         // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorFeaturetteBlurSamples;                        // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorFeaturetteStencilMask;                        // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Infected;                                          // 0x08BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8BD[0x3];                                      // 0x08BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InfectedDistortionAmount;                          // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfectedSmoothness;                                // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfectedSpeed;                                     // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfectedTransformZ;                                // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ColoredAO;                                         // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D1[0x3];                                      // 0x08D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColoredAOColor;                                    // 0x08D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColoredAOIntensity;                                // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraShake;                                       // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E9[0x3];                                      // 0x08E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityCameraShake;                       // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakePower_X_;                               // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakePower_Y_;                               // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakeFrequency;                              // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StencilEmmisive;                                   // 0x08FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8FD[0x3];                                      // 0x08FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityStencilEmmisive;                   // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilEmmisiveStencilNo;                          // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StencilEmmisiveColor;                              // 0x0908(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilEmmisiveStrength;                           // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilEmmisiveNmlDrowStrength;                    // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilEmmisiveNmlBrightnessvalue;                 // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParaLights;                                        // 0x0924(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_925[0x3];                                      // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityParaLight;                         // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParaColor1;                                        // 0x092C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParaColor2;                                        // 0x093C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RudiusValue;                                       // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityValue;                                      // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetX;                                       // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetY;                                       // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MeltedWorld;                                       // 0x095C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeltedWorldSize;                                   // 0x0960(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeltedWorldDistance;                               // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeltedWorldPower;                                  // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeltedWorldSharpness;                              // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectiveColor;                                    // 0x0984(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacitySelectiveColor;                    // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectiveColorMaskColor;                           // 0x098C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectiveColorHueTolerance;                        // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectiveColorSaturationTolerance;                 // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectiveColorValueTolerance;                      // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WarpDistortion;                                    // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A9[0x3];                                      // 0x09A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityWarpDistotion;                     // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MaskTex;                                           // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pivot;                                             // 0x09B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeFactor;                                        // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskContrast;                                      // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskScale;                                         // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpScale;                                         // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpFactorShift;                                   // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpPower;                                         // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistAngle;                                        // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistFactorShift;                                  // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistPower;                                        // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Haunted;                                           // 0x09EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9ED[0x3];                                      // 0x09ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HauntedAmount;                                     // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HauntedMaskScale;                                  // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HauntedTexture;                                    // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HauntedTextureScale;                               // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GridCell;                                          // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GridCellAnimated;                                  // 0x0A05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A06[0x2];                                      // 0x0A06(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridCellAnimationSpeed;                            // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GridCellColor;                                     // 0x0A0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GridCellVoidColor;                                 // 0x0A1C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridCellTiling;                                    // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridCellTransitionAmount;                          // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LensDistortion;                                    // 0x0A34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A35[0x3];                                      // 0x0A35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LensDistortionOpticRefinement;                     // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensDistortionOpticSize;                           // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensDistortionOpticPositionX;                      // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensDistortionOpticPositionY;                      // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LensDistortionScopeTexture;                        // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensDistortionScopeTextureScaleX;                  // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensDistortionScopeTextureScaleY;                  // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Zone;                                              // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A59[0x3];                                      // 0x0A59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ZoneCenter;                                        // 0x0A5C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneRadius;                                        // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneEdgeHardness;                                  // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ZoneEdgeColor;                                     // 0x0A74(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ZoneCoverageColor;                                 // 0x0A84(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Drmarize;                                          // 0x0A94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A95[0x3];                                      // 0x0A95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityDrmarize;                          // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TypesOfLine;                                       // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DirectionPivot_XY;                                 // 0x0AA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RadualPivot_XY;                                    // 0x0AB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SamplesCommon;                                     // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineDetail;                                        // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineAnimSpeed;                                     // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineLengthCommon;                                  // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailBlemdValue;                                  // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightPowerCommon;                                 // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeFactorCommon;                                  // 0x0AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageValue;                                        // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadualFadeShift;                                   // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadualFadeScale;                                   // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Drmarize_WorldToScreen;                            // 0x0AF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Drmarize_IntensityDistanceAttenuation;             // 0x0AF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF6[0x2];                                      // 0x0AF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Drmarize_CurveDistanceAttenuation;                 // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mojo;                                              // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MojoAnimated;                                      // 0x0B01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B02[0x2];                                      // 0x0B02(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MojoAnimationSpeed;                                // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MojoMask;                                          // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MojoDistortionMap;                                 // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MojoDistortionAmount;                              // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MojoColor;                                         // 0x0B1C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MojoIntensity;                                     // 0x0B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MojoPhase;                                         // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MojoTolerance;                                     // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GradientFog;                                       // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B39[0x3];                                      // 0x0B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityGradientFog;                       // 0x0B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         GradientFogColors;                                 // 0x0B40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	float                                         GradientFogDistance;                               // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradientFogSharpness;                              // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CrossGlareSeaSurface;                              // 0x0B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B59[0x3];                                      // 0x0B59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityCrossGlareSeaSurface;              // 0x0B5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlareSeaSurfaceThreshold;                     // 0x0B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlareSeaSurfaceMaskStrength;                  // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlareSeaSurfaceIntensity;                     // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlareSeaSurfaceSteps;                         // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlareSeaSurfaceLength;                        // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CrossGlowColor;                                    // 0x0B74(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossGlowIntensity;                                // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteMaskRudius;                                // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteMaskDensity;                               // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteGradientOffsetX;                           // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteGradientOffsetY;                           // 0x0B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeedLines;                                        // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B99[0x3];                                      // 0x0B99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacitySpeedLines;                        // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesIntensity;                               // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesPivotX;                                  // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesPivotY;                                  // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesLineContrast;                            // 0x0BAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesLineWidth;                               // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesSpeed;                                   // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesMaskRadius;                              // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesMaskHardness;                            // 0x0BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeedLines_WorldToScreen;                          // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpeedLines_IntensityDistanceAttenuation;           // 0x0BC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC2[0x6];                                      // 0x0BC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpeedLinesCenter;                                  // 0x0BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedLines_CurveDistanceAttenuation;               // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GhostDistortion;                                   // 0x0BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE1[0x3];                                      // 0x0BE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StencilNo_GhostDistortion;                         // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GDHighColor;                                       // 0x0BE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GDMidColor;                                        // 0x0BF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GDLowColor;                                        // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDHighToModBranch;                                 // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDMidToLowBranch;                                  // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDMinBrightnessClamp;                              // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GDEdgeColor;                                       // 0x0C24(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDEdgeThreshold;                                   // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDEdgeEmmisive;                                    // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDDistortionDetail;                                // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDAnimSpeed;                                       // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDDistortion2_Muti;                                // 0x0C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDImageValue;                                      // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDDetailBlemdValue;                                // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDBrightness;                                      // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GDContrast;                                        // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChameleonOpacityValue;                             // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChameleonOpacityValue_NDF_;                        // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunAngleStrength;                                  // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysFalse;                                       // 0x0C64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSunAngleFromUDS;                                // 0x0C65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StaffDistortion;                                   // 0x0C66(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C67[0x1];                                      // 0x0C67(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             StaffDistDummyImageA;                              // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             StaffDistDummyImageB;                              // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistActiveValue;                              // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistImageAtoB;                                // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistMaskValue2Dto3D;                          // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StaffDistFilterColor;                              // 0x0C84(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StaffDistAuraColor;                                // 0x0C94(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistBulgeStrength;                            // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistBulgeRenderScale;                         // 0x0CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistBulgeTiled;                               // 0x0CAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistAuraSphereMaskRudius;                     // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistAuraSphereMaskDensity;                    // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistAuraSphereMaskOffset;                     // 0x0CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistAuraUVMapA;                               // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistAuraUVMapB;                               // 0x0CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistAuraUVMapC;                               // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistAuraUVAnimSpeed;                          // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffAuraBrightness;                               // 0x0D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistAuraContrast;                             // 0x0D0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistVignetteRudius;                           // 0x0D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistVignetteDencity;                          // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StaffDistVignetteUVOffset;                         // 0x0D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaffDistActiveCapture2D;                          // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StencilNo_StaffDistortion;                         // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tritone;                                           // 0x0D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D31[0x3];                                      // 0x0D31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityTritone;                           // 0x0D34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TritoneHighlight;                                  // 0x0D38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TritoneMidtone;                                    // 0x0D48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TritoneShadow;                                     // 0x0D58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TritoneContrast;                                   // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChrStencilColor;                                   // 0x0D6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6D[0x3];                                      // 0x0D6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderingOpacityCSC;                               // 0x0D70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCChrColorStrength;                               // 0x0D74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCBgColorStrength;                                // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEffColorStrength;                               // 0x0D7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCScrColorStrength;                               // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCTrsColorStrength;                               // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCHatchingBrendValue;                             // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCCHR1_Color;                                     // 0x0D8C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCCHR2_Color;                                     // 0x0D9C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCCHR3_Color;                                     // 0x0DAC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCCHR4_Color;                                     // 0x0DBC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCCHR5_Color;                                     // 0x0DCC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCBg_LineColor;                                   // 0x0DDC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCTRS_Color;                                      // 0x0DEC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCEF1_Color;                                      // 0x0DFC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCEF2_Color;                                      // 0x0E0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCEF3_Color;                                      // 0x0E1C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCEF4_Color;                                      // 0x0E2C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCScreenColor_U;                                  // 0x0E3C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CSCScreenColor_plus_U;                             // 0x0E4C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEdgeThickness;                                  // 0x0E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEdgeLineScaleHorizon;                           // 0x0E60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEdgeLineScaleVertical;                          // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEdgeCoefficient;                                // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCEdgeLineSamplingScale;                          // 0x0E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCSphereGradationStrength;                        // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCHatchRotation;                                  // 0x0E74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCHatchSpeed;                                     // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCHatchContrast;                                  // 0x0E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CSCHatchTexSize;                                   // 0x0E80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCTransitionTexAnimation_IN;                      // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSCTransitionTexAnimetion_OT;                      // 0x0E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectDetailForTimeScale;                          // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA1[0x3];                                      // 0x0EA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GetEmmisive;                                       // 0x0EA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaInfluence;                                    // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailTileX;                                       // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectEmissive;                                    // 0x0EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailTileY;                                       // 0x0EB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailAnim;                                        // 0x0EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailPower;                                       // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailStrength;                                    // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaEffectUVScale;                                // 0x0EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectMaskStrength;                                // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonoValue;                                         // 0x0ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalReversePower;                                // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OclusionPower;                                     // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessChameleonComponentBaseCacheParameters) == 0x000008, "Wrong alignment on FKoratPostProcessChameleonComponentBaseCacheParameters");
static_assert(sizeof(FKoratPostProcessChameleonComponentBaseCacheParameters) == 0x000ED8, "Wrong size on FKoratPostProcessChameleonComponentBaseCacheParameters");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BleachBypass) == 0x000000, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BleachBypass' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityBleachBypass) == 0x000004, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityBleachBypass' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceFog) == 0x000008, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceFog' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityDistanceFog) == 0x00000C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityDistanceFog' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceFogNearColor) == 0x000010, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceFogNearColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceFogFarColor) == 0x000020, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceFogFarColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceFogDistance) == 0x000030, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceFogDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceFogEdgeSharpness) == 0x000034, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceFogEdgeSharpness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelClamper) == 0x000038, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelClamper' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityChannelClamper) == 0x00003C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityChannelClamper' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelClamperRedIntensity) == 0x000040, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelClamperRedIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelClamperGreenIntensity) == 0x000044, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelClamperGreenIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelClamperBlueIntensity) == 0x000048, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelClamperBlueIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelSwapper) == 0x00004C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelSwapper' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityChannelSwapper) == 0x000050, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityChannelSwapper' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelSwapperRed) == 0x000054, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelSwapperRed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelSwapperGreen) == 0x000055, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelSwapperGreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChannelSwapperBlue) == 0x000056, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChannelSwapperBlue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDrops) == 0x000057, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDrops' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer1Map) == 0x000058, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer1Map' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer1Intensity) == 0x000060, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer1Intensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer1Speed) == 0x000064, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer1Speed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer1Noise) == 0x000068, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer1Noise' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer2Map) == 0x000070, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer2Map' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer2Intensity) == 0x000078, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer2Intensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer2Speed) == 0x00007C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer2Speed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer2Noise) == 0x000080, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer2Noise' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer3Map) == 0x000088, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer3Map' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer3Intensity) == 0x000090, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer3Intensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer3Speed) == 0x000094, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer3Speed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsLayer3Noise) == 0x000098, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsLayer3Noise' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsDiffuseColor) == 0x00009C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsDiffuseColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsSplashesAmount) == 0x0000AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsSplashesAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsSplashesTiling) == 0x0000B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsSplashesTiling' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsSplashesIntensity) == 0x0000B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsSplashesIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsBump) == 0x0000B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsBump' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScreenDropsDiffuseIntensity) == 0x0000BC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScreenDropsDiffuseIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Alcohol) == 0x0000C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Alcohol' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AlcoholSpeed) == 0x0000C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AlcoholSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AlcoholOffset) == 0x0000C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AlcoholOffset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drug) == 0x0000CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drug' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrugSpeed) == 0x0000D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrugSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Mosaic) == 0x0000D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Mosaic' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MosaicScale) == 0x0000D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MosaicScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Blur) == 0x0000DC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Blur' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityBlur) == 0x0000E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityBlur' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BlurAmount) == 0x0000E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BlurAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BlurSamples) == 0x0000E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BlurSamples' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DevOutline) == 0x0000EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DevOutline' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionTiring_U_Min) == 0x0000F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionTiring_U_Min' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionTiring_U_Max) == 0x0000F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionTiring_U_Max' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionTiring_V_Min) == 0x0000F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionTiring_V_Min' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionTiring_V_Max) == 0x0000FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionTiring_V_Max' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AnimSpeed_U) == 0x000100, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AnimSpeed_U' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AnimSpeed_V) == 0x000104, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AnimSpeed_V' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionValue) == 0x000108, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionMap) == 0x000110, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionMap' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo1) == 0x000118, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo1' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineColor_S1_) == 0x00011C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineColor_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBlendAmount_S1_) == 0x00012C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBlendAmount_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBrightness_S1_) == 0x000130, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBrightness_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineThickness_S1_) == 0x000134, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineThickness_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, UseFill_S1_) == 0x000138, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::UseFill_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBlendAmount_S1_) == 0x00013C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBlendAmount_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBrightness_S1_) == 0x000140, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBrightness_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColorMap_S1_) == 0x000148, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColorMap_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NoiseContrast_S1_) == 0x000150, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NoiseContrast_S1_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo2) == 0x000154, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo2' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineColor_S2_) == 0x000158, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineColor_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBlendAmount_S2_) == 0x000168, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBlendAmount_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBrightness_S2_) == 0x00016C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBrightness_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineThickness_S2_) == 0x000170, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineThickness_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, UseFill_S2_) == 0x000174, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::UseFill_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBlendAmount_S2_) == 0x000178, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBlendAmount_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBrightness_S2_) == 0x00017C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBrightness_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColorMap_S2_) == 0x000180, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColorMap_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NoiseContrast_S2_) == 0x000188, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NoiseContrast_S2_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo3) == 0x00018C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo3' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineColor_S3_) == 0x000190, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineColor_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBlendAmount_S3_) == 0x0001A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBlendAmount_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineBrightness_S3_) == 0x0001A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineBrightness_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OutlineThickness_S3_) == 0x0001A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OutlineThickness_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, UseFill_S3_) == 0x0001AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::UseFill_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBlendAmount_S3_) == 0x0001B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBlendAmount_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBrightness_S3_) == 0x0001B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBrightness_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColorMap_S3_) == 0x0001B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColorMap_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NoiseContrast_S3_) == 0x0001C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NoiseContrast_S3_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo4) == 0x0001C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo4' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, UseFill_S4_) == 0x0001C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::UseFill_S4_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBlendAmount_S4_) == 0x0001CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBlendAmount_S4_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FillBrightness_S4_) == 0x0001D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FillBrightness_S4_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Colorize) == 0x0001D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Colorize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityColorize) == 0x0001D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityColorize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColorizeDetail) == 0x0001DC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColorizeDetail' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Comic) == 0x0001E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Comic' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityComic) == 0x0001E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityComic' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicBlendColor) == 0x0001E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicBlendColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicThreshold) == 0x0001F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicThreshold' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicPreMultiplier) == 0x0001FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicPreMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicDesaturation) == 0x000200, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicDesaturation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicPatternIntensity) == 0x000204, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicPatternIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicPatternLineCount) == 0x000208, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicPatternLineCount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ComicPatternRotation) == 0x00020C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ComicPatternRotation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, EdgeDetect) == 0x000210, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::EdgeDetect' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, EdgeDetectThreshold) == 0x000214, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::EdgeDetectThreshold' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrmarizedColor) == 0x000218, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrmarizedColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityDrmarizedColor) == 0x00021C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityDrmarizedColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCDrowMapTornValue) == 0x000220, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCDrowMapTornValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCFinalPower) == 0x000224, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCFinalPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCHatchPower) == 0x000228, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCHatchPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCHatchRotation) == 0x00022C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCHatchRotation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCHatchSpeed) == 0x000230, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCHatchSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCLineBlendIntencity) == 0x000234, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCLineBlendIntencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCOterLineTargetBlendIntencity) == 0x000238, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCOterLineTargetBlendIntencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCThicknessValue) == 0x00023C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCThicknessValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCEdgeDetection) == 0x000240, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCEdgeDetection' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCEdgeColorBrightness) == 0x000244, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCEdgeColorBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCEdgeHatchBias) == 0x000248, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCEdgeHatchBias' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCDistortionDetail) == 0x00024C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCDistortionDetail' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCDistortionAnimSpeed) == 0x000250, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCDistortionAnimSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCDistortionStrength) == 0x000254, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCDistortionStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DCDistortionPower) == 0x000258, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DCDistortionPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo_DrmarizedColor) == 0x00025C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo_DrmarizedColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Glitch) == 0x000260, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Glitch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchSpeed) == 0x000264, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchLines) == 0x000268, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchBlocking) == 0x00026C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchBlocking' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchGridDistortionPower) == 0x000270, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchGridDistortionPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchGridDistortionSize) == 0x000274, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchGridDistortionSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GlitchGridDistortionSpeed) == 0x000278, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GlitchGridDistortionSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffects) == 0x00027C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffects' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsLineCount) == 0x000280, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsLineCount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsIntensity1) == 0x000284, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsIntensity1' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsIntensity2) == 0x000288, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsIntensity2' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsDistortion1) == 0x00028C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsDistortion1' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsDistortion2) == 0x000290, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsDistortion2' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsPictureScale) == 0x000294, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsPictureScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonitorEffectsTiled) == 0x000298, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonitorEffectsTiled' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BrightnessStrength) == 0x000299, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BrightnessStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityBrightnessStrength) == 0x00029C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityBrightnessStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Strength) == 0x0002A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Strength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HuePanner) == 0x0002A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HuePanner' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HuePannerSpeed) == 0x0002A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HuePannerSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Monochrome) == 0x0002AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Monochrome' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityMonochrome) == 0x0002B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityMonochrome' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonochromeColor) == 0x0002B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonochromeColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlur) == 0x0002C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlur' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityRadialBlur) == 0x0002C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityRadialBlur' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlur_Intensity) == 0x0002CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlur_Intensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlurWidth) == 0x0002D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlurWidth' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlurSamples) == 0x0002D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlurSamples' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlurMaskDensity) == 0x0002D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlurMaskDensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlurCenter) == 0x0002E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlurCenter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlurSampleOffset) == 0x0002F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlurSampleOffset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlur_WorldToScreen) == 0x000300, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlur_WorldToScreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlur_IntensityDistanceAttenuation) == 0x000301, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlur_IntensityDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadialBlur_CurveDistanceAttenuation) == 0x000308, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadialBlur_CurveDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Scratches) == 0x000310, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Scratches' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScratchesDistortionMap) == 0x000318, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScratchesDistortionMap' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScratchesDistortionAmount) == 0x000320, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScratchesDistortionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScratchesColor) == 0x000324, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScratchesColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScratchesNoising) == 0x000334, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScratchesNoising' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FakeVolumeShadow) == 0x000338, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FakeVolumeShadow' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityFVS) == 0x00033C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityFVS' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSPivot_XY) == 0x000340, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSPivot_XY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSColorCommon) == 0x000350, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSColorCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSShadowStrength) == 0x000354, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSShadowStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSExcludeEmissive) == 0x000358, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSExcludeEmissive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSDepthDistance) == 0x00035C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSDepthDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSDepthInvert) == 0x000360, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSDepthInvert' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSSamplesCommon) == 0x000364, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSSamplesCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSLineLengthCommon) == 0x000368, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSLineLengthCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSFadeFactorCommon) == 0x00036C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSFadeFactorCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSBrightness) == 0x000370, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVS_WorldToScreen) == 0x000374, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVS_WorldToScreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSPivotX) == 0x000378, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSPivotX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSPivotY) == 0x00037C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSPivotY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSCharaMaskingValue) == 0x000380, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSCharaMaskingValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSMapTolerance) == 0x000384, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSMapTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FVSContrast) == 0x000388, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FVSContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Invert) == 0x00038C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Invert' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityInvert) == 0x000390, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityInvert' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Pulse) == 0x000394, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Pulse' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityPulse) == 0x000398, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityPulse' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, PulseCenterX) == 0x00039C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::PulseCenterX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, PulseCenterY) == 0x0003A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::PulseCenterY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, PulseSpeed) == 0x0003A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::PulseSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, PulseSmoothing) == 0x0003A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::PulseSmoothing' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLines) == 0x0003AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityBWSpeedLines) == 0x0003B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityBWSpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesIntensityBlackLine) == 0x0003B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesIntensityBlackLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesIntensityWhiteLine) == 0x0003B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesIntensityWhiteLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesPivotX) == 0x0003BC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesPivotX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesPivotY) == 0x0003C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesPivotY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesLineWidth) == 0x0003C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesLineWidth' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesLineSpeed) == 0x0003C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesLineSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesMaskRadius) == 0x0003CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesMaskRadius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesMaskHardness) == 0x0003D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesMaskHardness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesUseNoiseMask) == 0x0003D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesUseNoiseMask' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesNoiseSpeed) == 0x0003D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesNoiseSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLines_WorldToScreen) == 0x0003DC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLines_WorldToScreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLines_IntensityDistanceAttenuation) == 0x0003DD, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLines_IntensityDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLinesCenter) == 0x0003E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLinesCenter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BWSpeedLines_CurveDistanceAttenuation) == 0x0003F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BWSpeedLines_CurveDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Tiles) == 0x0003F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Tiles' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TilesCentered) == 0x0003F9, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TilesCentered' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TilesCount) == 0x0003FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TilesCount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TVNoise) == 0x000400, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TVNoise' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TVNoiseContrast) == 0x000404, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TVNoiseContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TVNoiseIntensity) == 0x000408, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TVNoiseIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LOOK_) == 0x00040C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LOOK_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LOOK_Presets) == 0x00040D, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LOOK_Presets' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Circles) == 0x00040E, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Circles' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CirclesRatio) == 0x000410, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CirclesRatio' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CirclesTiling) == 0x000414, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CirclesTiling' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Sonar) == 0x000418, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Sonar' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarColor) == 0x00041C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarColorIntensity) == 0x00042C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarColorIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarDepth) == 0x000430, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarDepth' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarWaveDistance) == 0x000434, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarWaveDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarDistortionIntensity) == 0x000438, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarDistortionIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SonarSharpness) == 0x00043C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SonarSharpness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortion) == 0x000440, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionNormal) == 0x000448, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionNormal' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionAmount) == 0x000450, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionEdgeDistance) == 0x000454, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionEdgeDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionEdgeFading) == 0x000458, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionEdgeFading' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionMovementSpeed) == 0x00045C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionMovementSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionMovementScale) == 0x000460, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionMovementScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionAffectedBrightness) == 0x000464, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionAffectedBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistanceDistortionUnaffectedBrightness) == 0x000468, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistanceDistortionUnaffectedBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drawing) == 0x00046C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drawing' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingPaperTexture) == 0x000470, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingPaperTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingNoiseAlgorithm) == 0x000478, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingNoiseAlgorithm' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingInkAmount) == 0x00047C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingInkAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingLinerAmount) == 0x000480, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingLinerAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingBlendingColor) == 0x000484, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingBlendingColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DrawingAnimationSpeed) == 0x000494, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DrawingAnimationSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitions) == 0x000498, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitions' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsFinalTexture) == 0x0004A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsFinalTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsMaskTexture) == 0x0004A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsMaskTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsTransitionAmount) == 0x0004B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsTransitionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsFlashingIntensity) == 0x0004B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsFlashingIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsFlashingTolerance) == 0x0004B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsFlashingTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MagicTransitionsFlashingColor) == 0x0004BC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MagicTransitionsFlashingColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZS_ScouterSearch) == 0x0004CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZS_ScouterSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityZSScouterSearch) == 0x0004D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityZSScouterSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScouterColor) == 0x0004D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScouterColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NoiseBlendIntensity) == 0x0004E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NoiseBlendIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScanLineBlendIntensity) == 0x0004E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScanLineBlendIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ScanLineCount) == 0x0004EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ScanLineCount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridIntensity) == 0x0004F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridTile) == 0x0004F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridTile' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteRudiusScouter) == 0x0004F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteRudiusScouter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteDensityScouter) == 0x0004FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteDensityScouter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo_ZSScouterSearch) == 0x000500, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo_ZSScouterSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SearchColor) == 0x000504, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SearchColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SearchThickness) == 0x000514, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SearchThickness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZS_AuraSearch) == 0x000518, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZS_AuraSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityZSAuraSearch) == 0x00051C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityZSAuraSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Distortion1) == 0x000520, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Distortion1' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Distortion2) == 0x000524, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Distortion2' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderScale) == 0x000528, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteRudius) == 0x00052C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteRudius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteDensity) == 0x000530, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteDensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo_ZSAuraSearch) == 0x000534, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo_ZSAuraSearch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AuraColor) == 0x000538, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AuraColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionDetail) == 0x000548, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionDetail' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AnimSpeed) == 0x00054C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AnimSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionStrength) == 0x000550, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DistortionPower) == 0x000554, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DistortionPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Sharpen) == 0x000558, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Sharpen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacitySharpen) == 0x00055C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacitySharpen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SharpenValue) == 0x000560, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SharpenValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShading) == 0x000564, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShading' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityToonShading) == 0x000568, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityToonShading' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShadingUseDiffuseBuffer) == 0x00056C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShadingUseDiffuseBuffer' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShadingDetails) == 0x000570, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShadingDetails' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShadingFading) == 0x000574, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShadingFading' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShadingSize) == 0x000578, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShadingSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ToonShadingSobelStrength) == 0x00057C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ToonShadingSobelStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VistaMask) == 0x000580, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VistaMask' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityVistaMask) == 0x000584, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityVistaMask' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VistaMaskScale) == 0x000588, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VistaMaskScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VistaMaskRote) == 0x00058C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VistaMaskRote' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VistaMaskDistance) == 0x000590, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VistaMaskDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VistaMaskOffset) == 0x000598, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VistaMaskOffset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Neon) == 0x0005A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Neon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonRenderingOpacity) == 0x0005AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonRenderingOpacity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonColor) == 0x0005B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonBackgroundColor) == 0x0005C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonBackgroundColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonPower) == 0x0005D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonNoise) == 0x0005D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonNoise' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NeonNoiseSpeed) == 0x0005D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NeonNoiseSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter) == 0x0005DC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighterHighlightColor) == 0x0005E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighterHighlightColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighterHighlightOpacity) == 0x0005F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighterHighlightOpacity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighterOutlineColor) == 0x0005F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighterOutlineColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighterOutlineOpacity) == 0x000604, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighterOutlineOpacity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter_Clip_) == 0x000608, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter_Clip_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter_C_HighlightColor) == 0x00060C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter_C_HighlightColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter_C_HighlightOpacity) == 0x00061C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter_C_HighlightOpacity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter_C_OutlineColor) == 0x000620, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter_C_OutlineColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CustomDepthHighlighter_C_OutlineOpacity) == 0x000630, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CustomDepthHighlighter_C_OutlineOpacity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Enabled) == 0x000634, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Enabled' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Unbound) == 0x000635, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Unbound' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransform) == 0x000636, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransform' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformAnchorPoint_X_) == 0x000638, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformAnchorPoint_X_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformAnchorPoint_Y_) == 0x00063C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformAnchorPoint_Y_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformRotate) == 0x000640, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformRotate' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformPan_X_) == 0x000644, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformPan_X_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformPan_Y_) == 0x000648, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformPan_Y_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformScale_X_) == 0x00064C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformScale_X_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformScale_Y_) == 0x000650, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformScale_Y_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformTiled) == 0x000654, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformTiled' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _2DTransformBackgroundColor) == 0x000658, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_2DTransformBackgroundColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SketchColor) == 0x000668, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SketchColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacitySC) == 0x00066C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacitySC' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCBGPencilValue) == 0x000670, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCBGPencilValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCCharaPencilValue) == 0x000674, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCCharaPencilValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCCoverColorValue) == 0x000678, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCCoverColorValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumber1P) == 0x00067C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumber1P' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumber2P) == 0x000680, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumber2P' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCCharaCoverColorValue) == 0x000684, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCCharaCoverColorValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCBGDesaturation) == 0x000688, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCBGDesaturation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCCharaDesaturation) == 0x00068C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCCharaDesaturation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumberBG) == 0x000690, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumberBG' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumberCharaOUT) == 0x000694, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumberCharaOUT' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumberObj) == 0x000698, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumberObj' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCFlipNumberSky) == 0x00069C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCFlipNumberSky' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCChrPencilShadowRange) == 0x0006A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCChrPencilShadowRange' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCChrEdgeLineSamplingScale) == 0x0006A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCChrEdgeLineSamplingScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCBGEdgeLineSamplingScale) == 0x0006A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCBGEdgeLineSamplingScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCChrPencilRangeContrast) == 0x0006AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCChrPencilRangeContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCEF1_color) == 0x0006B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCEF1_color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SCEF2_color) == 0x0006C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SCEF2_color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Letterboxing) == 0x0006D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Letterboxing' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LetterboxingTexture) == 0x0006D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LetterboxingTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LetterboxingSize) == 0x0006E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LetterboxingSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LetterboxingHorizontal) == 0x0006E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LetterboxingHorizontal' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LetterboxingVertical) == 0x0006E5, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LetterboxingVertical' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Snow) == 0x0006E6, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Snow' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SnowAmount) == 0x0006E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SnowAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SnowDistortion) == 0x0006EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SnowDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SnowSize) == 0x0006F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SnowSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SnowSpeed_X_) == 0x0006F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SnowSpeed_X_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SnowSpeed_Y_) == 0x0006F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SnowSpeed_Y_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WorldSplash) == 0x0006FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WorldSplash' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WorldSplashDistort) == 0x000700, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WorldSplashDistort' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WorldSplashSmoothness) == 0x000704, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WorldSplashSmoothness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WorldSplashTiling) == 0x000708, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WorldSplashTiling' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WorldSplashColorTint) == 0x00070C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WorldSplashColorTint' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, JaggedLine) == 0x00071C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::JaggedLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityJaggedLine) == 0x000720, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityJaggedLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ContrastJLine) == 0x000724, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ContrastJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, IntensityJLine) == 0x000728, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::IntensityJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, PowerJLine) == 0x00072C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::PowerJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NoiseFrequencyJLine) == 0x000730, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NoiseFrequencyJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LuminanceThresholdJLine) == 0x000734, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LuminanceThresholdJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BlurLengthJLine) == 0x000738, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BlurLengthJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BlurDirectionJLine) == 0x000740, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BlurDirectionJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BlurSamplesJLine) == 0x000750, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BlurSamplesJLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Digitize) == 0x000754, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Digitize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellColor) == 0x000758, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellPosition) == 0x000768, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellPosition' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellPositionOverTime) == 0x000780, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellPositionOverTime' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeDistance) == 0x000798, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeDistanceSharpness) == 0x00079C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeDistanceSharpness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellSize) == 0x0007A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellColorMultiplier) == 0x0007A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellColorMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeCellDistortion) == 0x0007A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeCellDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DigitizeBackgroundColorMultiplier) == 0x0007AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DigitizeBackgroundColorMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FakeLensFlare) == 0x0007B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FakeLensFlare' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityFakeLensFlare) == 0x0007B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityFakeLensFlare' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, X_Offset) == 0x0007B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::X_Offset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Y_Offset) == 0x0007BC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Y_Offset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FakeSunRotePivot) == 0x0007C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FakeSunRotePivot' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, _3DSunAngleVector) == 0x0007C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::_3DSunAngleVector' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, InvertFlareRotation) == 0x0007C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::InvertFlareRotation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BloomTexture) == 0x0007D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BloomTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BloomMultColor) == 0x0007D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BloomMultColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BloomTexScale) == 0x0007E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BloomTexScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BloomRoteValue) == 0x0007EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BloomRoteValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, BloomIntencity) == 0x0007F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::BloomIntencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FlareTexture) == 0x0007F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FlareTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FlareMultColor) == 0x000800, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FlareMultColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FlareTexScale) == 0x000810, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FlareTexScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FlareRoteValue) == 0x000814, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FlareRoteValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FlareIntencity) == 0x000818, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FlareIntencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SparkleTexture) == 0x000820, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SparkleTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SparkleMultColor) == 0x000828, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SparkleMultColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SparkleTexScale) == 0x000838, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SparkleTexScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SparkleRoteValue) == 0x00083C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SparkleRoteValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SparkleIntencity) == 0x000840, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SparkleIntencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Sketch) == 0x000844, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Sketch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacitySketch) == 0x000848, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacitySketch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SketchBackgroundColor) == 0x00084C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SketchBackgroundColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SketchPower) == 0x00085C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SketchPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SketchPatternRotation) == 0x000860, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SketchPatternRotation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SketchPatternSpeed) == 0x000864, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SketchPatternSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Wired) == 0x000868, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Wired' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WiredColor) == 0x00086C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WiredColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WiredPower) == 0x00087C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WiredPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturette) == 0x000880, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturette' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityActorFeaturette) == 0x000884, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityActorFeaturette' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteBackgroundMultiplier) == 0x000888, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteBackgroundMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteBackgroundDesaturation) == 0x000898, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteBackgroundDesaturation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteForegroundMultiplier) == 0x00089C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteForegroundMultiplier' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteForegroundSaturation) == 0x0008AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteForegroundSaturation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteBlurAmount) == 0x0008B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteBlurAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteBlurSamples) == 0x0008B4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteBlurSamples' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ActorFeaturetteStencilMask) == 0x0008B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ActorFeaturetteStencilMask' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Infected) == 0x0008BC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Infected' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, InfectedDistortionAmount) == 0x0008C0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::InfectedDistortionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, InfectedSmoothness) == 0x0008C4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::InfectedSmoothness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, InfectedSpeed) == 0x0008C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::InfectedSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, InfectedTransformZ) == 0x0008CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::InfectedTransformZ' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColoredAO) == 0x0008D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColoredAO' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColoredAOColor) == 0x0008D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColoredAOColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ColoredAOIntensity) == 0x0008E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ColoredAOIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CameraShake) == 0x0008E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CameraShake' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityCameraShake) == 0x0008EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityCameraShake' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CameraShakePower_X_) == 0x0008F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CameraShakePower_X_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CameraShakePower_Y_) == 0x0008F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CameraShakePower_Y_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CameraShakeFrequency) == 0x0008F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CameraShakeFrequency' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisive) == 0x0008FC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityStencilEmmisive) == 0x000900, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityStencilEmmisive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisiveStencilNo) == 0x000904, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisiveStencilNo' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisiveColor) == 0x000908, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisiveColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisiveStrength) == 0x000918, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisiveStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisiveNmlDrowStrength) == 0x00091C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisiveNmlDrowStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilEmmisiveNmlBrightnessvalue) == 0x000920, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilEmmisiveNmlBrightnessvalue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ParaLights) == 0x000924, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ParaLights' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityParaLight) == 0x000928, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityParaLight' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ParaColor1) == 0x00092C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ParaColor1' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ParaColor2) == 0x00093C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ParaColor2' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RudiusValue) == 0x00094C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RudiusValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DensityValue) == 0x000950, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DensityValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MaskOffsetX) == 0x000954, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MaskOffsetX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MaskOffsetY) == 0x000958, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MaskOffsetY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MeltedWorld) == 0x00095C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MeltedWorld' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MeltedWorldSize) == 0x000960, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MeltedWorldSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MeltedWorldDistance) == 0x000978, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MeltedWorldDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MeltedWorldPower) == 0x00097C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MeltedWorldPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MeltedWorldSharpness) == 0x000980, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MeltedWorldSharpness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SelectiveColor) == 0x000984, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SelectiveColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacitySelectiveColor) == 0x000988, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacitySelectiveColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SelectiveColorMaskColor) == 0x00098C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SelectiveColorMaskColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SelectiveColorHueTolerance) == 0x00099C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SelectiveColorHueTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SelectiveColorSaturationTolerance) == 0x0009A0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SelectiveColorSaturationTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SelectiveColorValueTolerance) == 0x0009A4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SelectiveColorValueTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WarpDistortion) == 0x0009A8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WarpDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityWarpDistotion) == 0x0009AC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityWarpDistotion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MaskTex) == 0x0009B0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MaskTex' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Pivot) == 0x0009B8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Pivot' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FadeFactor) == 0x0009C8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FadeFactor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MaskContrast) == 0x0009CC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MaskContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MaskScale) == 0x0009D0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MaskScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WarpScale) == 0x0009D4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WarpScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WarpFactorShift) == 0x0009D8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WarpFactorShift' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WarpPower) == 0x0009DC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WarpPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TwistAngle) == 0x0009E0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TwistAngle' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TwistFactorShift) == 0x0009E4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TwistFactorShift' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TwistPower) == 0x0009E8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TwistPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Haunted) == 0x0009EC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Haunted' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HauntedAmount) == 0x0009F0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HauntedAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HauntedMaskScale) == 0x0009F4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HauntedMaskScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HauntedTexture) == 0x0009F8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HauntedTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, HauntedTextureScale) == 0x000A00, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::HauntedTextureScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCell) == 0x000A04, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCell' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellAnimated) == 0x000A05, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellAnimated' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellAnimationSpeed) == 0x000A08, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellAnimationSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellColor) == 0x000A0C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellVoidColor) == 0x000A1C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellVoidColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellTiling) == 0x000A2C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellTiling' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GridCellTransitionAmount) == 0x000A30, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GridCellTransitionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortion) == 0x000A34, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionOpticRefinement) == 0x000A38, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionOpticRefinement' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionOpticSize) == 0x000A3C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionOpticSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionOpticPositionX) == 0x000A40, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionOpticPositionX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionOpticPositionY) == 0x000A44, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionOpticPositionY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionScopeTexture) == 0x000A48, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionScopeTexture' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionScopeTextureScaleX) == 0x000A50, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionScopeTextureScaleX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LensDistortionScopeTextureScaleY) == 0x000A54, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LensDistortionScopeTextureScaleY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Zone) == 0x000A58, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Zone' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZoneCenter) == 0x000A5C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZoneCenter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZoneRadius) == 0x000A6C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZoneRadius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZoneEdgeHardness) == 0x000A70, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZoneEdgeHardness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZoneEdgeColor) == 0x000A74, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZoneEdgeColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ZoneCoverageColor) == 0x000A84, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ZoneCoverageColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drmarize) == 0x000A94, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drmarize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityDrmarize) == 0x000A98, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityDrmarize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TypesOfLine) == 0x000A9C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TypesOfLine' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DirectionPivot_XY) == 0x000AA0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DirectionPivot_XY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadualPivot_XY) == 0x000AB0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadualPivot_XY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SamplesCommon) == 0x000AC0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SamplesCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LineDetail) == 0x000AC4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LineDetail' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LineAnimSpeed) == 0x000AC8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LineAnimSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, LineLengthCommon) == 0x000ACC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::LineLengthCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Threshold) == 0x000AD0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Threshold' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Brightness) == 0x000AD4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Brightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Contrast) == 0x000AD8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Contrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailBlemdValue) == 0x000ADC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailBlemdValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, WeightPowerCommon) == 0x000AE0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::WeightPowerCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, FadeFactorCommon) == 0x000AE4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::FadeFactorCommon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ImageValue) == 0x000AE8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ImageValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadualFadeShift) == 0x000AEC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadualFadeShift' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RadualFadeScale) == 0x000AF0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RadualFadeScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drmarize_WorldToScreen) == 0x000AF4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drmarize_WorldToScreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drmarize_IntensityDistanceAttenuation) == 0x000AF5, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drmarize_IntensityDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Drmarize_CurveDistanceAttenuation) == 0x000AF8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Drmarize_CurveDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Mojo) == 0x000B00, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Mojo' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoAnimated) == 0x000B01, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoAnimated' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoAnimationSpeed) == 0x000B04, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoAnimationSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoMask) == 0x000B08, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoMask' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoDistortionMap) == 0x000B10, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoDistortionMap' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoDistortionAmount) == 0x000B18, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoDistortionAmount' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoColor) == 0x000B1C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoIntensity) == 0x000B2C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoPhase) == 0x000B30, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoPhase' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MojoTolerance) == 0x000B34, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MojoTolerance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GradientFog) == 0x000B38, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GradientFog' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityGradientFog) == 0x000B3C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityGradientFog' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GradientFogColors) == 0x000B40, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GradientFogColors' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GradientFogDistance) == 0x000B50, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GradientFogDistance' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GradientFogSharpness) == 0x000B54, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GradientFogSharpness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurface) == 0x000B58, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurface' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityCrossGlareSeaSurface) == 0x000B5C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityCrossGlareSeaSurface' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurfaceThreshold) == 0x000B60, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurfaceThreshold' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurfaceMaskStrength) == 0x000B64, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurfaceMaskStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurfaceIntensity) == 0x000B68, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurfaceIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurfaceSteps) == 0x000B6C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurfaceSteps' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlareSeaSurfaceLength) == 0x000B70, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlareSeaSurfaceLength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlowColor) == 0x000B74, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlowColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CrossGlowIntensity) == 0x000B84, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CrossGlowIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteMaskRudius) == 0x000B88, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteMaskRudius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteMaskDensity) == 0x000B8C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteMaskDensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteGradientOffsetX) == 0x000B90, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteGradientOffsetX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, VignetteGradientOffsetY) == 0x000B94, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::VignetteGradientOffsetY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLines) == 0x000B98, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacitySpeedLines) == 0x000B9C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacitySpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesIntensity) == 0x000BA0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesIntensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesPivotX) == 0x000BA4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesPivotX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesPivotY) == 0x000BA8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesPivotY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesLineContrast) == 0x000BAC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesLineContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesLineWidth) == 0x000BB0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesLineWidth' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesSpeed) == 0x000BB4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesMaskRadius) == 0x000BB8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesMaskRadius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesMaskHardness) == 0x000BBC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesMaskHardness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLines_WorldToScreen) == 0x000BC0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLines_WorldToScreen' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLines_IntensityDistanceAttenuation) == 0x000BC1, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLines_IntensityDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLinesCenter) == 0x000BC8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLinesCenter' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SpeedLines_CurveDistanceAttenuation) == 0x000BD8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SpeedLines_CurveDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GhostDistortion) == 0x000BE0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GhostDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo_GhostDistortion) == 0x000BE4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo_GhostDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDHighColor) == 0x000BE8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDHighColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDMidColor) == 0x000BF8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDMidColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDLowColor) == 0x000C08, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDLowColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDHighToModBranch) == 0x000C18, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDHighToModBranch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDMidToLowBranch) == 0x000C1C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDMidToLowBranch' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDMinBrightnessClamp) == 0x000C20, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDMinBrightnessClamp' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDEdgeColor) == 0x000C24, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDEdgeColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDEdgeThreshold) == 0x000C34, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDEdgeThreshold' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDEdgeEmmisive) == 0x000C38, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDEdgeEmmisive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDDistortionDetail) == 0x000C3C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDDistortionDetail' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDAnimSpeed) == 0x000C40, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDAnimSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDDistortion2_Muti) == 0x000C44, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDDistortion2_Muti' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDImageValue) == 0x000C48, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDImageValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDDetailBlemdValue) == 0x000C4C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDDetailBlemdValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDBrightness) == 0x000C50, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GDContrast) == 0x000C54, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GDContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChameleonOpacityValue) == 0x000C58, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChameleonOpacityValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChameleonOpacityValue_NDF_) == 0x000C5C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChameleonOpacityValue_NDF_' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, SunAngleStrength) == 0x000C60, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::SunAngleStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, AlwaysFalse) == 0x000C64, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::AlwaysFalse' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, UseSunAngleFromUDS) == 0x000C65, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::UseSunAngleFromUDS' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistortion) == 0x000C66, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistDummyImageA) == 0x000C68, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistDummyImageA' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistDummyImageB) == 0x000C70, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistDummyImageB' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistActiveValue) == 0x000C78, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistActiveValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistImageAtoB) == 0x000C7C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistImageAtoB' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistMaskValue2Dto3D) == 0x000C80, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistMaskValue2Dto3D' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistFilterColor) == 0x000C84, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistFilterColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraColor) == 0x000C94, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistBulgeStrength) == 0x000CA4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistBulgeStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistBulgeRenderScale) == 0x000CA8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistBulgeRenderScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistBulgeTiled) == 0x000CAC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistBulgeTiled' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraSphereMaskRudius) == 0x000CB0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraSphereMaskRudius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraSphereMaskDensity) == 0x000CB4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraSphereMaskDensity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraSphereMaskOffset) == 0x000CB8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraSphereMaskOffset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraUVMapA) == 0x000CC8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraUVMapA' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraUVMapB) == 0x000CD8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraUVMapB' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraUVMapC) == 0x000CE8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraUVMapC' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraUVAnimSpeed) == 0x000CF8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraUVAnimSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffAuraBrightness) == 0x000D08, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffAuraBrightness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistAuraContrast) == 0x000D0C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistAuraContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistVignetteRudius) == 0x000D10, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistVignetteRudius' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistVignetteDencity) == 0x000D14, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistVignetteDencity' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistVignetteUVOffset) == 0x000D18, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistVignetteUVOffset' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StaffDistActiveCapture2D) == 0x000D28, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StaffDistActiveCapture2D' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, StencilNo_StaffDistortion) == 0x000D2C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::StencilNo_StaffDistortion' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, Tritone) == 0x000D30, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::Tritone' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityTritone) == 0x000D34, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityTritone' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TritoneHighlight) == 0x000D38, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TritoneHighlight' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TritoneMidtone) == 0x000D48, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TritoneMidtone' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TritoneShadow) == 0x000D58, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TritoneShadow' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, TritoneContrast) == 0x000D68, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::TritoneContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, ChrStencilColor) == 0x000D6C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::ChrStencilColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, RenderingOpacityCSC) == 0x000D70, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::RenderingOpacityCSC' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCChrColorStrength) == 0x000D74, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCChrColorStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCBgColorStrength) == 0x000D78, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCBgColorStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEffColorStrength) == 0x000D7C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEffColorStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCScrColorStrength) == 0x000D80, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCScrColorStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCTrsColorStrength) == 0x000D84, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCTrsColorStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCHatchingBrendValue) == 0x000D88, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCHatchingBrendValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCCHR1_Color) == 0x000D8C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCCHR1_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCCHR2_Color) == 0x000D9C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCCHR2_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCCHR3_Color) == 0x000DAC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCCHR3_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCCHR4_Color) == 0x000DBC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCCHR4_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCCHR5_Color) == 0x000DCC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCCHR5_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCBg_LineColor) == 0x000DDC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCBg_LineColor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCTRS_Color) == 0x000DEC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCTRS_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEF1_Color) == 0x000DFC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEF1_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEF2_Color) == 0x000E0C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEF2_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEF3_Color) == 0x000E1C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEF3_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEF4_Color) == 0x000E2C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEF4_Color' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCScreenColor_U) == 0x000E3C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCScreenColor_U' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCScreenColor_plus_U) == 0x000E4C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCScreenColor_plus_U' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEdgeThickness) == 0x000E5C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEdgeThickness' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEdgeLineScaleHorizon) == 0x000E60, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEdgeLineScaleHorizon' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEdgeLineScaleVertical) == 0x000E64, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEdgeLineScaleVertical' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEdgeCoefficient) == 0x000E68, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEdgeCoefficient' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCEdgeLineSamplingScale) == 0x000E6C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCEdgeLineSamplingScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCSphereGradationStrength) == 0x000E70, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCSphereGradationStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCHatchRotation) == 0x000E74, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCHatchRotation' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCHatchSpeed) == 0x000E78, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCHatchSpeed' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCHatchContrast) == 0x000E7C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCHatchContrast' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCHatchTexSize) == 0x000E80, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCHatchTexSize' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCTransitionTexAnimation_IN) == 0x000E98, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCTransitionTexAnimation_IN' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CSCTransitionTexAnimetion_OT) == 0x000E9C, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CSCTransitionTexAnimetion_OT' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, EffectDetailForTimeScale) == 0x000EA0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::EffectDetailForTimeScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, GetEmmisive) == 0x000EA4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::GetEmmisive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CharaInfluence) == 0x000EA8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CharaInfluence' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailTileX) == 0x000EAC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailTileX' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, EffectEmissive) == 0x000EB0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::EffectEmissive' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailTileY) == 0x000EB4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailTileY' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailAnim) == 0x000EB8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailAnim' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailPower) == 0x000EBC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailPower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, DetailStrength) == 0x000EC0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::DetailStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, CharaEffectUVScale) == 0x000EC4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::CharaEffectUVScale' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, EffectMaskStrength) == 0x000EC8, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::EffectMaskStrength' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, MonoValue) == 0x000ECC, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::MonoValue' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, NormalReversePower) == 0x000ED0, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::NormalReversePower' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonComponentBaseCacheParameters, OclusionPower) == 0x000ED4, "Member 'FKoratPostProcessChameleonComponentBaseCacheParameters::OclusionPower' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessWorldToScreenComponentCacheParameters
// 0x0040 (0x0040 - 0x0000)
struct FKoratPostProcessWorldToScreenComponentCacheParameters final
{
public:
	bool                                          bAutoActivate;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  LocationActor;                                     // 0x0008(0x0030)(Edit, BlueprintVisible, Interp, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPostProcessWorldToScreenComponentCacheParameters) == 0x000008, "Wrong alignment on FKoratPostProcessWorldToScreenComponentCacheParameters");
static_assert(sizeof(FKoratPostProcessWorldToScreenComponentCacheParameters) == 0x000040, "Wrong size on FKoratPostProcessWorldToScreenComponentCacheParameters");
static_assert(offsetof(FKoratPostProcessWorldToScreenComponentCacheParameters, bAutoActivate) == 0x000000, "Member 'FKoratPostProcessWorldToScreenComponentCacheParameters::bAutoActivate' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessWorldToScreenComponentCacheParameters, LocationActor) == 0x000008, "Member 'FKoratPostProcessWorldToScreenComponentCacheParameters::LocationActor' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessWorldToScreenComponentCacheParameters, PlayerControllerIndex) == 0x000038, "Member 'FKoratPostProcessWorldToScreenComponentCacheParameters::PlayerControllerIndex' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessChameleonCacheParameters
// 0x1018 (0x1018 - 0x0000)
struct FKoratPostProcessChameleonCacheParameters final
{
public:
	struct FKoratPostProcessChameleonComponentBaseCacheParameters BaseParameters;                                    // 0x0000(0x0ED8)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKoratPostProcessWorldToScreenComponentCacheParameters WorldToScreenRadialBlur;                           // 0x0ED8(0x0040)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKoratPostProcessWorldToScreenComponentCacheParameters WorldToScreenSpeedLines;                           // 0x0F18(0x0040)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKoratPostProcessWorldToScreenComponentCacheParameters WorldToScreenBWSpeedLines;                         // 0x0F58(0x0040)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKoratPostProcessWorldToScreenComponentCacheParameters WorldToScreenFVS;                                  // 0x0F98(0x0040)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKoratPostProcessWorldToScreenComponentCacheParameters WorldToScreenDrmarize;                             // 0x0FD8(0x0040)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessChameleonCacheParameters) == 0x000008, "Wrong alignment on FKoratPostProcessChameleonCacheParameters");
static_assert(sizeof(FKoratPostProcessChameleonCacheParameters) == 0x001018, "Wrong size on FKoratPostProcessChameleonCacheParameters");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, BaseParameters) == 0x000000, "Member 'FKoratPostProcessChameleonCacheParameters::BaseParameters' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, WorldToScreenRadialBlur) == 0x000ED8, "Member 'FKoratPostProcessChameleonCacheParameters::WorldToScreenRadialBlur' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, WorldToScreenSpeedLines) == 0x000F18, "Member 'FKoratPostProcessChameleonCacheParameters::WorldToScreenSpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, WorldToScreenBWSpeedLines) == 0x000F58, "Member 'FKoratPostProcessChameleonCacheParameters::WorldToScreenBWSpeedLines' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, WorldToScreenFVS) == 0x000F98, "Member 'FKoratPostProcessChameleonCacheParameters::WorldToScreenFVS' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessChameleonCacheParameters, WorldToScreenDrmarize) == 0x000FD8, "Member 'FKoratPostProcessChameleonCacheParameters::WorldToScreenDrmarize' has a wrong offset!");

// ScriptStruct SS.KoratShopSalesItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratShopSalesItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratShopSalesItemDataList) == 0x000004, "Wrong alignment on FKoratShopSalesItemDataList");
static_assert(sizeof(FKoratShopSalesItemDataList) == 0x000008, "Wrong size on FKoratShopSalesItemDataList");
static_assert(offsetof(FKoratShopSalesItemDataList, Key) == 0x000000, "Member 'FKoratShopSalesItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCombinationDesignatedData
// 0x0058 (0x0058 - 0x0000)
struct FKoratCharacterCombinationDesignatedData final
{
public:
	TSet<struct FKoratCharacterDataList>          Opponents;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratCombinationDataAsset*             DataAsset;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCombinationDesignatedData) == 0x000008, "Wrong alignment on FKoratCharacterCombinationDesignatedData");
static_assert(sizeof(FKoratCharacterCombinationDesignatedData) == 0x000058, "Wrong size on FKoratCharacterCombinationDesignatedData");
static_assert(offsetof(FKoratCharacterCombinationDesignatedData, Opponents) == 0x000000, "Member 'FKoratCharacterCombinationDesignatedData::Opponents' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombinationDesignatedData, DataAsset) == 0x000050, "Member 'FKoratCharacterCombinationDesignatedData::DataAsset' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCombinationDataAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FKoratCharacterCombinationDataAssetRecord final
{
public:
	struct FKoratActionDataList                   ActionOpponent;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, class UKoratCombinationDataAsset*> DesignatedDataList;                                // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratCombinationDataAsset*             DataAsset;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCombinationDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterCombinationDataAssetRecord");
static_assert(sizeof(FKoratCharacterCombinationDataAssetRecord) == 0x000060, "Wrong size on FKoratCharacterCombinationDataAssetRecord");
static_assert(offsetof(FKoratCharacterCombinationDataAssetRecord, ActionOpponent) == 0x000000, "Member 'FKoratCharacterCombinationDataAssetRecord::ActionOpponent' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombinationDataAssetRecord, DesignatedDataList) == 0x000008, "Member 'FKoratCharacterCombinationDataAssetRecord::DesignatedDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCombinationDataAssetRecord, DataAsset) == 0x000058, "Member 'FKoratCharacterCombinationDataAssetRecord::DataAsset' has a wrong offset!");

// ScriptStruct SS.SSCameraConnectedLastParameter
// 0x0070 (0x0070 - 0x0000)
struct FSSCameraConnectedLastParameter final
{
public:
	bool                                          bCamBaked;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendLocation;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLatBaked;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendLookAtTargetLocation;                         // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicalDisparityCamAddLengthBaked;               // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalDisparityCamAddLength;                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicalDisparityCamAddHeightBaked;               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PhysicalDisparityCamAddHeight;                     // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysicalDisparityCamAddFocalLengthBaked;          // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalDisparityCamAddFocalLength;                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCameraConnectedLastParameter) == 0x000008, "Wrong alignment on FSSCameraConnectedLastParameter");
static_assert(sizeof(FSSCameraConnectedLastParameter) == 0x000070, "Wrong size on FSSCameraConnectedLastParameter");
static_assert(offsetof(FSSCameraConnectedLastParameter, bCamBaked) == 0x000000, "Member 'FSSCameraConnectedLastParameter::bCamBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, BlendLocation) == 0x000008, "Member 'FSSCameraConnectedLastParameter::BlendLocation' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, bLatBaked) == 0x000020, "Member 'FSSCameraConnectedLastParameter::bLatBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, BlendLookAtTargetLocation) == 0x000028, "Member 'FSSCameraConnectedLastParameter::BlendLookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, bPhysicalDisparityCamAddLengthBaked) == 0x000040, "Member 'FSSCameraConnectedLastParameter::bPhysicalDisparityCamAddLengthBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, PhysicalDisparityCamAddLength) == 0x000044, "Member 'FSSCameraConnectedLastParameter::PhysicalDisparityCamAddLength' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, bPhysicalDisparityCamAddHeightBaked) == 0x000048, "Member 'FSSCameraConnectedLastParameter::bPhysicalDisparityCamAddHeightBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, PhysicalDisparityCamAddHeight) == 0x000050, "Member 'FSSCameraConnectedLastParameter::PhysicalDisparityCamAddHeight' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, bPhysicalDisparityCamAddFocalLengthBaked) == 0x000068, "Member 'FSSCameraConnectedLastParameter::bPhysicalDisparityCamAddFocalLengthBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectedLastParameter, PhysicalDisparityCamAddFocalLength) == 0x00006C, "Member 'FSSCameraConnectedLastParameter::PhysicalDisparityCamAddFocalLength' has a wrong offset!");

// ScriptStruct SS.KoratBattleTrainingSettingDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleTrainingSettingDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTrainingSettingDataList) == 0x000004, "Wrong alignment on FKoratBattleTrainingSettingDataList");
static_assert(sizeof(FKoratBattleTrainingSettingDataList) == 0x000008, "Wrong size on FKoratBattleTrainingSettingDataList");
static_assert(offsetof(FKoratBattleTrainingSettingDataList, Key) == 0x000000, "Member 'FKoratBattleTrainingSettingDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratTutorialCharaHPLimit
// 0x0008 (0x0008 - 0x0000)
struct FKoratTutorialCharaHPLimit final
{
public:
	float                                         AlliesHp;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyHp;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTutorialCharaHPLimit) == 0x000004, "Wrong alignment on FKoratTutorialCharaHPLimit");
static_assert(sizeof(FKoratTutorialCharaHPLimit) == 0x000008, "Wrong size on FKoratTutorialCharaHPLimit");
static_assert(offsetof(FKoratTutorialCharaHPLimit, AlliesHp) == 0x000000, "Member 'FKoratTutorialCharaHPLimit::AlliesHp' has a wrong offset!");
static_assert(offsetof(FKoratTutorialCharaHPLimit, EnemyHp) == 0x000004, "Member 'FKoratTutorialCharaHPLimit::EnemyHp' has a wrong offset!");

// ScriptStruct SS.KoratCharacterMoveParameterChanging
// 0x000C (0x000C - 0x0000)
struct FKoratCharacterMoveParameterChanging final
{
public:
	float                                         MaxSpeedScale;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeScale;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterMoveParameterChanging) == 0x000004, "Wrong alignment on FKoratCharacterMoveParameterChanging");
static_assert(sizeof(FKoratCharacterMoveParameterChanging) == 0x00000C, "Wrong size on FKoratCharacterMoveParameterChanging");
static_assert(offsetof(FKoratCharacterMoveParameterChanging, MaxSpeedScale) == 0x000000, "Member 'FKoratCharacterMoveParameterChanging::MaxSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChanging, AccelScale) == 0x000004, "Member 'FKoratCharacterMoveParameterChanging::AccelScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChanging, BrakeScale) == 0x000008, "Member 'FKoratCharacterMoveParameterChanging::BrakeScale' has a wrong offset!");

// ScriptStruct SS.KoratCharacterMoveParameterChangingSet
// 0x0038 (0x0038 - 0x0000)
struct FKoratCharacterMoveParameterChangingSet final
{
public:
	struct FKoratCharacterMoveParameterChanging   NormalMove;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         JumpScale;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterMoveParameterChanging   HighSpeedMove;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SuperHighSpeedMoveScale;                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterMoveParameterChanging   ShortDashMove;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterMoveParameterChanging   DragonDashMove;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterMoveParameterChangingSet) == 0x000004, "Wrong alignment on FKoratCharacterMoveParameterChangingSet");
static_assert(sizeof(FKoratCharacterMoveParameterChangingSet) == 0x000038, "Wrong size on FKoratCharacterMoveParameterChangingSet");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, NormalMove) == 0x000000, "Member 'FKoratCharacterMoveParameterChangingSet::NormalMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, JumpScale) == 0x00000C, "Member 'FKoratCharacterMoveParameterChangingSet::JumpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, HighSpeedMove) == 0x000010, "Member 'FKoratCharacterMoveParameterChangingSet::HighSpeedMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, SuperHighSpeedMoveScale) == 0x00001C, "Member 'FKoratCharacterMoveParameterChangingSet::SuperHighSpeedMoveScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, ShortDashMove) == 0x000020, "Member 'FKoratCharacterMoveParameterChangingSet::ShortDashMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterMoveParameterChangingSet, DragonDashMove) == 0x00002C, "Member 'FKoratCharacterMoveParameterChangingSet::DragonDashMove' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCommonParameter
// 0x0390 (0x0390 - 0x0000)
struct FKoratCharacterCommonParameter final
{
public:
	float                                         Life;                                              // 0x0000(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddCounterDamageScale;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCounterDamageScale;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPGaugeMaxValue;                                   // 0x0010(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSP;                                         // 0x0014(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoveryLimit;                               // 0x0018(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoverySpeed;                               // 0x001C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoverySpeedParry;                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoverySpeedSuperZCounter;                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPChargeSpeed;                                     // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingGaugeChargeSpeed;                          // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSparkingGaugeDecreaseSpeed;                     // 0x0030(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingModeGaugeDecreaseSpeed;                    // 0x0034(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperCounterSPCost;                                // 0x0038(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZCounterSPCost;                                    // 0x003C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastSPCostMin;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastRecoverSpeed;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunReactionMaxRecoverySP;                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunReactionRecoverySpeed;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunReactionInputRecoverySpeed;                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitBoostSPCost;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitBoostRecoverySpeed;                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitBoostInputRecoverySpeed;                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRecoveryWaitTime;                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftRecoveryWaitTime;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRecoveryToLandingBorderDistance;               // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallStopRecoveryWaitTime;                          // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportationCounterInputTime;                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportationCounterWaitTime;                      // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportationCounterStopRequestTime;               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardableAngle;                                    // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeHealMaxAtBench;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeHealPerSecAtBench;                             // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPHealPerSecAtBench;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardCrashPowerConsumption;                        // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushHighSpeedMoveExpendSp;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushHighSpeedMoveRevengeExpendSp;                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SparkingModeBlastCost;                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevengeCounterBlastCost;                           // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterTakeBlastCost;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterCatchBlastCost;                       // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterTeleportBlastCost;                    // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterFlickBlastCost;                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterDrownOutBlastCost;                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperZCounterAbsorptionBlastCost;                  // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FluffyCurve;                                       // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchFollowAngularVelocity;                    // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchRestoreAngularVelocity;                   // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchAngleMin;                                 // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchAngleMax;                                 // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchFollowAngularVelocityForGiant;            // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchRestoreAngularVelocityForGiant;           // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchAngleMinForGiant;                         // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchAngleMaxForGiant;                         // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyPitchAngleJumpAction;                          // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortDashSpeedDownDistance;                        // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortDashSpeedDownDistanceForGiant;                // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashInterval;                                // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ComboDamageScaleCurve;                             // 0x00F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboDamageScaleMax;                               // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EKoratActionCategoryType>                ComboAttackActionCategory;                         // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<float>                                 SmashLevelGaugeThresholds;                         // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SmashLevelGaugeMax;                                // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashLevelGaugeDecrementSpeed;                     // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashLevelGaugeDecrementDelayTime;                 // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitPossibleTime;                               // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonHomingDecelerationDistance;                  // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonHomingKeepDistance;                          // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonHomingInputInfluence;                        // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonHomingInputInfluenceAttenuationDistance;     // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonHomingKeepDistanceInputInfluence;            // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonSmashTransitionDistance;                     // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonSmashChargeEndDistance;                      // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxArmorBreakLevel;                                // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             SmashBulletShotDynamicMontageSections;             // 0x0190(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         BlastBoostCostNormal;                              // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastBoostCostSparking;                            // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastBoostNormalMagnification;                     // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastBoostSparkingMagnification;                   // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearVanishingAssaultExpendSp;                      // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidVanishingAssaultExpendSp;                       // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarVanishingAssaultExpendSp;                       // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionObstructZSearchTimerSpeedRatio;           // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            CostumeDamageLvSettings;                           // 0x0200(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         DamageCostumeWreckLv;                              // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectAvoidanceContinueTime;                      // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapChangeStartDelayTime;                           // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapChangeDestructStartHp;                          // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapChangeDestructFloorDistance;                    // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmoteCoolTime;                                     // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CollisionBones;                                    // 0x0268(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CollisionAxisBone;                                 // 0x0278(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGiantCharaCapsulePushingParamsForCollision;    // 0x0280(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DamageCollisionBones;                              // 0x0288(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DamageCollisionAxisBone;                           // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGiantCharaCapsulePushingParamsForDamageCollision; // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionPossibleTimeFromDashAttackToShortDash;   // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterShortAttackTransitionRange;          // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterShortAttackTransitionRangeGiant;     // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterMediumUpAttackTransitionRange;       // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterMediumUpAttackTransitionRangeGiant;  // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterLongAttackTransitionRange;           // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterLongAttackTransitionRangeGiant;      // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterMediumAttackStartRange;              // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterMediumAttackStartRangeGiant;         // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterLongAttackStartRange;                // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeCounterLongAttackStartRangeGiant;           // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EKoratDestructionObjectType>           DestructionObjectTypeListForDestructedDamage;      // 0x02D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EKoratDestructionObjectType>           DestructionObjectTypeListForDestructedDamageForGiant; // 0x02E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DestructedDamage;                                  // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructedDamageCoolTime;                          // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructedToMapDamageCoolTime;                     // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfishnessHitBackLimitDuration;                   // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfishnessHitBackLimitInitialSpeed;               // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfishnessHitBackLimitBrakingDeceleration;        // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterMoveParameterChangingSet MoveParameterChangingLimit;                        // 0x0308(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DisableLookAtRange;                                // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LookAtAngleLimit;                                  // 0x0348(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DisableAimRange;                                   // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AimAngleLimit;                                     // 0x0368(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ToAimBodyBlendTime;                                // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromAimBodyBlendTime;                              // 0x0384(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GiantCharaCenterTargetBoneName;                    // 0x0388(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCommonParameter) == 0x000008, "Wrong alignment on FKoratCharacterCommonParameter");
static_assert(sizeof(FKoratCharacterCommonParameter) == 0x000390, "Wrong size on FKoratCharacterCommonParameter");
static_assert(offsetof(FKoratCharacterCommonParameter, Life) == 0x000000, "Member 'FKoratCharacterCommonParameter::Life' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DamageRate) == 0x000004, "Member 'FKoratCharacterCommonParameter::DamageRate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, AddCounterDamageScale) == 0x000008, "Member 'FKoratCharacterCommonParameter::AddCounterDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MaxCounterDamageScale) == 0x00000C, "Member 'FKoratCharacterCommonParameter::MaxCounterDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPGaugeMaxValue) == 0x000010, "Member 'FKoratCharacterCommonParameter::SPGaugeMaxValue' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, InitialSP) == 0x000014, "Member 'FKoratCharacterCommonParameter::InitialSP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPAutoRecoveryLimit) == 0x000018, "Member 'FKoratCharacterCommonParameter::SPAutoRecoveryLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPAutoRecoverySpeed) == 0x00001C, "Member 'FKoratCharacterCommonParameter::SPAutoRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPAutoRecoverySpeedParry) == 0x000020, "Member 'FKoratCharacterCommonParameter::SPAutoRecoverySpeedParry' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPAutoRecoverySpeedSuperZCounter) == 0x000024, "Member 'FKoratCharacterCommonParameter::SPAutoRecoverySpeedSuperZCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPChargeSpeed) == 0x000028, "Member 'FKoratCharacterCommonParameter::SPChargeSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SparkingGaugeChargeSpeed) == 0x00002C, "Member 'FKoratCharacterCommonParameter::SparkingGaugeChargeSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, PreSparkingGaugeDecreaseSpeed) == 0x000030, "Member 'FKoratCharacterCommonParameter::PreSparkingGaugeDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SparkingModeGaugeDecreaseSpeed) == 0x000034, "Member 'FKoratCharacterCommonParameter::SparkingModeGaugeDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperCounterSPCost) == 0x000038, "Member 'FKoratCharacterCommonParameter::SuperCounterSPCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ZCounterSPCost) == 0x00003C, "Member 'FKoratCharacterCommonParameter::ZCounterSPCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastSPCostMin) == 0x000040, "Member 'FKoratCharacterCommonParameter::BlastSPCostMin' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastRecoverSpeed) == 0x000044, "Member 'FKoratCharacterCommonParameter::BlastRecoverSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, StunReactionMaxRecoverySP) == 0x000048, "Member 'FKoratCharacterCommonParameter::StunReactionMaxRecoverySP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, StunReactionRecoverySpeed) == 0x00004C, "Member 'FKoratCharacterCommonParameter::StunReactionRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, StunReactionInputRecoverySpeed) == 0x000050, "Member 'FKoratCharacterCommonParameter::StunReactionInputRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LimitBoostSPCost) == 0x000054, "Member 'FKoratCharacterCommonParameter::LimitBoostSPCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LimitBoostRecoverySpeed) == 0x000058, "Member 'FKoratCharacterCommonParameter::LimitBoostRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LimitBoostInputRecoverySpeed) == 0x00005C, "Member 'FKoratCharacterCommonParameter::LimitBoostInputRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FallRecoveryWaitTime) == 0x000060, "Member 'FKoratCharacterCommonParameter::FallRecoveryWaitTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LiftRecoveryWaitTime) == 0x000064, "Member 'FKoratCharacterCommonParameter::LiftRecoveryWaitTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FallRecoveryToLandingBorderDistance) == 0x000068, "Member 'FKoratCharacterCommonParameter::FallRecoveryToLandingBorderDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FallStopRecoveryWaitTime) == 0x00006C, "Member 'FKoratCharacterCommonParameter::FallStopRecoveryWaitTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, TeleportationCounterInputTime) == 0x000070, "Member 'FKoratCharacterCommonParameter::TeleportationCounterInputTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, TeleportationCounterWaitTime) == 0x000074, "Member 'FKoratCharacterCommonParameter::TeleportationCounterWaitTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, TeleportationCounterStopRequestTime) == 0x000078, "Member 'FKoratCharacterCommonParameter::TeleportationCounterStopRequestTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, GuardableAngle) == 0x00007C, "Member 'FKoratCharacterCommonParameter::GuardableAngle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LifeHealMaxAtBench) == 0x000080, "Member 'FKoratCharacterCommonParameter::LifeHealMaxAtBench' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LifeHealPerSecAtBench) == 0x000084, "Member 'FKoratCharacterCommonParameter::LifeHealPerSecAtBench' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SPHealPerSecAtBench) == 0x000088, "Member 'FKoratCharacterCommonParameter::SPHealPerSecAtBench' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, GuardCrashPowerConsumption) == 0x00008C, "Member 'FKoratCharacterCommonParameter::GuardCrashPowerConsumption' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RushHighSpeedMoveExpendSp) == 0x000090, "Member 'FKoratCharacterCommonParameter::RushHighSpeedMoveExpendSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RushHighSpeedMoveRevengeExpendSp) == 0x000094, "Member 'FKoratCharacterCommonParameter::RushHighSpeedMoveRevengeExpendSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SparkingModeBlastCost) == 0x000098, "Member 'FKoratCharacterCommonParameter::SparkingModeBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterBlastCost) == 0x00009C, "Member 'FKoratCharacterCommonParameter::RevengeCounterBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterTakeBlastCost) == 0x0000A0, "Member 'FKoratCharacterCommonParameter::SuperZCounterTakeBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterCatchBlastCost) == 0x0000A4, "Member 'FKoratCharacterCommonParameter::SuperZCounterCatchBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterTeleportBlastCost) == 0x0000A8, "Member 'FKoratCharacterCommonParameter::SuperZCounterTeleportBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterFlickBlastCost) == 0x0000AC, "Member 'FKoratCharacterCommonParameter::SuperZCounterFlickBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterDrownOutBlastCost) == 0x0000B0, "Member 'FKoratCharacterCommonParameter::SuperZCounterDrownOutBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SuperZCounterAbsorptionBlastCost) == 0x0000B4, "Member 'FKoratCharacterCommonParameter::SuperZCounterAbsorptionBlastCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FluffyCurve) == 0x0000B8, "Member 'FKoratCharacterCommonParameter::FluffyCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchFollowAngularVelocity) == 0x0000C0, "Member 'FKoratCharacterCommonParameter::BodyPitchFollowAngularVelocity' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchRestoreAngularVelocity) == 0x0000C4, "Member 'FKoratCharacterCommonParameter::BodyPitchRestoreAngularVelocity' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchAngleMin) == 0x0000C8, "Member 'FKoratCharacterCommonParameter::BodyPitchAngleMin' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchAngleMax) == 0x0000CC, "Member 'FKoratCharacterCommonParameter::BodyPitchAngleMax' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchFollowAngularVelocityForGiant) == 0x0000D0, "Member 'FKoratCharacterCommonParameter::BodyPitchFollowAngularVelocityForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchRestoreAngularVelocityForGiant) == 0x0000D4, "Member 'FKoratCharacterCommonParameter::BodyPitchRestoreAngularVelocityForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchAngleMinForGiant) == 0x0000D8, "Member 'FKoratCharacterCommonParameter::BodyPitchAngleMinForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchAngleMaxForGiant) == 0x0000DC, "Member 'FKoratCharacterCommonParameter::BodyPitchAngleMaxForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BodyPitchAngleJumpAction) == 0x0000E0, "Member 'FKoratCharacterCommonParameter::BodyPitchAngleJumpAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ShortDashSpeedDownDistance) == 0x0000E4, "Member 'FKoratCharacterCommonParameter::ShortDashSpeedDownDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ShortDashSpeedDownDistanceForGiant) == 0x0000E8, "Member 'FKoratCharacterCommonParameter::ShortDashSpeedDownDistanceForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonDashInterval) == 0x0000EC, "Member 'FKoratCharacterCommonParameter::DragonDashInterval' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ComboDamageScaleCurve) == 0x0000F0, "Member 'FKoratCharacterCommonParameter::ComboDamageScaleCurve' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ComboDamageScaleMax) == 0x0000F8, "Member 'FKoratCharacterCommonParameter::ComboDamageScaleMax' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ComboAttackActionCategory) == 0x000100, "Member 'FKoratCharacterCommonParameter::ComboAttackActionCategory' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SmashLevelGaugeThresholds) == 0x000150, "Member 'FKoratCharacterCommonParameter::SmashLevelGaugeThresholds' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SmashLevelGaugeMax) == 0x000160, "Member 'FKoratCharacterCommonParameter::SmashLevelGaugeMax' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SmashLevelGaugeDecrementSpeed) == 0x000164, "Member 'FKoratCharacterCommonParameter::SmashLevelGaugeDecrementSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SmashLevelGaugeDecrementDelayTime) == 0x000168, "Member 'FKoratCharacterCommonParameter::SmashLevelGaugeDecrementDelayTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, PursuitPossibleTime) == 0x00016C, "Member 'FKoratCharacterCommonParameter::PursuitPossibleTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonHomingDecelerationDistance) == 0x000170, "Member 'FKoratCharacterCommonParameter::DragonHomingDecelerationDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonHomingKeepDistance) == 0x000174, "Member 'FKoratCharacterCommonParameter::DragonHomingKeepDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonHomingInputInfluence) == 0x000178, "Member 'FKoratCharacterCommonParameter::DragonHomingInputInfluence' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonHomingInputInfluenceAttenuationDistance) == 0x00017C, "Member 'FKoratCharacterCommonParameter::DragonHomingInputInfluenceAttenuationDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonHomingKeepDistanceInputInfluence) == 0x000180, "Member 'FKoratCharacterCommonParameter::DragonHomingKeepDistanceInputInfluence' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonSmashTransitionDistance) == 0x000184, "Member 'FKoratCharacterCommonParameter::DragonSmashTransitionDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DragonSmashChargeEndDistance) == 0x000188, "Member 'FKoratCharacterCommonParameter::DragonSmashChargeEndDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MaxArmorBreakLevel) == 0x00018C, "Member 'FKoratCharacterCommonParameter::MaxArmorBreakLevel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SmashBulletShotDynamicMontageSections) == 0x000190, "Member 'FKoratCharacterCommonParameter::SmashBulletShotDynamicMontageSections' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastBoostCostNormal) == 0x0001E0, "Member 'FKoratCharacterCommonParameter::BlastBoostCostNormal' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastBoostCostSparking) == 0x0001E4, "Member 'FKoratCharacterCommonParameter::BlastBoostCostSparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastBoostNormalMagnification) == 0x0001E8, "Member 'FKoratCharacterCommonParameter::BlastBoostNormalMagnification' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, BlastBoostSparkingMagnification) == 0x0001EC, "Member 'FKoratCharacterCommonParameter::BlastBoostSparkingMagnification' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, NearVanishingAssaultExpendSp) == 0x0001F0, "Member 'FKoratCharacterCommonParameter::NearVanishingAssaultExpendSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MidVanishingAssaultExpendSp) == 0x0001F4, "Member 'FKoratCharacterCommonParameter::MidVanishingAssaultExpendSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FarVanishingAssaultExpendSp) == 0x0001F8, "Member 'FKoratCharacterCommonParameter::FarVanishingAssaultExpendSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ExplosionObstructZSearchTimerSpeedRatio) == 0x0001FC, "Member 'FKoratCharacterCommonParameter::ExplosionObstructZSearchTimerSpeedRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, CostumeDamageLvSettings) == 0x000200, "Member 'FKoratCharacterCommonParameter::CostumeDamageLvSettings' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DamageCostumeWreckLv) == 0x000250, "Member 'FKoratCharacterCommonParameter::DamageCostumeWreckLv' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, PerfectAvoidanceContinueTime) == 0x000254, "Member 'FKoratCharacterCommonParameter::PerfectAvoidanceContinueTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MapChangeStartDelayTime) == 0x000258, "Member 'FKoratCharacterCommonParameter::MapChangeStartDelayTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MapChangeDestructStartHp) == 0x00025C, "Member 'FKoratCharacterCommonParameter::MapChangeDestructStartHp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MapChangeDestructFloorDistance) == 0x000260, "Member 'FKoratCharacterCommonParameter::MapChangeDestructFloorDistance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, EmoteCoolTime) == 0x000264, "Member 'FKoratCharacterCommonParameter::EmoteCoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, CollisionBones) == 0x000268, "Member 'FKoratCharacterCommonParameter::CollisionBones' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, CollisionAxisBone) == 0x000278, "Member 'FKoratCharacterCommonParameter::CollisionAxisBone' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, bUseGiantCharaCapsulePushingParamsForCollision) == 0x000280, "Member 'FKoratCharacterCommonParameter::bUseGiantCharaCapsulePushingParamsForCollision' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DamageCollisionBones) == 0x000288, "Member 'FKoratCharacterCommonParameter::DamageCollisionBones' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DamageCollisionAxisBone) == 0x000298, "Member 'FKoratCharacterCommonParameter::DamageCollisionAxisBone' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, bUseGiantCharaCapsulePushingParamsForDamageCollision) == 0x0002A0, "Member 'FKoratCharacterCommonParameter::bUseGiantCharaCapsulePushingParamsForDamageCollision' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, TransitionPossibleTimeFromDashAttackToShortDash) == 0x0002A4, "Member 'FKoratCharacterCommonParameter::TransitionPossibleTimeFromDashAttackToShortDash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterShortAttackTransitionRange) == 0x0002A8, "Member 'FKoratCharacterCommonParameter::RevengeCounterShortAttackTransitionRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterShortAttackTransitionRangeGiant) == 0x0002AC, "Member 'FKoratCharacterCommonParameter::RevengeCounterShortAttackTransitionRangeGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterMediumUpAttackTransitionRange) == 0x0002B0, "Member 'FKoratCharacterCommonParameter::RevengeCounterMediumUpAttackTransitionRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterMediumUpAttackTransitionRangeGiant) == 0x0002B4, "Member 'FKoratCharacterCommonParameter::RevengeCounterMediumUpAttackTransitionRangeGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterLongAttackTransitionRange) == 0x0002B8, "Member 'FKoratCharacterCommonParameter::RevengeCounterLongAttackTransitionRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterLongAttackTransitionRangeGiant) == 0x0002BC, "Member 'FKoratCharacterCommonParameter::RevengeCounterLongAttackTransitionRangeGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterMediumAttackStartRange) == 0x0002C0, "Member 'FKoratCharacterCommonParameter::RevengeCounterMediumAttackStartRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterMediumAttackStartRangeGiant) == 0x0002C4, "Member 'FKoratCharacterCommonParameter::RevengeCounterMediumAttackStartRangeGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterLongAttackStartRange) == 0x0002C8, "Member 'FKoratCharacterCommonParameter::RevengeCounterLongAttackStartRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, RevengeCounterLongAttackStartRangeGiant) == 0x0002CC, "Member 'FKoratCharacterCommonParameter::RevengeCounterLongAttackStartRangeGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DestructionObjectTypeListForDestructedDamage) == 0x0002D0, "Member 'FKoratCharacterCommonParameter::DestructionObjectTypeListForDestructedDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DestructionObjectTypeListForDestructedDamageForGiant) == 0x0002E0, "Member 'FKoratCharacterCommonParameter::DestructionObjectTypeListForDestructedDamageForGiant' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DestructedDamage) == 0x0002F0, "Member 'FKoratCharacterCommonParameter::DestructedDamage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DestructedDamageCoolTime) == 0x0002F4, "Member 'FKoratCharacterCommonParameter::DestructedDamageCoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DestructedToMapDamageCoolTime) == 0x0002F8, "Member 'FKoratCharacterCommonParameter::DestructedToMapDamageCoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SelfishnessHitBackLimitDuration) == 0x0002FC, "Member 'FKoratCharacterCommonParameter::SelfishnessHitBackLimitDuration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SelfishnessHitBackLimitInitialSpeed) == 0x000300, "Member 'FKoratCharacterCommonParameter::SelfishnessHitBackLimitInitialSpeed' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, SelfishnessHitBackLimitBrakingDeceleration) == 0x000304, "Member 'FKoratCharacterCommonParameter::SelfishnessHitBackLimitBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, MoveParameterChangingLimit) == 0x000308, "Member 'FKoratCharacterCommonParameter::MoveParameterChangingLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DisableLookAtRange) == 0x000340, "Member 'FKoratCharacterCommonParameter::DisableLookAtRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, LookAtAngleLimit) == 0x000348, "Member 'FKoratCharacterCommonParameter::LookAtAngleLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, DisableAimRange) == 0x000360, "Member 'FKoratCharacterCommonParameter::DisableAimRange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, AimAngleLimit) == 0x000368, "Member 'FKoratCharacterCommonParameter::AimAngleLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, ToAimBodyBlendTime) == 0x000380, "Member 'FKoratCharacterCommonParameter::ToAimBodyBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, FromAimBodyBlendTime) == 0x000384, "Member 'FKoratCharacterCommonParameter::FromAimBodyBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCommonParameter, GiantCharaCenterTargetBoneName) == 0x000388, "Member 'FKoratCharacterCommonParameter::GiantCharaCenterTargetBoneName' has a wrong offset!");

// ScriptStruct SS.SSDLCItemNotificationData
// 0x0010 (0x0010 - 0x0000)
struct FSSDLCItemNotificationData final
{
public:
	ESSDlcItemType                                DlcItemType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DataListKey;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlreadyUnlockedAddMoney;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDLCItemNotificationData) == 0x000004, "Wrong alignment on FSSDLCItemNotificationData");
static_assert(sizeof(FSSDLCItemNotificationData) == 0x000010, "Wrong size on FSSDLCItemNotificationData");
static_assert(offsetof(FSSDLCItemNotificationData, DlcItemType) == 0x000000, "Member 'FSSDLCItemNotificationData::DlcItemType' has a wrong offset!");
static_assert(offsetof(FSSDLCItemNotificationData, DataListKey) == 0x000004, "Member 'FSSDLCItemNotificationData::DataListKey' has a wrong offset!");
static_assert(offsetof(FSSDLCItemNotificationData, AlreadyUnlockedAddMoney) == 0x00000C, "Member 'FSSDLCItemNotificationData::AlreadyUnlockedAddMoney' has a wrong offset!");

// ScriptStruct SS.SSDebugCutEditorTestSetting
// 0x0040 (0x0040 - 0x0000)
struct FSSDebugCutEditorTestSetting final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInitialized;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratMapDataList                      StageDataList;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        CharacterDataLists;                                // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratPlayerStartDataList>      CharacterStartDataLists;                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESSDramaticBattleCutEditorCutType             CutType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDebugCutEditorTestSetting) == 0x000008, "Wrong alignment on FSSDebugCutEditorTestSetting");
static_assert(sizeof(FSSDebugCutEditorTestSetting) == 0x000040, "Wrong size on FSSDebugCutEditorTestSetting");
static_assert(offsetof(FSSDebugCutEditorTestSetting, bInitialized) == 0x000008, "Member 'FSSDebugCutEditorTestSetting::bInitialized' has a wrong offset!");
static_assert(offsetof(FSSDebugCutEditorTestSetting, StageDataList) == 0x00000C, "Member 'FSSDebugCutEditorTestSetting::StageDataList' has a wrong offset!");
static_assert(offsetof(FSSDebugCutEditorTestSetting, CharacterDataLists) == 0x000018, "Member 'FSSDebugCutEditorTestSetting::CharacterDataLists' has a wrong offset!");
static_assert(offsetof(FSSDebugCutEditorTestSetting, CharacterStartDataLists) == 0x000028, "Member 'FSSDebugCutEditorTestSetting::CharacterStartDataLists' has a wrong offset!");
static_assert(offsetof(FSSDebugCutEditorTestSetting, CutType) == 0x000038, "Member 'FSSDebugCutEditorTestSetting::CutType' has a wrong offset!");

// ScriptStruct SS.KoratCharacterFigureDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterFigureDataAssetRecord final
{
public:
	class USSFigureMLSDataAsset*                  MontageLevelSequence;                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEffectFigureTransformDataAsset*      FigureTransformData;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCharacterUiDataAsset*                FigureDefaultUiData;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCharacterCombinationDataAsset*    FigureCharacterCombination;                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterFigureDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterFigureDataAssetRecord");
static_assert(sizeof(FKoratCharacterFigureDataAssetRecord) == 0x000020, "Wrong size on FKoratCharacterFigureDataAssetRecord");
static_assert(offsetof(FKoratCharacterFigureDataAssetRecord, MontageLevelSequence) == 0x000000, "Member 'FKoratCharacterFigureDataAssetRecord::MontageLevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratCharacterFigureDataAssetRecord, FigureTransformData) == 0x000008, "Member 'FKoratCharacterFigureDataAssetRecord::FigureTransformData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterFigureDataAssetRecord, FigureDefaultUiData) == 0x000010, "Member 'FKoratCharacterFigureDataAssetRecord::FigureDefaultUiData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterFigureDataAssetRecord, FigureCharacterCombination) == 0x000018, "Member 'FKoratCharacterFigureDataAssetRecord::FigureCharacterCombination' has a wrong offset!");

// ScriptStruct SS.KoratEditPartsTextDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEditPartsTextDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEditPartsTextDataList) == 0x000004, "Wrong alignment on FKoratEditPartsTextDataList");
static_assert(sizeof(FKoratEditPartsTextDataList) == 0x000008, "Wrong size on FKoratEditPartsTextDataList");
static_assert(offsetof(FKoratEditPartsTextDataList, Key) == 0x000000, "Member 'FKoratEditPartsTextDataList::Key' has a wrong offset!");

// ScriptStruct SS.GrappleHandParameters
// 0x001C (0x001C - 0x0000)
struct FGrappleHandParameters final
{
public:
	EKoratInverseKinematicsMethod                 Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocket;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffsetSocket;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurve;                                        // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrappleHandParameters) == 0x000004, "Wrong alignment on FGrappleHandParameters");
static_assert(sizeof(FGrappleHandParameters) == 0x00001C, "Wrong size on FGrappleHandParameters");
static_assert(offsetof(FGrappleHandParameters, Method) == 0x000000, "Member 'FGrappleHandParameters::Method' has a wrong offset!");
static_assert(offsetof(FGrappleHandParameters, TargetSocket) == 0x000004, "Member 'FGrappleHandParameters::TargetSocket' has a wrong offset!");
static_assert(offsetof(FGrappleHandParameters, OffsetSocket) == 0x00000C, "Member 'FGrappleHandParameters::OffsetSocket' has a wrong offset!");
static_assert(offsetof(FGrappleHandParameters, AlphaCurve) == 0x000014, "Member 'FGrappleHandParameters::AlphaCurve' has a wrong offset!");

// ScriptStruct SS.KoratGrappleParameters
// 0x0058 (0x0058 - 0x0000)
struct FKoratGrappleParameters final
{
public:
	struct FGuid                                  Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratInverseKinematicsType                   Type;                                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGrappleHandParameters                 RightHand;                                         // 0x0014(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGrappleHandParameters                 LeftHand;                                          // 0x0030(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   GrabBone;                                          // 0x004C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratGrappleParameters) == 0x000004, "Wrong alignment on FKoratGrappleParameters");
static_assert(sizeof(FKoratGrappleParameters) == 0x000058, "Wrong size on FKoratGrappleParameters");
static_assert(offsetof(FKoratGrappleParameters, Identifier) == 0x000000, "Member 'FKoratGrappleParameters::Identifier' has a wrong offset!");
static_assert(offsetof(FKoratGrappleParameters, Type) == 0x000010, "Member 'FKoratGrappleParameters::Type' has a wrong offset!");
static_assert(offsetof(FKoratGrappleParameters, RightHand) == 0x000014, "Member 'FKoratGrappleParameters::RightHand' has a wrong offset!");
static_assert(offsetof(FKoratGrappleParameters, LeftHand) == 0x000030, "Member 'FKoratGrappleParameters::LeftHand' has a wrong offset!");
static_assert(offsetof(FKoratGrappleParameters, GrabBone) == 0x00004C, "Member 'FKoratGrappleParameters::GrabBone' has a wrong offset!");
static_assert(offsetof(FKoratGrappleParameters, Duration) == 0x000054, "Member 'FKoratGrappleParameters::Duration' has a wrong offset!");

// ScriptStruct SS.SSCameraReady
// 0x0028 (0x0028 - 0x0000)
struct FSSCameraReady final
{
public:
	ECameraType                                   CameraType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCutCameraActor*                      CameraInstance;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SequencerStartTime;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionStartFrame;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionEndFrameCam;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionEndFrameLat;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseTrack;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstConnect;                                    // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCameraReady) == 0x000008, "Wrong alignment on FSSCameraReady");
static_assert(sizeof(FSSCameraReady) == 0x000028, "Wrong size on FSSCameraReady");
static_assert(offsetof(FSSCameraReady, CameraType) == 0x000000, "Member 'FSSCameraReady::CameraType' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, CameraInstance) == 0x000008, "Member 'FSSCameraReady::CameraInstance' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, SequencerStartTime) == 0x000010, "Member 'FSSCameraReady::SequencerStartTime' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, SectionStartFrame) == 0x000018, "Member 'FSSCameraReady::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, SectionEndFrameCam) == 0x00001C, "Member 'FSSCameraReady::SectionEndFrameCam' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, SectionEndFrameLat) == 0x000020, "Member 'FSSCameraReady::SectionEndFrameLat' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, ReverseTrack) == 0x000024, "Member 'FSSCameraReady::ReverseTrack' has a wrong offset!");
static_assert(offsetof(FSSCameraReady, IsFirstConnect) == 0x000025, "Member 'FSSCameraReady::IsFirstConnect' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditBlankTextDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditBlankTextDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditBlankTextDataList) == 0x000004, "Wrong alignment on FKoratDRMEditBlankTextDataList");
static_assert(sizeof(FKoratDRMEditBlankTextDataList) == 0x000008, "Wrong size on FKoratDRMEditBlankTextDataList");
static_assert(offsetof(FKoratDRMEditBlankTextDataList, Key) == 0x000000, "Member 'FKoratDRMEditBlankTextDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterGroupDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratCharacterGroupDataAssetRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterGroupDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterGroupDataAssetRecord");
static_assert(sizeof(FKoratCharacterGroupDataAssetRecord) == 0x000018, "Wrong size on FKoratCharacterGroupDataAssetRecord");
static_assert(offsetof(FKoratCharacterGroupDataAssetRecord, Text) == 0x000000, "Member 'FKoratCharacterGroupDataAssetRecord::Text' has a wrong offset!");

// ScriptStruct SS.SSInverseKinematicsParameter
// 0x0080 (0x0080 - 0x0000)
struct FSSInverseKinematicsParameter final
{
public:
	EKoratInverseKinematicsMethod                 Method;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSInverseKinematicsParameter) == 0x000010, "Wrong alignment on FSSInverseKinematicsParameter");
static_assert(sizeof(FSSInverseKinematicsParameter) == 0x000080, "Wrong size on FSSInverseKinematicsParameter");
static_assert(offsetof(FSSInverseKinematicsParameter, Method) == 0x000000, "Member 'FSSInverseKinematicsParameter::Method' has a wrong offset!");
static_assert(offsetof(FSSInverseKinematicsParameter, TargetTransform) == 0x000010, "Member 'FSSInverseKinematicsParameter::TargetTransform' has a wrong offset!");
static_assert(offsetof(FSSInverseKinematicsParameter, AlphaCurveName) == 0x000070, "Member 'FSSInverseKinematicsParameter::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FSSInverseKinematicsParameter, CurveValue) == 0x000078, "Member 'FSSInverseKinematicsParameter::CurveValue' has a wrong offset!");

// ScriptStruct SS.SSAdventureIFAgingEventData
// 0x0010 (0x0010 - 0x0000)
struct FSSAdventureIFAgingEventData final
{
public:
	TArray<class FName>                           EventNames;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAdventureIFAgingEventData) == 0x000008, "Wrong alignment on FSSAdventureIFAgingEventData");
static_assert(sizeof(FSSAdventureIFAgingEventData) == 0x000010, "Wrong size on FSSAdventureIFAgingEventData");
static_assert(offsetof(FSSAdventureIFAgingEventData, EventNames) == 0x000000, "Member 'FSSAdventureIFAgingEventData::EventNames' has a wrong offset!");

// ScriptStruct SS.KoratBattleOperationGuideDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleOperationGuideDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleOperationGuideDataList) == 0x000004, "Wrong alignment on FKoratBattleOperationGuideDataList");
static_assert(sizeof(FKoratBattleOperationGuideDataList) == 0x000008, "Wrong size on FKoratBattleOperationGuideDataList");
static_assert(offsetof(FKoratBattleOperationGuideDataList, Key) == 0x000000, "Member 'FKoratBattleOperationGuideDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FSSWishComeTrueCharacterData final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              LocatorData;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWishComeTrueCharacterData) == 0x000004, "Wrong alignment on FSSWishComeTrueCharacterData");
static_assert(sizeof(FSSWishComeTrueCharacterData) == 0x000018, "Wrong size on FSSWishComeTrueCharacterData");
static_assert(offsetof(FSSWishComeTrueCharacterData, CharacterID) == 0x000000, "Member 'FSSWishComeTrueCharacterData::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueCharacterData, CostumeId) == 0x000008, "Member 'FSSWishComeTrueCharacterData::CostumeId' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueCharacterData, LocatorData) == 0x000010, "Member 'FSSWishComeTrueCharacterData::LocatorData' has a wrong offset!");

// ScriptStruct SS.KoratInverseKinematicsFootResult
// 0x0038 (0x0038 - 0x0000)
struct FKoratInverseKinematicsFootResult final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WaistOffset;                                       // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInverseKinematicsFootResult) == 0x000008, "Wrong alignment on FKoratInverseKinematicsFootResult");
static_assert(sizeof(FKoratInverseKinematicsFootResult) == 0x000038, "Wrong size on FKoratInverseKinematicsFootResult");
static_assert(offsetof(FKoratInverseKinematicsFootResult, LocationOffset) == 0x000000, "Member 'FKoratInverseKinematicsFootResult::LocationOffset' has a wrong offset!");
static_assert(offsetof(FKoratInverseKinematicsFootResult, RotationOffset) == 0x000018, "Member 'FKoratInverseKinematicsFootResult::RotationOffset' has a wrong offset!");
static_assert(offsetof(FKoratInverseKinematicsFootResult, WaistOffset) == 0x000030, "Member 'FKoratInverseKinematicsFootResult::WaistOffset' has a wrong offset!");
static_assert(offsetof(FKoratInverseKinematicsFootResult, Alpha) == 0x000034, "Member 'FKoratInverseKinematicsFootResult::Alpha' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditLayerDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditLayerDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditLayerDataList) == 0x000004, "Wrong alignment on FKoratDRMEditLayerDataList");
static_assert(sizeof(FKoratDRMEditLayerDataList) == 0x000008, "Wrong size on FKoratDRMEditLayerDataList");
static_assert(offsetof(FKoratDRMEditLayerDataList, Key) == 0x000000, "Member 'FKoratDRMEditLayerDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterFootParameter
// 0x0010 (0x0010 - 0x0000)
struct FKoratCharacterFootParameter final
{
public:
	struct FKoratInverseKinematicsFootTraceLine   WalkTrace;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratInverseKinematicsFootTraceLine   FlyTrace;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterFootParameter) == 0x000004, "Wrong alignment on FKoratCharacterFootParameter");
static_assert(sizeof(FKoratCharacterFootParameter) == 0x000010, "Wrong size on FKoratCharacterFootParameter");
static_assert(offsetof(FKoratCharacterFootParameter, WalkTrace) == 0x000000, "Member 'FKoratCharacterFootParameter::WalkTrace' has a wrong offset!");
static_assert(offsetof(FKoratCharacterFootParameter, FlyTrace) == 0x000008, "Member 'FKoratCharacterFootParameter::FlyTrace' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFChartMapSubDirBlock
// 0x0010 (0x0010 - 0x0000)
struct FSSDragonAdventureIFChartMapSubDirBlock final
{
public:
	TArray<class FName>                           BlockName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFChartMapSubDirBlock) == 0x000008, "Wrong alignment on FSSDragonAdventureIFChartMapSubDirBlock");
static_assert(sizeof(FSSDragonAdventureIFChartMapSubDirBlock) == 0x000010, "Wrong size on FSSDragonAdventureIFChartMapSubDirBlock");
static_assert(offsetof(FSSDragonAdventureIFChartMapSubDirBlock, BlockName) == 0x000000, "Member 'FSSDragonAdventureIFChartMapSubDirBlock::BlockName' has a wrong offset!");

// ScriptStruct SS.KoratBattleZItemUnLockChkData
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleZItemUnLockChkData final
{
public:
	TArray<struct FKoratCharacterItemDataList>    AddUnLockZItem;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleZItemUnLockChkData) == 0x000008, "Wrong alignment on FKoratBattleZItemUnLockChkData");
static_assert(sizeof(FKoratBattleZItemUnLockChkData) == 0x000010, "Wrong size on FKoratBattleZItemUnLockChkData");
static_assert(offsetof(FKoratBattleZItemUnLockChkData, AddUnLockZItem) == 0x000000, "Member 'FKoratBattleZItemUnLockChkData::AddUnLockZItem' has a wrong offset!");

// ScriptStruct SS.KoratMapAttributeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMapAttributeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapAttributeDataList) == 0x000004, "Wrong alignment on FKoratMapAttributeDataList");
static_assert(sizeof(FKoratMapAttributeDataList) == 0x000008, "Wrong size on FKoratMapAttributeDataList");
static_assert(offsetof(FKoratMapAttributeDataList, Key) == 0x000000, "Member 'FKoratMapAttributeDataList::Key' has a wrong offset!");

// ScriptStruct SS.LocomotionParameterCache
// 0x0540 (0x0540 - 0x0000)
struct FLocomotionParameterCache final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XYSpeed;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZSpeed;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRot;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CharacterRot;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ToTargetRotation;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetDistance;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionY;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionZ;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearMoveAlpha;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleMoveAlpha;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNearMode;                                        // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockOn;                                          // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInAir;                                           // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityZ;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearModeSpeed;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InputVector;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputZ;                                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             EventHitArgHit;                                    // 0x00B0(0x00E8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsEnableMoveEffect;                                // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveEffectStartSpeed;                              // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveEffectEndSpeed;                                // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratLocomotionState                         LocomotionState;                                   // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratShortDashState                          ShortDashStatus;                                   // 0x01A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShortDashAdditionalMaxSpeed;                       // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortDashAdditionalSpeed;                          // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShortDashAdditionalSpeedCurve;                     // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortDashMoveTimer;                                // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDragonDashState                         DragonDashStatus;                                  // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DragonDashRotation;                                // 0x01C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EKoratBlowState                               BlowStatus;                                        // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBlowType                                BlowType;                                          // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlowIsFront;                                       // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB[0x5];                                      // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BlowHitBackMovementData;                           // 0x01E0(0x02E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BlowHitSpeedNormal;                                // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowHitSpeedParallel;                              // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowBoundSSpeedMax;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowBoundMSpeedMax;                                // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlowReactionLevel;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDragonHomingState                       DragonHomingStatus;                                // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDragonHomingState                       RevengeDashStatus;                                 // 0x04D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRequestPlayIdle;                                 // 0x04D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransitionRelaxIdle;                             // 0x04D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionIdleType                          ActionIdleType;                                    // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRequestResetStateMachine;                        // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratLocomotionState                         ResetStateMachineStatus;                           // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDragonHomingState                       BlastDashStatus;                                   // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratHighSpeedMoveState                      HighSpeedMoveStatus;                               // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x04DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DE[0x2];                                      // 0x04DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USSSplineComponent*                     SplineComponent;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineNowDistance;                                 // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDashUkemiState                          DashUkemiStatus;                                   // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDashUkemiType                           DashUkemiType;                                     // 0x04ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForecastBlowHit;                                 // 0x04EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EF[0x1];                                      // 0x04EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitLocation;                           // 0x04F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForecastBlowHitTime;                               // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapAttributeDataList             ForecastBlowHitMapAttribute;                       // 0x050C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForecastBlowHitNormal;                             // 0x0518(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDashUpDownState                         DashUpDownStatus;                                  // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDashUpDownType                          DashUpDownType;                                    // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratJumpState                               JumpStatus;                                        // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratStepState                               StepStatus;                                        // 0x0533(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratStepType                                StepType;                                          // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratStunReactionState                       StunReactionStatus;                                // 0x0535(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StunReactionIsFront;                               // 0x0536(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratWallUkemiState                          WallUkemiStatus;                                   // 0x0537(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsObstacleDetection;                               // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDownBlendSkip;                                   // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocomotionParameterCache) == 0x000008, "Wrong alignment on FLocomotionParameterCache");
static_assert(sizeof(FLocomotionParameterCache) == 0x000540, "Wrong size on FLocomotionParameterCache");
static_assert(offsetof(FLocomotionParameterCache, Speed) == 0x000000, "Member 'FLocomotionParameterCache::Speed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, XYSpeed) == 0x000004, "Member 'FLocomotionParameterCache::XYSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ZSpeed) == 0x000008, "Member 'FLocomotionParameterCache::ZSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, LastVelocityRot) == 0x000010, "Member 'FLocomotionParameterCache::LastVelocityRot' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, CharacterRot) == 0x000028, "Member 'FLocomotionParameterCache::CharacterRot' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ToTargetRotation) == 0x000040, "Member 'FLocomotionParameterCache::ToTargetRotation' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, TargetDistance) == 0x000058, "Member 'FLocomotionParameterCache::TargetDistance' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DirectionY) == 0x00005C, "Member 'FLocomotionParameterCache::DirectionY' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DirectionZ) == 0x000060, "Member 'FLocomotionParameterCache::DirectionZ' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, NearMoveAlpha) == 0x000064, "Member 'FLocomotionParameterCache::NearMoveAlpha' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BattleMoveAlpha) == 0x000068, "Member 'FLocomotionParameterCache::BattleMoveAlpha' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsNearMode) == 0x00006C, "Member 'FLocomotionParameterCache::IsNearMode' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsLockOn) == 0x00006D, "Member 'FLocomotionParameterCache::IsLockOn' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsInAir) == 0x00006E, "Member 'FLocomotionParameterCache::IsInAir' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, Velocity) == 0x000070, "Member 'FLocomotionParameterCache::Velocity' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, VelocityZ) == 0x000088, "Member 'FLocomotionParameterCache::VelocityZ' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, MaxSpeed) == 0x00008C, "Member 'FLocomotionParameterCache::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, NearModeSpeed) == 0x000090, "Member 'FLocomotionParameterCache::NearModeSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, InputVector) == 0x000098, "Member 'FLocomotionParameterCache::InputVector' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, InputZ) == 0x0000A8, "Member 'FLocomotionParameterCache::InputZ' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, EventHitArgHit) == 0x0000B0, "Member 'FLocomotionParameterCache::EventHitArgHit' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsEnableMoveEffect) == 0x000198, "Member 'FLocomotionParameterCache::IsEnableMoveEffect' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, MoveEffectStartSpeed) == 0x00019C, "Member 'FLocomotionParameterCache::MoveEffectStartSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, MoveEffectEndSpeed) == 0x0001A0, "Member 'FLocomotionParameterCache::MoveEffectEndSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, LocomotionState) == 0x0001A4, "Member 'FLocomotionParameterCache::LocomotionState' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ShortDashStatus) == 0x0001A5, "Member 'FLocomotionParameterCache::ShortDashStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ShortDashAdditionalMaxSpeed) == 0x0001A8, "Member 'FLocomotionParameterCache::ShortDashAdditionalMaxSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ShortDashAdditionalSpeed) == 0x0001AC, "Member 'FLocomotionParameterCache::ShortDashAdditionalSpeed' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ShortDashAdditionalSpeedCurve) == 0x0001B0, "Member 'FLocomotionParameterCache::ShortDashAdditionalSpeedCurve' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ShortDashMoveTimer) == 0x0001B8, "Member 'FLocomotionParameterCache::ShortDashMoveTimer' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DragonDashStatus) == 0x0001BC, "Member 'FLocomotionParameterCache::DragonDashStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DragonDashRotation) == 0x0001C0, "Member 'FLocomotionParameterCache::DragonDashRotation' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowStatus) == 0x0001D8, "Member 'FLocomotionParameterCache::BlowStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowType) == 0x0001D9, "Member 'FLocomotionParameterCache::BlowType' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowIsFront) == 0x0001DA, "Member 'FLocomotionParameterCache::BlowIsFront' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowHitBackMovementData) == 0x0001E0, "Member 'FLocomotionParameterCache::BlowHitBackMovementData' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowHitSpeedNormal) == 0x0004C0, "Member 'FLocomotionParameterCache::BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowHitSpeedParallel) == 0x0004C4, "Member 'FLocomotionParameterCache::BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowBoundSSpeedMax) == 0x0004C8, "Member 'FLocomotionParameterCache::BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowBoundMSpeedMax) == 0x0004CC, "Member 'FLocomotionParameterCache::BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlowReactionLevel) == 0x0004D0, "Member 'FLocomotionParameterCache::BlowReactionLevel' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DragonHomingStatus) == 0x0004D4, "Member 'FLocomotionParameterCache::DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, RevengeDashStatus) == 0x0004D5, "Member 'FLocomotionParameterCache::RevengeDashStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsRequestPlayIdle) == 0x0004D6, "Member 'FLocomotionParameterCache::IsRequestPlayIdle' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsTransitionRelaxIdle) == 0x0004D7, "Member 'FLocomotionParameterCache::IsTransitionRelaxIdle' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ActionIdleType) == 0x0004D8, "Member 'FLocomotionParameterCache::ActionIdleType' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsRequestResetStateMachine) == 0x0004D9, "Member 'FLocomotionParameterCache::IsRequestResetStateMachine' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ResetStateMachineStatus) == 0x0004DA, "Member 'FLocomotionParameterCache::ResetStateMachineStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, BlastDashStatus) == 0x0004DB, "Member 'FLocomotionParameterCache::BlastDashStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, HighSpeedMoveStatus) == 0x0004DC, "Member 'FLocomotionParameterCache::HighSpeedMoveStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ZBurstDashStatus) == 0x0004DD, "Member 'FLocomotionParameterCache::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, SplineComponent) == 0x0004E0, "Member 'FLocomotionParameterCache::SplineComponent' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, SplineNowDistance) == 0x0004E8, "Member 'FLocomotionParameterCache::SplineNowDistance' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DashUkemiStatus) == 0x0004EC, "Member 'FLocomotionParameterCache::DashUkemiStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DashUkemiType) == 0x0004ED, "Member 'FLocomotionParameterCache::DashUkemiType' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsForecastBlowHit) == 0x0004EE, "Member 'FLocomotionParameterCache::IsForecastBlowHit' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ForecastBlowHitLocation) == 0x0004F0, "Member 'FLocomotionParameterCache::ForecastBlowHitLocation' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ForecastBlowHitTime) == 0x000508, "Member 'FLocomotionParameterCache::ForecastBlowHitTime' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ForecastBlowHitMapAttribute) == 0x00050C, "Member 'FLocomotionParameterCache::ForecastBlowHitMapAttribute' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, ForecastBlowHitNormal) == 0x000518, "Member 'FLocomotionParameterCache::ForecastBlowHitNormal' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DashUpDownStatus) == 0x000530, "Member 'FLocomotionParameterCache::DashUpDownStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, DashUpDownType) == 0x000531, "Member 'FLocomotionParameterCache::DashUpDownType' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, JumpStatus) == 0x000532, "Member 'FLocomotionParameterCache::JumpStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, StepStatus) == 0x000533, "Member 'FLocomotionParameterCache::StepStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, StepType) == 0x000534, "Member 'FLocomotionParameterCache::StepType' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, StunReactionStatus) == 0x000535, "Member 'FLocomotionParameterCache::StunReactionStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, StunReactionIsFront) == 0x000536, "Member 'FLocomotionParameterCache::StunReactionIsFront' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, WallUkemiStatus) == 0x000537, "Member 'FLocomotionParameterCache::WallUkemiStatus' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsObstacleDetection) == 0x000538, "Member 'FLocomotionParameterCache::IsObstacleDetection' has a wrong offset!");
static_assert(offsetof(FLocomotionParameterCache, IsDownBlendSkip) == 0x000539, "Member 'FLocomotionParameterCache::IsDownBlendSkip' has a wrong offset!");

// ScriptStruct SS.SSSlotParameterStatic
// 0x0008 (0x0008 - 0x0000)
struct FSSSlotParameterStatic final
{
public:
	bool                                          bIgnorePriority;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLerpDisable;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidTerrainCamPosWidthScale;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSlotParameterStatic) == 0x000004, "Wrong alignment on FSSSlotParameterStatic");
static_assert(sizeof(FSSSlotParameterStatic) == 0x000008, "Wrong size on FSSSlotParameterStatic");
static_assert(offsetof(FSSSlotParameterStatic, bIgnorePriority) == 0x000000, "Member 'FSSSlotParameterStatic::bIgnorePriority' has a wrong offset!");
static_assert(offsetof(FSSSlotParameterStatic, bLerpDisable) == 0x000001, "Member 'FSSSlotParameterStatic::bLerpDisable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameterStatic, AvoidTerrainCamPosWidthScale) == 0x000004, "Member 'FSSSlotParameterStatic::AvoidTerrainCamPosWidthScale' has a wrong offset!");

// ScriptStruct SS.KoratEffectBoneSocketDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratEffectBoneSocketDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBoneSocketDataAssetRecord) == 0x000001, "Wrong alignment on FKoratEffectBoneSocketDataAssetRecord");
static_assert(sizeof(FKoratEffectBoneSocketDataAssetRecord) == 0x000001, "Wrong size on FKoratEffectBoneSocketDataAssetRecord");

// ScriptStruct SS.KoratLocomotionSectionDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratLocomotionSectionDataAssetRecord final
{
public:
	class UKoratLocomotionSectionDataAsset*       DataAsset;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratLocomotionSectionDataAssetRecord) == 0x000008, "Wrong alignment on FKoratLocomotionSectionDataAssetRecord");
static_assert(sizeof(FKoratLocomotionSectionDataAssetRecord) == 0x000008, "Wrong size on FKoratLocomotionSectionDataAssetRecord");
static_assert(offsetof(FKoratLocomotionSectionDataAssetRecord, DataAsset) == 0x000000, "Member 'FKoratLocomotionSectionDataAssetRecord::DataAsset' has a wrong offset!");

// ScriptStruct SS.KoratCharacterPatternVoiceInfo
// 0x0010 (0x0010 - 0x0000)
struct FKoratCharacterPatternVoiceInfo final
{
public:
	class FName                                   PatternName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterPatternVoiceInfo) == 0x000004, "Wrong alignment on FKoratCharacterPatternVoiceInfo");
static_assert(sizeof(FKoratCharacterPatternVoiceInfo) == 0x000010, "Wrong size on FKoratCharacterPatternVoiceInfo");
static_assert(offsetof(FKoratCharacterPatternVoiceInfo, PatternName) == 0x000000, "Member 'FKoratCharacterPatternVoiceInfo::PatternName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterPatternVoiceInfo, VoiceName) == 0x000008, "Member 'FKoratCharacterPatternVoiceInfo::VoiceName' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCharacterCompileDescriptionDE
// 0x0018 (0x0018 - 0x0000)
struct FSSEventSceneCharacterCompileDescriptionDE final
{
public:
	ESSEventSceneCharacterTypeDE                  CharacterType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDRMEditActionDataList            Action;                                            // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAuraEffect;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayActionEffect;                                 // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySlowTriggerParticleEffect;                    // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDRMEditFacialDataList            Facial;                                            // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneCharacterCompileDescriptionDE) == 0x000004, "Wrong alignment on FSSEventSceneCharacterCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneCharacterCompileDescriptionDE) == 0x000018, "Wrong size on FSSEventSceneCharacterCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, CharacterType) == 0x000000, "Member 'FSSEventSceneCharacterCompileDescriptionDE::CharacterType' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, Action) == 0x000004, "Member 'FSSEventSceneCharacterCompileDescriptionDE::Action' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, bPlayAuraEffect) == 0x00000C, "Member 'FSSEventSceneCharacterCompileDescriptionDE::bPlayAuraEffect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, bPlayActionEffect) == 0x00000D, "Member 'FSSEventSceneCharacterCompileDescriptionDE::bPlayActionEffect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, bPlaySlowTriggerParticleEffect) == 0x00000E, "Member 'FSSEventSceneCharacterCompileDescriptionDE::bPlaySlowTriggerParticleEffect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescriptionDE, Facial) == 0x000010, "Member 'FSSEventSceneCharacterCompileDescriptionDE::Facial' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditCameraDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditCameraDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditCameraDataList) == 0x000004, "Wrong alignment on FKoratDRMEditCameraDataList");
static_assert(sizeof(FKoratDRMEditCameraDataList) == 0x000008, "Wrong size on FKoratDRMEditCameraDataList");
static_assert(offsetof(FKoratDRMEditCameraDataList, Key) == 0x000000, "Member 'FKoratDRMEditCameraDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCameraCompileDescriptionDE
// 0x000C (0x000C - 0x0000)
struct FSSEventSceneCameraCompileDescriptionDE final
{
public:
	struct FKoratDRMEditCameraDataList            Camera;                                            // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVariablePlayRate;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCameraCompileDescriptionDE) == 0x000004, "Wrong alignment on FSSEventSceneCameraCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneCameraCompileDescriptionDE) == 0x00000C, "Wrong size on FSSEventSceneCameraCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneCameraCompileDescriptionDE, Camera) == 0x000000, "Member 'FSSEventSceneCameraCompileDescriptionDE::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCameraCompileDescriptionDE, bVariablePlayRate) == 0x000008, "Member 'FSSEventSceneCameraCompileDescriptionDE::bVariablePlayRate' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditEffectDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditEffectDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditEffectDataList) == 0x000004, "Wrong alignment on FKoratDRMEditEffectDataList");
static_assert(sizeof(FKoratDRMEditEffectDataList) == 0x000008, "Wrong size on FKoratDRMEditEffectDataList");
static_assert(offsetof(FKoratDRMEditEffectDataList, Key) == 0x000000, "Member 'FKoratDRMEditEffectDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSEventSceneEffectCompileDescriptionDE
// 0x000C (0x000C - 0x0000)
struct FSSEventSceneEffectCompileDescriptionDE final
{
public:
	struct FKoratDRMEditEffectDataList            Effect;                                            // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySlowTriggerFlashEffect;                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneEffectCompileDescriptionDE) == 0x000004, "Wrong alignment on FSSEventSceneEffectCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneEffectCompileDescriptionDE) == 0x00000C, "Wrong size on FSSEventSceneEffectCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneEffectCompileDescriptionDE, Effect) == 0x000000, "Member 'FSSEventSceneEffectCompileDescriptionDE::Effect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneEffectCompileDescriptionDE, bPlaySlowTriggerFlashEffect) == 0x000008, "Member 'FSSEventSceneEffectCompileDescriptionDE::bPlaySlowTriggerFlashEffect' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubtitleCompileDescriptionDE
// 0x0020 (0x0020 - 0x0000)
struct FSSEventSceneSubtitleCompileDescriptionDE final
{
public:
	struct FKoratDRMEditWordTextDataList          SpeakerText;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditBaseTextDataList          BaseText;                                          // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratDRMEditWordTextDataList>  ReplaceWordTexts;                                  // 0x0010(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubtitleCompileDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneSubtitleCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneSubtitleCompileDescriptionDE) == 0x000020, "Wrong size on FSSEventSceneSubtitleCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneSubtitleCompileDescriptionDE, SpeakerText) == 0x000000, "Member 'FSSEventSceneSubtitleCompileDescriptionDE::SpeakerText' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubtitleCompileDescriptionDE, BaseText) == 0x000008, "Member 'FSSEventSceneSubtitleCompileDescriptionDE::BaseText' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubtitleCompileDescriptionDE, ReplaceWordTexts) == 0x000010, "Member 'FSSEventSceneSubtitleCompileDescriptionDE::ReplaceWordTexts' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCutsceneCompileDescriptionDE
// 0x0068 (0x0068 - 0x0000)
struct FSSEventSceneCutsceneCompileDescriptionDE final
{
public:
	TArray<struct FSSEventSceneCharacterCompileDescriptionDE> Characters;                                        // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneCameraCompileDescriptionDE Camera;                                            // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDRMEditSituationDataList         Situation;                                         // 0x001C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSEventSceneEffectCompileDescriptionDE Effect;                                            // 0x0024(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGM;                                               // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSEventSceneSubtitleCompileDescriptionDE> Subtitles;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SlowStartFrame;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           Picture;                                           // 0x004C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditLayerDataList             Layer;                                             // 0x0054(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           EmbeddedThumbnail;                                 // 0x005C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCutsceneCompileDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneCutsceneCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneCutsceneCompileDescriptionDE) == 0x000068, "Wrong size on FSSEventSceneCutsceneCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Characters) == 0x000000, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Characters' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Camera) == 0x000010, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Situation) == 0x00001C, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Situation' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Effect) == 0x000024, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Effect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, BGM) == 0x000030, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::BGM' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Subtitles) == 0x000038, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Subtitles' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, SlowStartFrame) == 0x000048, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::SlowStartFrame' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Picture) == 0x00004C, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Picture' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, Layer) == 0x000054, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::Layer' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneCompileDescriptionDE, EmbeddedThumbnail) == 0x00005C, "Member 'FSSEventSceneCutsceneCompileDescriptionDE::EmbeddedThumbnail' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCharacterCompileDescription
// 0x0018 (0x0018 - 0x0000)
struct FSSEventSceneCharacterCompileDescription final
{
public:
	struct FKoratCharacterDataList                Identifier;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    Items;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneCharacterCompileDescription) == 0x000008, "Wrong alignment on FSSEventSceneCharacterCompileDescription");
static_assert(sizeof(FSSEventSceneCharacterCompileDescription) == 0x000018, "Wrong size on FSSEventSceneCharacterCompileDescription");
static_assert(offsetof(FSSEventSceneCharacterCompileDescription, Identifier) == 0x000000, "Member 'FSSEventSceneCharacterCompileDescription::Identifier' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterCompileDescription, Items) == 0x000008, "Member 'FSSEventSceneCharacterCompileDescription::Items' has a wrong offset!");

// ScriptStruct SS.KoratDramaticCutDataRecord
// 0x00C8 (0x00C8 - 0x0000)
struct FKoratDramaticCutDataRecord final
{
public:
	struct FKoratMapDataList                      PlayMap;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EKoratDramaticCutCharacterType, struct FSSEventSceneCharacterCompileDescription> Characters;                                        // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	struct FSSEventSceneCutsceneCompileDescriptionDE CutData;                                           // 0x0058(0x0068)(NativeAccessSpecifierPublic)
	bool                                          bIsTempAssembleThumbnail;                          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThumbnailCaptureFlame;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticCutDataRecord) == 0x000008, "Wrong alignment on FKoratDramaticCutDataRecord");
static_assert(sizeof(FKoratDramaticCutDataRecord) == 0x0000C8, "Wrong size on FKoratDramaticCutDataRecord");
static_assert(offsetof(FKoratDramaticCutDataRecord, PlayMap) == 0x000000, "Member 'FKoratDramaticCutDataRecord::PlayMap' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCutDataRecord, Characters) == 0x000008, "Member 'FKoratDramaticCutDataRecord::Characters' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCutDataRecord, CutData) == 0x000058, "Member 'FKoratDramaticCutDataRecord::CutData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCutDataRecord, bIsTempAssembleThumbnail) == 0x0000C0, "Member 'FKoratDramaticCutDataRecord::bIsTempAssembleThumbnail' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCutDataRecord, ThumbnailCaptureFlame) == 0x0000C4, "Member 'FKoratDramaticCutDataRecord::ThumbnailCaptureFlame' has a wrong offset!");

// ScriptStruct SS.KoratChangeCharacterActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratChangeCharacterActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratChangeCharacterActionDataList) == 0x000004, "Wrong alignment on FKoratChangeCharacterActionDataList");
static_assert(sizeof(FKoratChangeCharacterActionDataList) == 0x000008, "Wrong size on FKoratChangeCharacterActionDataList");
static_assert(offsetof(FKoratChangeCharacterActionDataList, Key) == 0x000000, "Member 'FKoratChangeCharacterActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterSoundDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterSoundDataAssetRecord final
{
public:
	class FName                                   VoiceCueSheetName;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundEffectCueSheetName;                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterPatternVoiceInfo> PatternVoiceList;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterSoundDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterSoundDataAssetRecord");
static_assert(sizeof(FKoratCharacterSoundDataAssetRecord) == 0x000020, "Wrong size on FKoratCharacterSoundDataAssetRecord");
static_assert(offsetof(FKoratCharacterSoundDataAssetRecord, VoiceCueSheetName) == 0x000000, "Member 'FKoratCharacterSoundDataAssetRecord::VoiceCueSheetName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSoundDataAssetRecord, SoundEffectCueSheetName) == 0x000008, "Member 'FKoratCharacterSoundDataAssetRecord::SoundEffectCueSheetName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSoundDataAssetRecord, PatternVoiceList) == 0x000010, "Member 'FKoratCharacterSoundDataAssetRecord::PatternVoiceList' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleNewCutEditorItemId
// 0x0008 (0x0008 - 0x0000)
struct FSSDramaticBattleNewCutEditorItemId final
{
public:
	ESSDramaticButtlleNewCutEditorSettingTopCategory TopCategory;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSDramaticButtlleNewCutEditorSettingInnerCategory InnerCategory;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleNewCutEditorItemId) == 0x000004, "Wrong alignment on FSSDramaticBattleNewCutEditorItemId");
static_assert(sizeof(FSSDramaticBattleNewCutEditorItemId) == 0x000008, "Wrong size on FSSDramaticBattleNewCutEditorItemId");
static_assert(offsetof(FSSDramaticBattleNewCutEditorItemId, TopCategory) == 0x000000, "Member 'FSSDramaticBattleNewCutEditorItemId::TopCategory' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleNewCutEditorItemId, InnerCategory) == 0x000001, "Member 'FSSDramaticBattleNewCutEditorItemId::InnerCategory' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleNewCutEditorItemId, Slot) == 0x000004, "Member 'FSSDramaticBattleNewCutEditorItemId::Slot' has a wrong offset!");

// ScriptStruct SS.SSPartsAnimationPtr
// 0x0010 (0x0010 - 0x0000)
struct FSSPartsAnimationPtr final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPartsAnimationPtr) == 0x000008, "Wrong alignment on FSSPartsAnimationPtr");
static_assert(sizeof(FSSPartsAnimationPtr) == 0x000010, "Wrong size on FSSPartsAnimationPtr");
static_assert(offsetof(FSSPartsAnimationPtr, Tag) == 0x000000, "Member 'FSSPartsAnimationPtr::Tag' has a wrong offset!");
static_assert(offsetof(FSSPartsAnimationPtr, Montage) == 0x000008, "Member 'FSSPartsAnimationPtr::Montage' has a wrong offset!");

// ScriptStruct SS.KoratRequestAnimData
// 0x00E0 (0x00E0 - 0x0000)
struct FKoratRequestAnimData final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplaceAnimationIndex;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      MontageSectionPlayRates;                           // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      MontageSectionExtendSegments;                      // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USSActionCameraDataAsset*               ActionCameraAsset;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSPartsAnimationPtr>           PartsAnimations;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratReplaceAnimationDataList         AnimDataList;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratAnimType                                AnimType;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratPlayableAnimType                        PlayableAnimType;                                  // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoonStart;                                        // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrun;                                             // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelableOnly;                                   // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAutoInterpolateBlendOut;                   // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRequestAnimData) == 0x000008, "Wrong alignment on FKoratRequestAnimData");
static_assert(sizeof(FKoratRequestAnimData) == 0x0000E0, "Wrong size on FKoratRequestAnimData");
static_assert(offsetof(FKoratRequestAnimData, Montage) == 0x000000, "Member 'FKoratRequestAnimData::Montage' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, LevelSequence) == 0x000008, "Member 'FKoratRequestAnimData::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, ReplaceAnimationIndex) == 0x000010, "Member 'FKoratRequestAnimData::ReplaceAnimationIndex' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, MontageSectionPlayRates) == 0x000018, "Member 'FKoratRequestAnimData::MontageSectionPlayRates' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, MontageSectionExtendSegments) == 0x000068, "Member 'FKoratRequestAnimData::MontageSectionExtendSegments' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, ActionCameraAsset) == 0x0000B8, "Member 'FKoratRequestAnimData::ActionCameraAsset' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, PartsAnimations) == 0x0000C0, "Member 'FKoratRequestAnimData::PartsAnimations' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, AnimDataList) == 0x0000D0, "Member 'FKoratRequestAnimData::AnimDataList' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, AnimType) == 0x0000D8, "Member 'FKoratRequestAnimData::AnimType' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, PlayableAnimType) == 0x0000D9, "Member 'FKoratRequestAnimData::PlayableAnimType' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, bSoonStart) == 0x0000DA, "Member 'FKoratRequestAnimData::bSoonStart' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, bTrun) == 0x0000DB, "Member 'FKoratRequestAnimData::bTrun' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, bCancelableOnly) == 0x0000DC, "Member 'FKoratRequestAnimData::bCancelableOnly' has a wrong offset!");
static_assert(offsetof(FKoratRequestAnimData, bDisableAutoInterpolateBlendOut) == 0x0000DD, "Member 'FKoratRequestAnimData::bDisableAutoInterpolateBlendOut' has a wrong offset!");

// ScriptStruct SS.SSMenuCharacterGetRemoveInfo
// 0x0010 (0x0010 - 0x0000)
struct FSSMenuCharacterGetRemoveInfo final
{
public:
	class ASSCharacter*                           Character;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSUICharacterReader*                   CharacterReader;                                   // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMenuCharacterGetRemoveInfo) == 0x000008, "Wrong alignment on FSSMenuCharacterGetRemoveInfo");
static_assert(sizeof(FSSMenuCharacterGetRemoveInfo) == 0x000010, "Wrong size on FSSMenuCharacterGetRemoveInfo");
static_assert(offsetof(FSSMenuCharacterGetRemoveInfo, Character) == 0x000000, "Member 'FSSMenuCharacterGetRemoveInfo::Character' has a wrong offset!");
static_assert(offsetof(FSSMenuCharacterGetRemoveInfo, CharacterReader) == 0x000008, "Member 'FSSMenuCharacterGetRemoveInfo::CharacterReader' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFParam
// 0x0080 (0x0080 - 0x0000)
struct FSSDragonAdventureIFParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSMenuCharacterGetRemoveInfo>  CharacterRemoveInfoArray;                          // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFParam) == 0x000008, "Wrong alignment on FSSDragonAdventureIFParam");
static_assert(sizeof(FSSDragonAdventureIFParam) == 0x000080, "Wrong size on FSSDragonAdventureIFParam");
static_assert(offsetof(FSSDragonAdventureIFParam, CharacterRemoveInfoArray) == 0x000058, "Member 'FSSDragonAdventureIFParam::CharacterRemoveInfoArray' has a wrong offset!");

// ScriptStruct SS.KoratPlayAnimData
// 0x0030 (0x0030 - 0x0000)
struct FKoratPlayAnimData final
{
public:
	struct FKoratReplaceAnimationDataList         AnimDataList;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OriginalMontage;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAutoInterpolateBlendOut;                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPlayAnimData) == 0x000008, "Wrong alignment on FKoratPlayAnimData");
static_assert(sizeof(FKoratPlayAnimData) == 0x000030, "Wrong size on FKoratPlayAnimData");
static_assert(offsetof(FKoratPlayAnimData, AnimDataList) == 0x000000, "Member 'FKoratPlayAnimData::AnimDataList' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, AnimationIndex) == 0x000008, "Member 'FKoratPlayAnimData::AnimationIndex' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, Montage) == 0x000010, "Member 'FKoratPlayAnimData::Montage' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, OriginalMontage) == 0x000018, "Member 'FKoratPlayAnimData::OriginalMontage' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, LevelSequence) == 0x000020, "Member 'FKoratPlayAnimData::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, bPlaying) == 0x000028, "Member 'FKoratPlayAnimData::bPlaying' has a wrong offset!");
static_assert(offsetof(FKoratPlayAnimData, bDisableAutoInterpolateBlendOut) == 0x000029, "Member 'FKoratPlayAnimData::bDisableAutoInterpolateBlendOut' has a wrong offset!");

// ScriptStruct SS.SSPlayerMatchRoomData
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FSSPlayerMatchRoomData final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerMatchRoomData) == 0x000008, "Wrong alignment on FSSPlayerMatchRoomData");
static_assert(sizeof(FSSPlayerMatchRoomData) == 0x000048, "Wrong size on FSSPlayerMatchRoomData");

// ScriptStruct SS.KoratStockItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratStockItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratStockItemDataList) == 0x000004, "Wrong alignment on FKoratStockItemDataList");
static_assert(sizeof(FKoratStockItemDataList) == 0x000008, "Wrong size on FKoratStockItemDataList");
static_assert(offsetof(FKoratStockItemDataList, Key) == 0x000000, "Member 'FKoratStockItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratSubActionAnim
// 0x0090 (0x0090 - 0x0000)
struct FKoratSubActionAnim final
{
public:
	struct FKoratPlayAnimData                     PlayAnimData;                                      // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratPlayAnimData                     PrePlayAnimData;                                   // 0x0030(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  LevelSequenceActor;                                // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextSectionName;                                   // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetSectionName;                                    // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsContinued;                                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDamageCancel;                                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSubActionAnim) == 0x000008, "Wrong alignment on FKoratSubActionAnim");
static_assert(sizeof(FKoratSubActionAnim) == 0x000090, "Wrong size on FKoratSubActionAnim");
static_assert(offsetof(FKoratSubActionAnim, PlayAnimData) == 0x000000, "Member 'FKoratSubActionAnim::PlayAnimData' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, PrePlayAnimData) == 0x000030, "Member 'FKoratSubActionAnim::PrePlayAnimData' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, LevelSequenceActor) == 0x000060, "Member 'FKoratSubActionAnim::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, NextSectionName) == 0x000068, "Member 'FKoratSubActionAnim::NextSectionName' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, SetSectionName) == 0x000078, "Member 'FKoratSubActionAnim::SetSectionName' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, IsContinued) == 0x000088, "Member 'FKoratSubActionAnim::IsContinued' has a wrong offset!");
static_assert(offsetof(FKoratSubActionAnim, IsDamageCancel) == 0x000089, "Member 'FKoratSubActionAnim::IsDamageCancel' has a wrong offset!");

// ScriptStruct SS.KoratAddtiveReactionParameter
// 0x0002 (0x0002 - 0x0000)
struct FKoratAddtiveReactionParameter final
{
public:
	bool                                          bFrontHit;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArmor;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAddtiveReactionParameter) == 0x000001, "Wrong alignment on FKoratAddtiveReactionParameter");
static_assert(sizeof(FKoratAddtiveReactionParameter) == 0x000002, "Wrong size on FKoratAddtiveReactionParameter");
static_assert(offsetof(FKoratAddtiveReactionParameter, bFrontHit) == 0x000000, "Member 'FKoratAddtiveReactionParameter::bFrontHit' has a wrong offset!");
static_assert(offsetof(FKoratAddtiveReactionParameter, bArmor) == 0x000001, "Member 'FKoratAddtiveReactionParameter::bArmor' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSingleImageData
// 0x0030 (0x0030 - 0x0000)
struct FKoratDramaticBattleSingleImageData final
{
public:
	TArray<uint8>                                 BinaryImage;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PresetImageId;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotResisted;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2DDynamic*                      Texture;                                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutId;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSingleImageData) == 0x000008, "Wrong alignment on FKoratDramaticBattleSingleImageData");
static_assert(sizeof(FKoratDramaticBattleSingleImageData) == 0x000030, "Wrong size on FKoratDramaticBattleSingleImageData");
static_assert(offsetof(FKoratDramaticBattleSingleImageData, BinaryImage) == 0x000000, "Member 'FKoratDramaticBattleSingleImageData::BinaryImage' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSingleImageData, PresetImageId) == 0x000010, "Member 'FKoratDramaticBattleSingleImageData::PresetImageId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSingleImageData, bIsNotResisted) == 0x000018, "Member 'FKoratDramaticBattleSingleImageData::bIsNotResisted' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSingleImageData, Texture) == 0x000020, "Member 'FKoratDramaticBattleSingleImageData::Texture' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSingleImageData, CutId) == 0x000028, "Member 'FKoratDramaticBattleSingleImageData::CutId' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleImageData
// 0x0070 (0x0070 - 0x0000)
struct FKoratDramaticBattleImageData final
{
public:
	struct FKoratDramaticBattleSingleImageData    MainImage;                                         // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleSingleImageData    BgImage;                                           // 0x0030(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticBattleSingleImageData> SlideshowImages;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleImageData) == 0x000008, "Wrong alignment on FKoratDramaticBattleImageData");
static_assert(sizeof(FKoratDramaticBattleImageData) == 0x000070, "Wrong size on FKoratDramaticBattleImageData");
static_assert(offsetof(FKoratDramaticBattleImageData, MainImage) == 0x000000, "Member 'FKoratDramaticBattleImageData::MainImage' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleImageData, BgImage) == 0x000030, "Member 'FKoratDramaticBattleImageData::BgImage' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleImageData, SlideshowImages) == 0x000060, "Member 'FKoratDramaticBattleImageData::SlideshowImages' has a wrong offset!");

// ScriptStruct SS.KoratSwitchVisibilityMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct FKoratSwitchVisibilityMeshComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         Components;                                        // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSwitchVisibilityMeshComponents) == 0x000008, "Wrong alignment on FKoratSwitchVisibilityMeshComponents");
static_assert(sizeof(FKoratSwitchVisibilityMeshComponents) == 0x000010, "Wrong size on FKoratSwitchVisibilityMeshComponents");
static_assert(offsetof(FKoratSwitchVisibilityMeshComponents, Components) == 0x000000, "Member 'FKoratSwitchVisibilityMeshComponents::Components' has a wrong offset!");

// ScriptStruct SS.KoratSwitchVisibilityCondition
// 0x0002 (0x0002 - 0x0000)
struct FKoratSwitchVisibilityCondition final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAndCondition;                                     // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSwitchVisibilityCondition) == 0x000001, "Wrong alignment on FKoratSwitchVisibilityCondition");
static_assert(sizeof(FKoratSwitchVisibilityCondition) == 0x000002, "Wrong size on FKoratSwitchVisibilityCondition");
static_assert(offsetof(FKoratSwitchVisibilityCondition, bVisible) == 0x000000, "Member 'FKoratSwitchVisibilityCondition::bVisible' has a wrong offset!");
static_assert(offsetof(FKoratSwitchVisibilityCondition, bAndCondition) == 0x000001, "Member 'FKoratSwitchVisibilityCondition::bAndCondition' has a wrong offset!");

// ScriptStruct SS.KoratDramaticReplayAdditionalData
// 0x0028 (0x0028 - 0x0000)
struct FKoratDramaticReplayAdditionalData final
{
public:
	struct FDateTime                              PostTime;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishTime;                                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PlaybackTime;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodCount;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavoriteNum;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSReplayDataUWinLose                         WinLose;                                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGood;                                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFavorite;                                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPublic;                                         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSetListInfo;                                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeleted;                                        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReceivedBattleData;                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReceivedReplayData;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticReplayAdditionalData) == 0x000008, "Wrong alignment on FKoratDramaticReplayAdditionalData");
static_assert(sizeof(FKoratDramaticReplayAdditionalData) == 0x000028, "Wrong size on FKoratDramaticReplayAdditionalData");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, PostTime) == 0x000000, "Member 'FKoratDramaticReplayAdditionalData::PostTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, PublishTime) == 0x000008, "Member 'FKoratDramaticReplayAdditionalData::PublishTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, PlaybackTime) == 0x000010, "Member 'FKoratDramaticReplayAdditionalData::PlaybackTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, GoodCount) == 0x000018, "Member 'FKoratDramaticReplayAdditionalData::GoodCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, FavoriteNum) == 0x00001C, "Member 'FKoratDramaticReplayAdditionalData::FavoriteNum' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, WinLose) == 0x000020, "Member 'FKoratDramaticReplayAdditionalData::WinLose' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsGood) == 0x000021, "Member 'FKoratDramaticReplayAdditionalData::bIsGood' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsFavorite) == 0x000022, "Member 'FKoratDramaticReplayAdditionalData::bIsFavorite' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsPublic) == 0x000023, "Member 'FKoratDramaticReplayAdditionalData::bIsPublic' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsSetListInfo) == 0x000024, "Member 'FKoratDramaticReplayAdditionalData::bIsSetListInfo' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsDeleted) == 0x000025, "Member 'FKoratDramaticReplayAdditionalData::bIsDeleted' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsReceivedBattleData) == 0x000026, "Member 'FKoratDramaticReplayAdditionalData::bIsReceivedBattleData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayAdditionalData, bIsReceivedReplayData) == 0x000027, "Member 'FKoratDramaticReplayAdditionalData::bIsReceivedReplayData' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditSceneTransformDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditSceneTransformDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditSceneTransformDataList) == 0x000004, "Wrong alignment on FKoratDRMEditSceneTransformDataList");
static_assert(sizeof(FKoratDRMEditSceneTransformDataList) == 0x000008, "Wrong size on FKoratDRMEditSceneTransformDataList");
static_assert(offsetof(FKoratDRMEditSceneTransformDataList, Key) == 0x000000, "Member 'FKoratDRMEditSceneTransformDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratSwitchVisibilityConditions
// 0x0050 (0x0050 - 0x0000)
struct FKoratSwitchVisibilityConditions final
{
public:
	TMap<class FName, struct FKoratSwitchVisibilityCondition> Conditions;                                        // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSwitchVisibilityConditions) == 0x000008, "Wrong alignment on FKoratSwitchVisibilityConditions");
static_assert(sizeof(FKoratSwitchVisibilityConditions) == 0x000050, "Wrong size on FKoratSwitchVisibilityConditions");
static_assert(offsetof(FKoratSwitchVisibilityConditions, Conditions) == 0x000000, "Member 'FKoratSwitchVisibilityConditions::Conditions' has a wrong offset!");

// ScriptStruct SS.SSSimpleAimLookatNodeParameter
// 0x0008 (0x0008 - 0x0000)
struct FSSSimpleAimLookatNodeParameter final
{
public:
	float                                         ClampAngle;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSSimpleAimLookatNodeParameter) == 0x000004, "Wrong alignment on FSSSimpleAimLookatNodeParameter");
static_assert(sizeof(FSSSimpleAimLookatNodeParameter) == 0x000008, "Wrong size on FSSSimpleAimLookatNodeParameter");
static_assert(offsetof(FSSSimpleAimLookatNodeParameter, ClampAngle) == 0x000000, "Member 'FSSSimpleAimLookatNodeParameter::ClampAngle' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatNodeParameter, Weight) == 0x000004, "Member 'FSSSimpleAimLookatNodeParameter::Weight' has a wrong offset!");

// ScriptStruct SS.KoratTransitionData
// 0x0010 (0x0010 - 0x0000)
struct FKoratTransitionData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratAsyncTransitionJudgment*          AsyncTransition;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTransitionData) == 0x000008, "Wrong alignment on FKoratTransitionData");
static_assert(sizeof(FKoratTransitionData) == 0x000010, "Wrong size on FKoratTransitionData");
static_assert(offsetof(FKoratTransitionData, AsyncTransition) == 0x000008, "Member 'FKoratTransitionData::AsyncTransition' has a wrong offset!");

// ScriptStruct SS.KoratCharacterTypeDataAssetRecord
// 0x0078 (0x0078 - 0x0000)
struct FKoratCharacterTypeDataAssetRecord final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         RushDamageScale;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashDamageScale;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboAttackDamageScale;                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowDamageScale;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParryDamageScale;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitDamageScale;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushBulletDamageScale;                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashBulletDamageScale;                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastForteDamageScale;                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastDamageScale;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastUltimateDamageScale;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombativesDamageResist;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyDamageResist;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombativesChargeScale;                             // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletChargeScale;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoveryScale;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPChargeSpeedScale;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackEnergyGainScale;                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingGaugeChargeSpeedScale;                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSparkingGaugeDecreaseSpeedScale;                // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingModeGaugeDecreaseSpeedScale;               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastRecoverSpeedScale;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletExpendEnergyScale;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterTypeDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterTypeDataAssetRecord");
static_assert(sizeof(FKoratCharacterTypeDataAssetRecord) == 0x000078, "Wrong size on FKoratCharacterTypeDataAssetRecord");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, Name) == 0x000000, "Member 'FKoratCharacterTypeDataAssetRecord::Name' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, RushDamageScale) == 0x000018, "Member 'FKoratCharacterTypeDataAssetRecord::RushDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SmashDamageScale) == 0x00001C, "Member 'FKoratCharacterTypeDataAssetRecord::SmashDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, ComboAttackDamageScale) == 0x000020, "Member 'FKoratCharacterTypeDataAssetRecord::ComboAttackDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, ThrowDamageScale) == 0x000024, "Member 'FKoratCharacterTypeDataAssetRecord::ThrowDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, ParryDamageScale) == 0x000028, "Member 'FKoratCharacterTypeDataAssetRecord::ParryDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, PursuitDamageScale) == 0x00002C, "Member 'FKoratCharacterTypeDataAssetRecord::PursuitDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, RushBulletDamageScale) == 0x000030, "Member 'FKoratCharacterTypeDataAssetRecord::RushBulletDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SmashBulletDamageScale) == 0x000034, "Member 'FKoratCharacterTypeDataAssetRecord::SmashBulletDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BlastForteDamageScale) == 0x000038, "Member 'FKoratCharacterTypeDataAssetRecord::BlastForteDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BlastDamageScale) == 0x00003C, "Member 'FKoratCharacterTypeDataAssetRecord::BlastDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BlastUltimateDamageScale) == 0x000040, "Member 'FKoratCharacterTypeDataAssetRecord::BlastUltimateDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, CombativesDamageResist) == 0x000044, "Member 'FKoratCharacterTypeDataAssetRecord::CombativesDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, EnergyDamageResist) == 0x000048, "Member 'FKoratCharacterTypeDataAssetRecord::EnergyDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, CombativesChargeScale) == 0x00004C, "Member 'FKoratCharacterTypeDataAssetRecord::CombativesChargeScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BulletChargeScale) == 0x000050, "Member 'FKoratCharacterTypeDataAssetRecord::BulletChargeScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SPAutoRecoveryScale) == 0x000054, "Member 'FKoratCharacterTypeDataAssetRecord::SPAutoRecoveryScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SPChargeSpeedScale) == 0x000058, "Member 'FKoratCharacterTypeDataAssetRecord::SPChargeSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, AttackEnergyGainScale) == 0x00005C, "Member 'FKoratCharacterTypeDataAssetRecord::AttackEnergyGainScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SparkingGaugeChargeSpeedScale) == 0x000060, "Member 'FKoratCharacterTypeDataAssetRecord::SparkingGaugeChargeSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, PreSparkingGaugeDecreaseSpeedScale) == 0x000064, "Member 'FKoratCharacterTypeDataAssetRecord::PreSparkingGaugeDecreaseSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, SparkingModeGaugeDecreaseSpeedScale) == 0x000068, "Member 'FKoratCharacterTypeDataAssetRecord::SparkingModeGaugeDecreaseSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BlastRecoverSpeedScale) == 0x00006C, "Member 'FKoratCharacterTypeDataAssetRecord::BlastRecoverSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterTypeDataAssetRecord, BulletExpendEnergyScale) == 0x000070, "Member 'FKoratCharacterTypeDataAssetRecord::BulletExpendEnergyScale' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterGoBack
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterGoBack final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterGoBack) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterGoBack");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterGoBack) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterGoBack");

// ScriptStruct SS.KoratCharacterUIActionComponentCommandRequest
// 0x0002 (0x0002 - 0x0000)
struct FKoratCharacterUIActionComponentCommandRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDone;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionComponentCommandRequest) == 0x000001, "Wrong alignment on FKoratCharacterUIActionComponentCommandRequest");
static_assert(sizeof(FKoratCharacterUIActionComponentCommandRequest) == 0x000002, "Wrong size on FKoratCharacterUIActionComponentCommandRequest");
static_assert(offsetof(FKoratCharacterUIActionComponentCommandRequest, bIsDone) == 0x000001, "Member 'FKoratCharacterUIActionComponentCommandRequest::bIsDone' has a wrong offset!");

// ScriptStruct SS.KoratInitialUnlockInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FKoratInitialUnlockInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratInitialUnlockInfo) == 0x000004, "Wrong alignment on FKoratInitialUnlockInfo");
static_assert(sizeof(FKoratInitialUnlockInfo) == 0x000018, "Wrong size on FKoratInitialUnlockInfo");

// ScriptStruct SS.KoratTeamTalkDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratTeamTalkDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTeamTalkDataList) == 0x000004, "Wrong alignment on FKoratTeamTalkDataList");
static_assert(sizeof(FKoratTeamTalkDataList) == 0x000008, "Wrong size on FKoratTeamTalkDataList");
static_assert(offsetof(FKoratTeamTalkDataList, Key) == 0x000000, "Member 'FKoratTeamTalkDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionDebugDrawDisplayItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FKoratCharacterUIActionDebugDrawDisplayItemInfo final
{
public:
	struct FVector2D                              DrawOffsetPosition;                                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWidth;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterUIActionDebugDrawDisplayItemInfo) == 0x000008, "Wrong alignment on FKoratCharacterUIActionDebugDrawDisplayItemInfo");
static_assert(sizeof(FKoratCharacterUIActionDebugDrawDisplayItemInfo) == 0x000030, "Wrong size on FKoratCharacterUIActionDebugDrawDisplayItemInfo");
static_assert(offsetof(FKoratCharacterUIActionDebugDrawDisplayItemInfo, DrawOffsetPosition) == 0x000000, "Member 'FKoratCharacterUIActionDebugDrawDisplayItemInfo::DrawOffsetPosition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterUIActionDebugDrawDisplayItemInfo, MaxWidth) == 0x000010, "Member 'FKoratCharacterUIActionDebugDrawDisplayItemInfo::MaxWidth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterUIActionDebugDrawDisplayItemInfo, MaxHeight) == 0x000014, "Member 'FKoratCharacterUIActionDebugDrawDisplayItemInfo::MaxHeight' has a wrong offset!");

// ScriptStruct SS.KoratUIActionBlendOption
// 0x0078 (0x0078 - 0x0000)
struct FKoratUIActionBlendOption final
{
public:
	bool                                          bOverrideBlendIn;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendIn;                                           // 0x0008(0x0030)(Edit, BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideBlendOut;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendOut;                                          // 0x0040(0x0030)(Edit, BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoBlendOut;                               // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratUIActionBlendOption) == 0x000008, "Wrong alignment on FKoratUIActionBlendOption");
static_assert(sizeof(FKoratUIActionBlendOption) == 0x000078, "Wrong size on FKoratUIActionBlendOption");
static_assert(offsetof(FKoratUIActionBlendOption, bOverrideBlendIn) == 0x000000, "Member 'FKoratUIActionBlendOption::bOverrideBlendIn' has a wrong offset!");
static_assert(offsetof(FKoratUIActionBlendOption, BlendIn) == 0x000008, "Member 'FKoratUIActionBlendOption::BlendIn' has a wrong offset!");
static_assert(offsetof(FKoratUIActionBlendOption, bOverrideBlendOut) == 0x000038, "Member 'FKoratUIActionBlendOption::bOverrideBlendOut' has a wrong offset!");
static_assert(offsetof(FKoratUIActionBlendOption, BlendOut) == 0x000040, "Member 'FKoratUIActionBlendOption::BlendOut' has a wrong offset!");
static_assert(offsetof(FKoratUIActionBlendOption, BlendOutTriggerTime) == 0x000070, "Member 'FKoratUIActionBlendOption::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(FKoratUIActionBlendOption, bEnableAutoBlendOut) == 0x000074, "Member 'FKoratUIActionBlendOption::bEnableAutoBlendOut' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestPlayInfo
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterUIActionRequestPlayInfo final
{
public:
	class UKoratMLSDataAsset*                     UIActionMLS;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestPlayInfo) == 0x000008, "Wrong alignment on FKoratCharacterUIActionRequestPlayInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestPlayInfo) == 0x000008, "Wrong size on FKoratCharacterUIActionRequestPlayInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestPlayInfo, UIActionMLS) == 0x000000, "Member 'FKoratCharacterUIActionRequestPlayInfo::UIActionMLS' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestSectionInfo
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterUIActionRequestSectionInfo final
{
public:
	class FName                                   UIActionSectionName;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestSectionInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestSectionInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestSectionInfo) == 0x000008, "Wrong size on FKoratCharacterUIActionRequestSectionInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestSectionInfo, UIActionSectionName) == 0x000000, "Member 'FKoratCharacterUIActionRequestSectionInfo::UIActionSectionName' has a wrong offset!");

// ScriptStruct SS.KoratTriggerEffectParameters
// 0x0018 (0x0018 - 0x0000)
struct FKoratTriggerEffectParameters final
{
public:
	ESSTriggerEffectMode                          Mode;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartPosition;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Frequency;                                         // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Strengths;                                         // 0x0008(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTriggerEffectParameters) == 0x000008, "Wrong alignment on FKoratTriggerEffectParameters");
static_assert(sizeof(FKoratTriggerEffectParameters) == 0x000018, "Wrong size on FKoratTriggerEffectParameters");
static_assert(offsetof(FKoratTriggerEffectParameters, Mode) == 0x000000, "Member 'FKoratTriggerEffectParameters::Mode' has a wrong offset!");
static_assert(offsetof(FKoratTriggerEffectParameters, StartPosition) == 0x000004, "Member 'FKoratTriggerEffectParameters::StartPosition' has a wrong offset!");
static_assert(offsetof(FKoratTriggerEffectParameters, EndPosition) == 0x000005, "Member 'FKoratTriggerEffectParameters::EndPosition' has a wrong offset!");
static_assert(offsetof(FKoratTriggerEffectParameters, Frequency) == 0x000006, "Member 'FKoratTriggerEffectParameters::Frequency' has a wrong offset!");
static_assert(offsetof(FKoratTriggerEffectParameters, Strength) == 0x000007, "Member 'FKoratTriggerEffectParameters::Strength' has a wrong offset!");
static_assert(offsetof(FKoratTriggerEffectParameters, Strengths) == 0x000008, "Member 'FKoratTriggerEffectParameters::Strengths' has a wrong offset!");

// ScriptStruct SS.MovieSceneTriggerEffectSectionTemplate
// 0x0020 (0x0040 - 0x0020)
struct FMovieSceneTriggerEffectSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	ESSKeyInputType                               InputType;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratTriggerEffectParameters          Params;                                            // 0x0028(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTriggerEffectSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneTriggerEffectSectionTemplate");
static_assert(sizeof(FMovieSceneTriggerEffectSectionTemplate) == 0x000040, "Wrong size on FMovieSceneTriggerEffectSectionTemplate");
static_assert(offsetof(FMovieSceneTriggerEffectSectionTemplate, InputType) == 0x000020, "Member 'FMovieSceneTriggerEffectSectionTemplate::InputType' has a wrong offset!");
static_assert(offsetof(FMovieSceneTriggerEffectSectionTemplate, Params) == 0x000028, "Member 'FMovieSceneTriggerEffectSectionTemplate::Params' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorFunctionParameterDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord final
{
public:
	ESSDramaticBattleCutEditorFunctionParameterType FunctionParameter;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord, FunctionParameter) == 0x000000, "Member 'FSSDramaticBattleCutEditorFunctionParameterDataAssetRecord::FunctionParameter' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestStopInfo
// 0x0004 (0x0004 - 0x0000)
struct FKoratCharacterUIActionRequestStopInfo final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestStopInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestStopInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestStopInfo) == 0x000004, "Wrong size on FKoratCharacterUIActionRequestStopInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestStopInfo, BlendOutTime) == 0x000000, "Member 'FKoratCharacterUIActionRequestStopInfo::BlendOutTime' has a wrong offset!");

// ScriptStruct SS.SSGalleryPictureBookGatheringCharaInfo
// 0x000C (0x000C - 0x0000)
struct FSSGalleryPictureBookGatheringCharaInfo final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGalleryPictureBookGatheringCharaInfo) == 0x000004, "Wrong alignment on FSSGalleryPictureBookGatheringCharaInfo");
static_assert(sizeof(FSSGalleryPictureBookGatheringCharaInfo) == 0x00000C, "Wrong size on FSSGalleryPictureBookGatheringCharaInfo");
static_assert(offsetof(FSSGalleryPictureBookGatheringCharaInfo, Character) == 0x000000, "Member 'FSSGalleryPictureBookGatheringCharaInfo::Character' has a wrong offset!");
static_assert(offsetof(FSSGalleryPictureBookGatheringCharaInfo, ImageIndex) == 0x000008, "Member 'FSSGalleryPictureBookGatheringCharaInfo::ImageIndex' has a wrong offset!");

// ScriptStruct SS.KoratBattleOperationGuideData
// 0x01F0 (0x01F0 - 0x0000)
struct FKoratBattleOperationGuideData final
{
public:
	EKoratOperationGuideBlock                     Text_ListBlock;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratOperationGuideRushDerivative            RushDerivative;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratOperationGuideRushDerivative            RushDerivative2;                                   // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratOperationGuideRushDerivative            RushDerivative3;                                   // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text_ListName;                                     // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	EKoratOperationGuideIcon                      Text_ListIcon;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text_Explain;                                      // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_ExplainClassic;                               // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_Explain_PS5;                                  // 0x0058(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_Explain_XSX;                                  // 0x0070(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_BtnGuide;                                     // 0x0088(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_BtnGuideClassic;                              // 0x00A0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_BtnGuideClassicBig;                           // 0x00B8(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_BtnGuideKeyBord;                              // 0x00D0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_Ctrl_Tips;                                    // 0x00E8(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_Category_Tips;                                // 0x0100(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<EKoratOperationGuideCategoryIcon>      Text_Category_Icon;                                // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_1;                               // 0x0128(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_2;                               // 0x0140(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_3;                               // 0x0158(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_4;                               // 0x0170(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_M_1;                               // 0x0188(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_M_2;                               // 0x01A0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_L;                                 // 0x01B8(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_XL;                                // 0x01D0(0x0018)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleOperationGuideData) == 0x000008, "Wrong alignment on FKoratBattleOperationGuideData");
static_assert(sizeof(FKoratBattleOperationGuideData) == 0x0001F0, "Wrong size on FKoratBattleOperationGuideData");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_ListBlock) == 0x000000, "Member 'FKoratBattleOperationGuideData::Text_ListBlock' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, RushDerivative) == 0x000001, "Member 'FKoratBattleOperationGuideData::RushDerivative' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, RushDerivative2) == 0x000002, "Member 'FKoratBattleOperationGuideData::RushDerivative2' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, RushDerivative3) == 0x000003, "Member 'FKoratBattleOperationGuideData::RushDerivative3' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Priority) == 0x000004, "Member 'FKoratBattleOperationGuideData::Priority' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_ListName) == 0x000008, "Member 'FKoratBattleOperationGuideData::Text_ListName' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_ListIcon) == 0x000020, "Member 'FKoratBattleOperationGuideData::Text_ListIcon' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Explain) == 0x000028, "Member 'FKoratBattleOperationGuideData::Text_Explain' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_ExplainClassic) == 0x000040, "Member 'FKoratBattleOperationGuideData::Text_ExplainClassic' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Explain_PS5) == 0x000058, "Member 'FKoratBattleOperationGuideData::Text_Explain_PS5' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Explain_XSX) == 0x000070, "Member 'FKoratBattleOperationGuideData::Text_Explain_XSX' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_BtnGuide) == 0x000088, "Member 'FKoratBattleOperationGuideData::Text_BtnGuide' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_BtnGuideClassic) == 0x0000A0, "Member 'FKoratBattleOperationGuideData::Text_BtnGuideClassic' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_BtnGuideClassicBig) == 0x0000B8, "Member 'FKoratBattleOperationGuideData::Text_BtnGuideClassicBig' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_BtnGuideKeyBord) == 0x0000D0, "Member 'FKoratBattleOperationGuideData::Text_BtnGuideKeyBord' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Ctrl_Tips) == 0x0000E8, "Member 'FKoratBattleOperationGuideData::Text_Ctrl_Tips' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Category_Tips) == 0x000100, "Member 'FKoratBattleOperationGuideData::Text_Category_Tips' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, Text_Category_Icon) == 0x000118, "Member 'FKoratBattleOperationGuideData::Text_Category_Icon' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_S_1) == 0x000128, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_S_1' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_S_2) == 0x000140, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_S_2' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_S_3) == 0x000158, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_S_3' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_S_4) == 0x000170, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_S_4' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_M_1) == 0x000188, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_M_1' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_M_2) == 0x0001A0, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_M_2' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_L) == 0x0001B8, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_L' has a wrong offset!");
static_assert(offsetof(FKoratBattleOperationGuideData, WBP_OBJ_SL_Cell_XL) == 0x0001D0, "Member 'FKoratBattleOperationGuideData::WBP_OBJ_SL_Cell_XL' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestMovementModeInfo
// 0x0001 (0x0001 - 0x0000)
struct FKoratCharacterUIActionRequestMovementModeInfo final
{
public:
	EMovementMode                                 UIActionMovementMode;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestMovementModeInfo) == 0x000001, "Wrong alignment on FKoratCharacterUIActionRequestMovementModeInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestMovementModeInfo) == 0x000001, "Wrong size on FKoratCharacterUIActionRequestMovementModeInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestMovementModeInfo, UIActionMovementMode) == 0x000000, "Member 'FKoratCharacterUIActionRequestMovementModeInfo::UIActionMovementMode' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestGroupIdInfo
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterUIActionRequestGroupIdInfo final
{
public:
	struct FKoratGroupIdDataList                  UIActionGroupId;                                   // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestGroupIdInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestGroupIdInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestGroupIdInfo) == 0x000008, "Wrong size on FKoratCharacterUIActionRequestGroupIdInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestGroupIdInfo, UIActionGroupId) == 0x000000, "Member 'FKoratCharacterUIActionRequestGroupIdInfo::UIActionGroupId' has a wrong offset!");

// ScriptStruct SS.SSGalleryMyDataTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSGalleryMyDataTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGalleryMyDataTransitionData) == 0x000004, "Wrong alignment on FSSGalleryMyDataTransitionData");
static_assert(sizeof(FSSGalleryMyDataTransitionData) == 0x000010, "Wrong size on FSSGalleryMyDataTransitionData");

// ScriptStruct SS.KoratCharacterUIActionRequestStartFrameInfo
// 0x0004 (0x0004 - 0x0000)
struct FKoratCharacterUIActionRequestStartFrameInfo final
{
public:
	int32                                         UIActionStartFrame;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestStartFrameInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestStartFrameInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestStartFrameInfo) == 0x000004, "Wrong size on FKoratCharacterUIActionRequestStartFrameInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestStartFrameInfo, UIActionStartFrame) == 0x000000, "Member 'FKoratCharacterUIActionRequestStartFrameInfo::UIActionStartFrame' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFRouteClearInfoAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FSSDragonAdventureIFRouteClearInfoAssetRecord final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      EventInfoMap;                                      // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bOriginalRoute;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDragonAdventureIFRouteClearInfoAssetRecord) == 0x000008, "Wrong alignment on FSSDragonAdventureIFRouteClearInfoAssetRecord");
static_assert(sizeof(FSSDragonAdventureIFRouteClearInfoAssetRecord) == 0x000060, "Wrong size on FSSDragonAdventureIFRouteClearInfoAssetRecord");
static_assert(offsetof(FSSDragonAdventureIFRouteClearInfoAssetRecord, Character) == 0x000000, "Member 'FSSDragonAdventureIFRouteClearInfoAssetRecord::Character' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFRouteClearInfoAssetRecord, EventInfoMap) == 0x000008, "Member 'FSSDragonAdventureIFRouteClearInfoAssetRecord::EventInfoMap' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFRouteClearInfoAssetRecord, bOriginalRoute) == 0x000058, "Member 'FSSDragonAdventureIFRouteClearInfoAssetRecord::bOriginalRoute' has a wrong offset!");

// ScriptStruct SS.KoratConversationDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratConversationDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratConversationDataList) == 0x000004, "Wrong alignment on FKoratConversationDataList");
static_assert(sizeof(FKoratConversationDataList) == 0x000008, "Wrong size on FKoratConversationDataList");
static_assert(offsetof(FKoratConversationDataList, Key) == 0x000000, "Member 'FKoratConversationDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestEndFrameInfo
// 0x0004 (0x0004 - 0x0000)
struct FKoratCharacterUIActionRequestEndFrameInfo final
{
public:
	int32                                         UIActionEndFrame;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestEndFrameInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestEndFrameInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestEndFrameInfo) == 0x000004, "Wrong size on FKoratCharacterUIActionRequestEndFrameInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestEndFrameInfo, UIActionEndFrame) == 0x000000, "Member 'FKoratCharacterUIActionRequestEndFrameInfo::UIActionEndFrame' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionRequestCustomTimeDilationInfo
// 0x0004 (0x0004 - 0x0000)
struct FKoratCharacterUIActionRequestCustomTimeDilationInfo final
{
public:
	float                                         UIActionCustomTimeDilation;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestCustomTimeDilationInfo) == 0x000004, "Wrong alignment on FKoratCharacterUIActionRequestCustomTimeDilationInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestCustomTimeDilationInfo) == 0x000004, "Wrong size on FKoratCharacterUIActionRequestCustomTimeDilationInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestCustomTimeDilationInfo, UIActionCustomTimeDilation) == 0x000000, "Member 'FKoratCharacterUIActionRequestCustomTimeDilationInfo::UIActionCustomTimeDilation' has a wrong offset!");

// ScriptStruct SS.KoratMultiDeviceSettingDataGraphicsOptionSettings
// 0x0050 (0x0050 - 0x0000)
struct FKoratMultiDeviceSettingDataGraphicsOptionSettings final
{
public:
	TMap<class FString, class FString>            ConsoleVariableSettings;                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMultiDeviceSettingDataGraphicsOptionSettings) == 0x000008, "Wrong alignment on FKoratMultiDeviceSettingDataGraphicsOptionSettings");
static_assert(sizeof(FKoratMultiDeviceSettingDataGraphicsOptionSettings) == 0x000050, "Wrong size on FKoratMultiDeviceSettingDataGraphicsOptionSettings");
static_assert(offsetof(FKoratMultiDeviceSettingDataGraphicsOptionSettings, ConsoleVariableSettings) == 0x000000, "Member 'FKoratMultiDeviceSettingDataGraphicsOptionSettings::ConsoleVariableSettings' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterEndPreviewEvent
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterEndPreviewEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterEndPreviewEvent) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterEndPreviewEvent");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterEndPreviewEvent) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterEndPreviewEvent");

// ScriptStruct SS.KoratCharacterUIActionRequestBlendOptionInfo
// 0x0078 (0x0078 - 0x0000)
struct FKoratCharacterUIActionRequestBlendOptionInfo final
{
public:
	struct FKoratUIActionBlendOption              UIActionBlendOption;                               // 0x0000(0x0078)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionRequestBlendOptionInfo) == 0x000008, "Wrong alignment on FKoratCharacterUIActionRequestBlendOptionInfo");
static_assert(sizeof(FKoratCharacterUIActionRequestBlendOptionInfo) == 0x000078, "Wrong size on FKoratCharacterUIActionRequestBlendOptionInfo");
static_assert(offsetof(FKoratCharacterUIActionRequestBlendOptionInfo, UIActionBlendOption) == 0x000000, "Member 'FKoratCharacterUIActionRequestBlendOptionInfo::UIActionBlendOption' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionManagerCommandOptionGroup00
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKoratCharacterUIActionManagerCommandOptionGroup00 final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterUIActionManagerCommandOptionGroup00) == 0x000008, "Wrong alignment on FKoratCharacterUIActionManagerCommandOptionGroup00");
static_assert(sizeof(FKoratCharacterUIActionManagerCommandOptionGroup00) == 0x000010, "Wrong size on FKoratCharacterUIActionManagerCommandOptionGroup00");

// ScriptStruct SS.KoratVelocityLineEffectDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratVelocityLineEffectDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVelocityLineEffectDataList) == 0x000004, "Wrong alignment on FKoratVelocityLineEffectDataList");
static_assert(sizeof(FKoratVelocityLineEffectDataList) == 0x000008, "Wrong size on FKoratVelocityLineEffectDataList");
static_assert(offsetof(FKoratVelocityLineEffectDataList, Key) == 0x000000, "Member 'FKoratVelocityLineEffectDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterUIActionManagerCommandOptionGroup01
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FKoratCharacterUIActionManagerCommandOptionGroup01 final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterUIActionManagerCommandOptionGroup01) == 0x000008, "Wrong alignment on FKoratCharacterUIActionManagerCommandOptionGroup01");
static_assert(sizeof(FKoratCharacterUIActionManagerCommandOptionGroup01) == 0x000080, "Wrong size on FKoratCharacterUIActionManagerCommandOptionGroup01");

// ScriptStruct SS.KoratCharacterUIActionManagerCommandOption
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FKoratCharacterUIActionManagerCommandOption final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterUIActionManagerCommandOption) == 0x000008, "Wrong alignment on FKoratCharacterUIActionManagerCommandOption");
static_assert(sizeof(FKoratCharacterUIActionManagerCommandOption) == 0x000088, "Wrong size on FKoratCharacterUIActionManagerCommandOption");

// ScriptStruct SS.KoratOptionPadSelectSetData
// 0x0010 (0x0010 - 0x0000)
struct FKoratOptionPadSelectSetData final
{
public:
	TArray<class FText>                           OperationPadSelectSet;                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOptionPadSelectSetData) == 0x000008, "Wrong alignment on FKoratOptionPadSelectSetData");
static_assert(sizeof(FKoratOptionPadSelectSetData) == 0x000010, "Wrong size on FKoratOptionPadSelectSetData");
static_assert(offsetof(FKoratOptionPadSelectSetData, OperationPadSelectSet) == 0x000000, "Member 'FKoratOptionPadSelectSetData::OperationPadSelectSet' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSettinsPropertyResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSSMainMenuSettinsPropertyResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuSettinsPropertyResult) == 0x000008, "Wrong alignment on FSSMainMenuSettinsPropertyResult");
static_assert(sizeof(FSSMainMenuSettinsPropertyResult) == 0x000018, "Wrong size on FSSMainMenuSettinsPropertyResult");

// ScriptStruct SS.KoratMovieItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMovieItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMovieItemDataList) == 0x000004, "Wrong alignment on FKoratMovieItemDataList");
static_assert(sizeof(FKoratMovieItemDataList) == 0x000008, "Wrong size on FKoratMovieItemDataList");
static_assert(offsetof(FKoratMovieItemDataList, Key) == 0x000000, "Member 'FKoratMovieItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSGalleryTheaterTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSGalleryTheaterTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGalleryTheaterTransitionData) == 0x000004, "Wrong alignment on FSSGalleryTheaterTransitionData");
static_assert(sizeof(FSSGalleryTheaterTransitionData) == 0x000010, "Wrong size on FSSGalleryTheaterTransitionData");

// ScriptStruct SS.KoratCharacterUIActionManagerCommandRequest
// 0x0098 (0x0098 - 0x0000)
struct FKoratCharacterUIActionManagerCommandRequest final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           Character;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterUIActionManagerCommandOption Option;                                            // 0x0010(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterUIActionManagerCommandRequest) == 0x000008, "Wrong alignment on FKoratCharacterUIActionManagerCommandRequest");
static_assert(sizeof(FKoratCharacterUIActionManagerCommandRequest) == 0x000098, "Wrong size on FKoratCharacterUIActionManagerCommandRequest");
static_assert(offsetof(FKoratCharacterUIActionManagerCommandRequest, Character) == 0x000008, "Member 'FKoratCharacterUIActionManagerCommandRequest::Character' has a wrong offset!");
static_assert(offsetof(FKoratCharacterUIActionManagerCommandRequest, Option) == 0x000010, "Member 'FKoratCharacterUIActionManagerCommandRequest::Option' has a wrong offset!");

// ScriptStruct SS.KoratCharaSortMenuDataRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharaSortMenuDataRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratCharaSortMenuElementsType               Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharaSortMenuDataRecord) == 0x000008, "Wrong alignment on FKoratCharaSortMenuDataRecord");
static_assert(sizeof(FKoratCharaSortMenuDataRecord) == 0x000020, "Wrong size on FKoratCharaSortMenuDataRecord");
static_assert(offsetof(FKoratCharaSortMenuDataRecord, Text) == 0x000000, "Member 'FKoratCharaSortMenuDataRecord::Text' has a wrong offset!");
static_assert(offsetof(FKoratCharaSortMenuDataRecord, Type) == 0x000018, "Member 'FKoratCharaSortMenuDataRecord::Type' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterPlayPreview
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FSSDramaticBattleCutEditorExecuteParameterPlayPreview final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterPlayPreview) == 0x000010, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterPlayPreview");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterPlayPreview) == 0x000050, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterPlayPreview");

// ScriptStruct SS.KoratMissionFilterDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionFilterDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionFilterDataList) == 0x000004, "Wrong alignment on FKoratMissionFilterDataList");
static_assert(sizeof(FKoratMissionFilterDataList) == 0x000008, "Wrong size on FKoratMissionFilterDataList");
static_assert(offsetof(FKoratMissionFilterDataList, Key) == 0x000000, "Member 'FKoratMissionFilterDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCombativesKeyDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratCombativesKeyDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCombativesKeyDataAssetRecord) == 0x000001, "Wrong alignment on FKoratCombativesKeyDataAssetRecord");
static_assert(sizeof(FKoratCombativesKeyDataAssetRecord) == 0x000001, "Wrong size on FKoratCombativesKeyDataAssetRecord");

// ScriptStruct SS.CultureText
// 0x0010 (0x0018 - 0x0008)
struct FCultureText final : public FTableRowBase
{
public:
	TArray<class FText>                           Text;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCultureText) == 0x000008, "Wrong alignment on FCultureText");
static_assert(sizeof(FCultureText) == 0x000018, "Wrong size on FCultureText");
static_assert(offsetof(FCultureText, Text) == 0x000008, "Member 'FCultureText::Text' has a wrong offset!");

// ScriptStruct SS.SSCharacterCostumeUiData
// 0x0120 (0x0120 - 0x0000)
struct FSSCharacterCostumeUiData final
{
public:
	TSoftObjectPtr<class UTexture2D>              FaceChip1P;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChip2P;                                        // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChipCharacterSelect1P;                         // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChipCharacterSelect2P;                         // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChipCharacterSelectTransform;                  // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChipShop;                                      // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterCostumeUiData) == 0x000008, "Wrong alignment on FSSCharacterCostumeUiData");
static_assert(sizeof(FSSCharacterCostumeUiData) == 0x000120, "Wrong size on FSSCharacterCostumeUiData");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChip1P) == 0x000000, "Member 'FSSCharacterCostumeUiData::FaceChip1P' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChip2P) == 0x000030, "Member 'FSSCharacterCostumeUiData::FaceChip2P' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChipCharacterSelect1P) == 0x000060, "Member 'FSSCharacterCostumeUiData::FaceChipCharacterSelect1P' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChipCharacterSelect2P) == 0x000090, "Member 'FSSCharacterCostumeUiData::FaceChipCharacterSelect2P' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChipCharacterSelectTransform) == 0x0000C0, "Member 'FSSCharacterCostumeUiData::FaceChipCharacterSelectTransform' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeUiData, FaceChipShop) == 0x0000F0, "Member 'FSSCharacterCostumeUiData::FaceChipShop' has a wrong offset!");

// ScriptStruct SS.KoratDragonAdventureIFRouteClearInfoDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDragonAdventureIFRouteClearInfoDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDragonAdventureIFRouteClearInfoDataList) == 0x000004, "Wrong alignment on FKoratDragonAdventureIFRouteClearInfoDataList");
static_assert(sizeof(FKoratDragonAdventureIFRouteClearInfoDataList) == 0x000008, "Wrong size on FKoratDragonAdventureIFRouteClearInfoDataList");
static_assert(offsetof(FKoratDragonAdventureIFRouteClearInfoDataList, Key) == 0x000000, "Member 'FKoratDragonAdventureIFRouteClearInfoDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSTournamentChartPlayerInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSSTournamentChartPlayerInfo final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentChartPlayerInfo) == 0x000008, "Wrong alignment on FSSTournamentChartPlayerInfo");
static_assert(sizeof(FSSTournamentChartPlayerInfo) == 0x000040, "Wrong size on FSSTournamentChartPlayerInfo");

// ScriptStruct SS.KoratCultureTextRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratCultureTextRecord final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCultureTextRecord) == 0x000008, "Wrong alignment on FKoratCultureTextRecord");
static_assert(sizeof(FKoratCultureTextRecord) == 0x000018, "Wrong size on FKoratCultureTextRecord");
static_assert(offsetof(FKoratCultureTextRecord, Key) == 0x000000, "Member 'FKoratCultureTextRecord::Key' has a wrong offset!");
static_assert(offsetof(FKoratCultureTextRecord, Text) == 0x000008, "Member 'FKoratCultureTextRecord::Text' has a wrong offset!");

// ScriptStruct SS.KoratBattleAssetDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleAssetDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleAssetDataList) == 0x000004, "Wrong alignment on FKoratBattleAssetDataList");
static_assert(sizeof(FKoratBattleAssetDataList) == 0x000008, "Wrong size on FKoratBattleAssetDataList");
static_assert(offsetof(FKoratBattleAssetDataList, Key) == 0x000000, "Member 'FKoratBattleAssetDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleTrainingLinesDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleTrainingLinesDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTrainingLinesDataList) == 0x000004, "Wrong alignment on FKoratBattleTrainingLinesDataList");
static_assert(sizeof(FKoratBattleTrainingLinesDataList) == 0x000008, "Wrong size on FKoratBattleTrainingLinesDataList");
static_assert(offsetof(FKoratBattleTrainingLinesDataList, Key) == 0x000000, "Member 'FKoratBattleTrainingLinesDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleScenePhaseDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleScenePhaseDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleScenePhaseDataList) == 0x000004, "Wrong alignment on FKoratBattleScenePhaseDataList");
static_assert(sizeof(FKoratBattleScenePhaseDataList) == 0x000008, "Wrong size on FKoratBattleScenePhaseDataList");
static_assert(offsetof(FKoratBattleScenePhaseDataList, Key) == 0x000000, "Member 'FKoratBattleScenePhaseDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMenuCommonDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMenuCommonDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMenuCommonDataList) == 0x000004, "Wrong alignment on FKoratMenuCommonDataList");
static_assert(sizeof(FKoratMenuCommonDataList) == 0x000008, "Wrong size on FKoratMenuCommonDataList");
static_assert(offsetof(FKoratMenuCommonDataList, Key) == 0x000000, "Member 'FKoratMenuCommonDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSAreaEditorUndoInfo
// 0x0080 (0x0080 - 0x0000)
struct FSSAreaEditorUndoInfo final
{
public:
	EMapAreaEditType                              AreaType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaEditorUndoActionType                     UndoAction;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Pose;                                              // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAreaEditorUndoInfo) == 0x000010, "Wrong alignment on FSSAreaEditorUndoInfo");
static_assert(sizeof(FSSAreaEditorUndoInfo) == 0x000080, "Wrong size on FSSAreaEditorUndoInfo");
static_assert(offsetof(FSSAreaEditorUndoInfo, AreaType) == 0x000000, "Member 'FSSAreaEditorUndoInfo::AreaType' has a wrong offset!");
static_assert(offsetof(FSSAreaEditorUndoInfo, UndoAction) == 0x000001, "Member 'FSSAreaEditorUndoInfo::UndoAction' has a wrong offset!");
static_assert(offsetof(FSSAreaEditorUndoInfo, Pose) == 0x000010, "Member 'FSSAreaEditorUndoInfo::Pose' has a wrong offset!");
static_assert(offsetof(FSSAreaEditorUndoInfo, UniqueId) == 0x000070, "Member 'FSSAreaEditorUndoInfo::UniqueId' has a wrong offset!");

// ScriptStruct SS.KoratPlayerCardBGDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPlayerCardBGDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPlayerCardBGDataList) == 0x000004, "Wrong alignment on FKoratPlayerCardBGDataList");
static_assert(sizeof(FKoratPlayerCardBGDataList) == 0x000008, "Wrong size on FKoratPlayerCardBGDataList");
static_assert(offsetof(FKoratPlayerCardBGDataList, Key) == 0x000000, "Member 'FKoratPlayerCardBGDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleSetupDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupDataList) == 0x000004, "Wrong alignment on FKoratBattleSetupDataList");
static_assert(sizeof(FKoratBattleSetupDataList) == 0x000008, "Wrong size on FKoratBattleSetupDataList");
static_assert(offsetof(FKoratBattleSetupDataList, Key) == 0x000000, "Member 'FKoratBattleSetupDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleDataList");
static_assert(sizeof(FKoratDramaticBattleDataList) == 0x000008, "Wrong size on FKoratDramaticBattleDataList");
static_assert(offsetof(FKoratDramaticBattleDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCharacterStencilCache
// 0x0038 (0x0038 - 0x0000)
struct FSSCharacterStencilCache final
{
public:
	TSoftObjectPtr<class UMeshComponent>          StencilMesh;                                       // 0x0000(0x0030)(Edit, ExportObject, Transient, EditConst, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomDepthStencilValue;                           // 0x0030(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCustomDepth;                                // 0x0034(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterStencilCache) == 0x000008, "Wrong alignment on FSSCharacterStencilCache");
static_assert(sizeof(FSSCharacterStencilCache) == 0x000038, "Wrong size on FSSCharacterStencilCache");
static_assert(offsetof(FSSCharacterStencilCache, StencilMesh) == 0x000000, "Member 'FSSCharacterStencilCache::StencilMesh' has a wrong offset!");
static_assert(offsetof(FSSCharacterStencilCache, CustomDepthStencilValue) == 0x000030, "Member 'FSSCharacterStencilCache::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(FSSCharacterStencilCache, bRenderCustomDepth) == 0x000034, "Member 'FSSCharacterStencilCache::bRenderCustomDepth' has a wrong offset!");

// ScriptStruct SS.KoratFacialExpressionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratFacialExpressionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFacialExpressionDataList) == 0x000004, "Wrong alignment on FKoratFacialExpressionDataList");
static_assert(sizeof(FKoratFacialExpressionDataList) == 0x000008, "Wrong size on FKoratFacialExpressionDataList");
static_assert(offsetof(FKoratFacialExpressionDataList, Key) == 0x000000, "Member 'FKoratFacialExpressionDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterModelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterModelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterModelDataList) == 0x000004, "Wrong alignment on FKoratCharacterModelDataList");
static_assert(sizeof(FKoratCharacterModelDataList) == 0x000008, "Wrong size on FKoratCharacterModelDataList");
static_assert(offsetof(FKoratCharacterModelDataList, Key) == 0x000000, "Member 'FKoratCharacterModelDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCrashImpactCameraRecord
// 0x0120 (0x0120 - 0x0000)
struct FSSCrashImpactCameraRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          CameraNearFront;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          CameraNearRight;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          CameraNearLeft;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          CameraFarFront;                                    // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          CameraFarRight;                                    // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          CameraFarLeft;                                     // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCrashImpactCameraRecord) == 0x000008, "Wrong alignment on FSSCrashImpactCameraRecord");
static_assert(sizeof(FSSCrashImpactCameraRecord) == 0x000120, "Wrong size on FSSCrashImpactCameraRecord");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraNearFront) == 0x000000, "Member 'FSSCrashImpactCameraRecord::CameraNearFront' has a wrong offset!");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraNearRight) == 0x000030, "Member 'FSSCrashImpactCameraRecord::CameraNearRight' has a wrong offset!");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraNearLeft) == 0x000060, "Member 'FSSCrashImpactCameraRecord::CameraNearLeft' has a wrong offset!");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraFarFront) == 0x000090, "Member 'FSSCrashImpactCameraRecord::CameraFarFront' has a wrong offset!");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraFarRight) == 0x0000C0, "Member 'FSSCrashImpactCameraRecord::CameraFarRight' has a wrong offset!");
static_assert(offsetof(FSSCrashImpactCameraRecord, CameraFarLeft) == 0x0000F0, "Member 'FSSCrashImpactCameraRecord::CameraFarLeft' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleTipsDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleTipsDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleTipsDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleTipsDataList");
static_assert(sizeof(FKoratDramaticBattleTipsDataList) == 0x000008, "Wrong size on FKoratDramaticBattleTipsDataList");
static_assert(offsetof(FKoratDramaticBattleTipsDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleTipsDataList::Key' has a wrong offset!");

// ScriptStruct SS.CommonTrailDataMaterialInstance
// 0x0240 (0x0240 - 0x0000)
struct FCommonTrailDataMaterialInstance final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       WristL;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       WristR;                                            // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ElbowL;                                            // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ElbowR;                                            // 0x0090(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ToeL;                                              // 0x00C0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ToeR;                                              // 0x00F0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ClankL;                                            // 0x0120(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ClankR;                                            // 0x0150(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail;                                              // 0x0180(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Horn;                                              // 0x01B0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Equipment;                                         // 0x01E0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Etc;                                               // 0x0210(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonTrailDataMaterialInstance) == 0x000008, "Wrong alignment on FCommonTrailDataMaterialInstance");
static_assert(sizeof(FCommonTrailDataMaterialInstance) == 0x000240, "Wrong size on FCommonTrailDataMaterialInstance");
static_assert(offsetof(FCommonTrailDataMaterialInstance, WristL) == 0x000000, "Member 'FCommonTrailDataMaterialInstance::WristL' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, WristR) == 0x000030, "Member 'FCommonTrailDataMaterialInstance::WristR' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ElbowL) == 0x000060, "Member 'FCommonTrailDataMaterialInstance::ElbowL' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ElbowR) == 0x000090, "Member 'FCommonTrailDataMaterialInstance::ElbowR' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ToeL) == 0x0000C0, "Member 'FCommonTrailDataMaterialInstance::ToeL' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ToeR) == 0x0000F0, "Member 'FCommonTrailDataMaterialInstance::ToeR' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ClankL) == 0x000120, "Member 'FCommonTrailDataMaterialInstance::ClankL' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, ClankR) == 0x000150, "Member 'FCommonTrailDataMaterialInstance::ClankR' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, Tail) == 0x000180, "Member 'FCommonTrailDataMaterialInstance::Tail' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, Horn) == 0x0001B0, "Member 'FCommonTrailDataMaterialInstance::Horn' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, Equipment) == 0x0001E0, "Member 'FCommonTrailDataMaterialInstance::Equipment' has a wrong offset!");
static_assert(offsetof(FCommonTrailDataMaterialInstance, Etc) == 0x000210, "Member 'FCommonTrailDataMaterialInstance::Etc' has a wrong offset!");

// ScriptStruct SS.KoratSubInstanceTagDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSubInstanceTagDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSubInstanceTagDataList) == 0x000004, "Wrong alignment on FKoratSubInstanceTagDataList");
static_assert(sizeof(FKoratSubInstanceTagDataList) == 0x000008, "Wrong size on FKoratSubInstanceTagDataList");
static_assert(offsetof(FKoratSubInstanceTagDataList, Key) == 0x000000, "Member 'FKoratSubInstanceTagDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDebugAdventureIFTestEventListByRoutePartInfo
// 0x0010 (0x0010 - 0x0000)
struct FSSDebugAdventureIFTestEventListByRoutePartInfo final
{
public:
	TArray<class FString>                         List;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDebugAdventureIFTestEventListByRoutePartInfo) == 0x000008, "Wrong alignment on FSSDebugAdventureIFTestEventListByRoutePartInfo");
static_assert(sizeof(FSSDebugAdventureIFTestEventListByRoutePartInfo) == 0x000010, "Wrong size on FSSDebugAdventureIFTestEventListByRoutePartInfo");
static_assert(offsetof(FSSDebugAdventureIFTestEventListByRoutePartInfo, List) == 0x000000, "Member 'FSSDebugAdventureIFTestEventListByRoutePartInfo::List' has a wrong offset!");

// ScriptStruct SS.KoratSpeciesDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSpeciesDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpeciesDataList) == 0x000004, "Wrong alignment on FKoratSpeciesDataList");
static_assert(sizeof(FKoratSpeciesDataList) == 0x000008, "Wrong size on FKoratSpeciesDataList");
static_assert(offsetof(FKoratSpeciesDataList, Key) == 0x000000, "Member 'FKoratSpeciesDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterAttributeTagDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterAttributeTagDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterAttributeTagDataList) == 0x000004, "Wrong alignment on FKoratCharacterAttributeTagDataList");
static_assert(sizeof(FKoratCharacterAttributeTagDataList) == 0x000008, "Wrong size on FKoratCharacterAttributeTagDataList");
static_assert(offsetof(FKoratCharacterAttributeTagDataList, Key) == 0x000000, "Member 'FKoratCharacterAttributeTagDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectAtbTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbTypeDataList) == 0x000004, "Wrong alignment on FKoratEffectAtbTypeDataList");
static_assert(sizeof(FKoratEffectAtbTypeDataList) == 0x000008, "Wrong size on FKoratEffectAtbTypeDataList");
static_assert(offsetof(FKoratEffectAtbTypeDataList, Key) == 0x000000, "Member 'FKoratEffectAtbTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSOptionKeyControlParam
// 0x0008 (0x0008 - 0x0000)
struct FSSOptionKeyControlParam final
{
public:
	int32                                         AssistControl;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHanded;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTutorialMode;                                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveDataReset;                                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserNotification;                                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionKeyControlParam) == 0x000004, "Wrong alignment on FSSOptionKeyControlParam");
static_assert(sizeof(FSSOptionKeyControlParam) == 0x000008, "Wrong size on FSSOptionKeyControlParam");
static_assert(offsetof(FSSOptionKeyControlParam, AssistControl) == 0x000000, "Member 'FSSOptionKeyControlParam::AssistControl' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlParam, bLeftHanded) == 0x000004, "Member 'FSSOptionKeyControlParam::bLeftHanded' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlParam, bTutorialMode) == 0x000005, "Member 'FSSOptionKeyControlParam::bTutorialMode' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlParam, bSaveDataReset) == 0x000006, "Member 'FSSOptionKeyControlParam::bSaveDataReset' has a wrong offset!");
static_assert(offsetof(FSSOptionKeyControlParam, bUserNotification) == 0x000007, "Member 'FSSOptionKeyControlParam::bUserNotification' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrkTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectAtbBrkTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbBrkTypeDataList) == 0x000004, "Wrong alignment on FKoratEffectAtbBrkTypeDataList");
static_assert(sizeof(FKoratEffectAtbBrkTypeDataList) == 0x000008, "Wrong size on FKoratEffectAtbBrkTypeDataList");
static_assert(offsetof(FKoratEffectAtbBrkTypeDataList, Key) == 0x000000, "Member 'FKoratEffectAtbBrkTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectColorSetDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectColorSetDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectColorSetDataList) == 0x000004, "Wrong alignment on FKoratEffectColorSetDataList");
static_assert(sizeof(FKoratEffectColorSetDataList) == 0x000008, "Wrong size on FKoratEffectColorSetDataList");
static_assert(offsetof(FKoratEffectColorSetDataList, Key) == 0x000000, "Member 'FKoratEffectColorSetDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSWarpRequestInfo
// 0x0040 (0x0040 - 0x0000)
struct FSSWarpRequestInfo final
{
public:
	int32                                         PlayerSide;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAsset;                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bImpactProcedureDelegate;                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleImpactTriggerEventOpt                  BattleImpactTriggerEventOpt;                       // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnIgnoreCharaOffset;                          // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASSCharacter>            ExecuteCharacter;                                  // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpRequestInfo) == 0x000008, "Wrong alignment on FSSWarpRequestInfo");
static_assert(sizeof(FSSWarpRequestInfo) == 0x000040, "Wrong size on FSSWarpRequestInfo");
static_assert(offsetof(FSSWarpRequestInfo, PlayerSide) == 0x000000, "Member 'FSSWarpRequestInfo::PlayerSide' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfo, WarpRequestInfoDataAsset) == 0x000008, "Member 'FSSWarpRequestInfo::WarpRequestInfoDataAsset' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfo, bImpactProcedureDelegate) == 0x000030, "Member 'FSSWarpRequestInfo::bImpactProcedureDelegate' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfo, BattleImpactTriggerEventOpt) == 0x000031, "Member 'FSSWarpRequestInfo::BattleImpactTriggerEventOpt' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfo, bReturnIgnoreCharaOffset) == 0x000032, "Member 'FSSWarpRequestInfo::bReturnIgnoreCharaOffset' has a wrong offset!");
static_assert(offsetof(FSSWarpRequestInfo, ExecuteCharacter) == 0x000034, "Member 'FSSWarpRequestInfo::ExecuteCharacter' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertCharacterStateTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertCharacterStateTextData final
{
public:
	EKoratBattleDirectingCharacterStateType       InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertCharacterStateTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertCharacterStateTextData");
static_assert(sizeof(FKoraDramaticInsertCharacterStateTextData) == 0x000040, "Wrong size on FKoraDramaticInsertCharacterStateTextData");
static_assert(offsetof(FKoraDramaticInsertCharacterStateTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertCharacterStateTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertCharacterStateTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertCharacterStateTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratAuraPointLightDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAuraPointLightDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAuraPointLightDataList) == 0x000004, "Wrong alignment on FKoratAuraPointLightDataList");
static_assert(sizeof(FKoratAuraPointLightDataList) == 0x000008, "Wrong size on FKoratAuraPointLightDataList");
static_assert(offsetof(FKoratAuraPointLightDataList, Key) == 0x000000, "Member 'FKoratAuraPointLightDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratAuraRimLightDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAuraRimLightDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAuraRimLightDataList) == 0x000004, "Wrong alignment on FKoratAuraRimLightDataList");
static_assert(sizeof(FKoratAuraRimLightDataList) == 0x000008, "Wrong size on FKoratAuraRimLightDataList");
static_assert(offsetof(FKoratAuraRimLightDataList, Key) == 0x000000, "Member 'FKoratAuraRimLightDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDPDataAssetRecord
// 0x000C (0x000C - 0x0000)
struct FKoratDPDataAssetRecord final
{
public:
	float                                         LifePointScale;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageScale;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeCharacterCooldown;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDPDataAssetRecord) == 0x000004, "Wrong alignment on FKoratDPDataAssetRecord");
static_assert(sizeof(FKoratDPDataAssetRecord) == 0x00000C, "Wrong size on FKoratDPDataAssetRecord");
static_assert(offsetof(FKoratDPDataAssetRecord, LifePointScale) == 0x000000, "Member 'FKoratDPDataAssetRecord::LifePointScale' has a wrong offset!");
static_assert(offsetof(FKoratDPDataAssetRecord, DamageScale) == 0x000004, "Member 'FKoratDPDataAssetRecord::DamageScale' has a wrong offset!");
static_assert(offsetof(FKoratDPDataAssetRecord, ChangeCharacterCooldown) == 0x000008, "Member 'FKoratDPDataAssetRecord::ChangeCharacterCooldown' has a wrong offset!");

// ScriptStruct SS.KoratAuraAssignDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAuraAssignDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAuraAssignDataList) == 0x000004, "Wrong alignment on FKoratAuraAssignDataList");
static_assert(sizeof(FKoratAuraAssignDataList) == 0x000008, "Wrong size on FKoratAuraAssignDataList");
static_assert(offsetof(FKoratAuraAssignDataList, Key) == 0x000000, "Member 'FKoratAuraAssignDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertAiTypeTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertAiTypeTextData final
{
public:
	struct FKoratAiTypeDataList                   InsertItemName;                                    // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertAiTypeTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertAiTypeTextData");
static_assert(sizeof(FKoraDramaticInsertAiTypeTextData) == 0x000040, "Wrong size on FKoraDramaticInsertAiTypeTextData");
static_assert(offsetof(FKoraDramaticInsertAiTypeTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertAiTypeTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertAiTypeTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertAiTypeTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleAdditionalData
// 0x0038 (0x0038 - 0x0000)
struct FKoratDramaticBattleAdditionalData final
{
public:
	int32                                         GoodCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearCount;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearRate;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavoriteNum;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplayNum;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PostTime;                                          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPosted;                                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGood;                                           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFavorite;                                       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCleard;                                         // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDlc;                                            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHot;                                            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEventBattle;                                    // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOfficialBattle;                                 // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSetListInfo;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUnLockMode                              UnLockMode;                                        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeleted;                                        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReceivedBattleData;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleAdditionalData) == 0x000008, "Wrong alignment on FKoratDramaticBattleAdditionalData");
static_assert(sizeof(FKoratDramaticBattleAdditionalData) == 0x000038, "Wrong size on FKoratDramaticBattleAdditionalData");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, GoodCount) == 0x000000, "Member 'FKoratDramaticBattleAdditionalData::GoodCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, PlayCount) == 0x000004, "Member 'FKoratDramaticBattleAdditionalData::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, ClearCount) == 0x000008, "Member 'FKoratDramaticBattleAdditionalData::ClearCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, ClearRate) == 0x00000C, "Member 'FKoratDramaticBattleAdditionalData::ClearRate' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, FavoriteNum) == 0x000010, "Member 'FKoratDramaticBattleAdditionalData::FavoriteNum' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, Rank) == 0x000014, "Member 'FKoratDramaticBattleAdditionalData::Rank' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, ReplayNum) == 0x000018, "Member 'FKoratDramaticBattleAdditionalData::ReplayNum' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, PostTime) == 0x000020, "Member 'FKoratDramaticBattleAdditionalData::PostTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsPosted) == 0x000028, "Member 'FKoratDramaticBattleAdditionalData::bIsPosted' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsGood) == 0x000029, "Member 'FKoratDramaticBattleAdditionalData::bIsGood' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsFavorite) == 0x00002A, "Member 'FKoratDramaticBattleAdditionalData::bIsFavorite' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsCleard) == 0x00002B, "Member 'FKoratDramaticBattleAdditionalData::bIsCleard' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsDlc) == 0x00002C, "Member 'FKoratDramaticBattleAdditionalData::bIsDlc' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsHot) == 0x00002D, "Member 'FKoratDramaticBattleAdditionalData::bIsHot' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsEventBattle) == 0x00002E, "Member 'FKoratDramaticBattleAdditionalData::bIsEventBattle' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsOfficialBattle) == 0x00002F, "Member 'FKoratDramaticBattleAdditionalData::bIsOfficialBattle' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsSetListInfo) == 0x000030, "Member 'FKoratDramaticBattleAdditionalData::bIsSetListInfo' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, UnLockMode) == 0x000031, "Member 'FKoratDramaticBattleAdditionalData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsDeleted) == 0x000032, "Member 'FKoratDramaticBattleAdditionalData::bIsDeleted' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleAdditionalData, bIsReceivedBattleData) == 0x000033, "Member 'FKoratDramaticBattleAdditionalData::bIsReceivedBattleData' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiImageStyle
// 0x0100 (0x0100 - 0x0000)
struct FSSTimeLineUiImageStyle final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetWidth;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetLocation;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiImageStyle) == 0x000010, "Wrong alignment on FSSTimeLineUiImageStyle");
static_assert(sizeof(FSSTimeLineUiImageStyle) == 0x000100, "Wrong size on FSSTimeLineUiImageStyle");
static_assert(offsetof(FSSTimeLineUiImageStyle, Brush) == 0x000000, "Member 'FSSTimeLineUiImageStyle::Brush' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiImageStyle, ColorAndOpacity) == 0x0000D0, "Member 'FSSTimeLineUiImageStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiImageStyle, OffsetWidth) == 0x0000E0, "Member 'FSSTimeLineUiImageStyle::OffsetWidth' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiImageStyle, OffsetLocation) == 0x0000F0, "Member 'FSSTimeLineUiImageStyle::OffsetLocation' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitAirWallCharacterScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct FKoratEffectHitAirWallCharacterScaleFactor final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitAirWallCharacterScaleFactor) == 0x000004, "Wrong alignment on FKoratEffectHitAirWallCharacterScaleFactor");
static_assert(sizeof(FKoratEffectHitAirWallCharacterScaleFactor) == 0x000004, "Wrong size on FKoratEffectHitAirWallCharacterScaleFactor");
static_assert(offsetof(FKoratEffectHitAirWallCharacterScaleFactor, Scale) == 0x000000, "Member 'FKoratEffectHitAirWallCharacterScaleFactor::Scale' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitAirWallBulletScaleFactor
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectHitAirWallBulletScaleFactor final
{
public:
	float                                         SourceScale;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleFactor;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitAirWallBulletScaleFactor) == 0x000004, "Wrong alignment on FKoratEffectHitAirWallBulletScaleFactor");
static_assert(sizeof(FKoratEffectHitAirWallBulletScaleFactor) == 0x000008, "Wrong size on FKoratEffectHitAirWallBulletScaleFactor");
static_assert(offsetof(FKoratEffectHitAirWallBulletScaleFactor, SourceScale) == 0x000000, "Member 'FKoratEffectHitAirWallBulletScaleFactor::SourceScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallBulletScaleFactor, ScaleFactor) == 0x000004, "Member 'FKoratEffectHitAirWallBulletScaleFactor::ScaleFactor' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitAirWallScaleParam
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratEffectHitAirWallScaleParam final
{
public:
	float                                         MaxScale;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScale;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCharacterFigureScale;                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKoratCharacterFigureDataList, struct FKoratEffectHitAirWallCharacterScaleFactor> CharacterFigureScale;                              // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DefaultBulletFigureScale;                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftClassPtr<class UClass>, struct FKoratEffectHitAirWallBulletScaleFactor> BulletFigureScale;                                 // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitAirWallScaleParam) == 0x000008, "Wrong alignment on FKoratEffectHitAirWallScaleParam");
static_assert(sizeof(FKoratEffectHitAirWallScaleParam) == 0x0000B8, "Wrong size on FKoratEffectHitAirWallScaleParam");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, MaxScale) == 0x000000, "Member 'FKoratEffectHitAirWallScaleParam::MaxScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, MinScale) == 0x000004, "Member 'FKoratEffectHitAirWallScaleParam::MinScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, DefaultCharacterFigureScale) == 0x000008, "Member 'FKoratEffectHitAirWallScaleParam::DefaultCharacterFigureScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, CharacterFigureScale) == 0x000010, "Member 'FKoratEffectHitAirWallScaleParam::CharacterFigureScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, DefaultBulletFigureScale) == 0x000060, "Member 'FKoratEffectHitAirWallScaleParam::DefaultBulletFigureScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallScaleParam, BulletFigureScale) == 0x000068, "Member 'FKoratEffectHitAirWallScaleParam::BulletFigureScale' has a wrong offset!");

// ScriptStruct SS.KoratEquipmentRimLightDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEquipmentRimLightDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEquipmentRimLightDataList) == 0x000004, "Wrong alignment on FKoratEquipmentRimLightDataList");
static_assert(sizeof(FKoratEquipmentRimLightDataList) == 0x000008, "Wrong size on FKoratEquipmentRimLightDataList");
static_assert(offsetof(FKoratEquipmentRimLightDataList, Key) == 0x000000, "Member 'FKoratEquipmentRimLightDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratPointLightFrequencyDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPointLightFrequencyDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPointLightFrequencyDataList) == 0x000004, "Wrong alignment on FKoratPointLightFrequencyDataList");
static_assert(sizeof(FKoratPointLightFrequencyDataList) == 0x000008, "Wrong size on FKoratPointLightFrequencyDataList");
static_assert(offsetof(FKoratPointLightFrequencyDataList, Key) == 0x000000, "Member 'FKoratPointLightFrequencyDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord final
{
public:
	ESSDramaticBattleCutEditorUIWindowDisplayConditionType DisplayCondition;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord, DisplayCondition) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowDisplayConditionDataAssetRecord::DisplayCondition' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditFilter
// 0x0020 (0x0020 - 0x0000)
struct FKoratDRMEditFilter final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDRMEditFilter) == 0x000008, "Wrong alignment on FKoratDRMEditFilter");
static_assert(sizeof(FKoratDRMEditFilter) == 0x000020, "Wrong size on FKoratDRMEditFilter");
static_assert(offsetof(FKoratDRMEditFilter, DisplayName) == 0x000000, "Member 'FKoratDRMEditFilter::DisplayName' has a wrong offset!");
static_assert(offsetof(FKoratDRMEditFilter, Index) == 0x000018, "Member 'FKoratDRMEditFilter::Index' has a wrong offset!");
static_assert(offsetof(FKoratDRMEditFilter, bHiddenInGame) == 0x00001C, "Member 'FKoratDRMEditFilter::bHiddenInGame' has a wrong offset!");

// ScriptStruct SS.KoratRimLightFrequencyDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratRimLightFrequencyDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRimLightFrequencyDataList) == 0x000004, "Wrong alignment on FKoratRimLightFrequencyDataList");
static_assert(sizeof(FKoratRimLightFrequencyDataList) == 0x000008, "Wrong size on FKoratRimLightFrequencyDataList");
static_assert(offsetof(FKoratRimLightFrequencyDataList, Key) == 0x000000, "Member 'FKoratRimLightFrequencyDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectToonPointLightGroupDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectToonPointLightGroupDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectToonPointLightGroupDataList) == 0x000004, "Wrong alignment on FKoratEffectToonPointLightGroupDataList");
static_assert(sizeof(FKoratEffectToonPointLightGroupDataList) == 0x000008, "Wrong size on FKoratEffectToonPointLightGroupDataList");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataList, Key) == 0x000000, "Member 'FKoratEffectToonPointLightGroupDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratPlatformImageDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratPlatformImageDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPlatformImageDataList) == 0x000004, "Wrong alignment on FKoratPlatformImageDataList");
static_assert(sizeof(FKoratPlatformImageDataList) == 0x000008, "Wrong size on FKoratPlatformImageDataList");
static_assert(offsetof(FKoratPlatformImageDataList, Key) == 0x000000, "Member 'FKoratPlatformImageDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleTipsData
// 0x0020 (0x0020 - 0x0000)
struct FSSDramaticBattleTipsData final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratPlatformImageDataList            ImageData;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleTipsData) == 0x000008, "Wrong alignment on FSSDramaticBattleTipsData");
static_assert(sizeof(FSSDramaticBattleTipsData) == 0x000020, "Wrong size on FSSDramaticBattleTipsData");
static_assert(offsetof(FSSDramaticBattleTipsData, Description) == 0x000000, "Member 'FSSDramaticBattleTipsData::Description' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleTipsData, ImageData) == 0x000018, "Member 'FSSDramaticBattleTipsData::ImageData' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertTriggerTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertTriggerTextData final
{
public:
	EKoratDramaticDirectingTriggerListItem        InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertTriggerTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertTriggerTextData");
static_assert(sizeof(FKoraDramaticInsertTriggerTextData) == 0x000040, "Wrong size on FKoraDramaticInsertTriggerTextData");
static_assert(offsetof(FKoraDramaticInsertTriggerTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertTriggerTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertTriggerTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertTriggerTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratEffectCharacterColorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectCharacterColorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectCharacterColorDataList) == 0x000004, "Wrong alignment on FKoratEffectCharacterColorDataList");
static_assert(sizeof(FKoratEffectCharacterColorDataList) == 0x000008, "Wrong size on FKoratEffectCharacterColorDataList");
static_assert(offsetof(FKoratEffectCharacterColorDataList, Key) == 0x000000, "Member 'FKoratEffectCharacterColorDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticWLibStatus
// 0x00C8 (0x00C8 - 0x0000)
struct FKoratDramaticWLibStatus final
{
public:
	struct FKoratDramaticBattleDetailSearchParam  DetailSearchParam;                                 // 0x0000(0x0038)(NativeAccessSpecifierPublic)
	TArray<struct FKoratDRMEditWordTextDataList>  TagSearchWords;                                    // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint64                                        IdSearchBattleId;                                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x1];                                       // 0x0050(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESSWLibBattleSortType                         BattleSort;                                        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSWLibReplaySortType                         ReplaySort;                                        // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSWLibReplayFilterType                       ReplayFilter;                                      // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSWLibHomeCategoryButtonType                 TopCategory;                                       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSWLibHomePeriodCategoryButtonType           PeriodCategory;                                    // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSWLibSideButtonType                         SideButtonType;                                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FollowBattleListUserId;                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserBattleListUserId;                              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserReplayListUserId;                              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        BattleReplayListBattleId;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        BattleDetailStartBattleId;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        InitialFocusBattleId;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReplaySelectReplayId;                              // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InitialFocusReplayId;                              // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticWLibStatus) == 0x000008, "Wrong alignment on FKoratDramaticWLibStatus");
static_assert(sizeof(FKoratDramaticWLibStatus) == 0x0000C8, "Wrong size on FKoratDramaticWLibStatus");
static_assert(offsetof(FKoratDramaticWLibStatus, DetailSearchParam) == 0x000000, "Member 'FKoratDramaticWLibStatus::DetailSearchParam' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, TagSearchWords) == 0x000038, "Member 'FKoratDramaticWLibStatus::TagSearchWords' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, IdSearchBattleId) == 0x000048, "Member 'FKoratDramaticWLibStatus::IdSearchBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, BattleSort) == 0x000051, "Member 'FKoratDramaticWLibStatus::BattleSort' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, ReplaySort) == 0x000052, "Member 'FKoratDramaticWLibStatus::ReplaySort' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, ReplayFilter) == 0x000053, "Member 'FKoratDramaticWLibStatus::ReplayFilter' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, TopCategory) == 0x000054, "Member 'FKoratDramaticWLibStatus::TopCategory' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, PeriodCategory) == 0x000055, "Member 'FKoratDramaticWLibStatus::PeriodCategory' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, SideButtonType) == 0x000056, "Member 'FKoratDramaticWLibStatus::SideButtonType' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, FollowBattleListUserId) == 0x000058, "Member 'FKoratDramaticWLibStatus::FollowBattleListUserId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, UserBattleListUserId) == 0x000068, "Member 'FKoratDramaticWLibStatus::UserBattleListUserId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, UserReplayListUserId) == 0x000078, "Member 'FKoratDramaticWLibStatus::UserReplayListUserId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, BattleReplayListBattleId) == 0x000088, "Member 'FKoratDramaticWLibStatus::BattleReplayListBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, BattleDetailStartBattleId) == 0x000090, "Member 'FKoratDramaticWLibStatus::BattleDetailStartBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, InitialFocusBattleId) == 0x000098, "Member 'FKoratDramaticWLibStatus::InitialFocusBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, ReplaySelectReplayId) == 0x0000A0, "Member 'FKoratDramaticWLibStatus::ReplaySelectReplayId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, InitialFocusReplayId) == 0x0000B0, "Member 'FKoratDramaticWLibStatus::InitialFocusReplayId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibStatus, bIsValid) == 0x0000C0, "Member 'FKoratDramaticWLibStatus::bIsValid' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrkTypeDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratEffectAtbBrkTypeDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectAtbBrkTypeDataAssetRecord) == 0x000001, "Wrong alignment on FKoratEffectAtbBrkTypeDataAssetRecord");
static_assert(sizeof(FKoratEffectAtbBrkTypeDataAssetRecord) == 0x000001, "Wrong size on FKoratEffectAtbBrkTypeDataAssetRecord");

// ScriptStruct SS.SSTimeLineUiSlowStyles
// 0x0100 (0x0100 - 0x0000)
struct FSSTimeLineUiSlowStyles final
{
public:
	struct FSSTimeLineUiImageStyle                SlowArea;                                          // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiSlowStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiSlowStyles");
static_assert(sizeof(FSSTimeLineUiSlowStyles) == 0x000100, "Wrong size on FSSTimeLineUiSlowStyles");
static_assert(offsetof(FSSTimeLineUiSlowStyles, SlowArea) == 0x000000, "Member 'FSSTimeLineUiSlowStyles::SlowArea' has a wrong offset!");

// ScriptStruct SS.KoratDestructionAttackParameterDataAssetRecord
// 0x0040 (0x0040 - 0x0000)
struct FKoratDestructionAttackParameterDataAssetRecord final
{
public:
	struct FKoratDestructionAttackParameter       DestructionAttackParameter;                        // 0x0000(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionAttackParameterDataAssetRecord) == 0x000008, "Wrong alignment on FKoratDestructionAttackParameterDataAssetRecord");
static_assert(sizeof(FKoratDestructionAttackParameterDataAssetRecord) == 0x000040, "Wrong size on FKoratDestructionAttackParameterDataAssetRecord");
static_assert(offsetof(FKoratDestructionAttackParameterDataAssetRecord, DestructionAttackParameter) == 0x000000, "Member 'FKoratDestructionAttackParameterDataAssetRecord::DestructionAttackParameter' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletDecalDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletDecalDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletDecalDataList) == 0x000004, "Wrong alignment on FKoratEffectBulletDecalDataList");
static_assert(sizeof(FKoratEffectBulletDecalDataList) == 0x000008, "Wrong size on FKoratEffectBulletDecalDataList");
static_assert(offsetof(FKoratEffectBulletDecalDataList, Key) == 0x000000, "Member 'FKoratEffectBulletDecalDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticChooseableChara
// 0x000C (0x000C - 0x0000)
struct FKoratDramaticChooseableChara final
{
public:
	struct FKoratCharacterDataList                CharacterData;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticChooseableChara) == 0x000004, "Wrong alignment on FKoratDramaticChooseableChara");
static_assert(sizeof(FKoratDramaticChooseableChara) == 0x00000C, "Wrong size on FKoratDramaticChooseableChara");
static_assert(offsetof(FKoratDramaticChooseableChara, CharacterData) == 0x000000, "Member 'FKoratDramaticChooseableChara::CharacterData' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletKnockDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletKnockDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletKnockDataList) == 0x000004, "Wrong alignment on FKoratEffectBulletKnockDataList");
static_assert(sizeof(FKoratEffectBulletKnockDataList) == 0x000008, "Wrong size on FKoratEffectBulletKnockDataList");
static_assert(offsetof(FKoratEffectBulletKnockDataList, Key) == 0x000000, "Member 'FKoratEffectBulletKnockDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratInteractKnockDataRecord
// 0x00B0 (0x00B0 - 0x0000)
struct FKoratInteractKnockDataRecord final
{
public:
	struct FKoratInteractAtbTypeDataList          AttributeType;                                     // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratInteractKnockPlayData            KnockDestructionPlayData;                          // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FKoratInteractKnockPlayData            KnockNonDestructionPlayData;                       // 0x0040(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FKoratInteractKnockPlayData            CollisionKnockPlayData;                            // 0x0078(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractKnockDataRecord) == 0x000008, "Wrong alignment on FKoratInteractKnockDataRecord");
static_assert(sizeof(FKoratInteractKnockDataRecord) == 0x0000B0, "Wrong size on FKoratInteractKnockDataRecord");
static_assert(offsetof(FKoratInteractKnockDataRecord, AttributeType) == 0x000000, "Member 'FKoratInteractKnockDataRecord::AttributeType' has a wrong offset!");
static_assert(offsetof(FKoratInteractKnockDataRecord, KnockDestructionPlayData) == 0x000008, "Member 'FKoratInteractKnockDataRecord::KnockDestructionPlayData' has a wrong offset!");
static_assert(offsetof(FKoratInteractKnockDataRecord, KnockNonDestructionPlayData) == 0x000040, "Member 'FKoratInteractKnockDataRecord::KnockNonDestructionPlayData' has a wrong offset!");
static_assert(offsetof(FKoratInteractKnockDataRecord, CollisionKnockPlayData) == 0x000078, "Member 'FKoratInteractKnockDataRecord::CollisionKnockPlayData' has a wrong offset!");

// ScriptStruct SS.KoratEffectRatDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectRatDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectRatDataList) == 0x000004, "Wrong alignment on FKoratEffectRatDataList");
static_assert(sizeof(FKoratEffectRatDataList) == 0x000008, "Wrong size on FKoratEffectRatDataList");
static_assert(offsetof(FKoratEffectRatDataList, Key) == 0x000000, "Member 'FKoratEffectRatDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleTipsDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratDramaticBattleTipsDataAssetRecord final
{
public:
	class USSDramaticBattleTipsDataAsset*         TipsData;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleTipsDataAssetRecord) == 0x000008, "Wrong alignment on FKoratDramaticBattleTipsDataAssetRecord");
static_assert(sizeof(FKoratDramaticBattleTipsDataAssetRecord) == 0x000010, "Wrong size on FKoratDramaticBattleTipsDataAssetRecord");
static_assert(offsetof(FKoratDramaticBattleTipsDataAssetRecord, TipsData) == 0x000000, "Member 'FKoratDramaticBattleTipsDataAssetRecord::TipsData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleTipsDataAssetRecord, OrderNum) == 0x000008, "Member 'FKoratDramaticBattleTipsDataAssetRecord::OrderNum' has a wrong offset!");

// ScriptStruct SS.SSDramaticEditSelectingImageData
// 0x0040 (0x0040 - 0x0000)
struct FSSDramaticEditSelectingImageData final
{
public:
	TSoftObjectPtr<class UTexture2D>              NowSelectingImage;                                 // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticEditSelectingImageData) == 0x000008, "Wrong alignment on FSSDramaticEditSelectingImageData");
static_assert(sizeof(FSSDramaticEditSelectingImageData) == 0x000040, "Wrong size on FSSDramaticEditSelectingImageData");
static_assert(offsetof(FSSDramaticEditSelectingImageData, NowSelectingImage) == 0x000000, "Member 'FSSDramaticEditSelectingImageData::NowSelectingImage' has a wrong offset!");

// ScriptStruct SS.KoratEffectAnnDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectAnnDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAnnDataList) == 0x000004, "Wrong alignment on FKoratEffectAnnDataList");
static_assert(sizeof(FKoratEffectAnnDataList) == 0x000008, "Wrong size on FKoratEffectAnnDataList");
static_assert(offsetof(FKoratEffectAnnDataList, Key) == 0x000000, "Member 'FKoratEffectAnnDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectEnvDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectEnvDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectEnvDataList) == 0x000004, "Wrong alignment on FKoratEffectEnvDataList");
static_assert(sizeof(FKoratEffectEnvDataList) == 0x000008, "Wrong size on FKoratEffectEnvDataList");
static_assert(offsetof(FKoratEffectEnvDataList, Key) == 0x000000, "Member 'FKoratEffectEnvDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratInteractSpaceAreaDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratInteractSpaceAreaDataAssetRecord final
{
public:
	TSoftObjectPtr<class UKoratEffectSpaceAreaDataAsset> EffectSpaceAreaDataAsset;                          // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractSpaceAreaDataAssetRecord) == 0x000008, "Wrong alignment on FKoratInteractSpaceAreaDataAssetRecord");
static_assert(sizeof(FKoratInteractSpaceAreaDataAssetRecord) == 0x000030, "Wrong size on FKoratInteractSpaceAreaDataAssetRecord");
static_assert(offsetof(FKoratInteractSpaceAreaDataAssetRecord, EffectSpaceAreaDataAsset) == 0x000000, "Member 'FKoratInteractSpaceAreaDataAssetRecord::EffectSpaceAreaDataAsset' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCharacter
// 0x0238 (0x0238 - 0x0000)
struct FKoratDramaticBattleCharacter final
{
public:
	struct FKoratBattlePlayCharacter              BattleTeam;                                        // 0x0000(0x0228)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              BattleTeamStartData;                               // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFreeSelectCharas;                               // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotShowCharas;                                  // 0x0231(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrivateCharas;                                  // 0x0232(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleCharacter) == 0x000008, "Wrong alignment on FKoratDramaticBattleCharacter");
static_assert(sizeof(FKoratDramaticBattleCharacter) == 0x000238, "Wrong size on FKoratDramaticBattleCharacter");
static_assert(offsetof(FKoratDramaticBattleCharacter, BattleTeam) == 0x000000, "Member 'FKoratDramaticBattleCharacter::BattleTeam' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCharacter, BattleTeamStartData) == 0x000228, "Member 'FKoratDramaticBattleCharacter::BattleTeamStartData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCharacter, bIsFreeSelectCharas) == 0x000230, "Member 'FKoratDramaticBattleCharacter::bIsFreeSelectCharas' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCharacter, bIsNotShowCharas) == 0x000231, "Member 'FKoratDramaticBattleCharacter::bIsNotShowCharas' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCharacter, bIsPrivateCharas) == 0x000232, "Member 'FKoratDramaticBattleCharacter::bIsPrivateCharas' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbDataList
// 0x0010 (0x0010 - 0x0000)
struct FKoratEffectAtbDataList final
{
public:
	struct FKoratMapAttributeDataList             Attribute;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectAtbTypeDataList            Type;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbDataList) == 0x000004, "Wrong alignment on FKoratEffectAtbDataList");
static_assert(sizeof(FKoratEffectAtbDataList) == 0x000010, "Wrong size on FKoratEffectAtbDataList");
static_assert(offsetof(FKoratEffectAtbDataList, Attribute) == 0x000000, "Member 'FKoratEffectAtbDataList::Attribute' has a wrong offset!");
static_assert(offsetof(FKoratEffectAtbDataList, Type) == 0x000008, "Member 'FKoratEffectAtbDataList::Type' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiDrawSetting
// 0x0024 (0x0024 - 0x0000)
struct FSSTimeLineUiDrawSetting final
{
public:
	float                                         StartTimePosition;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimePosition;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeekBarSecond;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDispSeekBar;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlowStartSecond;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnableSlow;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTransitionSecond;                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndLineSecond;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiDrawSetting) == 0x000004, "Wrong alignment on FSSTimeLineUiDrawSetting");
static_assert(sizeof(FSSTimeLineUiDrawSetting) == 0x000024, "Wrong size on FSSTimeLineUiDrawSetting");
static_assert(offsetof(FSSTimeLineUiDrawSetting, StartTimePosition) == 0x000000, "Member 'FSSTimeLineUiDrawSetting::StartTimePosition' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, EndTimePosition) == 0x000004, "Member 'FSSTimeLineUiDrawSetting::EndTimePosition' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, SeekBarSecond) == 0x000008, "Member 'FSSTimeLineUiDrawSetting::SeekBarSecond' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, bIsDispSeekBar) == 0x00000C, "Member 'FSSTimeLineUiDrawSetting::bIsDispSeekBar' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, SlowStartSecond) == 0x000010, "Member 'FSSTimeLineUiDrawSetting::SlowStartSecond' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, SlowSpeed) == 0x000014, "Member 'FSSTimeLineUiDrawSetting::SlowSpeed' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, bIsEnableSlow) == 0x000018, "Member 'FSSTimeLineUiDrawSetting::bIsEnableSlow' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, StartTransitionSecond) == 0x00001C, "Member 'FSSTimeLineUiDrawSetting::StartTransitionSecond' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiDrawSetting, EndLineSecond) == 0x000020, "Member 'FSSTimeLineUiDrawSetting::EndLineSecond' has a wrong offset!");

// ScriptStruct SS.KoratDramaticDefaultEditData
// 0x0050 (0x0050 - 0x0000)
struct FKoratDramaticDefaultEditData final
{
public:
	struct FKoratCharacterDataList                DefaultCharacter1P;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                DefaultCharacter2P;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      DefaultBattleMap;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTimelimit;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultOutField;                                  // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultNoMartialArts;                             // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratBattleTeamDirectingData>  DefaultTeamSetting;                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratDRMEditBaseTextDataList          DefaultTitleText;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      DefaultJingle;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           DefaultTitleImage;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           DefaultThumbnail;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticDefaultEditData) == 0x000008, "Wrong alignment on FKoratDramaticDefaultEditData");
static_assert(sizeof(FKoratDramaticDefaultEditData) == 0x000050, "Wrong size on FKoratDramaticDefaultEditData");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultCharacter1P) == 0x000000, "Member 'FKoratDramaticDefaultEditData::DefaultCharacter1P' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultCharacter2P) == 0x000008, "Member 'FKoratDramaticDefaultEditData::DefaultCharacter2P' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultBattleMap) == 0x000010, "Member 'FKoratDramaticDefaultEditData::DefaultBattleMap' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultTimelimit) == 0x000018, "Member 'FKoratDramaticDefaultEditData::DefaultTimelimit' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, bDefaultOutField) == 0x00001C, "Member 'FKoratDramaticDefaultEditData::bDefaultOutField' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, bDefaultNoMartialArts) == 0x00001D, "Member 'FKoratDramaticDefaultEditData::bDefaultNoMartialArts' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultTeamSetting) == 0x000020, "Member 'FKoratDramaticDefaultEditData::DefaultTeamSetting' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultTitleText) == 0x000030, "Member 'FKoratDramaticDefaultEditData::DefaultTitleText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultJingle) == 0x000038, "Member 'FKoratDramaticDefaultEditData::DefaultJingle' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultTitleImage) == 0x000040, "Member 'FKoratDramaticDefaultEditData::DefaultTitleImage' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDefaultEditData, DefaultThumbnail) == 0x000048, "Member 'FKoratDramaticDefaultEditData::DefaultThumbnail' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrkDataList
// 0x0010 (0x0010 - 0x0000)
struct FKoratEffectAtbBrkDataList final
{
public:
	struct FKoratMapAttributeDataList             Attribute;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectAtbBrkTypeDataList         Type;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbBrkDataList) == 0x000004, "Wrong alignment on FKoratEffectAtbBrkDataList");
static_assert(sizeof(FKoratEffectAtbBrkDataList) == 0x000010, "Wrong size on FKoratEffectAtbBrkDataList");
static_assert(offsetof(FKoratEffectAtbBrkDataList, Attribute) == 0x000000, "Member 'FKoratEffectAtbBrkDataList::Attribute' has a wrong offset!");
static_assert(offsetof(FKoratEffectAtbBrkDataList, Type) == 0x000008, "Member 'FKoratEffectAtbBrkDataList::Type' has a wrong offset!");

// ScriptStruct SS.LightSceneDefaultSettings
// 0x0010 (0x0010 - 0x0000)
struct FLightSceneDefaultSettings final
{
public:
	float                                         FrequencyValue;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WiggleStrength;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseStrength;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseShadow;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightSceneDefaultSettings) == 0x000004, "Wrong alignment on FLightSceneDefaultSettings");
static_assert(sizeof(FLightSceneDefaultSettings) == 0x000010, "Wrong size on FLightSceneDefaultSettings");
static_assert(offsetof(FLightSceneDefaultSettings, FrequencyValue) == 0x000000, "Member 'FLightSceneDefaultSettings::FrequencyValue' has a wrong offset!");
static_assert(offsetof(FLightSceneDefaultSettings, WiggleStrength) == 0x000004, "Member 'FLightSceneDefaultSettings::WiggleStrength' has a wrong offset!");
static_assert(offsetof(FLightSceneDefaultSettings, EaseStrength) == 0x000008, "Member 'FLightSceneDefaultSettings::EaseStrength' has a wrong offset!");
static_assert(offsetof(FLightSceneDefaultSettings, BaseShadow) == 0x00000C, "Member 'FLightSceneDefaultSettings::BaseShadow' has a wrong offset!");

// ScriptStruct SS.KoratEffectBoneSocketDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBoneSocketDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBoneSocketDataList) == 0x000004, "Wrong alignment on FKoratEffectBoneSocketDataList");
static_assert(sizeof(FKoratEffectBoneSocketDataList) == 0x000008, "Wrong size on FKoratEffectBoneSocketDataList");
static_assert(offsetof(FKoratEffectBoneSocketDataList, Key) == 0x000000, "Member 'FKoratEffectBoneSocketDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratSequencerMarkerInfo
// 0x0028 (0x0028 - 0x0000)
struct FKoratSequencerMarkerInfo final
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSecond;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           DurationFrameNumber;                               // 0x001C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           StartFrameNumber;                                  // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           EndFrameNumber;                                    // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSequencerMarkerInfo) == 0x000008, "Wrong alignment on FKoratSequencerMarkerInfo");
static_assert(sizeof(FKoratSequencerMarkerInfo) == 0x000028, "Wrong size on FKoratSequencerMarkerInfo");
static_assert(offsetof(FKoratSequencerMarkerInfo, Label) == 0x000000, "Member 'FKoratSequencerMarkerInfo::Label' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, StartFrame) == 0x000010, "Member 'FKoratSequencerMarkerInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, Duration) == 0x000014, "Member 'FKoratSequencerMarkerInfo::Duration' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, DurationSecond) == 0x000018, "Member 'FKoratSequencerMarkerInfo::DurationSecond' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, DurationFrameNumber) == 0x00001C, "Member 'FKoratSequencerMarkerInfo::DurationFrameNumber' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, StartFrameNumber) == 0x000020, "Member 'FKoratSequencerMarkerInfo::StartFrameNumber' has a wrong offset!");
static_assert(offsetof(FKoratSequencerMarkerInfo, EndFrameNumber) == 0x000024, "Member 'FKoratSequencerMarkerInfo::EndFrameNumber' has a wrong offset!");

// ScriptStruct SS.SSEventSceneBranchCompileDescriptionCO
// 0x0090 (0x0090 - 0x0000)
struct FSSEventSceneBranchCompileDescriptionCO final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Feelings;                                          // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VisionWidget;                                      // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              VisionTexture;                                     // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneBranchCompileDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneBranchCompileDescriptionCO");
static_assert(sizeof(FSSEventSceneBranchCompileDescriptionCO) == 0x000090, "Wrong size on FSSEventSceneBranchCompileDescriptionCO");
static_assert(offsetof(FSSEventSceneBranchCompileDescriptionCO, Caption) == 0x000000, "Member 'FSSEventSceneBranchCompileDescriptionCO::Caption' has a wrong offset!");
static_assert(offsetof(FSSEventSceneBranchCompileDescriptionCO, Feelings) == 0x000018, "Member 'FSSEventSceneBranchCompileDescriptionCO::Feelings' has a wrong offset!");
static_assert(offsetof(FSSEventSceneBranchCompileDescriptionCO, VisionWidget) == 0x000030, "Member 'FSSEventSceneBranchCompileDescriptionCO::VisionWidget' has a wrong offset!");
static_assert(offsetof(FSSEventSceneBranchCompileDescriptionCO, VisionTexture) == 0x000060, "Member 'FSSEventSceneBranchCompileDescriptionCO::VisionTexture' has a wrong offset!");

// ScriptStruct SS.SSEventSceneChoicesCompileDescriptionCO
// 0x0288 (0x0288 - 0x0000)
struct FSSEventSceneChoicesCompileDescriptionCO final
{
public:
	TSoftClassPtr<class UClass>                   ChoicesWidget;                                     // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Feelings;                                          // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchCompileDescriptionCO TopBranch;                                         // 0x0048(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchCompileDescriptionCO BottomBranch;                                      // 0x00D8(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchCompileDescriptionCO LeftBranch;                                        // 0x0168(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchCompileDescriptionCO RightBranch;                                       // 0x01F8(0x0090)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneChoicesCompileDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneChoicesCompileDescriptionCO");
static_assert(sizeof(FSSEventSceneChoicesCompileDescriptionCO) == 0x000288, "Wrong size on FSSEventSceneChoicesCompileDescriptionCO");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, ChoicesWidget) == 0x000000, "Member 'FSSEventSceneChoicesCompileDescriptionCO::ChoicesWidget' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, Feelings) == 0x000030, "Member 'FSSEventSceneChoicesCompileDescriptionCO::Feelings' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, TopBranch) == 0x000048, "Member 'FSSEventSceneChoicesCompileDescriptionCO::TopBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, BottomBranch) == 0x0000D8, "Member 'FSSEventSceneChoicesCompileDescriptionCO::BottomBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, LeftBranch) == 0x000168, "Member 'FSSEventSceneChoicesCompileDescriptionCO::LeftBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesCompileDescriptionCO, RightBranch) == 0x0001F8, "Member 'FSSEventSceneChoicesCompileDescriptionCO::RightBranch' has a wrong offset!");

// ScriptStruct SS.KoratBlastForteTermDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastForteTermDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastForteTermDataList) == 0x000004, "Wrong alignment on FKoratBlastForteTermDataList");
static_assert(sizeof(FKoratBlastForteTermDataList) == 0x000008, "Wrong size on FKoratBlastForteTermDataList");
static_assert(offsetof(FKoratBlastForteTermDataList, Key) == 0x000000, "Member 'FKoratBlastForteTermDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbTypeData
// 0x0000 (0x0008 - 0x0008)
struct FKoratEffectAtbTypeData final : public FTableRowBase
{
};
static_assert(alignof(FKoratEffectAtbTypeData) == 0x000008, "Wrong alignment on FKoratEffectAtbTypeData");
static_assert(sizeof(FKoratEffectAtbTypeData) == 0x000008, "Wrong size on FKoratEffectAtbTypeData");

// ScriptStruct SS.KoratBlastForteDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastForteDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastForteDataList) == 0x000004, "Wrong alignment on FKoratBlastForteDataList");
static_assert(sizeof(FKoratBlastForteDataList) == 0x000008, "Wrong size on FKoratBlastForteDataList");
static_assert(offsetof(FKoratBlastForteDataList, Key) == 0x000000, "Member 'FKoratBlastForteDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterEndPreview
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterEndPreview final
{
public:
	bool                                          bIsSuspend;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterEndPreview) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterEndPreview");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterEndPreview) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterEndPreview");
static_assert(offsetof(FSSDramaticBattleCutEditorExecuteParameterEndPreview, bIsSuspend) == 0x000000, "Member 'FSSDramaticBattleCutEditorExecuteParameterEndPreview::bIsSuspend' has a wrong offset!");

// ScriptStruct SS.KoratBlastSkillDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastSkillDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastSkillDataList) == 0x000004, "Wrong alignment on FKoratBlastSkillDataList");
static_assert(sizeof(FKoratBlastSkillDataList) == 0x000008, "Wrong size on FKoratBlastSkillDataList");
static_assert(offsetof(FKoratBlastSkillDataList, Key) == 0x000000, "Member 'FKoratBlastSkillDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBlastUltimateDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBlastUltimateDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastUltimateDataList) == 0x000004, "Wrong alignment on FKoratBlastUltimateDataList");
static_assert(sizeof(FKoratBlastUltimateDataList) == 0x000008, "Wrong size on FKoratBlastUltimateDataList");
static_assert(offsetof(FKoratBlastUltimateDataList, Key) == 0x000000, "Member 'FKoratBlastUltimateDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMapData
// 0x0000 (0x0008 - 0x0008)
struct FKoratMapData final : public FTableRowBase
{
};
static_assert(alignof(FKoratMapData) == 0x000008, "Wrong alignment on FKoratMapData");
static_assert(sizeof(FKoratMapData) == 0x000008, "Wrong size on FKoratMapData");

// ScriptStruct SS.SSDRMEditUniqueSequence
// 0x0038 (0x0038 - 0x0000)
struct FSSDRMEditUniqueSequence final
{
public:
	ESSDramaticRebindType                         RebindType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0008(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditUniqueSequence) == 0x000008, "Wrong alignment on FSSDRMEditUniqueSequence");
static_assert(sizeof(FSSDRMEditUniqueSequence) == 0x000038, "Wrong size on FSSDRMEditUniqueSequence");
static_assert(offsetof(FSSDRMEditUniqueSequence, RebindType) == 0x000000, "Member 'FSSDRMEditUniqueSequence::RebindType' has a wrong offset!");
static_assert(offsetof(FSSDRMEditUniqueSequence, LevelSequence) == 0x000008, "Member 'FSSDRMEditUniqueSequence::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratAttackHomingDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAttackHomingDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAttackHomingDataList) == 0x000004, "Wrong alignment on FKoratAttackHomingDataList");
static_assert(sizeof(FKoratAttackHomingDataList) == 0x000008, "Wrong size on FKoratAttackHomingDataList");
static_assert(offsetof(FKoratAttackHomingDataList, Key) == 0x000000, "Member 'FKoratAttackHomingDataList::Key' has a wrong offset!");

// ScriptStruct SS.PowerImpactNGCharacterArray
// 0x0010 (0x0010 - 0x0000)
struct FPowerImpactNGCharacterArray final
{
public:
	TArray<struct FKoratCharacterDataList>        CharacterDataList;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerImpactNGCharacterArray) == 0x000008, "Wrong alignment on FPowerImpactNGCharacterArray");
static_assert(sizeof(FPowerImpactNGCharacterArray) == 0x000010, "Wrong size on FPowerImpactNGCharacterArray");
static_assert(offsetof(FPowerImpactNGCharacterArray, CharacterDataList) == 0x000000, "Member 'FPowerImpactNGCharacterArray::CharacterDataList' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertTargetTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertTargetTextData final
{
public:
	EKoratBattleDirectingConditionTargetType      InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertTargetTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertTargetTextData");
static_assert(sizeof(FKoraDramaticInsertTargetTextData) == 0x000040, "Wrong size on FKoraDramaticInsertTargetTextData");
static_assert(offsetof(FKoraDramaticInsertTargetTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertTargetTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertTargetTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertTargetTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoratMenuDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMenuDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMenuDataList) == 0x000004, "Wrong alignment on FKoratMenuDataList");
static_assert(sizeof(FKoratMenuDataList) == 0x000008, "Wrong size on FKoratMenuDataList");
static_assert(offsetof(FKoratMenuDataList, Key) == 0x000000, "Member 'FKoratMenuDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEnergyBulletDirectionDataAssetRecord
// 0x0024 (0x0024 - 0x0000)
struct FKoratEnergyBulletDirectionDataAssetRecord final
{
public:
	EKoratEnergyBulletDirection                   MainDirection;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainDirectionUpDownOffset;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainDirectionLeftRightOffset;                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDirectionRange;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownDirectionRange;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftDirectionRange;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightDirectionRange;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RadiusDivision;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutermostDivision;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEnergyBulletDirectionDataAssetRecord) == 0x000004, "Wrong alignment on FKoratEnergyBulletDirectionDataAssetRecord");
static_assert(sizeof(FKoratEnergyBulletDirectionDataAssetRecord) == 0x000024, "Wrong size on FKoratEnergyBulletDirectionDataAssetRecord");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, MainDirection) == 0x000000, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::MainDirection' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, MainDirectionUpDownOffset) == 0x000004, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::MainDirectionUpDownOffset' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, MainDirectionLeftRightOffset) == 0x000008, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::MainDirectionLeftRightOffset' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, UpDirectionRange) == 0x00000C, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::UpDirectionRange' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, DownDirectionRange) == 0x000010, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::DownDirectionRange' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, LeftDirectionRange) == 0x000014, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::LeftDirectionRange' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, RightDirectionRange) == 0x000018, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::RightDirectionRange' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, RadiusDivision) == 0x00001C, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::RadiusDivision' has a wrong offset!");
static_assert(offsetof(FKoratEnergyBulletDirectionDataAssetRecord, OutermostDivision) == 0x000020, "Member 'FKoratEnergyBulletDirectionDataAssetRecord::OutermostDivision' has a wrong offset!");

// ScriptStruct SS.KoratSeriesTitleDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSeriesTitleDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSeriesTitleDataList) == 0x000004, "Wrong alignment on FKoratSeriesTitleDataList");
static_assert(sizeof(FKoratSeriesTitleDataList) == 0x000008, "Wrong size on FKoratSeriesTitleDataList");
static_assert(offsetof(FKoratSeriesTitleDataList, Key) == 0x000000, "Member 'FKoratSeriesTitleDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratArmorLevelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratArmorLevelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratArmorLevelDataList) == 0x000004, "Wrong alignment on FKoratArmorLevelDataList");
static_assert(sizeof(FKoratArmorLevelDataList) == 0x000008, "Wrong size on FKoratArmorLevelDataList");
static_assert(offsetof(FKoratArmorLevelDataList, Key) == 0x000000, "Member 'FKoratArmorLevelDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticEditMenuButtonData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FKoratDramaticEditMenuButtonData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticEditMenuButtonData) == 0x000008, "Wrong alignment on FKoratDramaticEditMenuButtonData");
static_assert(sizeof(FKoratDramaticEditMenuButtonData) == 0x000020, "Wrong size on FKoratDramaticEditMenuButtonData");

// ScriptStruct SS.KoratEffectBulletRatDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratEffectBulletRatDataAssetRecord final
{
public:
	struct FKoratEffectBulletDecalDataList        BurnMark;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletKnockDataList        LandElevation;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatLineTraceParam    LineTraceParam;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnDistance;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatExistLimitParam   ExistLimitParam;                                   // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBulletRatDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectBulletRatDataAssetRecord");
static_assert(sizeof(FKoratEffectBulletRatDataAssetRecord) == 0x000050, "Wrong size on FKoratEffectBulletRatDataAssetRecord");
static_assert(offsetof(FKoratEffectBulletRatDataAssetRecord, BurnMark) == 0x000000, "Member 'FKoratEffectBulletRatDataAssetRecord::BurnMark' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetRecord, LandElevation) == 0x000008, "Member 'FKoratEffectBulletRatDataAssetRecord::LandElevation' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetRecord, LineTraceParam) == 0x000010, "Member 'FKoratEffectBulletRatDataAssetRecord::LineTraceParam' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetRecord, SpawnDistance) == 0x000040, "Member 'FKoratEffectBulletRatDataAssetRecord::SpawnDistance' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDataAssetRecord, ExistLimitParam) == 0x000044, "Member 'FKoratEffectBulletRatDataAssetRecord::ExistLimitParam' has a wrong offset!");

// ScriptStruct SS.SSCharacterWarpExtCondition
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSCharacterWarpExtCondition final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterWarpExtCondition) == 0x000004, "Wrong alignment on FSSCharacterWarpExtCondition");
static_assert(sizeof(FSSCharacterWarpExtCondition) == 0x000008, "Wrong size on FSSCharacterWarpExtCondition");

// ScriptStruct SS.KoratInteractTriggerTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratInteractTriggerTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractTriggerTypeDataList) == 0x000004, "Wrong alignment on FKoratInteractTriggerTypeDataList");
static_assert(sizeof(FKoratInteractTriggerTypeDataList) == 0x000008, "Wrong size on FKoratInteractTriggerTypeDataList");
static_assert(offsetof(FKoratInteractTriggerTypeDataList, Key) == 0x000000, "Member 'FKoratInteractTriggerTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectEnvDataAssetRecord
// 0x0090 (0x0090 - 0x0000)
struct FKoratEffectEnvDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceIn;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceLoop;                                 // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceOut;                                  // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectEnvDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectEnvDataAssetRecord");
static_assert(sizeof(FKoratEffectEnvDataAssetRecord) == 0x000090, "Wrong size on FKoratEffectEnvDataAssetRecord");
static_assert(offsetof(FKoratEffectEnvDataAssetRecord, LevelSequenceIn) == 0x000000, "Member 'FKoratEffectEnvDataAssetRecord::LevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FKoratEffectEnvDataAssetRecord, LevelSequenceLoop) == 0x000030, "Member 'FKoratEffectEnvDataAssetRecord::LevelSequenceLoop' has a wrong offset!");
static_assert(offsetof(FKoratEffectEnvDataAssetRecord, LevelSequenceOut) == 0x000060, "Member 'FKoratEffectEnvDataAssetRecord::LevelSequenceOut' has a wrong offset!");

// ScriptStruct SS.SSSimpleAimLookatLookatParameter
// 0x0090 (0x0090 - 0x0000)
struct FSSSimpleAimLookatLookatParameter final
{
public:
	struct FTransform                             EffectorTransform;                                 // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine1;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine2;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine3;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Neck;                                              // 0x0078(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Head;                                              // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSimpleAimLookatLookatParameter) == 0x000010, "Wrong alignment on FSSSimpleAimLookatLookatParameter");
static_assert(sizeof(FSSSimpleAimLookatLookatParameter) == 0x000090, "Wrong size on FSSSimpleAimLookatLookatParameter");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, EffectorTransform) == 0x000000, "Member 'FSSSimpleAimLookatLookatParameter::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, Spine1) == 0x000060, "Member 'FSSSimpleAimLookatLookatParameter::Spine1' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, Spine2) == 0x000068, "Member 'FSSSimpleAimLookatLookatParameter::Spine2' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, Spine3) == 0x000070, "Member 'FSSSimpleAimLookatLookatParameter::Spine3' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, Neck) == 0x000078, "Member 'FSSSimpleAimLookatLookatParameter::Neck' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatLookatParameter, Head) == 0x000080, "Member 'FSSSimpleAimLookatLookatParameter::Head' has a wrong offset!");

// ScriptStruct SS.KoratSpaceAreaSettingDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSpaceAreaSettingDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpaceAreaSettingDataList) == 0x000004, "Wrong alignment on FKoratSpaceAreaSettingDataList");
static_assert(sizeof(FKoratSpaceAreaSettingDataList) == 0x000008, "Wrong size on FKoratSpaceAreaSettingDataList");
static_assert(offsetof(FKoratSpaceAreaSettingDataList, Key) == 0x000000, "Member 'FKoratSpaceAreaSettingDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSMovieManaData
// 0x0030 (0x0030 - 0x0000)
struct FSSMovieManaData final
{
public:
	TSoftObjectPtr<class UManaSource>             ManaSource;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMovieManaData) == 0x000008, "Wrong alignment on FSSMovieManaData");
static_assert(sizeof(FSSMovieManaData) == 0x000030, "Wrong size on FSSMovieManaData");
static_assert(offsetof(FSSMovieManaData, ManaSource) == 0x000000, "Member 'FSSMovieManaData::ManaSource' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratFreeTimelineTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFreeTimelineTypeDataList) == 0x000004, "Wrong alignment on FKoratFreeTimelineTypeDataList");
static_assert(sizeof(FKoratFreeTimelineTypeDataList) == 0x000008, "Wrong size on FKoratFreeTimelineTypeDataList");
static_assert(offsetof(FKoratFreeTimelineTypeDataList, Key) == 0x000000, "Member 'FKoratFreeTimelineTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEffectFigureTransformDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectFigureTransformDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectFigureTransformDataList) == 0x000004, "Wrong alignment on FKoratEffectFigureTransformDataList");
static_assert(sizeof(FKoratEffectFigureTransformDataList) == 0x000008, "Wrong size on FKoratEffectFigureTransformDataList");
static_assert(offsetof(FKoratEffectFigureTransformDataList, Key) == 0x000000, "Member 'FKoratEffectFigureTransformDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticEditBaseText
// 0x0020 (0x0020 - 0x0000)
struct FKoratDramaticEditBaseText final
{
public:
	class FText                                   OriginalText;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratReplaceTextCategry                      TextCategory;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticEditBaseText) == 0x000008, "Wrong alignment on FKoratDramaticEditBaseText");
static_assert(sizeof(FKoratDramaticEditBaseText) == 0x000020, "Wrong size on FKoratDramaticEditBaseText");
static_assert(offsetof(FKoratDramaticEditBaseText, OriginalText) == 0x000000, "Member 'FKoratDramaticEditBaseText::OriginalText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditBaseText, TextCategory) == 0x000018, "Member 'FKoratDramaticEditBaseText::TextCategory' has a wrong offset!");

// ScriptStruct SS.KoratCameraModeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCameraModeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCameraModeDataList) == 0x000004, "Wrong alignment on FKoratCameraModeDataList");
static_assert(sizeof(FKoratCameraModeDataList) == 0x000008, "Wrong size on FKoratCameraModeDataList");
static_assert(offsetof(FKoratCameraModeDataList, Key) == 0x000000, "Member 'FKoratCameraModeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratShakeForceTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratShakeForceTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratShakeForceTypeDataList) == 0x000004, "Wrong alignment on FKoratShakeForceTypeDataList");
static_assert(sizeof(FKoratShakeForceTypeDataList) == 0x000008, "Wrong size on FKoratShakeForceTypeDataList");
static_assert(offsetof(FKoratShakeForceTypeDataList, Key) == 0x000000, "Member 'FKoratShakeForceTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSimpleEnding
// 0x0048 (0x0048 - 0x0000)
struct FKoratDramaticBattleSimpleEnding final
{
public:
	struct FKoratActionDataList                   SpecifiedAction;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayStartTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayFadeTime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplaySize;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DisplayPosition;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMData;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TelopText;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSimpleEnding) == 0x000008, "Wrong alignment on FKoratDramaticBattleSimpleEnding");
static_assert(sizeof(FKoratDramaticBattleSimpleEnding) == 0x000048, "Wrong size on FKoratDramaticBattleSimpleEnding");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, SpecifiedAction) == 0x000000, "Member 'FKoratDramaticBattleSimpleEnding::SpecifiedAction' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, DisplayStartTime) == 0x000008, "Member 'FKoratDramaticBattleSimpleEnding::DisplayStartTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, DisplayFadeTime) == 0x00000C, "Member 'FKoratDramaticBattleSimpleEnding::DisplayFadeTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, DisplaySize) == 0x000010, "Member 'FKoratDramaticBattleSimpleEnding::DisplaySize' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, DisplayPosition) == 0x000018, "Member 'FKoratDramaticBattleSimpleEnding::DisplayPosition' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, BGMData) == 0x000028, "Member 'FKoratDramaticBattleSimpleEnding::BGMData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSimpleEnding, TelopText) == 0x000030, "Member 'FKoratDramaticBattleSimpleEnding::TelopText' has a wrong offset!");

// ScriptStruct SS.KoratObjectLimitDataList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratObjectLimitDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratObjectLimitDataList) == 0x000008, "Wrong alignment on FKoratObjectLimitDataList");
static_assert(sizeof(FKoratObjectLimitDataList) == 0x000018, "Wrong size on FKoratObjectLimitDataList");
static_assert(offsetof(FKoratObjectLimitDataList, Key) == 0x000000, "Member 'FKoratObjectLimitDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCameraConnectOption
// 0x0007 (0x0007 - 0x0000)
struct FSSCameraConnectOption final
{
public:
	bool                                          bStartDetour;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndDetour;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleCameraDetourLerpType                   DetourLerpType;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x4];                                        // 0x0003(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCameraConnectOption) == 0x000001, "Wrong alignment on FSSCameraConnectOption");
static_assert(sizeof(FSSCameraConnectOption) == 0x000007, "Wrong size on FSSCameraConnectOption");
static_assert(offsetof(FSSCameraConnectOption, bStartDetour) == 0x000000, "Member 'FSSCameraConnectOption::bStartDetour' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectOption, bEndDetour) == 0x000001, "Member 'FSSCameraConnectOption::bEndDetour' has a wrong offset!");
static_assert(offsetof(FSSCameraConnectOption, DetourLerpType) == 0x000002, "Member 'FSSCameraConnectOption::DetourLerpType' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitAirWallInstanceInfo
// 0x0014 (0x0014 - 0x0000)
struct FKoratEffectHitAirWallInstanceInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Instance;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeCount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSLevelSequenceActor>   LevelSequenceActor;                                // 0x000C(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitAirWallInstanceInfo) == 0x000004, "Wrong alignment on FKoratEffectHitAirWallInstanceInfo");
static_assert(sizeof(FKoratEffectHitAirWallInstanceInfo) == 0x000014, "Wrong size on FKoratEffectHitAirWallInstanceInfo");
static_assert(offsetof(FKoratEffectHitAirWallInstanceInfo, Instance) == 0x000000, "Member 'FKoratEffectHitAirWallInstanceInfo::Instance' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallInstanceInfo, TimeCount) == 0x000008, "Member 'FKoratEffectHitAirWallInstanceInfo::TimeCount' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallInstanceInfo, LevelSequenceActor) == 0x00000C, "Member 'FKoratEffectHitAirWallInstanceInfo::LevelSequenceActor' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTypeSettingDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratFreeTimelineTypeSettingDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFreeTimelineTypeSettingDataList) == 0x000004, "Wrong alignment on FKoratFreeTimelineTypeSettingDataList");
static_assert(sizeof(FKoratFreeTimelineTypeSettingDataList) == 0x000008, "Wrong size on FKoratFreeTimelineTypeSettingDataList");
static_assert(offsetof(FKoratFreeTimelineTypeSettingDataList, Key) == 0x000000, "Member 'FKoratFreeTimelineTypeSettingDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCharacterWarpResult
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FSSCharacterWarpResult final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterWarpResult) == 0x000010, "Wrong alignment on FSSCharacterWarpResult");
static_assert(sizeof(FSSCharacterWarpResult) == 0x0000E0, "Wrong size on FSSCharacterWarpResult");

// ScriptStruct SS.KoratUIActionDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratUIActionDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUIActionDataList) == 0x000004, "Wrong alignment on FKoratUIActionDataList");
static_assert(sizeof(FKoratUIActionDataList) == 0x000008, "Wrong size on FKoratUIActionDataList");
static_assert(offsetof(FKoratUIActionDataList, Key) == 0x000000, "Member 'FKoratUIActionDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSNotificationDataAssetRecord
// 0x0040 (0x0040 - 0x0000)
struct FSSNotificationDataAssetRecord final
{
public:
	ENotificationMode                             Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ENotificationType                             Type;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationTiming                           Timing;                                            // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSave;                                         // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSNotificationDataAssetRecord) == 0x000008, "Wrong alignment on FSSNotificationDataAssetRecord");
static_assert(sizeof(FSSNotificationDataAssetRecord) == 0x000040, "Wrong size on FSSNotificationDataAssetRecord");
static_assert(offsetof(FSSNotificationDataAssetRecord, Mode) == 0x000000, "Member 'FSSNotificationDataAssetRecord::Mode' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, TitleText) == 0x000008, "Member 'FSSNotificationDataAssetRecord::TitleText' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, BodyText) == 0x000020, "Member 'FSSNotificationDataAssetRecord::BodyText' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, Type) == 0x000038, "Member 'FSSNotificationDataAssetRecord::Type' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, Priority) == 0x000039, "Member 'FSSNotificationDataAssetRecord::Priority' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, Timing) == 0x00003A, "Member 'FSSNotificationDataAssetRecord::Timing' has a wrong offset!");
static_assert(offsetof(FSSNotificationDataAssetRecord, bNeedSave) == 0x00003B, "Member 'FSSNotificationDataAssetRecord::bNeedSave' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletDecalDataAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FKoratEffectBulletDecalDataAssetRecord final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      MaterialInterface;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleFactor;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       ScaleRandom;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       RotationRandom;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SoundId;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBulletDecalDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectBulletDecalDataAssetRecord");
static_assert(sizeof(FKoratEffectBulletDecalDataAssetRecord) == 0x000060, "Wrong size on FKoratEffectBulletDecalDataAssetRecord");
static_assert(offsetof(FKoratEffectBulletDecalDataAssetRecord, MaterialInterface) == 0x000000, "Member 'FKoratEffectBulletDecalDataAssetRecord::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletDecalDataAssetRecord, ScaleFactor) == 0x000030, "Member 'FKoratEffectBulletDecalDataAssetRecord::ScaleFactor' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletDecalDataAssetRecord, ScaleRandom) == 0x000048, "Member 'FKoratEffectBulletDecalDataAssetRecord::ScaleRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletDecalDataAssetRecord, RotationRandom) == 0x000050, "Member 'FKoratEffectBulletDecalDataAssetRecord::RotationRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletDecalDataAssetRecord, SoundId) == 0x000058, "Member 'FKoratEffectBulletDecalDataAssetRecord::SoundId' has a wrong offset!");

// ScriptStruct SS.KoratEffectInteractDecalTypeDataList
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratEffectInteractDecalTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectInteractDecalTypeDataList) == 0x000008, "Wrong alignment on FKoratEffectInteractDecalTypeDataList");
static_assert(sizeof(FKoratEffectInteractDecalTypeDataList) == 0x000018, "Wrong size on FKoratEffectInteractDecalTypeDataList");
static_assert(offsetof(FKoratEffectInteractDecalTypeDataList, Key) == 0x000000, "Member 'FKoratEffectInteractDecalTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSummary
// 0x0048 (0x0048 - 0x0000)
struct FKoratDramaticBattleSummary final
{
public:
	TSoftObjectPtr<class UTexture2D>              SummaryImage;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBugEatingString                  SummaryText;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSummary) == 0x000008, "Wrong alignment on FKoratDramaticBattleSummary");
static_assert(sizeof(FKoratDramaticBattleSummary) == 0x000048, "Wrong size on FKoratDramaticBattleSummary");
static_assert(offsetof(FKoratDramaticBattleSummary, SummaryImage) == 0x000000, "Member 'FKoratDramaticBattleSummary::SummaryImage' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummary, SummaryText) == 0x000030, "Member 'FKoratDramaticBattleSummary::SummaryText' has a wrong offset!");

// ScriptStruct SS.KoratMapStreamingPoolSizeData
// 0x000C (0x000C - 0x0000)
struct FKoratMapStreamingPoolSizeData final
{
public:
	class FName                                   PlatformName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapStreamingPoolSizeData) == 0x000004, "Wrong alignment on FKoratMapStreamingPoolSizeData");
static_assert(sizeof(FKoratMapStreamingPoolSizeData) == 0x00000C, "Wrong size on FKoratMapStreamingPoolSizeData");
static_assert(offsetof(FKoratMapStreamingPoolSizeData, PlatformName) == 0x000000, "Member 'FKoratMapStreamingPoolSizeData::PlatformName' has a wrong offset!");
static_assert(offsetof(FKoratMapStreamingPoolSizeData, PoolSize) == 0x000008, "Member 'FKoratMapStreamingPoolSizeData::PoolSize' has a wrong offset!");

// ScriptStruct SS.KoratEventSceneDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEventSceneDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEventSceneDataList) == 0x000004, "Wrong alignment on FKoratEventSceneDataList");
static_assert(sizeof(FKoratEventSceneDataList) == 0x000008, "Wrong size on FKoratEventSceneDataList");
static_assert(offsetof(FKoratEventSceneDataList, Key) == 0x000000, "Member 'FKoratEventSceneDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEventSceneMenuDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEventSceneMenuDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEventSceneMenuDataList) == 0x000004, "Wrong alignment on FKoratEventSceneMenuDataList");
static_assert(sizeof(FKoratEventSceneMenuDataList) == 0x000008, "Wrong size on FKoratEventSceneMenuDataList");
static_assert(offsetof(FKoratEventSceneMenuDataList, Key) == 0x000000, "Member 'FKoratEventSceneMenuDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCameraConnected
// 0x00B0 (0x00B0 - 0x0000)
struct FSSCameraConnected final
{
public:
	class ASSCutCameraActor*                      CameraInstance;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SequencerStartTime;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SequencerCloseStartTime;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SequencerLeaveStartTime;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequencerCloseTimeCam;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequencerCloseTimeLat;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionStartFrame;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionEndFrameCam;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionEndFrameLat;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseTrack;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThirdCameraCancel;                                // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootDirectorReconnectPriorityType            ReconnectPriorityType;                             // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSCameraConnectedLastParameter        LastParameter;                                     // 0x0038(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForcePriorityDownDelay;                           // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCameraConnected) == 0x000008, "Wrong alignment on FSSCameraConnected");
static_assert(sizeof(FSSCameraConnected) == 0x0000B0, "Wrong size on FSSCameraConnected");
static_assert(offsetof(FSSCameraConnected, CameraInstance) == 0x000000, "Member 'FSSCameraConnected::CameraInstance' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SequencerStartTime) == 0x000008, "Member 'FSSCameraConnected::SequencerStartTime' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SequencerCloseStartTime) == 0x000010, "Member 'FSSCameraConnected::SequencerCloseStartTime' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SequencerLeaveStartTime) == 0x000018, "Member 'FSSCameraConnected::SequencerLeaveStartTime' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SequencerCloseTimeCam) == 0x000020, "Member 'FSSCameraConnected::SequencerCloseTimeCam' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SequencerCloseTimeLat) == 0x000024, "Member 'FSSCameraConnected::SequencerCloseTimeLat' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SectionStartFrame) == 0x000028, "Member 'FSSCameraConnected::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SectionEndFrameCam) == 0x00002C, "Member 'FSSCameraConnected::SectionEndFrameCam' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, SectionEndFrameLat) == 0x000030, "Member 'FSSCameraConnected::SectionEndFrameLat' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, ReverseTrack) == 0x000034, "Member 'FSSCameraConnected::ReverseTrack' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, bThirdCameraCancel) == 0x000035, "Member 'FSSCameraConnected::bThirdCameraCancel' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, ReconnectPriorityType) == 0x000036, "Member 'FSSCameraConnected::ReconnectPriorityType' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, LastParameter) == 0x000038, "Member 'FSSCameraConnected::LastParameter' has a wrong offset!");
static_assert(offsetof(FSSCameraConnected, bForcePriorityDownDelay) == 0x0000A8, "Member 'FSSCameraConnected::bForcePriorityDownDelay' has a wrong offset!");

// ScriptStruct SS.SSCameraConnectedQueue
// 0x0010 (0x0010 - 0x0000)
struct FSSCameraConnectedQueue final
{
public:
	TArray<struct FSSCameraConnected>             CameraConnected;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCameraConnectedQueue) == 0x000008, "Wrong alignment on FSSCameraConnectedQueue");
static_assert(sizeof(FSSCameraConnectedQueue) == 0x000010, "Wrong size on FSSCameraConnectedQueue");
static_assert(offsetof(FSSCameraConnectedQueue, CameraConnected) == 0x000000, "Member 'FSSCameraConnectedQueue::CameraConnected' has a wrong offset!");

// ScriptStruct SS.KoratTitleDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratTitleDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTitleDataList) == 0x000004, "Wrong alignment on FKoratTitleDataList");
static_assert(sizeof(FKoratTitleDataList) == 0x000008, "Wrong size on FKoratTitleDataList");
static_assert(offsetof(FKoratTitleDataList, Key) == 0x000000, "Member 'FKoratTitleDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDestructionSwitchOptions
// 0x0014 (0x0014 - 0x0000)
struct FKoratDestructionSwitchOptions final
{
public:
	bool                                          bSwitchActorHiddenInGame;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSimulatePhysics;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDisapper;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisapperDelayTime;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateDamage;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchDestroyedCollisionProfile;                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionProfileName                  DestroyedCollisionProfile;                         // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionSwitchOptions) == 0x000004, "Wrong alignment on FKoratDestructionSwitchOptions");
static_assert(sizeof(FKoratDestructionSwitchOptions) == 0x000014, "Wrong size on FKoratDestructionSwitchOptions");
static_assert(offsetof(FKoratDestructionSwitchOptions, bSwitchActorHiddenInGame) == 0x000000, "Member 'FKoratDestructionSwitchOptions::bSwitchActorHiddenInGame' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, bEnableSimulatePhysics) == 0x000001, "Member 'FKoratDestructionSwitchOptions::bEnableSimulatePhysics' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, bEnableDisapper) == 0x000002, "Member 'FKoratDestructionSwitchOptions::bEnableDisapper' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, DisapperDelayTime) == 0x000004, "Member 'FKoratDestructionSwitchOptions::DisapperDelayTime' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, bPropagateDamage) == 0x000008, "Member 'FKoratDestructionSwitchOptions::bPropagateDamage' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, bSwitchDestroyedCollisionProfile) == 0x000009, "Member 'FKoratDestructionSwitchOptions::bSwitchDestroyedCollisionProfile' has a wrong offset!");
static_assert(offsetof(FKoratDestructionSwitchOptions, DestroyedCollisionProfile) == 0x00000C, "Member 'FKoratDestructionSwitchOptions::DestroyedCollisionProfile' has a wrong offset!");

// ScriptStruct SS.KoratTutorialDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratTutorialDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTutorialDataList) == 0x000004, "Wrong alignment on FKoratTutorialDataList");
static_assert(sizeof(FKoratTutorialDataList) == 0x000008, "Wrong size on FKoratTutorialDataList");
static_assert(offsetof(FKoratTutorialDataList, Key) == 0x000000, "Member 'FKoratTutorialDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSAnimePersBlendFactor
// 0x0060 (0x0060 - 0x0000)
struct FSSAnimePersBlendFactor final
{
public:
	float                                         FakeFocalLength;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EffectiveStartPoint;                               // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeEndInterpolationDistance;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EffectiveEndPoint;                                 // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationProportion;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualFocusDistance;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DofBlurSizeNear;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DofBlurSizeFar;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiaphragmBladeCount;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAnimePersBlendFactor) == 0x000008, "Wrong alignment on FSSAnimePersBlendFactor");
static_assert(sizeof(FSSAnimePersBlendFactor) == 0x000060, "Wrong size on FSSAnimePersBlendFactor");
static_assert(offsetof(FSSAnimePersBlendFactor, FakeFocalLength) == 0x000000, "Member 'FSSAnimePersBlendFactor::FakeFocalLength' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, EffectiveStartPoint) == 0x000008, "Member 'FSSAnimePersBlendFactor::EffectiveStartPoint' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, FakeEndInterpolationDistance) == 0x000020, "Member 'FSSAnimePersBlendFactor::FakeEndInterpolationDistance' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, EffectiveEndPoint) == 0x000028, "Member 'FSSAnimePersBlendFactor::EffectiveEndPoint' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, InterpolationProportion) == 0x000040, "Member 'FSSAnimePersBlendFactor::InterpolationProportion' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, CurrentFocalLength) == 0x000044, "Member 'FSSAnimePersBlendFactor::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, ManualFocusDistance) == 0x000048, "Member 'FSSAnimePersBlendFactor::ManualFocusDistance' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, Aperture) == 0x00004C, "Member 'FSSAnimePersBlendFactor::Aperture' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, DofBlurSizeNear) == 0x000050, "Member 'FSSAnimePersBlendFactor::DofBlurSizeNear' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, DofBlurSizeFar) == 0x000054, "Member 'FSSAnimePersBlendFactor::DofBlurSizeFar' has a wrong offset!");
static_assert(offsetof(FSSAnimePersBlendFactor, DiaphragmBladeCount) == 0x000058, "Member 'FSSAnimePersBlendFactor::DiaphragmBladeCount' has a wrong offset!");

// ScriptStruct SS.SSCameraLastParameter
// 0x0190 (0x0190 - 0x0000)
struct FSSCameraLastParameter final
{
public:
	bool                                          Baked;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseBaked;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachParentActor;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ParentRotation;                                    // 0x0050(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParentLocation;                                    // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PhysicalDisparityTargetCameraRootTransform;        // 0x0090(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MCameraRelativeLocation;                           // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  MCameraParent;                                     // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FovVertical;                                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FovHorizon;                                        // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDisparityTargetWeightAddLength;            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDisparityTargetWeightAddHeight;            // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDisparityTargetWeightAddWidth;             // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSAnimePersBlendFactor                AnimePersBlendFactor;                              // 0x0128(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCameraLastParameter) == 0x000010, "Wrong alignment on FSSCameraLastParameter");
static_assert(sizeof(FSSCameraLastParameter) == 0x000190, "Wrong size on FSSCameraLastParameter");
static_assert(offsetof(FSSCameraLastParameter, Baked) == 0x000000, "Member 'FSSCameraLastParameter::Baked' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, ReverseBaked) == 0x000001, "Member 'FSSCameraLastParameter::ReverseBaked' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, Position) == 0x000008, "Member 'FSSCameraLastParameter::Position' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, Rotation) == 0x000020, "Member 'FSSCameraLastParameter::Rotation' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, AttachParentActor) == 0x000040, "Member 'FSSCameraLastParameter::AttachParentActor' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, ParentRotation) == 0x000050, "Member 'FSSCameraLastParameter::ParentRotation' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, ParentLocation) == 0x000070, "Member 'FSSCameraLastParameter::ParentLocation' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, PhysicalDisparityTargetCameraRootTransform) == 0x000090, "Member 'FSSCameraLastParameter::PhysicalDisparityTargetCameraRootTransform' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, MCameraRelativeLocation) == 0x0000F0, "Member 'FSSCameraLastParameter::MCameraRelativeLocation' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, MCameraParent) == 0x000108, "Member 'FSSCameraLastParameter::MCameraParent' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, FovVertical) == 0x000110, "Member 'FSSCameraLastParameter::FovVertical' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, FovHorizon) == 0x000114, "Member 'FSSCameraLastParameter::FovHorizon' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, PhysicalDisparityTargetWeightAddLength) == 0x000118, "Member 'FSSCameraLastParameter::PhysicalDisparityTargetWeightAddLength' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, PhysicalDisparityTargetWeightAddHeight) == 0x00011C, "Member 'FSSCameraLastParameter::PhysicalDisparityTargetWeightAddHeight' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, PhysicalDisparityTargetWeightAddWidth) == 0x000120, "Member 'FSSCameraLastParameter::PhysicalDisparityTargetWeightAddWidth' has a wrong offset!");
static_assert(offsetof(FSSCameraLastParameter, AnimePersBlendFactor) == 0x000128, "Member 'FSSCameraLastParameter::AnimePersBlendFactor' has a wrong offset!");

// ScriptStruct SS.KoratMultiDeviceVariableBoolTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMultiDeviceVariableBoolTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMultiDeviceVariableBoolTypeDataList) == 0x000004, "Wrong alignment on FKoratMultiDeviceVariableBoolTypeDataList");
static_assert(sizeof(FKoratMultiDeviceVariableBoolTypeDataList) == 0x000008, "Wrong size on FKoratMultiDeviceVariableBoolTypeDataList");
static_assert(offsetof(FKoratMultiDeviceVariableBoolTypeDataList, Key) == 0x000000, "Member 'FKoratMultiDeviceVariableBoolTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSBattleMode011Result
// 0x0034 (0x0034 - 0x0000)
struct FSSBattleMode011Result final
{
public:
	bool                                          bIsUseEventPointBoost;                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIllegalAlert;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeforeRank;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterRank;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeforeRankPoint;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterRankPoint;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevNeedPoint;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextNeedPoint;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPoint;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddEventPoint;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPoint;                                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRewardPoint;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassPoint;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddBattlePassPoint;                                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleMode011Result) == 0x000004, "Wrong alignment on FSSBattleMode011Result");
static_assert(sizeof(FSSBattleMode011Result) == 0x000034, "Wrong size on FSSBattleMode011Result");
static_assert(offsetof(FSSBattleMode011Result, bIsUseEventPointBoost) == 0x000000, "Member 'FSSBattleMode011Result::bIsUseEventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, bIsIllegalAlert) == 0x000001, "Member 'FSSBattleMode011Result::bIsIllegalAlert' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, BeforeRank) == 0x000004, "Member 'FSSBattleMode011Result::BeforeRank' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, AfterRank) == 0x000008, "Member 'FSSBattleMode011Result::AfterRank' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, BeforeRankPoint) == 0x00000C, "Member 'FSSBattleMode011Result::BeforeRankPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, AfterRankPoint) == 0x000010, "Member 'FSSBattleMode011Result::AfterRankPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, PrevNeedPoint) == 0x000014, "Member 'FSSBattleMode011Result::PrevNeedPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, NextNeedPoint) == 0x000018, "Member 'FSSBattleMode011Result::NextNeedPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, EventPoint) == 0x00001C, "Member 'FSSBattleMode011Result::EventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, AddEventPoint) == 0x000020, "Member 'FSSBattleMode011Result::AddEventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, RewardPoint) == 0x000024, "Member 'FSSBattleMode011Result::RewardPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, AddRewardPoint) == 0x000028, "Member 'FSSBattleMode011Result::AddRewardPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, BattlePassPoint) == 0x00002C, "Member 'FSSBattleMode011Result::BattlePassPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Result, AddBattlePassPoint) == 0x000030, "Member 'FSSBattleMode011Result::AddBattlePassPoint' has a wrong offset!");

// ScriptStruct SS.KoratMultiDeviceVariableIntTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMultiDeviceVariableIntTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMultiDeviceVariableIntTypeDataList) == 0x000004, "Wrong alignment on FKoratMultiDeviceVariableIntTypeDataList");
static_assert(sizeof(FKoratMultiDeviceVariableIntTypeDataList) == 0x000008, "Wrong size on FKoratMultiDeviceVariableIntTypeDataList");
static_assert(offsetof(FKoratMultiDeviceVariableIntTypeDataList, Key) == 0x000000, "Member 'FKoratMultiDeviceVariableIntTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMultiDeviceVariableFloatTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMultiDeviceVariableFloatTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMultiDeviceVariableFloatTypeDataList) == 0x000004, "Wrong alignment on FKoratMultiDeviceVariableFloatTypeDataList");
static_assert(sizeof(FKoratMultiDeviceVariableFloatTypeDataList) == 0x000008, "Wrong size on FKoratMultiDeviceVariableFloatTypeDataList");
static_assert(offsetof(FKoratMultiDeviceVariableFloatTypeDataList, Key) == 0x000000, "Member 'FKoratMultiDeviceVariableFloatTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterSelectSituationData
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterSelectSituationData final
{
public:
	struct FKoratDRMEditSituationDataList         SituationDataList;                                 // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           PictureDataList;                                   // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterSelectSituationData) == 0x000004, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterSelectSituationData");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterSelectSituationData) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterSelectSituationData");
static_assert(offsetof(FSSDramaticBattleCutEditorExecuteParameterSelectSituationData, SituationDataList) == 0x000000, "Member 'FSSDramaticBattleCutEditorExecuteParameterSelectSituationData::SituationDataList' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorExecuteParameterSelectSituationData, PictureDataList) == 0x000008, "Member 'FSSDramaticBattleCutEditorExecuteParameterSelectSituationData::PictureDataList' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBitFlags
// 0x000C (0x000C - 0x0000)
struct FKoratDramaticBitFlags final
{
public:
	uint8                                         TextAvailableTypeFlags_Title;                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextAvailableTypeFlags_Subtitle;                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextAvailableTypeFlags_PreviewOfNext;              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextAvailableTypeFlags_Tag;                        // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextAvailableTypeFlags_Speaker;                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x1];                                        // 0x0005(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        ImageAvailableTypeFlags_Title;                     // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ImageAvailableTypeFlags_2DCut;                     // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ImageAvailableTypeFlags_Thumbnail;                 // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBitFlags) == 0x000002, "Wrong alignment on FKoratDramaticBitFlags");
static_assert(sizeof(FKoratDramaticBitFlags) == 0x00000C, "Wrong size on FKoratDramaticBitFlags");
static_assert(offsetof(FKoratDramaticBitFlags, TextAvailableTypeFlags_Title) == 0x000000, "Member 'FKoratDramaticBitFlags::TextAvailableTypeFlags_Title' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, TextAvailableTypeFlags_Subtitle) == 0x000001, "Member 'FKoratDramaticBitFlags::TextAvailableTypeFlags_Subtitle' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, TextAvailableTypeFlags_PreviewOfNext) == 0x000002, "Member 'FKoratDramaticBitFlags::TextAvailableTypeFlags_PreviewOfNext' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, TextAvailableTypeFlags_Tag) == 0x000003, "Member 'FKoratDramaticBitFlags::TextAvailableTypeFlags_Tag' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, TextAvailableTypeFlags_Speaker) == 0x000004, "Member 'FKoratDramaticBitFlags::TextAvailableTypeFlags_Speaker' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, ImageAvailableTypeFlags_Title) == 0x000006, "Member 'FKoratDramaticBitFlags::ImageAvailableTypeFlags_Title' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, ImageAvailableTypeFlags_2DCut) == 0x000008, "Member 'FKoratDramaticBitFlags::ImageAvailableTypeFlags_2DCut' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBitFlags, ImageAvailableTypeFlags_Thumbnail) == 0x00000A, "Member 'FKoratDramaticBitFlags::ImageAvailableTypeFlags_Thumbnail' has a wrong offset!");

// ScriptStruct SS.KoratCharacterTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterTypeDataList) == 0x000004, "Wrong alignment on FKoratCharacterTypeDataList");
static_assert(sizeof(FKoratCharacterTypeDataList) == 0x000008, "Wrong size on FKoratCharacterTypeDataList");
static_assert(offsetof(FKoratCharacterTypeDataList, Key) == 0x000000, "Member 'FKoratCharacterTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratSystemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratSystemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSystemDataList) == 0x000004, "Wrong alignment on FKoratSystemDataList");
static_assert(sizeof(FKoratSystemDataList) == 0x000008, "Wrong size on FKoratSystemDataList");
static_assert(offsetof(FKoratSystemDataList, Key) == 0x000000, "Member 'FKoratSystemDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption
// 0x0028 (0x0028 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption final
{
public:
	class FText                                   WindowTitleText;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowButtonGuideDataList UIWindowButtonGuide;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowSelectItemDataList ListItemTemplate;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption) == 0x000028, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption, WindowTitleText) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption::WindowTitleText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption, UIWindowButtonGuide) == 0x000018, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption::UIWindowButtonGuide' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption, ListItemTemplate) == 0x000020, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption::ListItemTemplate' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorUIWindowDisplayConditionDataList DisplayCondition;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorFunctionDataList Function;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticBattleCutEditorUIWindowSelectItemDataList> Items;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataOption Option;                                            // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord) == 0x000060, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord, Text) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord::Text' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord, DisplayCondition) == 0x000018, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord::DisplayCondition' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord, Function) == 0x000020, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord::Function' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord, Items) == 0x000028, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord::Items' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord, Option) == 0x000038, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectItemDataAssetRecord::Option' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitDataAssetByColor
// 0x0038 (0x0038 - 0x0000)
struct FKoratEffectHitDataAssetByColor final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratWorldPointLightDataList          ColorBranchWorldToonPointLight;                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitDataAssetByColor) == 0x000008, "Wrong alignment on FKoratEffectHitDataAssetByColor");
static_assert(sizeof(FKoratEffectHitDataAssetByColor) == 0x000038, "Wrong size on FKoratEffectHitDataAssetByColor");
static_assert(offsetof(FKoratEffectHitDataAssetByColor, LevelSequence) == 0x000000, "Member 'FKoratEffectHitDataAssetByColor::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitDataAssetByColor, ColorBranchWorldToonPointLight) == 0x000030, "Member 'FKoratEffectHitDataAssetByColor::ColorBranchWorldToonPointLight' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitDataAssetRecord
// 0x0058 (0x0058 - 0x0000)
struct FKoratEffectHitDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratEffectHitDataAssetByColor> LevelSequenceByColor;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FKoratWorldPointLightDataList          DefaultWorldToonPointLight;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSHitEffectType                              HitEffectType;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectHitDataList                SlashOverrideEffect;                               // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectHitDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectHitDataAssetRecord");
static_assert(sizeof(FKoratEffectHitDataAssetRecord) == 0x000058, "Wrong size on FKoratEffectHitDataAssetRecord");
static_assert(offsetof(FKoratEffectHitDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectHitDataAssetRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitDataAssetRecord, LevelSequenceByColor) == 0x000030, "Member 'FKoratEffectHitDataAssetRecord::LevelSequenceByColor' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitDataAssetRecord, DefaultWorldToonPointLight) == 0x000040, "Member 'FKoratEffectHitDataAssetRecord::DefaultWorldToonPointLight' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitDataAssetRecord, HitEffectType) == 0x000048, "Member 'FKoratEffectHitDataAssetRecord::HitEffectType' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitDataAssetRecord, SlashOverrideEffect) == 0x00004C, "Member 'FKoratEffectHitDataAssetRecord::SlashOverrideEffect' has a wrong offset!");

// ScriptStruct SS.KoratAiProbabilityTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAiProbabilityTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAiProbabilityTypeDataList) == 0x000004, "Wrong alignment on FKoratAiProbabilityTypeDataList");
static_assert(sizeof(FKoratAiProbabilityTypeDataList) == 0x000008, "Wrong size on FKoratAiProbabilityTypeDataList");
static_assert(offsetof(FKoratAiProbabilityTypeDataList, Key) == 0x000000, "Member 'FKoratAiProbabilityTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticMissionRequiredData
// 0x0220 (0x0220 - 0x0000)
struct FKoratDramaticMissionRequiredData final
{
public:
	struct FKoratBattleResult                     BattleResultData;                                  // 0x0000(0x0220)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticMissionRequiredData) == 0x000008, "Wrong alignment on FKoratDramaticMissionRequiredData");
static_assert(sizeof(FKoratDramaticMissionRequiredData) == 0x000220, "Wrong size on FKoratDramaticMissionRequiredData");
static_assert(offsetof(FKoratDramaticMissionRequiredData, BattleResultData) == 0x000000, "Member 'FKoratDramaticMissionRequiredData::BattleResultData' has a wrong offset!");

// ScriptStruct SS.KoratAiDefenseProbabilityTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAiDefenseProbabilityTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAiDefenseProbabilityTypeDataList) == 0x000004, "Wrong alignment on FKoratAiDefenseProbabilityTypeDataList");
static_assert(sizeof(FKoratAiDefenseProbabilityTypeDataList) == 0x000008, "Wrong size on FKoratAiDefenseProbabilityTypeDataList");
static_assert(offsetof(FKoratAiDefenseProbabilityTypeDataList, Key) == 0x000000, "Member 'FKoratAiDefenseProbabilityTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticDirectionTargetItemElement
// 0x0038 (0x0038 - 0x0000)
struct FKoratDramaticDirectionTargetItemElement final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ItemNameText;                                      // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticDirectionTargetItemElement) == 0x000008, "Wrong alignment on FKoratDramaticDirectionTargetItemElement");
static_assert(sizeof(FKoratDramaticDirectionTargetItemElement) == 0x000038, "Wrong size on FKoratDramaticDirectionTargetItemElement");
static_assert(offsetof(FKoratDramaticDirectionTargetItemElement, DisplayText) == 0x000000, "Member 'FKoratDramaticDirectionTargetItemElement::DisplayText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDirectionTargetItemElement, ItemNameText) == 0x000018, "Member 'FKoratDramaticDirectionTargetItemElement::ItemNameText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticDirectionTargetItemElement, OrderNum) == 0x000030, "Member 'FKoratDramaticDirectionTargetItemElement::OrderNum' has a wrong offset!");

// ScriptStruct SS.KoratAiBlastTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratAiBlastTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratAiBlastTypeDataList) == 0x000004, "Wrong alignment on FKoratAiBlastTypeDataList");
static_assert(sizeof(FKoratAiBlastTypeDataList) == 0x000008, "Wrong size on FKoratAiBlastTypeDataList");
static_assert(offsetof(FKoratAiBlastTypeDataList, Key) == 0x000000, "Member 'FKoratAiBlastTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSCutCameraBlendFactor
// 0x0160 (0x0160 - 0x0000)
struct FSSCutCameraBlendFactor final
{
public:
	struct FVector                                BlendLocation;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BlendRotation;                                     // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLookAtTracking;                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendLookAtTargetLocation;                         // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  BlendLookAtTargetRotation;                         // 0x0060(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendFocusTargetLocation;                          // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BlendFocusTargetRotation;                          // 0x00A0(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSAnimePersBlendFactor                AnimePersBlendFactor;                              // 0x00C0(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ShakeAssetID;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShakeForceType                               ShakeForceType;                                    // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalDisparityCamAddLengthTargetDistancePlayer; // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDisparityCamAddLengthTargetDistanceEnemy;  // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PhysicalDisparityCamAddHeightAssumptionHeightPlayer; // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PhysicalDisparityCamAddHeightAssumptionHeightEnemy; // 0x0148(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCutCameraBlendFactor) == 0x000010, "Wrong alignment on FSSCutCameraBlendFactor");
static_assert(sizeof(FSSCutCameraBlendFactor) == 0x000160, "Wrong size on FSSCutCameraBlendFactor");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendLocation) == 0x000000, "Member 'FSSCutCameraBlendFactor::BlendLocation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendRotation) == 0x000020, "Member 'FSSCutCameraBlendFactor::BlendRotation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, bEnableLookAtTracking) == 0x000040, "Member 'FSSCutCameraBlendFactor::bEnableLookAtTracking' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendLookAtTargetLocation) == 0x000048, "Member 'FSSCutCameraBlendFactor::BlendLookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendLookAtTargetRotation) == 0x000060, "Member 'FSSCutCameraBlendFactor::BlendLookAtTargetRotation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendFocusTargetLocation) == 0x000080, "Member 'FSSCutCameraBlendFactor::BlendFocusTargetLocation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, BlendFocusTargetRotation) == 0x0000A0, "Member 'FSSCutCameraBlendFactor::BlendFocusTargetRotation' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, AnimePersBlendFactor) == 0x0000C0, "Member 'FSSCutCameraBlendFactor::AnimePersBlendFactor' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, ShakeAssetID) == 0x000120, "Member 'FSSCutCameraBlendFactor::ShakeAssetID' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, ShakeForceType) == 0x000124, "Member 'FSSCutCameraBlendFactor::ShakeForceType' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, PhysicalDisparityCamAddLengthTargetDistancePlayer) == 0x000128, "Member 'FSSCutCameraBlendFactor::PhysicalDisparityCamAddLengthTargetDistancePlayer' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, PhysicalDisparityCamAddLengthTargetDistanceEnemy) == 0x00012C, "Member 'FSSCutCameraBlendFactor::PhysicalDisparityCamAddLengthTargetDistanceEnemy' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, PhysicalDisparityCamAddHeightAssumptionHeightPlayer) == 0x000130, "Member 'FSSCutCameraBlendFactor::PhysicalDisparityCamAddHeightAssumptionHeightPlayer' has a wrong offset!");
static_assert(offsetof(FSSCutCameraBlendFactor, PhysicalDisparityCamAddHeightAssumptionHeightEnemy) == 0x000148, "Member 'FSSCutCameraBlendFactor::PhysicalDisparityCamAddHeightAssumptionHeightEnemy' has a wrong offset!");

// ScriptStruct SS.KoratBattlePracticsMenuDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattlePracticsMenuDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattlePracticsMenuDataList) == 0x000004, "Wrong alignment on FKoratBattlePracticsMenuDataList");
static_assert(sizeof(FKoratBattlePracticsMenuDataList) == 0x000008, "Wrong size on FKoratBattlePracticsMenuDataList");
static_assert(offsetof(FKoratBattlePracticsMenuDataList, Key) == 0x000000, "Member 'FKoratBattlePracticsMenuDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSTeamTalkRollData
// 0x0010 (0x0010 - 0x0000)
struct FSSTeamTalkRollData final
{
public:
	TArray<struct FKoratCharacterDataList>        RollCharacters;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTeamTalkRollData) == 0x000008, "Wrong alignment on FSSTeamTalkRollData");
static_assert(sizeof(FSSTeamTalkRollData) == 0x000010, "Wrong size on FSSTeamTalkRollData");
static_assert(offsetof(FSSTeamTalkRollData, RollCharacters) == 0x000000, "Member 'FSSTeamTalkRollData::RollCharacters' has a wrong offset!");

// ScriptStruct SS.KoratEffectColorTypeReplaceDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectColorTypeReplaceDataAssetRecord final
{
public:
	struct FKoratCharacterEffectColorSetDataTypeDataList SrcType;                                           // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterEffectColorSetDataTypeDataList ReplacedType;                                      // 0x0018(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectColorTypeReplaceDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectColorTypeReplaceDataAssetRecord");
static_assert(sizeof(FKoratEffectColorTypeReplaceDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectColorTypeReplaceDataAssetRecord");
static_assert(offsetof(FKoratEffectColorTypeReplaceDataAssetRecord, SrcType) == 0x000000, "Member 'FKoratEffectColorTypeReplaceDataAssetRecord::SrcType' has a wrong offset!");
static_assert(offsetof(FKoratEffectColorTypeReplaceDataAssetRecord, ReplacedType) == 0x000018, "Member 'FKoratEffectColorTypeReplaceDataAssetRecord::ReplacedType' has a wrong offset!");

// ScriptStruct SS.KoratBattlePracticeStartPositionTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattlePracticeStartPositionTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattlePracticeStartPositionTypeDataList) == 0x000004, "Wrong alignment on FKoratBattlePracticeStartPositionTypeDataList");
static_assert(sizeof(FKoratBattlePracticeStartPositionTypeDataList) == 0x000008, "Wrong size on FKoratBattlePracticeStartPositionTypeDataList");
static_assert(offsetof(FKoratBattlePracticeStartPositionTypeDataList, Key) == 0x000000, "Member 'FKoratBattlePracticeStartPositionTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMissionLevelDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionLevelDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionLevelDataList) == 0x000004, "Wrong alignment on FKoratMissionLevelDataList");
static_assert(sizeof(FKoratMissionLevelDataList) == 0x000008, "Wrong size on FKoratMissionLevelDataList");
static_assert(offsetof(FKoratMissionLevelDataList, Key) == 0x000000, "Member 'FKoratMissionLevelDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord final
{
public:
	struct FKoratButtonGuideDataList              ButtonGuide;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord) == 0x000004, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord) == 0x000008, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord, ButtonGuide) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowButtonGuideDataAssetRecord::ButtonGuide' has a wrong offset!");

// ScriptStruct SS.KoratMythicalOrbDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMythicalOrbDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMythicalOrbDataList) == 0x000004, "Wrong alignment on FKoratMythicalOrbDataList");
static_assert(sizeof(FKoratMythicalOrbDataList) == 0x000008, "Wrong size on FKoratMythicalOrbDataList");
static_assert(offsetof(FKoratMythicalOrbDataList, Key) == 0x000000, "Member 'FKoratMythicalOrbDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMissionSortDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionSortDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionSortDataList) == 0x000004, "Wrong alignment on FKoratMissionSortDataList");
static_assert(sizeof(FKoratMissionSortDataList) == 0x000008, "Wrong size on FKoratMissionSortDataList");
static_assert(offsetof(FKoratMissionSortDataList, Key) == 0x000000, "Member 'FKoratMissionSortDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratRankMatchRankDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratRankMatchRankDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRankMatchRankDataList) == 0x000004, "Wrong alignment on FKoratRankMatchRankDataList");
static_assert(sizeof(FKoratRankMatchRankDataList) == 0x000008, "Wrong size on FKoratRankMatchRankDataList");
static_assert(offsetof(FKoratRankMatchRankDataList, Key) == 0x000000, "Member 'FKoratRankMatchRankDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleTrainingItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleTrainingItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTrainingItemDataList) == 0x000004, "Wrong alignment on FKoratBattleTrainingItemDataList");
static_assert(sizeof(FKoratBattleTrainingItemDataList) == 0x000008, "Wrong size on FKoratBattleTrainingItemDataList");
static_assert(offsetof(FKoratBattleTrainingItemDataList, Key) == 0x000000, "Member 'FKoratBattleTrainingItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBattleTrainingCommandDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBattleTrainingCommandDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleTrainingCommandDataList) == 0x000004, "Wrong alignment on FKoratBattleTrainingCommandDataList");
static_assert(sizeof(FKoratBattleTrainingCommandDataList) == 0x000008, "Wrong size on FKoratBattleTrainingCommandDataList");
static_assert(offsetof(FKoratBattleTrainingCommandDataList, Key) == 0x000000, "Member 'FKoratBattleTrainingCommandDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterFilterDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterFilterDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterFilterDataList) == 0x000004, "Wrong alignment on FKoratCharacterFilterDataList");
static_assert(sizeof(FKoratCharacterFilterDataList) == 0x000008, "Wrong size on FKoratCharacterFilterDataList");
static_assert(offsetof(FKoratCharacterFilterDataList, Key) == 0x000000, "Member 'FKoratCharacterFilterDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBannerDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBannerDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBannerDataList) == 0x000004, "Wrong alignment on FKoratBannerDataList");
static_assert(sizeof(FKoratBannerDataList) == 0x000008, "Wrong size on FKoratBannerDataList");
static_assert(offsetof(FKoratBannerDataList, Key) == 0x000000, "Member 'FKoratBannerDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratShopFloorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratShopFloorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratShopFloorDataList) == 0x000004, "Wrong alignment on FKoratShopFloorDataList");
static_assert(sizeof(FKoratShopFloorDataList) == 0x000008, "Wrong size on FKoratShopFloorDataList");
static_assert(offsetof(FKoratShopFloorDataList, Key) == 0x000000, "Member 'FKoratShopFloorDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratShopBaseItemDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratShopBaseItemDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratShopBaseItemDataList) == 0x000004, "Wrong alignment on FKoratShopBaseItemDataList");
static_assert(sizeof(FKoratShopBaseItemDataList) == 0x000008, "Wrong size on FKoratShopBaseItemDataList");
static_assert(offsetof(FKoratShopBaseItemDataList, Key) == 0x000000, "Member 'FKoratShopBaseItemDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratMissionTargetDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionTargetDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionTargetDataList) == 0x000004, "Wrong alignment on FKoratMissionTargetDataList");
static_assert(sizeof(FKoratMissionTargetDataList) == 0x000008, "Wrong size on FKoratMissionTargetDataList");
static_assert(offsetof(FKoratMissionTargetDataList, Key) == 0x000000, "Member 'FKoratMissionTargetDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratOperationGuideDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratOperationGuideDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOperationGuideDataList) == 0x000004, "Wrong alignment on FKoratOperationGuideDataList");
static_assert(sizeof(FKoratOperationGuideDataList) == 0x000008, "Wrong size on FKoratOperationGuideDataList");
static_assert(offsetof(FKoratOperationGuideDataList, Key) == 0x000000, "Member 'FKoratOperationGuideDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditLocatorDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditLocatorDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditLocatorDataList) == 0x000004, "Wrong alignment on FKoratDRMEditLocatorDataList");
static_assert(sizeof(FKoratDRMEditLocatorDataList) == 0x000008, "Wrong size on FKoratDRMEditLocatorDataList");
static_assert(offsetof(FKoratDRMEditLocatorDataList, Key) == 0x000000, "Member 'FKoratDRMEditLocatorDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditSentenceTextDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDRMEditSentenceTextDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditSentenceTextDataList) == 0x000004, "Wrong alignment on FKoratDRMEditSentenceTextDataList");
static_assert(sizeof(FKoratDRMEditSentenceTextDataList) == 0x000008, "Wrong size on FKoratDRMEditSentenceTextDataList");
static_assert(offsetof(FKoratDRMEditSentenceTextDataList, Key) == 0x000000, "Member 'FKoratDRMEditSentenceTextDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBulletKeyDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBulletKeyDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBulletKeyDataList) == 0x000004, "Wrong alignment on FKoratBulletKeyDataList");
static_assert(sizeof(FKoratBulletKeyDataList) == 0x000008, "Wrong size on FKoratBulletKeyDataList");
static_assert(offsetof(FKoratBulletKeyDataList, Key) == 0x000000, "Member 'FKoratBulletKeyDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratStampDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratStampDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratStampDataList) == 0x000004, "Wrong alignment on FKoratStampDataList");
static_assert(sizeof(FKoratStampDataList) == 0x000008, "Wrong size on FKoratStampDataList");
static_assert(offsetof(FKoratStampDataList, Key) == 0x000000, "Member 'FKoratStampDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratTextTitleDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratTextTitleDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTextTitleDataList) == 0x000004, "Wrong alignment on FKoratTextTitleDataList");
static_assert(sizeof(FKoratTextTitleDataList) == 0x000008, "Wrong size on FKoratTextTitleDataList");
static_assert(offsetof(FKoratTextTitleDataList, Key) == 0x000000, "Member 'FKoratTextTitleDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBuffFormTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBuffFormTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffFormTypeDataList) == 0x000004, "Wrong alignment on FKoratBuffFormTypeDataList");
static_assert(sizeof(FKoratBuffFormTypeDataList) == 0x000008, "Wrong size on FKoratBuffFormTypeDataList");
static_assert(offsetof(FKoratBuffFormTypeDataList, Key) == 0x000000, "Member 'FKoratBuffFormTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCutEditorFunctionParameterDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticBattleCutEditorFunctionParameterDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCutEditorFunctionParameterDataList) == 0x000004, "Wrong alignment on FKoratDramaticBattleCutEditorFunctionParameterDataList");
static_assert(sizeof(FKoratDramaticBattleCutEditorFunctionParameterDataList) == 0x000008, "Wrong size on FKoratDramaticBattleCutEditorFunctionParameterDataList");
static_assert(offsetof(FKoratDramaticBattleCutEditorFunctionParameterDataList, Key) == 0x000000, "Member 'FKoratDramaticBattleCutEditorFunctionParameterDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratCharacterGroupDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterGroupDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterGroupDataList) == 0x000004, "Wrong alignment on FKoratCharacterGroupDataList");
static_assert(sizeof(FKoratCharacterGroupDataList) == 0x000008, "Wrong size on FKoratCharacterGroupDataList");
static_assert(offsetof(FKoratCharacterGroupDataList, Key) == 0x000000, "Member 'FKoratCharacterGroupDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSFreeTournamentResDataAssetRecord
// 0x0050 (0x0050 - 0x0000)
struct FSSFreeTournamentResDataAssetRecord final
{
public:
	TMap<class FName, TSoftClassPtr<class UClass>> Resources;                                         // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSFreeTournamentResDataAssetRecord) == 0x000008, "Wrong alignment on FSSFreeTournamentResDataAssetRecord");
static_assert(sizeof(FSSFreeTournamentResDataAssetRecord) == 0x000050, "Wrong size on FSSFreeTournamentResDataAssetRecord");
static_assert(offsetof(FSSFreeTournamentResDataAssetRecord, Resources) == 0x000000, "Member 'FSSFreeTournamentResDataAssetRecord::Resources' has a wrong offset!");

// ScriptStruct SS.KoratBlastGroupOperationData
// 0x0100 (0x0100 - 0x0000)
struct FKoratBlastGroupOperationData final
{
public:
	class FText                                   Text_Ctrl_Tips;                                    // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text_Category_Tips;                                // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<EKoratOperationGuideCategoryIcon>      Text_Category_Icon;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_1;                               // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_2;                               // 0x0058(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_3;                               // 0x0070(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_S_4;                               // 0x0088(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_M_1;                               // 0x00A0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_M_2;                               // 0x00B8(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_L;                                 // 0x00D0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   WBP_OBJ_SL_Cell_XL;                                // 0x00E8(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBlastGroupOperationData) == 0x000008, "Wrong alignment on FKoratBlastGroupOperationData");
static_assert(sizeof(FKoratBlastGroupOperationData) == 0x000100, "Wrong size on FKoratBlastGroupOperationData");
static_assert(offsetof(FKoratBlastGroupOperationData, Text_Ctrl_Tips) == 0x000000, "Member 'FKoratBlastGroupOperationData::Text_Ctrl_Tips' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, Text_Category_Tips) == 0x000018, "Member 'FKoratBlastGroupOperationData::Text_Category_Tips' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, Text_Category_Icon) == 0x000030, "Member 'FKoratBlastGroupOperationData::Text_Category_Icon' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_S_1) == 0x000040, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_S_1' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_S_2) == 0x000058, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_S_2' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_S_3) == 0x000070, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_S_3' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_S_4) == 0x000088, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_S_4' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_M_1) == 0x0000A0, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_M_1' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_M_2) == 0x0000B8, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_M_2' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_L) == 0x0000D0, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_L' has a wrong offset!");
static_assert(offsetof(FKoratBlastGroupOperationData, WBP_OBJ_SL_Cell_XL) == 0x0000E8, "Member 'FKoratBlastGroupOperationData::WBP_OBJ_SL_Cell_XL' has a wrong offset!");

// ScriptStruct SS.KoratRewardLotteryDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratRewardLotteryDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRewardLotteryDataList) == 0x000004, "Wrong alignment on FKoratRewardLotteryDataList");
static_assert(sizeof(FKoratRewardLotteryDataList) == 0x000008, "Wrong size on FKoratRewardLotteryDataList");
static_assert(offsetof(FKoratRewardLotteryDataList, Key) == 0x000000, "Member 'FKoratRewardLotteryDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratEditPartsImageDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratEditPartsImageDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEditPartsImageDataList) == 0x000004, "Wrong alignment on FKoratEditPartsImageDataList");
static_assert(sizeof(FKoratEditPartsImageDataList) == 0x000008, "Wrong size on FKoratEditPartsImageDataList");
static_assert(offsetof(FKoratEditPartsImageDataList, Key) == 0x000000, "Member 'FKoratEditPartsImageDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratChainPlaySoundDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratChainPlaySoundDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratChainPlaySoundDataList) == 0x000004, "Wrong alignment on FKoratChainPlaySoundDataList");
static_assert(sizeof(FKoratChainPlaySoundDataList) == 0x000008, "Wrong size on FKoratChainPlaySoundDataList");
static_assert(offsetof(FKoratChainPlaySoundDataList, Key) == 0x000000, "Member 'FKoratChainPlaySoundDataList::Key' has a wrong offset!");

// ScriptStruct SS.SSGalleryPictureBookGatheringLineRecord
// 0x0020 (0x0020 - 0x0000)
struct FSSGalleryPictureBookGatheringLineRecord final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LineText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGalleryPictureBookGatheringLineRecord) == 0x000008, "Wrong alignment on FSSGalleryPictureBookGatheringLineRecord");
static_assert(sizeof(FSSGalleryPictureBookGatheringLineRecord) == 0x000020, "Wrong size on FSSGalleryPictureBookGatheringLineRecord");
static_assert(offsetof(FSSGalleryPictureBookGatheringLineRecord, Character) == 0x000000, "Member 'FSSGalleryPictureBookGatheringLineRecord::Character' has a wrong offset!");
static_assert(offsetof(FSSGalleryPictureBookGatheringLineRecord, LineText) == 0x000008, "Member 'FSSGalleryPictureBookGatheringLineRecord::LineText' has a wrong offset!");

// ScriptStruct SS.KoratVelocityLineEffectTypeDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratVelocityLineEffectTypeDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVelocityLineEffectTypeDataList) == 0x000004, "Wrong alignment on FKoratVelocityLineEffectTypeDataList");
static_assert(sizeof(FKoratVelocityLineEffectTypeDataList) == 0x000008, "Wrong size on FKoratVelocityLineEffectTypeDataList");
static_assert(offsetof(FKoratVelocityLineEffectTypeDataList, Key) == 0x000000, "Member 'FKoratVelocityLineEffectTypeDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratBuffCategoryDataList
// 0x0008 (0x0008 - 0x0000)
struct FKoratBuffCategoryDataList final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffCategoryDataList) == 0x000004, "Wrong alignment on FKoratBuffCategoryDataList");
static_assert(sizeof(FKoratBuffCategoryDataList) == 0x000008, "Wrong size on FKoratBuffCategoryDataList");
static_assert(offsetof(FKoratBuffCategoryDataList, Key) == 0x000000, "Member 'FKoratBuffCategoryDataList::Key' has a wrong offset!");

// ScriptStruct SS.KoratDestructionEffectTypeData
// 0x0004 (0x0004 - 0x0000)
struct FKoratDestructionEffectTypeData final
{
public:
	EKoratDestructionEffectType                   EffectType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDestructionEffectType                   LowSpecEffectType;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDestructionSEType                       SEType;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDestructionSEType                       LowSpecSEType;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionEffectTypeData) == 0x000001, "Wrong alignment on FKoratDestructionEffectTypeData");
static_assert(sizeof(FKoratDestructionEffectTypeData) == 0x000004, "Wrong size on FKoratDestructionEffectTypeData");
static_assert(offsetof(FKoratDestructionEffectTypeData, EffectType) == 0x000000, "Member 'FKoratDestructionEffectTypeData::EffectType' has a wrong offset!");
static_assert(offsetof(FKoratDestructionEffectTypeData, LowSpecEffectType) == 0x000001, "Member 'FKoratDestructionEffectTypeData::LowSpecEffectType' has a wrong offset!");
static_assert(offsetof(FKoratDestructionEffectTypeData, SEType) == 0x000002, "Member 'FKoratDestructionEffectTypeData::SEType' has a wrong offset!");
static_assert(offsetof(FKoratDestructionEffectTypeData, LowSpecSEType) == 0x000003, "Member 'FKoratDestructionEffectTypeData::LowSpecSEType' has a wrong offset!");

// ScriptStruct SS.KoratDestructionLowSpecOption
// 0x0008 (0x0008 - 0x0000)
struct FKoratDestructionLowSpecOption final
{
public:
	bool                                          bEnableSimulationPhysics;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSwitchGeometryCollection;                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GCAlternativeFadeDefaultTimeSec;                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDestructionLowSpecOption) == 0x000004, "Wrong alignment on FKoratDestructionLowSpecOption");
static_assert(sizeof(FKoratDestructionLowSpecOption) == 0x000008, "Wrong size on FKoratDestructionLowSpecOption");
static_assert(offsetof(FKoratDestructionLowSpecOption, bEnableSimulationPhysics) == 0x000000, "Member 'FKoratDestructionLowSpecOption::bEnableSimulationPhysics' has a wrong offset!");
static_assert(offsetof(FKoratDestructionLowSpecOption, bEnableSwitchGeometryCollection) == 0x000001, "Member 'FKoratDestructionLowSpecOption::bEnableSwitchGeometryCollection' has a wrong offset!");
static_assert(offsetof(FKoratDestructionLowSpecOption, GCAlternativeFadeDefaultTimeSec) == 0x000004, "Member 'FKoratDestructionLowSpecOption::GCAlternativeFadeDefaultTimeSec' has a wrong offset!");

// ScriptStruct SS.SSWLibSideButtonTopElement
// 0x0018 (0x0018 - 0x0000)
struct FSSWLibSideButtonTopElement final
{
public:
	ESSWLibSideButtonType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESSWLibSideButtonType>                 Childs;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWLibSideButtonTopElement) == 0x000008, "Wrong alignment on FSSWLibSideButtonTopElement");
static_assert(sizeof(FSSWLibSideButtonTopElement) == 0x000018, "Wrong size on FSSWLibSideButtonTopElement");
static_assert(offsetof(FSSWLibSideButtonTopElement, Type) == 0x000000, "Member 'FSSWLibSideButtonTopElement::Type' has a wrong offset!");
static_assert(offsetof(FSSWLibSideButtonTopElement, Childs) == 0x000008, "Member 'FSSWLibSideButtonTopElement::Childs' has a wrong offset!");

// ScriptStruct SS.KoratDramaticCommonTextures
// 0x00E0 (0x00E0 - 0x0000)
struct FKoratDramaticCommonTextures final
{
public:
	TSoftObjectPtr<class UTexture2D>              EditImageForAdd;                                   // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EditImageForDisableAdd;                            // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EditImageForUnset;                                 // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EKortaDramticBattleCategory, TSoftObjectPtr<class UTexture2D>> ExtraCategoryIconImages;                           // 0x0090(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticCommonTextures) == 0x000008, "Wrong alignment on FKoratDramaticCommonTextures");
static_assert(sizeof(FKoratDramaticCommonTextures) == 0x0000E0, "Wrong size on FKoratDramaticCommonTextures");
static_assert(offsetof(FKoratDramaticCommonTextures, EditImageForAdd) == 0x000000, "Member 'FKoratDramaticCommonTextures::EditImageForAdd' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCommonTextures, EditImageForDisableAdd) == 0x000030, "Member 'FKoratDramaticCommonTextures::EditImageForDisableAdd' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCommonTextures, EditImageForUnset) == 0x000060, "Member 'FKoratDramaticCommonTextures::EditImageForUnset' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCommonTextures, ExtraCategoryIconImages) == 0x000090, "Member 'FKoratDramaticCommonTextures::ExtraCategoryIconImages' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertDirectionTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertDirectionTextData final
{
public:
	EKoratDramaticDirectionrListItem              InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertDirectionTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertDirectionTextData");
static_assert(sizeof(FKoraDramaticInsertDirectionTextData) == 0x000040, "Wrong size on FKoraDramaticInsertDirectionTextData");
static_assert(offsetof(FKoraDramaticInsertDirectionTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertDirectionTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertDirectionTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertDirectionTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.SSTermsData
// 0x0001 (0x0001 - 0x0000)
struct FSSTermsData final
{
public:
	EKoratTermsMode                               TermsMode;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTermsData) == 0x000001, "Wrong alignment on FSSTermsData");
static_assert(sizeof(FSSTermsData) == 0x000001, "Wrong size on FSSTermsData");
static_assert(offsetof(FSSTermsData, TermsMode) == 0x000000, "Member 'FSSTermsData::TermsMode' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertConditionsActionTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertConditionsActionTextData final
{
public:
	EKoratBattleDirectingAction                   InsertItemName;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertConditionsActionTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertConditionsActionTextData");
static_assert(sizeof(FKoraDramaticInsertConditionsActionTextData) == 0x000040, "Wrong size on FKoraDramaticInsertConditionsActionTextData");
static_assert(offsetof(FKoraDramaticInsertConditionsActionTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertConditionsActionTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertConditionsActionTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertConditionsActionTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.KoraDramaticInsertZItemTextData
// 0x0040 (0x0040 - 0x0000)
struct FKoraDramaticInsertZItemTextData final
{
public:
	struct FKoratCharacterItemDataList            InsertItemName;                                    // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticDirectionItemListElement InsertText;                                        // 0x0008(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoraDramaticInsertZItemTextData) == 0x000008, "Wrong alignment on FKoraDramaticInsertZItemTextData");
static_assert(sizeof(FKoraDramaticInsertZItemTextData) == 0x000040, "Wrong size on FKoraDramaticInsertZItemTextData");
static_assert(offsetof(FKoraDramaticInsertZItemTextData, InsertItemName) == 0x000000, "Member 'FKoraDramaticInsertZItemTextData::InsertItemName' has a wrong offset!");
static_assert(offsetof(FKoraDramaticInsertZItemTextData, InsertText) == 0x000008, "Member 'FKoraDramaticInsertZItemTextData::InsertText' has a wrong offset!");

// ScriptStruct SS.SSNotifyText
// 0x0088 (0x0088 - 0x0000)
struct FSSNotifyText final
{
public:
	ENotifyTextTranslationMode                    TextTranslationMode;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Literal;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntValues;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatValues;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           NestTexts;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratMissionDataList                  MissionId;                                         // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           NaturalTexts;                                      // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   KoratDataListKey;                                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSNotifyText) == 0x000008, "Wrong alignment on FSSNotifyText");
static_assert(sizeof(FSSNotifyText) == 0x000088, "Wrong size on FSSNotifyText");
static_assert(offsetof(FSSNotifyText, TextTranslationMode) == 0x000000, "Member 'FSSNotifyText::TextTranslationMode' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, Literal) == 0x000008, "Member 'FSSNotifyText::Literal' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, Namespace) == 0x000018, "Member 'FSSNotifyText::Namespace' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, Key) == 0x000028, "Member 'FSSNotifyText::Key' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, IntValues) == 0x000038, "Member 'FSSNotifyText::IntValues' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, FloatValues) == 0x000048, "Member 'FSSNotifyText::FloatValues' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, NestTexts) == 0x000058, "Member 'FSSNotifyText::NestTexts' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, MissionId) == 0x000068, "Member 'FSSNotifyText::MissionId' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, NaturalTexts) == 0x000070, "Member 'FSSNotifyText::NaturalTexts' has a wrong offset!");
static_assert(offsetof(FSSNotifyText, KoratDataListKey) == 0x000080, "Member 'FSSNotifyText::KoratDataListKey' has a wrong offset!");

// ScriptStruct SS.SSNotificationData
// 0x0120 (0x0120 - 0x0000)
struct FSSNotificationData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratNotificationDataList             NotificationDataList;                              // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              ReplaceText;                                       // 0x0018(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationTiming                           OverrideTiming;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSSNotifyText>     TitleReplaceTexts;                                 // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FSSNotifyText>     BodyReplaceTexts;                                  // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSNotificationData) == 0x000008, "Wrong alignment on FSSNotificationData");
static_assert(sizeof(FSSNotificationData) == 0x000120, "Wrong size on FSSNotificationData");
static_assert(offsetof(FSSNotificationData, NotificationDataList) == 0x000010, "Member 'FSSNotificationData::NotificationDataList' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, ReplaceText) == 0x000018, "Member 'FSSNotificationData::ReplaceText' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, Priority) == 0x000068, "Member 'FSSNotificationData::Priority' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, DisplayTime) == 0x00006C, "Member 'FSSNotificationData::DisplayTime' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, OverrideTiming) == 0x000070, "Member 'FSSNotificationData::OverrideTiming' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, TitleReplaceTexts) == 0x000078, "Member 'FSSNotificationData::TitleReplaceTexts' has a wrong offset!");
static_assert(offsetof(FSSNotificationData, BodyReplaceTexts) == 0x0000C8, "Member 'FSSNotificationData::BodyReplaceTexts' has a wrong offset!");

// ScriptStruct SS.KoratDRMEditInvisibleParticle
// 0x0058 (0x0058 - 0x0000)
struct FKoratDRMEditInvisibleParticle final
{
public:
	bool                                          bAllEmitters;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             EmitterNames;                                      // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDRMEditInvisibleParticle) == 0x000008, "Wrong alignment on FKoratDRMEditInvisibleParticle");
static_assert(sizeof(FKoratDRMEditInvisibleParticle) == 0x000058, "Wrong size on FKoratDRMEditInvisibleParticle");
static_assert(offsetof(FKoratDRMEditInvisibleParticle, bAllEmitters) == 0x000000, "Member 'FKoratDRMEditInvisibleParticle::bAllEmitters' has a wrong offset!");
static_assert(offsetof(FKoratDRMEditInvisibleParticle, EmitterNames) == 0x000008, "Member 'FKoratDRMEditInvisibleParticle::EmitterNames' has a wrong offset!");

// ScriptStruct SS.SSReplayUIPlayInfo
// 0x0018 (0x0018 - 0x0000)
struct FSSReplayUIPlayInfo final
{
public:
	struct FDateTime                              ElapsedTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PlaybackTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayProgressBar;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSReplayUIPlayState                          PlayState;                                         // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSReplayUICamera                             PlayCamera;                                        // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSReplayUIPlayInfo) == 0x000008, "Wrong alignment on FSSReplayUIPlayInfo");
static_assert(sizeof(FSSReplayUIPlayInfo) == 0x000018, "Wrong size on FSSReplayUIPlayInfo");
static_assert(offsetof(FSSReplayUIPlayInfo, ElapsedTime) == 0x000000, "Member 'FSSReplayUIPlayInfo::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FSSReplayUIPlayInfo, PlaybackTime) == 0x000008, "Member 'FSSReplayUIPlayInfo::PlaybackTime' has a wrong offset!");
static_assert(offsetof(FSSReplayUIPlayInfo, PlayProgressBar) == 0x000010, "Member 'FSSReplayUIPlayInfo::PlayProgressBar' has a wrong offset!");
static_assert(offsetof(FSSReplayUIPlayInfo, PlayState) == 0x000014, "Member 'FSSReplayUIPlayInfo::PlayState' has a wrong offset!");
static_assert(offsetof(FSSReplayUIPlayInfo, PlayCamera) == 0x000015, "Member 'FSSReplayUIPlayInfo::PlayCamera' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbBrkDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectAtbBrkDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectAtbBrkDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectAtbBrkDataAssetRecord");
static_assert(sizeof(FKoratEffectAtbBrkDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectAtbBrkDataAssetRecord");
static_assert(offsetof(FKoratEffectAtbBrkDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectAtbBrkDataAssetRecord::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratEffectAtbTypeDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratEffectAtbTypeDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectAtbTypeDataAssetRecord) == 0x000001, "Wrong alignment on FKoratEffectAtbTypeDataAssetRecord");
static_assert(sizeof(FKoratEffectAtbTypeDataAssetRecord) == 0x000001, "Wrong size on FKoratEffectAtbTypeDataAssetRecord");

// ScriptStruct SS.KoratEffectBulletKnockDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratEffectBulletKnockDataAssetRecord final
{
public:
	struct FKoratEffectInteractNiagaraTypeDataList NiagaraType;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       ScaleRandom;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SoundId;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBulletKnockDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectBulletKnockDataAssetRecord");
static_assert(sizeof(FKoratEffectBulletKnockDataAssetRecord) == 0x000028, "Wrong size on FKoratEffectBulletKnockDataAssetRecord");
static_assert(offsetof(FKoratEffectBulletKnockDataAssetRecord, NiagaraType) == 0x000000, "Member 'FKoratEffectBulletKnockDataAssetRecord::NiagaraType' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletKnockDataAssetRecord, ScaleRandom) == 0x000018, "Member 'FKoratEffectBulletKnockDataAssetRecord::ScaleRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletKnockDataAssetRecord, SoundId) == 0x000020, "Member 'FKoratEffectBulletKnockDataAssetRecord::SoundId' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratEffectBulletRatParameter final
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalScale;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       DecalScaleRandom;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       DecalRotationRandom;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DecalSoundId;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectInteractNiagaraTypeDataList KnockNiagaraType;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatRandomValue       KnockScaleRandom;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         KnockSoundId;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectBulletRatLineTraceParam    LineTraceParam;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnDistance;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatExistLimitParam   ExistLimitParam;                                   // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectBulletRatParameter) == 0x000008, "Wrong alignment on FKoratEffectBulletRatParameter");
static_assert(sizeof(FKoratEffectBulletRatParameter) == 0x0000A0, "Wrong size on FKoratEffectBulletRatParameter");
static_assert(offsetof(FKoratEffectBulletRatParameter, DecalMaterial) == 0x000000, "Member 'FKoratEffectBulletRatParameter::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, DecalScale) == 0x000008, "Member 'FKoratEffectBulletRatParameter::DecalScale' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, DecalScaleRandom) == 0x000020, "Member 'FKoratEffectBulletRatParameter::DecalScaleRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, DecalRotationRandom) == 0x000028, "Member 'FKoratEffectBulletRatParameter::DecalRotationRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, DecalSoundId) == 0x000030, "Member 'FKoratEffectBulletRatParameter::DecalSoundId' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, KnockNiagaraType) == 0x000038, "Member 'FKoratEffectBulletRatParameter::KnockNiagaraType' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, KnockScaleRandom) == 0x000050, "Member 'FKoratEffectBulletRatParameter::KnockScaleRandom' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, KnockSoundId) == 0x000058, "Member 'FKoratEffectBulletRatParameter::KnockSoundId' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, LineTraceParam) == 0x000060, "Member 'FKoratEffectBulletRatParameter::LineTraceParam' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, SpawnDistance) == 0x000090, "Member 'FKoratEffectBulletRatParameter::SpawnDistance' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatParameter, ExistLimitParam) == 0x000094, "Member 'FKoratEffectBulletRatParameter::ExistLimitParam' has a wrong offset!");

// ScriptStruct SS.KoratEffectBulletRatDecalSpawnNumFactor
// 0x0008 (0x0008 - 0x0000)
struct FKoratEffectBulletRatDecalSpawnNumFactor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectBulletRatDecalSpawnNumFactor) == 0x000004, "Wrong alignment on FKoratEffectBulletRatDecalSpawnNumFactor");
static_assert(sizeof(FKoratEffectBulletRatDecalSpawnNumFactor) == 0x000008, "Wrong size on FKoratEffectBulletRatDecalSpawnNumFactor");
static_assert(offsetof(FKoratEffectBulletRatDecalSpawnNumFactor, bEnable) == 0x000000, "Member 'FKoratEffectBulletRatDecalSpawnNumFactor::bEnable' has a wrong offset!");
static_assert(offsetof(FKoratEffectBulletRatDecalSpawnNumFactor, Value) == 0x000004, "Member 'FKoratEffectBulletRatDecalSpawnNumFactor::Value' has a wrong offset!");

// ScriptStruct SS.KoratEffectDrownOutDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectDrownOutDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          DrownOutLevelSequence;                             // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectDrownOutDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectDrownOutDataAssetRecord");
static_assert(sizeof(FKoratEffectDrownOutDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectDrownOutDataAssetRecord");
static_assert(offsetof(FKoratEffectDrownOutDataAssetRecord, DrownOutLevelSequence) == 0x000000, "Member 'FKoratEffectDrownOutDataAssetRecord::DrownOutLevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratEffectFigureTransformTypeDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratEffectFigureTransformTypeDataAssetRecord final
{
public:
	TArray<class FName>                           EffectTypes;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectFigureTransformTypeDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectFigureTransformTypeDataAssetRecord");
static_assert(sizeof(FKoratEffectFigureTransformTypeDataAssetRecord) == 0x000010, "Wrong size on FKoratEffectFigureTransformTypeDataAssetRecord");
static_assert(offsetof(FKoratEffectFigureTransformTypeDataAssetRecord, EffectTypes) == 0x000000, "Member 'FKoratEffectFigureTransformTypeDataAssetRecord::EffectTypes' has a wrong offset!");

// ScriptStruct SS.KoratEffectHitAirWallDataAssetRecord
// 0x00F0 (0x00F0 - 0x0000)
struct FKoratEffectHitAirWallDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultScaleParam;                             // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectHitAirWallScaleParam       ScaleParam;                                        // 0x0038(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectHitAirWallDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectHitAirWallDataAssetRecord");
static_assert(sizeof(FKoratEffectHitAirWallDataAssetRecord) == 0x0000F0, "Wrong size on FKoratEffectHitAirWallDataAssetRecord");
static_assert(offsetof(FKoratEffectHitAirWallDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectHitAirWallDataAssetRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallDataAssetRecord, bUseDefaultScaleParam) == 0x000030, "Member 'FKoratEffectHitAirWallDataAssetRecord::bUseDefaultScaleParam' has a wrong offset!");
static_assert(offsetof(FKoratEffectHitAirWallDataAssetRecord, ScaleParam) == 0x000038, "Member 'FKoratEffectHitAirWallDataAssetRecord::ScaleParam' has a wrong offset!");

// ScriptStruct SS.KoratPhysicalMatEffectKeyNameHitResult
// 0x0020 (0x0020 - 0x0000)
struct FKoratPhysicalMatEffectKeyNameHitResult final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalType;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffectMapAttribute;                                // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPhysicalMatEffectKeyNameHitResult) == 0x000008, "Wrong alignment on FKoratPhysicalMatEffectKeyNameHitResult");
static_assert(sizeof(FKoratPhysicalMatEffectKeyNameHitResult) == 0x000020, "Wrong size on FKoratPhysicalMatEffectKeyNameHitResult");
static_assert(offsetof(FKoratPhysicalMatEffectKeyNameHitResult, ActorName) == 0x000000, "Member 'FKoratPhysicalMatEffectKeyNameHitResult::ActorName' has a wrong offset!");
static_assert(offsetof(FKoratPhysicalMatEffectKeyNameHitResult, PhysicalType) == 0x000010, "Member 'FKoratPhysicalMatEffectKeyNameHitResult::PhysicalType' has a wrong offset!");
static_assert(offsetof(FKoratPhysicalMatEffectKeyNameHitResult, EffectMapAttribute) == 0x000014, "Member 'FKoratPhysicalMatEffectKeyNameHitResult::EffectMapAttribute' has a wrong offset!");

// ScriptStruct SS.KoratEffectMatParamNameDataAssetRecord
// 0x000C (0x000C - 0x0000)
struct FKoratEffectMatParamNameDataAssetRecord final
{
public:
	class FName                                   OffsetVName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectMatParamNameDataAssetRecord) == 0x000004, "Wrong alignment on FKoratEffectMatParamNameDataAssetRecord");
static_assert(sizeof(FKoratEffectMatParamNameDataAssetRecord) == 0x00000C, "Wrong size on FKoratEffectMatParamNameDataAssetRecord");
static_assert(offsetof(FKoratEffectMatParamNameDataAssetRecord, OffsetVName) == 0x000000, "Member 'FKoratEffectMatParamNameDataAssetRecord::OffsetVName' has a wrong offset!");
static_assert(offsetof(FKoratEffectMatParamNameDataAssetRecord, SortId) == 0x000008, "Member 'FKoratEffectMatParamNameDataAssetRecord::SortId' has a wrong offset!");

// ScriptStruct SS.KoratEffectSpaceAreaDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FKoratEffectSpaceAreaDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectSpaceAreaDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectSpaceAreaDataAssetRecord");
static_assert(sizeof(FKoratEffectSpaceAreaDataAssetRecord) == 0x000030, "Wrong size on FKoratEffectSpaceAreaDataAssetRecord");
static_assert(offsetof(FKoratEffectSpaceAreaDataAssetRecord, LevelSequence) == 0x000000, "Member 'FKoratEffectSpaceAreaDataAssetRecord::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratEffectWindVelocity
// 0x0048 (0x0048 - 0x0000)
struct FKoratEffectWindVelocity final
{
public:
	struct FVector                                Low;                                               // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Mid;                                               // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                High;                                              // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectWindVelocity) == 0x000008, "Wrong alignment on FKoratEffectWindVelocity");
static_assert(sizeof(FKoratEffectWindVelocity) == 0x000048, "Wrong size on FKoratEffectWindVelocity");
static_assert(offsetof(FKoratEffectWindVelocity, Low) == 0x000000, "Member 'FKoratEffectWindVelocity::Low' has a wrong offset!");
static_assert(offsetof(FKoratEffectWindVelocity, Mid) == 0x000018, "Member 'FKoratEffectWindVelocity::Mid' has a wrong offset!");
static_assert(offsetof(FKoratEffectWindVelocity, High) == 0x000030, "Member 'FKoratEffectWindVelocity::High' has a wrong offset!");

// ScriptStruct SS.KoratEventSceneMenuSequenceDataRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratEventSceneMenuSequenceDataRecord final
{
public:
	class ULevelSequence*                         Sequence;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEventSceneMenuSequenceDataRecord) == 0x000008, "Wrong alignment on FKoratEventSceneMenuSequenceDataRecord");
static_assert(sizeof(FKoratEventSceneMenuSequenceDataRecord) == 0x000008, "Wrong size on FKoratEventSceneMenuSequenceDataRecord");
static_assert(offsetof(FKoratEventSceneMenuSequenceDataRecord, Sequence) == 0x000000, "Member 'FKoratEventSceneMenuSequenceDataRecord::Sequence' has a wrong offset!");

// ScriptStruct SS.KoratSequenceLabelParametersArray
// 0x0010 (0x0010 - 0x0000)
struct FKoratSequenceLabelParametersArray final
{
public:
	TArray<struct FKoratSequencePlayInfo>         Params;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSequenceLabelParametersArray) == 0x000008, "Wrong alignment on FKoratSequenceLabelParametersArray");
static_assert(sizeof(FKoratSequenceLabelParametersArray) == 0x000010, "Wrong size on FKoratSequenceLabelParametersArray");
static_assert(offsetof(FKoratSequenceLabelParametersArray, Params) == 0x000000, "Member 'FKoratSequenceLabelParametersArray::Params' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTypeDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratFreeTimelineTypeDataAssetRecord final
{
public:
	class FName                                   EffectKeyName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TestValue;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFreeTimelineTypeDataAssetRecord) == 0x000004, "Wrong alignment on FKoratFreeTimelineTypeDataAssetRecord");
static_assert(sizeof(FKoratFreeTimelineTypeDataAssetRecord) == 0x000010, "Wrong size on FKoratFreeTimelineTypeDataAssetRecord");
static_assert(offsetof(FKoratFreeTimelineTypeDataAssetRecord, EffectKeyName) == 0x000000, "Member 'FKoratFreeTimelineTypeDataAssetRecord::EffectKeyName' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineTypeDataAssetRecord, TestValue) == 0x000008, "Member 'FKoratFreeTimelineTypeDataAssetRecord::TestValue' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineTypeSettingRecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratFreeTimelineTypeSettingRecord final
{
public:
	struct FKoratFreeTimelineTypeSetting          BattleSetting;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratFreeTimelineTypeSetting          EventSetting;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratFreeTimelineTypeSettingRecord) == 0x000008, "Wrong alignment on FKoratFreeTimelineTypeSettingRecord");
static_assert(sizeof(FKoratFreeTimelineTypeSettingRecord) == 0x000050, "Wrong size on FKoratFreeTimelineTypeSettingRecord");
static_assert(offsetof(FKoratFreeTimelineTypeSettingRecord, BattleSetting) == 0x000000, "Member 'FKoratFreeTimelineTypeSettingRecord::BattleSetting' has a wrong offset!");
static_assert(offsetof(FKoratFreeTimelineTypeSettingRecord, EventSetting) == 0x000028, "Member 'FKoratFreeTimelineTypeSettingRecord::EventSetting' has a wrong offset!");

// ScriptStruct SS.KoratGroupIdDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratGroupIdDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratGroupIdDataAssetRecord) == 0x000001, "Wrong alignment on FKoratGroupIdDataAssetRecord");
static_assert(sizeof(FKoratGroupIdDataAssetRecord) == 0x000001, "Wrong size on FKoratGroupIdDataAssetRecord");

// ScriptStruct SS.KoratHitObjectParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FKoratHitObjectParameter final
{
public:
	bool                                          bColorSetIsValid;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterEffectColorSetData      ColorSet;                                          // 0x0008(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Explosion;                                         // 0x0010(0x00D0)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratHitObjectParameter) == 0x000008, "Wrong alignment on FKoratHitObjectParameter");
static_assert(sizeof(FKoratHitObjectParameter) == 0x0000E0, "Wrong size on FKoratHitObjectParameter");
static_assert(offsetof(FKoratHitObjectParameter, bColorSetIsValid) == 0x000000, "Member 'FKoratHitObjectParameter::bColorSetIsValid' has a wrong offset!");
static_assert(offsetof(FKoratHitObjectParameter, ColorSet) == 0x000008, "Member 'FKoratHitObjectParameter::ColorSet' has a wrong offset!");
static_assert(offsetof(FKoratHitObjectParameter, Explosion) == 0x000010, "Member 'FKoratHitObjectParameter::Explosion' has a wrong offset!");

// ScriptStruct SS.SSMatchingCondProp
// 0x0050 (0x0050 - 0x0000)
struct FSSMatchingCondProp final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMatchingCondPropValueType                    ValueType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumericValue;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMatchingCondProp) == 0x000008, "Wrong alignment on FSSMatchingCondProp");
static_assert(sizeof(FSSMatchingCondProp) == 0x000050, "Wrong size on FSSMatchingCondProp");
static_assert(offsetof(FSSMatchingCondProp, Label) == 0x000000, "Member 'FSSMatchingCondProp::Label' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondProp, ValueType) == 0x000018, "Member 'FSSMatchingCondProp::ValueType' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondProp, NumericValue) == 0x00001C, "Member 'FSSMatchingCondProp::NumericValue' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondProp, StringValue) == 0x000020, "Member 'FSSMatchingCondProp::StringValue' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondProp, GuideText) == 0x000030, "Member 'FSSMatchingCondProp::GuideText' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondProp, bDefault) == 0x000048, "Member 'FSSMatchingCondProp::bDefault' has a wrong offset!");

// ScriptStruct SS.KoratDecalMaterialDataRecord
// 0x0090 (0x0090 - 0x0000)
struct FKoratDecalMaterialDataRecord final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material_Small;                                    // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Material_Middle;                                   // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Material_Learge;                                   // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDecalMaterialDataRecord) == 0x000008, "Wrong alignment on FKoratDecalMaterialDataRecord");
static_assert(sizeof(FKoratDecalMaterialDataRecord) == 0x000090, "Wrong size on FKoratDecalMaterialDataRecord");
static_assert(offsetof(FKoratDecalMaterialDataRecord, Material_Small) == 0x000000, "Member 'FKoratDecalMaterialDataRecord::Material_Small' has a wrong offset!");
static_assert(offsetof(FKoratDecalMaterialDataRecord, Material_Middle) == 0x000030, "Member 'FKoratDecalMaterialDataRecord::Material_Middle' has a wrong offset!");
static_assert(offsetof(FKoratDecalMaterialDataRecord, Material_Learge) == 0x000060, "Member 'FKoratDecalMaterialDataRecord::Material_Learge' has a wrong offset!");

// ScriptStruct SS.KoratFreeTimelineOverlapCompInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FKoratFreeTimelineOverlapCompInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratFreeTimelineOverlapCompInfo) == 0x000004, "Wrong alignment on FKoratFreeTimelineOverlapCompInfo");
static_assert(sizeof(FKoratFreeTimelineOverlapCompInfo) == 0x000020, "Wrong size on FKoratFreeTimelineOverlapCompInfo");

// ScriptStruct SS.KoratInteractAtbResourcesAssetRecord
// 0x0040 (0x0040 - 0x0000)
struct FKoratInteractAtbResourcesAssetRecord final
{
public:
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialList;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     StaticMeshList;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   SkeletalMeshList;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UParticleSystem>> ParticleList;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractAtbResourcesAssetRecord) == 0x000008, "Wrong alignment on FKoratInteractAtbResourcesAssetRecord");
static_assert(sizeof(FKoratInteractAtbResourcesAssetRecord) == 0x000040, "Wrong size on FKoratInteractAtbResourcesAssetRecord");
static_assert(offsetof(FKoratInteractAtbResourcesAssetRecord, MaterialList) == 0x000000, "Member 'FKoratInteractAtbResourcesAssetRecord::MaterialList' has a wrong offset!");
static_assert(offsetof(FKoratInteractAtbResourcesAssetRecord, StaticMeshList) == 0x000010, "Member 'FKoratInteractAtbResourcesAssetRecord::StaticMeshList' has a wrong offset!");
static_assert(offsetof(FKoratInteractAtbResourcesAssetRecord, SkeletalMeshList) == 0x000020, "Member 'FKoratInteractAtbResourcesAssetRecord::SkeletalMeshList' has a wrong offset!");
static_assert(offsetof(FKoratInteractAtbResourcesAssetRecord, ParticleList) == 0x000030, "Member 'FKoratInteractAtbResourcesAssetRecord::ParticleList' has a wrong offset!");

// ScriptStruct SS.KoratInteractDecalBranchDataRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratInteractDecalBranchDataRecord final
{
public:
	struct FKoratEffectInteractDecalTypeDataList  DecalType;                                         // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratInteractAtbDecalBranchMaterialDataAsset* BranchDataList;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDecalMaterialType                       IndexValue;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratInteractDecalBranchDataRecord) == 0x000008, "Wrong alignment on FKoratInteractDecalBranchDataRecord");
static_assert(sizeof(FKoratInteractDecalBranchDataRecord) == 0x000028, "Wrong size on FKoratInteractDecalBranchDataRecord");
static_assert(offsetof(FKoratInteractDecalBranchDataRecord, DecalType) == 0x000000, "Member 'FKoratInteractDecalBranchDataRecord::DecalType' has a wrong offset!");
static_assert(offsetof(FKoratInteractDecalBranchDataRecord, BranchDataList) == 0x000018, "Member 'FKoratInteractDecalBranchDataRecord::BranchDataList' has a wrong offset!");
static_assert(offsetof(FKoratInteractDecalBranchDataRecord, IndexValue) == 0x000020, "Member 'FKoratInteractDecalBranchDataRecord::IndexValue' has a wrong offset!");

// ScriptStruct SS.KoratInteractHitInfoState
// 0x0008 (0x0008 - 0x0000)
struct FKoratInteractHitInfoState final
{
public:
	EKoratFreeTimelineHitInfoState                CurrentState;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContinueUniqueId;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractHitInfoState) == 0x000004, "Wrong alignment on FKoratInteractHitInfoState");
static_assert(sizeof(FKoratInteractHitInfoState) == 0x000008, "Wrong size on FKoratInteractHitInfoState");
static_assert(offsetof(FKoratInteractHitInfoState, CurrentState) == 0x000000, "Member 'FKoratInteractHitInfoState::CurrentState' has a wrong offset!");
static_assert(offsetof(FKoratInteractHitInfoState, ContinueUniqueId) == 0x000004, "Member 'FKoratInteractHitInfoState::ContinueUniqueId' has a wrong offset!");

// ScriptStruct SS.SSMainMenuAreaSpawnedData
// 0x0050 (0x0050 - 0x0000)
struct FSSMainMenuAreaSpawnedData final
{
public:
	TMap<struct FKoratPlayerStartDataList, class ASSCharacter*> Characters;                                        // 0x0000(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuAreaSpawnedData) == 0x000008, "Wrong alignment on FSSMainMenuAreaSpawnedData");
static_assert(sizeof(FSSMainMenuAreaSpawnedData) == 0x000050, "Wrong size on FSSMainMenuAreaSpawnedData");
static_assert(offsetof(FSSMainMenuAreaSpawnedData, Characters) == 0x000000, "Member 'FSSMainMenuAreaSpawnedData::Characters' has a wrong offset!");

// ScriptStruct SS.KoratInteractMaterialDataRecord
// 0x0038 (0x0038 - 0x0000)
struct FKoratInteractMaterialDataRecord final
{
public:
	class FName                                   MaterialCustomPropertyName;                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractMaterialDataRecord) == 0x000008, "Wrong alignment on FKoratInteractMaterialDataRecord");
static_assert(sizeof(FKoratInteractMaterialDataRecord) == 0x000038, "Wrong size on FKoratInteractMaterialDataRecord");
static_assert(offsetof(FKoratInteractMaterialDataRecord, MaterialCustomPropertyName) == 0x000000, "Member 'FKoratInteractMaterialDataRecord::MaterialCustomPropertyName' has a wrong offset!");
static_assert(offsetof(FKoratInteractMaterialDataRecord, Material) == 0x000008, "Member 'FKoratInteractMaterialDataRecord::Material' has a wrong offset!");

// ScriptStruct SS.KoratBGMInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FKoratBGMInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBGMInfo) == 0x000004, "Wrong alignment on FKoratBGMInfo");
static_assert(sizeof(FKoratBGMInfo) == 0x000018, "Wrong size on FKoratBGMInfo");

// ScriptStruct SS.KoratInteractMultiDataRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratInteractMultiDataRecord final
{
public:
	TArray<struct FKoratInteractMaterialDataRecord> MaterialList;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotUseDefaultAsset;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratInteractMultiDataRecord) == 0x000008, "Wrong alignment on FKoratInteractMultiDataRecord");
static_assert(sizeof(FKoratInteractMultiDataRecord) == 0x000018, "Wrong size on FKoratInteractMultiDataRecord");
static_assert(offsetof(FKoratInteractMultiDataRecord, MaterialList) == 0x000000, "Member 'FKoratInteractMultiDataRecord::MaterialList' has a wrong offset!");
static_assert(offsetof(FKoratInteractMultiDataRecord, bNotUseDefaultAsset) == 0x000010, "Member 'FKoratInteractMultiDataRecord::bNotUseDefaultAsset' has a wrong offset!");

// ScriptStruct SS.KoratInteractTriggerEnumDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratInteractTriggerEnumDataAssetRecord final
{
public:
	TArray<struct FKoratActionDataList>           AssociatedActions;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratInteractTriggerEnumDataAssetRecord) == 0x000008, "Wrong alignment on FKoratInteractTriggerEnumDataAssetRecord");
static_assert(sizeof(FKoratInteractTriggerEnumDataAssetRecord) == 0x000010, "Wrong size on FKoratInteractTriggerEnumDataAssetRecord");
static_assert(offsetof(FKoratInteractTriggerEnumDataAssetRecord, AssociatedActions) == 0x000000, "Member 'FKoratInteractTriggerEnumDataAssetRecord::AssociatedActions' has a wrong offset!");

// ScriptStruct SS.KoratKawaiiPhysicsParameters
// 0x0030 (0x0030 - 0x0000)
struct FKoratKawaiiPhysicsParameters final
{
public:
	bool                                          ForceTeleport;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWind;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRandomMax;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableOverwriteWind;                               // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverwriteWindDirection;                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverwriteWindSpeed;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratKawaiiPhysicsParameters) == 0x000008, "Wrong alignment on FKoratKawaiiPhysicsParameters");
static_assert(sizeof(FKoratKawaiiPhysicsParameters) == 0x000030, "Wrong size on FKoratKawaiiPhysicsParameters");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, ForceTeleport) == 0x000000, "Member 'FKoratKawaiiPhysicsParameters::ForceTeleport' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, EnableWind) == 0x000001, "Member 'FKoratKawaiiPhysicsParameters::EnableWind' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, WindScale) == 0x000004, "Member 'FKoratKawaiiPhysicsParameters::WindScale' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, WindRandomMax) == 0x000008, "Member 'FKoratKawaiiPhysicsParameters::WindRandomMax' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, EnableOverwriteWind) == 0x00000C, "Member 'FKoratKawaiiPhysicsParameters::EnableOverwriteWind' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, OverwriteWindDirection) == 0x000010, "Member 'FKoratKawaiiPhysicsParameters::OverwriteWindDirection' has a wrong offset!");
static_assert(offsetof(FKoratKawaiiPhysicsParameters, OverwriteWindSpeed) == 0x000028, "Member 'FKoratKawaiiPhysicsParameters::OverwriteWindSpeed' has a wrong offset!");

// ScriptStruct SS.KoratLipsAnalyzerInformation
// 0x0010 (0x0010 - 0x0000)
struct FKoratLipsAnalyzerInformation final
{
public:
	class ULipsAtomAnalyzer*                      Analyzer;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSCharacter*                           AttachedCharacter;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratLipsAnalyzerInformation) == 0x000008, "Wrong alignment on FKoratLipsAnalyzerInformation");
static_assert(sizeof(FKoratLipsAnalyzerInformation) == 0x000010, "Wrong size on FKoratLipsAnalyzerInformation");
static_assert(offsetof(FKoratLipsAnalyzerInformation, Analyzer) == 0x000000, "Member 'FKoratLipsAnalyzerInformation::Analyzer' has a wrong offset!");
static_assert(offsetof(FKoratLipsAnalyzerInformation, AttachedCharacter) == 0x000008, "Member 'FKoratLipsAnalyzerInformation::AttachedCharacter' has a wrong offset!");

// ScriptStruct SS.KoratGrassTransformParameter
// 0x0140 (0x0140 - 0x0000)
struct FKoratGrassTransformParameter final
{
public:
	float                                         InstanceDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginalTransform;                                 // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             StartTransform;                                    // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x00D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Status;                                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratGrassTransformParameter) == 0x000010, "Wrong alignment on FKoratGrassTransformParameter");
static_assert(sizeof(FKoratGrassTransformParameter) == 0x000140, "Wrong size on FKoratGrassTransformParameter");
static_assert(offsetof(FKoratGrassTransformParameter, InstanceDistance) == 0x000000, "Member 'FKoratGrassTransformParameter::InstanceDistance' has a wrong offset!");
static_assert(offsetof(FKoratGrassTransformParameter, OriginalTransform) == 0x000010, "Member 'FKoratGrassTransformParameter::OriginalTransform' has a wrong offset!");
static_assert(offsetof(FKoratGrassTransformParameter, StartTransform) == 0x000070, "Member 'FKoratGrassTransformParameter::StartTransform' has a wrong offset!");
static_assert(offsetof(FKoratGrassTransformParameter, TargetTransform) == 0x0000D0, "Member 'FKoratGrassTransformParameter::TargetTransform' has a wrong offset!");
static_assert(offsetof(FKoratGrassTransformParameter, Status) == 0x000130, "Member 'FKoratGrassTransformParameter::Status' has a wrong offset!");
static_assert(offsetof(FKoratGrassTransformParameter, Timer) == 0x000138, "Member 'FKoratGrassTransformParameter::Timer' has a wrong offset!");

// ScriptStruct SS.KoratLipsMouthInfo
// 0x0030 (0x0030 - 0x0000)
struct FKoratLipsMouthInfo final
{
public:
	struct FCriLipsMouthInfo                      CriMouthInfo;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCriLipsMorphTargetBlendAmountAsJapanese CriLipsMorphTargetBlend;                           // 0x0010(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	EKoratLipsAnalyzerStatus                      AnalyzerStatus;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaying;                                         // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratLipsMouthInfo) == 0x000004, "Wrong alignment on FKoratLipsMouthInfo");
static_assert(sizeof(FKoratLipsMouthInfo) == 0x000030, "Wrong size on FKoratLipsMouthInfo");
static_assert(offsetof(FKoratLipsMouthInfo, CriMouthInfo) == 0x000000, "Member 'FKoratLipsMouthInfo::CriMouthInfo' has a wrong offset!");
static_assert(offsetof(FKoratLipsMouthInfo, CriLipsMorphTargetBlend) == 0x000010, "Member 'FKoratLipsMouthInfo::CriLipsMorphTargetBlend' has a wrong offset!");
static_assert(offsetof(FKoratLipsMouthInfo, AnalyzerStatus) == 0x000024, "Member 'FKoratLipsMouthInfo::AnalyzerStatus' has a wrong offset!");
static_assert(offsetof(FKoratLipsMouthInfo, IsPlaying) == 0x000025, "Member 'FKoratLipsMouthInfo::IsPlaying' has a wrong offset!");
static_assert(offsetof(FKoratLipsMouthInfo, Volume) == 0x000028, "Member 'FKoratLipsMouthInfo::Volume' has a wrong offset!");
static_assert(offsetof(FKoratLipsMouthInfo, bDisable) == 0x00002C, "Member 'FKoratLipsMouthInfo::bDisable' has a wrong offset!");

// ScriptStruct SS.KoratMapCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FKoratMapCharacterData final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              LocatorData;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapCharacterData) == 0x000004, "Wrong alignment on FKoratMapCharacterData");
static_assert(sizeof(FKoratMapCharacterData) == 0x000018, "Wrong size on FKoratMapCharacterData");
static_assert(offsetof(FKoratMapCharacterData, CharacterID) == 0x000000, "Member 'FKoratMapCharacterData::CharacterID' has a wrong offset!");
static_assert(offsetof(FKoratMapCharacterData, CostumeId) == 0x000008, "Member 'FKoratMapCharacterData::CostumeId' has a wrong offset!");
static_assert(offsetof(FKoratMapCharacterData, LocatorData) == 0x000010, "Member 'FKoratMapCharacterData::LocatorData' has a wrong offset!");

// ScriptStruct SS.KoratMapDataAssetRecord
// 0x0358 (0x0358 - 0x0000)
struct FKoratMapDataAssetRecord final
{
public:
	EKoratUnLockType                              UnLockType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EExhibitionType>                       ValidExhibitions;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          SubLevelArray;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector2D                              WindVelocity;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMapInteractiveWindParams            InteractiveWindParams;                             // 0x0038(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratSurfaceTypeToAtbEnumDataAsset*    SurfaceToAtbEnumDataAsset;                         // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratInteractSpaceAreaDataAsset*       InteractSpaceAreaDataAsset;                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedChaosSetting;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlackOutMinRate;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMDataList;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindSoundCueID;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderWaterSoundCueID;                              // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumHeightOfWindAisac;                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeightOfWindAisac;                              // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MapName;                                           // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      BaseStage;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x00B0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BgTexture;                                         // 0x00E0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          StageSelectCameraSequencer;                        // 0x0110(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StageChangeImage;                                  // 0x0140(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 StageChangePreview;                                // 0x0170(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UManaSource>             CriStageChangePreview;                             // 0x01A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOutFieldRule;                                   // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseSplitScreen;                                 // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseInstallPlay;                                 // 0x01D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3[0x5];                                      // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USSMapWarpAreaDataAsset> WarpAreaDataAsset;                                 // 0x01D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UKoratMapObjectLimitDataAsset> MapObjectLimitDataAsset;                           // 0x0208(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           AsyncLoadClasses;                                  // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AsyncLoadInstances;                                // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      MapChangeEscapeMapDataList;                        // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MapChangeEscapeLevelSequence;                      // 0x0260(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      MapChangeDestructMapDataList;                      // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MapChangeDestructLevelSequence;                    // 0x0298(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MapChangeDestructOTLevelSequence;                  // 0x02C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          TutorialBattleFinishLevelSequence;                 // 0x02F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratMapCharacterData>         MapCharacterData;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDebugForceUseAutoBattle;                          // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratMapStreamingPoolSizeData> StreamingPoolSizeData;                             // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsVictoryAppealPositionTheStartingPosition;       // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMapDataAssetRecord) == 0x000008, "Wrong alignment on FKoratMapDataAssetRecord");
static_assert(sizeof(FKoratMapDataAssetRecord) == 0x000358, "Wrong size on FKoratMapDataAssetRecord");
static_assert(offsetof(FKoratMapDataAssetRecord, UnLockType) == 0x000000, "Member 'FKoratMapDataAssetRecord::UnLockType' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, ValidExhibitions) == 0x000008, "Member 'FKoratMapDataAssetRecord::ValidExhibitions' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, SubLevelArray) == 0x000018, "Member 'FKoratMapDataAssetRecord::SubLevelArray' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, WindVelocity) == 0x000028, "Member 'FKoratMapDataAssetRecord::WindVelocity' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, InteractiveWindParams) == 0x000038, "Member 'FKoratMapDataAssetRecord::InteractiveWindParams' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, SurfaceToAtbEnumDataAsset) == 0x000060, "Member 'FKoratMapDataAssetRecord::SurfaceToAtbEnumDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, InteractSpaceAreaDataAsset) == 0x000068, "Member 'FKoratMapDataAssetRecord::InteractSpaceAreaDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bNeedChaosSetting) == 0x000070, "Member 'FKoratMapDataAssetRecord::bNeedChaosSetting' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, BlackOutMinRate) == 0x000074, "Member 'FKoratMapDataAssetRecord::BlackOutMinRate' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, BGMDataList) == 0x000078, "Member 'FKoratMapDataAssetRecord::BGMDataList' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, WindSoundCueID) == 0x000080, "Member 'FKoratMapDataAssetRecord::WindSoundCueID' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, UnderWaterSoundCueID) == 0x000084, "Member 'FKoratMapDataAssetRecord::UnderWaterSoundCueID' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MinimumHeightOfWindAisac) == 0x000088, "Member 'FKoratMapDataAssetRecord::MinimumHeightOfWindAisac' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MaxHeightOfWindAisac) == 0x00008C, "Member 'FKoratMapDataAssetRecord::MaxHeightOfWindAisac' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapName) == 0x000090, "Member 'FKoratMapDataAssetRecord::MapName' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, BaseStage) == 0x0000A8, "Member 'FKoratMapDataAssetRecord::BaseStage' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, ThumbnailTexture) == 0x0000B0, "Member 'FKoratMapDataAssetRecord::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, BgTexture) == 0x0000E0, "Member 'FKoratMapDataAssetRecord::BgTexture' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, StageSelectCameraSequencer) == 0x000110, "Member 'FKoratMapDataAssetRecord::StageSelectCameraSequencer' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, StageChangeImage) == 0x000140, "Member 'FKoratMapDataAssetRecord::StageChangeImage' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, StageChangePreview) == 0x000170, "Member 'FKoratMapDataAssetRecord::StageChangePreview' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, CriStageChangePreview) == 0x0001A0, "Member 'FKoratMapDataAssetRecord::CriStageChangePreview' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bIsOutFieldRule) == 0x0001D0, "Member 'FKoratMapDataAssetRecord::bIsOutFieldRule' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bIsUseSplitScreen) == 0x0001D1, "Member 'FKoratMapDataAssetRecord::bIsUseSplitScreen' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bIsUseInstallPlay) == 0x0001D2, "Member 'FKoratMapDataAssetRecord::bIsUseInstallPlay' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, WarpAreaDataAsset) == 0x0001D8, "Member 'FKoratMapDataAssetRecord::WarpAreaDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapObjectLimitDataAsset) == 0x000208, "Member 'FKoratMapDataAssetRecord::MapObjectLimitDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, AsyncLoadClasses) == 0x000238, "Member 'FKoratMapDataAssetRecord::AsyncLoadClasses' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, AsyncLoadInstances) == 0x000248, "Member 'FKoratMapDataAssetRecord::AsyncLoadInstances' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapChangeEscapeMapDataList) == 0x000258, "Member 'FKoratMapDataAssetRecord::MapChangeEscapeMapDataList' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapChangeEscapeLevelSequence) == 0x000260, "Member 'FKoratMapDataAssetRecord::MapChangeEscapeLevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapChangeDestructMapDataList) == 0x000290, "Member 'FKoratMapDataAssetRecord::MapChangeDestructMapDataList' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapChangeDestructLevelSequence) == 0x000298, "Member 'FKoratMapDataAssetRecord::MapChangeDestructLevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapChangeDestructOTLevelSequence) == 0x0002C8, "Member 'FKoratMapDataAssetRecord::MapChangeDestructOTLevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, TutorialBattleFinishLevelSequence) == 0x0002F8, "Member 'FKoratMapDataAssetRecord::TutorialBattleFinishLevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, MapCharacterData) == 0x000328, "Member 'FKoratMapDataAssetRecord::MapCharacterData' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bDebugForceUseAutoBattle) == 0x000338, "Member 'FKoratMapDataAssetRecord::bDebugForceUseAutoBattle' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, StreamingPoolSizeData) == 0x000340, "Member 'FKoratMapDataAssetRecord::StreamingPoolSizeData' has a wrong offset!");
static_assert(offsetof(FKoratMapDataAssetRecord, bIsVictoryAppealPositionTheStartingPosition) == 0x000350, "Member 'FKoratMapDataAssetRecord::bIsVictoryAppealPositionTheStartingPosition' has a wrong offset!");

// ScriptStruct SS.KoratMapObjectLimitDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratMapObjectLimitDataAssetRecord final
{
public:
	int32                                         NormalLimit;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealLimit;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapObjectLimitDataAssetRecord) == 0x000004, "Wrong alignment on FKoratMapObjectLimitDataAssetRecord");
static_assert(sizeof(FKoratMapObjectLimitDataAssetRecord) == 0x000008, "Wrong size on FKoratMapObjectLimitDataAssetRecord");
static_assert(offsetof(FKoratMapObjectLimitDataAssetRecord, NormalLimit) == 0x000000, "Member 'FKoratMapObjectLimitDataAssetRecord::NormalLimit' has a wrong offset!");
static_assert(offsetof(FKoratMapObjectLimitDataAssetRecord, RealLimit) == 0x000004, "Member 'FKoratMapObjectLimitDataAssetRecord::RealLimit' has a wrong offset!");

// ScriptStruct SS.SSPointBoostData
// 0x0010 (0x0010 - 0x0000)
struct FSSPointBoostData final
{
public:
	float                                         RankPointBoost;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoneyBoost;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProficiencyBoost;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventPointBoost;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPointBoostData) == 0x000004, "Wrong alignment on FSSPointBoostData");
static_assert(sizeof(FSSPointBoostData) == 0x000010, "Wrong size on FSSPointBoostData");
static_assert(offsetof(FSSPointBoostData, RankPointBoost) == 0x000000, "Member 'FSSPointBoostData::RankPointBoost' has a wrong offset!");
static_assert(offsetof(FSSPointBoostData, MoneyBoost) == 0x000004, "Member 'FSSPointBoostData::MoneyBoost' has a wrong offset!");
static_assert(offsetof(FSSPointBoostData, ProficiencyBoost) == 0x000008, "Member 'FSSPointBoostData::ProficiencyBoost' has a wrong offset!");
static_assert(offsetof(FSSPointBoostData, EventPointBoost) == 0x00000C, "Member 'FSSPointBoostData::EventPointBoost' has a wrong offset!");

// ScriptStruct SS.KoratMapWeatherDataAssetRecord
// 0x0140 (0x0140 - 0x0000)
struct FKoratMapWeatherDataAssetRecord final
{
public:
	TMap<class FName, float>                      WiatherSunshineParameterScaler;                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        WiatherSunshineParameterVector;                    // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      WiatherShadeParameterScaler;                       // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        WiatherShadeParameterVector;                       // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapWeatherDataAssetRecord) == 0x000008, "Wrong alignment on FKoratMapWeatherDataAssetRecord");
static_assert(sizeof(FKoratMapWeatherDataAssetRecord) == 0x000140, "Wrong size on FKoratMapWeatherDataAssetRecord");
static_assert(offsetof(FKoratMapWeatherDataAssetRecord, WiatherSunshineParameterScaler) == 0x000000, "Member 'FKoratMapWeatherDataAssetRecord::WiatherSunshineParameterScaler' has a wrong offset!");
static_assert(offsetof(FKoratMapWeatherDataAssetRecord, WiatherSunshineParameterVector) == 0x000050, "Member 'FKoratMapWeatherDataAssetRecord::WiatherSunshineParameterVector' has a wrong offset!");
static_assert(offsetof(FKoratMapWeatherDataAssetRecord, WiatherShadeParameterScaler) == 0x0000A0, "Member 'FKoratMapWeatherDataAssetRecord::WiatherShadeParameterScaler' has a wrong offset!");
static_assert(offsetof(FKoratMapWeatherDataAssetRecord, WiatherShadeParameterVector) == 0x0000F0, "Member 'FKoratMapWeatherDataAssetRecord::WiatherShadeParameterVector' has a wrong offset!");

// ScriptStruct SS.KoratMapWeatherParameterDataAssetRecord
// 0x00F0 (0x00F0 - 0x0000)
struct FKoratMapWeatherParameterDataAssetRecord final
{
public:
	TMap<class FName, float>                      WiatherParametersScaler;                           // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        WiatherParametersVector;                           // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EKoratMapWeatherType, struct FKoratMapWeatherDataAssetRecord> TypeParameters;                                    // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMapWeatherParameterDataAssetRecord) == 0x000008, "Wrong alignment on FKoratMapWeatherParameterDataAssetRecord");
static_assert(sizeof(FKoratMapWeatherParameterDataAssetRecord) == 0x0000F0, "Wrong size on FKoratMapWeatherParameterDataAssetRecord");
static_assert(offsetof(FKoratMapWeatherParameterDataAssetRecord, WiatherParametersScaler) == 0x000000, "Member 'FKoratMapWeatherParameterDataAssetRecord::WiatherParametersScaler' has a wrong offset!");
static_assert(offsetof(FKoratMapWeatherParameterDataAssetRecord, WiatherParametersVector) == 0x000050, "Member 'FKoratMapWeatherParameterDataAssetRecord::WiatherParametersVector' has a wrong offset!");
static_assert(offsetof(FKoratMapWeatherParameterDataAssetRecord, TypeParameters) == 0x0000A0, "Member 'FKoratMapWeatherParameterDataAssetRecord::TypeParameters' has a wrong offset!");

// ScriptStruct SS.KoratMenuDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratMenuDataAssetRecord final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ButtonName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         FocusSequence;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         ClickSequence;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMenuDataAssetRecord) == 0x000008, "Wrong alignment on FKoratMenuDataAssetRecord");
static_assert(sizeof(FKoratMenuDataAssetRecord) == 0x000028, "Wrong size on FKoratMenuDataAssetRecord");
static_assert(offsetof(FKoratMenuDataAssetRecord, ButtonId) == 0x000000, "Member 'FKoratMenuDataAssetRecord::ButtonId' has a wrong offset!");
static_assert(offsetof(FKoratMenuDataAssetRecord, ButtonName) == 0x000008, "Member 'FKoratMenuDataAssetRecord::ButtonName' has a wrong offset!");
static_assert(offsetof(FKoratMenuDataAssetRecord, FocusSequence) == 0x000018, "Member 'FKoratMenuDataAssetRecord::FocusSequence' has a wrong offset!");
static_assert(offsetof(FKoratMenuDataAssetRecord, ClickSequence) == 0x000020, "Member 'FKoratMenuDataAssetRecord::ClickSequence' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneAttachKeyStruct
// 0x00C0 (0x00C8 - 0x0008)
struct FKoratMovieSceneAttachKeyStruct final : public FMovieSceneKeyStruct
{
public:
	struct FMovieSceneActorReferenceKey           PositionReference;                                 // 0x0008(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneActorReferenceKey           RotationReference;                                 // 0x0030(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PositionBlendRate;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationBlendRate;                                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PositionFollowing;                                 // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotationFollowing;                                 // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PositionFirstSocketName;                           // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PositionSecondSocketName;                          // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RotationFirstSocketName;                           // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RotationSecondSocketName;                          // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x00A8(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x1C];                                      // 0x00AC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneAttachKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneAttachKeyStruct");
static_assert(sizeof(FKoratMovieSceneAttachKeyStruct) == 0x0000C8, "Wrong size on FKoratMovieSceneAttachKeyStruct");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, PositionReference) == 0x000008, "Member 'FKoratMovieSceneAttachKeyStruct::PositionReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, RotationReference) == 0x000030, "Member 'FKoratMovieSceneAttachKeyStruct::RotationReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, PositionBlendRate) == 0x000058, "Member 'FKoratMovieSceneAttachKeyStruct::PositionBlendRate' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, RotationBlendRate) == 0x00005C, "Member 'FKoratMovieSceneAttachKeyStruct::RotationBlendRate' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, PositionFollowing) == 0x000060, "Member 'FKoratMovieSceneAttachKeyStruct::PositionFollowing' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, RotationFollowing) == 0x000061, "Member 'FKoratMovieSceneAttachKeyStruct::RotationFollowing' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, PositionFirstSocketName) == 0x000068, "Member 'FKoratMovieSceneAttachKeyStruct::PositionFirstSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, PositionSecondSocketName) == 0x000078, "Member 'FKoratMovieSceneAttachKeyStruct::PositionSecondSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, RotationFirstSocketName) == 0x000088, "Member 'FKoratMovieSceneAttachKeyStruct::RotationFirstSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, RotationSecondSocketName) == 0x000098, "Member 'FKoratMovieSceneAttachKeyStruct::RotationSecondSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachKeyStruct, Time) == 0x0000A8, "Member 'FKoratMovieSceneAttachKeyStruct::Time' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneAttachMask
// 0x0004 (0x0004 - 0x0000)
struct FKoratMovieSceneAttachMask final
{
public:
	uint32                                        Mask;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneAttachMask) == 0x000004, "Wrong alignment on FKoratMovieSceneAttachMask");
static_assert(sizeof(FKoratMovieSceneAttachMask) == 0x000004, "Wrong size on FKoratMovieSceneAttachMask");
static_assert(offsetof(FKoratMovieSceneAttachMask, Mask) == 0x000000, "Member 'FKoratMovieSceneAttachMask::Mask' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneAttachTemplate
// 0x0AB8 (0x0AD8 - 0x0020)
struct FKoratMovieSceneAttachTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScenePropertySectionData         PropertyData;                                      // 0x0020(0x0018)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          PositionReference;                                 // 0x0038(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          RotationReference;                                 // 0x0158(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               PositionFirstSocketName;                           // 0x0278(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               PositionSecondSocketName;                          // 0x0388(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               RotationFirstSocketName;                           // 0x0498(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               RotationSecondSocketName;                          // 0x05A8(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                PositionBlendRate;                                 // 0x06B8(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                RotationBlendRate;                                 // 0x07C8(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 PositionFollowing;                                 // 0x08D8(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 RotationFollowing;                                 // 0x09D8(0x0100)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneAttachTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneAttachTemplate");
static_assert(sizeof(FKoratMovieSceneAttachTemplate) == 0x000AD8, "Wrong size on FKoratMovieSceneAttachTemplate");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PropertyData) == 0x000020, "Member 'FKoratMovieSceneAttachTemplate::PropertyData' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PositionReference) == 0x000038, "Member 'FKoratMovieSceneAttachTemplate::PositionReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, RotationReference) == 0x000158, "Member 'FKoratMovieSceneAttachTemplate::RotationReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PositionFirstSocketName) == 0x000278, "Member 'FKoratMovieSceneAttachTemplate::PositionFirstSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PositionSecondSocketName) == 0x000388, "Member 'FKoratMovieSceneAttachTemplate::PositionSecondSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, RotationFirstSocketName) == 0x000498, "Member 'FKoratMovieSceneAttachTemplate::RotationFirstSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, RotationSecondSocketName) == 0x0005A8, "Member 'FKoratMovieSceneAttachTemplate::RotationSecondSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PositionBlendRate) == 0x0006B8, "Member 'FKoratMovieSceneAttachTemplate::PositionBlendRate' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, RotationBlendRate) == 0x0007C8, "Member 'FKoratMovieSceneAttachTemplate::RotationBlendRate' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, PositionFollowing) == 0x0008D8, "Member 'FKoratMovieSceneAttachTemplate::PositionFollowing' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneAttachTemplate, RotationFollowing) == 0x0009D8, "Member 'FKoratMovieSceneAttachTemplate::RotationFollowing' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneFpsCameraKeyStruct
// 0x0050 (0x0058 - 0x0008)
struct FKoratMovieSceneEventSceneFpsCameraKeyStruct final : public FMovieSceneKeyStruct
{
public:
	struct FMovieSceneActorReferenceKey           LookAtReference;                                   // 0x0008(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0038(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x1C];                                      // 0x003C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneEventSceneFpsCameraKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneFpsCameraKeyStruct");
static_assert(sizeof(FKoratMovieSceneEventSceneFpsCameraKeyStruct) == 0x000058, "Wrong size on FKoratMovieSceneEventSceneFpsCameraKeyStruct");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraKeyStruct, LookAtReference) == 0x000008, "Member 'FKoratMovieSceneEventSceneFpsCameraKeyStruct::LookAtReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraKeyStruct, bEnable) == 0x000030, "Member 'FKoratMovieSceneEventSceneFpsCameraKeyStruct::bEnable' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraKeyStruct, Alpha) == 0x000034, "Member 'FKoratMovieSceneEventSceneFpsCameraKeyStruct::Alpha' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraKeyStruct, Time) == 0x000038, "Member 'FKoratMovieSceneEventSceneFpsCameraKeyStruct::Time' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSliderButton
// 0x0020 (0x0020 - 0x0000)
struct FSSMainMenuSliderButton final
{
public:
	class USSMenuButton*                          Button;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 IconImage;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 NameImage;                                         // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        NotifyBadgeSwitcher;                               // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSliderButton) == 0x000008, "Wrong alignment on FSSMainMenuSliderButton");
static_assert(sizeof(FSSMainMenuSliderButton) == 0x000020, "Wrong size on FSSMainMenuSliderButton");
static_assert(offsetof(FSSMainMenuSliderButton, Button) == 0x000000, "Member 'FSSMainMenuSliderButton::Button' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSliderButton, IconImage) == 0x000008, "Member 'FSSMainMenuSliderButton::IconImage' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSliderButton, NameImage) == 0x000010, "Member 'FSSMainMenuSliderButton::NameImage' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSliderButton, NotifyBadgeSwitcher) == 0x000018, "Member 'FSSMainMenuSliderButton::NotifyBadgeSwitcher' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneFpsCameraTemplate
// 0x0330 (0x0350 - 0x0020)
struct FKoratMovieSceneEventSceneFpsCameraTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneActorReferenceData          LookAtReference;                                   // 0x0020(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 Enable;                                            // 0x0140(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                Alpha;                                             // 0x0240(0x0110)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneEventSceneFpsCameraTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneFpsCameraTemplate");
static_assert(sizeof(FKoratMovieSceneEventSceneFpsCameraTemplate) == 0x000350, "Wrong size on FKoratMovieSceneEventSceneFpsCameraTemplate");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraTemplate, LookAtReference) == 0x000020, "Member 'FKoratMovieSceneEventSceneFpsCameraTemplate::LookAtReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraTemplate, Enable) == 0x000140, "Member 'FKoratMovieSceneEventSceneFpsCameraTemplate::Enable' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneFpsCameraTemplate, Alpha) == 0x000240, "Member 'FKoratMovieSceneEventSceneFpsCameraTemplate::Alpha' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneImpactKeyStruct
// 0x0070 (0x0078 - 0x0008)
struct FKoratMovieSceneEventSceneImpactKeyStruct final : public FMovieSceneKeyStruct
{
public:
	struct FMovieSceneActorReferenceKey           RebindEvent00Reference;                            // 0x0008(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneActorReferenceKey           RebindEvent01Reference;                            // 0x0030(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0058(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x1C];                                      // 0x005C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneEventSceneImpactKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneImpactKeyStruct");
static_assert(sizeof(FKoratMovieSceneEventSceneImpactKeyStruct) == 0x000078, "Wrong size on FKoratMovieSceneEventSceneImpactKeyStruct");
static_assert(offsetof(FKoratMovieSceneEventSceneImpactKeyStruct, RebindEvent00Reference) == 0x000008, "Member 'FKoratMovieSceneEventSceneImpactKeyStruct::RebindEvent00Reference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneImpactKeyStruct, RebindEvent01Reference) == 0x000030, "Member 'FKoratMovieSceneEventSceneImpactKeyStruct::RebindEvent01Reference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneImpactKeyStruct, Time) == 0x000058, "Member 'FKoratMovieSceneEventSceneImpactKeyStruct::Time' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventScenePayload
// 0x0050 (0x0050 - 0x0000)
struct FKoratMovieSceneEventScenePayload final
{
public:
	EKoratMovieSceneEventSceneTriggerType         TriggerType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageText;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         MinimumDisplayTimeSeconds;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNarration;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratMovieSceneEventSceneSpeakerType         SpeakerType;                                       // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenSpeakerName;                                // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSpeakerName;                              // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SpeakerNameText;                                   // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<EKoratMovieSceneEventSceneSpeakerType> SubSpeakerTypes;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMovieSceneEventScenePayload) == 0x000008, "Wrong alignment on FKoratMovieSceneEventScenePayload");
static_assert(sizeof(FKoratMovieSceneEventScenePayload) == 0x000050, "Wrong size on FKoratMovieSceneEventScenePayload");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, TriggerType) == 0x000000, "Member 'FKoratMovieSceneEventScenePayload::TriggerType' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, MessageText) == 0x000008, "Member 'FKoratMovieSceneEventScenePayload::MessageText' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, MinimumDisplayTimeSeconds) == 0x000020, "Member 'FKoratMovieSceneEventScenePayload::MinimumDisplayTimeSeconds' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, bNarration) == 0x000024, "Member 'FKoratMovieSceneEventScenePayload::bNarration' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, SpeakerType) == 0x000025, "Member 'FKoratMovieSceneEventScenePayload::SpeakerType' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, bHiddenSpeakerName) == 0x000026, "Member 'FKoratMovieSceneEventScenePayload::bHiddenSpeakerName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, bOverrideSpeakerName) == 0x000027, "Member 'FKoratMovieSceneEventScenePayload::bOverrideSpeakerName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, SpeakerNameText) == 0x000028, "Member 'FKoratMovieSceneEventScenePayload::SpeakerNameText' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventScenePayload, SubSpeakerTypes) == 0x000040, "Member 'FKoratMovieSceneEventScenePayload::SubSpeakerTypes' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneSectionData
// 0x00A8 (0x00F8 - 0x0050)
struct FKoratMovieSceneEventSceneSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FKoratMovieSceneEventScenePayload> KeyValues;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x88];                                      // 0x0070(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneEventSceneSectionData) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneSectionData");
static_assert(sizeof(FKoratMovieSceneEventSceneSectionData) == 0x0000F8, "Wrong size on FKoratMovieSceneEventSceneSectionData");
static_assert(offsetof(FKoratMovieSceneEventSceneSectionData, Times) == 0x000050, "Member 'FKoratMovieSceneEventSceneSectionData::Times' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneEventSceneSectionData, KeyValues) == 0x000060, "Member 'FKoratMovieSceneEventSceneSectionData::KeyValues' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneEventSceneTemplate
// 0x0100 (0x0120 - 0x0020)
struct FKoratMovieSceneEventSceneTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FKoratMovieSceneEventSceneSectionData  EventData;                                         // 0x0020(0x00F8)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0118(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneEventSceneTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneEventSceneTemplate");
static_assert(sizeof(FKoratMovieSceneEventSceneTemplate) == 0x000120, "Wrong size on FKoratMovieSceneEventSceneTemplate");
static_assert(offsetof(FKoratMovieSceneEventSceneTemplate, EventData) == 0x000020, "Member 'FKoratMovieSceneEventSceneTemplate::EventData' has a wrong offset!");

// ScriptStruct SS.SSComboBoxItemsFloat
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSComboBoxItemsFloat final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSComboBoxItemsFloat) == 0x000008, "Wrong alignment on FSSComboBoxItemsFloat");
static_assert(sizeof(FSSComboBoxItemsFloat) == 0x000010, "Wrong size on FSSComboBoxItemsFloat");

// ScriptStruct SS.KoratMovieSceneLookAtKeyStruct
// 0x00A0 (0x00A8 - 0x0008)
struct FKoratMovieSceneLookAtKeyStruct final : public FMovieSceneKeyStruct
{
public:
	EKoratMovieSceneLookAtPartFlags               PartFlags;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneActorReferenceKey           Target1stReference;                                // 0x000C(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Target1stSocketName;                               // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneActorReferenceKey           Target2ndReference;                                // 0x0048(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Target2ndSocketName;                               // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0084(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOverrideBlendTime;                          // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideBlendTime;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneLookAtKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneLookAtKeyStruct");
static_assert(sizeof(FKoratMovieSceneLookAtKeyStruct) == 0x0000A8, "Wrong size on FKoratMovieSceneLookAtKeyStruct");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, PartFlags) == 0x000008, "Member 'FKoratMovieSceneLookAtKeyStruct::PartFlags' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, bEnable) == 0x000009, "Member 'FKoratMovieSceneLookAtKeyStruct::bEnable' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, bUpdate) == 0x00000A, "Member 'FKoratMovieSceneLookAtKeyStruct::bUpdate' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Target1stReference) == 0x00000C, "Member 'FKoratMovieSceneLookAtKeyStruct::Target1stReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Target1stSocketName) == 0x000038, "Member 'FKoratMovieSceneLookAtKeyStruct::Target1stSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Target2ndReference) == 0x000048, "Member 'FKoratMovieSceneLookAtKeyStruct::Target2ndReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Target2ndSocketName) == 0x000070, "Member 'FKoratMovieSceneLookAtKeyStruct::Target2ndSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Alpha) == 0x000080, "Member 'FKoratMovieSceneLookAtKeyStruct::Alpha' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, Time) == 0x000084, "Member 'FKoratMovieSceneLookAtKeyStruct::Time' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, bEnableOverrideBlendTime) == 0x000088, "Member 'FKoratMovieSceneLookAtKeyStruct::bEnableOverrideBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtKeyStruct, OverrideBlendTime) == 0x00008C, "Member 'FKoratMovieSceneLookAtKeyStruct::OverrideBlendTime' has a wrong offset!");

// ScriptStruct SS.SSGroundFitInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FSSGroundFitInfo final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGroundFitInfo) == 0x000008, "Wrong alignment on FSSGroundFitInfo");
static_assert(sizeof(FSSGroundFitInfo) == 0x000060, "Wrong size on FSSGroundFitInfo");

// ScriptStruct SS.KoratMovieSceneLookAtTemplate
// 0x0A88 (0x0AA8 - 0x0020)
struct FKoratMovieSceneLookAtTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneByteChannel                 PartFlags;                                         // 0x0020(0x0108)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 EnableLookat;                                      // 0x0128(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 UpdateLookAt;                                      // 0x0228(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          Target1stReference;                                // 0x0328(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               Target1stSocketName;                               // 0x0448(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          Target2ndReference;                                // 0x0558(0x0120)(NativeAccessSpecifierPrivate)
	struct FMovieSceneStringChannel               Target2ndSocketName;                               // 0x0678(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                Alpha;                                             // 0x0788(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 EnableOverrideBlendTime;                           // 0x0898(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                OverrideBlendTime;                                 // 0x0998(0x0110)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneLookAtTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneLookAtTemplate");
static_assert(sizeof(FKoratMovieSceneLookAtTemplate) == 0x000AA8, "Wrong size on FKoratMovieSceneLookAtTemplate");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, PartFlags) == 0x000020, "Member 'FKoratMovieSceneLookAtTemplate::PartFlags' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, EnableLookat) == 0x000128, "Member 'FKoratMovieSceneLookAtTemplate::EnableLookat' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, UpdateLookAt) == 0x000228, "Member 'FKoratMovieSceneLookAtTemplate::UpdateLookAt' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, Target1stReference) == 0x000328, "Member 'FKoratMovieSceneLookAtTemplate::Target1stReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, Target1stSocketName) == 0x000448, "Member 'FKoratMovieSceneLookAtTemplate::Target1stSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, Target2ndReference) == 0x000558, "Member 'FKoratMovieSceneLookAtTemplate::Target2ndReference' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, Target2ndSocketName) == 0x000678, "Member 'FKoratMovieSceneLookAtTemplate::Target2ndSocketName' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, Alpha) == 0x000788, "Member 'FKoratMovieSceneLookAtTemplate::Alpha' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, EnableOverrideBlendTime) == 0x000898, "Member 'FKoratMovieSceneLookAtTemplate::EnableOverrideBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneLookAtTemplate, OverrideBlendTime) == 0x000998, "Member 'FKoratMovieSceneLookAtTemplate::OverrideBlendTime' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneOutlineStencilIndexKeyStruct
// 0x0020 (0x0028 - 0x0008)
struct FKoratMovieSceneOutlineStencilIndexKeyStruct final : public FMovieSceneKeyStruct
{
public:
	EKoratCharacterStencil                        Stencil;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           Time;                                              // 0x000C(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneOutlineStencilIndexKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneOutlineStencilIndexKeyStruct");
static_assert(sizeof(FKoratMovieSceneOutlineStencilIndexKeyStruct) == 0x000028, "Wrong size on FKoratMovieSceneOutlineStencilIndexKeyStruct");
static_assert(offsetof(FKoratMovieSceneOutlineStencilIndexKeyStruct, Stencil) == 0x000008, "Member 'FKoratMovieSceneOutlineStencilIndexKeyStruct::Stencil' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneOutlineStencilIndexKeyStruct, Time) == 0x00000C, "Member 'FKoratMovieSceneOutlineStencilIndexKeyStruct::Time' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneSequenceGetter
// 0x0018 (0x0018 - 0x0000)
struct FKoratMovieSceneSequenceGetter final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneSequenceGetter) == 0x000008, "Wrong alignment on FKoratMovieSceneSequenceGetter");
static_assert(sizeof(FKoratMovieSceneSequenceGetter) == 0x000018, "Wrong size on FKoratMovieSceneSequenceGetter");
static_assert(offsetof(FKoratMovieSceneSequenceGetter, Sequence) == 0x000000, "Member 'FKoratMovieSceneSequenceGetter::Sequence' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneSequenceGetter, SequenceActor) == 0x000008, "Member 'FKoratMovieSceneSequenceGetter::SequenceActor' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneSequenceGetter, SequencePlayer) == 0x000010, "Member 'FKoratMovieSceneSequenceGetter::SequencePlayer' has a wrong offset!");

// ScriptStruct SS.ControlTypeParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FControlTypeParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneByteChannel                 EnumChannel;                                       // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlTypeParameterNameAndCurve) == 0x000008, "Wrong alignment on FControlTypeParameterNameAndCurve");
static_assert(sizeof(FControlTypeParameterNameAndCurve) == 0x000110, "Wrong size on FControlTypeParameterNameAndCurve");
static_assert(offsetof(FControlTypeParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FControlTypeParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FControlTypeParameterNameAndCurve, EnumChannel) == 0x000008, "Member 'FControlTypeParameterNameAndCurve::EnumChannel' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneSoundTemplate
// 0x0000 (0x0080 - 0x0080)
struct FKoratMovieSceneSoundTemplate final : public FMovieSceneParameterSectionTemplate
{
};
static_assert(alignof(FKoratMovieSceneSoundTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneSoundTemplate");
static_assert(sizeof(FKoratMovieSceneSoundTemplate) == 0x000080, "Wrong size on FKoratMovieSceneSoundTemplate");

// ScriptStruct SS.SSDragonAdventureIFEpisodeRewardDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FSSDragonAdventureIFEpisodeRewardDataAssetRecord final
{
public:
	class FName                                   EpisodeLastEventName;                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        CharaArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratRewardDataList>           ItemArray;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFEpisodeRewardDataAssetRecord) == 0x000008, "Wrong alignment on FSSDragonAdventureIFEpisodeRewardDataAssetRecord");
static_assert(sizeof(FSSDragonAdventureIFEpisodeRewardDataAssetRecord) == 0x000028, "Wrong size on FSSDragonAdventureIFEpisodeRewardDataAssetRecord");
static_assert(offsetof(FSSDragonAdventureIFEpisodeRewardDataAssetRecord, EpisodeLastEventName) == 0x000000, "Member 'FSSDragonAdventureIFEpisodeRewardDataAssetRecord::EpisodeLastEventName' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEpisodeRewardDataAssetRecord, CharaArray) == 0x000008, "Member 'FSSDragonAdventureIFEpisodeRewardDataAssetRecord::CharaArray' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFEpisodeRewardDataAssetRecord, ItemArray) == 0x000018, "Member 'FSSDragonAdventureIFEpisodeRewardDataAssetRecord::ItemArray' has a wrong offset!");

// ScriptStruct SS.SSOptionBrightnessParam
// 0x0014 (0x0014 - 0x0000)
struct FSSOptionBrightnessParam final
{
public:
	bool                                          bHDR;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HDR_Brightness;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Black;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Contrast;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SDR_Brightness;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionBrightnessParam) == 0x000004, "Wrong alignment on FSSOptionBrightnessParam");
static_assert(sizeof(FSSOptionBrightnessParam) == 0x000014, "Wrong size on FSSOptionBrightnessParam");
static_assert(offsetof(FSSOptionBrightnessParam, bHDR) == 0x000000, "Member 'FSSOptionBrightnessParam::bHDR' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessParam, HDR_Brightness) == 0x000004, "Member 'FSSOptionBrightnessParam::HDR_Brightness' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessParam, HDR_Black) == 0x000008, "Member 'FSSOptionBrightnessParam::HDR_Black' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessParam, HDR_Contrast) == 0x00000C, "Member 'FSSOptionBrightnessParam::HDR_Contrast' has a wrong offset!");
static_assert(offsetof(FSSOptionBrightnessParam, SDR_Brightness) == 0x000010, "Member 'FSSOptionBrightnessParam::SDR_Brightness' has a wrong offset!");

// ScriptStruct SS.SSOptionSoundParam
// 0x0010 (0x0010 - 0x0000)
struct FSSOptionSoundParam final
{
public:
	float                                         BgmVolume;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeVolume;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimSong;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSOptionSoundParam) == 0x000004, "Wrong alignment on FSSOptionSoundParam");
static_assert(sizeof(FSSOptionSoundParam) == 0x000010, "Wrong size on FSSOptionSoundParam");
static_assert(offsetof(FSSOptionSoundParam, BgmVolume) == 0x000000, "Member 'FSSOptionSoundParam::BgmVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundParam, SeVolume) == 0x000004, "Member 'FSSOptionSoundParam::SeVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundParam, VoiceVolume) == 0x000008, "Member 'FSSOptionSoundParam::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FSSOptionSoundParam, bAnimSong) == 0x00000C, "Member 'FSSOptionSoundParam::bAnimSong' has a wrong offset!");

// ScriptStruct SS.SSOptionLanguageParam
// 0x0014 (0x0014 - 0x0000)
struct FSSOptionLanguageParam final
{
public:
	int32                                         LocalizationID;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SystemLocalizationID;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalizationVoiceSet;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundEvent;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundMenu;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionLanguageParam) == 0x000004, "Wrong alignment on FSSOptionLanguageParam");
static_assert(sizeof(FSSOptionLanguageParam) == 0x000014, "Wrong size on FSSOptionLanguageParam");
static_assert(offsetof(FSSOptionLanguageParam, LocalizationID) == 0x000000, "Member 'FSSOptionLanguageParam::LocalizationID' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageParam, SystemLocalizationID) == 0x000004, "Member 'FSSOptionLanguageParam::SystemLocalizationID' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageParam, LocalizationVoiceSet) == 0x000008, "Member 'FSSOptionLanguageParam::LocalizationVoiceSet' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageParam, BackgroundEvent) == 0x00000C, "Member 'FSSOptionLanguageParam::BackgroundEvent' has a wrong offset!");
static_assert(offsetof(FSSOptionLanguageParam, BackgroundMenu) == 0x000010, "Member 'FSSOptionLanguageParam::BackgroundMenu' has a wrong offset!");

// ScriptStruct SS.SSOptionEtcParam
// 0x0004 (0x0004 - 0x0000)
struct FSSOptionEtcParam final
{
public:
	bool                                          bAnalysis;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEULA;                                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrivacyPolicy;                                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightsNotation;                                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionEtcParam) == 0x000001, "Wrong alignment on FSSOptionEtcParam");
static_assert(sizeof(FSSOptionEtcParam) == 0x000004, "Wrong size on FSSOptionEtcParam");
static_assert(offsetof(FSSOptionEtcParam, bAnalysis) == 0x000000, "Member 'FSSOptionEtcParam::bAnalysis' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcParam, bEULA) == 0x000001, "Member 'FSSOptionEtcParam::bEULA' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcParam, bPrivacyPolicy) == 0x000002, "Member 'FSSOptionEtcParam::bPrivacyPolicy' has a wrong offset!");
static_assert(offsetof(FSSOptionEtcParam, bRightsNotation) == 0x000003, "Member 'FSSOptionEtcParam::bRightsNotation' has a wrong offset!");

// ScriptStruct SS.SSOptionVideoParam
// 0x0044 (0x0044 - 0x0000)
struct FSSOptionVideoParam final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Resolutions;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenNo;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolutionScale;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasingQuality;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessingQuality;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VisualEffectQuality;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoliageQuality;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionBlurQuality;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandyCameraShakeQuality;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LodQuality;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaosQuality;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Vsync;                                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DofQuality;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSOptionVideoParam) == 0x000004, "Wrong alignment on FSSOptionVideoParam");
static_assert(sizeof(FSSOptionVideoParam) == 0x000044, "Wrong size on FSSOptionVideoParam");
static_assert(offsetof(FSSOptionVideoParam, Resolutions) == 0x000004, "Member 'FSSOptionVideoParam::Resolutions' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, ScreenNo) == 0x00000C, "Member 'FSSOptionVideoParam::ScreenNo' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, ResolutionScale) == 0x000010, "Member 'FSSOptionVideoParam::ResolutionScale' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, AntiAliasingQuality) == 0x000014, "Member 'FSSOptionVideoParam::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, ShadowQuality) == 0x000018, "Member 'FSSOptionVideoParam::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, TextureQuality) == 0x00001C, "Member 'FSSOptionVideoParam::TextureQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, PostProcessingQuality) == 0x000020, "Member 'FSSOptionVideoParam::PostProcessingQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, VisualEffectQuality) == 0x000024, "Member 'FSSOptionVideoParam::VisualEffectQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, FoliageQuality) == 0x000028, "Member 'FSSOptionVideoParam::FoliageQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, MotionBlurQuality) == 0x00002C, "Member 'FSSOptionVideoParam::MotionBlurQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, HandyCameraShakeQuality) == 0x000030, "Member 'FSSOptionVideoParam::HandyCameraShakeQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, LodQuality) == 0x000034, "Member 'FSSOptionVideoParam::LodQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, ChaosQuality) == 0x000038, "Member 'FSSOptionVideoParam::ChaosQuality' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, Vsync) == 0x00003C, "Member 'FSSOptionVideoParam::Vsync' has a wrong offset!");
static_assert(offsetof(FSSOptionVideoParam, DofQuality) == 0x000040, "Member 'FSSOptionVideoParam::DofQuality' has a wrong offset!");

// ScriptStruct SS.SSOptionParam
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x08) FSSOptionParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSOptionControlParam                  Control;                                           // 0x0008(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionSoundParam                    Sound;                                             // 0x0048(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionLanguageParam                 Language;                                          // 0x0058(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionEtcParam                      Etc;                                               // 0x006C(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionBrightnessParam               Brightness;                                        // 0x0070(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionVideoParam                    Video;                                             // 0x0084(0x0044)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionKeyControlParam               KeyControl;                                        // 0x00C8(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistParam                   Assist;                                            // 0x00D0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionControlParam                  Control2P;                                         // 0x00D8(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionVideoParam                    Video2P;                                           // 0x0118(0x0044)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionKeyControlParam               KeyControl2P;                                      // 0x015C(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSSOptionAssistParam                   Assist2P;                                          // 0x0164(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSOptionParam) == 0x000008, "Wrong alignment on FSSOptionParam");
static_assert(sizeof(FSSOptionParam) == 0x000170, "Wrong size on FSSOptionParam");
static_assert(offsetof(FSSOptionParam, Control) == 0x000008, "Member 'FSSOptionParam::Control' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Sound) == 0x000048, "Member 'FSSOptionParam::Sound' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Language) == 0x000058, "Member 'FSSOptionParam::Language' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Etc) == 0x00006C, "Member 'FSSOptionParam::Etc' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Brightness) == 0x000070, "Member 'FSSOptionParam::Brightness' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Video) == 0x000084, "Member 'FSSOptionParam::Video' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, KeyControl) == 0x0000C8, "Member 'FSSOptionParam::KeyControl' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Assist) == 0x0000D0, "Member 'FSSOptionParam::Assist' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Control2P) == 0x0000D8, "Member 'FSSOptionParam::Control2P' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Video2P) == 0x000118, "Member 'FSSOptionParam::Video2P' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, KeyControl2P) == 0x00015C, "Member 'FSSOptionParam::KeyControl2P' has a wrong offset!");
static_assert(offsetof(FSSOptionParam, Assist2P) == 0x000164, "Member 'FSSOptionParam::Assist2P' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneUIActionBlendOptionKeyStruct
// 0x0058 (0x0060 - 0x0008)
struct FKoratMovieSceneUIActionBlendOptionKeyStruct final : public FMovieSceneKeyStruct
{
public:
	bool                                          OverrideBlendIn;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInBlendTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendInBlendOption;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                BlendInCustomCurve;                                // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideBlendOut;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutBlendTime;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOutBlendOption;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                BlendOutCustomCurve;                               // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAutoBlendOut;                                // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           Time;                                              // 0x0040(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x1C];                                      // 0x0044(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMovieSceneUIActionBlendOptionKeyStruct) == 0x000008, "Wrong alignment on FKoratMovieSceneUIActionBlendOptionKeyStruct");
static_assert(sizeof(FKoratMovieSceneUIActionBlendOptionKeyStruct) == 0x000060, "Wrong size on FKoratMovieSceneUIActionBlendOptionKeyStruct");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, OverrideBlendIn) == 0x000008, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::OverrideBlendIn' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendInBlendTime) == 0x00000C, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendInBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendInBlendOption) == 0x000010, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendInBlendOption' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendInCustomCurve) == 0x000018, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendInCustomCurve' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, OverrideBlendOut) == 0x000020, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::OverrideBlendOut' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendOutBlendTime) == 0x000024, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendOutBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendOutBlendOption) == 0x000028, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendOutBlendOption' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendOutCustomCurve) == 0x000030, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendOutCustomCurve' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, BlendOutTriggerTime) == 0x000038, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, EnableAutoBlendOut) == 0x00003C, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::EnableAutoBlendOut' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionKeyStruct, Time) == 0x000040, "Member 'FKoratMovieSceneUIActionBlendOptionKeyStruct::Time' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneUIActionBlendOptionTemplate
// 0x0AB0 (0x0AD0 - 0x0020)
struct FKoratMovieSceneUIActionBlendOptionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneBoolChannel                 OverrideBlendIn;                                   // 0x0020(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                BlendInBlendTime;                                  // 0x0120(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneByteChannel                 BlendInBlendOption;                                // 0x0230(0x0108)(NativeAccessSpecifierPrivate)
	struct FMovieSceneObjectPathChannel           BlendInCustomCurve;                                // 0x0338(0x0138)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 OverrideBlendOut;                                  // 0x0470(0x0100)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                BlendOutBlendTime;                                 // 0x0570(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneByteChannel                 BlendOutBlendOption;                               // 0x0680(0x0108)(NativeAccessSpecifierPrivate)
	struct FMovieSceneObjectPathChannel           BlendOutCustomCurve;                               // 0x0788(0x0138)(NativeAccessSpecifierPrivate)
	struct FMovieSceneFloatChannel                BlendOutTriggerTime;                               // 0x08C0(0x0110)(NativeAccessSpecifierPrivate)
	struct FMovieSceneBoolChannel                 EnableAutoBlendOut;                                // 0x09D0(0x0100)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneUIActionBlendOptionTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneUIActionBlendOptionTemplate");
static_assert(sizeof(FKoratMovieSceneUIActionBlendOptionTemplate) == 0x000AD0, "Wrong size on FKoratMovieSceneUIActionBlendOptionTemplate");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, OverrideBlendIn) == 0x000020, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::OverrideBlendIn' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendInBlendTime) == 0x000120, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendInBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendInBlendOption) == 0x000230, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendInBlendOption' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendInCustomCurve) == 0x000338, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendInCustomCurve' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, OverrideBlendOut) == 0x000470, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::OverrideBlendOut' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendOutBlendTime) == 0x000570, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendOutBlendTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendOutBlendOption) == 0x000680, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendOutBlendOption' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendOutCustomCurve) == 0x000788, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendOutCustomCurve' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, BlendOutTriggerTime) == 0x0008C0, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(FKoratMovieSceneUIActionBlendOptionTemplate, EnableAutoBlendOut) == 0x0009D0, "Member 'FKoratMovieSceneUIActionBlendOptionTemplate::EnableAutoBlendOut' has a wrong offset!");

// ScriptStruct SS.MovieSceneViewSwitchSectionTemplate
// 0x0010 (0x0030 - 0x0020)
struct FMovieSceneViewSwitchSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   CurveName;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveValue;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowPriority;                                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneViewSwitchSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneViewSwitchSectionTemplate");
static_assert(sizeof(FMovieSceneViewSwitchSectionTemplate) == 0x000030, "Wrong size on FMovieSceneViewSwitchSectionTemplate");
static_assert(offsetof(FMovieSceneViewSwitchSectionTemplate, CurveName) == 0x000020, "Member 'FMovieSceneViewSwitchSectionTemplate::CurveName' has a wrong offset!");
static_assert(offsetof(FMovieSceneViewSwitchSectionTemplate, CurveValue) == 0x000028, "Member 'FMovieSceneViewSwitchSectionTemplate::CurveValue' has a wrong offset!");
static_assert(offsetof(FMovieSceneViewSwitchSectionTemplate, bLowPriority) == 0x00002C, "Member 'FMovieSceneViewSwitchSectionTemplate::bLowPriority' has a wrong offset!");

// ScriptStruct SS.KoratMultiDeviceSettingDataBrightnessOptionSettings
// 0x0024 (0x0024 - 0x0000)
struct FKoratMultiDeviceSettingDataBrightnessOptionSettings final
{
public:
	float                                         HDR_Brightness_MidLuminance_Low;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Brightness_MidLuminance_Standard;              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Brightness_MidLuminance_High;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Black_MinLuminanceLog10_Low;                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Black_MinLuminanceLog10_Standard;              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDR_Black_MinLuminanceLog10_High;                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SDR_Brightness_DisplayGamma_Low;                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SDR_Brightness_DisplayGamma_Standard;              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SDR_Brightness_DisplayGamma_High;                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMultiDeviceSettingDataBrightnessOptionSettings) == 0x000004, "Wrong alignment on FKoratMultiDeviceSettingDataBrightnessOptionSettings");
static_assert(sizeof(FKoratMultiDeviceSettingDataBrightnessOptionSettings) == 0x000024, "Wrong size on FKoratMultiDeviceSettingDataBrightnessOptionSettings");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Brightness_MidLuminance_Low) == 0x000000, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Brightness_MidLuminance_Low' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Brightness_MidLuminance_Standard) == 0x000004, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Brightness_MidLuminance_Standard' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Brightness_MidLuminance_High) == 0x000008, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Brightness_MidLuminance_High' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Black_MinLuminanceLog10_Low) == 0x00000C, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Black_MinLuminanceLog10_Low' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Black_MinLuminanceLog10_Standard) == 0x000010, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Black_MinLuminanceLog10_Standard' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, HDR_Black_MinLuminanceLog10_High) == 0x000014, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::HDR_Black_MinLuminanceLog10_High' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, SDR_Brightness_DisplayGamma_Low) == 0x000018, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::SDR_Brightness_DisplayGamma_Low' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, SDR_Brightness_DisplayGamma_Standard) == 0x00001C, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::SDR_Brightness_DisplayGamma_Standard' has a wrong offset!");
static_assert(offsetof(FKoratMultiDeviceSettingDataBrightnessOptionSettings, SDR_Brightness_DisplayGamma_High) == 0x000020, "Member 'FKoratMultiDeviceSettingDataBrightnessOptionSettings::SDR_Brightness_DisplayGamma_High' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorFunctionOperationDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord final
{
public:
	ESSDramaticBattleCutEditorFunctionOperationType FunctionOperation;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord, FunctionOperation) == 0x000000, "Member 'FSSDramaticBattleCutEditorFunctionOperationDataAssetRecord::FunctionOperation' has a wrong offset!");

// ScriptStruct SS.KoratObjectLimitDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratObjectLimitDataAssetRecord final
{
public:
	struct FKoratObjectLimitDataList              ParentGroupID;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalLimit;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealLimit;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoOverlapTest;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratObjectLimitDataAssetRecord) == 0x000008, "Wrong alignment on FKoratObjectLimitDataAssetRecord");
static_assert(sizeof(FKoratObjectLimitDataAssetRecord) == 0x000028, "Wrong size on FKoratObjectLimitDataAssetRecord");
static_assert(offsetof(FKoratObjectLimitDataAssetRecord, ParentGroupID) == 0x000000, "Member 'FKoratObjectLimitDataAssetRecord::ParentGroupID' has a wrong offset!");
static_assert(offsetof(FKoratObjectLimitDataAssetRecord, NormalLimit) == 0x000018, "Member 'FKoratObjectLimitDataAssetRecord::NormalLimit' has a wrong offset!");
static_assert(offsetof(FKoratObjectLimitDataAssetRecord, RealLimit) == 0x00001C, "Member 'FKoratObjectLimitDataAssetRecord::RealLimit' has a wrong offset!");
static_assert(offsetof(FKoratObjectLimitDataAssetRecord, bNoOverlapTest) == 0x000020, "Member 'FKoratObjectLimitDataAssetRecord::bNoOverlapTest' has a wrong offset!");

// ScriptStruct SS.KoratOptionButtonData
// 0x0080 (0x0080 - 0x0000)
struct FKoratOptionButtonData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment_Ps5;                                       // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment_XSX;                                       // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment_Left;                                      // 0x0060(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   ButtonGuideName;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOptionButtonData) == 0x000008, "Wrong alignment on FKoratOptionButtonData");
static_assert(sizeof(FKoratOptionButtonData) == 0x000080, "Wrong size on FKoratOptionButtonData");
static_assert(offsetof(FKoratOptionButtonData, Title) == 0x000000, "Member 'FKoratOptionButtonData::Title' has a wrong offset!");
static_assert(offsetof(FKoratOptionButtonData, Comment) == 0x000018, "Member 'FKoratOptionButtonData::Comment' has a wrong offset!");
static_assert(offsetof(FKoratOptionButtonData, Comment_Ps5) == 0x000030, "Member 'FKoratOptionButtonData::Comment_Ps5' has a wrong offset!");
static_assert(offsetof(FKoratOptionButtonData, Comment_XSX) == 0x000048, "Member 'FKoratOptionButtonData::Comment_XSX' has a wrong offset!");
static_assert(offsetof(FKoratOptionButtonData, Comment_Left) == 0x000060, "Member 'FKoratOptionButtonData::Comment_Left' has a wrong offset!");
static_assert(offsetof(FKoratOptionButtonData, ButtonGuideName) == 0x000078, "Member 'FKoratOptionButtonData::ButtonGuideName' has a wrong offset!");

// ScriptStruct SS.KoratOptionKeyButtonData
// 0x0070 (0x0070 - 0x0000)
struct FKoratOptionKeyButtonData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment_Low_ST;                                    // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment_Low_CL;                                    // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   ButtonGuideNamePad;                                // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonGuideNameKey;                                // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOptionKeyButtonData) == 0x000008, "Wrong alignment on FKoratOptionKeyButtonData");
static_assert(sizeof(FKoratOptionKeyButtonData) == 0x000070, "Wrong size on FKoratOptionKeyButtonData");
static_assert(offsetof(FKoratOptionKeyButtonData, Title) == 0x000000, "Member 'FKoratOptionKeyButtonData::Title' has a wrong offset!");
static_assert(offsetof(FKoratOptionKeyButtonData, Comment) == 0x000018, "Member 'FKoratOptionKeyButtonData::Comment' has a wrong offset!");
static_assert(offsetof(FKoratOptionKeyButtonData, Comment_Low_ST) == 0x000030, "Member 'FKoratOptionKeyButtonData::Comment_Low_ST' has a wrong offset!");
static_assert(offsetof(FKoratOptionKeyButtonData, Comment_Low_CL) == 0x000048, "Member 'FKoratOptionKeyButtonData::Comment_Low_CL' has a wrong offset!");
static_assert(offsetof(FKoratOptionKeyButtonData, ButtonGuideNamePad) == 0x000060, "Member 'FKoratOptionKeyButtonData::ButtonGuideNamePad' has a wrong offset!");
static_assert(offsetof(FKoratOptionKeyButtonData, ButtonGuideNameKey) == 0x000068, "Member 'FKoratOptionKeyButtonData::ButtonGuideNameKey' has a wrong offset!");

// ScriptStruct SS.KoratOptionPadGroupListData
// 0x0018 (0x0018 - 0x0000)
struct FKoratOptionPadGroupListData final
{
public:
	int32                                         FPadGroupNo;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FSelectNo;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPadGroupNo;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CSelectNo;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KGroupNo;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KSelectNo;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOptionPadGroupListData) == 0x000004, "Wrong alignment on FKoratOptionPadGroupListData");
static_assert(sizeof(FKoratOptionPadGroupListData) == 0x000018, "Wrong size on FKoratOptionPadGroupListData");
static_assert(offsetof(FKoratOptionPadGroupListData, FPadGroupNo) == 0x000000, "Member 'FKoratOptionPadGroupListData::FPadGroupNo' has a wrong offset!");
static_assert(offsetof(FKoratOptionPadGroupListData, FSelectNo) == 0x000004, "Member 'FKoratOptionPadGroupListData::FSelectNo' has a wrong offset!");
static_assert(offsetof(FKoratOptionPadGroupListData, CPadGroupNo) == 0x000008, "Member 'FKoratOptionPadGroupListData::CPadGroupNo' has a wrong offset!");
static_assert(offsetof(FKoratOptionPadGroupListData, CSelectNo) == 0x00000C, "Member 'FKoratOptionPadGroupListData::CSelectNo' has a wrong offset!");
static_assert(offsetof(FKoratOptionPadGroupListData, KGroupNo) == 0x000010, "Member 'FKoratOptionPadGroupListData::KGroupNo' has a wrong offset!");
static_assert(offsetof(FKoratOptionPadGroupListData, KSelectNo) == 0x000014, "Member 'FKoratOptionPadGroupListData::KSelectNo' has a wrong offset!");

// ScriptStruct SS.KoratOptionLeftRightHandChangeData
// 0x0030 (0x0030 - 0x0000)
struct FKoratOptionLeftRightHandChangeData final
{
public:
	struct FKey                                   RightHandKey;                                      // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   LeftHandKey;                                       // 0x0018(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOptionLeftRightHandChangeData) == 0x000008, "Wrong alignment on FKoratOptionLeftRightHandChangeData");
static_assert(sizeof(FKoratOptionLeftRightHandChangeData) == 0x000030, "Wrong size on FKoratOptionLeftRightHandChangeData");
static_assert(offsetof(FKoratOptionLeftRightHandChangeData, RightHandKey) == 0x000000, "Member 'FKoratOptionLeftRightHandChangeData::RightHandKey' has a wrong offset!");
static_assert(offsetof(FKoratOptionLeftRightHandChangeData, LeftHandKey) == 0x000018, "Member 'FKoratOptionLeftRightHandChangeData::LeftHandKey' has a wrong offset!");

// ScriptStruct SS.KoratOrientedBox
// 0x0000 (0x0078 - 0x0078)
struct FKoratOrientedBox final : public FOrientedBox
{
};
static_assert(alignof(FKoratOrientedBox) == 0x000008, "Wrong alignment on FKoratOrientedBox");
static_assert(sizeof(FKoratOrientedBox) == 0x000078, "Wrong size on FKoratOrientedBox");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterStartPreview
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterStartPreview final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterStartPreview) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterStartPreview");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterStartPreview) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterStartPreview");

// ScriptStruct SS.KoratPatternSubtitlesDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratPatternSubtitlesDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFreeId;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SubtilesIDArray;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HiddenSubtitles;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPatternSubtitlesDataAssetRecord) == 0x000008, "Wrong alignment on FKoratPatternSubtitlesDataAssetRecord");
static_assert(sizeof(FKoratPatternSubtitlesDataAssetRecord) == 0x000020, "Wrong size on FKoratPatternSubtitlesDataAssetRecord");
static_assert(offsetof(FKoratPatternSubtitlesDataAssetRecord, SortId) == 0x000000, "Member 'FKoratPatternSubtitlesDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratPatternSubtitlesDataAssetRecord, EnableFreeId) == 0x000004, "Member 'FKoratPatternSubtitlesDataAssetRecord::EnableFreeId' has a wrong offset!");
static_assert(offsetof(FKoratPatternSubtitlesDataAssetRecord, SubtilesIDArray) == 0x000008, "Member 'FKoratPatternSubtitlesDataAssetRecord::SubtilesIDArray' has a wrong offset!");
static_assert(offsetof(FKoratPatternSubtitlesDataAssetRecord, HiddenSubtitles) == 0x000018, "Member 'FKoratPatternSubtitlesDataAssetRecord::HiddenSubtitles' has a wrong offset!");

// ScriptStruct SS.KoratMissionChara
// 0x0018 (0x0018 - 0x0000)
struct FKoratMissionChara final
{
public:
	float                                         AnimDeltaTime;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  AnimSequenceActor;                                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAnimIdx;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMissionChara) == 0x000008, "Wrong alignment on FKoratMissionChara");
static_assert(sizeof(FKoratMissionChara) == 0x000018, "Wrong size on FKoratMissionChara");
static_assert(offsetof(FKoratMissionChara, AnimDeltaTime) == 0x000000, "Member 'FKoratMissionChara::AnimDeltaTime' has a wrong offset!");
static_assert(offsetof(FKoratMissionChara, AnimSequenceActor) == 0x000008, "Member 'FKoratMissionChara::AnimSequenceActor' has a wrong offset!");
static_assert(offsetof(FKoratMissionChara, CurrentAnimIdx) == 0x000010, "Member 'FKoratMissionChara::CurrentAnimIdx' has a wrong offset!");

// ScriptStruct SS.KoratPatternVoiceDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratPatternVoiceDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultCueID;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPatternVoiceDataAssetRecord) == 0x000004, "Wrong alignment on FKoratPatternVoiceDataAssetRecord");
static_assert(sizeof(FKoratPatternVoiceDataAssetRecord) == 0x000008, "Wrong size on FKoratPatternVoiceDataAssetRecord");
static_assert(offsetof(FKoratPatternVoiceDataAssetRecord, SortId) == 0x000000, "Member 'FKoratPatternVoiceDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratPatternVoiceDataAssetRecord, DefaultCueID) == 0x000004, "Member 'FKoratPatternVoiceDataAssetRecord::DefaultCueID' has a wrong offset!");

// ScriptStruct SS.KoratPlatformImageDataAssetRecord
// 0x0090 (0x0090 - 0x0000)
struct FKoratPlatformImageDataAssetRecord final
{
public:
	TSoftObjectPtr<class UTexture2D>              DefaultSoftTexture;                                // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              XSXSoftTexture;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PS5SoftTexture;                                    // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPlatformImageDataAssetRecord) == 0x000008, "Wrong alignment on FKoratPlatformImageDataAssetRecord");
static_assert(sizeof(FKoratPlatformImageDataAssetRecord) == 0x000090, "Wrong size on FKoratPlatformImageDataAssetRecord");
static_assert(offsetof(FKoratPlatformImageDataAssetRecord, DefaultSoftTexture) == 0x000000, "Member 'FKoratPlatformImageDataAssetRecord::DefaultSoftTexture' has a wrong offset!");
static_assert(offsetof(FKoratPlatformImageDataAssetRecord, XSXSoftTexture) == 0x000030, "Member 'FKoratPlatformImageDataAssetRecord::XSXSoftTexture' has a wrong offset!");
static_assert(offsetof(FKoratPlatformImageDataAssetRecord, PS5SoftTexture) == 0x000060, "Member 'FKoratPlatformImageDataAssetRecord::PS5SoftTexture' has a wrong offset!");

// ScriptStruct SS.KoratPlayerStartDataAssetRecord
// 0x000C (0x000C - 0x0000)
struct FKoratPlayerStartDataAssetRecord final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCharacterStencil                        Stencil;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPlayerStartDataAssetRecord) == 0x000004, "Wrong alignment on FKoratPlayerStartDataAssetRecord");
static_assert(sizeof(FKoratPlayerStartDataAssetRecord) == 0x00000C, "Wrong size on FKoratPlayerStartDataAssetRecord");
static_assert(offsetof(FKoratPlayerStartDataAssetRecord, TagName) == 0x000000, "Member 'FKoratPlayerStartDataAssetRecord::TagName' has a wrong offset!");
static_assert(offsetof(FKoratPlayerStartDataAssetRecord, Stencil) == 0x000008, "Member 'FKoratPlayerStartDataAssetRecord::Stencil' has a wrong offset!");

// ScriptStruct SS.KoratPointLightFrequencyDataAssetRecord
// 0x000C (0x000C - 0x0000)
struct FKoratPointLightFrequencyDataAssetRecord final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WiggleStrength;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseStrength;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPointLightFrequencyDataAssetRecord) == 0x000004, "Wrong alignment on FKoratPointLightFrequencyDataAssetRecord");
static_assert(sizeof(FKoratPointLightFrequencyDataAssetRecord) == 0x00000C, "Wrong size on FKoratPointLightFrequencyDataAssetRecord");
static_assert(offsetof(FKoratPointLightFrequencyDataAssetRecord, Frequency) == 0x000000, "Member 'FKoratPointLightFrequencyDataAssetRecord::Frequency' has a wrong offset!");
static_assert(offsetof(FKoratPointLightFrequencyDataAssetRecord, WiggleStrength) == 0x000004, "Member 'FKoratPointLightFrequencyDataAssetRecord::WiggleStrength' has a wrong offset!");
static_assert(offsetof(FKoratPointLightFrequencyDataAssetRecord, EaseStrength) == 0x000008, "Member 'FKoratPointLightFrequencyDataAssetRecord::EaseStrength' has a wrong offset!");

// ScriptStruct SS.KoratIntParameterNameAndCurve
// 0x0108 (0x0108 - 0x0000)
struct FKoratIntParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneIntegerChannel              ParameterCurve;                                    // 0x0008(0x0100)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratIntParameterNameAndCurve) == 0x000008, "Wrong alignment on FKoratIntParameterNameAndCurve");
static_assert(sizeof(FKoratIntParameterNameAndCurve) == 0x000108, "Wrong size on FKoratIntParameterNameAndCurve");
static_assert(offsetof(FKoratIntParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FKoratIntParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FKoratIntParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FKoratIntParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessAgentAgentChameleonList
// 0x0018 (0x0018 - 0x0000)
struct FKoratPostProcessAgentAgentChameleonList final
{
public:
	TArray<TWeakObjectPtr<class AKoratPostProcessAgentChameleon>> List;                                              // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         SerialCount;                                       // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPostProcessAgentAgentChameleonList) == 0x000008, "Wrong alignment on FKoratPostProcessAgentAgentChameleonList");
static_assert(sizeof(FKoratPostProcessAgentAgentChameleonList) == 0x000018, "Wrong size on FKoratPostProcessAgentAgentChameleonList");
static_assert(offsetof(FKoratPostProcessAgentAgentChameleonList, List) == 0x000000, "Member 'FKoratPostProcessAgentAgentChameleonList::List' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessAgentAgentChameleonList, SerialCount) == 0x000010, "Member 'FKoratPostProcessAgentAgentChameleonList::SerialCount' has a wrong offset!");

// ScriptStruct SS.KoratMissionRequiredData
// 0x0240 (0x0240 - 0x0000)
struct FKoratMissionRequiredData final
{
public:
	bool                                          bIsOnlineBattle;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattleResult                     BattleResult;                                      // 0x0008(0x0220)(NativeAccessSpecifierPublic)
	struct FKoratBattlePlayMap                    BattleMap;                                         // 0x0228(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMissionRequiredData) == 0x000008, "Wrong alignment on FKoratMissionRequiredData");
static_assert(sizeof(FKoratMissionRequiredData) == 0x000240, "Wrong size on FKoratMissionRequiredData");
static_assert(offsetof(FKoratMissionRequiredData, bIsOnlineBattle) == 0x000000, "Member 'FKoratMissionRequiredData::bIsOnlineBattle' has a wrong offset!");
static_assert(offsetof(FKoratMissionRequiredData, BattleResult) == 0x000008, "Member 'FKoratMissionRequiredData::BattleResult' has a wrong offset!");
static_assert(offsetof(FKoratMissionRequiredData, BattleMap) == 0x000228, "Member 'FKoratMissionRequiredData::BattleMap' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessAgentAgentVolumeList
// 0x0018 (0x0018 - 0x0000)
struct FKoratPostProcessAgentAgentVolumeList final
{
public:
	TArray<TWeakObjectPtr<class AKoratPostProcessAgentVolume>> List;                                              // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         SerialCount;                                       // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratPostProcessAgentAgentVolumeList) == 0x000008, "Wrong alignment on FKoratPostProcessAgentAgentVolumeList");
static_assert(sizeof(FKoratPostProcessAgentAgentVolumeList) == 0x000018, "Wrong size on FKoratPostProcessAgentAgentVolumeList");
static_assert(offsetof(FKoratPostProcessAgentAgentVolumeList, List) == 0x000000, "Member 'FKoratPostProcessAgentAgentVolumeList::List' has a wrong offset!");
static_assert(offsetof(FKoratPostProcessAgentAgentVolumeList, SerialCount) == 0x000010, "Member 'FKoratPostProcessAgentAgentVolumeList::SerialCount' has a wrong offset!");

// ScriptStruct SS.KoratPostProcessViewActorItem
// 0x0050 (0x0050 - 0x0000)
struct FKoratPostProcessViewActorItem final
{
public:
	TMap<class FString, struct FKoratPostProcessViewActorSubItem> List;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratPostProcessViewActorItem) == 0x000008, "Wrong alignment on FKoratPostProcessViewActorItem");
static_assert(sizeof(FKoratPostProcessViewActorItem) == 0x000050, "Wrong size on FKoratPostProcessViewActorItem");
static_assert(offsetof(FKoratPostProcessViewActorItem, List) == 0x000000, "Member 'FKoratPostProcessViewActorItem::List' has a wrong offset!");

// ScriptStruct SS.SSMainMenuRoomData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FSSMainMenuRoomData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuRoomData) == 0x000008, "Wrong alignment on FSSMainMenuRoomData");
static_assert(sizeof(FSSMainMenuRoomData) == 0x000060, "Wrong size on FSSMainMenuRoomData");

// ScriptStruct SS.KoratRelatedEffectRelation
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratRelatedEffectRelation final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRelatedEffectRelation) == 0x000008, "Wrong alignment on FKoratRelatedEffectRelation");
static_assert(sizeof(FKoratRelatedEffectRelation) == 0x000018, "Wrong size on FKoratRelatedEffectRelation");

// ScriptStruct SS.KoratReplaceAnimationDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FKoratReplaceAnimationDataAssetRecord final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratReplaceAnimationDataAssetRecord) == 0x000001, "Wrong alignment on FKoratReplaceAnimationDataAssetRecord");
static_assert(sizeof(FKoratReplaceAnimationDataAssetRecord) == 0x000001, "Wrong size on FKoratReplaceAnimationDataAssetRecord");

// ScriptStruct SS.KoratRigUnit_MeshClippingWrist
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FKoratRigUnit_MeshClippingWrist final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRigUnit_MeshClippingWrist) == 0x000008, "Wrong alignment on FKoratRigUnit_MeshClippingWrist");
static_assert(sizeof(FKoratRigUnit_MeshClippingWrist) == 0x000080, "Wrong size on FKoratRigUnit_MeshClippingWrist");

// ScriptStruct SS.KoratRigUnit_SetElbowL_MT
// 0x0080 (0x00C0 - 0x0040)
struct FKoratRigUnit_SetElbowL_MT final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FKoratRigUnit_MeshClippingElbow        Left;                                              // 0x0040(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SetElbowL_MT) == 0x000008, "Wrong alignment on FKoratRigUnit_SetElbowL_MT");
static_assert(sizeof(FKoratRigUnit_SetElbowL_MT) == 0x0000C0, "Wrong size on FKoratRigUnit_SetElbowL_MT");
static_assert(offsetof(FKoratRigUnit_SetElbowL_MT, Left) == 0x000040, "Member 'FKoratRigUnit_SetElbowL_MT::Left' has a wrong offset!");

// ScriptStruct SS.KoratRigUnit_SetWristL_MT
// 0x0080 (0x00C0 - 0x0040)
struct FKoratRigUnit_SetWristL_MT final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FKoratRigUnit_MeshClippingWrist        Left;                                              // 0x0040(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SetWristL_MT) == 0x000008, "Wrong alignment on FKoratRigUnit_SetWristL_MT");
static_assert(sizeof(FKoratRigUnit_SetWristL_MT) == 0x0000C0, "Wrong size on FKoratRigUnit_SetWristL_MT");
static_assert(offsetof(FKoratRigUnit_SetWristL_MT, Left) == 0x000040, "Member 'FKoratRigUnit_SetWristL_MT::Left' has a wrong offset!");

// ScriptStruct SS.KoratRigUnit_SetWristR_MT
// 0x0080 (0x00C0 - 0x0040)
struct FKoratRigUnit_SetWristR_MT final : public FRigUnit_HighlevelBaseMutable
{
public:
	struct FKoratRigUnit_MeshClippingWrist        Right;                                             // 0x0040(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRigUnit_SetWristR_MT) == 0x000008, "Wrong alignment on FKoratRigUnit_SetWristR_MT");
static_assert(sizeof(FKoratRigUnit_SetWristR_MT) == 0x0000C0, "Wrong size on FKoratRigUnit_SetWristR_MT");
static_assert(offsetof(FKoratRigUnit_SetWristR_MT, Right) == 0x000040, "Member 'FKoratRigUnit_SetWristR_MT::Right' has a wrong offset!");

// ScriptStruct SS.KoratSelectLabelSettingDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratSelectLabelSettingDataAssetRecord final
{
public:
	class FString                                 LabelName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSelectLabelSettingDataAssetRecord) == 0x000008, "Wrong alignment on FKoratSelectLabelSettingDataAssetRecord");
static_assert(sizeof(FKoratSelectLabelSettingDataAssetRecord) == 0x000010, "Wrong size on FKoratSelectLabelSettingDataAssetRecord");
static_assert(offsetof(FKoratSelectLabelSettingDataAssetRecord, LabelName) == 0x000000, "Member 'FKoratSelectLabelSettingDataAssetRecord::LabelName' has a wrong offset!");

// ScriptStruct SS.KoratSeriesTitleDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratSeriesTitleDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSeriesTitleDataAssetRecord) == 0x000008, "Wrong alignment on FKoratSeriesTitleDataAssetRecord");
static_assert(sizeof(FKoratSeriesTitleDataAssetRecord) == 0x000020, "Wrong size on FKoratSeriesTitleDataAssetRecord");
static_assert(offsetof(FKoratSeriesTitleDataAssetRecord, SortId) == 0x000000, "Member 'FKoratSeriesTitleDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratSeriesTitleDataAssetRecord, Name) == 0x000008, "Member 'FKoratSeriesTitleDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct SS.KoratShakeForceTypeDataAssetRecord
// 0x001C (0x001C - 0x0000)
struct FKoratShakeForceTypeDataAssetRecord final
{
public:
	EShakeListenerType                            ListenerType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearRange;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarRange;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShakeForceShapeType                          ForceShapeType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShakeForceLerpType                           ForceLerpType;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceLerpExp;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadSpeed;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratShakeForceTypeDataAssetRecord) == 0x000004, "Wrong alignment on FKoratShakeForceTypeDataAssetRecord");
static_assert(sizeof(FKoratShakeForceTypeDataAssetRecord) == 0x00001C, "Wrong size on FKoratShakeForceTypeDataAssetRecord");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, ListenerType) == 0x000000, "Member 'FKoratShakeForceTypeDataAssetRecord::ListenerType' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, NearRange) == 0x000004, "Member 'FKoratShakeForceTypeDataAssetRecord::NearRange' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, FarRange) == 0x000008, "Member 'FKoratShakeForceTypeDataAssetRecord::FarRange' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, ScaleMax) == 0x00000C, "Member 'FKoratShakeForceTypeDataAssetRecord::ScaleMax' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, ForceShapeType) == 0x000010, "Member 'FKoratShakeForceTypeDataAssetRecord::ForceShapeType' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, ForceLerpType) == 0x000011, "Member 'FKoratShakeForceTypeDataAssetRecord::ForceLerpType' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, ForceLerpExp) == 0x000014, "Member 'FKoratShakeForceTypeDataAssetRecord::ForceLerpExp' has a wrong offset!");
static_assert(offsetof(FKoratShakeForceTypeDataAssetRecord, SpreadSpeed) == 0x000018, "Member 'FKoratShakeForceTypeDataAssetRecord::SpreadSpeed' has a wrong offset!");

// ScriptStruct SS.KoratSetPlayVoiceDataRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratSetPlayVoiceDataRecord final
{
public:
	TArray<class FName>                           PlayCueSetList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSetPlayVoiceDataRecord) == 0x000008, "Wrong alignment on FKoratSetPlayVoiceDataRecord");
static_assert(sizeof(FKoratSetPlayVoiceDataRecord) == 0x000018, "Wrong size on FKoratSetPlayVoiceDataRecord");
static_assert(offsetof(FKoratSetPlayVoiceDataRecord, PlayCueSetList) == 0x000000, "Member 'FKoratSetPlayVoiceDataRecord::PlayCueSetList' has a wrong offset!");
static_assert(offsetof(FKoratSetPlayVoiceDataRecord, Weight) == 0x000010, "Member 'FKoratSetPlayVoiceDataRecord::Weight' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCompileDescriptionDE
// 0x0028 (0x0028 - 0x0000)
struct FSSEventSceneCompileDescriptionDE final
{
public:
	struct FKoratMapDataList                      PlayMap;                                           // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSEventSceneCharacterCompileDescription> Characters;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSEventSceneCutsceneCompileDescriptionDE> CutScenes;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneCompileDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneCompileDescriptionDE");
static_assert(sizeof(FSSEventSceneCompileDescriptionDE) == 0x000028, "Wrong size on FSSEventSceneCompileDescriptionDE");
static_assert(offsetof(FSSEventSceneCompileDescriptionDE, PlayMap) == 0x000000, "Member 'FSSEventSceneCompileDescriptionDE::PlayMap' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCompileDescriptionDE, Characters) == 0x000008, "Member 'FSSEventSceneCompileDescriptionDE::Characters' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCompileDescriptionDE, CutScenes) == 0x000018, "Member 'FSSEventSceneCompileDescriptionDE::CutScenes' has a wrong offset!");

// ScriptStruct SS.KoratSetPlayVoiceData
// 0x0010 (0x0010 - 0x0000)
struct FKoratSetPlayVoiceData final
{
public:
	TArray<struct FKoratSetPlayVoiceDataRecord>   SetInfo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSetPlayVoiceData) == 0x000008, "Wrong alignment on FKoratSetPlayVoiceData");
static_assert(sizeof(FKoratSetPlayVoiceData) == 0x000010, "Wrong size on FKoratSetPlayVoiceData");
static_assert(offsetof(FKoratSetPlayVoiceData, SetInfo) == 0x000000, "Member 'FKoratSetPlayVoiceData::SetInfo' has a wrong offset!");

// ScriptStruct SS.KoratSoundManageCompInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FKoratSoundManageCompInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSoundManageCompInfo) == 0x000004, "Wrong alignment on FKoratSoundManageCompInfo");
static_assert(sizeof(FKoratSoundManageCompInfo) == 0x000010, "Wrong size on FKoratSoundManageCompInfo");

// ScriptStruct SS.KoratSpeciesDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratSpeciesDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSpeciesDataAssetRecord) == 0x000008, "Wrong alignment on FKoratSpeciesDataAssetRecord");
static_assert(sizeof(FKoratSpeciesDataAssetRecord) == 0x000020, "Wrong size on FKoratSpeciesDataAssetRecord");
static_assert(offsetof(FKoratSpeciesDataAssetRecord, SortId) == 0x000000, "Member 'FKoratSpeciesDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratSpeciesDataAssetRecord, Name) == 0x000008, "Member 'FKoratSpeciesDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct SS.SSToonShadingSetting
// 0x0038 (0x0038 - 0x0000)
struct FSSToonShadingSetting final
{
public:
	TArray<struct FSSOutlineMeshSetting>          MeshSettings;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSLightingPositonMethod                      LightTargetEvaluationSpace;                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LightTargetEvaluationSpaceBone;                    // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightSourceEvaluationSpaceBone;                    // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSToonShadingSetting) == 0x000008, "Wrong alignment on FSSToonShadingSetting");
static_assert(sizeof(FSSToonShadingSetting) == 0x000038, "Wrong size on FSSToonShadingSetting");
static_assert(offsetof(FSSToonShadingSetting, MeshSettings) == 0x000000, "Member 'FSSToonShadingSetting::MeshSettings' has a wrong offset!");
static_assert(offsetof(FSSToonShadingSetting, OutlineColor) == 0x000010, "Member 'FSSToonShadingSetting::OutlineColor' has a wrong offset!");
static_assert(offsetof(FSSToonShadingSetting, LightTargetEvaluationSpace) == 0x000020, "Member 'FSSToonShadingSetting::LightTargetEvaluationSpace' has a wrong offset!");
static_assert(offsetof(FSSToonShadingSetting, LightTargetEvaluationSpaceBone) == 0x000024, "Member 'FSSToonShadingSetting::LightTargetEvaluationSpaceBone' has a wrong offset!");
static_assert(offsetof(FSSToonShadingSetting, LightSourceEvaluationSpaceBone) == 0x00002C, "Member 'FSSToonShadingSetting::LightSourceEvaluationSpaceBone' has a wrong offset!");

// ScriptStruct SS.KoratSubInstanceTagDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FKoratSubInstanceTagDataAssetRecord final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSubInstanceTagDataAssetRecord) == 0x000004, "Wrong alignment on FKoratSubInstanceTagDataAssetRecord");
static_assert(sizeof(FKoratSubInstanceTagDataAssetRecord) == 0x000008, "Wrong size on FKoratSubInstanceTagDataAssetRecord");
static_assert(offsetof(FKoratSubInstanceTagDataAssetRecord, TagName) == 0x000000, "Member 'FKoratSubInstanceTagDataAssetRecord::TagName' has a wrong offset!");

// ScriptStruct SS.KoratSurfaceAndSpaceRelateDataList
// 0x0018 (0x0018 - 0x0000)
struct FKoratSurfaceAndSpaceRelateDataList final
{
public:
	struct FKoratInteractAtbTypeDataList          Attribute;                                         // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratSpaceAreaTypeDataList            SpaceAttribute;                                    // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratInteractAtbTypeDataList          ReplaceAttribute;                                  // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSurfaceAndSpaceRelateDataList) == 0x000004, "Wrong alignment on FKoratSurfaceAndSpaceRelateDataList");
static_assert(sizeof(FKoratSurfaceAndSpaceRelateDataList) == 0x000018, "Wrong size on FKoratSurfaceAndSpaceRelateDataList");
static_assert(offsetof(FKoratSurfaceAndSpaceRelateDataList, Attribute) == 0x000000, "Member 'FKoratSurfaceAndSpaceRelateDataList::Attribute' has a wrong offset!");
static_assert(offsetof(FKoratSurfaceAndSpaceRelateDataList, SpaceAttribute) == 0x000008, "Member 'FKoratSurfaceAndSpaceRelateDataList::SpaceAttribute' has a wrong offset!");
static_assert(offsetof(FKoratSurfaceAndSpaceRelateDataList, ReplaceAttribute) == 0x000010, "Member 'FKoratSurfaceAndSpaceRelateDataList::ReplaceAttribute' has a wrong offset!");

// ScriptStruct SS.KoratTransformCopyControlInfo
// 0x000C (0x000C - 0x0000)
struct FKoratTransformCopyControlInfo final
{
public:
	class FName                                   TargetKey;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocation;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotation;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseScale;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratTransformCopyExecuteType                ExecuteType;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTransformCopyControlInfo) == 0x000004, "Wrong alignment on FKoratTransformCopyControlInfo");
static_assert(sizeof(FKoratTransformCopyControlInfo) == 0x00000C, "Wrong size on FKoratTransformCopyControlInfo");
static_assert(offsetof(FKoratTransformCopyControlInfo, TargetKey) == 0x000000, "Member 'FKoratTransformCopyControlInfo::TargetKey' has a wrong offset!");
static_assert(offsetof(FKoratTransformCopyControlInfo, bUseLocation) == 0x000008, "Member 'FKoratTransformCopyControlInfo::bUseLocation' has a wrong offset!");
static_assert(offsetof(FKoratTransformCopyControlInfo, bUseRotation) == 0x000009, "Member 'FKoratTransformCopyControlInfo::bUseRotation' has a wrong offset!");
static_assert(offsetof(FKoratTransformCopyControlInfo, bUseScale) == 0x00000A, "Member 'FKoratTransformCopyControlInfo::bUseScale' has a wrong offset!");
static_assert(offsetof(FKoratTransformCopyControlInfo, ExecuteType) == 0x00000B, "Member 'FKoratTransformCopyControlInfo::ExecuteType' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneSequenceCO
// 0x0010 (0x0010 - 0x0000)
struct FSSEventSceneSubsceneSequenceCO final
{
public:
	class ASSLevelSequenceActor*                  Instance;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneSubsceneSequenceCO) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneSequenceCO");
static_assert(sizeof(FSSEventSceneSubsceneSequenceCO) == 0x000010, "Wrong size on FSSEventSceneSubsceneSequenceCO");
static_assert(offsetof(FSSEventSceneSubsceneSequenceCO, Instance) == 0x000000, "Member 'FSSEventSceneSubsceneSequenceCO::Instance' has a wrong offset!");

// ScriptStruct SS.SSIntInequality
// 0x0008 (0x0008 - 0x0000)
struct FSSIntInequality final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratInequalitySignType                      Inequality;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSIntInequality) == 0x000004, "Wrong alignment on FSSIntInequality");
static_assert(sizeof(FSSIntInequality) == 0x000008, "Wrong size on FSSIntInequality");
static_assert(offsetof(FSSIntInequality, Num) == 0x000000, "Member 'FSSIntInequality::Num' has a wrong offset!");
static_assert(offsetof(FSSIntInequality, Inequality) == 0x000004, "Member 'FSSIntInequality::Inequality' has a wrong offset!");

// ScriptStruct SS.KoratTutorialDialog
// 0x0028 (0x0028 - 0x0000)
struct FKoratTutorialDialog final
{
public:
	TArray<struct FKoratBattleConversation>       Conversation;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHPPer;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSIntInequality                       HPCondition;                                       // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDistance;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSIntInequality                       DistanceCondition;                                 // 0x0020(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTutorialDialog) == 0x000008, "Wrong alignment on FKoratTutorialDialog");
static_assert(sizeof(FKoratTutorialDialog) == 0x000028, "Wrong size on FKoratTutorialDialog");
static_assert(offsetof(FKoratTutorialDialog, Conversation) == 0x000000, "Member 'FKoratTutorialDialog::Conversation' has a wrong offset!");
static_assert(offsetof(FKoratTutorialDialog, bHPPer) == 0x000010, "Member 'FKoratTutorialDialog::bHPPer' has a wrong offset!");
static_assert(offsetof(FKoratTutorialDialog, HPCondition) == 0x000014, "Member 'FKoratTutorialDialog::HPCondition' has a wrong offset!");
static_assert(offsetof(FKoratTutorialDialog, bDistance) == 0x00001C, "Member 'FKoratTutorialDialog::bDistance' has a wrong offset!");
static_assert(offsetof(FKoratTutorialDialog, DistanceCondition) == 0x000020, "Member 'FKoratTutorialDialog::DistanceCondition' has a wrong offset!");

// ScriptStruct SS.KoratUILevelTransition
// 0x0010 (0x0010 - 0x0000)
struct FKoratUILevelTransition final
{
public:
	class FName                                   Condition;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratUILevelDataList                  To;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUILevelTransition) == 0x000004, "Wrong alignment on FKoratUILevelTransition");
static_assert(sizeof(FKoratUILevelTransition) == 0x000010, "Wrong size on FKoratUILevelTransition");
static_assert(offsetof(FKoratUILevelTransition, Condition) == 0x000000, "Member 'FKoratUILevelTransition::Condition' has a wrong offset!");
static_assert(offsetof(FKoratUILevelTransition, To) == 0x000008, "Member 'FKoratUILevelTransition::To' has a wrong offset!");

// ScriptStruct SS.KoratUILevelCancelWidget
// 0x0060 (0x0060 - 0x0000)
struct FKoratUILevelCancelWidget final
{
public:
	TSoftClassPtr<class UClass>                   From;                                              // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   To;                                                // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUILevelCancelWidget) == 0x000008, "Wrong alignment on FKoratUILevelCancelWidget");
static_assert(sizeof(FKoratUILevelCancelWidget) == 0x000060, "Wrong size on FKoratUILevelCancelWidget");
static_assert(offsetof(FKoratUILevelCancelWidget, From) == 0x000000, "Member 'FKoratUILevelCancelWidget::From' has a wrong offset!");
static_assert(offsetof(FKoratUILevelCancelWidget, To) == 0x000030, "Member 'FKoratUILevelCancelWidget::To' has a wrong offset!");

// ScriptStruct SS.KoratUILevelDataAssetRecord
// 0x0098 (0x0098 - 0x0000)
struct FKoratUILevelDataAssetRecord final
{
public:
	TSoftObjectPtr<class UWorld>                  PersistentLevel;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratResetMode                               ResetMode;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnBattleCharacter;                             // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnMapCharacter;                                // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnChameleonForController;                      // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UWorld>>          SubLevelArray;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          ContainerSubLevelArray;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	ESSContainerSubLevelVisibleMode               ContainerSubLevelVisibleMode;                      // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratRestartMode                             RestartMode;                                       // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratMapDataList                      MapDataList;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSMapLoadType                                MapLoadType;                                       // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratUILevelTransition>        Transition;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratUILevelCancelWidget>      CancelWidget;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratMapStreamingPoolSizeData> StreamingPoolSizeData;                             // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratUILevelDataAssetRecord) == 0x000008, "Wrong alignment on FKoratUILevelDataAssetRecord");
static_assert(sizeof(FKoratUILevelDataAssetRecord) == 0x000098, "Wrong size on FKoratUILevelDataAssetRecord");
static_assert(offsetof(FKoratUILevelDataAssetRecord, PersistentLevel) == 0x000000, "Member 'FKoratUILevelDataAssetRecord::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, ResetMode) == 0x000030, "Member 'FKoratUILevelDataAssetRecord::ResetMode' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, bSpawnBattleCharacter) == 0x000031, "Member 'FKoratUILevelDataAssetRecord::bSpawnBattleCharacter' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, bSpawnMapCharacter) == 0x000032, "Member 'FKoratUILevelDataAssetRecord::bSpawnMapCharacter' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, bSpawnChameleonForController) == 0x000033, "Member 'FKoratUILevelDataAssetRecord::bSpawnChameleonForController' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, SubLevelArray) == 0x000038, "Member 'FKoratUILevelDataAssetRecord::SubLevelArray' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, ContainerSubLevelArray) == 0x000048, "Member 'FKoratUILevelDataAssetRecord::ContainerSubLevelArray' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, ContainerSubLevelVisibleMode) == 0x000058, "Member 'FKoratUILevelDataAssetRecord::ContainerSubLevelVisibleMode' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, RestartMode) == 0x000059, "Member 'FKoratUILevelDataAssetRecord::RestartMode' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, MapDataList) == 0x00005C, "Member 'FKoratUILevelDataAssetRecord::MapDataList' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, MapLoadType) == 0x000064, "Member 'FKoratUILevelDataAssetRecord::MapLoadType' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, Transition) == 0x000068, "Member 'FKoratUILevelDataAssetRecord::Transition' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, CancelWidget) == 0x000078, "Member 'FKoratUILevelDataAssetRecord::CancelWidget' has a wrong offset!");
static_assert(offsetof(FKoratUILevelDataAssetRecord, StreamingPoolSizeData) == 0x000088, "Member 'FKoratUILevelDataAssetRecord::StreamingPoolSizeData' has a wrong offset!");

// ScriptStruct SS.KoratVelocityLineEffectsDataAssetRecord
// 0x0040 (0x0040 - 0x0000)
struct FKoratVelocityLineEffectsDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          SequenceAsset;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratActionDataList>           UseActionType;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVelocityLineEffectsDataAssetRecord) == 0x000008, "Wrong alignment on FKoratVelocityLineEffectsDataAssetRecord");
static_assert(sizeof(FKoratVelocityLineEffectsDataAssetRecord) == 0x000040, "Wrong size on FKoratVelocityLineEffectsDataAssetRecord");
static_assert(offsetof(FKoratVelocityLineEffectsDataAssetRecord, SequenceAsset) == 0x000000, "Member 'FKoratVelocityLineEffectsDataAssetRecord::SequenceAsset' has a wrong offset!");
static_assert(offsetof(FKoratVelocityLineEffectsDataAssetRecord, UseActionType) == 0x000030, "Member 'FKoratVelocityLineEffectsDataAssetRecord::UseActionType' has a wrong offset!");

// ScriptStruct SS.KoratCustomVelocityLineEffectsDataReecord
// 0x0050 (0x0050 - 0x0000)
struct FKoratCustomVelocityLineEffectsDataReecord final
{
public:
	TMap<struct FKoratVelocityLineEffectDataList, struct FKoratVelocityLineEffectsDataAssetRecord> CustomRecoreds;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCustomVelocityLineEffectsDataReecord) == 0x000008, "Wrong alignment on FKoratCustomVelocityLineEffectsDataReecord");
static_assert(sizeof(FKoratCustomVelocityLineEffectsDataReecord) == 0x000050, "Wrong size on FKoratCustomVelocityLineEffectsDataReecord");
static_assert(offsetof(FKoratCustomVelocityLineEffectsDataReecord, CustomRecoreds) == 0x000000, "Member 'FKoratCustomVelocityLineEffectsDataReecord::CustomRecoreds' has a wrong offset!");

// ScriptStruct SS.KoratVersionPresetRecord
// 0x0058 (0x0058 - 0x0000)
struct FKoratVersionPresetRecord final
{
public:
	class FName                                   Description;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EVersionID>                              VersionSet;                                        // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVersionPresetRecord) == 0x000008, "Wrong alignment on FKoratVersionPresetRecord");
static_assert(sizeof(FKoratVersionPresetRecord) == 0x000058, "Wrong size on FKoratVersionPresetRecord");
static_assert(offsetof(FKoratVersionPresetRecord, Description) == 0x000000, "Member 'FKoratVersionPresetRecord::Description' has a wrong offset!");
static_assert(offsetof(FKoratVersionPresetRecord, VersionSet) == 0x000008, "Member 'FKoratVersionPresetRecord::VersionSet' has a wrong offset!");

// ScriptStruct SS.KoratVersionTraverse
// 0x0058 (0x0058 - 0x0000)
struct FKoratVersionTraverse final
{
public:
	class UKoratVersionPresetDataAsset*           VersionPresetDataAsset;                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EVersionID>                              VersionSet;                                        // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratVersionTraverse) == 0x000008, "Wrong alignment on FKoratVersionTraverse");
static_assert(sizeof(FKoratVersionTraverse) == 0x000058, "Wrong size on FKoratVersionTraverse");
static_assert(offsetof(FKoratVersionTraverse, VersionPresetDataAsset) == 0x000000, "Member 'FKoratVersionTraverse::VersionPresetDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratVersionTraverse, VersionSet) == 0x000008, "Member 'FKoratVersionTraverse::VersionSet' has a wrong offset!");

// ScriptStruct SS.KoratViewSwitchSkeltalPair
// 0x0010 (0x0010 - 0x0000)
struct FKoratViewSwitchSkeltalPair final
{
public:
	class FName                                   MeshTag;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShadowTag;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratViewSwitchSkeltalPair) == 0x000004, "Wrong alignment on FKoratViewSwitchSkeltalPair");
static_assert(sizeof(FKoratViewSwitchSkeltalPair) == 0x000010, "Wrong size on FKoratViewSwitchSkeltalPair");
static_assert(offsetof(FKoratViewSwitchSkeltalPair, MeshTag) == 0x000000, "Member 'FKoratViewSwitchSkeltalPair::MeshTag' has a wrong offset!");
static_assert(offsetof(FKoratViewSwitchSkeltalPair, ShadowTag) == 0x000008, "Member 'FKoratViewSwitchSkeltalPair::ShadowTag' has a wrong offset!");

// ScriptStruct SS.KoratWaterEffectScaleSetting
// 0x0010 (0x0010 - 0x0000)
struct FKoratWaterEffectScaleSetting final
{
public:
	float                                         MinSize;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSize;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScale;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScale;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWaterEffectScaleSetting) == 0x000004, "Wrong alignment on FKoratWaterEffectScaleSetting");
static_assert(sizeof(FKoratWaterEffectScaleSetting) == 0x000010, "Wrong size on FKoratWaterEffectScaleSetting");
static_assert(offsetof(FKoratWaterEffectScaleSetting, MinSize) == 0x000000, "Member 'FKoratWaterEffectScaleSetting::MinSize' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectScaleSetting, MaxSize) == 0x000004, "Member 'FKoratWaterEffectScaleSetting::MaxSize' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectScaleSetting, MinScale) == 0x000008, "Member 'FKoratWaterEffectScaleSetting::MinScale' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectScaleSetting, MaxScale) == 0x00000C, "Member 'FKoratWaterEffectScaleSetting::MaxScale' has a wrong offset!");

// ScriptStruct SS.KoratWaterEffectDataCharacterRecord
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratWaterEffectDataCharacterRecord final
{
public:
	float                                         MoreSize;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreVerticalSpeed;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreHorizontalSpeed;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExit;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EKoratActionCategoryType>                ActCategory;                                       // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSizeScale;                                  // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratWaterEffectScaleSetting          SizeScaleSetting;                                  // 0x00A4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratWaterEffectDataCharacterRecord) == 0x000008, "Wrong alignment on FKoratWaterEffectDataCharacterRecord");
static_assert(sizeof(FKoratWaterEffectDataCharacterRecord) == 0x0000B8, "Wrong size on FKoratWaterEffectDataCharacterRecord");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, MoreSize) == 0x000000, "Member 'FKoratWaterEffectDataCharacterRecord::MoreSize' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, MoreSpeed) == 0x000004, "Member 'FKoratWaterEffectDataCharacterRecord::MoreSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, MoreVerticalSpeed) == 0x000008, "Member 'FKoratWaterEffectDataCharacterRecord::MoreVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, MoreHorizontalSpeed) == 0x00000C, "Member 'FKoratWaterEffectDataCharacterRecord::MoreHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, bExit) == 0x000010, "Member 'FKoratWaterEffectDataCharacterRecord::bExit' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, ActCategory) == 0x000018, "Member 'FKoratWaterEffectDataCharacterRecord::ActCategory' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, LevelSequence) == 0x000068, "Member 'FKoratWaterEffectDataCharacterRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, bDirect) == 0x000098, "Member 'FKoratWaterEffectDataCharacterRecord::bDirect' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, Scale) == 0x00009C, "Member 'FKoratWaterEffectDataCharacterRecord::Scale' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, bEnableSizeScale) == 0x0000A0, "Member 'FKoratWaterEffectDataCharacterRecord::bEnableSizeScale' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectDataCharacterRecord, SizeScaleSetting) == 0x0000A4, "Member 'FKoratWaterEffectDataCharacterRecord::SizeScaleSetting' has a wrong offset!");

// ScriptStruct SS.KoratWaterEffectBulletDataRecord
// 0x0068 (0x0068 - 0x0000)
struct FKoratWaterEffectBulletDataRecord final
{
public:
	float                                         MoreSize;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreVerticalSpeed;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoreHorizontalSpeed;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExit;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlast;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirect;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSizeScale;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratWaterEffectScaleSetting          SizeScaleSetting;                                  // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratWaterEffectBulletDataRecord) == 0x000008, "Wrong alignment on FKoratWaterEffectBulletDataRecord");
static_assert(sizeof(FKoratWaterEffectBulletDataRecord) == 0x000068, "Wrong size on FKoratWaterEffectBulletDataRecord");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, MoreSize) == 0x000000, "Member 'FKoratWaterEffectBulletDataRecord::MoreSize' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, MoreSpeed) == 0x000004, "Member 'FKoratWaterEffectBulletDataRecord::MoreSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, MoreVerticalSpeed) == 0x000008, "Member 'FKoratWaterEffectBulletDataRecord::MoreVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, MoreHorizontalSpeed) == 0x00000C, "Member 'FKoratWaterEffectBulletDataRecord::MoreHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, bExit) == 0x000010, "Member 'FKoratWaterEffectBulletDataRecord::bExit' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, bIsBlast) == 0x000011, "Member 'FKoratWaterEffectBulletDataRecord::bIsBlast' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, LevelSequence) == 0x000018, "Member 'FKoratWaterEffectBulletDataRecord::LevelSequence' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, bDirect) == 0x000048, "Member 'FKoratWaterEffectBulletDataRecord::bDirect' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, Scale) == 0x00004C, "Member 'FKoratWaterEffectBulletDataRecord::Scale' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, bEnableSizeScale) == 0x000050, "Member 'FKoratWaterEffectBulletDataRecord::bEnableSizeScale' has a wrong offset!");
static_assert(offsetof(FKoratWaterEffectBulletDataRecord, SizeScaleSetting) == 0x000054, "Member 'FKoratWaterEffectBulletDataRecord::SizeScaleSetting' has a wrong offset!");

// ScriptStruct SS.CharacterModeParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FCharacterModeParam final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterModeParam) == 0x000004, "Wrong alignment on FCharacterModeParam");
static_assert(sizeof(FCharacterModeParam) == 0x000018, "Wrong size on FCharacterModeParam");

// ScriptStruct SS.WeatherChrModeParam
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FWeatherChrModeParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherChrModeParam) == 0x000004, "Wrong alignment on FWeatherChrModeParam");
static_assert(sizeof(FWeatherChrModeParam) == 0x00001C, "Wrong size on FWeatherChrModeParam");

// ScriptStruct SS.WeatherChrModeParamStack
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FWeatherChrModeParamStack final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherChrModeParamStack) == 0x000008, "Wrong alignment on FWeatherChrModeParamStack");
static_assert(sizeof(FWeatherChrModeParamStack) == 0x000030, "Wrong size on FWeatherChrModeParamStack");

// ScriptStruct SS.KoratWindMotorDataAssetRecord
// 0x0038 (0x0038 - 0x0000)
struct FKoratWindMotorDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Component;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KoratWindSpeed;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWindMotorDataAssetRecord) == 0x000008, "Wrong alignment on FKoratWindMotorDataAssetRecord");
static_assert(sizeof(FKoratWindMotorDataAssetRecord) == 0x000038, "Wrong size on FKoratWindMotorDataAssetRecord");
static_assert(offsetof(FKoratWindMotorDataAssetRecord, Component) == 0x000000, "Member 'FKoratWindMotorDataAssetRecord::Component' has a wrong offset!");
static_assert(offsetof(FKoratWindMotorDataAssetRecord, Radius) == 0x000030, "Member 'FKoratWindMotorDataAssetRecord::Radius' has a wrong offset!");
static_assert(offsetof(FKoratWindMotorDataAssetRecord, KoratWindSpeed) == 0x000034, "Member 'FKoratWindMotorDataAssetRecord::KoratWindSpeed' has a wrong offset!");

// ScriptStruct SS.WindMotorOutputs
// 0x0018 (0x0018 - 0x0000)
struct FWindMotorOutputs final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Outputs;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindMotorOutputs) == 0x000008, "Wrong alignment on FWindMotorOutputs");
static_assert(sizeof(FWindMotorOutputs) == 0x000018, "Wrong size on FWindMotorOutputs");
static_assert(offsetof(FWindMotorOutputs, Radius) == 0x000000, "Member 'FWindMotorOutputs::Radius' has a wrong offset!");
static_assert(offsetof(FWindMotorOutputs, Outputs) == 0x000008, "Member 'FWindMotorOutputs::Outputs' has a wrong offset!");

// ScriptStruct SS.WindMotorOutputCharacteristics
// 0x0010 (0x0010 - 0x0000)
struct FWindMotorOutputCharacteristics final
{
public:
	TArray<struct FWindMotorOutputs>              RadiusPower;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindMotorOutputCharacteristics) == 0x000008, "Wrong alignment on FWindMotorOutputCharacteristics");
static_assert(sizeof(FWindMotorOutputCharacteristics) == 0x000010, "Wrong size on FWindMotorOutputCharacteristics");
static_assert(offsetof(FWindMotorOutputCharacteristics, RadiusPower) == 0x000000, "Member 'FWindMotorOutputCharacteristics::RadiusPower' has a wrong offset!");

// ScriptStruct SS.KoratWindData
// 0x0030 (0x0030 - 0x0000)
struct FKoratWindData final
{
public:
	bool                                          bPointWind;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustAmount;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustAmount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWindData) == 0x000008, "Wrong alignment on FKoratWindData");
static_assert(sizeof(FKoratWindData) == 0x000030, "Wrong size on FKoratWindData");
static_assert(offsetof(FKoratWindData, bPointWind) == 0x000000, "Member 'FKoratWindData::bPointWind' has a wrong offset!");
static_assert(offsetof(FKoratWindData, Radius) == 0x000004, "Member 'FKoratWindData::Radius' has a wrong offset!");
static_assert(offsetof(FKoratWindData, Speed) == 0x000008, "Member 'FKoratWindData::Speed' has a wrong offset!");
static_assert(offsetof(FKoratWindData, Strength) == 0x00000C, "Member 'FKoratWindData::Strength' has a wrong offset!");
static_assert(offsetof(FKoratWindData, MinGustAmount) == 0x000010, "Member 'FKoratWindData::MinGustAmount' has a wrong offset!");
static_assert(offsetof(FKoratWindData, MaxGustAmount) == 0x000014, "Member 'FKoratWindData::MaxGustAmount' has a wrong offset!");
static_assert(offsetof(FKoratWindData, Direction) == 0x000018, "Member 'FKoratWindData::Direction' has a wrong offset!");

// ScriptStruct SS.MovieSceneKoratParameterSectionTemplate
// 0x0000 (0x0080 - 0x0080)
struct FMovieSceneKoratParameterSectionTemplate final : public FMovieSceneParameterSectionTemplate
{
};
static_assert(alignof(FMovieSceneKoratParameterSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneKoratParameterSectionTemplate");
static_assert(sizeof(FMovieSceneKoratParameterSectionTemplate) == 0x000080, "Wrong size on FMovieSceneKoratParameterSectionTemplate");

// ScriptStruct SS.MovieSceneKoratToonPointLightSectionTemplate
// 0x0020 (0x00A0 - 0x0080)
struct FMovieSceneKoratToonPointLightSectionTemplate final : public FMovieSceneParameterSectionTemplate
{
public:
	TArray<struct FKoratByteParameterNameAndCurve> Bytes;                                             // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKoratIntParameterNameAndCurve> Integers;                                          // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneKoratToonPointLightSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneKoratToonPointLightSectionTemplate");
static_assert(sizeof(FMovieSceneKoratToonPointLightSectionTemplate) == 0x0000A0, "Wrong size on FMovieSceneKoratToonPointLightSectionTemplate");
static_assert(offsetof(FMovieSceneKoratToonPointLightSectionTemplate, Bytes) == 0x000080, "Member 'FMovieSceneKoratToonPointLightSectionTemplate::Bytes' has a wrong offset!");
static_assert(offsetof(FMovieSceneKoratToonPointLightSectionTemplate, Integers) == 0x000090, "Member 'FMovieSceneKoratToonPointLightSectionTemplate::Integers' has a wrong offset!");

// ScriptStruct SS.MovieSceneTrailsSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieSceneTrailsSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	class FName                                   FirstSocketName;                                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthScaleMode;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFrameRange                  SectionRange;                                      // 0x0034(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         WidthScaleScalar;                                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTrailsSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneTrailsSectionTemplate");
static_assert(sizeof(FMovieSceneTrailsSectionTemplate) == 0x000048, "Wrong size on FMovieSceneTrailsSectionTemplate");
static_assert(offsetof(FMovieSceneTrailsSectionTemplate, FirstSocketName) == 0x000020, "Member 'FMovieSceneTrailsSectionTemplate::FirstSocketName' has a wrong offset!");
static_assert(offsetof(FMovieSceneTrailsSectionTemplate, SecondSocketName) == 0x000028, "Member 'FMovieSceneTrailsSectionTemplate::SecondSocketName' has a wrong offset!");
static_assert(offsetof(FMovieSceneTrailsSectionTemplate, WidthScaleMode) == 0x000030, "Member 'FMovieSceneTrailsSectionTemplate::WidthScaleMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneTrailsSectionTemplate, SectionRange) == 0x000034, "Member 'FMovieSceneTrailsSectionTemplate::SectionRange' has a wrong offset!");
static_assert(offsetof(FMovieSceneTrailsSectionTemplate, WidthScaleScalar) == 0x000044, "Member 'FMovieSceneTrailsSectionTemplate::WidthScaleScalar' has a wrong offset!");

// ScriptStruct SS.SequenceActorSpawnParameters
// 0x02F0 (0x02F0 - 0x0000)
struct FSequenceActorSpawnParameters final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ExecuteActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlaySeq;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLooped;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagedId;                                         // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindPlayer;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerTransformTrack;                       // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerAnimationTrack;                       // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransform;                                // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OverrideTransform;                                 // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverrideTransformActor;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayExec;                                         // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CancelSequence;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDataKey;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterEffectColorSetData      CharacterEffectColorSetData;                       // 0x00D0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          HasCharacterEffectColorData;                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratEffectMultipleColorData          CharacterEffectMultipleColorData;                  // 0x00E0(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        PhysicalDisparityCharacterIDS;                     // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterPointLightData          WorldPointLightData;                               // 0x0218(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          HasWorldPointLightData;                            // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLerpTimeStart;                               // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLerpTimeEnd;                                 // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraSlot;                                        // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraBranch;                                      // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualCameraReconnect;                             // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCameraRootTransform;                            // 0x024D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CameraRootTransformActor;                          // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraRootTransform;                               // 0x0260(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoUseOwnerCutDirector;                             // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayConnectTime;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRegistCustomTimeDilation;                        // 0x02C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  OptionRebindOverrideTransformRotate;               // 0x02D0(0x0020)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequenceActorSpawnParameters) == 0x000010, "Wrong alignment on FSequenceActorSpawnParameters");
static_assert(sizeof(FSequenceActorSpawnParameters) == 0x0002F0, "Wrong size on FSequenceActorSpawnParameters");
static_assert(offsetof(FSequenceActorSpawnParameters, World) == 0x000000, "Member 'FSequenceActorSpawnParameters::World' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OwnerActor) == 0x000008, "Member 'FSequenceActorSpawnParameters::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ExecuteActor) == 0x000010, "Member 'FSequenceActorSpawnParameters::ExecuteActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, LevelSequence) == 0x000018, "Member 'FSequenceActorSpawnParameters::LevelSequence' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, PlaySeq) == 0x000020, "Member 'FSequenceActorSpawnParameters::PlaySeq' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bLooped) == 0x000030, "Member 'FSequenceActorSpawnParameters::bLooped' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bPauseAtEnd) == 0x000031, "Member 'FSequenceActorSpawnParameters::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ManagedId) == 0x000034, "Member 'FSequenceActorSpawnParameters::ManagedId' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, StartFrame) == 0x00003C, "Member 'FSequenceActorSpawnParameters::StartFrame' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bRebindPlayer) == 0x000040, "Member 'FSequenceActorSpawnParameters::bRebindPlayer' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bEnablePlayerTransformTrack) == 0x000041, "Member 'FSequenceActorSpawnParameters::bEnablePlayerTransformTrack' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bEnablePlayerAnimationTrack) == 0x000042, "Member 'FSequenceActorSpawnParameters::bEnablePlayerAnimationTrack' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bOverrideTransform) == 0x000043, "Member 'FSequenceActorSpawnParameters::bOverrideTransform' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OverrideTransform) == 0x000050, "Member 'FSequenceActorSpawnParameters::OverrideTransform' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OverrideTransformActor) == 0x0000B0, "Member 'FSequenceActorSpawnParameters::OverrideTransformActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, bPlayExec) == 0x0000B8, "Member 'FSequenceActorSpawnParameters::bPlayExec' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CancelSequence) == 0x0000C0, "Member 'FSequenceActorSpawnParameters::CancelSequence' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ActionDataKey) == 0x0000C8, "Member 'FSequenceActorSpawnParameters::ActionDataKey' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CharacterEffectColorSetData) == 0x0000D0, "Member 'FSequenceActorSpawnParameters::CharacterEffectColorSetData' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, HasCharacterEffectColorData) == 0x0000D8, "Member 'FSequenceActorSpawnParameters::HasCharacterEffectColorData' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CharacterEffectMultipleColorData) == 0x0000E0, "Member 'FSequenceActorSpawnParameters::CharacterEffectMultipleColorData' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, PhysicalDisparityCharacterIDS) == 0x000208, "Member 'FSequenceActorSpawnParameters::PhysicalDisparityCharacterIDS' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, WorldPointLightData) == 0x000218, "Member 'FSequenceActorSpawnParameters::WorldPointLightData' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, HasWorldPointLightData) == 0x000238, "Member 'FSequenceActorSpawnParameters::HasWorldPointLightData' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraLerpTimeStart) == 0x00023C, "Member 'FSequenceActorSpawnParameters::CameraLerpTimeStart' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraLerpTimeEnd) == 0x000240, "Member 'FSequenceActorSpawnParameters::CameraLerpTimeEnd' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraSlot) == 0x000244, "Member 'FSequenceActorSpawnParameters::CameraSlot' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraBranch) == 0x000248, "Member 'FSequenceActorSpawnParameters::CameraBranch' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, ManualCameraReconnect) == 0x00024C, "Member 'FSequenceActorSpawnParameters::ManualCameraReconnect' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, UseCameraRootTransform) == 0x00024D, "Member 'FSequenceActorSpawnParameters::UseCameraRootTransform' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraRootTransformActor) == 0x000250, "Member 'FSequenceActorSpawnParameters::CameraRootTransformActor' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, CameraRootTransform) == 0x000260, "Member 'FSequenceActorSpawnParameters::CameraRootTransform' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, NoUseOwnerCutDirector) == 0x0002C0, "Member 'FSequenceActorSpawnParameters::NoUseOwnerCutDirector' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, DelayConnectTime) == 0x0002C4, "Member 'FSequenceActorSpawnParameters::DelayConnectTime' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, IsRegistCustomTimeDilation) == 0x0002C8, "Member 'FSequenceActorSpawnParameters::IsRegistCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnParameters, OptionRebindOverrideTransformRotate) == 0x0002D0, "Member 'FSequenceActorSpawnParameters::OptionRebindOverrideTransformRotate' has a wrong offset!");

// ScriptStruct SS.SSRankingResourceDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSRankingResourceDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Resource;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSRankingResourceDataAssetRecord) == 0x000008, "Wrong alignment on FSSRankingResourceDataAssetRecord");
static_assert(sizeof(FSSRankingResourceDataAssetRecord) == 0x000030, "Wrong size on FSSRankingResourceDataAssetRecord");
static_assert(offsetof(FSSRankingResourceDataAssetRecord, Resource) == 0x000000, "Member 'FSSRankingResourceDataAssetRecord::Resource' has a wrong offset!");

// ScriptStruct SS.KoratSequenceResource
// 0x0020 (0x0020 - 0x0000)
struct FKoratSequenceResource final
{
public:
	class ULevelSequence*                         TemplateSequence;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         TemplateCancelSequnce;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSCharacter>            RootCharacter;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionDataKey;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSequenceResource) == 0x000008, "Wrong alignment on FKoratSequenceResource");
static_assert(sizeof(FKoratSequenceResource) == 0x000020, "Wrong size on FKoratSequenceResource");
static_assert(offsetof(FKoratSequenceResource, TemplateSequence) == 0x000000, "Member 'FKoratSequenceResource::TemplateSequence' has a wrong offset!");
static_assert(offsetof(FKoratSequenceResource, TemplateCancelSequnce) == 0x000008, "Member 'FKoratSequenceResource::TemplateCancelSequnce' has a wrong offset!");
static_assert(offsetof(FKoratSequenceResource, RootCharacter) == 0x000010, "Member 'FKoratSequenceResource::RootCharacter' has a wrong offset!");
static_assert(offsetof(FKoratSequenceResource, ActionDataKey) == 0x000018, "Member 'FKoratSequenceResource::ActionDataKey' has a wrong offset!");

// ScriptStruct SS.SSPowerImpactCameraRecord
// 0x0090 (0x0090 - 0x0000)
struct FSSPowerImpactCameraRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Prepare;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Game;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          END;                                               // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPowerImpactCameraRecord) == 0x000008, "Wrong alignment on FSSPowerImpactCameraRecord");
static_assert(sizeof(FSSPowerImpactCameraRecord) == 0x000090, "Wrong size on FSSPowerImpactCameraRecord");
static_assert(offsetof(FSSPowerImpactCameraRecord, Prepare) == 0x000000, "Member 'FSSPowerImpactCameraRecord::Prepare' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactCameraRecord, Game) == 0x000030, "Member 'FSSPowerImpactCameraRecord::Game' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactCameraRecord, END) == 0x000060, "Member 'FSSPowerImpactCameraRecord::END' has a wrong offset!");

// ScriptStruct SS.KoratLevelSequenceActorSpawnParameters
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FKoratLevelSequenceActorSpawnParameters final
{
public:
	class UObject*                                SpawnContext;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnOwner;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ManagedId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratSequenceResource                 ResourceData;                                      // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x88];                                      // 0x0038(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratLevelSequenceActorSpawnParameters) == 0x000010, "Wrong alignment on FKoratLevelSequenceActorSpawnParameters");
static_assert(sizeof(FKoratLevelSequenceActorSpawnParameters) == 0x0000C0, "Wrong size on FKoratLevelSequenceActorSpawnParameters");
static_assert(offsetof(FKoratLevelSequenceActorSpawnParameters, SpawnContext) == 0x000000, "Member 'FKoratLevelSequenceActorSpawnParameters::SpawnContext' has a wrong offset!");
static_assert(offsetof(FKoratLevelSequenceActorSpawnParameters, SpawnOwner) == 0x000008, "Member 'FKoratLevelSequenceActorSpawnParameters::SpawnOwner' has a wrong offset!");
static_assert(offsetof(FKoratLevelSequenceActorSpawnParameters, ManagedId) == 0x000010, "Member 'FKoratLevelSequenceActorSpawnParameters::ManagedId' has a wrong offset!");
static_assert(offsetof(FKoratLevelSequenceActorSpawnParameters, ResourceData) == 0x000018, "Member 'FKoratLevelSequenceActorSpawnParameters::ResourceData' has a wrong offset!");

// ScriptStruct SS.KoratRebindDescription
// 0x0028 (0x0028 - 0x0000)
struct FKoratRebindDescription final
{
public:
	class FString                                 RebindMakerRegexName;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  RebindActor;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMovieSceneTrack>>   DisableTracks;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRebindDescription) == 0x000008, "Wrong alignment on FKoratRebindDescription");
static_assert(sizeof(FKoratRebindDescription) == 0x000028, "Wrong size on FKoratRebindDescription");
static_assert(offsetof(FKoratRebindDescription, RebindMakerRegexName) == 0x000000, "Member 'FKoratRebindDescription::RebindMakerRegexName' has a wrong offset!");
static_assert(offsetof(FKoratRebindDescription, RebindActor) == 0x000010, "Member 'FKoratRebindDescription::RebindActor' has a wrong offset!");
static_assert(offsetof(FKoratRebindDescription, DisableTracks) == 0x000018, "Member 'FKoratRebindDescription::DisableTracks' has a wrong offset!");

// ScriptStruct SS.KoratRebindDescriptionByTag
// 0x0028 (0x0028 - 0x0000)
struct FKoratRebindDescriptionByTag final
{
public:
	class FName                                   BindingTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  RebindActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ObjectBindingID;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRebindDescriptionByTag) == 0x000004, "Wrong alignment on FKoratRebindDescriptionByTag");
static_assert(sizeof(FKoratRebindDescriptionByTag) == 0x000028, "Wrong size on FKoratRebindDescriptionByTag");
static_assert(offsetof(FKoratRebindDescriptionByTag, BindingTag) == 0x000000, "Member 'FKoratRebindDescriptionByTag::BindingTag' has a wrong offset!");
static_assert(offsetof(FKoratRebindDescriptionByTag, RebindActor) == 0x000008, "Member 'FKoratRebindDescriptionByTag::RebindActor' has a wrong offset!");
static_assert(offsetof(FKoratRebindDescriptionByTag, ObjectBindingID) == 0x000010, "Member 'FKoratRebindDescriptionByTag::ObjectBindingID' has a wrong offset!");

// ScriptStruct SS.KoratOverrideTransformDescription
// 0x0070 (0x0070 - 0x0000)
struct FKoratOverrideTransformDescription final
{
public:
	struct FTransform                             OverrideTransform;                                 // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  OverrideTransformActor;                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratOverrideTransformDescription) == 0x000010, "Wrong alignment on FKoratOverrideTransformDescription");
static_assert(sizeof(FKoratOverrideTransformDescription) == 0x000070, "Wrong size on FKoratOverrideTransformDescription");
static_assert(offsetof(FKoratOverrideTransformDescription, OverrideTransform) == 0x000000, "Member 'FKoratOverrideTransformDescription::OverrideTransform' has a wrong offset!");
static_assert(offsetof(FKoratOverrideTransformDescription, OverrideTransformActor) == 0x000060, "Member 'FKoratOverrideTransformDescription::OverrideTransformActor' has a wrong offset!");

// ScriptStruct SS.KoratSequencePlayDescription
// 0x0018 (0x0018 - 0x0000)
struct FKoratSequencePlayDescription final
{
public:
	bool                                          bSequenceLoop;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomTimeDilation;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayExec;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSequencePlayInfo>         PlaySection;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratSequencePlayDescription) == 0x000008, "Wrong alignment on FKoratSequencePlayDescription");
static_assert(sizeof(FKoratSequencePlayDescription) == 0x000018, "Wrong size on FKoratSequencePlayDescription");
static_assert(offsetof(FKoratSequencePlayDescription, bSequenceLoop) == 0x000000, "Member 'FKoratSequencePlayDescription::bSequenceLoop' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayDescription, bPauseAtEnd) == 0x000001, "Member 'FKoratSequencePlayDescription::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayDescription, bCustomTimeDilation) == 0x000002, "Member 'FKoratSequencePlayDescription::bCustomTimeDilation' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayDescription, bAutoPlayExec) == 0x000003, "Member 'FKoratSequencePlayDescription::bAutoPlayExec' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayDescription, StartFrame) == 0x000004, "Member 'FKoratSequencePlayDescription::StartFrame' has a wrong offset!");
static_assert(offsetof(FKoratSequencePlayDescription, PlaySection) == 0x000008, "Member 'FKoratSequencePlayDescription::PlaySection' has a wrong offset!");

// ScriptStruct SS.KoratEtcResources
// 0x02C8 (0x02C8 - 0x0000)
struct FKoratEtcResources final
{
public:
	bool                                          HasCharacterEffectColorData;                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasWorldPointLightData;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterEffectColorSetData      CharacterEffectColorSetData;                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratEffectMultipleColorData          CharacterEffectMultipleColorData;                  // 0x0010(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratEffectColorDataDetail            CharacterEffectColorDeataDetail;                   // 0x0138(0x0148)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratCharacterPointLightData          WorldPointLightData;                               // 0x0280(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratInteractAttributeData            EffectInteractData;                                // 0x02A0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x4];                                      // 0x02B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASSCharacter>            SourceCharacter;                                   // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEtcResources) == 0x000008, "Wrong alignment on FKoratEtcResources");
static_assert(sizeof(FKoratEtcResources) == 0x0002C8, "Wrong size on FKoratEtcResources");
static_assert(offsetof(FKoratEtcResources, HasCharacterEffectColorData) == 0x000000, "Member 'FKoratEtcResources::HasCharacterEffectColorData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, HasWorldPointLightData) == 0x000001, "Member 'FKoratEtcResources::HasWorldPointLightData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, CharacterEffectColorSetData) == 0x000008, "Member 'FKoratEtcResources::CharacterEffectColorSetData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, CharacterEffectMultipleColorData) == 0x000010, "Member 'FKoratEtcResources::CharacterEffectMultipleColorData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, CharacterEffectColorDeataDetail) == 0x000138, "Member 'FKoratEtcResources::CharacterEffectColorDeataDetail' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, WorldPointLightData) == 0x000280, "Member 'FKoratEtcResources::WorldPointLightData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, EffectInteractData) == 0x0002A0, "Member 'FKoratEtcResources::EffectInteractData' has a wrong offset!");
static_assert(offsetof(FKoratEtcResources, SourceCharacter) == 0x0002BC, "Member 'FKoratEtcResources::SourceCharacter' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter
// 0x0018 (0x0018 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter final
{
public:
	ESSDramaticBattleCutEditorFunctionOperationType FunctionOperation;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSDramaticBattleCutEditorFunctionParameterType FunctionParameter;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSDramaticBattleCutEditorUIWindowController* UIController;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSDramaticBattleCutEditorController*   CutEditorController;                               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter) == 0x000018, "Wrong size on FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter, FunctionOperation) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter::FunctionOperation' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter, FunctionParameter) == 0x000001, "Member 'FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter::FunctionParameter' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter, UIController) == 0x000008, "Member 'FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter::UIController' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter, CutEditorController) == 0x000010, "Member 'FSSDramaticBattleCutEditorUIWindowItemFunctionInitializeParameter::CutEditorController' has a wrong offset!");

// ScriptStruct SS.KoratSequenceCameraDescription
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratSequenceCameraDescription final
{
public:
	float                                         CameraLerpTimeStart;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLerpTimeEnd;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraSlot;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraBranch;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualCameraReconnect;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCameraRootTransform;                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CameraRootTransformActor;                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CameraRootTransform;                               // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoUseOwnerCutDirector;                             // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayConnectTime;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        PhysicalDisparityCharacterIDS;                     // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequenceCameraDescription) == 0x000010, "Wrong alignment on FKoratSequenceCameraDescription");
static_assert(sizeof(FKoratSequenceCameraDescription) == 0x0000A0, "Wrong size on FKoratSequenceCameraDescription");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraLerpTimeStart) == 0x000000, "Member 'FKoratSequenceCameraDescription::CameraLerpTimeStart' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraLerpTimeEnd) == 0x000004, "Member 'FKoratSequenceCameraDescription::CameraLerpTimeEnd' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraSlot) == 0x000008, "Member 'FKoratSequenceCameraDescription::CameraSlot' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraBranch) == 0x00000C, "Member 'FKoratSequenceCameraDescription::CameraBranch' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, ManualCameraReconnect) == 0x000010, "Member 'FKoratSequenceCameraDescription::ManualCameraReconnect' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, UseCameraRootTransform) == 0x000011, "Member 'FKoratSequenceCameraDescription::UseCameraRootTransform' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraRootTransformActor) == 0x000018, "Member 'FKoratSequenceCameraDescription::CameraRootTransformActor' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, CameraRootTransform) == 0x000020, "Member 'FKoratSequenceCameraDescription::CameraRootTransform' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, NoUseOwnerCutDirector) == 0x000080, "Member 'FKoratSequenceCameraDescription::NoUseOwnerCutDirector' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, DelayConnectTime) == 0x000084, "Member 'FKoratSequenceCameraDescription::DelayConnectTime' has a wrong offset!");
static_assert(offsetof(FKoratSequenceCameraDescription, PhysicalDisparityCharacterIDS) == 0x000088, "Member 'FKoratSequenceCameraDescription::PhysicalDisparityCharacterIDS' has a wrong offset!");

// ScriptStruct SS.KoratShopBannerTextureInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FKoratShopBannerTextureInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratShopBannerTextureInfo) == 0x000008, "Wrong alignment on FKoratShopBannerTextureInfo");
static_assert(sizeof(FKoratShopBannerTextureInfo) == 0x000018, "Wrong size on FKoratShopBannerTextureInfo");

// ScriptStruct SS.SS3DModelUIDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FSS3DModelUIDataAssetRecord final
{
public:
	class ULevelSequence*                         Sequencer;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSS3DModelUIDataAssetRecord) == 0x000008, "Wrong alignment on FSS3DModelUIDataAssetRecord");
static_assert(sizeof(FSS3DModelUIDataAssetRecord) == 0x000008, "Wrong size on FSS3DModelUIDataAssetRecord");
static_assert(offsetof(FSS3DModelUIDataAssetRecord, Sequencer) == 0x000000, "Member 'FSS3DModelUIDataAssetRecord::Sequencer' has a wrong offset!");

// ScriptStruct SS.SSReplayDataUIInfo
// 0x00D8 (0x00D8 - 0x0000)
struct FSSReplayDataUIInfo final
{
public:
	int32                                         ReplayDataUIInfoVersion;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSReplayDataUIBattleMode                     UIBattleMode;                                      // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBattlePlayMap                    BattlePlayMap;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattlePlayCharacter>      Players;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattlePlayCharacter>      Opponents;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESSReplayDataUWinLose                         WinLose;                                           // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FavoriteMark;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveDate;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorVersionInt;                                   // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentVersionInt;                                 // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveDataVersionInt;                                // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVersionInt;                                  // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleVersion;                                     // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleVersionInt;                                  // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OnlineHostUserName;                                // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineHostUserId;                                  // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineGuestUserName;                               // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineGuestUserId;                                 // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLiveCommentary;                                   // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SideIcon;                                          // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PlaybackTime;                                      // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSReplayDataUIInfo) == 0x000008, "Wrong alignment on FSSReplayDataUIInfo");
static_assert(sizeof(FSSReplayDataUIInfo) == 0x0000D8, "Wrong size on FSSReplayDataUIInfo");
static_assert(offsetof(FSSReplayDataUIInfo, ReplayDataUIInfoVersion) == 0x000000, "Member 'FSSReplayDataUIInfo::ReplayDataUIInfoVersion' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, IsNew) == 0x000004, "Member 'FSSReplayDataUIInfo::IsNew' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, UIBattleMode) == 0x000005, "Member 'FSSReplayDataUIInfo::UIBattleMode' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, BattlePlayMap) == 0x000008, "Member 'FSSReplayDataUIInfo::BattlePlayMap' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, Players) == 0x000010, "Member 'FSSReplayDataUIInfo::Players' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, Opponents) == 0x000020, "Member 'FSSReplayDataUIInfo::Opponents' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, WinLose) == 0x000030, "Member 'FSSReplayDataUIInfo::WinLose' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, FavoriteMark) == 0x000034, "Member 'FSSReplayDataUIInfo::FavoriteMark' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, SaveDate) == 0x000038, "Member 'FSSReplayDataUIInfo::SaveDate' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, GameVersion) == 0x000040, "Member 'FSSReplayDataUIInfo::GameVersion' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, MajorVersionInt) == 0x000050, "Member 'FSSReplayDataUIInfo::MajorVersionInt' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, ContentVersionInt) == 0x000054, "Member 'FSSReplayDataUIInfo::ContentVersionInt' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, SaveDataVersionInt) == 0x000058, "Member 'FSSReplayDataUIInfo::SaveDataVersionInt' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, ServerVersionInt) == 0x00005C, "Member 'FSSReplayDataUIInfo::ServerVersionInt' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, BattleVersion) == 0x000060, "Member 'FSSReplayDataUIInfo::BattleVersion' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, BattleVersionInt) == 0x000070, "Member 'FSSReplayDataUIInfo::BattleVersionInt' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, OnlineHostUserName) == 0x000078, "Member 'FSSReplayDataUIInfo::OnlineHostUserName' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, OnlineHostUserId) == 0x000088, "Member 'FSSReplayDataUIInfo::OnlineHostUserId' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, OnlineGuestUserName) == 0x000098, "Member 'FSSReplayDataUIInfo::OnlineGuestUserName' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, OnlineGuestUserId) == 0x0000A8, "Member 'FSSReplayDataUIInfo::OnlineGuestUserId' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, bLiveCommentary) == 0x0000B8, "Member 'FSSReplayDataUIInfo::bLiveCommentary' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, SideIcon) == 0x0000BC, "Member 'FSSReplayDataUIInfo::SideIcon' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, SlotName) == 0x0000C0, "Member 'FSSReplayDataUIInfo::SlotName' has a wrong offset!");
static_assert(offsetof(FSSReplayDataUIInfo, PlaybackTime) == 0x0000D0, "Member 'FSSReplayDataUIInfo::PlaybackTime' has a wrong offset!");

// ScriptStruct SS.SSActionWarpAttrDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FSSActionWarpAttrDataAssetRecord final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasWarp;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasGroundDirection;                               // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneShotDeadly;                                  // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           WallBranchActionNames;                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSActionWarpAttrDataAssetRecord) == 0x000008, "Wrong alignment on FSSActionWarpAttrDataAssetRecord");
static_assert(sizeof(FSSActionWarpAttrDataAssetRecord) == 0x000018, "Wrong size on FSSActionWarpAttrDataAssetRecord");
static_assert(offsetof(FSSActionWarpAttrDataAssetRecord, ID) == 0x000000, "Member 'FSSActionWarpAttrDataAssetRecord::ID' has a wrong offset!");
static_assert(offsetof(FSSActionWarpAttrDataAssetRecord, bHasWarp) == 0x000004, "Member 'FSSActionWarpAttrDataAssetRecord::bHasWarp' has a wrong offset!");
static_assert(offsetof(FSSActionWarpAttrDataAssetRecord, bHasGroundDirection) == 0x000005, "Member 'FSSActionWarpAttrDataAssetRecord::bHasGroundDirection' has a wrong offset!");
static_assert(offsetof(FSSActionWarpAttrDataAssetRecord, bIsOneShotDeadly) == 0x000006, "Member 'FSSActionWarpAttrDataAssetRecord::bIsOneShotDeadly' has a wrong offset!");
static_assert(offsetof(FSSActionWarpAttrDataAssetRecord, WallBranchActionNames) == 0x000008, "Member 'FSSActionWarpAttrDataAssetRecord::WallBranchActionNames' has a wrong offset!");

// ScriptStruct SS.KoratDramaticAdventureIFOption
// 0x0010 (0x0010 - 0x0000)
struct FKoratDramaticAdventureIFOption final
{
public:
	TArray<struct FKoratBattleResultConversation> ResultEventLines;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticAdventureIFOption) == 0x000008, "Wrong alignment on FKoratDramaticAdventureIFOption");
static_assert(sizeof(FKoratDramaticAdventureIFOption) == 0x000010, "Wrong size on FKoratDramaticAdventureIFOption");
static_assert(offsetof(FKoratDramaticAdventureIFOption, ResultEventLines) == 0x000000, "Member 'FKoratDramaticAdventureIFOption::ResultEventLines' has a wrong offset!");

// ScriptStruct SS.SSAiProbabilityCalculation
// 0x0010 (0x0010 - 0x0000)
struct FSSAiProbabilityCalculation final
{
public:
	int32                                         Work;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawn;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Denominator;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiProbabilityCalculation) == 0x000004, "Wrong alignment on FSSAiProbabilityCalculation");
static_assert(sizeof(FSSAiProbabilityCalculation) == 0x000010, "Wrong size on FSSAiProbabilityCalculation");
static_assert(offsetof(FSSAiProbabilityCalculation, Work) == 0x000000, "Member 'FSSAiProbabilityCalculation::Work' has a wrong offset!");
static_assert(offsetof(FSSAiProbabilityCalculation, Result) == 0x000004, "Member 'FSSAiProbabilityCalculation::Result' has a wrong offset!");
static_assert(offsetof(FSSAiProbabilityCalculation, bDrawn) == 0x000008, "Member 'FSSAiProbabilityCalculation::bDrawn' has a wrong offset!");
static_assert(offsetof(FSSAiProbabilityCalculation, Denominator) == 0x00000C, "Member 'FSSAiProbabilityCalculation::Denominator' has a wrong offset!");

// ScriptStruct SS.SSAiUserTimer
// 0x0008 (0x0008 - 0x0000)
struct FSSAiUserTimer final
{
public:
	float                                         CurrentTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTime;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiUserTimer) == 0x000004, "Wrong alignment on FSSAiUserTimer");
static_assert(sizeof(FSSAiUserTimer) == 0x000008, "Wrong size on FSSAiUserTimer");
static_assert(offsetof(FSSAiUserTimer, CurrentTime) == 0x000000, "Member 'FSSAiUserTimer::CurrentTime' has a wrong offset!");
static_assert(offsetof(FSSAiUserTimer, TargetTime) == 0x000004, "Member 'FSSAiUserTimer::TargetTime' has a wrong offset!");

// ScriptStruct SS.SSAiAttackDataList
// 0x0004 (0x0004 - 0x0000)
struct FSSAiAttackDataList
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiAttackDataList) == 0x000004, "Wrong alignment on FSSAiAttackDataList");
static_assert(sizeof(FSSAiAttackDataList) == 0x000004, "Wrong size on FSSAiAttackDataList");
static_assert(offsetof(FSSAiAttackDataList, Range) == 0x000000, "Member 'FSSAiAttackDataList::Range' has a wrong offset!");

// ScriptStruct SS.SSAiBlastBaseDataList
// 0x0014 (0x0018 - 0x0004)
struct FSSAiBlastBaseDataList : public FSSAiAttackDataList
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratAiBlastTypeDataList>      BlastTypes;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiBlastBaseDataList) == 0x000008, "Wrong alignment on FSSAiBlastBaseDataList");
static_assert(sizeof(FSSAiBlastBaseDataList) == 0x000018, "Wrong size on FSSAiBlastBaseDataList");
static_assert(offsetof(FSSAiBlastBaseDataList, BlastTypes) == 0x000008, "Member 'FSSAiBlastBaseDataList::BlastTypes' has a wrong offset!");

// ScriptStruct SS.SSAiB1DataList
// 0x0000 (0x0018 - 0x0018)
struct FSSAiB1DataList final : public FSSAiBlastBaseDataList
{
};
static_assert(alignof(FSSAiB1DataList) == 0x000008, "Wrong alignment on FSSAiB1DataList");
static_assert(sizeof(FSSAiB1DataList) == 0x000018, "Wrong size on FSSAiB1DataList");

// ScriptStruct SS.SSEffectOverrideToonPointLightParam
// 0x0180 (0x0180 - 0x0000)
struct FSSEffectOverrideToonPointLightParam final
{
public:
	struct FSSEffectUpdateToonPointLightParam     Param;                                             // 0x0000(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectOverrideToonPointLightParam) == 0x000010, "Wrong alignment on FSSEffectOverrideToonPointLightParam");
static_assert(sizeof(FSSEffectOverrideToonPointLightParam) == 0x000180, "Wrong size on FSSEffectOverrideToonPointLightParam");
static_assert(offsetof(FSSEffectOverrideToonPointLightParam, Param) == 0x000000, "Member 'FSSEffectOverrideToonPointLightParam::Param' has a wrong offset!");

// ScriptStruct SS.SSAiB2UBDataList
// 0x0008 (0x0020 - 0x0018)
struct FSSAiB2UBDataList final : public FSSAiBlastBaseDataList
{
public:
	int32                                         SparkingComboHightHpProbability;                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SparkingComboLowHpProbability;                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiB2UBDataList) == 0x000008, "Wrong alignment on FSSAiB2UBDataList");
static_assert(sizeof(FSSAiB2UBDataList) == 0x000020, "Wrong size on FSSAiB2UBDataList");
static_assert(offsetof(FSSAiB2UBDataList, SparkingComboHightHpProbability) == 0x000018, "Member 'FSSAiB2UBDataList::SparkingComboHightHpProbability' has a wrong offset!");
static_assert(offsetof(FSSAiB2UBDataList, SparkingComboLowHpProbability) == 0x00001C, "Member 'FSSAiB2UBDataList::SparkingComboLowHpProbability' has a wrong offset!");

// ScriptStruct SS.SSAiCharacterDataList
// 0x0150 (0x0150 - 0x0000)
struct FSSAiCharacterDataList final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   DefaultAiType;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSAiPersonalityDataAsset*              PersonalityDataAsset;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushKidanRange;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashKidanRange;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSAiB1DataList                        B1ud;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSAiB1DataList                        B1lr;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSAiB2UBDataList                      B2squ;                                             // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSAiB2UBDataList                      B2tri;                                             // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSAiB2UBDataList                      UB;                                                // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, class UBehaviorTree*>       SpecificBehaviorTreeMap;                           // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ESSAiFormChangeType, int32>              FormChangeProbabilityMap;                          // 0x0100(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiCharacterDataList) == 0x000008, "Wrong alignment on FSSAiCharacterDataList");
static_assert(sizeof(FSSAiCharacterDataList) == 0x000150, "Wrong size on FSSAiCharacterDataList");
static_assert(offsetof(FSSAiCharacterDataList, Character) == 0x000000, "Member 'FSSAiCharacterDataList::Character' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, DefaultAiType) == 0x000008, "Member 'FSSAiCharacterDataList::DefaultAiType' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, PersonalityDataAsset) == 0x000010, "Member 'FSSAiCharacterDataList::PersonalityDataAsset' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, RushKidanRange) == 0x000018, "Member 'FSSAiCharacterDataList::RushKidanRange' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, SmashKidanRange) == 0x00001C, "Member 'FSSAiCharacterDataList::SmashKidanRange' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, B1ud) == 0x000020, "Member 'FSSAiCharacterDataList::B1ud' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, B1lr) == 0x000038, "Member 'FSSAiCharacterDataList::B1lr' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, B2squ) == 0x000050, "Member 'FSSAiCharacterDataList::B2squ' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, B2tri) == 0x000070, "Member 'FSSAiCharacterDataList::B2tri' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, UB) == 0x000090, "Member 'FSSAiCharacterDataList::UB' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, SpecificBehaviorTreeMap) == 0x0000B0, "Member 'FSSAiCharacterDataList::SpecificBehaviorTreeMap' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDataList, FormChangeProbabilityMap) == 0x000100, "Member 'FSSAiCharacterDataList::FormChangeProbabilityMap' has a wrong offset!");

// ScriptStruct SS.SSShopPurchasedInfoKPI
// 0x0058 (0x0058 - 0x0000)
struct FSSShopPurchasedInfoKPI final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKoratShopSalesItemDataList, int32> PurchasedShopSaleItems;                            // 0x0008(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSShopPurchasedInfoKPI) == 0x000008, "Wrong alignment on FSSShopPurchasedInfoKPI");
static_assert(sizeof(FSSShopPurchasedInfoKPI) == 0x000058, "Wrong size on FSSShopPurchasedInfoKPI");
static_assert(offsetof(FSSShopPurchasedInfoKPI, PurchasedShopSaleItems) == 0x000008, "Member 'FSSShopPurchasedInfoKPI::PurchasedShopSaleItems' has a wrong offset!");

// ScriptStruct SS.SSAiInputSuccessJudgment
// 0x0008 (0x0008 - 0x0000)
struct FSSAiInputSuccessJudgment final
{
public:
	ESSAiInputSuccessJudgmentType                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         JumpIndex;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiInputSuccessJudgment) == 0x000004, "Wrong alignment on FSSAiInputSuccessJudgment");
static_assert(sizeof(FSSAiInputSuccessJudgment) == 0x000008, "Wrong size on FSSAiInputSuccessJudgment");
static_assert(offsetof(FSSAiInputSuccessJudgment, Type) == 0x000000, "Member 'FSSAiInputSuccessJudgment::Type' has a wrong offset!");
static_assert(offsetof(FSSAiInputSuccessJudgment, JumpIndex) == 0x000004, "Member 'FSSAiInputSuccessJudgment::JumpIndex' has a wrong offset!");

// ScriptStruct SS.ParticleSystemPickupParam
// 0x0040 (0x0040 - 0x0000)
struct FParticleSystemPickupParam final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TypeNum;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Index;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticleSystemPickupParam) == 0x000008, "Wrong alignment on FParticleSystemPickupParam");
static_assert(sizeof(FParticleSystemPickupParam) == 0x000040, "Wrong size on FParticleSystemPickupParam");
static_assert(offsetof(FParticleSystemPickupParam, AssetPath) == 0x000000, "Member 'FParticleSystemPickupParam::AssetPath' has a wrong offset!");
static_assert(offsetof(FParticleSystemPickupParam, Prefix) == 0x000010, "Member 'FParticleSystemPickupParam::Prefix' has a wrong offset!");
static_assert(offsetof(FParticleSystemPickupParam, TypeNum) == 0x000020, "Member 'FParticleSystemPickupParam::TypeNum' has a wrong offset!");
static_assert(offsetof(FParticleSystemPickupParam, Index) == 0x000030, "Member 'FParticleSystemPickupParam::Index' has a wrong offset!");

// ScriptStruct SS.SSAiInputPad
// 0x0030 (0x0030 - 0x0000)
struct FSSAiInputPad final
{
public:
	EKoratBattleKey                               BattleKey;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiInputType                                InputType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RStick;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RepeatedInterval;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESSAiInputOffType>                     OffTypes;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiInputPad) == 0x000008, "Wrong alignment on FSSAiInputPad");
static_assert(sizeof(FSSAiInputPad) == 0x000030, "Wrong size on FSSAiInputPad");
static_assert(offsetof(FSSAiInputPad, BattleKey) == 0x000000, "Member 'FSSAiInputPad::BattleKey' has a wrong offset!");
static_assert(offsetof(FSSAiInputPad, InputType) == 0x000001, "Member 'FSSAiInputPad::InputType' has a wrong offset!");
static_assert(offsetof(FSSAiInputPad, RStick) == 0x000008, "Member 'FSSAiInputPad::RStick' has a wrong offset!");
static_assert(offsetof(FSSAiInputPad, RepeatedInterval) == 0x000018, "Member 'FSSAiInputPad::RepeatedInterval' has a wrong offset!");
static_assert(offsetof(FSSAiInputPad, OffTypes) == 0x000020, "Member 'FSSAiInputPad::OffTypes' has a wrong offset!");

// ScriptStruct SS.SSAiPadDataList
// 0x00E8 (0x00E8 - 0x0000)
struct FSSAiPadDataList final
{
public:
	int32                                         ExecutionOrder;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextExecutionOrder;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSAiInputPad>                  InputPadList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESSAiProgramMoveType                          ProgramMoveType;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSAiInputSuccessJudgment>      InputSuccessJudgmentArray;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InputActionNameArray;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InputLabelNameArray;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InputTime;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InputTimeLevelCurve;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTimeRandom;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InputTimeRandomLevelCurve;                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiRangeType                                InputRangeType;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputChargeLv;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiPathMoveTargetType                       InputPathMoveType;                                 // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExpectedActionArray;                               // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CancelActionArray;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CancelSectionArray;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetExpectedActionArray;                         // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeOutSec;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyLevelRatio;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightDif;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMovementLimitCheck : 1;                           // 0x00CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnergyLevelCheck : 1;                             // 0x00CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBehindCheck : 1;                                  // 0x00CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BehindCancelActionArray;                           // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bNotDamageCancel : 1;                              // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReProbabilityIfSameBranch : 1;                    // 0x00E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiPadDataList) == 0x000008, "Wrong alignment on FSSAiPadDataList");
static_assert(sizeof(FSSAiPadDataList) == 0x0000E8, "Wrong size on FSSAiPadDataList");
static_assert(offsetof(FSSAiPadDataList, ExecutionOrder) == 0x000000, "Member 'FSSAiPadDataList::ExecutionOrder' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, NextExecutionOrder) == 0x000004, "Member 'FSSAiPadDataList::NextExecutionOrder' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputPadList) == 0x000008, "Member 'FSSAiPadDataList::InputPadList' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, ProgramMoveType) == 0x000018, "Member 'FSSAiPadDataList::ProgramMoveType' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputSuccessJudgmentArray) == 0x000020, "Member 'FSSAiPadDataList::InputSuccessJudgmentArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputActionNameArray) == 0x000030, "Member 'FSSAiPadDataList::InputActionNameArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputLabelNameArray) == 0x000040, "Member 'FSSAiPadDataList::InputLabelNameArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputTime) == 0x000050, "Member 'FSSAiPadDataList::InputTime' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputTimeLevelCurve) == 0x000058, "Member 'FSSAiPadDataList::InputTimeLevelCurve' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputTimeRandom) == 0x000060, "Member 'FSSAiPadDataList::InputTimeRandom' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputTimeRandomLevelCurve) == 0x000068, "Member 'FSSAiPadDataList::InputTimeRandomLevelCurve' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputRangeType) == 0x000070, "Member 'FSSAiPadDataList::InputRangeType' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputChargeLv) == 0x000074, "Member 'FSSAiPadDataList::InputChargeLv' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, InputPathMoveType) == 0x000078, "Member 'FSSAiPadDataList::InputPathMoveType' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, ExpectedActionArray) == 0x000080, "Member 'FSSAiPadDataList::ExpectedActionArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, CancelActionArray) == 0x000090, "Member 'FSSAiPadDataList::CancelActionArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, CancelSectionArray) == 0x0000A0, "Member 'FSSAiPadDataList::CancelSectionArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, TargetExpectedActionArray) == 0x0000B0, "Member 'FSSAiPadDataList::TargetExpectedActionArray' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, TimeOutSec) == 0x0000C0, "Member 'FSSAiPadDataList::TimeOutSec' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, EnergyLevelRatio) == 0x0000C4, "Member 'FSSAiPadDataList::EnergyLevelRatio' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, HeightDif) == 0x0000C8, "Member 'FSSAiPadDataList::HeightDif' has a wrong offset!");
static_assert(offsetof(FSSAiPadDataList, BehindCancelActionArray) == 0x0000D0, "Member 'FSSAiPadDataList::BehindCancelActionArray' has a wrong offset!");

// ScriptStruct SS.SSAiActionDataList
// 0x0030 (0x0030 - 0x0000)
struct FSSAiActionDataList final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommandId;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSAiPadDataList>               PadDataList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         IdleWaitTimeOutSec;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolSec;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDontCheckDragonDashStop : 1;                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWaitType : 1;                                     // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDontWaitIdle : 1;                                 // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDontGuardCancel : 1;                              // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDontAscertainCancel : 1;                          // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDontSuperCounterCancel : 1;                       // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoHitProbabilityDown : 1;                         // 0x0028(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiActionDataList) == 0x000008, "Wrong alignment on FSSAiActionDataList");
static_assert(sizeof(FSSAiActionDataList) == 0x000030, "Wrong size on FSSAiActionDataList");
static_assert(offsetof(FSSAiActionDataList, SortId) == 0x000000, "Member 'FSSAiActionDataList::SortId' has a wrong offset!");
static_assert(offsetof(FSSAiActionDataList, CommandId) == 0x000004, "Member 'FSSAiActionDataList::CommandId' has a wrong offset!");
static_assert(offsetof(FSSAiActionDataList, PadDataList) == 0x000010, "Member 'FSSAiActionDataList::PadDataList' has a wrong offset!");
static_assert(offsetof(FSSAiActionDataList, IdleWaitTimeOutSec) == 0x000020, "Member 'FSSAiActionDataList::IdleWaitTimeOutSec' has a wrong offset!");
static_assert(offsetof(FSSAiActionDataList, CoolSec) == 0x000024, "Member 'FSSAiActionDataList::CoolSec' has a wrong offset!");

// ScriptStruct SS.SSAiItem
// 0x0018 (0x0018 - 0x0000)
struct FSSAiItem final
{
public:
	struct FKoratAiTypeDataList                   AiType;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiLevel;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinProbability;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProbability;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiItem) == 0x000004, "Wrong alignment on FSSAiItem");
static_assert(sizeof(FSSAiItem) == 0x000018, "Wrong size on FSSAiItem");
static_assert(offsetof(FSSAiItem, AiType) == 0x000000, "Member 'FSSAiItem::AiType' has a wrong offset!");
static_assert(offsetof(FSSAiItem, AiLevel) == 0x000008, "Member 'FSSAiItem::AiLevel' has a wrong offset!");
static_assert(offsetof(FSSAiItem, MinProbability) == 0x00000C, "Member 'FSSAiItem::MinProbability' has a wrong offset!");
static_assert(offsetof(FSSAiItem, MaxProbability) == 0x000010, "Member 'FSSAiItem::MaxProbability' has a wrong offset!");
static_assert(offsetof(FSSAiItem, SortId) == 0x000014, "Member 'FSSAiItem::SortId' has a wrong offset!");

// ScriptStruct SS.SSEndingTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSEndingTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEndingTransitionData) == 0x000004, "Wrong alignment on FSSEndingTransitionData");
static_assert(sizeof(FSSEndingTransitionData) == 0x000010, "Wrong size on FSSEndingTransitionData");

// ScriptStruct SS.SSAiInputPadStatus
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSSAiInputPadStatus final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiInputPadStatus) == 0x000004, "Wrong alignment on FSSAiInputPadStatus");
static_assert(sizeof(FSSAiInputPadStatus) == 0x000014, "Wrong size on FSSAiInputPadStatus");

// ScriptStruct SS.SSAiMovementLimitInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSAiMovementLimitInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiMovementLimitInfo) == 0x000004, "Wrong alignment on FSSAiMovementLimitInfo");
static_assert(sizeof(FSSAiMovementLimitInfo) == 0x000008, "Wrong size on FSSAiMovementLimitInfo");

// ScriptStruct SS.SSAiBpEmotionParam
// 0x0018 (0x0018 - 0x0000)
struct FSSAiBpEmotionParam final
{
public:
	EAiEmotionType                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratInequalitySignType                      SignType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinProbability;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProbability;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableAiLevel;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiBpEmotionParam) == 0x000004, "Wrong alignment on FSSAiBpEmotionParam");
static_assert(sizeof(FSSAiBpEmotionParam) == 0x000018, "Wrong size on FSSAiBpEmotionParam");
static_assert(offsetof(FSSAiBpEmotionParam, Type) == 0x000000, "Member 'FSSAiBpEmotionParam::Type' has a wrong offset!");
static_assert(offsetof(FSSAiBpEmotionParam, Value) == 0x000004, "Member 'FSSAiBpEmotionParam::Value' has a wrong offset!");
static_assert(offsetof(FSSAiBpEmotionParam, SignType) == 0x000008, "Member 'FSSAiBpEmotionParam::SignType' has a wrong offset!");
static_assert(offsetof(FSSAiBpEmotionParam, MinProbability) == 0x00000C, "Member 'FSSAiBpEmotionParam::MinProbability' has a wrong offset!");
static_assert(offsetof(FSSAiBpEmotionParam, MaxProbability) == 0x000010, "Member 'FSSAiBpEmotionParam::MaxProbability' has a wrong offset!");
static_assert(offsetof(FSSAiBpEmotionParam, EnableAiLevel) == 0x000014, "Member 'FSSAiBpEmotionParam::EnableAiLevel' has a wrong offset!");

// ScriptStruct SS.SSEffectHighSpeedMoveParts
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSEffectHighSpeedMoveParts final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectHighSpeedMoveParts) == 0x000008, "Wrong alignment on FSSEffectHighSpeedMoveParts");
static_assert(sizeof(FSSEffectHighSpeedMoveParts) == 0x000010, "Wrong size on FSSEffectHighSpeedMoveParts");
static_assert(offsetof(FSSEffectHighSpeedMoveParts, bShow) == 0x000000, "Member 'FSSEffectHighSpeedMoveParts::bShow' has a wrong offset!");

// ScriptStruct SS.SSAiSpEmotionParam
// 0x0008 (0x0018 - 0x0010)
struct FSSAiSpEmotionParam final : public FSSAiCommonEmotionParam
{
public:
	int32                                         Sp;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiEmotionSignType                          SignType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiSpEmotionParam) == 0x000004, "Wrong alignment on FSSAiSpEmotionParam");
static_assert(sizeof(FSSAiSpEmotionParam) == 0x000018, "Wrong size on FSSAiSpEmotionParam");
static_assert(offsetof(FSSAiSpEmotionParam, Sp) == 0x000010, "Member 'FSSAiSpEmotionParam::Sp' has a wrong offset!");
static_assert(offsetof(FSSAiSpEmotionParam, SignType) == 0x000014, "Member 'FSSAiSpEmotionParam::SignType' has a wrong offset!");

// ScriptStruct SS.SSBattleBGMSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSBattleBGMSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleBGMSaveData) == 0x000001, "Wrong alignment on FSSBattleBGMSaveData");
static_assert(sizeof(FSSBattleBGMSaveData) == 0x000003, "Wrong size on FSSBattleBGMSaveData");
static_assert(offsetof(FSSBattleBGMSaveData, UnLockMode) == 0x000000, "Member 'FSSBattleBGMSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSBattleBGMSaveData, UnLockDetail) == 0x000001, "Member 'FSSBattleBGMSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSAiSkillStockEmotionParam
// 0x0008 (0x0018 - 0x0010)
struct FSSAiSkillStockEmotionParam final : public FSSAiCommonEmotionParam
{
public:
	int32                                         SkillStock;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSAiEmotionSignType                          SignType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiSkillStockEmotionParam) == 0x000004, "Wrong alignment on FSSAiSkillStockEmotionParam");
static_assert(sizeof(FSSAiSkillStockEmotionParam) == 0x000018, "Wrong size on FSSAiSkillStockEmotionParam");
static_assert(offsetof(FSSAiSkillStockEmotionParam, SkillStock) == 0x000010, "Member 'FSSAiSkillStockEmotionParam::SkillStock' has a wrong offset!");
static_assert(offsetof(FSSAiSkillStockEmotionParam, SignType) == 0x000014, "Member 'FSSAiSkillStockEmotionParam::SignType' has a wrong offset!");

// ScriptStruct SS.SSAiSparkingEmotionParam
// 0x0004 (0x0014 - 0x0010)
struct FSSAiSparkingEmotionParam final : public FSSAiCommonEmotionParam
{
public:
	bool                                          bSparking;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiSparkingEmotionParam) == 0x000004, "Wrong alignment on FSSAiSparkingEmotionParam");
static_assert(sizeof(FSSAiSparkingEmotionParam) == 0x000014, "Wrong size on FSSAiSparkingEmotionParam");
static_assert(offsetof(FSSAiSparkingEmotionParam, bSparking) == 0x000010, "Member 'FSSAiSparkingEmotionParam::bSparking' has a wrong offset!");

// ScriptStruct SS.SSAiAction2EmotionParam
// 0x0010 (0x0020 - 0x0010)
struct FSSAiAction2EmotionParam final : public FSSAiCommonEmotionParam
{
public:
	TArray<struct FKoratActionDataList>           Actions;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiAction2EmotionParam) == 0x000008, "Wrong alignment on FSSAiAction2EmotionParam");
static_assert(sizeof(FSSAiAction2EmotionParam) == 0x000020, "Wrong size on FSSAiAction2EmotionParam");
static_assert(offsetof(FSSAiAction2EmotionParam, Actions) == 0x000010, "Member 'FSSAiAction2EmotionParam::Actions' has a wrong offset!");

// ScriptStruct SS.SSAiEmotionParam
// 0x0070 (0x0070 - 0x0000)
struct FSSAiEmotionParam final
{
public:
	TArray<struct FSSAiHpEmotionParam>            HpParams;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSAiSpEmotionParam>            SpParams;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSAiSkillStockEmotionParam>    SkillStockParams;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSAiSparkingEmotionParam>      SparkingParams;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSAiMemberEmotionParam>        MemberParams;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSAiAction2EmotionParam>       ActionParams;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSAiAddEmotionParam                   ImpactParam;                                       // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ResetTime;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiEmotionParam) == 0x000008, "Wrong alignment on FSSAiEmotionParam");
static_assert(sizeof(FSSAiEmotionParam) == 0x000070, "Wrong size on FSSAiEmotionParam");
static_assert(offsetof(FSSAiEmotionParam, HpParams) == 0x000000, "Member 'FSSAiEmotionParam::HpParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, SpParams) == 0x000010, "Member 'FSSAiEmotionParam::SpParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, SkillStockParams) == 0x000020, "Member 'FSSAiEmotionParam::SkillStockParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, SparkingParams) == 0x000030, "Member 'FSSAiEmotionParam::SparkingParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, MemberParams) == 0x000040, "Member 'FSSAiEmotionParam::MemberParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, ActionParams) == 0x000050, "Member 'FSSAiEmotionParam::ActionParams' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, ImpactParam) == 0x000060, "Member 'FSSAiEmotionParam::ImpactParam' has a wrong offset!");
static_assert(offsetof(FSSAiEmotionParam, ResetTime) == 0x00006C, "Member 'FSSAiEmotionParam::ResetTime' has a wrong offset!");

// ScriptStruct SS.SSAiPlayCharacterEmotionParam
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FSSAiPlayCharacterEmotionParam final
{
public:
	int32                                         Aggression;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cautiousness;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenseOfSuperiority;                                // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fear;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Selflessness;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vigilance;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntentToMurder;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Impatience;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x70];                                      // 0x0020(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiPlayCharacterEmotionParam) == 0x000008, "Wrong alignment on FSSAiPlayCharacterEmotionParam");
static_assert(sizeof(FSSAiPlayCharacterEmotionParam) == 0x000090, "Wrong size on FSSAiPlayCharacterEmotionParam");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Aggression) == 0x000000, "Member 'FSSAiPlayCharacterEmotionParam::Aggression' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Cautiousness) == 0x000004, "Member 'FSSAiPlayCharacterEmotionParam::Cautiousness' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, SenseOfSuperiority) == 0x000008, "Member 'FSSAiPlayCharacterEmotionParam::SenseOfSuperiority' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Fear) == 0x00000C, "Member 'FSSAiPlayCharacterEmotionParam::Fear' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Selflessness) == 0x000010, "Member 'FSSAiPlayCharacterEmotionParam::Selflessness' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Vigilance) == 0x000014, "Member 'FSSAiPlayCharacterEmotionParam::Vigilance' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, IntentToMurder) == 0x000018, "Member 'FSSAiPlayCharacterEmotionParam::IntentToMurder' has a wrong offset!");
static_assert(offsetof(FSSAiPlayCharacterEmotionParam, Impatience) == 0x00001C, "Member 'FSSAiPlayCharacterEmotionParam::Impatience' has a wrong offset!");

// ScriptStruct SS.SSAiCharacterEmotionParam
// 0x0020 (0x0020 - 0x0000)
struct FSSAiCharacterEmotionParam final
{
public:
	TArray<struct FKoratCharacterDataList>        Characters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSAiAddEmotionParam                   Param;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiCharacterEmotionParam) == 0x000008, "Wrong alignment on FSSAiCharacterEmotionParam");
static_assert(sizeof(FSSAiCharacterEmotionParam) == 0x000020, "Wrong size on FSSAiCharacterEmotionParam");
static_assert(offsetof(FSSAiCharacterEmotionParam, Characters) == 0x000000, "Member 'FSSAiCharacterEmotionParam::Characters' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterEmotionParam, Param) == 0x000010, "Member 'FSSAiCharacterEmotionParam::Param' has a wrong offset!");

// ScriptStruct SS.SSEditPartsImageSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSEditPartsImageSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEditPartsImageSaveData) == 0x000001, "Wrong alignment on FSSEditPartsImageSaveData");
static_assert(sizeof(FSSEditPartsImageSaveData) == 0x000003, "Wrong size on FSSEditPartsImageSaveData");
static_assert(offsetof(FSSEditPartsImageSaveData, UnLockMode) == 0x000000, "Member 'FSSEditPartsImageSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSEditPartsImageSaveData, UnLockDetail) == 0x000001, "Member 'FSSEditPartsImageSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSAiCharacterDamageParam
// 0x0008 (0x0008 - 0x0000)
struct FSSAiCharacterDamageParam final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiCharacterDamageParam) == 0x000004, "Wrong alignment on FSSAiCharacterDamageParam");
static_assert(sizeof(FSSAiCharacterDamageParam) == 0x000008, "Wrong size on FSSAiCharacterDamageParam");
static_assert(offsetof(FSSAiCharacterDamageParam, Damage) == 0x000000, "Member 'FSSAiCharacterDamageParam::Damage' has a wrong offset!");
static_assert(offsetof(FSSAiCharacterDamageParam, Probability) == 0x000004, "Member 'FSSAiCharacterDamageParam::Probability' has a wrong offset!");

// ScriptStruct SS.SSAiLevelProbability
// 0x0018 (0x0018 - 0x0000)
struct FSSAiLevelProbability final
{
public:
	int32                                         MinProbability;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProbability;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LevelCurve;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiLevelProbability) == 0x000008, "Wrong alignment on FSSAiLevelProbability");
static_assert(sizeof(FSSAiLevelProbability) == 0x000018, "Wrong size on FSSAiLevelProbability");
static_assert(offsetof(FSSAiLevelProbability, MinProbability) == 0x000000, "Member 'FSSAiLevelProbability::MinProbability' has a wrong offset!");
static_assert(offsetof(FSSAiLevelProbability, MaxProbability) == 0x000004, "Member 'FSSAiLevelProbability::MaxProbability' has a wrong offset!");
static_assert(offsetof(FSSAiLevelProbability, LevelCurve) == 0x000008, "Member 'FSSAiLevelProbability::LevelCurve' has a wrong offset!");
static_assert(offsetof(FSSAiLevelProbability, SortId) == 0x000010, "Member 'FSSAiLevelProbability::SortId' has a wrong offset!");
static_assert(offsetof(FSSAiLevelProbability, CoolDownTime) == 0x000014, "Member 'FSSAiLevelProbability::CoolDownTime' has a wrong offset!");

// ScriptStruct SS.SSAiDefenseProbabilityOld
// 0x0050 (0x0050 - 0x0000)
struct FSSAiDefenseProbabilityOld final
{
public:
	TMap<ESSAiDefenseProbabilityType, struct FSSAiLevelProbability> Map;                                               // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAiDefenseProbabilityOld) == 0x000008, "Wrong alignment on FSSAiDefenseProbabilityOld");
static_assert(sizeof(FSSAiDefenseProbabilityOld) == 0x000050, "Wrong size on FSSAiDefenseProbabilityOld");
static_assert(offsetof(FSSAiDefenseProbabilityOld, Map) == 0x000000, "Member 'FSSAiDefenseProbabilityOld::Map' has a wrong offset!");

// ScriptStruct SS.SSAiDefenseProbability
// 0x0058 (0x0058 - 0x0000)
struct FSSAiDefenseProbability final
{
public:
	TMap<struct FKoratAiDefenseProbabilityTypeDataList, struct FSSAiLevelProbability> Map;                                               // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAiDefenseProbability) == 0x000008, "Wrong alignment on FSSAiDefenseProbability");
static_assert(sizeof(FSSAiDefenseProbability) == 0x000058, "Wrong size on FSSAiDefenseProbability");
static_assert(offsetof(FSSAiDefenseProbability, Map) == 0x000000, "Member 'FSSAiDefenseProbability::Map' has a wrong offset!");
static_assert(offsetof(FSSAiDefenseProbability, SortId) == 0x000050, "Member 'FSSAiDefenseProbability::SortId' has a wrong offset!");

// ScriptStruct SS.SSAnimEvent
// 0x0018 (0x0018 - 0x0000)
struct FSSAnimEvent final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAnimEvent) == 0x000008, "Wrong alignment on FSSAnimEvent");
static_assert(sizeof(FSSAnimEvent) == 0x000018, "Wrong size on FSSAnimEvent");
static_assert(offsetof(FSSAnimEvent, Enable) == 0x000000, "Member 'FSSAnimEvent::Enable' has a wrong offset!");
static_assert(offsetof(FSSAnimEvent, Count) == 0x000004, "Member 'FSSAnimEvent::Count' has a wrong offset!");
static_assert(offsetof(FSSAnimEvent, MeshComp) == 0x000008, "Member 'FSSAnimEvent::MeshComp' has a wrong offset!");
static_assert(offsetof(FSSAnimEvent, Animation) == 0x000010, "Member 'FSSAnimEvent::Animation' has a wrong offset!");

// ScriptStruct SS.SSAnimNode_ModifyBoneForLookat
// 0x0178 (0x0240 - 0x00C8)
struct FSSAnimNode_ModifyBoneForLookat final : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                LookAtLocation;                                    // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoneToModify;                                      // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Clamp;                                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x0110(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0xA0];                                     // 0x01A0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAnimNode_ModifyBoneForLookat) == 0x000010, "Wrong alignment on FSSAnimNode_ModifyBoneForLookat");
static_assert(sizeof(FSSAnimNode_ModifyBoneForLookat) == 0x000240, "Wrong size on FSSAnimNode_ModifyBoneForLookat");
static_assert(offsetof(FSSAnimNode_ModifyBoneForLookat, LookAtLocation) == 0x0000C8, "Member 'FSSAnimNode_ModifyBoneForLookat::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FSSAnimNode_ModifyBoneForLookat, BoneToModify) == 0x0000E0, "Member 'FSSAnimNode_ModifyBoneForLookat::BoneToModify' has a wrong offset!");
static_assert(offsetof(FSSAnimNode_ModifyBoneForLookat, Clamp) == 0x000108, "Member 'FSSAnimNode_ModifyBoneForLookat::Clamp' has a wrong offset!");
static_assert(offsetof(FSSAnimNode_ModifyBoneForLookat, Weight) == 0x00010C, "Member 'FSSAnimNode_ModifyBoneForLookat::Weight' has a wrong offset!");
static_assert(offsetof(FSSAnimNode_ModifyBoneForLookat, EffectorTarget) == 0x000110, "Member 'FSSAnimNode_ModifyBoneForLookat::EffectorTarget' has a wrong offset!");

// ScriptStruct SS.KoratMatchingRuleParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FKoratMatchingRuleParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMatchingRuleParam) == 0x000004, "Wrong alignment on FKoratMatchingRuleParam");
static_assert(sizeof(FKoratMatchingRuleParam) == 0x000008, "Wrong size on FKoratMatchingRuleParam");

// ScriptStruct SS.KoratRankMatchParam
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x08) FKoratRankMatchParam final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRankMatchParam) == 0x000008, "Wrong alignment on FKoratRankMatchParam");
static_assert(sizeof(FKoratRankMatchParam) == 0x0000F0, "Wrong size on FKoratRankMatchParam");

// ScriptStruct SS.SSAppNetworkTimer
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSAppNetworkTimer final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSAppNetworkTimer) == 0x000004, "Wrong alignment on FSSAppNetworkTimer");
static_assert(sizeof(FSSAppNetworkTimer) == 0x000008, "Wrong size on FSSAppNetworkTimer");

// ScriptStruct SS.SSDragonAdventureIFChartMapDataAssetRecord
// 0x00F8 (0x00F8 - 0x0000)
struct FSSDragonAdventureIFChartMapDataAssetRecord final
{
public:
	class FName                                   EventBlockName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Thumbnail;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThumbnailIndex;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESSDragonAdventureIFChartMapDirectionType, class FName> MapDirection;                                      // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, NativeAccessSpecifierPublic)
	TMap<ESSDragonAdventureIFChartMapDirectionType, struct FSSDragonAdventureIFChartMapSubDirBlock> MapSubDirection;                                   // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, NativeAccessSpecifierPublic)
	class FText                                   Explanation;                                       // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFChartMapDataAssetRecord) == 0x000008, "Wrong alignment on FSSDragonAdventureIFChartMapDataAssetRecord");
static_assert(sizeof(FSSDragonAdventureIFChartMapDataAssetRecord) == 0x0000F8, "Wrong size on FSSDragonAdventureIFChartMapDataAssetRecord");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, EventBlockName) == 0x000000, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::EventBlockName' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, Thumbnail) == 0x000008, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::Thumbnail' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, ThumbnailIndex) == 0x000038, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::ThumbnailIndex' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, MapDirection) == 0x000040, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::MapDirection' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, MapSubDirection) == 0x000090, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::MapSubDirection' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFChartMapDataAssetRecord, Explanation) == 0x0000E0, "Member 'FSSDragonAdventureIFChartMapDataAssetRecord::Explanation' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneCompileDescriptionTS
// 0x0068 (0x0068 - 0x0000)
struct FSSEventSceneSubsceneCompileDescriptionTS final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Camera;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Subscene;                                          // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySlowTriggerFlashEffect;                       // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneSubsceneCompileDescriptionTS) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneCompileDescriptionTS");
static_assert(sizeof(FSSEventSceneSubsceneCompileDescriptionTS) == 0x000068, "Wrong size on FSSEventSceneSubsceneCompileDescriptionTS");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionTS, Camera) == 0x000000, "Member 'FSSEventSceneSubsceneCompileDescriptionTS::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionTS, Subscene) == 0x000030, "Member 'FSSEventSceneSubsceneCompileDescriptionTS::Subscene' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionTS, TransitionDelay) == 0x000060, "Member 'FSSEventSceneSubsceneCompileDescriptionTS::TransitionDelay' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionTS, bPlaySlowTriggerFlashEffect) == 0x000064, "Member 'FSSEventSceneSubsceneCompileDescriptionTS::bPlaySlowTriggerFlashEffect' has a wrong offset!");

// ScriptStruct SS.KoratSoundPlayAtb
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratSoundPlayAtb final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachLocation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCrossFade;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVibration;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSlowPlaySpeed;                               // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    AisacInformation;                                  // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SelectorName;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LabelName;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratVibrationControllerType                 ControllerVibrationType;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSoundPlayAtb) == 0x000008, "Wrong alignment on FKoratSoundPlayAtb");
static_assert(sizeof(FKoratSoundPlayAtb) == 0x0000B8, "Wrong size on FKoratSoundPlayAtb");
static_assert(offsetof(FKoratSoundPlayAtb, AttachToComponent) == 0x000000, "Member 'FKoratSoundPlayAtb::AttachToComponent' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, AttachPointName) == 0x000008, "Member 'FKoratSoundPlayAtb::AttachPointName' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, AttachLocation) == 0x000010, "Member 'FKoratSoundPlayAtb::AttachLocation' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, Volume) == 0x000028, "Member 'FKoratSoundPlayAtb::Volume' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, StartTime) == 0x00002C, "Member 'FKoratSoundPlayAtb::StartTime' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, FadeInTime) == 0x000030, "Member 'FKoratSoundPlayAtb::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, FadeOutTime) == 0x000034, "Member 'FKoratSoundPlayAtb::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, IsCrossFade) == 0x000038, "Member 'FKoratSoundPlayAtb::IsCrossFade' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, IsVibration) == 0x000039, "Member 'FKoratSoundPlayAtb::IsVibration' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, EnableSlowPlaySpeed) == 0x00003A, "Member 'FKoratSoundPlayAtb::EnableSlowPlaySpeed' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, AisacInformation) == 0x000040, "Member 'FKoratSoundPlayAtb::AisacInformation' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, SelectorName) == 0x000090, "Member 'FKoratSoundPlayAtb::SelectorName' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, LabelName) == 0x0000A0, "Member 'FKoratSoundPlayAtb::LabelName' has a wrong offset!");
static_assert(offsetof(FKoratSoundPlayAtb, ControllerVibrationType) == 0x0000B0, "Member 'FKoratSoundPlayAtb::ControllerVibrationType' has a wrong offset!");

// ScriptStruct SS.KoratAtomComponentTimeManager
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FKoratAtomComponentTimeManager final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratAtomComponentTimeManager) == 0x000004, "Wrong alignment on FKoratAtomComponentTimeManager");
static_assert(sizeof(FKoratAtomComponentTimeManager) == 0x00000C, "Wrong size on FKoratAtomComponentTimeManager");

// ScriptStruct SS.SSAuraDataRecord
// 0x0040 (0x0040 - 0x0000)
struct FSSAuraDataRecord final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratRimLightFrequencyDataList        Frequency;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAuraDataRecord) == 0x000008, "Wrong alignment on FSSAuraDataRecord");
static_assert(sizeof(FSSAuraDataRecord) == 0x000040, "Wrong size on FSSAuraDataRecord");
static_assert(offsetof(FSSAuraDataRecord, Priority) == 0x000000, "Member 'FSSAuraDataRecord::Priority' has a wrong offset!");
static_assert(offsetof(FSSAuraDataRecord, Frequency) == 0x000004, "Member 'FSSAuraDataRecord::Frequency' has a wrong offset!");
static_assert(offsetof(FSSAuraDataRecord, LevelSequence) == 0x000010, "Member 'FSSAuraDataRecord::LevelSequence' has a wrong offset!");

// ScriptStruct SS.SSAutoLaboComposeSafeOpsAssetPaths
// 0x0060 (0x0060 - 0x0000)
struct FSSAutoLaboComposeSafeOpsAssetPaths final
{
public:
	struct FSoftObjectPath                        LevelSequencePath;                                 // 0x0000(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AnotherLevelSequencePath;                          // 0x0020(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MapPath;                                           // 0x0040(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAutoLaboComposeSafeOpsAssetPaths) == 0x000008, "Wrong alignment on FSSAutoLaboComposeSafeOpsAssetPaths");
static_assert(sizeof(FSSAutoLaboComposeSafeOpsAssetPaths) == 0x000060, "Wrong size on FSSAutoLaboComposeSafeOpsAssetPaths");
static_assert(offsetof(FSSAutoLaboComposeSafeOpsAssetPaths, LevelSequencePath) == 0x000000, "Member 'FSSAutoLaboComposeSafeOpsAssetPaths::LevelSequencePath' has a wrong offset!");
static_assert(offsetof(FSSAutoLaboComposeSafeOpsAssetPaths, AnotherLevelSequencePath) == 0x000020, "Member 'FSSAutoLaboComposeSafeOpsAssetPaths::AnotherLevelSequencePath' has a wrong offset!");
static_assert(offsetof(FSSAutoLaboComposeSafeOpsAssetPaths, MapPath) == 0x000040, "Member 'FSSAutoLaboComposeSafeOpsAssetPaths::MapPath' has a wrong offset!");

// ScriptStruct SS.SSAutoRebindAssetPaths
// 0x0050 (0x0050 - 0x0000)
struct FSSAutoRebindAssetPaths final
{
public:
	struct FSoftObjectPath                        LevelSequencePath;                                 // 0x0000(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MapPath;                                           // 0x0020(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RebindRegexPattern;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAutoRebindAssetPaths) == 0x000008, "Wrong alignment on FSSAutoRebindAssetPaths");
static_assert(sizeof(FSSAutoRebindAssetPaths) == 0x000050, "Wrong size on FSSAutoRebindAssetPaths");
static_assert(offsetof(FSSAutoRebindAssetPaths, LevelSequencePath) == 0x000000, "Member 'FSSAutoRebindAssetPaths::LevelSequencePath' has a wrong offset!");
static_assert(offsetof(FSSAutoRebindAssetPaths, MapPath) == 0x000020, "Member 'FSSAutoRebindAssetPaths::MapPath' has a wrong offset!");
static_assert(offsetof(FSSAutoRebindAssetPaths, RebindRegexPattern) == 0x000040, "Member 'FSSAutoRebindAssetPaths::RebindRegexPattern' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistComboDataRecord
// 0x0018 (0x0018 - 0x0000)
struct FSSBattleAssistComboDataRecord final
{
public:
	float                                         PROB;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKoratBattleKey>                       BattleKeyArray;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistComboDataRecord) == 0x000008, "Wrong alignment on FSSBattleAssistComboDataRecord");
static_assert(sizeof(FSSBattleAssistComboDataRecord) == 0x000018, "Wrong size on FSSBattleAssistComboDataRecord");
static_assert(offsetof(FSSBattleAssistComboDataRecord, PROB) == 0x000000, "Member 'FSSBattleAssistComboDataRecord::PROB' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistComboDataRecord, BattleKeyArray) == 0x000008, "Member 'FSSBattleAssistComboDataRecord::BattleKeyArray' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistComboAssistDataRecord
// 0x0028 (0x0028 - 0x0000)
struct FSSBattleAssistComboAssistDataRecord final
{
public:
	float                                         BurstRushSparkingValue;                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboResetCount;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSBattleAssistComboDataRecord> ComboRecords;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EKoratBattleKey>                       ComboAssistKeys;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistComboAssistDataRecord) == 0x000008, "Wrong alignment on FSSBattleAssistComboAssistDataRecord");
static_assert(sizeof(FSSBattleAssistComboAssistDataRecord) == 0x000028, "Wrong size on FSSBattleAssistComboAssistDataRecord");
static_assert(offsetof(FSSBattleAssistComboAssistDataRecord, BurstRushSparkingValue) == 0x000000, "Member 'FSSBattleAssistComboAssistDataRecord::BurstRushSparkingValue' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistComboAssistDataRecord, ComboResetCount) == 0x000004, "Member 'FSSBattleAssistComboAssistDataRecord::ComboResetCount' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistComboAssistDataRecord, ComboRecords) == 0x000008, "Member 'FSSBattleAssistComboAssistDataRecord::ComboRecords' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistComboAssistDataRecord, ComboAssistKeys) == 0x000018, "Member 'FSSBattleAssistComboAssistDataRecord::ComboAssistKeys' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistGuardDataRecord
// 0x0020 (0x0020 - 0x0000)
struct FSSBattleAssistGuardDataRecord final
{
public:
	float                                         CombativesGuardDistance;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletsGuardDistance;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombativesGuardRecoveryTime;                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKoratBattleKey>                       Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistGuardDataRecord) == 0x000008, "Wrong alignment on FSSBattleAssistGuardDataRecord");
static_assert(sizeof(FSSBattleAssistGuardDataRecord) == 0x000020, "Wrong size on FSSBattleAssistGuardDataRecord");
static_assert(offsetof(FSSBattleAssistGuardDataRecord, CombativesGuardDistance) == 0x000000, "Member 'FSSBattleAssistGuardDataRecord::CombativesGuardDistance' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistGuardDataRecord, BulletsGuardDistance) == 0x000004, "Member 'FSSBattleAssistGuardDataRecord::BulletsGuardDistance' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistGuardDataRecord, CombativesGuardRecoveryTime) == 0x000008, "Member 'FSSBattleAssistGuardDataRecord::CombativesGuardRecoveryTime' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistGuardDataRecord, Keys) == 0x000010, "Member 'FSSBattleAssistGuardDataRecord::Keys' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistPursuitAssistRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleAssistPursuitAssistRecord final
{
public:
	float                                         PursuitAssistDownHeight;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitAssistUPHeight;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitAssistDragonSmashDistance;                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitAssistDragonSmashSafeTime;                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistPursuitAssistRecord) == 0x000004, "Wrong alignment on FSSBattleAssistPursuitAssistRecord");
static_assert(sizeof(FSSBattleAssistPursuitAssistRecord) == 0x000010, "Wrong size on FSSBattleAssistPursuitAssistRecord");
static_assert(offsetof(FSSBattleAssistPursuitAssistRecord, PursuitAssistDownHeight) == 0x000000, "Member 'FSSBattleAssistPursuitAssistRecord::PursuitAssistDownHeight' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistPursuitAssistRecord, PursuitAssistUPHeight) == 0x000004, "Member 'FSSBattleAssistPursuitAssistRecord::PursuitAssistUPHeight' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistPursuitAssistRecord, PursuitAssistDragonSmashDistance) == 0x000008, "Member 'FSSBattleAssistPursuitAssistRecord::PursuitAssistDragonSmashDistance' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistPursuitAssistRecord, PursuitAssistDragonSmashSafeTime) == 0x00000C, "Member 'FSSBattleAssistPursuitAssistRecord::PursuitAssistDragonSmashSafeTime' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistDragonDashAssistRecord
// 0x0028 (0x0028 - 0x0000)
struct FSSBattleAssistDragonDashAssistRecord final
{
public:
	float                                         DragonDashStartTime;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashSPValue;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashAttackDistance;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashAttackAngle;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DragonDashAttackChargeLevel;                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratActionDataList>           AllowAction;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistDragonDashAssistRecord) == 0x000008, "Wrong alignment on FSSBattleAssistDragonDashAssistRecord");
static_assert(sizeof(FSSBattleAssistDragonDashAssistRecord) == 0x000028, "Wrong size on FSSBattleAssistDragonDashAssistRecord");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, DragonDashStartTime) == 0x000000, "Member 'FSSBattleAssistDragonDashAssistRecord::DragonDashStartTime' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, DragonDashSPValue) == 0x000004, "Member 'FSSBattleAssistDragonDashAssistRecord::DragonDashSPValue' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, DragonDashAttackDistance) == 0x000008, "Member 'FSSBattleAssistDragonDashAssistRecord::DragonDashAttackDistance' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, DragonDashAttackAngle) == 0x00000C, "Member 'FSSBattleAssistDragonDashAssistRecord::DragonDashAttackAngle' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, DragonDashAttackChargeLevel) == 0x000010, "Member 'FSSBattleAssistDragonDashAssistRecord::DragonDashAttackChargeLevel' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistDragonDashAssistRecord, AllowAction) == 0x000018, "Member 'FSSBattleAssistDragonDashAssistRecord::AllowAction' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistReversalAssistRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleAssistReversalAssistRecord final
{
public:
	TArray<EKoratBattleKey>                       RevengeCounterAssistKeys;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistReversalAssistRecord) == 0x000008, "Wrong alignment on FSSBattleAssistReversalAssistRecord");
static_assert(sizeof(FSSBattleAssistReversalAssistRecord) == 0x000010, "Wrong size on FSSBattleAssistReversalAssistRecord");
static_assert(offsetof(FSSBattleAssistReversalAssistRecord, RevengeCounterAssistKeys) == 0x000000, "Member 'FSSBattleAssistReversalAssistRecord::RevengeCounterAssistKeys' has a wrong offset!");

// ScriptStruct SS.SSBattleAssistParameter
// 0x0009 (0x0009 - 0x0000)
struct FSSBattleAssistParameter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombo;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuitAssist;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDragonDash;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDragonDashAttack;                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGuard;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUkemi;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevengeCounter;                                   // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlTypeClassic;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleAssistParameter) == 0x000001, "Wrong alignment on FSSBattleAssistParameter");
static_assert(sizeof(FSSBattleAssistParameter) == 0x000009, "Wrong size on FSSBattleAssistParameter");
static_assert(offsetof(FSSBattleAssistParameter, bEnable) == 0x000000, "Member 'FSSBattleAssistParameter::bEnable' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bCombo) == 0x000001, "Member 'FSSBattleAssistParameter::bCombo' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bPursuitAssist) == 0x000002, "Member 'FSSBattleAssistParameter::bPursuitAssist' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bAutoDragonDash) == 0x000003, "Member 'FSSBattleAssistParameter::bAutoDragonDash' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bAutoDragonDashAttack) == 0x000004, "Member 'FSSBattleAssistParameter::bAutoDragonDashAttack' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bAutoGuard) == 0x000005, "Member 'FSSBattleAssistParameter::bAutoGuard' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bAutoUkemi) == 0x000006, "Member 'FSSBattleAssistParameter::bAutoUkemi' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bRevengeCounter) == 0x000007, "Member 'FSSBattleAssistParameter::bRevengeCounter' has a wrong offset!");
static_assert(offsetof(FSSBattleAssistParameter, bControlTypeClassic) == 0x000008, "Member 'FSSBattleAssistParameter::bControlTypeClassic' has a wrong offset!");

// ScriptStruct SS.SSBattleDebugDrawCharacterText
// 0x0060 (0x0060 - 0x0000)
struct FSSBattleDebugDrawCharacterText final
{
public:
	class FText                                   BuffText;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ItemText;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CharacterText;                                     // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CharacterNumericText;                              // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleDebugDrawCharacterText) == 0x000008, "Wrong alignment on FSSBattleDebugDrawCharacterText");
static_assert(sizeof(FSSBattleDebugDrawCharacterText) == 0x000060, "Wrong size on FSSBattleDebugDrawCharacterText");
static_assert(offsetof(FSSBattleDebugDrawCharacterText, BuffText) == 0x000000, "Member 'FSSBattleDebugDrawCharacterText::BuffText' has a wrong offset!");
static_assert(offsetof(FSSBattleDebugDrawCharacterText, ItemText) == 0x000018, "Member 'FSSBattleDebugDrawCharacterText::ItemText' has a wrong offset!");
static_assert(offsetof(FSSBattleDebugDrawCharacterText, CharacterText) == 0x000030, "Member 'FSSBattleDebugDrawCharacterText::CharacterText' has a wrong offset!");
static_assert(offsetof(FSSBattleDebugDrawCharacterText, CharacterNumericText) == 0x000048, "Member 'FSSBattleDebugDrawCharacterText::CharacterNumericText' has a wrong offset!");

// ScriptStruct SS.KoratBattleDirectingCharacterStatus
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FKoratBattleDirectingCharacterStatus final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingCharacterStatus) == 0x000008, "Wrong alignment on FKoratBattleDirectingCharacterStatus");
static_assert(sizeof(FKoratBattleDirectingCharacterStatus) == 0x000028, "Wrong size on FKoratBattleDirectingCharacterStatus");

// ScriptStruct SS.KoratBattleDirectingElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FKoratBattleDirectingElapsedTime final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattleDirectingElapsedTime) == 0x000004, "Wrong alignment on FKoratBattleDirectingElapsedTime");
static_assert(sizeof(FKoratBattleDirectingElapsedTime) == 0x000008, "Wrong size on FKoratBattleDirectingElapsedTime");

// ScriptStruct SS.BattleAngleSpeedData
// 0x0004 (0x0004 - 0x0000)
struct FBattleAngleSpeedData final
{
public:
	float                                         ElapseTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleAngleSpeedData) == 0x000004, "Wrong alignment on FBattleAngleSpeedData");
static_assert(sizeof(FBattleAngleSpeedData) == 0x000004, "Wrong size on FBattleAngleSpeedData");
static_assert(offsetof(FBattleAngleSpeedData, ElapseTime) == 0x000000, "Member 'FBattleAngleSpeedData::ElapseTime' has a wrong offset!");

// ScriptStruct SS.LagScaleSection
// 0x000C (0x000C - 0x0000)
struct FLagScaleSection final
{
public:
	float                                         LagBaseDownScale;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LagBaseDownScaleStartTime;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LagBaseDownScaleEndTime;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLagScaleSection) == 0x000004, "Wrong alignment on FLagScaleSection");
static_assert(sizeof(FLagScaleSection) == 0x00000C, "Wrong size on FLagScaleSection");
static_assert(offsetof(FLagScaleSection, LagBaseDownScale) == 0x000000, "Member 'FLagScaleSection::LagBaseDownScale' has a wrong offset!");
static_assert(offsetof(FLagScaleSection, LagBaseDownScaleStartTime) == 0x000004, "Member 'FLagScaleSection::LagBaseDownScaleStartTime' has a wrong offset!");
static_assert(offsetof(FLagScaleSection, LagBaseDownScaleEndTime) == 0x000008, "Member 'FLagScaleSection::LagBaseDownScaleEndTime' has a wrong offset!");

// ScriptStruct SS.ZoomSection
// 0x0048 (0x0048 - 0x0000)
struct FZoomSection final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZ;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZSway;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZSwayed;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLengthScale;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpStartTime;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELerpType                                     LerpStartType;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpStartExp;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpEndTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELerpType                                     LerpEndType;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpEndExp;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatAngleScaleSway;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatAngleScaleSwayed;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseYawMinScaleSway;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseYawMinScaleSwayed;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomFocalLengthScaleSway;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomFocalLengthScaleSwayed;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoomSection) == 0x000004, "Wrong alignment on FZoomSection");
static_assert(sizeof(FZoomSection) == 0x000048, "Wrong size on FZoomSection");
static_assert(offsetof(FZoomSection, Offset) == 0x000000, "Member 'FZoomSection::Offset' has a wrong offset!");
static_assert(offsetof(FZoomSection, OffsetZ) == 0x000004, "Member 'FZoomSection::OffsetZ' has a wrong offset!");
static_assert(offsetof(FZoomSection, OffsetZSway) == 0x000008, "Member 'FZoomSection::OffsetZSway' has a wrong offset!");
static_assert(offsetof(FZoomSection, OffsetZSwayed) == 0x00000C, "Member 'FZoomSection::OffsetZSwayed' has a wrong offset!");
static_assert(offsetof(FZoomSection, FocalLengthScale) == 0x000010, "Member 'FZoomSection::FocalLengthScale' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpStartTime) == 0x000014, "Member 'FZoomSection::LerpStartTime' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpStartType) == 0x000018, "Member 'FZoomSection::LerpStartType' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpStartExp) == 0x00001C, "Member 'FZoomSection::LerpStartExp' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpEndTime) == 0x000020, "Member 'FZoomSection::LerpEndTime' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpEndType) == 0x000024, "Member 'FZoomSection::LerpEndType' has a wrong offset!");
static_assert(offsetof(FZoomSection, LerpEndExp) == 0x000028, "Member 'FZoomSection::LerpEndExp' has a wrong offset!");
static_assert(offsetof(FZoomSection, LatAngleScaleSway) == 0x00002C, "Member 'FZoomSection::LatAngleScaleSway' has a wrong offset!");
static_assert(offsetof(FZoomSection, LatAngleScaleSwayed) == 0x000030, "Member 'FZoomSection::LatAngleScaleSwayed' has a wrong offset!");
static_assert(offsetof(FZoomSection, BaseYawMinScaleSway) == 0x000034, "Member 'FZoomSection::BaseYawMinScaleSway' has a wrong offset!");
static_assert(offsetof(FZoomSection, BaseYawMinScaleSwayed) == 0x000038, "Member 'FZoomSection::BaseYawMinScaleSwayed' has a wrong offset!");
static_assert(offsetof(FZoomSection, ZoomFocalLengthScaleSway) == 0x00003C, "Member 'FZoomSection::ZoomFocalLengthScaleSway' has a wrong offset!");
static_assert(offsetof(FZoomSection, ZoomFocalLengthScaleSwayed) == 0x000040, "Member 'FZoomSection::ZoomFocalLengthScaleSwayed' has a wrong offset!");
static_assert(offsetof(FZoomSection, EndTime) == 0x000044, "Member 'FZoomSection::EndTime' has a wrong offset!");

// ScriptStruct SS.SSBattleImpactCharacterTransforms
// 0x0180 (0x0180 - 0x0000)
struct alignas(0x10) FSSBattleImpactCharacterTransforms final
{
public:
	uint8                                         Pad_0[0x180];                                      // 0x0000(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleImpactCharacterTransforms) == 0x000010, "Wrong alignment on FSSBattleImpactCharacterTransforms");
static_assert(sizeof(FSSBattleImpactCharacterTransforms) == 0x000180, "Wrong size on FSSBattleImpactCharacterTransforms");

// ScriptStruct SS.SSBattleImpactAssetPath
// 0x0020 (0x0020 - 0x0000)
struct FSSBattleImpactAssetPath final
{
public:
	class FString                                 SourceAssetPath;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestAssetPath;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleImpactAssetPath) == 0x000008, "Wrong alignment on FSSBattleImpactAssetPath");
static_assert(sizeof(FSSBattleImpactAssetPath) == 0x000020, "Wrong size on FSSBattleImpactAssetPath");
static_assert(offsetof(FSSBattleImpactAssetPath, SourceAssetPath) == 0x000000, "Member 'FSSBattleImpactAssetPath::SourceAssetPath' has a wrong offset!");
static_assert(offsetof(FSSBattleImpactAssetPath, DestAssetPath) == 0x000010, "Member 'FSSBattleImpactAssetPath::DestAssetPath' has a wrong offset!");

// ScriptStruct SS.SSBattleImpactAssetSetPath
// 0x0050 (0x0050 - 0x0000)
struct FSSBattleImpactAssetSetPath final
{
public:
	class FString                                 SourceMasterSequenceAssetPath;                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestMasterSequenceAssetPath;                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationAssetPath;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MontageAssetPath;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionData;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleImpactAssetSetPath) == 0x000008, "Wrong alignment on FSSBattleImpactAssetSetPath");
static_assert(sizeof(FSSBattleImpactAssetSetPath) == 0x000050, "Wrong size on FSSBattleImpactAssetSetPath");
static_assert(offsetof(FSSBattleImpactAssetSetPath, SourceMasterSequenceAssetPath) == 0x000000, "Member 'FSSBattleImpactAssetSetPath::SourceMasterSequenceAssetPath' has a wrong offset!");
static_assert(offsetof(FSSBattleImpactAssetSetPath, DestMasterSequenceAssetPath) == 0x000010, "Member 'FSSBattleImpactAssetSetPath::DestMasterSequenceAssetPath' has a wrong offset!");
static_assert(offsetof(FSSBattleImpactAssetSetPath, AnimationAssetPath) == 0x000020, "Member 'FSSBattleImpactAssetSetPath::AnimationAssetPath' has a wrong offset!");
static_assert(offsetof(FSSBattleImpactAssetSetPath, MontageAssetPath) == 0x000030, "Member 'FSSBattleImpactAssetSetPath::MontageAssetPath' has a wrong offset!");
static_assert(offsetof(FSSBattleImpactAssetSetPath, ActionData) == 0x000040, "Member 'FSSBattleImpactAssetSetPath::ActionData' has a wrong offset!");

// ScriptStruct SS.SSBattleKey
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FSSBattleKey final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleKey) == 0x000004, "Wrong alignment on FSSBattleKey");
static_assert(sizeof(FSSBattleKey) == 0x00001C, "Wrong size on FSSBattleKey");

// ScriptStruct SS.SSKoratVersionSaveData
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionSaveData final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionSaveData) == 0x000008, "Wrong alignment on FSSKoratVersionSaveData");
static_assert(sizeof(FSSKoratVersionSaveData) == 0x000010, "Wrong size on FSSKoratVersionSaveData");

// ScriptStruct SS.SSBattleChecksum
// 0x0190 (0x0190 - 0x0000)
struct alignas(0x10) FSSBattleChecksum final
{
public:
	uint8                                         Pad_0[0x190];                                      // 0x0000(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleChecksum) == 0x000010, "Wrong alignment on FSSBattleChecksum");
static_assert(sizeof(FSSBattleChecksum) == 0x000190, "Wrong size on FSSBattleChecksum");

// ScriptStruct SS.SSBattlePlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct FSSBattlePlayerInfo final
{
public:
	TWeakObjectPtr<class ASSCharacter>            Character;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSCharacter*                           RollbackBeforeCharacter;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattlePlayerInfo) == 0x000008, "Wrong alignment on FSSBattlePlayerInfo");
static_assert(sizeof(FSSBattlePlayerInfo) == 0x000010, "Wrong size on FSSBattlePlayerInfo");
static_assert(offsetof(FSSBattlePlayerInfo, Character) == 0x000000, "Member 'FSSBattlePlayerInfo::Character' has a wrong offset!");
static_assert(offsetof(FSSBattlePlayerInfo, RollbackBeforeCharacter) == 0x000008, "Member 'FSSBattlePlayerInfo::RollbackBeforeCharacter' has a wrong offset!");

// ScriptStruct SS.SSDoubleClickKeyChk
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSSDoubleClickKeyChk final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDoubleClickKeyChk) == 0x000004, "Wrong alignment on FSSDoubleClickKeyChk");
static_assert(sizeof(FSSDoubleClickKeyChk) == 0x00000C, "Wrong size on FSSDoubleClickKeyChk");

// ScriptStruct SS.SSBattlePracticeAction
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSSBattlePracticeAction final
{
public:
	EBattlePracticeJudgmentType                   JudgmentType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   ActionDataList;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAmountXY;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAmountZ;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x24];                                      // 0x001C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattlePracticeAction) == 0x000008, "Wrong alignment on FSSBattlePracticeAction");
static_assert(sizeof(FSSBattlePracticeAction) == 0x000040, "Wrong size on FSSBattlePracticeAction");
static_assert(offsetof(FSSBattlePracticeAction, JudgmentType) == 0x000000, "Member 'FSSBattlePracticeAction::JudgmentType' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeAction, ActionDataList) == 0x000004, "Member 'FSSBattlePracticeAction::ActionDataList' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeAction, SectionName) == 0x00000C, "Member 'FSSBattlePracticeAction::SectionName' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeAction, MoveAmountXY) == 0x000014, "Member 'FSSBattlePracticeAction::MoveAmountXY' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeAction, MoveAmountZ) == 0x000018, "Member 'FSSBattlePracticeAction::MoveAmountZ' has a wrong offset!");

// ScriptStruct SS.SSBattlePracticeCommand
// 0x0038 (0x0038 - 0x0000)
struct FSSBattlePracticeCommand final
{
public:
	TArray<struct FSSBattlePracticeAction>        SuccessActions;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EKoratBattleKey>                       UiBattleKeys;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratActionDataList>           FailureActions;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EBattlePracticeAcceptedInputsType             AcceptedInputsType;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattlePracticeCommand) == 0x000008, "Wrong alignment on FSSBattlePracticeCommand");
static_assert(sizeof(FSSBattlePracticeCommand) == 0x000038, "Wrong size on FSSBattlePracticeCommand");
static_assert(offsetof(FSSBattlePracticeCommand, SuccessActions) == 0x000000, "Member 'FSSBattlePracticeCommand::SuccessActions' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeCommand, UiBattleKeys) == 0x000010, "Member 'FSSBattlePracticeCommand::UiBattleKeys' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeCommand, FailureActions) == 0x000020, "Member 'FSSBattlePracticeCommand::FailureActions' has a wrong offset!");
static_assert(offsetof(FSSBattlePracticeCommand, AcceptedInputsType) == 0x000030, "Member 'FSSBattlePracticeCommand::AcceptedInputsType' has a wrong offset!");

// ScriptStruct SS.SSBattlePracticeMenu
// 0x0150 (0x0150 - 0x0000)
struct alignas(0x10) FSSBattlePracticeMenu final
{
public:
	uint8                                         Pad_0[0x150];                                      // 0x0000(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattlePracticeMenu) == 0x000010, "Wrong alignment on FSSBattlePracticeMenu");
static_assert(sizeof(FSSBattlePracticeMenu) == 0x000150, "Wrong size on FSSBattlePracticeMenu");

// ScriptStruct SS.KoratSequencerRebindInfo
// 0x0040 (0x0040 - 0x0000)
struct FKoratSequencerRebindInfo final
{
public:
	struct FMovieSceneObjectBindingID             BindingId;                                         // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectName;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ActorGUID;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x14];                                      // 0x002C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratSequencerRebindInfo) == 0x000008, "Wrong alignment on FKoratSequencerRebindInfo");
static_assert(sizeof(FKoratSequencerRebindInfo) == 0x000040, "Wrong size on FKoratSequencerRebindInfo");
static_assert(offsetof(FKoratSequencerRebindInfo, BindingId) == 0x000000, "Member 'FKoratSequencerRebindInfo::BindingId' has a wrong offset!");
static_assert(offsetof(FKoratSequencerRebindInfo, ObjectName) == 0x000018, "Member 'FKoratSequencerRebindInfo::ObjectName' has a wrong offset!");
static_assert(offsetof(FKoratSequencerRebindInfo, ActorGUID) == 0x000028, "Member 'FKoratSequencerRebindInfo::ActorGUID' has a wrong offset!");

// ScriptStruct SS.SSReplayChecksum
// 0x0190 (0x0190 - 0x0000)
struct alignas(0x10) FSSReplayChecksum final
{
public:
	uint8                                         Pad_0[0x190];                                      // 0x0000(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSReplayChecksum) == 0x000010, "Wrong alignment on FSSReplayChecksum");
static_assert(sizeof(FSSReplayChecksum) == 0x000190, "Wrong size on FSSReplayChecksum");

// ScriptStruct SS.DebugReplayUIInfo
// 0x001C (0x001C - 0x0000)
struct FDebugReplayUIInfo final
{
public:
	bool                                          bCanDebugReplayPlay;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDebugReplayRecord;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDebugReplayStop;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPlayFrame;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayFrame;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDebugReplayLoop;                               // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanReplayLoad;                                    // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanReplaySave;                                    // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowWindow;                                     // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDebugReplayFlag;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDebugReplayRecordFlag;                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayReplay1P;                                   // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayReplay2P;                                   // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplayInputsIndex;                                 // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCheckSumError;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayReplay;                                     // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugReplayUIInfo) == 0x000004, "Wrong alignment on FDebugReplayUIInfo");
static_assert(sizeof(FDebugReplayUIInfo) == 0x00001C, "Wrong size on FDebugReplayUIInfo");
static_assert(offsetof(FDebugReplayUIInfo, bCanDebugReplayPlay) == 0x000000, "Member 'FDebugReplayUIInfo::bCanDebugReplayPlay' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bCanDebugReplayRecord) == 0x000001, "Member 'FDebugReplayUIInfo::bCanDebugReplayRecord' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bCanDebugReplayStop) == 0x000002, "Member 'FDebugReplayUIInfo::bCanDebugReplayStop' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, CurrentPlayFrame) == 0x000004, "Member 'FDebugReplayUIInfo::CurrentPlayFrame' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, TotalPlayFrame) == 0x000008, "Member 'FDebugReplayUIInfo::TotalPlayFrame' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bCanDebugReplayLoop) == 0x00000C, "Member 'FDebugReplayUIInfo::bCanDebugReplayLoop' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bCanReplayLoad) == 0x00000D, "Member 'FDebugReplayUIInfo::bCanReplayLoad' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bCanReplaySave) == 0x00000E, "Member 'FDebugReplayUIInfo::bCanReplaySave' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsShowWindow) == 0x00000F, "Member 'FDebugReplayUIInfo::bIsShowWindow' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsDebugReplayFlag) == 0x000010, "Member 'FDebugReplayUIInfo::bIsDebugReplayFlag' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsDebugReplayRecordFlag) == 0x000011, "Member 'FDebugReplayUIInfo::bIsDebugReplayRecordFlag' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsPlayReplay1P) == 0x000012, "Member 'FDebugReplayUIInfo::bIsPlayReplay1P' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsPlayReplay2P) == 0x000013, "Member 'FDebugReplayUIInfo::bIsPlayReplay2P' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, ReplayInputsIndex) == 0x000014, "Member 'FDebugReplayUIInfo::ReplayInputsIndex' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsCheckSumError) == 0x000018, "Member 'FDebugReplayUIInfo::bIsCheckSumError' has a wrong offset!");
static_assert(offsetof(FDebugReplayUIInfo, bIsPlayReplay) == 0x000019, "Member 'FDebugReplayUIInfo::bIsPlayReplay' has a wrong offset!");

// ScriptStruct SS.SSReplayBattleEtcData
// 0x000C (0x000C - 0x0000)
struct FSSReplayBattleEtcData final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumObservers;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSReplayBattleEtcData) == 0x000004, "Wrong alignment on FSSReplayBattleEtcData");
static_assert(sizeof(FSSReplayBattleEtcData) == 0x00000C, "Wrong size on FSSReplayBattleEtcData");
static_assert(offsetof(FSSReplayBattleEtcData, Frame) == 0x000000, "Member 'FSSReplayBattleEtcData::Frame' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleEtcData, LikeCount) == 0x000004, "Member 'FSSReplayBattleEtcData::LikeCount' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleEtcData, NumObservers) == 0x000008, "Member 'FSSReplayBattleEtcData::NumObservers' has a wrong offset!");

// ScriptStruct SS.SSReplayBattleData
// 0x0060 (0x0060 - 0x0000)
struct FSSReplayBattleData final
{
public:
	TArray<struct FSSBattleKey>                   ReplayKey0;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBattleKey>                   ReplayKey1;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSStampData>                   StampData;                                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSReplayBattleEtcData>         EtcData;                                           // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSReplayChecksum>              ReplayChechsum0;                                   // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSReplayChecksum>              ReplayChechsum1;                                   // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSReplayBattleData) == 0x000008, "Wrong alignment on FSSReplayBattleData");
static_assert(sizeof(FSSReplayBattleData) == 0x000060, "Wrong size on FSSReplayBattleData");
static_assert(offsetof(FSSReplayBattleData, ReplayKey0) == 0x000000, "Member 'FSSReplayBattleData::ReplayKey0' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleData, ReplayKey1) == 0x000010, "Member 'FSSReplayBattleData::ReplayKey1' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleData, StampData) == 0x000020, "Member 'FSSReplayBattleData::StampData' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleData, EtcData) == 0x000030, "Member 'FSSReplayBattleData::EtcData' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleData, ReplayChechsum0) == 0x000040, "Member 'FSSReplayBattleData::ReplayChechsum0' has a wrong offset!");
static_assert(offsetof(FSSReplayBattleData, ReplayChechsum1) == 0x000050, "Member 'FSSReplayBattleData::ReplayChechsum1' has a wrong offset!");

// ScriptStruct SS.KoratRequestVisibilitySwirchInfo
// 0x0010 (0x0010 - 0x0000)
struct FKoratRequestVisibilitySwirchInfo final
{
public:
	class ASSCharacter*                           SSCharacter;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRequestVisibilitySwirchInfo) == 0x000008, "Wrong alignment on FKoratRequestVisibilitySwirchInfo");
static_assert(sizeof(FKoratRequestVisibilitySwirchInfo) == 0x000010, "Wrong size on FKoratRequestVisibilitySwirchInfo");
static_assert(offsetof(FKoratRequestVisibilitySwirchInfo, SSCharacter) == 0x000000, "Member 'FKoratRequestVisibilitySwirchInfo::SSCharacter' has a wrong offset!");

// ScriptStruct SS.SSWCTWishSelectorButtons
// 0x0010 (0x0010 - 0x0000)
struct FSSWCTWishSelectorButtons final
{
public:
	TArray<class USSWishSelectorTalkButton*>      Buttons;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWCTWishSelectorButtons) == 0x000008, "Wrong alignment on FSSWCTWishSelectorButtons");
static_assert(sizeof(FSSWCTWishSelectorButtons) == 0x000010, "Wrong size on FSSWCTWishSelectorButtons");
static_assert(offsetof(FSSWCTWishSelectorButtons, Buttons) == 0x000000, "Member 'FSSWCTWishSelectorButtons::Buttons' has a wrong offset!");

// ScriptStruct SS.BattleSetupPlayerWidgets
// 0x0010 (0x0010 - 0x0000)
struct FBattleSetupPlayerWidgets final
{
public:
	class USSBattleSetupCharaIcon*                TopCharaIcon;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleSetupPlayerWidgets) == 0x000008, "Wrong alignment on FBattleSetupPlayerWidgets");
static_assert(sizeof(FBattleSetupPlayerWidgets) == 0x000010, "Wrong size on FBattleSetupPlayerWidgets");
static_assert(offsetof(FBattleSetupPlayerWidgets, TopCharaIcon) == 0x000000, "Member 'FBattleSetupPlayerWidgets::TopCharaIcon' has a wrong offset!");

// ScriptStruct SS.BattleSetupPlayerStarts
// 0x0040 (0x0040 - 0x0000)
struct FBattleSetupPlayerStarts final
{
public:
	TArray<struct FKoratPlayerStartDataList>      TeamMembersPlaceNormal;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratPlayerStartDataList>      TeamMembersPlaceLarge;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratPlayerStartDataList>      TeamMembersPlaceSpecial;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratPlayerStartDataList>      CharacterChangePlaceList;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleSetupPlayerStarts) == 0x000008, "Wrong alignment on FBattleSetupPlayerStarts");
static_assert(sizeof(FBattleSetupPlayerStarts) == 0x000040, "Wrong size on FBattleSetupPlayerStarts");
static_assert(offsetof(FBattleSetupPlayerStarts, TeamMembersPlaceNormal) == 0x000000, "Member 'FBattleSetupPlayerStarts::TeamMembersPlaceNormal' has a wrong offset!");
static_assert(offsetof(FBattleSetupPlayerStarts, TeamMembersPlaceLarge) == 0x000010, "Member 'FBattleSetupPlayerStarts::TeamMembersPlaceLarge' has a wrong offset!");
static_assert(offsetof(FBattleSetupPlayerStarts, TeamMembersPlaceSpecial) == 0x000020, "Member 'FBattleSetupPlayerStarts::TeamMembersPlaceSpecial' has a wrong offset!");
static_assert(offsetof(FBattleSetupPlayerStarts, CharacterChangePlaceList) == 0x000030, "Member 'FBattleSetupPlayerStarts::CharacterChangePlaceList' has a wrong offset!");

// ScriptStruct SS.DebugDraw2DItem
// 0x0030 (0x0030 - 0x0000)
struct FDebugDraw2DItem final
{
public:
	struct FVector2D                              SrcPos;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DstPos;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugDraw2DItem) == 0x000008, "Wrong alignment on FDebugDraw2DItem");
static_assert(sizeof(FDebugDraw2DItem) == 0x000030, "Wrong size on FDebugDraw2DItem");
static_assert(offsetof(FDebugDraw2DItem, SrcPos) == 0x000000, "Member 'FDebugDraw2DItem::SrcPos' has a wrong offset!");
static_assert(offsetof(FDebugDraw2DItem, DstPos) == 0x000010, "Member 'FDebugDraw2DItem::DstPos' has a wrong offset!");
static_assert(offsetof(FDebugDraw2DItem, Color) == 0x000020, "Member 'FDebugDraw2DItem::Color' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupPlayerLabelObjects
// 0x0020 (0x0020 - 0x0000)
struct FSSBattleSetupPlayerLabelObjects final
{
public:
	class UObject*                                Base;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outline;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                BaseRight;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutlineRight;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupPlayerLabelObjects) == 0x000008, "Wrong alignment on FSSBattleSetupPlayerLabelObjects");
static_assert(sizeof(FSSBattleSetupPlayerLabelObjects) == 0x000020, "Wrong size on FSSBattleSetupPlayerLabelObjects");
static_assert(offsetof(FSSBattleSetupPlayerLabelObjects, Base) == 0x000000, "Member 'FSSBattleSetupPlayerLabelObjects::Base' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupPlayerLabelObjects, Outline) == 0x000008, "Member 'FSSBattleSetupPlayerLabelObjects::Outline' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupPlayerLabelObjects, BaseRight) == 0x000010, "Member 'FSSBattleSetupPlayerLabelObjects::BaseRight' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupPlayerLabelObjects, OutlineRight) == 0x000018, "Member 'FSSBattleSetupPlayerLabelObjects::OutlineRight' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupCharacterData
// 0x0038 (0x0038 - 0x0000)
struct FKoratBattleSetupCharacterData final
{
public:
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0000(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeDataList;                                   // 0x0008(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      SparkingBGM;                                       // 0x0010(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   AiType;                                            // 0x0018(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiLevel;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupCharacterData) == 0x000008, "Wrong alignment on FKoratBattleSetupCharacterData");
static_assert(sizeof(FKoratBattleSetupCharacterData) == 0x000038, "Wrong size on FKoratBattleSetupCharacterData");
static_assert(offsetof(FKoratBattleSetupCharacterData, CharacterDataList) == 0x000000, "Member 'FKoratBattleSetupCharacterData::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupCharacterData, CostumeDataList) == 0x000008, "Member 'FKoratBattleSetupCharacterData::CostumeDataList' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupCharacterData, SparkingBGM) == 0x000010, "Member 'FKoratBattleSetupCharacterData::SparkingBGM' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupCharacterData, AiType) == 0x000018, "Member 'FKoratBattleSetupCharacterData::AiType' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupCharacterData, AiLevel) == 0x000020, "Member 'FKoratBattleSetupCharacterData::AiLevel' has a wrong offset!");
static_assert(offsetof(FKoratBattleSetupCharacterData, EquipItems) == 0x000028, "Member 'FKoratBattleSetupCharacterData::EquipItems' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFLineDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FSSDragonAdventureIFLineDataAssetRecord final
{
public:
	class FName                                   LineID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginEventBlock;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndEventBlock;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectBeginEventBlock;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectEndEventBlock;                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFLineDataAssetRecord) == 0x000004, "Wrong alignment on FSSDragonAdventureIFLineDataAssetRecord");
static_assert(sizeof(FSSDragonAdventureIFLineDataAssetRecord) == 0x000028, "Wrong size on FSSDragonAdventureIFLineDataAssetRecord");
static_assert(offsetof(FSSDragonAdventureIFLineDataAssetRecord, LineID) == 0x000000, "Member 'FSSDragonAdventureIFLineDataAssetRecord::LineID' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFLineDataAssetRecord, BeginEventBlock) == 0x000008, "Member 'FSSDragonAdventureIFLineDataAssetRecord::BeginEventBlock' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFLineDataAssetRecord, EndEventBlock) == 0x000010, "Member 'FSSDragonAdventureIFLineDataAssetRecord::EndEventBlock' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFLineDataAssetRecord, ConnectBeginEventBlock) == 0x000018, "Member 'FSSDragonAdventureIFLineDataAssetRecord::ConnectBeginEventBlock' has a wrong offset!");
static_assert(offsetof(FSSDragonAdventureIFLineDataAssetRecord, ConnectEndEventBlock) == 0x000020, "Member 'FSSDragonAdventureIFLineDataAssetRecord::ConnectEndEventBlock' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupTeamData
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleSetupTeamData final
{
public:
	TArray<struct FKoratBattleSetupCharacterData> TeamMembers;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupTeamData) == 0x000008, "Wrong alignment on FKoratBattleSetupTeamData");
static_assert(sizeof(FKoratBattleSetupTeamData) == 0x000010, "Wrong size on FKoratBattleSetupTeamData");
static_assert(offsetof(FKoratBattleSetupTeamData, TeamMembers) == 0x000000, "Member 'FKoratBattleSetupTeamData::TeamMembers' has a wrong offset!");

// ScriptStruct SS.SSTutorialMovieGuideWidgets
// 0x0018 (0x0018 - 0x0000)
struct FSSTutorialMovieGuideWidgets final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SkipWidget;                                        // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTutorialMovieGuideWidgets) == 0x000008, "Wrong alignment on FSSTutorialMovieGuideWidgets");
static_assert(sizeof(FSSTutorialMovieGuideWidgets) == 0x000018, "Wrong size on FSSTutorialMovieGuideWidgets");
static_assert(offsetof(FSSTutorialMovieGuideWidgets, SkipWidget) == 0x000008, "Member 'FSSTutorialMovieGuideWidgets::SkipWidget' has a wrong offset!");

// ScriptStruct SS.KoratBattleSetupData
// 0x0010 (0x0010 - 0x0000)
struct FKoratBattleSetupData final
{
public:
	TArray<struct FKoratBattleSetupTeamData>      TeamData;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleSetupData) == 0x000008, "Wrong alignment on FKoratBattleSetupData");
static_assert(sizeof(FKoratBattleSetupData) == 0x000010, "Wrong size on FKoratBattleSetupData");
static_assert(offsetof(FKoratBattleSetupData, TeamData) == 0x000000, "Member 'FKoratBattleSetupData::TeamData' has a wrong offset!");

// ScriptStruct SS.SSBattleTrainingBattleUiCharacterInfo
// 0x0060 (0x0060 - 0x0000)
struct FSSBattleTrainingBattleUiCharacterInfo final
{
public:
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              StartData;                                         // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESSBattleTrainingBattleUiCharaActionType, TSoftObjectPtr<class ULevelSequence>> Actions;                                           // 0x0010(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleTrainingBattleUiCharacterInfo) == 0x000008, "Wrong alignment on FSSBattleTrainingBattleUiCharacterInfo");
static_assert(sizeof(FSSBattleTrainingBattleUiCharacterInfo) == 0x000060, "Wrong size on FSSBattleTrainingBattleUiCharacterInfo");
static_assert(offsetof(FSSBattleTrainingBattleUiCharacterInfo, CharacterDataList) == 0x000000, "Member 'FSSBattleTrainingBattleUiCharacterInfo::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingBattleUiCharacterInfo, StartData) == 0x000008, "Member 'FSSBattleTrainingBattleUiCharacterInfo::StartData' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingBattleUiCharacterInfo, Actions) == 0x000010, "Member 'FSSBattleTrainingBattleUiCharacterInfo::Actions' has a wrong offset!");

// ScriptStruct SS.KoratMovieSceneVisibilitySectionTemplate
// 0x0100 (0x0138 - 0x0038)
struct FKoratMovieSceneVisibilitySectionTemplate final : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneBoolChannel                 BoolCurve;                                         // 0x0038(0x0100)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKoratMovieSceneVisibilitySectionTemplate) == 0x000008, "Wrong alignment on FKoratMovieSceneVisibilitySectionTemplate");
static_assert(sizeof(FKoratMovieSceneVisibilitySectionTemplate) == 0x000138, "Wrong size on FKoratMovieSceneVisibilitySectionTemplate");
static_assert(offsetof(FKoratMovieSceneVisibilitySectionTemplate, BoolCurve) == 0x000038, "Member 'FKoratMovieSceneVisibilitySectionTemplate::BoolCurve' has a wrong offset!");

// ScriptStruct SS.SSTrainingBattleAiInfo
// 0x0048 (0x0048 - 0x0000)
struct FSSTrainingBattleAiInfo final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AiName;                                            // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         AIMode;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   AiType;                                            // 0x0024(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AiComment;                                         // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTrainingBattleAiInfo) == 0x000008, "Wrong alignment on FSSTrainingBattleAiInfo");
static_assert(sizeof(FSSTrainingBattleAiInfo) == 0x000048, "Wrong size on FSSTrainingBattleAiInfo");
static_assert(offsetof(FSSTrainingBattleAiInfo, bSet) == 0x000000, "Member 'FSSTrainingBattleAiInfo::bSet' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleAiInfo, AiName) == 0x000008, "Member 'FSSTrainingBattleAiInfo::AiName' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleAiInfo, AIMode) == 0x000020, "Member 'FSSTrainingBattleAiInfo::AIMode' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleAiInfo, AiType) == 0x000024, "Member 'FSSTrainingBattleAiInfo::AiType' has a wrong offset!");
static_assert(offsetof(FSSTrainingBattleAiInfo, AiComment) == 0x000030, "Member 'FSSTrainingBattleAiInfo::AiComment' has a wrong offset!");

// ScriptStruct SS.SSSlotParameter
// 0x0240 (0x0240 - 0x0000)
struct FSSSlotParameter final
{
public:
	bool                                          bResetLag;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableReconnectManualCamera;                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDetourFirstCam;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDetourFirstLat;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTurnClock;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCameraConnectOption                 ConnectOption;                                     // 0x0005(0x0007)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bConnectOptionStartAutoDetourFirst;                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectOptionEndAutoDetourFirst;                  // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartAutoDetourEnable;                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleCameraDetourLerpType                   StartAutoDetourLerpType;                           // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEndAutoDetourEnable;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleCameraDetourLerpType                   EndAutoDetourLerpType;                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalCam;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChaseStart;                                      // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseElapsedTimeMax;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseElapsedTime;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AfterImageCamPos;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AfterImageLatPos;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAfterImageCamPosBaked;                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAfterImageLatPosBaked;                            // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LagConvergence;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LagBaseWeightCam;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LagBaseWeightLat;                                  // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LagBaseWeightCamMinus;                             // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LagBaseWeightLatMinus;                             // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaBlockRestTimeCam;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaBlockRestTimeLat;                           // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBlendTimeCam;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBlendTimeLat;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DelayFilmbackCam;                                  // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DelayFilmbackLat;                                  // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DelayFilmbackScaleCam;                             // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DelayFilmbackScaleLat;                             // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdditiveInput;                                     // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdditiveInputGoal;                                 // 0x0140(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveInputPreUpdatedPitch;                     // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveInputPreUpdatedYaw;                       // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AdditiveInputPre;                                  // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdditiveInputPreSub;                               // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdditiveInputEnable;                               // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveInputNoNeutralMode;                       // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditiveInputNoNeutralLock;                       // 0x0192(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAdditiveRotateInputMode                AdditiveInputMode;                                 // 0x0193(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AdditiveInputWorldRotate;                          // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AdditiveInputWorldRotateGoal;                      // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SecretHideForceVDisable;                           // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SecretHideForceHDisable;                           // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSecretHideBall;                              // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB[0x1];                                      // 0x01CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugSecretHideMinPitch;                           // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugSecretHideMinYaw;                             // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugSecretHideMaxPitch;                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugSecretHideMaxYaw;                             // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpdateAdditiveRotateInputAvoidTerrainCamOffset;    // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateAdditiveRotateInputAvoidTerrainLockDirection; // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateAdditiveRotateInputAvoidTerrainLockDirectionCount; // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollScaleMax;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugFixRollGoalReal;                              // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x34];                                     // 0x020C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSlotParameter) == 0x000008, "Wrong alignment on FSSSlotParameter");
static_assert(sizeof(FSSSlotParameter) == 0x000240, "Wrong size on FSSSlotParameter");
static_assert(offsetof(FSSSlotParameter, bResetLag) == 0x000000, "Member 'FSSSlotParameter::bResetLag' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bDisableReconnectManualCamera) == 0x000001, "Member 'FSSSlotParameter::bDisableReconnectManualCamera' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsDetourFirstCam) == 0x000002, "Member 'FSSSlotParameter::IsDetourFirstCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsDetourFirstLat) == 0x000003, "Member 'FSSSlotParameter::IsDetourFirstLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsTurnClock) == 0x000004, "Member 'FSSSlotParameter::IsTurnClock' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, ConnectOption) == 0x000005, "Member 'FSSSlotParameter::ConnectOption' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bConnectOptionStartAutoDetourFirst) == 0x00000C, "Member 'FSSSlotParameter::bConnectOptionStartAutoDetourFirst' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bConnectOptionEndAutoDetourFirst) == 0x00000D, "Member 'FSSSlotParameter::bConnectOptionEndAutoDetourFirst' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsStartAutoDetourEnable) == 0x00000E, "Member 'FSSSlotParameter::IsStartAutoDetourEnable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, StartAutoDetourLerpType) == 0x00000F, "Member 'FSSSlotParameter::StartAutoDetourLerpType' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsEndAutoDetourEnable) == 0x000010, "Member 'FSSSlotParameter::IsEndAutoDetourEnable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, EndAutoDetourLerpType) == 0x000011, "Member 'FSSSlotParameter::EndAutoDetourLerpType' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bGoalCam) == 0x000012, "Member 'FSSSlotParameter::bGoalCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, IsChaseStart) == 0x000013, "Member 'FSSSlotParameter::IsChaseStart' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, ChaseElapsedTimeMax) == 0x000014, "Member 'FSSSlotParameter::ChaseElapsedTimeMax' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, ChaseElapsedTime) == 0x000018, "Member 'FSSSlotParameter::ChaseElapsedTime' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AfterImageCamPos) == 0x000020, "Member 'FSSSlotParameter::AfterImageCamPos' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AfterImageLatPos) == 0x000038, "Member 'FSSSlotParameter::AfterImageLatPos' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAfterImageCamPosBaked) == 0x000050, "Member 'FSSSlotParameter::bAfterImageCamPosBaked' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAfterImageLatPosBaked) == 0x000051, "Member 'FSSSlotParameter::bAfterImageLatPosBaked' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LagConvergence) == 0x000054, "Member 'FSSSlotParameter::LagConvergence' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LagBaseWeightCam) == 0x000058, "Member 'FSSSlotParameter::LagBaseWeightCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LagBaseWeightLat) == 0x000070, "Member 'FSSSlotParameter::LagBaseWeightLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LagBaseWeightCamMinus) == 0x000088, "Member 'FSSSlotParameter::LagBaseWeightCamMinus' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LagBaseWeightLatMinus) == 0x0000A0, "Member 'FSSSlotParameter::LagBaseWeightLatMinus' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, InertiaBlockRestTimeCam) == 0x0000B8, "Member 'FSSSlotParameter::InertiaBlockRestTimeCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, InertiaBlockRestTimeLat) == 0x0000BC, "Member 'FSSSlotParameter::InertiaBlockRestTimeLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LastBlendTimeCam) == 0x0000C0, "Member 'FSSSlotParameter::LastBlendTimeCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, LastBlendTimeLat) == 0x0000C4, "Member 'FSSSlotParameter::LastBlendTimeLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DelayFilmbackCam) == 0x0000C8, "Member 'FSSSlotParameter::DelayFilmbackCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DelayFilmbackLat) == 0x0000E0, "Member 'FSSSlotParameter::DelayFilmbackLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DelayFilmbackScaleCam) == 0x0000F8, "Member 'FSSSlotParameter::DelayFilmbackScaleCam' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DelayFilmbackScaleLat) == 0x000110, "Member 'FSSSlotParameter::DelayFilmbackScaleLat' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInput) == 0x000128, "Member 'FSSSlotParameter::AdditiveInput' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputGoal) == 0x000140, "Member 'FSSSlotParameter::AdditiveInputGoal' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAdditiveInputPreUpdatedPitch) == 0x000158, "Member 'FSSSlotParameter::bAdditiveInputPreUpdatedPitch' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAdditiveInputPreUpdatedYaw) == 0x000159, "Member 'FSSSlotParameter::bAdditiveInputPreUpdatedYaw' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputPre) == 0x000160, "Member 'FSSSlotParameter::AdditiveInputPre' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputPreSub) == 0x000178, "Member 'FSSSlotParameter::AdditiveInputPreSub' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputEnable) == 0x000190, "Member 'FSSSlotParameter::AdditiveInputEnable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAdditiveInputNoNeutralMode) == 0x000191, "Member 'FSSSlotParameter::bAdditiveInputNoNeutralMode' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bAdditiveInputNoNeutralLock) == 0x000192, "Member 'FSSSlotParameter::bAdditiveInputNoNeutralLock' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputMode) == 0x000193, "Member 'FSSSlotParameter::AdditiveInputMode' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputWorldRotate) == 0x000198, "Member 'FSSSlotParameter::AdditiveInputWorldRotate' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, AdditiveInputWorldRotateGoal) == 0x0001B0, "Member 'FSSSlotParameter::AdditiveInputWorldRotateGoal' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, SecretHideForceVDisable) == 0x0001C8, "Member 'FSSSlotParameter::SecretHideForceVDisable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, SecretHideForceHDisable) == 0x0001C9, "Member 'FSSSlotParameter::SecretHideForceHDisable' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, bDebugSecretHideBall) == 0x0001CA, "Member 'FSSSlotParameter::bDebugSecretHideBall' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DebugSecretHideMinPitch) == 0x0001CC, "Member 'FSSSlotParameter::DebugSecretHideMinPitch' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DebugSecretHideMinYaw) == 0x0001D0, "Member 'FSSSlotParameter::DebugSecretHideMinYaw' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DebugSecretHideMaxPitch) == 0x0001D4, "Member 'FSSSlotParameter::DebugSecretHideMaxPitch' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DebugSecretHideMaxYaw) == 0x0001D8, "Member 'FSSSlotParameter::DebugSecretHideMaxYaw' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, UpdateAdditiveRotateInputAvoidTerrainCamOffset) == 0x0001E0, "Member 'FSSSlotParameter::UpdateAdditiveRotateInputAvoidTerrainCamOffset' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, UpdateAdditiveRotateInputAvoidTerrainLockDirection) == 0x0001F8, "Member 'FSSSlotParameter::UpdateAdditiveRotateInputAvoidTerrainLockDirection' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, UpdateAdditiveRotateInputAvoidTerrainLockDirectionCount) == 0x0001FC, "Member 'FSSSlotParameter::UpdateAdditiveRotateInputAvoidTerrainLockDirectionCount' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, RollScaleMax) == 0x000200, "Member 'FSSSlotParameter::RollScaleMax' has a wrong offset!");
static_assert(offsetof(FSSSlotParameter, DebugFixRollGoalReal) == 0x000208, "Member 'FSSSlotParameter::DebugFixRollGoalReal' has a wrong offset!");

// ScriptStruct SS.SSBattleTrainingTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSBattleTrainingTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleTrainingTransitionData) == 0x000004, "Wrong alignment on FSSBattleTrainingTransitionData");
static_assert(sizeof(FSSBattleTrainingTransitionData) == 0x000010, "Wrong size on FSSBattleTrainingTransitionData");

// ScriptStruct SS.SSBattleTrainingCharacterInfo
// 0x0080 (0x0080 - 0x0000)
struct FSSBattleTrainingCharacterInfo final
{
public:
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeDataList;                                   // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    ItemDataListArray;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              StartData;                                         // 0x0020(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerStartDataList              SceneStartData;                                    // 0x0028(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESSBattleTrainingCharaActionType, TSoftObjectPtr<class ULevelSequence>> Actions;                                           // 0x0030(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleTrainingCharacterInfo) == 0x000008, "Wrong alignment on FSSBattleTrainingCharacterInfo");
static_assert(sizeof(FSSBattleTrainingCharacterInfo) == 0x000080, "Wrong size on FSSBattleTrainingCharacterInfo");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, CharacterDataList) == 0x000000, "Member 'FSSBattleTrainingCharacterInfo::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, CostumeDataList) == 0x000008, "Member 'FSSBattleTrainingCharacterInfo::CostumeDataList' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, ItemDataListArray) == 0x000010, "Member 'FSSBattleTrainingCharacterInfo::ItemDataListArray' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, StartData) == 0x000020, "Member 'FSSBattleTrainingCharacterInfo::StartData' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, SceneStartData) == 0x000028, "Member 'FSSBattleTrainingCharacterInfo::SceneStartData' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingCharacterInfo, Actions) == 0x000030, "Member 'FSSBattleTrainingCharacterInfo::Actions' has a wrong offset!");

// ScriptStruct SS.SSBattleTrainingTalkData
// 0x0020 (0x0020 - 0x0000)
struct FSSBattleTrainingTalkData final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LineText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleTrainingTalkData) == 0x000008, "Wrong alignment on FSSBattleTrainingTalkData");
static_assert(sizeof(FSSBattleTrainingTalkData) == 0x000020, "Wrong size on FSSBattleTrainingTalkData");
static_assert(offsetof(FSSBattleTrainingTalkData, Character) == 0x000000, "Member 'FSSBattleTrainingTalkData::Character' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingTalkData, LineText) == 0x000008, "Member 'FSSBattleTrainingTalkData::LineText' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorFunctionDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticBattleCutEditorFunctionDataAssetRecord final
{
public:
	struct FKoratDramaticBattleCutEditorFunctionOperationDataList FunctionOperation;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCutEditorFunctionParameterDataList FunctionParameter;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorFunctionDataAssetRecord) == 0x000004, "Wrong alignment on FSSDramaticBattleCutEditorFunctionDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorFunctionDataAssetRecord) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorFunctionDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorFunctionDataAssetRecord, FunctionOperation) == 0x000000, "Member 'FSSDramaticBattleCutEditorFunctionDataAssetRecord::FunctionOperation' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorFunctionDataAssetRecord, FunctionParameter) == 0x000008, "Member 'FSSDramaticBattleCutEditorFunctionDataAssetRecord::FunctionParameter' has a wrong offset!");

// ScriptStruct SS.SSBattleTrainingTalkInfo
// 0x0018 (0x0018 - 0x0000)
struct FSSBattleTrainingTalkInfo final
{
public:
	int32                                         MinMissionCount;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMissionCount;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSBattleTrainingTalkData>      TalkDataArray;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleTrainingTalkInfo) == 0x000008, "Wrong alignment on FSSBattleTrainingTalkInfo");
static_assert(sizeof(FSSBattleTrainingTalkInfo) == 0x000018, "Wrong size on FSSBattleTrainingTalkInfo");
static_assert(offsetof(FSSBattleTrainingTalkInfo, MinMissionCount) == 0x000000, "Member 'FSSBattleTrainingTalkInfo::MinMissionCount' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingTalkInfo, MaxMissionCount) == 0x000004, "Member 'FSSBattleTrainingTalkInfo::MaxMissionCount' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingTalkInfo, TalkDataArray) == 0x000008, "Member 'FSSBattleTrainingTalkInfo::TalkDataArray' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueDataAssetRecord
// 0x0098 (0x0098 - 0x0000)
struct FSSWishComeTrueDataAssetRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelSequence>>  DarkCloundSequences;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSSWishComeTrueCharacterData           DragonData;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           WordsAppear;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           WordsSelection;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           WordsWishGranted;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           WordsLeave;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWishComeTrueDataAssetRecord) == 0x000008, "Wrong alignment on FSSWishComeTrueDataAssetRecord");
static_assert(sizeof(FSSWishComeTrueDataAssetRecord) == 0x000098, "Wrong size on FSSWishComeTrueDataAssetRecord");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, Sequence) == 0x000000, "Member 'FSSWishComeTrueDataAssetRecord::Sequence' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, DarkCloundSequences) == 0x000030, "Member 'FSSWishComeTrueDataAssetRecord::DarkCloundSequences' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, DragonData) == 0x000040, "Member 'FSSWishComeTrueDataAssetRecord::DragonData' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, WordsAppear) == 0x000058, "Member 'FSSWishComeTrueDataAssetRecord::WordsAppear' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, WordsSelection) == 0x000068, "Member 'FSSWishComeTrueDataAssetRecord::WordsSelection' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, WordsWishGranted) == 0x000078, "Member 'FSSWishComeTrueDataAssetRecord::WordsWishGranted' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueDataAssetRecord, WordsLeave) == 0x000088, "Member 'FSSWishComeTrueDataAssetRecord::WordsLeave' has a wrong offset!");

// ScriptStruct SS.SSBattleTrainingParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSSBattleTrainingParam final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleTrainingParam) == 0x000008, "Wrong alignment on FSSBattleTrainingParam");
static_assert(sizeof(FSSBattleTrainingParam) == 0x000018, "Wrong size on FSSBattleTrainingParam");

// ScriptStruct SS.KoratBGMDataAssetRecord
// 0x0080 (0x0080 - 0x0000)
struct FKoratBGMDataAssetRecord final
{
public:
	EKoratUnLockType                              UnLockType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EExhibitionType>                       ValidExhibitions;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0018(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundNameString;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitStopPrevBGM;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayTop;                                        // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotDramaticBattleBGM;                           // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDramaticBattleAvailableBattleBGM;               // 0x0043(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDramaticBattleAvailableTitleBGM;                // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDramaticBattleAvailableEventBGM;                // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBGMOriginType                              UiIconType;                                        // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESSBGMCategoryType>                    CategoryType;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   BgmName;                                           // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          CopyRightsBGM;                                     // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBGMPackageType                             PackageType;                                       // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBGMDataList                      AlternativeBGM;                                    // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBGMDataAssetRecord) == 0x000008, "Wrong alignment on FKoratBGMDataAssetRecord");
static_assert(sizeof(FKoratBGMDataAssetRecord) == 0x000080, "Wrong size on FKoratBGMDataAssetRecord");
static_assert(offsetof(FKoratBGMDataAssetRecord, UnLockType) == 0x000000, "Member 'FKoratBGMDataAssetRecord::UnLockType' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, ValidExhibitions) == 0x000008, "Member 'FKoratBGMDataAssetRecord::ValidExhibitions' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, SoundName) == 0x000018, "Member 'FKoratBGMDataAssetRecord::SoundName' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, SoundNameString) == 0x000020, "Member 'FKoratBGMDataAssetRecord::SoundNameString' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, SortId) == 0x000030, "Member 'FKoratBGMDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, FadeInDuration) == 0x000034, "Member 'FKoratBGMDataAssetRecord::FadeInDuration' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, FadeOutDuration) == 0x000038, "Member 'FKoratBGMDataAssetRecord::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, Volume) == 0x00003C, "Member 'FKoratBGMDataAssetRecord::Volume' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bWaitStopPrevBGM) == 0x000040, "Member 'FKoratBGMDataAssetRecord::bWaitStopPrevBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bIsPlayTop) == 0x000041, "Member 'FKoratBGMDataAssetRecord::bIsPlayTop' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bIsNotDramaticBattleBGM) == 0x000042, "Member 'FKoratBGMDataAssetRecord::bIsNotDramaticBattleBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bIsDramaticBattleAvailableBattleBGM) == 0x000043, "Member 'FKoratBGMDataAssetRecord::bIsDramaticBattleAvailableBattleBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bIsDramaticBattleAvailableTitleBGM) == 0x000044, "Member 'FKoratBGMDataAssetRecord::bIsDramaticBattleAvailableTitleBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, bIsDramaticBattleAvailableEventBGM) == 0x000045, "Member 'FKoratBGMDataAssetRecord::bIsDramaticBattleAvailableEventBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, UiIconType) == 0x000046, "Member 'FKoratBGMDataAssetRecord::UiIconType' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, CategoryType) == 0x000048, "Member 'FKoratBGMDataAssetRecord::CategoryType' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, BgmName) == 0x000058, "Member 'FKoratBGMDataAssetRecord::BgmName' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, CopyRightsBGM) == 0x000070, "Member 'FKoratBGMDataAssetRecord::CopyRightsBGM' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, PackageType) == 0x000071, "Member 'FKoratBGMDataAssetRecord::PackageType' has a wrong offset!");
static_assert(offsetof(FKoratBGMDataAssetRecord, AlternativeBGM) == 0x000074, "Member 'FKoratBGMDataAssetRecord::AlternativeBGM' has a wrong offset!");

// ScriptStruct SS.SSBlastDemoBranchConditionCharacter
// 0x0010 (0x0010 - 0x0000)
struct FSSBlastDemoBranchConditionCharacter final
{
public:
	struct FKoratCharacterDataList                Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastDemoBranchConditionCharacter) == 0x000004, "Wrong alignment on FSSBlastDemoBranchConditionCharacter");
static_assert(sizeof(FSSBlastDemoBranchConditionCharacter) == 0x000010, "Wrong size on FSSBlastDemoBranchConditionCharacter");
static_assert(offsetof(FSSBlastDemoBranchConditionCharacter, Character) == 0x000000, "Member 'FSSBlastDemoBranchConditionCharacter::Character' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchConditionCharacter, Costume) == 0x000008, "Member 'FSSBlastDemoBranchConditionCharacter::Costume' has a wrong offset!");

// ScriptStruct SS.SSBlastDemoBranchCondition
// 0x00C8 (0x00C8 - 0x0000)
struct FSSBlastDemoBranchCondition final
{
public:
	ESSBlastDemoBranchType                        BranchType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrueIfAllApply;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYesNoType                                    Finish;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        TargetCharacters;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EYesNoType                                    TargetGiant;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MyselfRemainingHP;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYesNoType                                    TargetSparkingMode;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYesNoType                                    InWallBranchingArea;                               // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYesNoType                                    FateUb;                                            // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratMapDataList>              Maps;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSBlastDemoBranchConditionCharacter> TeamCharacters;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ExParam;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FKoratBuffFormTypeDataList>       TargetBuffForm;                                    // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EBlastDemoSpDerivationType                    SpDerivationType;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpDerivationCondition;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVictoryAppealWarpType                        VictoryAppealWarpType;                             // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBlastDemoBranchCondition) == 0x000008, "Wrong alignment on FSSBlastDemoBranchCondition");
static_assert(sizeof(FSSBlastDemoBranchCondition) == 0x0000C8, "Wrong size on FSSBlastDemoBranchCondition");
static_assert(offsetof(FSSBlastDemoBranchCondition, BranchType) == 0x000000, "Member 'FSSBlastDemoBranchCondition::BranchType' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, SortId) == 0x000004, "Member 'FSSBlastDemoBranchCondition::SortId' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, bTrueIfAllApply) == 0x000008, "Member 'FSSBlastDemoBranchCondition::bTrueIfAllApply' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, Finish) == 0x000009, "Member 'FSSBlastDemoBranchCondition::Finish' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, TargetCharacters) == 0x000010, "Member 'FSSBlastDemoBranchCondition::TargetCharacters' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, TargetGiant) == 0x000020, "Member 'FSSBlastDemoBranchCondition::TargetGiant' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, MyselfRemainingHP) == 0x000024, "Member 'FSSBlastDemoBranchCondition::MyselfRemainingHP' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, TargetSparkingMode) == 0x000028, "Member 'FSSBlastDemoBranchCondition::TargetSparkingMode' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, InWallBranchingArea) == 0x000029, "Member 'FSSBlastDemoBranchCondition::InWallBranchingArea' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, FateUb) == 0x00002A, "Member 'FSSBlastDemoBranchCondition::FateUb' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, Maps) == 0x000030, "Member 'FSSBlastDemoBranchCondition::Maps' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, TeamCharacters) == 0x000040, "Member 'FSSBlastDemoBranchCondition::TeamCharacters' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, ExParam) == 0x000050, "Member 'FSSBlastDemoBranchCondition::ExParam' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, TargetBuffForm) == 0x000058, "Member 'FSSBlastDemoBranchCondition::TargetBuffForm' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, SpDerivationType) == 0x0000A8, "Member 'FSSBlastDemoBranchCondition::SpDerivationType' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, SpDerivationCondition) == 0x0000B0, "Member 'FSSBlastDemoBranchCondition::SpDerivationCondition' has a wrong offset!");
static_assert(offsetof(FSSBlastDemoBranchCondition, VictoryAppealWarpType) == 0x0000C0, "Member 'FSSBlastDemoBranchCondition::VictoryAppealWarpType' has a wrong offset!");

// ScriptStruct SS.SSBlastForteParamDataAssetRecord
// 0x00A8 (0x00A8 - 0x0000)
struct FSSBlastForteParamDataAssetRecord final
{
public:
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastForteTypeDataList           Type;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastForteName;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsImpossileGuard;                                 // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SureToHitRange;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptibleExplosion;                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptibleBarrier;                             // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x009A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepWhenWithinDistance;                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x00A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBlastForteParamDataAssetRecord) == 0x000008, "Wrong alignment on FSSBlastForteParamDataAssetRecord");
static_assert(sizeof(FSSBlastForteParamDataAssetRecord) == 0x0000A8, "Wrong size on FSSBlastForteParamDataAssetRecord");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, MapHitReaction) == 0x000000, "Member 'FSSBlastForteParamDataAssetRecord::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, CharacterHitReaction) == 0x000008, "Member 'FSSBlastForteParamDataAssetRecord::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, Type) == 0x000010, "Member 'FSSBlastForteParamDataAssetRecord::Type' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bPenetrate) == 0x000018, "Member 'FSSBlastForteParamDataAssetRecord::bPenetrate' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bDontJostle) == 0x000019, "Member 'FSSBlastForteParamDataAssetRecord::bDontJostle' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bKienzan) == 0x00001A, "Member 'FSSBlastForteParamDataAssetRecord::bKienzan' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bMultiStageOff) == 0x00001B, "Member 'FSSBlastForteParamDataAssetRecord::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, BlastForteName) == 0x000020, "Member 'FSSBlastForteParamDataAssetRecord::BlastForteName' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bNonLockUsable) == 0x000038, "Member 'FSSBlastForteParamDataAssetRecord::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, WarpRequestInfoDataAssetSD) == 0x000040, "Member 'FSSBlastForteParamDataAssetRecord::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, WarpRequestInfoDataAssetHD) == 0x000068, "Member 'FSSBlastForteParamDataAssetRecord::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bIsImpossileGuard) == 0x000090, "Member 'FSSBlastForteParamDataAssetRecord::bIsImpossileGuard' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, SureToHitRange) == 0x000094, "Member 'FSSBlastForteParamDataAssetRecord::SureToHitRange' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bInterruptibleExplosion) == 0x000098, "Member 'FSSBlastForteParamDataAssetRecord::bInterruptibleExplosion' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bInterruptibleBarrier) == 0x000099, "Member 'FSSBlastForteParamDataAssetRecord::bInterruptibleBarrier' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bBackstepWhenNearMode) == 0x00009A, "Member 'FSSBlastForteParamDataAssetRecord::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, BackstepWhenWithinDistance) == 0x00009C, "Member 'FSSBlastForteParamDataAssetRecord::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bTurnBeforeTransition) == 0x0000A0, "Member 'FSSBlastForteParamDataAssetRecord::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bTurnCGSection) == 0x0000A1, "Member 'FSSBlastForteParamDataAssetRecord::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FSSBlastForteParamDataAssetRecord, bTurnHTSection) == 0x0000A2, "Member 'FSSBlastForteParamDataAssetRecord::bTurnHTSection' has a wrong offset!");

// ScriptStruct SS.SSBlastImpactGameRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSBlastImpactGameRecord final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Camera;                                            // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastImpactGameRecord) == 0x000008, "Wrong alignment on FSSBlastImpactGameRecord");
static_assert(sizeof(FSSBlastImpactGameRecord) == 0x000030, "Wrong size on FSSBlastImpactGameRecord");
static_assert(offsetof(FSSBlastImpactGameRecord, Camera) == 0x000000, "Member 'FSSBlastImpactGameRecord::Camera' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterStopPreviewEvent
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterStopPreviewEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterStopPreviewEvent) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterStopPreviewEvent");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterStopPreviewEvent) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterStopPreviewEvent");

// ScriptStruct SS.SSBlastImpactActionNameRecord
// 0x0020 (0x0020 - 0x0000)
struct FSSBlastImpactActionNameRecord final
{
public:
	struct FKoratBlastActionCategoryDataList      ActionStart;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastActionCategoryDataList      ActionCollision;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastActionCategoryDataList      ActionWin;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastActionCategoryDataList      ActionLose;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastImpactActionNameRecord) == 0x000004, "Wrong alignment on FSSBlastImpactActionNameRecord");
static_assert(sizeof(FSSBlastImpactActionNameRecord) == 0x000020, "Wrong size on FSSBlastImpactActionNameRecord");
static_assert(offsetof(FSSBlastImpactActionNameRecord, ActionStart) == 0x000000, "Member 'FSSBlastImpactActionNameRecord::ActionStart' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactActionNameRecord, ActionCollision) == 0x000008, "Member 'FSSBlastImpactActionNameRecord::ActionCollision' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactActionNameRecord, ActionWin) == 0x000010, "Member 'FSSBlastImpactActionNameRecord::ActionWin' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactActionNameRecord, ActionLose) == 0x000018, "Member 'FSSBlastImpactActionNameRecord::ActionLose' has a wrong offset!");

// ScriptStruct SS.SSBlastImpactActionRecord
// 0x0044 (0x0044 - 0x0000)
struct FSSBlastImpactActionRecord final
{
public:
	EKoratBlastSlotType                           SlotType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSBlastImpactActionNameRecord         P1;                                                // 0x0004(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSBlastImpactActionNameRecord         P2;                                                // 0x0024(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastImpactActionRecord) == 0x000004, "Wrong alignment on FSSBlastImpactActionRecord");
static_assert(sizeof(FSSBlastImpactActionRecord) == 0x000044, "Wrong size on FSSBlastImpactActionRecord");
static_assert(offsetof(FSSBlastImpactActionRecord, SlotType) == 0x000000, "Member 'FSSBlastImpactActionRecord::SlotType' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactActionRecord, P1) == 0x000004, "Member 'FSSBlastImpactActionRecord::P1' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactActionRecord, P2) == 0x000024, "Member 'FSSBlastImpactActionRecord::P2' has a wrong offset!");

// ScriptStruct SS.SSBlastImpactLocationSet
// 0x0020 (0x0020 - 0x0000)
struct FSSBlastImpactLocationSet final
{
public:
	class FName                                   Aerial;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ground1;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ground2;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Water;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBlastImpactLocationSet) == 0x000004, "Wrong alignment on FSSBlastImpactLocationSet");
static_assert(sizeof(FSSBlastImpactLocationSet) == 0x000020, "Wrong size on FSSBlastImpactLocationSet");
static_assert(offsetof(FSSBlastImpactLocationSet, Aerial) == 0x000000, "Member 'FSSBlastImpactLocationSet::Aerial' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactLocationSet, Ground1) == 0x000008, "Member 'FSSBlastImpactLocationSet::Ground1' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactLocationSet, Ground2) == 0x000010, "Member 'FSSBlastImpactLocationSet::Ground2' has a wrong offset!");
static_assert(offsetof(FSSBlastImpactLocationSet, Water) == 0x000018, "Member 'FSSBlastImpactLocationSet::Water' has a wrong offset!");

// ScriptStruct SS.SSBlastSKillParamDataAssetRecord
// 0x00F8 (0x00F8 - 0x0000)
struct FSSBlastSKillParamDataAssetRecord final
{
public:
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastSkillTypeDataList           Type;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionHitBulletCount;                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionFinishedBulletCount;            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratLungeEndDamageDataList           DamageLungeEnd;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeEscapeEvenet;                            // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestruct;                                // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestructDemoGuard;                       // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuard;                                  // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuardFullCharge;                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSteel;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRecoverSteel;                                   // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKamehameHa;                                       // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfDestruction;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedKaiouken;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSetDirectionDamage;                          // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastSkillName;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USSBlastOperationGuideDataAsset*        BlastOperationData;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSBlastDemoBranchCondition>    BlastDemoBranchConditions;                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratBlastImpactCameraType                   BlastImpactCameraType;                             // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSuperZCounterType                       SuperZCounterType;                                 // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveHitDistance;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLimitTime;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDashMoveType                            MoveType;                                          // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveTypeTargetInputInfluence;                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTypeTargetInputInfluenceAttenuationDistance;   // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTurnSpeed;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveNeutralTurnSpeed;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardCrash;                                       // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SureToHitRange;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepWhenWithinDistance;                        // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x00F2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBlastSKillParamDataAssetRecord) == 0x000008, "Wrong alignment on FSSBlastSKillParamDataAssetRecord");
static_assert(sizeof(FSSBlastSKillParamDataAssetRecord) == 0x0000F8, "Wrong size on FSSBlastSKillParamDataAssetRecord");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MapHitReaction) == 0x000000, "Member 'FSSBlastSKillParamDataAssetRecord::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, CharacterHitReaction) == 0x000008, "Member 'FSSBlastSKillParamDataAssetRecord::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, Type) == 0x000010, "Member 'FSSBlastSKillParamDataAssetRecord::Type' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, TransitionConditionHitBulletCount) == 0x000018, "Member 'FSSBlastSKillParamDataAssetRecord::TransitionConditionHitBulletCount' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, TransitionConditionFinishedBulletCount) == 0x00001C, "Member 'FSSBlastSKillParamDataAssetRecord::TransitionConditionFinishedBulletCount' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, DamageLungeEnd) == 0x000020, "Member 'FSSBlastSKillParamDataAssetRecord::DamageLungeEnd' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bPenetrate) == 0x000028, "Member 'FSSBlastSKillParamDataAssetRecord::bPenetrate' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bDontJostle) == 0x000029, "Member 'FSSBlastSKillParamDataAssetRecord::bDontJostle' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bKienzan) == 0x00002A, "Member 'FSSBlastSKillParamDataAssetRecord::bKienzan' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bMultiStageOff) == 0x00002B, "Member 'FSSBlastSKillParamDataAssetRecord::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bMapChangeEscapeEvenet) == 0x00002C, "Member 'FSSBlastSKillParamDataAssetRecord::bMapChangeEscapeEvenet' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bMapChangeDestruct) == 0x00002D, "Member 'FSSBlastSKillParamDataAssetRecord::bMapChangeDestruct' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bMapChangeDestructDemoGuard) == 0x00002E, "Member 'FSSBlastSKillParamDataAssetRecord::bMapChangeDestructDemoGuard' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bImpossibleGuard) == 0x00002F, "Member 'FSSBlastSKillParamDataAssetRecord::bImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bImpossibleGuardFullCharge) == 0x000030, "Member 'FSSBlastSKillParamDataAssetRecord::bImpossibleGuardFullCharge' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bEnableSteel) == 0x000031, "Member 'FSSBlastSKillParamDataAssetRecord::bEnableSteel' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bNoRecoverSteel) == 0x000032, "Member 'FSSBlastSKillParamDataAssetRecord::bNoRecoverSteel' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bKamehameHa) == 0x000033, "Member 'FSSBlastSKillParamDataAssetRecord::bKamehameHa' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bSelfDestruction) == 0x000034, "Member 'FSSBlastSKillParamDataAssetRecord::bSelfDestruction' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bNeedKaiouken) == 0x000035, "Member 'FSSBlastSKillParamDataAssetRecord::bNeedKaiouken' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bForceSetDirectionDamage) == 0x000036, "Member 'FSSBlastSKillParamDataAssetRecord::bForceSetDirectionDamage' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, BlastSkillName) == 0x000038, "Member 'FSSBlastSKillParamDataAssetRecord::BlastSkillName' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, BlastOperationData) == 0x000050, "Member 'FSSBlastSKillParamDataAssetRecord::BlastOperationData' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bNonLockUsable) == 0x000058, "Member 'FSSBlastSKillParamDataAssetRecord::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, BlastDemoBranchConditions) == 0x000060, "Member 'FSSBlastSKillParamDataAssetRecord::BlastDemoBranchConditions' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, WarpRequestInfoDataAssetSD) == 0x000070, "Member 'FSSBlastSKillParamDataAssetRecord::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, WarpRequestInfoDataAssetHD) == 0x000098, "Member 'FSSBlastSKillParamDataAssetRecord::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, BlastImpactCameraType) == 0x0000C0, "Member 'FSSBlastSKillParamDataAssetRecord::BlastImpactCameraType' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, SuperZCounterType) == 0x0000C1, "Member 'FSSBlastSKillParamDataAssetRecord::SuperZCounterType' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveHitDistance) == 0x0000C4, "Member 'FSSBlastSKillParamDataAssetRecord::MoveHitDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveLimitTime) == 0x0000C8, "Member 'FSSBlastSKillParamDataAssetRecord::MoveLimitTime' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveType) == 0x0000CC, "Member 'FSSBlastSKillParamDataAssetRecord::MoveType' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveTypeTargetInputInfluence) == 0x0000D0, "Member 'FSSBlastSKillParamDataAssetRecord::MoveTypeTargetInputInfluence' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveTypeTargetInputInfluenceAttenuationDistance) == 0x0000D4, "Member 'FSSBlastSKillParamDataAssetRecord::MoveTypeTargetInputInfluenceAttenuationDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveTurnSpeed) == 0x0000D8, "Member 'FSSBlastSKillParamDataAssetRecord::MoveTurnSpeed' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, MoveNeutralTurnSpeed) == 0x0000DC, "Member 'FSSBlastSKillParamDataAssetRecord::MoveNeutralTurnSpeed' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bGuardCrash) == 0x0000E0, "Member 'FSSBlastSKillParamDataAssetRecord::bGuardCrash' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, SureToHitRange) == 0x0000E4, "Member 'FSSBlastSKillParamDataAssetRecord::SureToHitRange' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bBackstepWhenNearMode) == 0x0000E8, "Member 'FSSBlastSKillParamDataAssetRecord::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, BackstepWhenWithinDistance) == 0x0000EC, "Member 'FSSBlastSKillParamDataAssetRecord::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bTurnBeforeTransition) == 0x0000F0, "Member 'FSSBlastSKillParamDataAssetRecord::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bTurnCGSection) == 0x0000F1, "Member 'FSSBlastSKillParamDataAssetRecord::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FSSBlastSKillParamDataAssetRecord, bTurnHTSection) == 0x0000F2, "Member 'FSSBlastSKillParamDataAssetRecord::bTurnHTSection' has a wrong offset!");

// ScriptStruct SS.SSBlastUltimateParamDataAssetRecord
// 0x0100 (0x0100 - 0x0000)
struct FSSBlastUltimateParamDataAssetRecord final
{
public:
	struct FKoratBlastReactionDataList            MapHitReaction;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastReactionDataList            CharacterHitReaction;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBlastSkillTypeDataList           Type;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionHitBulletCount;                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionConditionFinishedBulletCount;            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratLungeEndDamageDataList           DamageLungeEnd;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPenetrate;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontJostle;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKienzan;                                          // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiStageOff;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeEscapeEvenet;                            // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestruct;                                // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapChangeDestructDemoGuard;                       // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuard;                                  // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpossibleGuardFullCharge;                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSteel;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRecoverSteel;                                   // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKamehameHa;                                       // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfDestruction;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedKaiouken;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExScale;                                          // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSetDirectionDamage;                          // 0x0037(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBodyChange;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BlastUltimateName;                                 // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USSBlastOperationGuideDataAsset*        BlastOperationData;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonLockUsable;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSBlastDemoBranchCondition>    BlastDemoBranchConditions;                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetSD;                        // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSWarpRequestInfoDataAsset            WarpRequestInfoDataAssetHD;                        // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratBlastImpactCameraType                   BlastImpactCameraType;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratSuperZCounterType                       SuperZCounterType;                                 // 0x00C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveHitDistance;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLimitTime;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlastDashMoveType                            MoveType;                                          // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveTypeTargetInputInfluence;                      // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTypeTargetInputInfluenceAttenuationDistance;   // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTurnSpeed;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveNeutralTurnSpeed;                              // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardCrash;                                       // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SureToHitRange;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackstepWhenNearMode;                             // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackstepWhenWithinDistance;                        // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBeforeTransition;                             // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnCGSection;                                    // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnHTSection;                                    // 0x00FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBlastUltimateParamDataAssetRecord) == 0x000008, "Wrong alignment on FSSBlastUltimateParamDataAssetRecord");
static_assert(sizeof(FSSBlastUltimateParamDataAssetRecord) == 0x000100, "Wrong size on FSSBlastUltimateParamDataAssetRecord");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MapHitReaction) == 0x000000, "Member 'FSSBlastUltimateParamDataAssetRecord::MapHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, CharacterHitReaction) == 0x000008, "Member 'FSSBlastUltimateParamDataAssetRecord::CharacterHitReaction' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, Type) == 0x000010, "Member 'FSSBlastUltimateParamDataAssetRecord::Type' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, TransitionConditionHitBulletCount) == 0x000018, "Member 'FSSBlastUltimateParamDataAssetRecord::TransitionConditionHitBulletCount' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, TransitionConditionFinishedBulletCount) == 0x00001C, "Member 'FSSBlastUltimateParamDataAssetRecord::TransitionConditionFinishedBulletCount' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, DamageLungeEnd) == 0x000020, "Member 'FSSBlastUltimateParamDataAssetRecord::DamageLungeEnd' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bPenetrate) == 0x000028, "Member 'FSSBlastUltimateParamDataAssetRecord::bPenetrate' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bDontJostle) == 0x000029, "Member 'FSSBlastUltimateParamDataAssetRecord::bDontJostle' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bKienzan) == 0x00002A, "Member 'FSSBlastUltimateParamDataAssetRecord::bKienzan' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bMultiStageOff) == 0x00002B, "Member 'FSSBlastUltimateParamDataAssetRecord::bMultiStageOff' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bMapChangeEscapeEvenet) == 0x00002C, "Member 'FSSBlastUltimateParamDataAssetRecord::bMapChangeEscapeEvenet' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bMapChangeDestruct) == 0x00002D, "Member 'FSSBlastUltimateParamDataAssetRecord::bMapChangeDestruct' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bMapChangeDestructDemoGuard) == 0x00002E, "Member 'FSSBlastUltimateParamDataAssetRecord::bMapChangeDestructDemoGuard' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bImpossibleGuard) == 0x00002F, "Member 'FSSBlastUltimateParamDataAssetRecord::bImpossibleGuard' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bImpossibleGuardFullCharge) == 0x000030, "Member 'FSSBlastUltimateParamDataAssetRecord::bImpossibleGuardFullCharge' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bEnableSteel) == 0x000031, "Member 'FSSBlastUltimateParamDataAssetRecord::bEnableSteel' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bNoRecoverSteel) == 0x000032, "Member 'FSSBlastUltimateParamDataAssetRecord::bNoRecoverSteel' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bKamehameHa) == 0x000033, "Member 'FSSBlastUltimateParamDataAssetRecord::bKamehameHa' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bSelfDestruction) == 0x000034, "Member 'FSSBlastUltimateParamDataAssetRecord::bSelfDestruction' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bNeedKaiouken) == 0x000035, "Member 'FSSBlastUltimateParamDataAssetRecord::bNeedKaiouken' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bExScale) == 0x000036, "Member 'FSSBlastUltimateParamDataAssetRecord::bExScale' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bForceSetDirectionDamage) == 0x000037, "Member 'FSSBlastUltimateParamDataAssetRecord::bForceSetDirectionDamage' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bBodyChange) == 0x000038, "Member 'FSSBlastUltimateParamDataAssetRecord::bBodyChange' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, BlastUltimateName) == 0x000040, "Member 'FSSBlastUltimateParamDataAssetRecord::BlastUltimateName' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, BlastOperationData) == 0x000058, "Member 'FSSBlastUltimateParamDataAssetRecord::BlastOperationData' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bNonLockUsable) == 0x000060, "Member 'FSSBlastUltimateParamDataAssetRecord::bNonLockUsable' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, BlastDemoBranchConditions) == 0x000068, "Member 'FSSBlastUltimateParamDataAssetRecord::BlastDemoBranchConditions' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, WarpRequestInfoDataAssetSD) == 0x000078, "Member 'FSSBlastUltimateParamDataAssetRecord::WarpRequestInfoDataAssetSD' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, WarpRequestInfoDataAssetHD) == 0x0000A0, "Member 'FSSBlastUltimateParamDataAssetRecord::WarpRequestInfoDataAssetHD' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, BlastImpactCameraType) == 0x0000C8, "Member 'FSSBlastUltimateParamDataAssetRecord::BlastImpactCameraType' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, SuperZCounterType) == 0x0000C9, "Member 'FSSBlastUltimateParamDataAssetRecord::SuperZCounterType' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveHitDistance) == 0x0000CC, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveHitDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveLimitTime) == 0x0000D0, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveLimitTime' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveType) == 0x0000D4, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveType' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveTypeTargetInputInfluence) == 0x0000D8, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveTypeTargetInputInfluence' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveTypeTargetInputInfluenceAttenuationDistance) == 0x0000DC, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveTypeTargetInputInfluenceAttenuationDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveTurnSpeed) == 0x0000E0, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveTurnSpeed' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, MoveNeutralTurnSpeed) == 0x0000E4, "Member 'FSSBlastUltimateParamDataAssetRecord::MoveNeutralTurnSpeed' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bGuardCrash) == 0x0000E8, "Member 'FSSBlastUltimateParamDataAssetRecord::bGuardCrash' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, SureToHitRange) == 0x0000EC, "Member 'FSSBlastUltimateParamDataAssetRecord::SureToHitRange' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bBackstepWhenNearMode) == 0x0000F0, "Member 'FSSBlastUltimateParamDataAssetRecord::bBackstepWhenNearMode' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, BackstepWhenWithinDistance) == 0x0000F4, "Member 'FSSBlastUltimateParamDataAssetRecord::BackstepWhenWithinDistance' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bTurnBeforeTransition) == 0x0000F8, "Member 'FSSBlastUltimateParamDataAssetRecord::bTurnBeforeTransition' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bTurnCGSection) == 0x0000F9, "Member 'FSSBlastUltimateParamDataAssetRecord::bTurnCGSection' has a wrong offset!");
static_assert(offsetof(FSSBlastUltimateParamDataAssetRecord, bTurnHTSection) == 0x0000FA, "Member 'FSSBlastUltimateParamDataAssetRecord::bTurnHTSection' has a wrong offset!");

// ScriptStruct SS.SSLine
// 0x0030 (0x0030 - 0x0000)
struct FSSLine final
{
public:
	struct FVector                                Point1;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point2;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSLine) == 0x000008, "Wrong alignment on FSSLine");
static_assert(sizeof(FSSLine) == 0x000030, "Wrong size on FSSLine");
static_assert(offsetof(FSSLine, Point1) == 0x000000, "Member 'FSSLine::Point1' has a wrong offset!");
static_assert(offsetof(FSSLine, Point2) == 0x000018, "Member 'FSSLine::Point2' has a wrong offset!");

// ScriptStruct SS.SSBulletCharacterCollisionInfo
// 0x0050 (0x0050 - 0x0000)
struct FSSBulletCharacterCollisionInfo final
{
public:
	struct FSSLine                                CollisionSweep;                                    // 0x0000(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CharacterLocation;                                 // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBulletCharacterCollisionInfo) == 0x000008, "Wrong alignment on FSSBulletCharacterCollisionInfo");
static_assert(sizeof(FSSBulletCharacterCollisionInfo) == 0x000050, "Wrong size on FSSBulletCharacterCollisionInfo");
static_assert(offsetof(FSSBulletCharacterCollisionInfo, CollisionSweep) == 0x000000, "Member 'FSSBulletCharacterCollisionInfo::CollisionSweep' has a wrong offset!");
static_assert(offsetof(FSSBulletCharacterCollisionInfo, CharacterLocation) == 0x000030, "Member 'FSSBulletCharacterCollisionInfo::CharacterLocation' has a wrong offset!");
static_assert(offsetof(FSSBulletCharacterCollisionInfo, HitCount) == 0x000048, "Member 'FSSBulletCharacterCollisionInfo::HitCount' has a wrong offset!");

// ScriptStruct SS.BulletControllerManagerMessage
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FBulletControllerManagerMessage final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBulletControllerManagerMessage) == 0x000004, "Wrong alignment on FBulletControllerManagerMessage");
static_assert(sizeof(FBulletControllerManagerMessage) == 0x000014, "Wrong size on FBulletControllerManagerMessage");

// ScriptStruct SS.SSCharacterWarpCommandInfo
// 0x0004 (0x0004 - 0x0000)
struct FSSCharacterWarpCommandInfo final
{
public:
	ECharacterWarpLinkType                        LinkType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterWarpAfterDirectionType              AfterDirectionType;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterWarpResultAttachTimingType          AttachTiming;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterWarpIndependRequestType             IndependRequest;                                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterWarpCommandInfo) == 0x000001, "Wrong alignment on FSSCharacterWarpCommandInfo");
static_assert(sizeof(FSSCharacterWarpCommandInfo) == 0x000004, "Wrong size on FSSCharacterWarpCommandInfo");
static_assert(offsetof(FSSCharacterWarpCommandInfo, LinkType) == 0x000000, "Member 'FSSCharacterWarpCommandInfo::LinkType' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCommandInfo, AfterDirectionType) == 0x000001, "Member 'FSSCharacterWarpCommandInfo::AfterDirectionType' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCommandInfo, AttachTiming) == 0x000002, "Member 'FSSCharacterWarpCommandInfo::AttachTiming' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCommandInfo, IndependRequest) == 0x000003, "Member 'FSSCharacterWarpCommandInfo::IndependRequest' has a wrong offset!");

// ScriptStruct SS.SBulletControllerCommand
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSBulletControllerCommand final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSBulletControllerCommand) == 0x000004, "Wrong alignment on FSBulletControllerCommand");
static_assert(sizeof(FSBulletControllerCommand) == 0x000010, "Wrong size on FSBulletControllerCommand");

// ScriptStruct SS.SSBulletControllerCommand
// 0x0058 (0x0058 - 0x0000)
struct FSSBulletControllerCommand final
{
public:
	EBulletControlCommand                         CommandName;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASSCharacter>            Character;                                         // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   Action;                                            // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBulletKeyDataList                BulletKey;                                         // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupporterIndex;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FireSocketName;                                    // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKoratEffectMultipleColorComponent> EffectMultipleColorComponent;                      // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControllerLocation;                                // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSBulletController>     BulletController;                                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletControllerCommand) == 0x000008, "Wrong alignment on FSSBulletControllerCommand");
static_assert(sizeof(FSSBulletControllerCommand) == 0x000058, "Wrong size on FSSBulletControllerCommand");
static_assert(offsetof(FSSBulletControllerCommand, CommandName) == 0x000000, "Member 'FSSBulletControllerCommand::CommandName' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, Character) == 0x000004, "Member 'FSSBulletControllerCommand::Character' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, Action) == 0x00000C, "Member 'FSSBulletControllerCommand::Action' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, BulletKey) == 0x000014, "Member 'FSSBulletControllerCommand::BulletKey' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, SupporterIndex) == 0x00001C, "Member 'FSSBulletControllerCommand::SupporterIndex' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, FireSocketName) == 0x000020, "Member 'FSSBulletControllerCommand::FireSocketName' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, EffectMultipleColorComponent) == 0x000030, "Member 'FSSBulletControllerCommand::EffectMultipleColorComponent' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, ControllerLocation) == 0x000038, "Member 'FSSBulletControllerCommand::ControllerLocation' has a wrong offset!");
static_assert(offsetof(FSSBulletControllerCommand, BulletController) == 0x000050, "Member 'FSSBulletControllerCommand::BulletController' has a wrong offset!");

// ScriptStruct SS.SSBulletParamPerChargeLv
// 0x004C (0x004C - 0x0000)
struct FSSBulletParamPerChargeLv final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireNum;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand2;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement2;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDamageReactionDataList           DamageStand2_ForGiant;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementDataList          DamageMovement2_ForGiant;                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorBreakLevelDataList          ArmorBreakLevel;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyBullectCollisionPriority;                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingScale;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreActionTarget;                               // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReduceZSearchAfterHit;                            // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceZSearchEffectTime;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBuff;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffIndex;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletParamPerChargeLv) == 0x000004, "Wrong alignment on FSSBulletParamPerChargeLv");
static_assert(sizeof(FSSBulletParamPerChargeLv) == 0x00004C, "Wrong size on FSSBulletParamPerChargeLv");
static_assert(offsetof(FSSBulletParamPerChargeLv, DamageRate) == 0x000000, "Member 'FSSBulletParamPerChargeLv::DamageRate' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, FireNum) == 0x000004, "Member 'FSSBulletParamPerChargeLv::FireNum' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, DamageStand2) == 0x000008, "Member 'FSSBulletParamPerChargeLv::DamageStand2' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, DamageMovement2) == 0x000010, "Member 'FSSBulletParamPerChargeLv::DamageMovement2' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, DamageStand2_ForGiant) == 0x000018, "Member 'FSSBulletParamPerChargeLv::DamageStand2_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, DamageMovement2_ForGiant) == 0x000020, "Member 'FSSBulletParamPerChargeLv::DamageMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, ArmorBreakLevel) == 0x000028, "Member 'FSSBulletParamPerChargeLv::ArmorBreakLevel' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, EnergyBullectCollisionPriority) == 0x000030, "Member 'FSSBulletParamPerChargeLv::EnergyBullectCollisionPriority' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, SpeedScale) == 0x000034, "Member 'FSSBulletParamPerChargeLv::SpeedScale' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, HomingScale) == 0x000038, "Member 'FSSBulletParamPerChargeLv::HomingScale' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, bIgnoreActionTarget) == 0x00003C, "Member 'FSSBulletParamPerChargeLv::bIgnoreActionTarget' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, bReduceZSearchAfterHit) == 0x00003D, "Member 'FSSBulletParamPerChargeLv::bReduceZSearchAfterHit' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, ReduceZSearchEffectTime) == 0x000040, "Member 'FSSBulletParamPerChargeLv::ReduceZSearchEffectTime' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, bEnableBuff) == 0x000044, "Member 'FSSBulletParamPerChargeLv::bEnableBuff' has a wrong offset!");
static_assert(offsetof(FSSBulletParamPerChargeLv, BuffIndex) == 0x000048, "Member 'FSSBulletParamPerChargeLv::BuffIndex' has a wrong offset!");

// ScriptStruct SS.SSDebugBulletRatSpawnInfo
// 0x0001 (0x0001 - 0x0000)
struct FSSDebugBulletRatSpawnInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDebugBulletRatSpawnInfo) == 0x000001, "Wrong alignment on FSSDebugBulletRatSpawnInfo");
static_assert(sizeof(FSSDebugBulletRatSpawnInfo) == 0x000001, "Wrong size on FSSDebugBulletRatSpawnInfo");

// ScriptStruct SS.GalleryMyDataMenuStruct
// 0x0020 (0x0020 - 0x0000)
struct FGalleryMyDataMenuStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SSMenu;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryMyDataMenuManager*            Menu;                                              // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryMyDataListMenuManager*        ListMenu;                                          // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryMyDataMenuStruct) == 0x000008, "Wrong alignment on FGalleryMyDataMenuStruct");
static_assert(sizeof(FGalleryMyDataMenuStruct) == 0x000020, "Wrong size on FGalleryMyDataMenuStruct");
static_assert(offsetof(FGalleryMyDataMenuStruct, SSMenu) == 0x000008, "Member 'FGalleryMyDataMenuStruct::SSMenu' has a wrong offset!");
static_assert(offsetof(FGalleryMyDataMenuStruct, Menu) == 0x000010, "Member 'FGalleryMyDataMenuStruct::Menu' has a wrong offset!");
static_assert(offsetof(FGalleryMyDataMenuStruct, ListMenu) == 0x000018, "Member 'FGalleryMyDataMenuStruct::ListMenu' has a wrong offset!");

// ScriptStruct SS.SSBulletDataAssetRecordParamAdditional
// 0x0040 (0x0040 - 0x0000)
struct FSSBulletDataAssetRecordParamAdditional final
{
public:
	struct FKoratBulletEffectDataList             Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletParamDataAsset*                Parameter;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BulletActorBP;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletDataAssetRecordParamAdditional) == 0x000008, "Wrong alignment on FSSBulletDataAssetRecordParamAdditional");
static_assert(sizeof(FSSBulletDataAssetRecordParamAdditional) == 0x000040, "Wrong size on FSSBulletDataAssetRecordParamAdditional");
static_assert(offsetof(FSSBulletDataAssetRecordParamAdditional, Effect) == 0x000000, "Member 'FSSBulletDataAssetRecordParamAdditional::Effect' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordParamAdditional, Parameter) == 0x000008, "Member 'FSSBulletDataAssetRecordParamAdditional::Parameter' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordParamAdditional, BulletActorBP) == 0x000010, "Member 'FSSBulletDataAssetRecordParamAdditional::BulletActorBP' has a wrong offset!");

// ScriptStruct SS.SSBulletDataAssetRecordParam
// 0x0090 (0x0090 - 0x0000)
struct FSSBulletDataAssetRecordParam final
{
public:
	struct FKoratBulletEffectDataList             Effect;                                            // 0x0000(0x0008)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletParamDataAsset*                Parameter;                                         // 0x0008(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BulletActorBP;                                     // 0x0010(0x0030)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratBulletKeyDataList, struct FSSBulletDataAssetRecordParamAdditional> AdditionalBullets;                                 // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBulletDataAssetRecordParam) == 0x000008, "Wrong alignment on FSSBulletDataAssetRecordParam");
static_assert(sizeof(FSSBulletDataAssetRecordParam) == 0x000090, "Wrong size on FSSBulletDataAssetRecordParam");
static_assert(offsetof(FSSBulletDataAssetRecordParam, Effect) == 0x000000, "Member 'FSSBulletDataAssetRecordParam::Effect' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordParam, Parameter) == 0x000008, "Member 'FSSBulletDataAssetRecordParam::Parameter' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordParam, BulletActorBP) == 0x000010, "Member 'FSSBulletDataAssetRecordParam::BulletActorBP' has a wrong offset!");
static_assert(offsetof(FSSBulletDataAssetRecordParam, AdditionalBullets) == 0x000040, "Member 'FSSBulletDataAssetRecordParam::AdditionalBullets' has a wrong offset!");

// ScriptStruct SS.SSCameraCompositeInfo
// 0x0028 (0x0028 - 0x0000)
struct FSSCameraCompositeInfo final
{
public:
	int32                                         CutCameraNum;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookAtTargetNum;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusTargetNum;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BindingOriginNum;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraManagerNum;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CutCameraSlots;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCameraCompositeInfo) == 0x000008, "Wrong alignment on FSSCameraCompositeInfo");
static_assert(sizeof(FSSCameraCompositeInfo) == 0x000028, "Wrong size on FSSCameraCompositeInfo");
static_assert(offsetof(FSSCameraCompositeInfo, CutCameraNum) == 0x000000, "Member 'FSSCameraCompositeInfo::CutCameraNum' has a wrong offset!");
static_assert(offsetof(FSSCameraCompositeInfo, LookAtTargetNum) == 0x000004, "Member 'FSSCameraCompositeInfo::LookAtTargetNum' has a wrong offset!");
static_assert(offsetof(FSSCameraCompositeInfo, FocusTargetNum) == 0x000008, "Member 'FSSCameraCompositeInfo::FocusTargetNum' has a wrong offset!");
static_assert(offsetof(FSSCameraCompositeInfo, BindingOriginNum) == 0x00000C, "Member 'FSSCameraCompositeInfo::BindingOriginNum' has a wrong offset!");
static_assert(offsetof(FSSCameraCompositeInfo, CameraManagerNum) == 0x000010, "Member 'FSSCameraCompositeInfo::CameraManagerNum' has a wrong offset!");
static_assert(offsetof(FSSCameraCompositeInfo, CutCameraSlots) == 0x000018, "Member 'FSSCameraCompositeInfo::CutCameraSlots' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterSetActiveUIType
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType final
{
public:
	ESSDramaticBattleCutEditorUIType              UIType;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType");
static_assert(offsetof(FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType, UIType) == 0x000000, "Member 'FSSDramaticBattleCutEditorExecuteParameterSetActiveUIType::UIType' has a wrong offset!");

// ScriptStruct SS.GalleryTheaterMenuStruct
// 0x0020 (0x0020 - 0x0000)
struct FGalleryTheaterMenuStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SSMenu;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryTheaterMenuManager*           Menu;                                              // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryTheaterListMenuManager*       ListMenu;                                          // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryTheaterMenuStruct) == 0x000008, "Wrong alignment on FGalleryTheaterMenuStruct");
static_assert(sizeof(FGalleryTheaterMenuStruct) == 0x000020, "Wrong size on FGalleryTheaterMenuStruct");
static_assert(offsetof(FGalleryTheaterMenuStruct, SSMenu) == 0x000008, "Member 'FGalleryTheaterMenuStruct::SSMenu' has a wrong offset!");
static_assert(offsetof(FGalleryTheaterMenuStruct, Menu) == 0x000010, "Member 'FGalleryTheaterMenuStruct::Menu' has a wrong offset!");
static_assert(offsetof(FGalleryTheaterMenuStruct, ListMenu) == 0x000018, "Member 'FGalleryTheaterMenuStruct::ListMenu' has a wrong offset!");

// ScriptStruct SS.SSShakeForceLastParameter
// 0x0050 (0x0050 - 0x0000)
struct FSSShakeForceLastParameter final
{
public:
	bool                                          Baked;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShakeTargetType                              ShakeTargetType;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShakeForceType                               ShakeForceType;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachParentActor;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSShakeForceLastParameter) == 0x000010, "Wrong alignment on FSSShakeForceLastParameter");
static_assert(sizeof(FSSShakeForceLastParameter) == 0x000050, "Wrong size on FSSShakeForceLastParameter");
static_assert(offsetof(FSSShakeForceLastParameter, Baked) == 0x000000, "Member 'FSSShakeForceLastParameter::Baked' has a wrong offset!");
static_assert(offsetof(FSSShakeForceLastParameter, ShakeTargetType) == 0x000001, "Member 'FSSShakeForceLastParameter::ShakeTargetType' has a wrong offset!");
static_assert(offsetof(FSSShakeForceLastParameter, ShakeForceType) == 0x000002, "Member 'FSSShakeForceLastParameter::ShakeForceType' has a wrong offset!");
static_assert(offsetof(FSSShakeForceLastParameter, Position) == 0x000008, "Member 'FSSShakeForceLastParameter::Position' has a wrong offset!");
static_assert(offsetof(FSSShakeForceLastParameter, Rotation) == 0x000020, "Member 'FSSShakeForceLastParameter::Rotation' has a wrong offset!");
static_assert(offsetof(FSSShakeForceLastParameter, AttachParentActor) == 0x000040, "Member 'FSSShakeForceLastParameter::AttachParentActor' has a wrong offset!");

// ScriptStruct SS.SSChameleonVector2DN
// 0x0010 (0x0010 - 0x0000)
struct FSSChameleonVector2DN final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Y;                                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSChameleonVector2DN) == 0x000008, "Wrong alignment on FSSChameleonVector2DN");
static_assert(sizeof(FSSChameleonVector2DN) == 0x000010, "Wrong size on FSSChameleonVector2DN");
static_assert(offsetof(FSSChameleonVector2DN, X) == 0x000000, "Member 'FSSChameleonVector2DN::X' has a wrong offset!");
static_assert(offsetof(FSSChameleonVector2DN, Y) == 0x000008, "Member 'FSSChameleonVector2DN::Y' has a wrong offset!");

// ScriptStruct SS.SSChameleonLOOKCGStruct
// 0x0008 (0x0008 - 0x0000)
struct FSSChameleonLOOKCGStruct final
{
public:
	class UTexture*                               File;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSChameleonLOOKCGStruct) == 0x000008, "Wrong alignment on FSSChameleonLOOKCGStruct");
static_assert(sizeof(FSSChameleonLOOKCGStruct) == 0x000008, "Wrong size on FSSChameleonLOOKCGStruct");
static_assert(offsetof(FSSChameleonLOOKCGStruct, File) == 0x000000, "Member 'FSSChameleonLOOKCGStruct::File' has a wrong offset!");

// ScriptStruct SS.SSChameleonAdvancedEffectFeatures
// 0x0050 (0x0050 - 0x0000)
struct FSSChameleonAdvancedEffectFeatures final
{
public:
	ESSChameleonBlendModes                        BlendMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BlendMask;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSChameleonVector2DN                  BlendMaskScale;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	double                                        BlendDistance;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BlendDistanceSharpness;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlendDistanceInvert;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendingOpacity;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectPriority;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomDepth;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StencilBuffer;                                     // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StencilMask;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSChameleonAdvancedEffectFeatures) == 0x000008, "Wrong alignment on FSSChameleonAdvancedEffectFeatures");
static_assert(sizeof(FSSChameleonAdvancedEffectFeatures) == 0x000050, "Wrong size on FSSChameleonAdvancedEffectFeatures");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendMode) == 0x000000, "Member 'FSSChameleonAdvancedEffectFeatures::BlendMode' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendMask) == 0x000008, "Member 'FSSChameleonAdvancedEffectFeatures::BlendMask' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendMaskScale) == 0x000010, "Member 'FSSChameleonAdvancedEffectFeatures::BlendMaskScale' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendDistance) == 0x000020, "Member 'FSSChameleonAdvancedEffectFeatures::BlendDistance' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendDistanceSharpness) == 0x000028, "Member 'FSSChameleonAdvancedEffectFeatures::BlendDistanceSharpness' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendDistanceInvert) == 0x000030, "Member 'FSSChameleonAdvancedEffectFeatures::BlendDistanceInvert' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, BlendingOpacity) == 0x000038, "Member 'FSSChameleonAdvancedEffectFeatures::BlendingOpacity' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, EffectPriority) == 0x000040, "Member 'FSSChameleonAdvancedEffectFeatures::EffectPriority' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, CustomDepth) == 0x000044, "Member 'FSSChameleonAdvancedEffectFeatures::CustomDepth' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, StencilBuffer) == 0x000045, "Member 'FSSChameleonAdvancedEffectFeatures::StencilBuffer' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeatures, StencilMask) == 0x000048, "Member 'FSSChameleonAdvancedEffectFeatures::StencilMask' has a wrong offset!");

// ScriptStruct SS.SSChameleonAdvancedEffectFeaturesNoCustomDepth
// 0x0048 (0x0048 - 0x0000)
struct FSSChameleonAdvancedEffectFeaturesNoCustomDepth final
{
public:
	ESSChameleonBlendModes                        BlendMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BlendMask;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSChameleonVector2DN                  BlendMaskScale;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	double                                        BlendDistance;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BlendDistanceSharpness;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlendDistanceInvert;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendingOpacity;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectPriority;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth) == 0x000008, "Wrong alignment on FSSChameleonAdvancedEffectFeaturesNoCustomDepth");
static_assert(sizeof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth) == 0x000048, "Wrong size on FSSChameleonAdvancedEffectFeaturesNoCustomDepth");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendMode) == 0x000000, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendMode' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendMask) == 0x000008, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendMask' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendMaskScale) == 0x000010, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendMaskScale' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendDistance) == 0x000020, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendDistance' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendDistanceSharpness) == 0x000028, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendDistanceSharpness' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendDistanceInvert) == 0x000030, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendDistanceInvert' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, BlendingOpacity) == 0x000038, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::BlendingOpacity' has a wrong offset!");
static_assert(offsetof(FSSChameleonAdvancedEffectFeaturesNoCustomDepth, EffectPriority) == 0x000040, "Member 'FSSChameleonAdvancedEffectFeaturesNoCustomDepth::EffectPriority' has a wrong offset!");

// ScriptStruct SS.SSTournamentCharacterRestrictionRule
// 0x0050 (0x0050 - 0x0000)
struct FSSTournamentCharacterRestrictionRule final
{
public:
	TArray<struct FKoratSeriesTitleDataList>      AllowedSeriesTitle;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratSpeciesDataList>          AllowedSpecies;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterAttributeTagDataList> AllowedAttributes;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EKoratCharacterGenderType>             AllowedGender;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterGroupDataList>   AllowedGroup;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentCharacterRestrictionRule) == 0x000008, "Wrong alignment on FSSTournamentCharacterRestrictionRule");
static_assert(sizeof(FSSTournamentCharacterRestrictionRule) == 0x000050, "Wrong size on FSSTournamentCharacterRestrictionRule");
static_assert(offsetof(FSSTournamentCharacterRestrictionRule, AllowedSeriesTitle) == 0x000000, "Member 'FSSTournamentCharacterRestrictionRule::AllowedSeriesTitle' has a wrong offset!");
static_assert(offsetof(FSSTournamentCharacterRestrictionRule, AllowedSpecies) == 0x000010, "Member 'FSSTournamentCharacterRestrictionRule::AllowedSpecies' has a wrong offset!");
static_assert(offsetof(FSSTournamentCharacterRestrictionRule, AllowedAttributes) == 0x000020, "Member 'FSSTournamentCharacterRestrictionRule::AllowedAttributes' has a wrong offset!");
static_assert(offsetof(FSSTournamentCharacterRestrictionRule, AllowedGender) == 0x000030, "Member 'FSSTournamentCharacterRestrictionRule::AllowedGender' has a wrong offset!");
static_assert(offsetof(FSSTournamentCharacterRestrictionRule, AllowedGroup) == 0x000040, "Member 'FSSTournamentCharacterRestrictionRule::AllowedGroup' has a wrong offset!");

// ScriptStruct SS.SSChangeCharacterActionDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FSSChangeCharacterActionDataAssetRecord final
{
public:
	struct FKoratActionDataList                   ActionData;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSChangeCharacterActionDataAssetRecord) == 0x000004, "Wrong alignment on FSSChangeCharacterActionDataAssetRecord");
static_assert(sizeof(FSSChangeCharacterActionDataAssetRecord) == 0x000008, "Wrong size on FSSChangeCharacterActionDataAssetRecord");
static_assert(offsetof(FSSChangeCharacterActionDataAssetRecord, ActionData) == 0x000000, "Member 'FSSChangeCharacterActionDataAssetRecord::ActionData' has a wrong offset!");

// ScriptStruct SS.MaterialInstanceSetData
// 0x0008 (0x0008 - 0x0000)
struct FMaterialInstanceSetData final
{
public:
	class UMaterialInstanceDynamic*               MaterialInstanceDynamics;                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialInstanceSetData) == 0x000008, "Wrong alignment on FMaterialInstanceSetData");
static_assert(sizeof(FMaterialInstanceSetData) == 0x000008, "Wrong size on FMaterialInstanceSetData");
static_assert(offsetof(FMaterialInstanceSetData, MaterialInstanceDynamics) == 0x000000, "Member 'FMaterialInstanceSetData::MaterialInstanceDynamics' has a wrong offset!");

// ScriptStruct SS.SSCharacterSmashLevelGauge
// 0x0008 (0x0008 - 0x0000)
struct FSSCharacterSmashLevelGauge final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecrementElapsedTime;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSmashLevelGauge) == 0x000004, "Wrong alignment on FSSCharacterSmashLevelGauge");
static_assert(sizeof(FSSCharacterSmashLevelGauge) == 0x000008, "Wrong size on FSSCharacterSmashLevelGauge");
static_assert(offsetof(FSSCharacterSmashLevelGauge, Value) == 0x000000, "Member 'FSSCharacterSmashLevelGauge::Value' has a wrong offset!");
static_assert(offsetof(FSSCharacterSmashLevelGauge, DecrementElapsedTime) == 0x000004, "Member 'FSSCharacterSmashLevelGauge::DecrementElapsedTime' has a wrong offset!");

// ScriptStruct SS.BulletDirectionIndexData
// 0x0010 (0x0010 - 0x0000)
struct FBulletDirectionIndexData final
{
public:
	TArray<int32>                                 DirectionIndexArray;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletDirectionIndexData) == 0x000008, "Wrong alignment on FBulletDirectionIndexData");
static_assert(sizeof(FBulletDirectionIndexData) == 0x000010, "Wrong size on FBulletDirectionIndexData");
static_assert(offsetof(FBulletDirectionIndexData, DirectionIndexArray) == 0x000000, "Member 'FBulletDirectionIndexData::DirectionIndexArray' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataChangeCharacterActionDataList
// 0x0040 (0x0040 - 0x0000)
struct FKoratCharacterDataChangeCharacterActionDataList final
{
public:
	struct FKoratChangeCharacterActionDataList    ChangeCharacterAction1;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    ChangeCharacterAction2;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    ChangeCharacterAction3;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    ChangeCharacterAction4;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    ChangeCharacterAction5;                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    ChangeCharacterSpecialAction;                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    UnionSupportCharacterAction;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratChangeCharacterActionDataList    UnionCharacterAction;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataChangeCharacterActionDataList) == 0x000004, "Wrong alignment on FKoratCharacterDataChangeCharacterActionDataList");
static_assert(sizeof(FKoratCharacterDataChangeCharacterActionDataList) == 0x000040, "Wrong size on FKoratCharacterDataChangeCharacterActionDataList");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterAction1) == 0x000000, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterAction1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterAction2) == 0x000008, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterAction2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterAction3) == 0x000010, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterAction3' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterAction4) == 0x000018, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterAction4' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterAction5) == 0x000020, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterAction5' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, ChangeCharacterSpecialAction) == 0x000028, "Member 'FKoratCharacterDataChangeCharacterActionDataList::ChangeCharacterSpecialAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, UnionSupportCharacterAction) == 0x000030, "Member 'FKoratCharacterDataChangeCharacterActionDataList::UnionSupportCharacterAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataChangeCharacterActionDataList, UnionCharacterAction) == 0x000038, "Member 'FKoratCharacterDataChangeCharacterActionDataList::UnionCharacterAction' has a wrong offset!");

// ScriptStruct SS.SSCharacterFormChangeParam
// 0x00E8 (0x00E8 - 0x0000)
struct FSSCharacterFormChangeParam final
{
public:
	EKoratCharacterChangeMode                     CharacterChangeMode;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataList                ChangeCharacter;                                   // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x000C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepCostumeFlg;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepCostumeID;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CostumeDamageFlg;                                  // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeDamageLv;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeScratchLv;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    EquipItem;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ConsumeBlastStock;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRecovery;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMaxHP;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratStyleChangeSPRecoveryMode               StyleChangeSPRecoveryMode;                         // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                MyselfCharacter;                                   // 0x0044(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        PartnerCharacter;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSUnionSupportCharacter>       UnionSupportCharacter;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        ForbitChangeCharacters;                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PartnerChangeOkFlg;                                // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FaceChipTextureP1;                                 // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               FaceChipTextureP2;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataChangeCharacterActionDataList ChangeCharacterActionList;                         // 0x0098(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSSSupportingCharacterData>     SupportCharacter;                                  // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterFormChangeParam) == 0x000008, "Wrong alignment on FSSCharacterFormChangeParam");
static_assert(sizeof(FSSCharacterFormChangeParam) == 0x0000E8, "Wrong size on FSSCharacterFormChangeParam");
static_assert(offsetof(FSSCharacterFormChangeParam, CharacterChangeMode) == 0x000000, "Member 'FSSCharacterFormChangeParam::CharacterChangeMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, ChangeCharacter) == 0x000004, "Member 'FSSCharacterFormChangeParam::ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, Costume) == 0x00000C, "Member 'FSSCharacterFormChangeParam::Costume' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, KeepCostumeFlg) == 0x000014, "Member 'FSSCharacterFormChangeParam::KeepCostumeFlg' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, KeepCostumeID) == 0x000015, "Member 'FSSCharacterFormChangeParam::KeepCostumeID' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, CostumeDamageFlg) == 0x000016, "Member 'FSSCharacterFormChangeParam::CostumeDamageFlg' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, CostumeDamageLv) == 0x000018, "Member 'FSSCharacterFormChangeParam::CostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, CostumeScratchLv) == 0x00001C, "Member 'FSSCharacterFormChangeParam::CostumeScratchLv' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, EquipItem) == 0x000020, "Member 'FSSCharacterFormChangeParam::EquipItem' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, ConsumeBlastStock) == 0x000030, "Member 'FSSCharacterFormChangeParam::ConsumeBlastStock' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, HpRecovery) == 0x000034, "Member 'FSSCharacterFormChangeParam::HpRecovery' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, AddMaxHP) == 0x000038, "Member 'FSSCharacterFormChangeParam::AddMaxHP' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, StyleChangeSPRecoveryMode) == 0x00003C, "Member 'FSSCharacterFormChangeParam::StyleChangeSPRecoveryMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, CoolTime) == 0x000040, "Member 'FSSCharacterFormChangeParam::CoolTime' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, MyselfCharacter) == 0x000044, "Member 'FSSCharacterFormChangeParam::MyselfCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, PartnerCharacter) == 0x000050, "Member 'FSSCharacterFormChangeParam::PartnerCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, UnionSupportCharacter) == 0x000060, "Member 'FSSCharacterFormChangeParam::UnionSupportCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, ForbitChangeCharacters) == 0x000070, "Member 'FSSCharacterFormChangeParam::ForbitChangeCharacters' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, PartnerChangeOkFlg) == 0x000080, "Member 'FSSCharacterFormChangeParam::PartnerChangeOkFlg' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, FaceChipTextureP1) == 0x000088, "Member 'FSSCharacterFormChangeParam::FaceChipTextureP1' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, FaceChipTextureP2) == 0x000090, "Member 'FSSCharacterFormChangeParam::FaceChipTextureP2' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, ChangeCharacterActionList) == 0x000098, "Member 'FSSCharacterFormChangeParam::ChangeCharacterActionList' has a wrong offset!");
static_assert(offsetof(FSSCharacterFormChangeParam, SupportCharacter) == 0x0000D8, "Member 'FSSCharacterFormChangeParam::SupportCharacter' has a wrong offset!");

// ScriptStruct SS.SSCharacterCostumeDamageReactionParam
// 0x03E0 (0x03E0 - 0x0000)
struct FSSCharacterCostumeDamageReactionParam final
{
public:
	EKoratCharacterMovementTransition             MovementTransition;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHoming;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      HitStopData;                                       // 0x0004(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitEffectAfterHitStop            HitEffectAfterHitStop;                             // 0x0020(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInBlownAttack;                                    // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionAttackType                        AttackType;                                        // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESituationOfOpponentWhenAttackHit             OpponentHitSituation;                              // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   AttackAction;                                      // 0x00C4(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               HitBackRotation;                                   // 0x00D0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              HitBackMovementData;                               // 0x00E8(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   ReactionAction;                                    // 0x03C8(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratReactionDirection                       ReactionDirection;                                 // 0x03D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratReactionDirection                       RequestReactionDirection;                          // 0x03D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAddtiveReactionParameter         AddtiveReactionParameter;                          // 0x03D2(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLastDamageReactionBySameRushDerived;              // 0x03D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D5[0xB];                                      // 0x03D5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterCostumeDamageReactionParam) == 0x000010, "Wrong alignment on FSSCharacterCostumeDamageReactionParam");
static_assert(sizeof(FSSCharacterCostumeDamageReactionParam) == 0x0003E0, "Wrong size on FSSCharacterCostumeDamageReactionParam");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, MovementTransition) == 0x000000, "Member 'FSSCharacterCostumeDamageReactionParam::MovementTransition' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, bInHoming) == 0x000001, "Member 'FSSCharacterCostumeDamageReactionParam::bInHoming' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, HitStopData) == 0x000004, "Member 'FSSCharacterCostumeDamageReactionParam::HitStopData' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, HitEffectAfterHitStop) == 0x000020, "Member 'FSSCharacterCostumeDamageReactionParam::HitEffectAfterHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, bInBlownAttack) == 0x0000C0, "Member 'FSSCharacterCostumeDamageReactionParam::bInBlownAttack' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, AttackType) == 0x0000C1, "Member 'FSSCharacterCostumeDamageReactionParam::AttackType' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, OpponentHitSituation) == 0x0000C2, "Member 'FSSCharacterCostumeDamageReactionParam::OpponentHitSituation' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, AttackAction) == 0x0000C4, "Member 'FSSCharacterCostumeDamageReactionParam::AttackAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, HitBackRotation) == 0x0000D0, "Member 'FSSCharacterCostumeDamageReactionParam::HitBackRotation' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, HitBackMovementData) == 0x0000E8, "Member 'FSSCharacterCostumeDamageReactionParam::HitBackMovementData' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, ReactionAction) == 0x0003C8, "Member 'FSSCharacterCostumeDamageReactionParam::ReactionAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, ReactionDirection) == 0x0003D0, "Member 'FSSCharacterCostumeDamageReactionParam::ReactionDirection' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, RequestReactionDirection) == 0x0003D1, "Member 'FSSCharacterCostumeDamageReactionParam::RequestReactionDirection' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, AddtiveReactionParameter) == 0x0003D2, "Member 'FSSCharacterCostumeDamageReactionParam::AddtiveReactionParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCostumeDamageReactionParam, bLastDamageReactionBySameRushDerived) == 0x0003D4, "Member 'FSSCharacterCostumeDamageReactionParam::bLastDamageReactionBySameRushDerived' has a wrong offset!");

// ScriptStruct SS.SSTournamentReservedTeamCharacter
// 0x0018 (0x0018 - 0x0000)
struct FSSTournamentReservedTeamCharacter final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentReservedTeamCharacter) == 0x000008, "Wrong alignment on FSSTournamentReservedTeamCharacter");
static_assert(sizeof(FSSTournamentReservedTeamCharacter) == 0x000018, "Wrong size on FSSTournamentReservedTeamCharacter");
static_assert(offsetof(FSSTournamentReservedTeamCharacter, CharacterID) == 0x000000, "Member 'FSSTournamentReservedTeamCharacter::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSTournamentReservedTeamCharacter, EquipItems) == 0x000008, "Member 'FSSTournamentReservedTeamCharacter::EquipItems' has a wrong offset!");

// ScriptStruct SS.BindingOriginInfo
// 0x0070 (0x0070 - 0x0000)
struct FBindingOriginInfo final
{
public:
	bool                                          bWarp;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstUpdate;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecondUpdate;                                     // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalDisparityAddHeight;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraRootTransformOrigin;                         // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBindingOriginInfo) == 0x000010, "Wrong alignment on FBindingOriginInfo");
static_assert(sizeof(FBindingOriginInfo) == 0x000070, "Wrong size on FBindingOriginInfo");
static_assert(offsetof(FBindingOriginInfo, bWarp) == 0x000000, "Member 'FBindingOriginInfo::bWarp' has a wrong offset!");
static_assert(offsetof(FBindingOriginInfo, bFirstUpdate) == 0x000001, "Member 'FBindingOriginInfo::bFirstUpdate' has a wrong offset!");
static_assert(offsetof(FBindingOriginInfo, bSecondUpdate) == 0x000002, "Member 'FBindingOriginInfo::bSecondUpdate' has a wrong offset!");
static_assert(offsetof(FBindingOriginInfo, PhysicalDisparityAddHeight) == 0x000004, "Member 'FBindingOriginInfo::PhysicalDisparityAddHeight' has a wrong offset!");
static_assert(offsetof(FBindingOriginInfo, CameraRootTransformOrigin) == 0x000010, "Member 'FBindingOriginInfo::CameraRootTransformOrigin' has a wrong offset!");

// ScriptStruct SS.BindingOrigin
// 0x0048 (0x0048 - 0x0000)
struct FBindingOrigin final
{
public:
	bool                                          bCameraRelativeMode;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  LocalActor;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugBindingOriginLevelSequencePath;               // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBindingOrigin) == 0x000008, "Wrong alignment on FBindingOrigin");
static_assert(sizeof(FBindingOrigin) == 0x000048, "Wrong size on FBindingOrigin");
static_assert(offsetof(FBindingOrigin, bCameraRelativeMode) == 0x000000, "Member 'FBindingOrigin::bCameraRelativeMode' has a wrong offset!");
static_assert(offsetof(FBindingOrigin, LocalActor) == 0x000008, "Member 'FBindingOrigin::LocalActor' has a wrong offset!");
static_assert(offsetof(FBindingOrigin, DebugBindingOriginLevelSequencePath) == 0x000038, "Member 'FBindingOrigin::DebugBindingOriginLevelSequencePath' has a wrong offset!");

// ScriptStruct SS.CharacterEffectResource
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCharacterEffectResource final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterEffectResource) == 0x000008, "Wrong alignment on FCharacterEffectResource");
static_assert(sizeof(FCharacterEffectResource) == 0x000028, "Wrong size on FCharacterEffectResource");

// ScriptStruct SS.SSCharacterPreWarpInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FSSCharacterPreWarpInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterPreWarpInfo) == 0x000010, "Wrong alignment on FSSCharacterPreWarpInfo");
static_assert(sizeof(FSSCharacterPreWarpInfo) == 0x000080, "Wrong size on FSSCharacterPreWarpInfo");

// ScriptStruct SS.CharacterDamageEffectByEnergyBulletParamater
// 0x0EA0 (0x0EA0 - 0x0000)
struct FCharacterDamageEffectByEnergyBulletParamater final
{
public:
	class ASSCharacter*                           OwnerCharacter;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceState;                                // 0x0008(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratReceivedDamageParameter          ReceivedDamageParameter;                           // 0x0038(0x0AC0)(NativeAccessSpecifierPublic)
	struct FKoratEffectColorDataDetail            EffectMutipleColorData;                            // 0x0AF8(0x0148)(NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   Action;                                            // 0x0C40(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C48[0x8];                                      // 0x0C48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EffectTransform;                                   // 0x0C50(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletGroupExplosion GroupExplosion;                                    // 0x0CB0(0x0110)(NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Explosion;                                         // 0x0DC0(0x00D0)(NativeAccessSpecifierPublic)
	bool                                          bGuardEffect;                                      // 0x0E90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E91[0xF];                                      // 0x0E91(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterDamageEffectByEnergyBulletParamater) == 0x000010, "Wrong alignment on FCharacterDamageEffectByEnergyBulletParamater");
static_assert(sizeof(FCharacterDamageEffectByEnergyBulletParamater) == 0x000EA0, "Wrong size on FCharacterDamageEffectByEnergyBulletParamater");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, OwnerCharacter) == 0x000000, "Member 'FCharacterDamageEffectByEnergyBulletParamater::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, LevelSequenceState) == 0x000008, "Member 'FCharacterDamageEffectByEnergyBulletParamater::LevelSequenceState' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, ReceivedDamageParameter) == 0x000038, "Member 'FCharacterDamageEffectByEnergyBulletParamater::ReceivedDamageParameter' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, EffectMutipleColorData) == 0x000AF8, "Member 'FCharacterDamageEffectByEnergyBulletParamater::EffectMutipleColorData' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, Action) == 0x000C40, "Member 'FCharacterDamageEffectByEnergyBulletParamater::Action' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, EffectTransform) == 0x000C50, "Member 'FCharacterDamageEffectByEnergyBulletParamater::EffectTransform' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, GroupExplosion) == 0x000CB0, "Member 'FCharacterDamageEffectByEnergyBulletParamater::GroupExplosion' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, Explosion) == 0x000DC0, "Member 'FCharacterDamageEffectByEnergyBulletParamater::Explosion' has a wrong offset!");
static_assert(offsetof(FCharacterDamageEffectByEnergyBulletParamater, bGuardEffect) == 0x000E90, "Member 'FCharacterDamageEffectByEnergyBulletParamater::bGuardEffect' has a wrong offset!");

// ScriptStruct SS.CharacterFootIK
// 0x000C (0x000C - 0x0000)
struct FCharacterFootIK final
{
public:
	float                                         HandIK_WaistMovementLower;                         // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandIK_WaistMovementUpper;                         // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandIK_AddWaistMovement;                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterFootIK) == 0x000004, "Wrong alignment on FCharacterFootIK");
static_assert(sizeof(FCharacterFootIK) == 0x00000C, "Wrong size on FCharacterFootIK");
static_assert(offsetof(FCharacterFootIK, HandIK_WaistMovementLower) == 0x000000, "Member 'FCharacterFootIK::HandIK_WaistMovementLower' has a wrong offset!");
static_assert(offsetof(FCharacterFootIK, HandIK_WaistMovementUpper) == 0x000004, "Member 'FCharacterFootIK::HandIK_WaistMovementUpper' has a wrong offset!");
static_assert(offsetof(FCharacterFootIK, HandIK_AddWaistMovement) == 0x000008, "Member 'FCharacterFootIK::HandIK_AddWaistMovement' has a wrong offset!");

// ScriptStruct SS.CharacterHandIK
// 0x0038 (0x0038 - 0x0000)
struct FCharacterHandIK final
{
public:
	struct FVector                                LeftLocation;                                      // 0x0000(0x0018)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightLocation;                                     // 0x0018(0x0018)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePowerImpactHandIK;                          // 0x0030(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePowerImpactHandIKRight;                     // 0x0031(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterHandIK) == 0x000008, "Wrong alignment on FCharacterHandIK");
static_assert(sizeof(FCharacterHandIK) == 0x000038, "Wrong size on FCharacterHandIK");
static_assert(offsetof(FCharacterHandIK, LeftLocation) == 0x000000, "Member 'FCharacterHandIK::LeftLocation' has a wrong offset!");
static_assert(offsetof(FCharacterHandIK, RightLocation) == 0x000018, "Member 'FCharacterHandIK::RightLocation' has a wrong offset!");
static_assert(offsetof(FCharacterHandIK, bEnablePowerImpactHandIK) == 0x000030, "Member 'FCharacterHandIK::bEnablePowerImpactHandIK' has a wrong offset!");
static_assert(offsetof(FCharacterHandIK, bEnablePowerImpactHandIKRight) == 0x000031, "Member 'FCharacterHandIK::bEnablePowerImpactHandIKRight' has a wrong offset!");

// ScriptStruct SS.SSDownLoadContentsCheckData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSSDownLoadContentsCheckData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDownLoadContentsCheckData) == 0x000008, "Wrong alignment on FSSDownLoadContentsCheckData");
static_assert(sizeof(FSSDownLoadContentsCheckData) == 0x000040, "Wrong size on FSSDownLoadContentsCheckData");

// ScriptStruct SS.SSCharacterGiantCharaCapsulePushingParam
// 0x0014 (0x0014 - 0x0000)
struct FSSCharacterGiantCharaCapsulePushingParam final
{
public:
	class FName                                   TargetRootBoneName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetEndBoneName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterGiantCharaCapsulePushingParam) == 0x000004, "Wrong alignment on FSSCharacterGiantCharaCapsulePushingParam");
static_assert(sizeof(FSSCharacterGiantCharaCapsulePushingParam) == 0x000014, "Wrong size on FSSCharacterGiantCharaCapsulePushingParam");
static_assert(offsetof(FSSCharacterGiantCharaCapsulePushingParam, TargetRootBoneName) == 0x000000, "Member 'FSSCharacterGiantCharaCapsulePushingParam::TargetRootBoneName' has a wrong offset!");
static_assert(offsetof(FSSCharacterGiantCharaCapsulePushingParam, TargetEndBoneName) == 0x000008, "Member 'FSSCharacterGiantCharaCapsulePushingParam::TargetEndBoneName' has a wrong offset!");
static_assert(offsetof(FSSCharacterGiantCharaCapsulePushingParam, CapsuleRadius) == 0x000010, "Member 'FSSCharacterGiantCharaCapsulePushingParam::CapsuleRadius' has a wrong offset!");

// ScriptStruct SS.SplineMeshTrailMaterialInstance
// 0x0240 (0x0240 - 0x0000)
struct FSplineMeshTrailMaterialInstance final
{
public:
	struct FCommonTrailDataMaterialInstance       CommonMaterials;                                   // 0x0000(0x0240)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineMeshTrailMaterialInstance) == 0x000008, "Wrong alignment on FSplineMeshTrailMaterialInstance");
static_assert(sizeof(FSplineMeshTrailMaterialInstance) == 0x000240, "Wrong size on FSplineMeshTrailMaterialInstance");
static_assert(offsetof(FSplineMeshTrailMaterialInstance, CommonMaterials) == 0x000000, "Member 'FSplineMeshTrailMaterialInstance::CommonMaterials' has a wrong offset!");

// ScriptStruct SS.CharacterRequestEndMontageLevelSequence
// 0x000C (0x000C - 0x0000)
struct FCharacterRequestEndMontageLevelSequence final
{
public:
	struct FKoratActionDataList                   Action;                                            // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCharacterActionFinishReason             ActionFinishReason;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterRequestEndMontageLevelSequence) == 0x000004, "Wrong alignment on FCharacterRequestEndMontageLevelSequence");
static_assert(sizeof(FCharacterRequestEndMontageLevelSequence) == 0x00000C, "Wrong size on FCharacterRequestEndMontageLevelSequence");
static_assert(offsetof(FCharacterRequestEndMontageLevelSequence, Action) == 0x000000, "Member 'FCharacterRequestEndMontageLevelSequence::Action' has a wrong offset!");
static_assert(offsetof(FCharacterRequestEndMontageLevelSequence, ActionFinishReason) == 0x000008, "Member 'FCharacterRequestEndMontageLevelSequence::ActionFinishReason' has a wrong offset!");

// ScriptStruct SS.SSTournamentEditData
// 0x0048 (0x0048 - 0x0000)
struct FSSTournamentEditData final
{
public:
	TArray<struct FKoratCharacterFilterDataList>  PlayerCharacterRestriction;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterFilterDataList>  ComCharacterRestriction;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Timelimit;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      ReservedStage;                                     // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleMemberRule                        MemberRule;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDP;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMemberChange;                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCharacterSelect;                            // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZItemCustomizeType;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthRecoveryMode;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthRecoveryPercentage;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFly;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOutOfField;                                 // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsedSlot;                                         // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentEditData) == 0x000008, "Wrong alignment on FSSTournamentEditData");
static_assert(sizeof(FSSTournamentEditData) == 0x000048, "Wrong size on FSSTournamentEditData");
static_assert(offsetof(FSSTournamentEditData, PlayerCharacterRestriction) == 0x000000, "Member 'FSSTournamentEditData::PlayerCharacterRestriction' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, ComCharacterRestriction) == 0x000010, "Member 'FSSTournamentEditData::ComCharacterRestriction' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, Timelimit) == 0x000020, "Member 'FSSTournamentEditData::Timelimit' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, ReservedStage) == 0x000024, "Member 'FSSTournamentEditData::ReservedStage' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, MemberRule) == 0x00002C, "Member 'FSSTournamentEditData::MemberRule' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, MaxDP) == 0x000030, "Member 'FSSTournamentEditData::MaxDP' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, bDisableMemberChange) == 0x000034, "Member 'FSSTournamentEditData::bDisableMemberChange' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, bEnableCharacterSelect) == 0x000035, "Member 'FSSTournamentEditData::bEnableCharacterSelect' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, ZItemCustomizeType) == 0x000038, "Member 'FSSTournamentEditData::ZItemCustomizeType' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, HealthRecoveryMode) == 0x00003C, "Member 'FSSTournamentEditData::HealthRecoveryMode' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, HealthRecoveryPercentage) == 0x000040, "Member 'FSSTournamentEditData::HealthRecoveryPercentage' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, bEnableFly) == 0x000044, "Member 'FSSTournamentEditData::bEnableFly' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, bEnableOutOfField) == 0x000045, "Member 'FSSTournamentEditData::bEnableOutOfField' has a wrong offset!");
static_assert(offsetof(FSSTournamentEditData, bUsedSlot) == 0x000046, "Member 'FSSTournamentEditData::bUsedSlot' has a wrong offset!");

// ScriptStruct SS.KoratCharacterAccessoryInfo
// 0x000C (0x000C - 0x0000)
struct FKoratCharacterAccessoryInfo final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveValue;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterAccessoryInfo) == 0x000004, "Wrong alignment on FKoratCharacterAccessoryInfo");
static_assert(sizeof(FKoratCharacterAccessoryInfo) == 0x00000C, "Wrong size on FKoratCharacterAccessoryInfo");
static_assert(offsetof(FKoratCharacterAccessoryInfo, CurveName) == 0x000000, "Member 'FKoratCharacterAccessoryInfo::CurveName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterAccessoryInfo, CurveValue) == 0x000008, "Member 'FKoratCharacterAccessoryInfo::CurveValue' has a wrong offset!");

// ScriptStruct SS.SSCharacterActionManagerForLevelSequenceSpawnData
// 0x0010 (0x0010 - 0x0000)
struct FSSCharacterActionManagerForLevelSequenceSpawnData final
{
public:
	class ASSLevelSequenceActor*                  LevelSequenceActor;                                // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterActionManagerForLevelSequenceSpawnData) == 0x000008, "Wrong alignment on FSSCharacterActionManagerForLevelSequenceSpawnData");
static_assert(sizeof(FSSCharacterActionManagerForLevelSequenceSpawnData) == 0x000010, "Wrong size on FSSCharacterActionManagerForLevelSequenceSpawnData");
static_assert(offsetof(FSSCharacterActionManagerForLevelSequenceSpawnData, LevelSequenceActor) == 0x000000, "Member 'FSSCharacterActionManagerForLevelSequenceSpawnData::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionManagerForLevelSequenceSpawnData, SectionName) == 0x000008, "Member 'FSSCharacterActionManagerForLevelSequenceSpawnData::SectionName' has a wrong offset!");

// ScriptStruct SS.SSCharacterActionTargetSocket
// 0x0070 (0x0070 - 0x0000)
struct FSSCharacterActionTargetSocket final
{
public:
	class FName                                   Parent;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterActionTargetSocket) == 0x000010, "Wrong alignment on FSSCharacterActionTargetSocket");
static_assert(sizeof(FSSCharacterActionTargetSocket) == 0x000070, "Wrong size on FSSCharacterActionTargetSocket");
static_assert(offsetof(FSSCharacterActionTargetSocket, Parent) == 0x000000, "Member 'FSSCharacterActionTargetSocket::Parent' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetSocket, Transform) == 0x000010, "Member 'FSSCharacterActionTargetSocket::Transform' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowSelectParameterBoolText
// 0x0020 (0x0020 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText) == 0x000020, "Wrong size on FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText, Value) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText::Value' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText, Text) == 0x000008, "Member 'FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText::Text' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray final
{
public:
	TArray<struct FSSDramaticBattleCutEditorUIWindowSelectParameterBoolText> SelectParameterBoolTexts;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray, SelectParameterBoolTexts) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowSelectParameterBoolTextArray::SelectParameterBoolTexts' has a wrong offset!");

// ScriptStruct SS.SSCharacterActionTargetComponentPostPhysicsTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FSSCharacterActionTargetComponentPostPhysicsTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterActionTargetComponentPostPhysicsTickFunction) == 0x000008, "Wrong alignment on FSSCharacterActionTargetComponentPostPhysicsTickFunction");
static_assert(sizeof(FSSCharacterActionTargetComponentPostPhysicsTickFunction) == 0x000030, "Wrong size on FSSCharacterActionTargetComponentPostPhysicsTickFunction");

// ScriptStruct SS.SSCharacterActionTargetStruct
// 0x0020 (0x0020 - 0x0000)
struct FSSCharacterActionTargetStruct final
{
public:
	float                                         ActionTargetSearchLeft;                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionTargetSearchRight;                           // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionTargetSearchUP;                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionTargetSearchDown;                            // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionTargetSearchDistance;                        // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActionTargetSearchRange;                       // 0x0014(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActionTargetSearchRangeStay;                   // 0x0015(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IgnoreActionTargetDistance;                        // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActionTargetStopActionEnd;                        // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterActionTargetStruct) == 0x000004, "Wrong alignment on FSSCharacterActionTargetStruct");
static_assert(sizeof(FSSCharacterActionTargetStruct) == 0x000020, "Wrong size on FSSCharacterActionTargetStruct");
static_assert(offsetof(FSSCharacterActionTargetStruct, ActionTargetSearchLeft) == 0x000000, "Member 'FSSCharacterActionTargetStruct::ActionTargetSearchLeft' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, ActionTargetSearchRight) == 0x000004, "Member 'FSSCharacterActionTargetStruct::ActionTargetSearchRight' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, ActionTargetSearchUP) == 0x000008, "Member 'FSSCharacterActionTargetStruct::ActionTargetSearchUP' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, ActionTargetSearchDown) == 0x00000C, "Member 'FSSCharacterActionTargetStruct::ActionTargetSearchDown' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, ActionTargetSearchDistance) == 0x000010, "Member 'FSSCharacterActionTargetStruct::ActionTargetSearchDistance' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, bUseActionTargetSearchRange) == 0x000014, "Member 'FSSCharacterActionTargetStruct::bUseActionTargetSearchRange' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, bUseActionTargetSearchRangeStay) == 0x000015, "Member 'FSSCharacterActionTargetStruct::bUseActionTargetSearchRangeStay' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, IgnoreActionTargetDistance) == 0x000018, "Member 'FSSCharacterActionTargetStruct::IgnoreActionTargetDistance' has a wrong offset!");
static_assert(offsetof(FSSCharacterActionTargetStruct, bActionTargetStopActionEnd) == 0x00001C, "Member 'FSSCharacterActionTargetStruct::bActionTargetStopActionEnd' has a wrong offset!");

// ScriptStruct SS.SSCharacterAfterImageStruct
// 0x0038 (0x0038 - 0x0000)
struct FSSCharacterAfterImageStruct final
{
public:
	float                                         SpawnWait;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRange;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnFrameInterval;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeRange;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAfterImage;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        LevelSequence;                                     // 0x0018(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterAfterImageStruct) == 0x000008, "Wrong alignment on FSSCharacterAfterImageStruct");
static_assert(sizeof(FSSCharacterAfterImageStruct) == 0x000038, "Wrong size on FSSCharacterAfterImageStruct");
static_assert(offsetof(FSSCharacterAfterImageStruct, SpawnWait) == 0x000000, "Member 'FSSCharacterAfterImageStruct::SpawnWait' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, SpawnRange) == 0x000004, "Member 'FSSCharacterAfterImageStruct::SpawnRange' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, SpawnFrameInterval) == 0x000008, "Member 'FSSCharacterAfterImageStruct::SpawnFrameInterval' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, LifeTime) == 0x00000C, "Member 'FSSCharacterAfterImageStruct::LifeTime' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, LifeTimeRange) == 0x000010, "Member 'FSSCharacterAfterImageStruct::LifeTimeRange' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, bUseAfterImage) == 0x000014, "Member 'FSSCharacterAfterImageStruct::bUseAfterImage' has a wrong offset!");
static_assert(offsetof(FSSCharacterAfterImageStruct, LevelSequence) == 0x000018, "Member 'FSSCharacterAfterImageStruct::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCreaterInfo
// 0x0030 (0x0030 - 0x0000)
struct FKoratDramaticBattleCreaterInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratIconTitleDataList                IconId;                                            // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticBattleCreaterInfo) == 0x000008, "Wrong alignment on FKoratDramaticBattleCreaterInfo");
static_assert(sizeof(FKoratDramaticBattleCreaterInfo) == 0x000030, "Wrong size on FKoratDramaticBattleCreaterInfo");
static_assert(offsetof(FKoratDramaticBattleCreaterInfo, UserId) == 0x000000, "Member 'FKoratDramaticBattleCreaterInfo::UserId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCreaterInfo, UserName) == 0x000010, "Member 'FKoratDramaticBattleCreaterInfo::UserName' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCreaterInfo, IconId) == 0x000020, "Member 'FKoratDramaticBattleCreaterInfo::IconId' has a wrong offset!");

// ScriptStruct SS.KoratDramaticCutIDsData
// 0x0018 (0x0018 - 0x0000)
struct FKoratDramaticCutIDsData final
{
public:
	TArray<class FName>                           CutIds;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ThumbnailCut;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticCutIDsData) == 0x000008, "Wrong alignment on FKoratDramaticCutIDsData");
static_assert(sizeof(FKoratDramaticCutIDsData) == 0x000018, "Wrong size on FKoratDramaticCutIDsData");
static_assert(offsetof(FKoratDramaticCutIDsData, CutIds) == 0x000000, "Member 'FKoratDramaticCutIDsData::CutIds' has a wrong offset!");
static_assert(offsetof(FKoratDramaticCutIDsData, ThumbnailCut) == 0x000010, "Member 'FKoratDramaticCutIDsData::ThumbnailCut' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleCommonListData
// 0x01A8 (0x01A8 - 0x0000)
struct FKoratDramaticBattleCommonListData final
{
public:
	class USSDramaticBattleDataRecordAsset*       DramaticEditData;                                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDramaticBattleDataRecordAsset*       GeneratedDramaticEditData;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EditBattleVersion;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EditDramaVersion;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCreaterInfo        CreaterInfo;                                       // 0x0018(0x0030)(NativeAccessSpecifierPublic)
	uint64                                        BattleId;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        OriginBattleId;                                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleExtraDataList      CopyExtraBattleId;                                 // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleAdditionalData     AdditionalData;                                    // 0x0060(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleImageData          ImageData;                                         // 0x0098(0x0070)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratDramaticCutIDsData> ScenesList;                                        // 0x0108(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratDramaticCutDataRecord> CutScenes;                                         // 0x0158(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleCommonListData) == 0x000008, "Wrong alignment on FKoratDramaticBattleCommonListData");
static_assert(sizeof(FKoratDramaticBattleCommonListData) == 0x0001A8, "Wrong size on FKoratDramaticBattleCommonListData");
static_assert(offsetof(FKoratDramaticBattleCommonListData, DramaticEditData) == 0x000000, "Member 'FKoratDramaticBattleCommonListData::DramaticEditData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, GeneratedDramaticEditData) == 0x000008, "Member 'FKoratDramaticBattleCommonListData::GeneratedDramaticEditData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, EditBattleVersion) == 0x000010, "Member 'FKoratDramaticBattleCommonListData::EditBattleVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, EditDramaVersion) == 0x000014, "Member 'FKoratDramaticBattleCommonListData::EditDramaVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, CreaterInfo) == 0x000018, "Member 'FKoratDramaticBattleCommonListData::CreaterInfo' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, BattleId) == 0x000048, "Member 'FKoratDramaticBattleCommonListData::BattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, OriginBattleId) == 0x000050, "Member 'FKoratDramaticBattleCommonListData::OriginBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, CopyExtraBattleId) == 0x000058, "Member 'FKoratDramaticBattleCommonListData::CopyExtraBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, AdditionalData) == 0x000060, "Member 'FKoratDramaticBattleCommonListData::AdditionalData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, ImageData) == 0x000098, "Member 'FKoratDramaticBattleCommonListData::ImageData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, ScenesList) == 0x000108, "Member 'FKoratDramaticBattleCommonListData::ScenesList' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleCommonListData, CutScenes) == 0x000158, "Member 'FKoratDramaticBattleCommonListData::CutScenes' has a wrong offset!");

// ScriptStruct SS.KoratDramaticReplayCommonListData
// 0x0230 (0x0230 - 0x0000)
struct FKoratDramaticReplayCommonListData final
{
public:
	class USSBattleReplaySaveGame*                ReplayData;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleCommonListData     BattleData;                                        // 0x0008(0x01A8)(NativeAccessSpecifierPublic)
	int32                                         EditVersion;                                       // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EditBattleVersion;                                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EditDramaVersion;                                  // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticBattleCreaterInfo        CreaterInfo;                                       // 0x01C0(0x0030)(NativeAccessSpecifierPublic)
	struct FGuid                                  ReplayId;                                          // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        BattleId;                                          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticReplayAdditionalData     AdditionalData;                                    // 0x0208(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticReplayCommonListData) == 0x000008, "Wrong alignment on FKoratDramaticReplayCommonListData");
static_assert(sizeof(FKoratDramaticReplayCommonListData) == 0x000230, "Wrong size on FKoratDramaticReplayCommonListData");
static_assert(offsetof(FKoratDramaticReplayCommonListData, ReplayData) == 0x000000, "Member 'FKoratDramaticReplayCommonListData::ReplayData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, BattleData) == 0x000008, "Member 'FKoratDramaticReplayCommonListData::BattleData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, EditVersion) == 0x0001B0, "Member 'FKoratDramaticReplayCommonListData::EditVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, EditBattleVersion) == 0x0001B4, "Member 'FKoratDramaticReplayCommonListData::EditBattleVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, EditDramaVersion) == 0x0001B8, "Member 'FKoratDramaticReplayCommonListData::EditDramaVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, CreaterInfo) == 0x0001C0, "Member 'FKoratDramaticReplayCommonListData::CreaterInfo' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, ReplayId) == 0x0001F0, "Member 'FKoratDramaticReplayCommonListData::ReplayId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, BattleId) == 0x000200, "Member 'FKoratDramaticReplayCommonListData::BattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticReplayCommonListData, AdditionalData) == 0x000208, "Member 'FKoratDramaticReplayCommonListData::AdditionalData' has a wrong offset!");

// ScriptStruct SS.SSCharacterAuraRecord
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FSSCharacterAuraRecord final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterAuraRecord) == 0x000008, "Wrong alignment on FSSCharacterAuraRecord");
static_assert(sizeof(FSSCharacterAuraRecord) == 0x000048, "Wrong size on FSSCharacterAuraRecord");

// ScriptStruct SS.SSBattleTrainingData
// 0x0058 (0x0058 - 0x0000)
struct FSSBattleTrainingData final
{
public:
	int32                                         PlayCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKoratBattleTrainingCommandDataList, int32> CommandPlayCount;                                  // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleTrainingData) == 0x000008, "Wrong alignment on FSSBattleTrainingData");
static_assert(sizeof(FSSBattleTrainingData) == 0x000058, "Wrong size on FSSBattleTrainingData");
static_assert(offsetof(FSSBattleTrainingData, PlayCount) == 0x000000, "Member 'FSSBattleTrainingData::PlayCount' has a wrong offset!");
static_assert(offsetof(FSSBattleTrainingData, CommandPlayCount) == 0x000008, "Member 'FSSBattleTrainingData::CommandPlayCount' has a wrong offset!");

// ScriptStruct SS.SSCharacterAuraAssignRecord
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSSCharacterAuraAssignRecord final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterAuraAssignRecord) == 0x000004, "Wrong alignment on FSSCharacterAuraAssignRecord");
static_assert(sizeof(FSSCharacterAuraAssignRecord) == 0x000020, "Wrong size on FSSCharacterAuraAssignRecord");

// ScriptStruct SS.SSMainMenuTransitionCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FSSMainMenuTransitionCharacterData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSMenuCharacter*                       MenuCharacter;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuTransitionCharacterData) == 0x000008, "Wrong alignment on FSSMainMenuTransitionCharacterData");
static_assert(sizeof(FSSMainMenuTransitionCharacterData) == 0x000018, "Wrong size on FSSMainMenuTransitionCharacterData");
static_assert(offsetof(FSSMainMenuTransitionCharacterData, MenuCharacter) == 0x000010, "Member 'FSSMainMenuTransitionCharacterData::MenuCharacter' has a wrong offset!");

// ScriptStruct SS.SSCharacterBattleAssistComboStruct
// 0x0018 (0x0018 - 0x0000)
struct FSSCharacterBattleAssistComboStruct final
{
public:
	float                                         PROB;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prob_Default;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EKoratBattleKey>                       BattleKeyArray;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterBattleAssistComboStruct) == 0x000008, "Wrong alignment on FSSCharacterBattleAssistComboStruct");
static_assert(sizeof(FSSCharacterBattleAssistComboStruct) == 0x000018, "Wrong size on FSSCharacterBattleAssistComboStruct");
static_assert(offsetof(FSSCharacterBattleAssistComboStruct, PROB) == 0x000000, "Member 'FSSCharacterBattleAssistComboStruct::PROB' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistComboStruct, Prob_Default) == 0x000004, "Member 'FSSCharacterBattleAssistComboStruct::Prob_Default' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistComboStruct, BattleKeyArray) == 0x000008, "Member 'FSSCharacterBattleAssistComboStruct::BattleKeyArray' has a wrong offset!");

// ScriptStruct SS.SSCharacterBattleAssistStateStruct
// 0x0098 (0x0098 - 0x0000)
struct FSSCharacterBattleAssistStateStruct final
{
public:
	TWeakObjectPtr<class ASSCharacter>            PlayerCharacter;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSCharacter>            TargetCharacter;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   PlayerAction;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerActionSection;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   TargetAction;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   TargetBeforeAction;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActionSection;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSparking;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSCharacterBattleAssistComboStruct> ComboList;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         RequestComboIndex;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboResetCount;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetBulletRunning;                              // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardNoHit;                                       // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GuardTimeLater;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldBattleKey;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPursuitExec;                                    // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PursuitCount;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratPursuitType                             PursuitType;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuitVanishingAttack;                           // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuitDragonHoming;                              // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPursuitDragonHomingExec;                          // 0x006B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PursuitVanishingPossibleRemaining;                 // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PursuitDragonHomingPossibleRemaining;              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeSincePushRush;                                // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PursuitDragonHomingSafeTime;                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DragonDashPadDirection;                            // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashPadInputTime;                            // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDashWithAssist;                             // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDragonDashAttackPursuit;                          // 0x0095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterBattleAssistStateStruct) == 0x000008, "Wrong alignment on FSSCharacterBattleAssistStateStruct");
static_assert(sizeof(FSSCharacterBattleAssistStateStruct) == 0x000098, "Wrong size on FSSCharacterBattleAssistStateStruct");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PlayerCharacter) == 0x000000, "Member 'FSSCharacterBattleAssistStateStruct::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, TargetCharacter) == 0x000008, "Member 'FSSCharacterBattleAssistStateStruct::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PlayerAction) == 0x000010, "Member 'FSSCharacterBattleAssistStateStruct::PlayerAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PlayerActionSection) == 0x000018, "Member 'FSSCharacterBattleAssistStateStruct::PlayerActionSection' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, TargetAction) == 0x000020, "Member 'FSSCharacterBattleAssistStateStruct::TargetAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, TargetBeforeAction) == 0x000028, "Member 'FSSCharacterBattleAssistStateStruct::TargetBeforeAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, TargetActionSection) == 0x000030, "Member 'FSSCharacterBattleAssistStateStruct::TargetActionSection' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bSparking) == 0x000038, "Member 'FSSCharacterBattleAssistStateStruct::bSparking' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, ComboList) == 0x000040, "Member 'FSSCharacterBattleAssistStateStruct::ComboList' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, RequestComboIndex) == 0x000050, "Member 'FSSCharacterBattleAssistStateStruct::RequestComboIndex' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, ComboResetCount) == 0x000054, "Member 'FSSCharacterBattleAssistStateStruct::ComboResetCount' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bTargetBulletRunning) == 0x000058, "Member 'FSSCharacterBattleAssistStateStruct::bTargetBulletRunning' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bGuardNoHit) == 0x000059, "Member 'FSSCharacterBattleAssistStateStruct::bGuardNoHit' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, GuardTimeLater) == 0x00005C, "Member 'FSSCharacterBattleAssistStateStruct::GuardTimeLater' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bHoldBattleKey) == 0x000060, "Member 'FSSCharacterBattleAssistStateStruct::bHoldBattleKey' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bIsPursuitExec) == 0x000061, "Member 'FSSCharacterBattleAssistStateStruct::bIsPursuitExec' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PursuitCount) == 0x000064, "Member 'FSSCharacterBattleAssistStateStruct::PursuitCount' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PursuitType) == 0x000068, "Member 'FSSCharacterBattleAssistStateStruct::PursuitType' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bPursuitVanishingAttack) == 0x000069, "Member 'FSSCharacterBattleAssistStateStruct::bPursuitVanishingAttack' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bPursuitDragonHoming) == 0x00006A, "Member 'FSSCharacterBattleAssistStateStruct::bPursuitDragonHoming' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bPursuitDragonHomingExec) == 0x00006B, "Member 'FSSCharacterBattleAssistStateStruct::bPursuitDragonHomingExec' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PursuitVanishingPossibleRemaining) == 0x00006C, "Member 'FSSCharacterBattleAssistStateStruct::PursuitVanishingPossibleRemaining' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PursuitDragonHomingPossibleRemaining) == 0x000070, "Member 'FSSCharacterBattleAssistStateStruct::PursuitDragonHomingPossibleRemaining' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bTimeSincePushRush) == 0x000074, "Member 'FSSCharacterBattleAssistStateStruct::bTimeSincePushRush' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, PursuitDragonHomingSafeTime) == 0x000078, "Member 'FSSCharacterBattleAssistStateStruct::PursuitDragonHomingSafeTime' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, DragonDashPadDirection) == 0x000080, "Member 'FSSCharacterBattleAssistStateStruct::DragonDashPadDirection' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, DragonDashPadInputTime) == 0x000090, "Member 'FSSCharacterBattleAssistStateStruct::DragonDashPadInputTime' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bDragonDashWithAssist) == 0x000094, "Member 'FSSCharacterBattleAssistStateStruct::bDragonDashWithAssist' has a wrong offset!");
static_assert(offsetof(FSSCharacterBattleAssistStateStruct, bDragonDashAttackPursuit) == 0x000095, "Member 'FSSCharacterBattleAssistStateStruct::bDragonDashAttackPursuit' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBoneDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FKoratCharacterBoneDataAssetRecord final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterBoneDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterBoneDataAssetRecord");
static_assert(sizeof(FKoratCharacterBoneDataAssetRecord) == 0x000010, "Wrong size on FKoratCharacterBoneDataAssetRecord");
static_assert(offsetof(FKoratCharacterBoneDataAssetRecord, BoneNames) == 0x000000, "Member 'FKoratCharacterBoneDataAssetRecord::BoneNames' has a wrong offset!");

// ScriptStruct SS.DaramaticExtraBattleDataStruct
// 0x0038 (0x0038 - 0x0000)
struct FDaramaticExtraBattleDataStruct final
{
public:
	int32                                         OrderNum;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratDramaticBattleListType                  BattleDataType;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USSDramaticBattleDataRecordAsset*       Item;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           DisplayImage;                                      // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ExplainText;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleTipsDataList       TipsData;                                          // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaramaticExtraBattleDataStruct) == 0x000008, "Wrong alignment on FDaramaticExtraBattleDataStruct");
static_assert(sizeof(FDaramaticExtraBattleDataStruct) == 0x000038, "Wrong size on FDaramaticExtraBattleDataStruct");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, OrderNum) == 0x000000, "Member 'FDaramaticExtraBattleDataStruct::OrderNum' has a wrong offset!");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, BattleDataType) == 0x000004, "Member 'FDaramaticExtraBattleDataStruct::BattleDataType' has a wrong offset!");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, Item) == 0x000008, "Member 'FDaramaticExtraBattleDataStruct::Item' has a wrong offset!");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, DisplayImage) == 0x000010, "Member 'FDaramaticExtraBattleDataStruct::DisplayImage' has a wrong offset!");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, ExplainText) == 0x000018, "Member 'FDaramaticExtraBattleDataStruct::ExplainText' has a wrong offset!");
static_assert(offsetof(FDaramaticExtraBattleDataStruct, TipsData) == 0x000030, "Member 'FDaramaticExtraBattleDataStruct::TipsData' has a wrong offset!");

// ScriptStruct SS.KoratBuffEffectInstance
// 0x0018 (0x0018 - 0x0000)
struct FKoratBuffEffectInstance final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ASSLevelSequenceActor>> LevelSequenceActors;                               // 0x0008(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBuffEffectInstance) == 0x000008, "Wrong alignment on FKoratBuffEffectInstance");
static_assert(sizeof(FKoratBuffEffectInstance) == 0x000018, "Wrong size on FKoratBuffEffectInstance");
static_assert(offsetof(FKoratBuffEffectInstance, LevelSequenceActors) == 0x000008, "Member 'FKoratBuffEffectInstance::LevelSequenceActors' has a wrong offset!");

// ScriptStruct SS.SSCharacterBuffFormDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FSSCharacterBuffFormDataAssetRecord final
{
public:
	class USSBuffFormDataAsset*                   BuffFormData;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterBuffFormDataAssetRecord) == 0x000008, "Wrong alignment on FSSCharacterBuffFormDataAssetRecord");
static_assert(sizeof(FSSCharacterBuffFormDataAssetRecord) == 0x000008, "Wrong size on FSSCharacterBuffFormDataAssetRecord");
static_assert(offsetof(FSSCharacterBuffFormDataAssetRecord, BuffFormData) == 0x000000, "Member 'FSSCharacterBuffFormDataAssetRecord::BuffFormData' has a wrong offset!");

// ScriptStruct SS.SSBuffFormRequest
// 0x000C (0x000C - 0x0000)
struct FSSBuffFormRequest final
{
public:
	struct FKoratBuffFormTypeDataList             BuffForm;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBuffFormRequest) == 0x000004, "Wrong alignment on FSSBuffFormRequest");
static_assert(sizeof(FSSBuffFormRequest) == 0x00000C, "Wrong size on FSSBuffFormRequest");
static_assert(offsetof(FSSBuffFormRequest, BuffForm) == 0x000000, "Member 'FSSBuffFormRequest::BuffForm' has a wrong offset!");

// ScriptStruct SS.SSDramaticImageGenerationCaptureData
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticImageGenerationCaptureData final
{
public:
	TArray<uint8>                                 CaptureBinaryDatas;                                // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticImageGenerationCaptureData) == 0x000008, "Wrong alignment on FSSDramaticImageGenerationCaptureData");
static_assert(sizeof(FSSDramaticImageGenerationCaptureData) == 0x000010, "Wrong size on FSSDramaticImageGenerationCaptureData");
static_assert(offsetof(FSSDramaticImageGenerationCaptureData, CaptureBinaryDatas) == 0x000000, "Member 'FSSDramaticImageGenerationCaptureData::CaptureBinaryDatas' has a wrong offset!");

// ScriptStruct SS.KoratBuffEffectResource
// 0x0158 (0x0158 - 0x0000)
struct alignas(0x08) FKoratBuffEffectResource final
{
public:
	uint8                                         Pad_0[0x158];                                      // 0x0000(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBuffEffectResource) == 0x000008, "Wrong alignment on FKoratBuffEffectResource");
static_assert(sizeof(FKoratBuffEffectResource) == 0x000158, "Wrong size on FKoratBuffEffectResource");

// ScriptStruct SS.SSNetworkData
// 0x0064 (0x0064 - 0x0000)
struct FSSNetworkData final
{
public:
	int32                                         MatchDisconnectionCount;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleRank;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleRankPoint;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleWinStreak;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleMaxWinCount;                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleMaxRankValue;                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSingleRankCharaCount;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                RankMatchSingleCharaName;                          // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamRank;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamRankPoint;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamWinStreak;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamMaxWinCount;                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamMaxRankValue;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamRankCharaCount;                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                RankMatchTeamCharaName;                            // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchBanPenaltyLevel;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchReportPenaltyLevel;                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMatchWinStreak;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMatchMaxWinStreak;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMatchParticipation;                          // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMatchCharaCount;                             // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                PlayerMatchCharaName;                              // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSNetworkData) == 0x000004, "Wrong alignment on FSSNetworkData");
static_assert(sizeof(FSSNetworkData) == 0x000064, "Wrong size on FSSNetworkData");
static_assert(offsetof(FSSNetworkData, MatchDisconnectionCount) == 0x000000, "Member 'FSSNetworkData::MatchDisconnectionCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleRank) == 0x000004, "Member 'FSSNetworkData::RankMatchSingleRank' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleRankPoint) == 0x000008, "Member 'FSSNetworkData::RankMatchSingleRankPoint' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleWinStreak) == 0x00000C, "Member 'FSSNetworkData::RankMatchSingleWinStreak' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleMaxWinCount) == 0x000010, "Member 'FSSNetworkData::RankMatchSingleMaxWinCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleMaxRankValue) == 0x000014, "Member 'FSSNetworkData::RankMatchSingleMaxRankValue' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleRankCharaCount) == 0x000018, "Member 'FSSNetworkData::RankMatchSingleRankCharaCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchSingleCharaName) == 0x00001C, "Member 'FSSNetworkData::RankMatchSingleCharaName' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamRank) == 0x000024, "Member 'FSSNetworkData::RankMatchTeamRank' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamRankPoint) == 0x000028, "Member 'FSSNetworkData::RankMatchTeamRankPoint' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamWinStreak) == 0x00002C, "Member 'FSSNetworkData::RankMatchTeamWinStreak' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamMaxWinCount) == 0x000030, "Member 'FSSNetworkData::RankMatchTeamMaxWinCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamMaxRankValue) == 0x000034, "Member 'FSSNetworkData::RankMatchTeamMaxRankValue' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamRankCharaCount) == 0x000038, "Member 'FSSNetworkData::RankMatchTeamRankCharaCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchTeamCharaName) == 0x00003C, "Member 'FSSNetworkData::RankMatchTeamCharaName' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchBanPenaltyLevel) == 0x000044, "Member 'FSSNetworkData::RankMatchBanPenaltyLevel' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, RankMatchReportPenaltyLevel) == 0x000048, "Member 'FSSNetworkData::RankMatchReportPenaltyLevel' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, PlayerMatchWinStreak) == 0x00004C, "Member 'FSSNetworkData::PlayerMatchWinStreak' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, PlayerMatchMaxWinStreak) == 0x000050, "Member 'FSSNetworkData::PlayerMatchMaxWinStreak' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, PlayerMatchParticipation) == 0x000054, "Member 'FSSNetworkData::PlayerMatchParticipation' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, PlayerMatchCharaCount) == 0x000058, "Member 'FSSNetworkData::PlayerMatchCharaCount' has a wrong offset!");
static_assert(offsetof(FSSNetworkData, PlayerMatchCharaName) == 0x00005C, "Member 'FSSNetworkData::PlayerMatchCharaName' has a wrong offset!");

// ScriptStruct SS.KoratBuffHandle
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FKoratBuffHandle final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBuffHandle) == 0x000004, "Wrong alignment on FKoratBuffHandle");
static_assert(sizeof(FKoratBuffHandle) == 0x00000C, "Wrong size on FKoratBuffHandle");

// ScriptStruct SS.SSMainMenuListWidgetStack
// 0x0038 (0x0038 - 0x0000)
struct FSSMainMenuListWidgetStack final
{
public:
	TArray<class USSMainMenuWidgetFromList*>      Widgets;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class USSMainMenuSubMenu*                     PreviousDisplayedMenu;                             // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USSMainMenuSubMenu*>             DisplayedMenuList;                                 // 0x0018(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 DecidedIndexList;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuListWidgetStack) == 0x000008, "Wrong alignment on FSSMainMenuListWidgetStack");
static_assert(sizeof(FSSMainMenuListWidgetStack) == 0x000038, "Wrong size on FSSMainMenuListWidgetStack");
static_assert(offsetof(FSSMainMenuListWidgetStack, Widgets) == 0x000000, "Member 'FSSMainMenuListWidgetStack::Widgets' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListWidgetStack, PreviousDisplayedMenu) == 0x000010, "Member 'FSSMainMenuListWidgetStack::PreviousDisplayedMenu' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListWidgetStack, DisplayedMenuList) == 0x000018, "Member 'FSSMainMenuListWidgetStack::DisplayedMenuList' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListWidgetStack, DecidedIndexList) == 0x000028, "Member 'FSSMainMenuListWidgetStack::DecidedIndexList' has a wrong offset!");

// ScriptStruct SS.KoratCharacterBuffInfo
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FKoratCharacterBuffInfo final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterBuffInfo) == 0x000008, "Wrong alignment on FKoratCharacterBuffInfo");
static_assert(sizeof(FKoratCharacterBuffInfo) == 0x0000B0, "Wrong size on FKoratCharacterBuffInfo");

// ScriptStruct SS.KoratCharacterSearchParameterChanging
// 0x0028 (0x0028 - 0x0000)
struct FKoratCharacterSearchParameterChanging final
{
public:
	float                                         ViewingTargetLockOnSecScale;                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoSearchRadiusScale;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoSearchLockOnSecScale;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchDistanceScale;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchLockOnSecScale;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraLostSecScale;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EasyFindingScaleByTargetScale;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UKoratSearchParamDataAsset*             EquipSearchParamData;                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterSearchParameterChanging) == 0x000008, "Wrong alignment on FKoratCharacterSearchParameterChanging");
static_assert(sizeof(FKoratCharacterSearchParameterChanging) == 0x000028, "Wrong size on FKoratCharacterSearchParameterChanging");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, ViewingTargetLockOnSecScale) == 0x000000, "Member 'FKoratCharacterSearchParameterChanging::ViewingTargetLockOnSecScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, AutoSearchRadiusScale) == 0x000004, "Member 'FKoratCharacterSearchParameterChanging::AutoSearchRadiusScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, AutoSearchLockOnSecScale) == 0x000008, "Member 'FKoratCharacterSearchParameterChanging::AutoSearchLockOnSecScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, AuraSearchDistanceScale) == 0x00000C, "Member 'FKoratCharacterSearchParameterChanging::AuraSearchDistanceScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, AuraSearchLockOnSecScale) == 0x000010, "Member 'FKoratCharacterSearchParameterChanging::AuraSearchLockOnSecScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, AuraLostSecScale) == 0x000014, "Member 'FKoratCharacterSearchParameterChanging::AuraLostSecScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, EasyFindingScaleByTargetScale) == 0x000018, "Member 'FKoratCharacterSearchParameterChanging::EasyFindingScaleByTargetScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterSearchParameterChanging, EquipSearchParamData) == 0x000020, "Member 'FKoratCharacterSearchParameterChanging::EquipSearchParamData' has a wrong offset!");

// ScriptStruct SS.KoratCharacterForbidParameter
// 0x0011 (0x0011 - 0x0000)
struct FKoratCharacterForbidParameter final
{
public:
	bool                                          bCannotEnergyBullet;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastForteSlot1;                            // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastForteSlot2;                            // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastSkillSlot1;                            // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastSkillSlot2;                            // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastUlt;                                   // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotThrow;                                      // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotEmote;                                      // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotStyleChange;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotNormalFormChange;                           // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotFusion;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotPotara;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotCharacterTaketurns;                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotSparking;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotBlastCombo;                                 // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotCharge;                                     // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotAutoRecoverSPGauge;                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterForbidParameter) == 0x000001, "Wrong alignment on FKoratCharacterForbidParameter");
static_assert(sizeof(FKoratCharacterForbidParameter) == 0x000011, "Wrong size on FKoratCharacterForbidParameter");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotEnergyBullet) == 0x000000, "Member 'FKoratCharacterForbidParameter::bCannotEnergyBullet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastForteSlot1) == 0x000001, "Member 'FKoratCharacterForbidParameter::bCannotBlastForteSlot1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastForteSlot2) == 0x000002, "Member 'FKoratCharacterForbidParameter::bCannotBlastForteSlot2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastSkillSlot1) == 0x000003, "Member 'FKoratCharacterForbidParameter::bCannotBlastSkillSlot1' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastSkillSlot2) == 0x000004, "Member 'FKoratCharacterForbidParameter::bCannotBlastSkillSlot2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastUlt) == 0x000005, "Member 'FKoratCharacterForbidParameter::bCannotBlastUlt' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotThrow) == 0x000006, "Member 'FKoratCharacterForbidParameter::bCannotThrow' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotEmote) == 0x000007, "Member 'FKoratCharacterForbidParameter::bCannotEmote' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotStyleChange) == 0x000008, "Member 'FKoratCharacterForbidParameter::bCannotStyleChange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotNormalFormChange) == 0x000009, "Member 'FKoratCharacterForbidParameter::bCannotNormalFormChange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotFusion) == 0x00000A, "Member 'FKoratCharacterForbidParameter::bCannotFusion' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotPotara) == 0x00000B, "Member 'FKoratCharacterForbidParameter::bCannotPotara' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotCharacterTaketurns) == 0x00000C, "Member 'FKoratCharacterForbidParameter::bCannotCharacterTaketurns' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotSparking) == 0x00000D, "Member 'FKoratCharacterForbidParameter::bCannotSparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotBlastCombo) == 0x00000E, "Member 'FKoratCharacterForbidParameter::bCannotBlastCombo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotCharge) == 0x00000F, "Member 'FKoratCharacterForbidParameter::bCannotCharge' has a wrong offset!");
static_assert(offsetof(FKoratCharacterForbidParameter, bCannotAutoRecoverSPGauge) == 0x000010, "Member 'FKoratCharacterForbidParameter::bCannotAutoRecoverSPGauge' has a wrong offset!");

// ScriptStruct SS.KoratCharacterParameterChanging
// 0x0290 (0x0290 - 0x0000)
struct FKoratCharacterParameterChanging final
{
public:
	float                                         AddLife;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddInitialSP;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoveryScale;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPChargeSpeedScale;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackEnergyGainScale;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingGaugeChargeSpeedScale;                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSparkingGaugeDecreaseSpeedScale;                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingModeGaugeDecreaseSpeedScale;               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastRecoverSpeedScale;                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealPerSec;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealSPPerSec;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushHighSpeedMoveExpendSpScale;                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoverySpeedSuperZCounterScale;             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishingAssaultExpendSpScale;                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletExpendEnergyScale;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortDashSpCostScale;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragonDashSpCostScale;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZBurstDashExpendSpScale;                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedMoveExpendSpScale;                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperHighSpeedMoveExpendSpScale;                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastExpendSpAdd;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrastExpendSpScale;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoExpendBlastSp;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UltimateBlastExpendSpAdd;                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UltimateBrastExpendSpScale;                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoExpendUltimateBlastSp;                          // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddSkillStockCost;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSuperZCounterStockCost;                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStyleChangeStockCost;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddFusionStockCost;                                // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalCombativesDamageScale;                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushDamageScale;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashDamageScale;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboAttackDamageScale;                            // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowDamageScale;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParryDamageScale;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PursuitDamageScale;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushBulletDamageScale;                             // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashBulletDamageScale;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastForteDamageScale;                             // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastDamageScale;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blast1DamageScale;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Blast2DamageScale;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastUltimateDamageScale;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastComboDamageScale;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKoratActionDataList, float>      TargetActionDamageScales;                          // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         GuardCrashSpDamageScale;                           // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboDamageScalingEffectScale;                     // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombativesDamageResist;                            // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyDamageResist;                                // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShaveDamageResist;                                 // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfDamageResist;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructedDamageResist;                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombativesChargeScale;                             // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletChargeScale;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorLevelUp;                                      // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorDataList                    Armor;                                             // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombativesArmorLevelUp;                            // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorDataList                    CombativesArmor;                                   // 0x013C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletArmorLevelUp;                                // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratArmorDataList                    BulletArmor;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorBreakLevelUp;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EKoratActionCategoryType, int32>         ActionCategoryArmorBreakLevelUp;                   // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         AddPursuitBaseLimit;                               // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddPursuitLimitDragonHoming;                       // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddPursuitLimitVanishingAttack;                    // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddPursuitLimitLightningAttack;                    // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushBulletSpeedScale;                              // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRushBulletNum;                                  // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRushBulletLimit;                                // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunReactionRecoverySpeedScale;                    // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunReactionInputRecoverySpeedScale;               // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumbRecoverySpeedScale;                            // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFastAvoidanceInDown;                           // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImitationBuffAvoidance;                           // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerfectAvoidance;                                 // 0x01D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoGuardCrash;                                     // 0x01D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCharacterFlyChangeType                  ChangeCanFly;                                      // 0x01D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmortal;                                         // 0x01D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunglasses;                                       // 0x01D6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuperTough;                                       // 0x01D7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStunWhenEndSparkingAfterUltimate;                 // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowerImpactGaugeUpScale;                           // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashImpactInputTimeReduction;                     // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastImpactChargeScale;                            // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedImpactAddCountUp;                             // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerImpactDamageScale;                            // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashImpactDamageScale;                            // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastImpactDamageScale;                            // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedImpactDamageScale;                            // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeWaitSecondCountUpScale;                      // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeHealMaxAtBenchScale;                           // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeHealPerSecAtBenchScale;                        // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPHealMaxAtBenchScale;                             // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPHealPerSecAtBenchScale;                          // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterSearchParameterChanging SearchParamChanging;                               // 0x0210(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterForbidParameter         ForbidParam;                                       // 0x0238(0x0011)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterMoveParameterChangingSet MovesScale;                                        // 0x024C(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ExParam;                                           // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOverideDP;                                  // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverideDP;                                         // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterParameterChanging) == 0x000008, "Wrong alignment on FKoratCharacterParameterChanging");
static_assert(sizeof(FKoratCharacterParameterChanging) == 0x000290, "Wrong size on FKoratCharacterParameterChanging");
static_assert(offsetof(FKoratCharacterParameterChanging, AddLife) == 0x000000, "Member 'FKoratCharacterParameterChanging::AddLife' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddInitialSP) == 0x000004, "Member 'FKoratCharacterParameterChanging::AddInitialSP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SPAutoRecoveryScale) == 0x000008, "Member 'FKoratCharacterParameterChanging::SPAutoRecoveryScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SPChargeSpeedScale) == 0x00000C, "Member 'FKoratCharacterParameterChanging::SPChargeSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AttackEnergyGainScale) == 0x000010, "Member 'FKoratCharacterParameterChanging::AttackEnergyGainScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SparkingGaugeChargeSpeedScale) == 0x000014, "Member 'FKoratCharacterParameterChanging::SparkingGaugeChargeSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, PreSparkingGaugeDecreaseSpeedScale) == 0x000018, "Member 'FKoratCharacterParameterChanging::PreSparkingGaugeDecreaseSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SparkingModeGaugeDecreaseSpeedScale) == 0x00001C, "Member 'FKoratCharacterParameterChanging::SparkingModeGaugeDecreaseSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastRecoverSpeedScale) == 0x000020, "Member 'FKoratCharacterParameterChanging::BlastRecoverSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, HealPerSec) == 0x000024, "Member 'FKoratCharacterParameterChanging::HealPerSec' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, HealSPPerSec) == 0x000028, "Member 'FKoratCharacterParameterChanging::HealSPPerSec' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, RushHighSpeedMoveExpendSpScale) == 0x00002C, "Member 'FKoratCharacterParameterChanging::RushHighSpeedMoveExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SPAutoRecoverySpeedSuperZCounterScale) == 0x000030, "Member 'FKoratCharacterParameterChanging::SPAutoRecoverySpeedSuperZCounterScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, VanishingAssaultExpendSpScale) == 0x000034, "Member 'FKoratCharacterParameterChanging::VanishingAssaultExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BulletExpendEnergyScale) == 0x000038, "Member 'FKoratCharacterParameterChanging::BulletExpendEnergyScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ShortDashSpCostScale) == 0x00003C, "Member 'FKoratCharacterParameterChanging::ShortDashSpCostScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, DragonDashSpCostScale) == 0x000040, "Member 'FKoratCharacterParameterChanging::DragonDashSpCostScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ZBurstDashExpendSpScale) == 0x000044, "Member 'FKoratCharacterParameterChanging::ZBurstDashExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, HighSpeedMoveExpendSpScale) == 0x000048, "Member 'FKoratCharacterParameterChanging::HighSpeedMoveExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SuperHighSpeedMoveExpendSpScale) == 0x00004C, "Member 'FKoratCharacterParameterChanging::SuperHighSpeedMoveExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastExpendSpAdd) == 0x000050, "Member 'FKoratCharacterParameterChanging::BlastExpendSpAdd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BrastExpendSpScale) == 0x000054, "Member 'FKoratCharacterParameterChanging::BrastExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bNoExpendBlastSp) == 0x000058, "Member 'FKoratCharacterParameterChanging::bNoExpendBlastSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, UltimateBlastExpendSpAdd) == 0x00005C, "Member 'FKoratCharacterParameterChanging::UltimateBlastExpendSpAdd' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, UltimateBrastExpendSpScale) == 0x000060, "Member 'FKoratCharacterParameterChanging::UltimateBrastExpendSpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bNoExpendUltimateBlastSp) == 0x000064, "Member 'FKoratCharacterParameterChanging::bNoExpendUltimateBlastSp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddSkillStockCost) == 0x000068, "Member 'FKoratCharacterParameterChanging::AddSkillStockCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddSuperZCounterStockCost) == 0x00006C, "Member 'FKoratCharacterParameterChanging::AddSuperZCounterStockCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddStyleChangeStockCost) == 0x000070, "Member 'FKoratCharacterParameterChanging::AddStyleChangeStockCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddFusionStockCost) == 0x000074, "Member 'FKoratCharacterParameterChanging::AddFusionStockCost' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, NormalCombativesDamageScale) == 0x000078, "Member 'FKoratCharacterParameterChanging::NormalCombativesDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, RushDamageScale) == 0x00007C, "Member 'FKoratCharacterParameterChanging::RushDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SmashDamageScale) == 0x000080, "Member 'FKoratCharacterParameterChanging::SmashDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ComboAttackDamageScale) == 0x000084, "Member 'FKoratCharacterParameterChanging::ComboAttackDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ThrowDamageScale) == 0x000088, "Member 'FKoratCharacterParameterChanging::ThrowDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ParryDamageScale) == 0x00008C, "Member 'FKoratCharacterParameterChanging::ParryDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, PursuitDamageScale) == 0x000090, "Member 'FKoratCharacterParameterChanging::PursuitDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, RushBulletDamageScale) == 0x000094, "Member 'FKoratCharacterParameterChanging::RushBulletDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SmashBulletDamageScale) == 0x000098, "Member 'FKoratCharacterParameterChanging::SmashBulletDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastForteDamageScale) == 0x00009C, "Member 'FKoratCharacterParameterChanging::BlastForteDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastDamageScale) == 0x0000A0, "Member 'FKoratCharacterParameterChanging::BlastDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, Blast1DamageScale) == 0x0000A4, "Member 'FKoratCharacterParameterChanging::Blast1DamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, Blast2DamageScale) == 0x0000A8, "Member 'FKoratCharacterParameterChanging::Blast2DamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastUltimateDamageScale) == 0x0000AC, "Member 'FKoratCharacterParameterChanging::BlastUltimateDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastComboDamageScale) == 0x0000B0, "Member 'FKoratCharacterParameterChanging::BlastComboDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, TargetActionDamageScales) == 0x0000B8, "Member 'FKoratCharacterParameterChanging::TargetActionDamageScales' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, GuardCrashSpDamageScale) == 0x000108, "Member 'FKoratCharacterParameterChanging::GuardCrashSpDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ComboDamageScalingEffectScale) == 0x00010C, "Member 'FKoratCharacterParameterChanging::ComboDamageScalingEffectScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CombativesDamageResist) == 0x000110, "Member 'FKoratCharacterParameterChanging::CombativesDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, EnergyDamageResist) == 0x000114, "Member 'FKoratCharacterParameterChanging::EnergyDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ShaveDamageResist) == 0x000118, "Member 'FKoratCharacterParameterChanging::ShaveDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SelfDamageResist) == 0x00011C, "Member 'FKoratCharacterParameterChanging::SelfDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, DestructedDamageResist) == 0x000120, "Member 'FKoratCharacterParameterChanging::DestructedDamageResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CombativesChargeScale) == 0x000124, "Member 'FKoratCharacterParameterChanging::CombativesChargeScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BulletChargeScale) == 0x000128, "Member 'FKoratCharacterParameterChanging::BulletChargeScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ArmorLevelUp) == 0x00012C, "Member 'FKoratCharacterParameterChanging::ArmorLevelUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, Armor) == 0x000130, "Member 'FKoratCharacterParameterChanging::Armor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CombativesArmorLevelUp) == 0x000138, "Member 'FKoratCharacterParameterChanging::CombativesArmorLevelUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CombativesArmor) == 0x00013C, "Member 'FKoratCharacterParameterChanging::CombativesArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BulletArmorLevelUp) == 0x000144, "Member 'FKoratCharacterParameterChanging::BulletArmorLevelUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BulletArmor) == 0x000148, "Member 'FKoratCharacterParameterChanging::BulletArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ArmorBreakLevelUp) == 0x000150, "Member 'FKoratCharacterParameterChanging::ArmorBreakLevelUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ActionCategoryArmorBreakLevelUp) == 0x000158, "Member 'FKoratCharacterParameterChanging::ActionCategoryArmorBreakLevelUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddPursuitBaseLimit) == 0x0001A8, "Member 'FKoratCharacterParameterChanging::AddPursuitBaseLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddPursuitLimitDragonHoming) == 0x0001AC, "Member 'FKoratCharacterParameterChanging::AddPursuitLimitDragonHoming' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddPursuitLimitVanishingAttack) == 0x0001B0, "Member 'FKoratCharacterParameterChanging::AddPursuitLimitVanishingAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddPursuitLimitLightningAttack) == 0x0001B4, "Member 'FKoratCharacterParameterChanging::AddPursuitLimitLightningAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, RushBulletSpeedScale) == 0x0001B8, "Member 'FKoratCharacterParameterChanging::RushBulletSpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddRushBulletNum) == 0x0001BC, "Member 'FKoratCharacterParameterChanging::AddRushBulletNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, AddRushBulletLimit) == 0x0001C0, "Member 'FKoratCharacterParameterChanging::AddRushBulletLimit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, StunReactionRecoverySpeedScale) == 0x0001C4, "Member 'FKoratCharacterParameterChanging::StunReactionRecoverySpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, StunReactionInputRecoverySpeedScale) == 0x0001C8, "Member 'FKoratCharacterParameterChanging::StunReactionInputRecoverySpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, NumbRecoverySpeedScale) == 0x0001CC, "Member 'FKoratCharacterParameterChanging::NumbRecoverySpeedScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bCanFastAvoidanceInDown) == 0x0001D0, "Member 'FKoratCharacterParameterChanging::bCanFastAvoidanceInDown' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bImitationBuffAvoidance) == 0x0001D1, "Member 'FKoratCharacterParameterChanging::bImitationBuffAvoidance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bPerfectAvoidance) == 0x0001D2, "Member 'FKoratCharacterParameterChanging::bPerfectAvoidance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bNoGuardCrash) == 0x0001D3, "Member 'FKoratCharacterParameterChanging::bNoGuardCrash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ChangeCanFly) == 0x0001D4, "Member 'FKoratCharacterParameterChanging::ChangeCanFly' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bImmortal) == 0x0001D5, "Member 'FKoratCharacterParameterChanging::bImmortal' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bSunglasses) == 0x0001D6, "Member 'FKoratCharacterParameterChanging::bSunglasses' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bSuperTough) == 0x0001D7, "Member 'FKoratCharacterParameterChanging::bSuperTough' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bStunWhenEndSparkingAfterUltimate) == 0x0001D8, "Member 'FKoratCharacterParameterChanging::bStunWhenEndSparkingAfterUltimate' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, PowerImpactGaugeUpScale) == 0x0001DC, "Member 'FKoratCharacterParameterChanging::PowerImpactGaugeUpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CrashImpactInputTimeReduction) == 0x0001E0, "Member 'FKoratCharacterParameterChanging::CrashImpactInputTimeReduction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastImpactChargeScale) == 0x0001E4, "Member 'FKoratCharacterParameterChanging::BlastImpactChargeScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SpeedImpactAddCountUp) == 0x0001E8, "Member 'FKoratCharacterParameterChanging::SpeedImpactAddCountUp' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, PowerImpactDamageScale) == 0x0001EC, "Member 'FKoratCharacterParameterChanging::PowerImpactDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, CrashImpactDamageScale) == 0x0001F0, "Member 'FKoratCharacterParameterChanging::CrashImpactDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, BlastImpactDamageScale) == 0x0001F4, "Member 'FKoratCharacterParameterChanging::BlastImpactDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SpeedImpactDamageScale) == 0x0001F8, "Member 'FKoratCharacterParameterChanging::SpeedImpactDamageScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ChangeWaitSecondCountUpScale) == 0x0001FC, "Member 'FKoratCharacterParameterChanging::ChangeWaitSecondCountUpScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, LifeHealMaxAtBenchScale) == 0x000200, "Member 'FKoratCharacterParameterChanging::LifeHealMaxAtBenchScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, LifeHealPerSecAtBenchScale) == 0x000204, "Member 'FKoratCharacterParameterChanging::LifeHealPerSecAtBenchScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SPHealMaxAtBenchScale) == 0x000208, "Member 'FKoratCharacterParameterChanging::SPHealMaxAtBenchScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SPHealPerSecAtBenchScale) == 0x00020C, "Member 'FKoratCharacterParameterChanging::SPHealPerSecAtBenchScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, SearchParamChanging) == 0x000210, "Member 'FKoratCharacterParameterChanging::SearchParamChanging' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ForbidParam) == 0x000238, "Member 'FKoratCharacterParameterChanging::ForbidParam' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, MovesScale) == 0x00024C, "Member 'FKoratCharacterParameterChanging::MovesScale' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, ExParam) == 0x000284, "Member 'FKoratCharacterParameterChanging::ExParam' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, bEnableOverideDP) == 0x000288, "Member 'FKoratCharacterParameterChanging::bEnableOverideDP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterParameterChanging, OverideDP) == 0x00028C, "Member 'FKoratCharacterParameterChanging::OverideDP' has a wrong offset!");

// ScriptStruct SS.KoratBuffParameter
// 0x0298 (0x0298 - 0x0000)
struct FKoratBuffParameter final
{
public:
	struct FKoratCharacterParameterChanging       ParameterChanging;                                 // 0x0000(0x0290)(NativeAccessSpecifierPublic)
	bool                                          bNumb;                                             // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchOff;                                        // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293[0x5];                                      // 0x0293(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBuffParameter) == 0x000008, "Wrong alignment on FKoratBuffParameter");
static_assert(sizeof(FKoratBuffParameter) == 0x000298, "Wrong size on FKoratBuffParameter");
static_assert(offsetof(FKoratBuffParameter, ParameterChanging) == 0x000000, "Member 'FKoratBuffParameter::ParameterChanging' has a wrong offset!");
static_assert(offsetof(FKoratBuffParameter, bNumb) == 0x000290, "Member 'FKoratBuffParameter::bNumb' has a wrong offset!");
static_assert(offsetof(FKoratBuffParameter, bSearchOff) == 0x000291, "Member 'FKoratBuffParameter::bSearchOff' has a wrong offset!");
static_assert(offsetof(FKoratBuffParameter, bValid) == 0x000292, "Member 'FKoratBuffParameter::bValid' has a wrong offset!");

// ScriptStruct SS.SSEffectUpdateToonPointScene
// 0x01A0 (0x01A0 - 0x0000)
struct FSSEffectUpdateToonPointScene final
{
public:
	TArray<struct FSSEffectUpdateToonPointLightParam> Params;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSEffectOverrideToonPointLightParam   ParamForOverride;                                  // 0x0010(0x0180)(Edit, EditConst, NativeAccessSpecifierPublic)
	uint8                                         bRequestRemove : 1;                                // 0x0190(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_191[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectUpdateToonPointScene) == 0x000010, "Wrong alignment on FSSEffectUpdateToonPointScene");
static_assert(sizeof(FSSEffectUpdateToonPointScene) == 0x0001A0, "Wrong size on FSSEffectUpdateToonPointScene");
static_assert(offsetof(FSSEffectUpdateToonPointScene, Params) == 0x000000, "Member 'FSSEffectUpdateToonPointScene::Params' has a wrong offset!");
static_assert(offsetof(FSSEffectUpdateToonPointScene, ParamForOverride) == 0x000010, "Member 'FSSEffectUpdateToonPointScene::ParamForOverride' has a wrong offset!");

// ScriptStruct SS.SSCharacterDataCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FSSCharacterDataCameraParameter final
{
public:
	float                                         LookAtNullOffset;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LengthScale;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterDataCameraParameter) == 0x000008, "Wrong alignment on FSSCharacterDataCameraParameter");
static_assert(sizeof(FSSCharacterDataCameraParameter) == 0x000020, "Wrong size on FSSCharacterDataCameraParameter");
static_assert(offsetof(FSSCharacterDataCameraParameter, LookAtNullOffset) == 0x000000, "Member 'FSSCharacterDataCameraParameter::LookAtNullOffset' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataCameraParameter, LengthScale) == 0x000008, "Member 'FSSCharacterDataCameraParameter::LengthScale' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleTitle
// 0x0028 (0x0028 - 0x0000)
struct FKoratDramaticBattleTitle final
{
public:
	struct FKoratBugEatingString                  TitleText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDRMEditPictureDataList           TitleImageData;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMData;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleTitle) == 0x000004, "Wrong alignment on FKoratDramaticBattleTitle");
static_assert(sizeof(FKoratDramaticBattleTitle) == 0x000028, "Wrong size on FKoratDramaticBattleTitle");
static_assert(offsetof(FKoratDramaticBattleTitle, TitleText) == 0x000000, "Member 'FKoratDramaticBattleTitle::TitleText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleTitle, TitleImageData) == 0x000018, "Member 'FKoratDramaticBattleTitle::TitleImageData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleTitle, BGMData) == 0x000020, "Member 'FKoratDramaticBattleTitle::BGMData' has a wrong offset!");

// ScriptStruct SS.SSCharacterCombativesParameter
// 0x3190 (0x3190 - 0x0000)
struct FSSCharacterCombativesParameter final
{
public:
	class USSCombativesDataAsset*                 CombativesData;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionDataAsset*                     ActionData;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointLightIsValid;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLight;                                        // 0x0014(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRimLightIsValid;                                  // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterRimLightData            RimLight;                                          // 0x0038(0x0044)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceHit;                                  // 0x0080(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightHitValid;                             // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightHit;                                     // 0x00B4(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESSHitEffectType                              HitEffectType;                                     // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceHitAfterGaveHitStop;                  // 0x00D8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightHitAfterGaveHitStopValid;             // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightHitAfterGaveHitStop;                     // 0x010C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceHitAfterReceivedHitStop;              // 0x0130(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightHitAfterReceivedHitStopValid;         // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightHitAfterReceivedHitStop;                 // 0x0164(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuard;                                // 0x0188(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardValid;                           // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuard;                                   // 0x01BC(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardAfterGaveHitStop;                // 0x01E0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardAfterGaveHitStopValid;           // 0x0210(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardAfterGaveHitStop;                   // 0x0214(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardAfterReceivedHitStop;            // 0x0238(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardAfterReceivedHitStopValid;       // 0x0268(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardAfterReceivedHitStop;               // 0x026C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceRushOffset;                           // 0x0290(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightRushOffsetValid;                      // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightRushOffset;                              // 0x02C4(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceRushOffsetAfterGaveHitStop;           // 0x02E8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightRushOffsetAfterGaveHitStopValid;      // 0x0318(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightRushOffsetAfterGaveHitStop;              // 0x031C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceCollisionOffset;                      // 0x0340(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightCollisionOffsetValid;                 // 0x0370(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightCollisionOffset;                         // 0x0374(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceCollisionOffsetAfterGaveHitStop;      // 0x0398(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightCollisionOffsetAfterGaveHitStopValid; // 0x03C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightCollisionOffsetAfterGaveHitStop;         // 0x03CC(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceExImpact;                             // 0x03F0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightExImpactValid;                        // 0x0420(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightExImpact;                                // 0x0424(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceExImpactAfterGaveHitStop;             // 0x0448(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightExImpactAfterGaveHitStopValid;        // 0x0478(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightExImpactAfterGaveHitStop;                // 0x047C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardBreak;                           // 0x04A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardBreakValid;                      // 0x04D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardBreak;                              // 0x04D4(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardBreakAfterGaveHitStop;           // 0x04F8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardBreakAfterGaveHitStopValid;      // 0x0528(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardBreakAfterGaveHitStop;              // 0x052C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGuardBreakAfterReceivedHitStop;       // 0x0550(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightGuardBreakAfterReceivedHitStopValid;  // 0x0580(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightGuardBreakAfterReceivedHitStop;          // 0x0584(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceAttackBreak;                          // 0x05A8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightAttackBreakValid;                     // 0x05D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightAttackBreak;                             // 0x05DC(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceAttackBreakAfterGaveHitStop;          // 0x0600(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightAttackBreakAfterGaveHitStopValid;     // 0x0630(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_631[0x3];                                      // 0x0631(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightAttackBreakAfterGaveHitStop;             // 0x0634(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceAttackBreakAfterReceivedHitStop;      // 0x0658(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPointLightAttackBreakAfterReceivedHitStopValid; // 0x0688(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_689[0x3];                                      // 0x0689(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLightAttackBreakAfterReceivedHitStop;         // 0x068C(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterCombativesParameter     Parameter;                                         // 0x06B0(0x00E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              DamageMovement;                                    // 0x0790(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      HitStop;                                           // 0x0A70(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardMovement;                                     // 0x0A88(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      GuardStop;                                         // 0x0D68(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x4];                                      // 0x0D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardBreakMovement;                                // 0x0D80(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      GuardBreakStop;                                    // 0x1060(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1074[0x4];                                     // 0x1074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              AttackBreakMovement;                               // 0x1078(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      AttackBreakStop;                                   // 0x1358(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_136C[0x4];                                     // 0x136C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              RushOffsetMovement;                                // 0x1370(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      RushOffsetStop;                                    // 0x1650(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1664[0x4];                                     // 0x1664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              CollisionOffsetMovement;                           // 0x1668(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      CollisionOffsetStop;                               // 0x1948(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_195C[0x4];                                     // 0x195C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              ExImpactMovement;                                  // 0x1960(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      ExImpactStop;                                      // 0x1C40(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_DamageMovement;                           // 0x1C54(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C55[0x3];                                     // 0x1C55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              DamageMovement_ForGiant;                           // 0x1C58(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_HitStop;                                  // 0x1F38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F39[0x3];                                     // 0x1F39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      HitStop_ForGiant;                                  // 0x1F3C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardMovement;                            // 0x1F50(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F51[0x7];                                     // 0x1F51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardMovement_ForGiant;                            // 0x1F58(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardStop;                                // 0x2238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2239[0x3];                                     // 0x2239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      GuardStop_ForGiant;                                // 0x223C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardBreakMovement;                       // 0x2250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2251[0x7];                                     // 0x2251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardBreakMovement_ForGiant;                       // 0x2258(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardBreakStop;                           // 0x2538(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2539[0x3];                                     // 0x2539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      GuardBreakStop_ForGiant;                           // 0x253C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_AttackBreakMovement;                      // 0x2550(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2551[0x7];                                     // 0x2551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              AttackBreakMovement_ForGiant;                      // 0x2558(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_AttackBreakStop;                          // 0x2838(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2839[0x3];                                     // 0x2839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      AttackBreakStop_ForGiant;                          // 0x283C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_RushOffsetMovement;                       // 0x2850(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2851[0x7];                                     // 0x2851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              RushOffsetMovement_ForGiant;                       // 0x2858(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_RushOffsetStop;                           // 0x2B38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B39[0x3];                                     // 0x2B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      RushOffsetStop_ForGiant;                           // 0x2B3C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_CollisionOffsetMovement;                  // 0x2B50(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B51[0x7];                                     // 0x2B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              CollisionOffsetMovement_ForGiant;                  // 0x2B58(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_CollisionOffsetStop;                      // 0x2E38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E39[0x3];                                     // 0x2E39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      CollisionOffsetStop_ForGiant;                      // 0x2E3C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_ExImpactMovement;                         // 0x2E50(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E51[0x7];                                     // 0x2E51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              ExImpactMovement_ForGiant;                         // 0x2E58(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_ExImpactStop;                             // 0x3138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3139[0x3];                                     // 0x3139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      ExImpactStop_ForGiant;                             // 0x313C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3150[0x40];                                    // 0x3150(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterCombativesParameter) == 0x000008, "Wrong alignment on FSSCharacterCombativesParameter");
static_assert(sizeof(FSSCharacterCombativesParameter) == 0x003190, "Wrong size on FSSCharacterCombativesParameter");
static_assert(offsetof(FSSCharacterCombativesParameter, CombativesData) == 0x000000, "Member 'FSSCharacterCombativesParameter::CombativesData' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, ActionData) == 0x000008, "Member 'FSSCharacterCombativesParameter::ActionData' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bPointLightIsValid) == 0x000010, "Member 'FSSCharacterCombativesParameter::bPointLightIsValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLight) == 0x000014, "Member 'FSSCharacterCombativesParameter::PointLight' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bRimLightIsValid) == 0x000034, "Member 'FSSCharacterCombativesParameter::bRimLightIsValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, RimLight) == 0x000038, "Member 'FSSCharacterCombativesParameter::RimLight' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceHit) == 0x000080, "Member 'FSSCharacterCombativesParameter::LevelSequenceHit' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightHitValid) == 0x0000B0, "Member 'FSSCharacterCombativesParameter::bIsPointLightHitValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightHit) == 0x0000B4, "Member 'FSSCharacterCombativesParameter::PointLightHit' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, HitEffectType) == 0x0000D4, "Member 'FSSCharacterCombativesParameter::HitEffectType' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceHitAfterGaveHitStop) == 0x0000D8, "Member 'FSSCharacterCombativesParameter::LevelSequenceHitAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightHitAfterGaveHitStopValid) == 0x000108, "Member 'FSSCharacterCombativesParameter::bIsPointLightHitAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightHitAfterGaveHitStop) == 0x00010C, "Member 'FSSCharacterCombativesParameter::PointLightHitAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceHitAfterReceivedHitStop) == 0x000130, "Member 'FSSCharacterCombativesParameter::LevelSequenceHitAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightHitAfterReceivedHitStopValid) == 0x000160, "Member 'FSSCharacterCombativesParameter::bIsPointLightHitAfterReceivedHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightHitAfterReceivedHitStop) == 0x000164, "Member 'FSSCharacterCombativesParameter::PointLightHitAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuard) == 0x000188, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuard' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardValid) == 0x0001B8, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuard) == 0x0001BC, "Member 'FSSCharacterCombativesParameter::PointLightGuard' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuardAfterGaveHitStop) == 0x0001E0, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuardAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardAfterGaveHitStopValid) == 0x000210, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuardAfterGaveHitStop) == 0x000214, "Member 'FSSCharacterCombativesParameter::PointLightGuardAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuardAfterReceivedHitStop) == 0x000238, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuardAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardAfterReceivedHitStopValid) == 0x000268, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardAfterReceivedHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuardAfterReceivedHitStop) == 0x00026C, "Member 'FSSCharacterCombativesParameter::PointLightGuardAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceRushOffset) == 0x000290, "Member 'FSSCharacterCombativesParameter::LevelSequenceRushOffset' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightRushOffsetValid) == 0x0002C0, "Member 'FSSCharacterCombativesParameter::bIsPointLightRushOffsetValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightRushOffset) == 0x0002C4, "Member 'FSSCharacterCombativesParameter::PointLightRushOffset' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceRushOffsetAfterGaveHitStop) == 0x0002E8, "Member 'FSSCharacterCombativesParameter::LevelSequenceRushOffsetAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightRushOffsetAfterGaveHitStopValid) == 0x000318, "Member 'FSSCharacterCombativesParameter::bIsPointLightRushOffsetAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightRushOffsetAfterGaveHitStop) == 0x00031C, "Member 'FSSCharacterCombativesParameter::PointLightRushOffsetAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceCollisionOffset) == 0x000340, "Member 'FSSCharacterCombativesParameter::LevelSequenceCollisionOffset' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightCollisionOffsetValid) == 0x000370, "Member 'FSSCharacterCombativesParameter::bIsPointLightCollisionOffsetValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightCollisionOffset) == 0x000374, "Member 'FSSCharacterCombativesParameter::PointLightCollisionOffset' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceCollisionOffsetAfterGaveHitStop) == 0x000398, "Member 'FSSCharacterCombativesParameter::LevelSequenceCollisionOffsetAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightCollisionOffsetAfterGaveHitStopValid) == 0x0003C8, "Member 'FSSCharacterCombativesParameter::bIsPointLightCollisionOffsetAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightCollisionOffsetAfterGaveHitStop) == 0x0003CC, "Member 'FSSCharacterCombativesParameter::PointLightCollisionOffsetAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceExImpact) == 0x0003F0, "Member 'FSSCharacterCombativesParameter::LevelSequenceExImpact' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightExImpactValid) == 0x000420, "Member 'FSSCharacterCombativesParameter::bIsPointLightExImpactValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightExImpact) == 0x000424, "Member 'FSSCharacterCombativesParameter::PointLightExImpact' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceExImpactAfterGaveHitStop) == 0x000448, "Member 'FSSCharacterCombativesParameter::LevelSequenceExImpactAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightExImpactAfterGaveHitStopValid) == 0x000478, "Member 'FSSCharacterCombativesParameter::bIsPointLightExImpactAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightExImpactAfterGaveHitStop) == 0x00047C, "Member 'FSSCharacterCombativesParameter::PointLightExImpactAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuardBreak) == 0x0004A0, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuardBreak' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardBreakValid) == 0x0004D0, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardBreakValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuardBreak) == 0x0004D4, "Member 'FSSCharacterCombativesParameter::PointLightGuardBreak' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuardBreakAfterGaveHitStop) == 0x0004F8, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuardBreakAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardBreakAfterGaveHitStopValid) == 0x000528, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardBreakAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuardBreakAfterGaveHitStop) == 0x00052C, "Member 'FSSCharacterCombativesParameter::PointLightGuardBreakAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceGuardBreakAfterReceivedHitStop) == 0x000550, "Member 'FSSCharacterCombativesParameter::LevelSequenceGuardBreakAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightGuardBreakAfterReceivedHitStopValid) == 0x000580, "Member 'FSSCharacterCombativesParameter::bIsPointLightGuardBreakAfterReceivedHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightGuardBreakAfterReceivedHitStop) == 0x000584, "Member 'FSSCharacterCombativesParameter::PointLightGuardBreakAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceAttackBreak) == 0x0005A8, "Member 'FSSCharacterCombativesParameter::LevelSequenceAttackBreak' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightAttackBreakValid) == 0x0005D8, "Member 'FSSCharacterCombativesParameter::bIsPointLightAttackBreakValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightAttackBreak) == 0x0005DC, "Member 'FSSCharacterCombativesParameter::PointLightAttackBreak' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceAttackBreakAfterGaveHitStop) == 0x000600, "Member 'FSSCharacterCombativesParameter::LevelSequenceAttackBreakAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightAttackBreakAfterGaveHitStopValid) == 0x000630, "Member 'FSSCharacterCombativesParameter::bIsPointLightAttackBreakAfterGaveHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightAttackBreakAfterGaveHitStop) == 0x000634, "Member 'FSSCharacterCombativesParameter::PointLightAttackBreakAfterGaveHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, LevelSequenceAttackBreakAfterReceivedHitStop) == 0x000658, "Member 'FSSCharacterCombativesParameter::LevelSequenceAttackBreakAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsPointLightAttackBreakAfterReceivedHitStopValid) == 0x000688, "Member 'FSSCharacterCombativesParameter::bIsPointLightAttackBreakAfterReceivedHitStopValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, PointLightAttackBreakAfterReceivedHitStop) == 0x00068C, "Member 'FSSCharacterCombativesParameter::PointLightAttackBreakAfterReceivedHitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, Parameter) == 0x0006B0, "Member 'FSSCharacterCombativesParameter::Parameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, DamageMovement) == 0x000790, "Member 'FSSCharacterCombativesParameter::DamageMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, HitStop) == 0x000A70, "Member 'FSSCharacterCombativesParameter::HitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardMovement) == 0x000A88, "Member 'FSSCharacterCombativesParameter::GuardMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardStop) == 0x000D68, "Member 'FSSCharacterCombativesParameter::GuardStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardBreakMovement) == 0x000D80, "Member 'FSSCharacterCombativesParameter::GuardBreakMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardBreakStop) == 0x001060, "Member 'FSSCharacterCombativesParameter::GuardBreakStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, AttackBreakMovement) == 0x001078, "Member 'FSSCharacterCombativesParameter::AttackBreakMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, AttackBreakStop) == 0x001358, "Member 'FSSCharacterCombativesParameter::AttackBreakStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, RushOffsetMovement) == 0x001370, "Member 'FSSCharacterCombativesParameter::RushOffsetMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, RushOffsetStop) == 0x001650, "Member 'FSSCharacterCombativesParameter::RushOffsetStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, CollisionOffsetMovement) == 0x001668, "Member 'FSSCharacterCombativesParameter::CollisionOffsetMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, CollisionOffsetStop) == 0x001948, "Member 'FSSCharacterCombativesParameter::CollisionOffsetStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, ExImpactMovement) == 0x001960, "Member 'FSSCharacterCombativesParameter::ExImpactMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, ExImpactStop) == 0x001C40, "Member 'FSSCharacterCombativesParameter::ExImpactStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_DamageMovement) == 0x001C54, "Member 'FSSCharacterCombativesParameter::bIsGiant_DamageMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, DamageMovement_ForGiant) == 0x001C58, "Member 'FSSCharacterCombativesParameter::DamageMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_HitStop) == 0x001F38, "Member 'FSSCharacterCombativesParameter::bIsGiant_HitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, HitStop_ForGiant) == 0x001F3C, "Member 'FSSCharacterCombativesParameter::HitStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_GuardMovement) == 0x001F50, "Member 'FSSCharacterCombativesParameter::bIsGiant_GuardMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardMovement_ForGiant) == 0x001F58, "Member 'FSSCharacterCombativesParameter::GuardMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_GuardStop) == 0x002238, "Member 'FSSCharacterCombativesParameter::bIsGiant_GuardStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardStop_ForGiant) == 0x00223C, "Member 'FSSCharacterCombativesParameter::GuardStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_GuardBreakMovement) == 0x002250, "Member 'FSSCharacterCombativesParameter::bIsGiant_GuardBreakMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardBreakMovement_ForGiant) == 0x002258, "Member 'FSSCharacterCombativesParameter::GuardBreakMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_GuardBreakStop) == 0x002538, "Member 'FSSCharacterCombativesParameter::bIsGiant_GuardBreakStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, GuardBreakStop_ForGiant) == 0x00253C, "Member 'FSSCharacterCombativesParameter::GuardBreakStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_AttackBreakMovement) == 0x002550, "Member 'FSSCharacterCombativesParameter::bIsGiant_AttackBreakMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, AttackBreakMovement_ForGiant) == 0x002558, "Member 'FSSCharacterCombativesParameter::AttackBreakMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_AttackBreakStop) == 0x002838, "Member 'FSSCharacterCombativesParameter::bIsGiant_AttackBreakStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, AttackBreakStop_ForGiant) == 0x00283C, "Member 'FSSCharacterCombativesParameter::AttackBreakStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_RushOffsetMovement) == 0x002850, "Member 'FSSCharacterCombativesParameter::bIsGiant_RushOffsetMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, RushOffsetMovement_ForGiant) == 0x002858, "Member 'FSSCharacterCombativesParameter::RushOffsetMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_RushOffsetStop) == 0x002B38, "Member 'FSSCharacterCombativesParameter::bIsGiant_RushOffsetStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, RushOffsetStop_ForGiant) == 0x002B3C, "Member 'FSSCharacterCombativesParameter::RushOffsetStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_CollisionOffsetMovement) == 0x002B50, "Member 'FSSCharacterCombativesParameter::bIsGiant_CollisionOffsetMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, CollisionOffsetMovement_ForGiant) == 0x002B58, "Member 'FSSCharacterCombativesParameter::CollisionOffsetMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_CollisionOffsetStop) == 0x002E38, "Member 'FSSCharacterCombativesParameter::bIsGiant_CollisionOffsetStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, CollisionOffsetStop_ForGiant) == 0x002E3C, "Member 'FSSCharacterCombativesParameter::CollisionOffsetStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_ExImpactMovement) == 0x002E50, "Member 'FSSCharacterCombativesParameter::bIsGiant_ExImpactMovement' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, ExImpactMovement_ForGiant) == 0x002E58, "Member 'FSSCharacterCombativesParameter::ExImpactMovement_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, bIsGiant_ExImpactStop) == 0x003138, "Member 'FSSCharacterCombativesParameter::bIsGiant_ExImpactStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesParameter, ExImpactStop_ForGiant) == 0x00313C, "Member 'FSSCharacterCombativesParameter::ExImpactStop_ForGiant' has a wrong offset!");

// ScriptStruct SS.SSMainMenuFocusChangeCache
// 0x0008 (0x0008 - 0x0000)
struct FSSMainMenuFocusChangeCache final
{
public:
	EMainMenuSceneArea                            Area;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubSceneIndex;                                     // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuFocusChangeCache) == 0x000004, "Wrong alignment on FSSMainMenuFocusChangeCache");
static_assert(sizeof(FSSMainMenuFocusChangeCache) == 0x000008, "Wrong size on FSSMainMenuFocusChangeCache");
static_assert(offsetof(FSSMainMenuFocusChangeCache, Area) == 0x000000, "Member 'FSSMainMenuFocusChangeCache::Area' has a wrong offset!");
static_assert(offsetof(FSSMainMenuFocusChangeCache, SubSceneIndex) == 0x000004, "Member 'FSSMainMenuFocusChangeCache::SubSceneIndex' has a wrong offset!");

// ScriptStruct SS.SSCharacterCombativesRecord
// 0x0050 (0x0050 - 0x0000)
struct FSSCharacterCombativesRecord final
{
public:
	TMap<struct FKoratCombativesKeyDataList, struct FSSCharacterCombativesParameter> AdditionalCombatives;                              // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterCombativesRecord) == 0x000008, "Wrong alignment on FSSCharacterCombativesRecord");
static_assert(sizeof(FSSCharacterCombativesRecord) == 0x000050, "Wrong size on FSSCharacterCombativesRecord");
static_assert(offsetof(FSSCharacterCombativesRecord, AdditionalCombatives) == 0x000000, "Member 'FSSCharacterCombativesRecord::AdditionalCombatives' has a wrong offset!");

// ScriptStruct SS.SSCharacterCombativesDataAssetRecordParamAdditional
// 0x0028 (0x0028 - 0x0000)
struct FSSCharacterCombativesDataAssetRecordParamAdditional final
{
public:
	TArray<struct FSSCharacterCombativesDesignatedData> DesignatedDatas;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USSCombativesDataAsset*                 Parameter;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesSubDataAsset*              SubParameter;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesVisualDataAsset*           Visual;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterCombativesDataAssetRecordParamAdditional) == 0x000008, "Wrong alignment on FSSCharacterCombativesDataAssetRecordParamAdditional");
static_assert(sizeof(FSSCharacterCombativesDataAssetRecordParamAdditional) == 0x000028, "Wrong size on FSSCharacterCombativesDataAssetRecordParamAdditional");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParamAdditional, DesignatedDatas) == 0x000000, "Member 'FSSCharacterCombativesDataAssetRecordParamAdditional::DesignatedDatas' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParamAdditional, Parameter) == 0x000010, "Member 'FSSCharacterCombativesDataAssetRecordParamAdditional::Parameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParamAdditional, SubParameter) == 0x000018, "Member 'FSSCharacterCombativesDataAssetRecordParamAdditional::SubParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParamAdditional, Visual) == 0x000020, "Member 'FSSCharacterCombativesDataAssetRecordParamAdditional::Visual' has a wrong offset!");

// ScriptStruct SS.EndingMenuStruct
// 0x0018 (0x0018 - 0x0000)
struct FEndingMenuStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SSMenu;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEndingMenuManager*                   Menu;                                              // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndingMenuStruct) == 0x000008, "Wrong alignment on FEndingMenuStruct");
static_assert(sizeof(FEndingMenuStruct) == 0x000018, "Wrong size on FEndingMenuStruct");
static_assert(offsetof(FEndingMenuStruct, SSMenu) == 0x000008, "Member 'FEndingMenuStruct::SSMenu' has a wrong offset!");
static_assert(offsetof(FEndingMenuStruct, Menu) == 0x000010, "Member 'FEndingMenuStruct::Menu' has a wrong offset!");

// ScriptStruct SS.SSCharacterCombativesDataAssetRecordParam
// 0x0068 (0x0068 - 0x0000)
struct FSSCharacterCombativesDataAssetRecordParam final
{
public:
	class USSCombativesDataAsset*                 Parameter;                                         // 0x0000(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesSubDataAsset*              SubParameter;                                      // 0x0008(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCombativesVisualDataAsset*           Visual;                                            // 0x0010(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCombativesKeyDataList, struct FSSCharacterCombativesDataAssetRecordParamAdditional> AdditionalCombatives;                              // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterCombativesDataAssetRecordParam) == 0x000008, "Wrong alignment on FSSCharacterCombativesDataAssetRecordParam");
static_assert(sizeof(FSSCharacterCombativesDataAssetRecordParam) == 0x000068, "Wrong size on FSSCharacterCombativesDataAssetRecordParam");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParam, Parameter) == 0x000000, "Member 'FSSCharacterCombativesDataAssetRecordParam::Parameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParam, SubParameter) == 0x000008, "Member 'FSSCharacterCombativesDataAssetRecordParam::SubParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParam, Visual) == 0x000010, "Member 'FSSCharacterCombativesDataAssetRecordParam::Visual' has a wrong offset!");
static_assert(offsetof(FSSCharacterCombativesDataAssetRecordParam, AdditionalCombatives) == 0x000018, "Member 'FSSCharacterCombativesDataAssetRecordParam::AdditionalCombatives' has a wrong offset!");

// ScriptStruct SS.AdditionalBlastData
// 0x0020 (0x0020 - 0x0000)
struct FAdditionalBlastData final
{
public:
	EKoratBlastSlotType                           Slot;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USSBlastForteDataAsset*                 ForteData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastSkillDataAsset*                 SkillData;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastUltimateDataAsset*              UltimateData;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalBlastData) == 0x000008, "Wrong alignment on FAdditionalBlastData");
static_assert(sizeof(FAdditionalBlastData) == 0x000020, "Wrong size on FAdditionalBlastData");
static_assert(offsetof(FAdditionalBlastData, Slot) == 0x000000, "Member 'FAdditionalBlastData::Slot' has a wrong offset!");
static_assert(offsetof(FAdditionalBlastData, ForteData) == 0x000008, "Member 'FAdditionalBlastData::ForteData' has a wrong offset!");
static_assert(offsetof(FAdditionalBlastData, SkillData) == 0x000010, "Member 'FAdditionalBlastData::SkillData' has a wrong offset!");
static_assert(offsetof(FAdditionalBlastData, UltimateData) == 0x000018, "Member 'FAdditionalBlastData::UltimateData' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataUIAssets
// 0x0098 (0x0098 - 0x0000)
struct FKoratCharacterDataUIAssets final
{
public:
	TSoftObjectPtr<class UTexture2D>              FaceChip1P;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChip2P;                                        // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceChipCharacterSelect;                           // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratBattleSetupTransitionDataAsset*   BattleSetupData;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataUIAssets) == 0x000008, "Wrong alignment on FKoratCharacterDataUIAssets");
static_assert(sizeof(FKoratCharacterDataUIAssets) == 0x000098, "Wrong size on FKoratCharacterDataUIAssets");
static_assert(offsetof(FKoratCharacterDataUIAssets, FaceChip1P) == 0x000000, "Member 'FKoratCharacterDataUIAssets::FaceChip1P' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUIAssets, FaceChip2P) == 0x000030, "Member 'FKoratCharacterDataUIAssets::FaceChip2P' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUIAssets, FaceChipCharacterSelect) == 0x000060, "Member 'FKoratCharacterDataUIAssets::FaceChipCharacterSelect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUIAssets, BattleSetupData) == 0x000090, "Member 'FKoratCharacterDataUIAssets::BattleSetupData' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUISelectHistory
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSDramaticBattleCutEditorInitialSelectUISelectHistory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedIndex;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUISelectHistory) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUISelectHistory");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUISelectHistory) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUISelectHistory");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUISelectHistory, SelectedIndex) == 0x000008, "Member 'FSSDramaticBattleCutEditorInitialSelectUISelectHistory::SelectedIndex' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataCommonAssets
// 0x0160 (0x0160 - 0x0000)
struct FKoratCharacterDataCommonAssets final
{
public:
	class USSNumericDataAsset*                    NumericData;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSMovementDataAsset*                   MovementData;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSStepsDataAsset*                      StepsData;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonDashDataAsset*                 DragonDashData;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDragonHomingDataAsset*               DragonHomingData;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSZBurstDashDataAsset*                 ZBurstDashData;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSRevengeDashDataAsset*                RevengeDashData;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSAuraDataAsset*                       AuraData;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSAuraAssignDataAsset*                 AuraAssignData;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSOutlineDataAsset*                    OutlineData;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSChargeDataAsset*                     ChargeData;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSFormChangeDataAsset*                 FormChangeData;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratArmorLevelDataAsset*              ArmorLevelData;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCharacterCombativesDataAsset*        CombativesData;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratReplaceTransitionActionDataAsset* IndividualReplaceTransitionActionData;             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastForteDataAsset*                 BlastForte1Data;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastForteDataAsset*                 BlastForte2Data;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastSkillDataAsset*                 BlastSkill1Data;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastSkillDataAsset*                 BlastSkill2Data;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastUltimateDataAsset*              BlastUltimateData;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratBlastActionDataList, struct FAdditionalBlastData> AdditionalBlastData;                               // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USSBulletSettingDataAsset*              BulletSettingData;                                 // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletVisualDataAsset*               BulletVisualData;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCameraDataAsset*                     CameraData;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSActionEffectDataAsset*               EffectActionData;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEffectHighSpeedMoveDataAsset*        EffectHighSpeedMoveData;                           // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSAnnounceDataAsset*                   AnnounceData;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSScreenDataAsset*                     ScreenData;                                        // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDashUpDownDataAsset*                 DashUpDownData;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratSearchParamDataAsset*             SearchParamData;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCharacterBuffDataAsset*           BuffData;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCharacterAutoUpdateDataAsset*     AutoUpdateData;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEyeInformationDataAsset*             EyeInformationData;                                // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCharacterBuffFormDataAsset*          BuffFormData;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSCharacterSubtitlesDataAsset*         SubtitlesData;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataCommonAssets) == 0x000008, "Wrong alignment on FKoratCharacterDataCommonAssets");
static_assert(sizeof(FKoratCharacterDataCommonAssets) == 0x000160, "Wrong size on FKoratCharacterDataCommonAssets");
static_assert(offsetof(FKoratCharacterDataCommonAssets, NumericData) == 0x000000, "Member 'FKoratCharacterDataCommonAssets::NumericData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, MovementData) == 0x000008, "Member 'FKoratCharacterDataCommonAssets::MovementData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, StepsData) == 0x000010, "Member 'FKoratCharacterDataCommonAssets::StepsData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, DragonDashData) == 0x000018, "Member 'FKoratCharacterDataCommonAssets::DragonDashData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, DragonHomingData) == 0x000020, "Member 'FKoratCharacterDataCommonAssets::DragonHomingData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, ZBurstDashData) == 0x000028, "Member 'FKoratCharacterDataCommonAssets::ZBurstDashData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, RevengeDashData) == 0x000030, "Member 'FKoratCharacterDataCommonAssets::RevengeDashData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, AuraData) == 0x000038, "Member 'FKoratCharacterDataCommonAssets::AuraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, AuraAssignData) == 0x000040, "Member 'FKoratCharacterDataCommonAssets::AuraAssignData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, OutlineData) == 0x000048, "Member 'FKoratCharacterDataCommonAssets::OutlineData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, ChargeData) == 0x000050, "Member 'FKoratCharacterDataCommonAssets::ChargeData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, FormChangeData) == 0x000058, "Member 'FKoratCharacterDataCommonAssets::FormChangeData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, ArmorLevelData) == 0x000060, "Member 'FKoratCharacterDataCommonAssets::ArmorLevelData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, CombativesData) == 0x000068, "Member 'FKoratCharacterDataCommonAssets::CombativesData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, IndividualReplaceTransitionActionData) == 0x000070, "Member 'FKoratCharacterDataCommonAssets::IndividualReplaceTransitionActionData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BlastForte1Data) == 0x000078, "Member 'FKoratCharacterDataCommonAssets::BlastForte1Data' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BlastForte2Data) == 0x000080, "Member 'FKoratCharacterDataCommonAssets::BlastForte2Data' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BlastSkill1Data) == 0x000088, "Member 'FKoratCharacterDataCommonAssets::BlastSkill1Data' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BlastSkill2Data) == 0x000090, "Member 'FKoratCharacterDataCommonAssets::BlastSkill2Data' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BlastUltimateData) == 0x000098, "Member 'FKoratCharacterDataCommonAssets::BlastUltimateData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, AdditionalBlastData) == 0x0000A0, "Member 'FKoratCharacterDataCommonAssets::AdditionalBlastData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BulletSettingData) == 0x0000F0, "Member 'FKoratCharacterDataCommonAssets::BulletSettingData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BulletVisualData) == 0x0000F8, "Member 'FKoratCharacterDataCommonAssets::BulletVisualData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, CameraData) == 0x000100, "Member 'FKoratCharacterDataCommonAssets::CameraData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, EffectActionData) == 0x000108, "Member 'FKoratCharacterDataCommonAssets::EffectActionData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, EffectHighSpeedMoveData) == 0x000110, "Member 'FKoratCharacterDataCommonAssets::EffectHighSpeedMoveData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, AnnounceData) == 0x000118, "Member 'FKoratCharacterDataCommonAssets::AnnounceData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, ScreenData) == 0x000120, "Member 'FKoratCharacterDataCommonAssets::ScreenData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, DashUpDownData) == 0x000128, "Member 'FKoratCharacterDataCommonAssets::DashUpDownData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, SearchParamData) == 0x000130, "Member 'FKoratCharacterDataCommonAssets::SearchParamData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BuffData) == 0x000138, "Member 'FKoratCharacterDataCommonAssets::BuffData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, AutoUpdateData) == 0x000140, "Member 'FKoratCharacterDataCommonAssets::AutoUpdateData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, EyeInformationData) == 0x000148, "Member 'FKoratCharacterDataCommonAssets::EyeInformationData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, BuffFormData) == 0x000150, "Member 'FKoratCharacterDataCommonAssets::BuffFormData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCommonAssets, SubtitlesData) == 0x000158, "Member 'FKoratCharacterDataCommonAssets::SubtitlesData' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataFormChangeParameter
// 0x0078 (0x0078 - 0x0000)
struct FKoratCharacterDataFormChangeParameter final
{
public:
	struct FKoratCharacterDataList                ChangeCharacter;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepCostumeFlg;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepCostumeID;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CostumeDamageFlg;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConsumeBlastStock;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRecovery;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratStyleChangeSPRecoveryMode               StyleChangeSPRecoveryMode;                         // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSUnionSupportCharacter>       UnionSupportCharacters;                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataChangeCharacterActionDataList ChangeCharacterActinData;                          // 0x0030(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EKoratSafeSpawnAreaSize                       SafeSpawnAreaSize;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataFormChangeParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataFormChangeParameter");
static_assert(sizeof(FKoratCharacterDataFormChangeParameter) == 0x000078, "Wrong size on FKoratCharacterDataFormChangeParameter");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, ChangeCharacter) == 0x000000, "Member 'FKoratCharacterDataFormChangeParameter::ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, KeepCostumeFlg) == 0x000008, "Member 'FKoratCharacterDataFormChangeParameter::KeepCostumeFlg' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, KeepCostumeID) == 0x000009, "Member 'FKoratCharacterDataFormChangeParameter::KeepCostumeID' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, CostumeDamageFlg) == 0x00000A, "Member 'FKoratCharacterDataFormChangeParameter::CostumeDamageFlg' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, ConsumeBlastStock) == 0x00000C, "Member 'FKoratCharacterDataFormChangeParameter::ConsumeBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, HpRecovery) == 0x000010, "Member 'FKoratCharacterDataFormChangeParameter::HpRecovery' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, StyleChangeSPRecoveryMode) == 0x000014, "Member 'FKoratCharacterDataFormChangeParameter::StyleChangeSPRecoveryMode' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, CoolTime) == 0x000018, "Member 'FKoratCharacterDataFormChangeParameter::CoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, UnionSupportCharacters) == 0x000020, "Member 'FKoratCharacterDataFormChangeParameter::UnionSupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, ChangeCharacterActinData) == 0x000030, "Member 'FKoratCharacterDataFormChangeParameter::ChangeCharacterActinData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFormChangeParameter, SafeSpawnAreaSize) == 0x000070, "Member 'FKoratCharacterDataFormChangeParameter::SafeSpawnAreaSize' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataFusionParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratCharacterDataFusionParameter final
{
public:
	struct FKoratCharacterDataList                ChangeCharacter;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeBlastStock;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRecovery;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMaxHP;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        SubCharacters;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSUnionSupportCharacter>       UnionSupportCharacters;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        FusionCharacters;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataChangeCharacterActionDataList ChangeCharacterActinData;                          // 0x0048(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        ForbitChangeCharacters;                            // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CostumeDamageFlg;                                  // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataFusionParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataFusionParameter");
static_assert(sizeof(FKoratCharacterDataFusionParameter) == 0x0000A0, "Wrong size on FKoratCharacterDataFusionParameter");
static_assert(offsetof(FKoratCharacterDataFusionParameter, ChangeCharacter) == 0x000000, "Member 'FKoratCharacterDataFusionParameter::ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, ConsumeBlastStock) == 0x000008, "Member 'FKoratCharacterDataFusionParameter::ConsumeBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, HpRecovery) == 0x00000C, "Member 'FKoratCharacterDataFusionParameter::HpRecovery' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, AddMaxHP) == 0x000010, "Member 'FKoratCharacterDataFusionParameter::AddMaxHP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, CoolTime) == 0x000014, "Member 'FKoratCharacterDataFusionParameter::CoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, SubCharacters) == 0x000018, "Member 'FKoratCharacterDataFusionParameter::SubCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, UnionSupportCharacters) == 0x000028, "Member 'FKoratCharacterDataFusionParameter::UnionSupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, FusionCharacters) == 0x000038, "Member 'FKoratCharacterDataFusionParameter::FusionCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, ChangeCharacterActinData) == 0x000048, "Member 'FKoratCharacterDataFusionParameter::ChangeCharacterActinData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, ForbitChangeCharacters) == 0x000088, "Member 'FKoratCharacterDataFusionParameter::ForbitChangeCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataFusionParameter, CostumeDamageFlg) == 0x000098, "Member 'FKoratCharacterDataFusionParameter::CostumeDamageFlg' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataPotaraParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKoratCharacterDataPotaraParameter final
{
public:
	struct FKoratCharacterDataList                ChangeCharacter;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeBlastStock;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRecovery;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMaxHP;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        SubCharacters;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSUnionSupportCharacter>       UnionSupportCharacters;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        PotaraCharacters;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataChangeCharacterActionDataList ChangeCharacterActinData;                          // 0x0048(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        ForbitChangeCharacters;                            // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CostumeDamageFlg;                                  // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataPotaraParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataPotaraParameter");
static_assert(sizeof(FKoratCharacterDataPotaraParameter) == 0x0000A0, "Wrong size on FKoratCharacterDataPotaraParameter");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, ChangeCharacter) == 0x000000, "Member 'FKoratCharacterDataPotaraParameter::ChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, ConsumeBlastStock) == 0x000008, "Member 'FKoratCharacterDataPotaraParameter::ConsumeBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, HpRecovery) == 0x00000C, "Member 'FKoratCharacterDataPotaraParameter::HpRecovery' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, AddMaxHP) == 0x000010, "Member 'FKoratCharacterDataPotaraParameter::AddMaxHP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, CoolTime) == 0x000014, "Member 'FKoratCharacterDataPotaraParameter::CoolTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, SubCharacters) == 0x000018, "Member 'FKoratCharacterDataPotaraParameter::SubCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, UnionSupportCharacters) == 0x000028, "Member 'FKoratCharacterDataPotaraParameter::UnionSupportCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, PotaraCharacters) == 0x000038, "Member 'FKoratCharacterDataPotaraParameter::PotaraCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, ChangeCharacterActinData) == 0x000048, "Member 'FKoratCharacterDataPotaraParameter::ChangeCharacterActinData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, ForbitChangeCharacters) == 0x000088, "Member 'FKoratCharacterDataPotaraParameter::ForbitChangeCharacters' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataPotaraParameter, CostumeDamageFlg) == 0x000098, "Member 'FKoratCharacterDataPotaraParameter::CostumeDamageFlg' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataBattleAssets
// 0x0098 (0x0098 - 0x0000)
struct FKoratCharacterDataBattleAssets final
{
public:
	TSoftClassPtr<class UClass>                   CameraBlueprint;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DifferentCostumeIDBeforeChangeCharacter;           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataFormChangeParameter> FormChange;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataFusionParameter> Fusion;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataPotaraParameter> Potara;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          DuringInvincibilityPlayLevelSequence;              // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataBattleAssets) == 0x000008, "Wrong alignment on FKoratCharacterDataBattleAssets");
static_assert(sizeof(FKoratCharacterDataBattleAssets) == 0x000098, "Wrong size on FKoratCharacterDataBattleAssets");
static_assert(offsetof(FKoratCharacterDataBattleAssets, CameraBlueprint) == 0x000000, "Member 'FKoratCharacterDataBattleAssets::CameraBlueprint' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBattleAssets, DifferentCostumeIDBeforeChangeCharacter) == 0x000030, "Member 'FKoratCharacterDataBattleAssets::DifferentCostumeIDBeforeChangeCharacter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBattleAssets, FormChange) == 0x000038, "Member 'FKoratCharacterDataBattleAssets::FormChange' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBattleAssets, Fusion) == 0x000048, "Member 'FKoratCharacterDataBattleAssets::Fusion' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBattleAssets, Potara) == 0x000058, "Member 'FKoratCharacterDataBattleAssets::Potara' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBattleAssets, DuringInvincibilityPlayLevelSequence) == 0x000068, "Member 'FKoratCharacterDataBattleAssets::DuringInvincibilityPlayLevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratDramaticKpiCharaData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FKoratDramaticKpiCharaData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticKpiCharaData) == 0x000008, "Wrong alignment on FKoratDramaticKpiCharaData");
static_assert(sizeof(FKoratDramaticKpiCharaData) == 0x000090, "Wrong size on FKoratDramaticKpiCharaData");

// ScriptStruct SS.KoratCharacterDataSubInstanceAsset
// 0x0098 (0x0098 - 0x0000)
struct FKoratCharacterDataSubInstanceAsset final
{
public:
	struct FKoratSubInstanceTagDataList           Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstance;                                      // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstanceForSupport;                            // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstanceForEventUI;                            // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataSubInstanceAsset) == 0x000008, "Wrong alignment on FKoratCharacterDataSubInstanceAsset");
static_assert(sizeof(FKoratCharacterDataSubInstanceAsset) == 0x000098, "Wrong size on FKoratCharacterDataSubInstanceAsset");
static_assert(offsetof(FKoratCharacterDataSubInstanceAsset, Key) == 0x000000, "Member 'FKoratCharacterDataSubInstanceAsset::Key' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSubInstanceAsset, AnimInstance) == 0x000008, "Member 'FKoratCharacterDataSubInstanceAsset::AnimInstance' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSubInstanceAsset, AnimInstanceForSupport) == 0x000038, "Member 'FKoratCharacterDataSubInstanceAsset::AnimInstanceForSupport' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataSubInstanceAsset, AnimInstanceForEventUI) == 0x000068, "Member 'FKoratCharacterDataSubInstanceAsset::AnimInstanceForEventUI' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataStorySettingParameter
// 0x0068 (0x0068 - 0x0000)
struct FKoratCharacterDataStorySettingParameter final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestroyedPower;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterTypeDataList            CharacterType;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratSeriesTitleDataList              SeriesTitle;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratSeriesTitleDataList>      SeriesTitleList;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratSpeciesDataList>          Species;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterAttributeTagDataList> CharacterAttributeTagData;                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EKoratCharacterGenderType                     Gender;                                            // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        SamePersons;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterGroupDataList           Group;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataStorySettingParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataStorySettingParameter");
static_assert(sizeof(FKoratCharacterDataStorySettingParameter) == 0x000068, "Wrong size on FKoratCharacterDataStorySettingParameter");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, SortId) == 0x000000, "Member 'FKoratCharacterDataStorySettingParameter::SortId' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, DestroyedPower) == 0x000004, "Member 'FKoratCharacterDataStorySettingParameter::DestroyedPower' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, CharacterType) == 0x000008, "Member 'FKoratCharacterDataStorySettingParameter::CharacterType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, SeriesTitle) == 0x000010, "Member 'FKoratCharacterDataStorySettingParameter::SeriesTitle' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, SeriesTitleList) == 0x000018, "Member 'FKoratCharacterDataStorySettingParameter::SeriesTitleList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, Species) == 0x000028, "Member 'FKoratCharacterDataStorySettingParameter::Species' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, CharacterAttributeTagData) == 0x000038, "Member 'FKoratCharacterDataStorySettingParameter::CharacterAttributeTagData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, Gender) == 0x000048, "Member 'FKoratCharacterDataStorySettingParameter::Gender' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, SamePersons) == 0x000050, "Member 'FKoratCharacterDataStorySettingParameter::SamePersons' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataStorySettingParameter, Group) == 0x000060, "Member 'FKoratCharacterDataStorySettingParameter::Group' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataNameInfo
// 0x0060 (0x0060 - 0x0000)
struct FKoratCharacterDataNameInfo final
{
public:
	class FText                                   FullName;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortName;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TitleName;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataNameInfo) == 0x000008, "Wrong alignment on FKoratCharacterDataNameInfo");
static_assert(sizeof(FKoratCharacterDataNameInfo) == 0x000060, "Wrong size on FKoratCharacterDataNameInfo");
static_assert(offsetof(FKoratCharacterDataNameInfo, FullName) == 0x000000, "Member 'FKoratCharacterDataNameInfo::FullName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataNameInfo, ShortName) == 0x000018, "Member 'FKoratCharacterDataNameInfo::ShortName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataNameInfo, TitleName) == 0x000030, "Member 'FKoratCharacterDataNameInfo::TitleName' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataNameInfo, EventName) == 0x000048, "Member 'FKoratCharacterDataNameInfo::EventName' has a wrong offset!");

// ScriptStruct SS.SSCriMediaPlayerSetupParameter
// 0x0048 (0x0048 - 0x0000)
struct FSSCriMediaPlayerSetupParameter final
{
public:
	class UManaTexture*                           ManaTextureA;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaTexture*                           ManaTextureB;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialParameterNameTextures;                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MaterialParameterNameAlpha;                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCriMediaPlayerSetupParameter) == 0x000008, "Wrong alignment on FSSCriMediaPlayerSetupParameter");
static_assert(sizeof(FSSCriMediaPlayerSetupParameter) == 0x000048, "Wrong size on FSSCriMediaPlayerSetupParameter");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, ManaTextureA) == 0x000000, "Member 'FSSCriMediaPlayerSetupParameter::ManaTextureA' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, ManaTextureB) == 0x000008, "Member 'FSSCriMediaPlayerSetupParameter::ManaTextureB' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, DynamicMaterial) == 0x000010, "Member 'FSSCriMediaPlayerSetupParameter::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, MeshComponent) == 0x000018, "Member 'FSSCriMediaPlayerSetupParameter::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, MaterialInterface) == 0x000020, "Member 'FSSCriMediaPlayerSetupParameter::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, Image) == 0x000028, "Member 'FSSCriMediaPlayerSetupParameter::Image' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, MaterialParameterNameTextures) == 0x000030, "Member 'FSSCriMediaPlayerSetupParameter::MaterialParameterNameTextures' has a wrong offset!");
static_assert(offsetof(FSSCriMediaPlayerSetupParameter, MaterialParameterNameAlpha) == 0x000040, "Member 'FSSCriMediaPlayerSetupParameter::MaterialParameterNameAlpha' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataCostumeParameter
// 0x0058 (0x0058 - 0x0000)
struct FKoratCharacterDataCostumeParameter final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataModelParameter      FineModel;                                         // 0x0008(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataModelParameter> DamagedModels;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataCostumeParameter) == 0x000008, "Wrong alignment on FKoratCharacterDataCostumeParameter");
static_assert(sizeof(FKoratCharacterDataCostumeParameter) == 0x000058, "Wrong size on FKoratCharacterDataCostumeParameter");
static_assert(offsetof(FKoratCharacterDataCostumeParameter, Key) == 0x000000, "Member 'FKoratCharacterDataCostumeParameter::Key' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCostumeParameter, FineModel) == 0x000008, "Member 'FKoratCharacterDataCostumeParameter::FineModel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataCostumeParameter, DamagedModels) == 0x000048, "Member 'FKoratCharacterDataCostumeParameter::DamagedModels' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataActionFlag
// 0x002A (0x002A - 0x0000)
struct FKoratCharacterDataActionFlag final
{
public:
	bool                                          Cannon;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Explosion;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MidAirKick;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnergyWave;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RollingHammer;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StepIn;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RushIn;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RushHighSpeedMovement;                             // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DashJumpEnergyBullet;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JumpSmashEnergyBullet;                             // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RepelBullet;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlowBrake;                                         // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SonicSway;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParryPursuit;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LiftStrike;                                        // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrandSlash;                                        // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VanishingAttack;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightningAttack;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BurstAttack;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BurstMeteor;                                       // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BurstSmash;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BurstRush;                                         // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DragonTornado;                                     // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeavyCrash;                                        // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DawnThrow;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThrowEscape;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CannonCombo;                                       // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpiralSlash;                                       // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RollingHurricane;                                  // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PowerPress;                                        // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnergyStorm;                                       // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriAttack;                                         // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AirRush;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaStorm;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExplosionCombo;                                    // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SparkingRush;                                      // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevengeCounter;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DashRising;                                        // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DashBlow;                                          // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuperZCounter;                                     // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlastRepel;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DragonHoming;                                      // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataActionFlag) == 0x000001, "Wrong alignment on FKoratCharacterDataActionFlag");
static_assert(sizeof(FKoratCharacterDataActionFlag) == 0x00002A, "Wrong size on FKoratCharacterDataActionFlag");
static_assert(offsetof(FKoratCharacterDataActionFlag, Cannon) == 0x000000, "Member 'FKoratCharacterDataActionFlag::Cannon' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, Explosion) == 0x000001, "Member 'FKoratCharacterDataActionFlag::Explosion' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, MidAirKick) == 0x000002, "Member 'FKoratCharacterDataActionFlag::MidAirKick' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, EnergyWave) == 0x000003, "Member 'FKoratCharacterDataActionFlag::EnergyWave' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RollingHammer) == 0x000004, "Member 'FKoratCharacterDataActionFlag::RollingHammer' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, StepIn) == 0x000005, "Member 'FKoratCharacterDataActionFlag::StepIn' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RushIn) == 0x000006, "Member 'FKoratCharacterDataActionFlag::RushIn' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RushHighSpeedMovement) == 0x000007, "Member 'FKoratCharacterDataActionFlag::RushHighSpeedMovement' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DashJumpEnergyBullet) == 0x000008, "Member 'FKoratCharacterDataActionFlag::DashJumpEnergyBullet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, JumpSmashEnergyBullet) == 0x000009, "Member 'FKoratCharacterDataActionFlag::JumpSmashEnergyBullet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RepelBullet) == 0x00000A, "Member 'FKoratCharacterDataActionFlag::RepelBullet' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BlowBrake) == 0x00000B, "Member 'FKoratCharacterDataActionFlag::BlowBrake' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, SonicSway) == 0x00000C, "Member 'FKoratCharacterDataActionFlag::SonicSway' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, ParryPursuit) == 0x00000D, "Member 'FKoratCharacterDataActionFlag::ParryPursuit' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, LiftStrike) == 0x00000E, "Member 'FKoratCharacterDataActionFlag::LiftStrike' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, GrandSlash) == 0x00000F, "Member 'FKoratCharacterDataActionFlag::GrandSlash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, VanishingAttack) == 0x000010, "Member 'FKoratCharacterDataActionFlag::VanishingAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, LightningAttack) == 0x000011, "Member 'FKoratCharacterDataActionFlag::LightningAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BurstAttack) == 0x000012, "Member 'FKoratCharacterDataActionFlag::BurstAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BurstMeteor) == 0x000013, "Member 'FKoratCharacterDataActionFlag::BurstMeteor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BurstSmash) == 0x000014, "Member 'FKoratCharacterDataActionFlag::BurstSmash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BurstRush) == 0x000015, "Member 'FKoratCharacterDataActionFlag::BurstRush' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DragonTornado) == 0x000016, "Member 'FKoratCharacterDataActionFlag::DragonTornado' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, HeavyCrash) == 0x000017, "Member 'FKoratCharacterDataActionFlag::HeavyCrash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DawnThrow) == 0x000018, "Member 'FKoratCharacterDataActionFlag::DawnThrow' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, ThrowEscape) == 0x000019, "Member 'FKoratCharacterDataActionFlag::ThrowEscape' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, CannonCombo) == 0x00001A, "Member 'FKoratCharacterDataActionFlag::CannonCombo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, SpiralSlash) == 0x00001B, "Member 'FKoratCharacterDataActionFlag::SpiralSlash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RollingHurricane) == 0x00001C, "Member 'FKoratCharacterDataActionFlag::RollingHurricane' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, PowerPress) == 0x00001D, "Member 'FKoratCharacterDataActionFlag::PowerPress' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, EnergyStorm) == 0x00001E, "Member 'FKoratCharacterDataActionFlag::EnergyStorm' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, TriAttack) == 0x00001F, "Member 'FKoratCharacterDataActionFlag::TriAttack' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, AirRush) == 0x000020, "Member 'FKoratCharacterDataActionFlag::AirRush' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DeltaStorm) == 0x000021, "Member 'FKoratCharacterDataActionFlag::DeltaStorm' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, ExplosionCombo) == 0x000022, "Member 'FKoratCharacterDataActionFlag::ExplosionCombo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, SparkingRush) == 0x000023, "Member 'FKoratCharacterDataActionFlag::SparkingRush' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, RevengeCounter) == 0x000024, "Member 'FKoratCharacterDataActionFlag::RevengeCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DashRising) == 0x000025, "Member 'FKoratCharacterDataActionFlag::DashRising' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DashBlow) == 0x000026, "Member 'FKoratCharacterDataActionFlag::DashBlow' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, SuperZCounter) == 0x000027, "Member 'FKoratCharacterDataActionFlag::SuperZCounter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, BlastRepel) == 0x000028, "Member 'FKoratCharacterDataActionFlag::BlastRepel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataActionFlag, DragonHoming) == 0x000029, "Member 'FKoratCharacterDataActionFlag::DragonHoming' has a wrong offset!");

// ScriptStruct SS.KoratCharacterCannotTransitionAction
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterCannotTransitionAction final
{
public:
	TArray<struct FKoratActionDataList>           PreAction;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratActionDataList>           CannotAction;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterCannotTransitionAction) == 0x000008, "Wrong alignment on FKoratCharacterCannotTransitionAction");
static_assert(sizeof(FKoratCharacterCannotTransitionAction) == 0x000020, "Wrong size on FKoratCharacterCannotTransitionAction");
static_assert(offsetof(FKoratCharacterCannotTransitionAction, PreAction) == 0x000000, "Member 'FKoratCharacterCannotTransitionAction::PreAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterCannotTransitionAction, CannotAction) == 0x000010, "Member 'FKoratCharacterCannotTransitionAction::CannotAction' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataAbilityFlag
// 0x002C (0x002C - 0x0000)
struct FKoratCharacterDataAbilityFlag final
{
public:
	bool                                          HyperArmor;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SparkingArmor;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoReflect;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasTail;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnergyDrain;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Strong;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Poor;                                              // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoAura;                                            // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontMoveNeck;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EquipSword;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EquipSword2;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestructAlways;                                    // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoDragonDashRepel;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResistSomeThrow;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Footstep;                                          // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HighSpeedRiftJump;                                 // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SunResist;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SunDamege;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CannotShoot;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   CannotShootReplaceAction;                          // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoMoveKidanFire;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StoneMoveKidan;                                    // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StoneKidan;                                        // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunglasses;                                       // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotPowerImpact;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotCrashImpact;                                // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannotCharge;                                     // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoEffectDrain;                                    // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFly;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWalkFlying;                                       // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFlyMyself;                                     // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHighSpeedMove;                                 // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSuperHighSpeedMove;                            // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSelfishness;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterDataAbilityFlag) == 0x000004, "Wrong alignment on FKoratCharacterDataAbilityFlag");
static_assert(sizeof(FKoratCharacterDataAbilityFlag) == 0x00002C, "Wrong size on FKoratCharacterDataAbilityFlag");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, HyperArmor) == 0x000000, "Member 'FKoratCharacterDataAbilityFlag::HyperArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, SparkingArmor) == 0x000001, "Member 'FKoratCharacterDataAbilityFlag::SparkingArmor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, AutoReflect) == 0x000002, "Member 'FKoratCharacterDataAbilityFlag::AutoReflect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, HasTail) == 0x000003, "Member 'FKoratCharacterDataAbilityFlag::HasTail' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, EnergyDrain) == 0x000004, "Member 'FKoratCharacterDataAbilityFlag::EnergyDrain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, Strong) == 0x000005, "Member 'FKoratCharacterDataAbilityFlag::Strong' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, Poor) == 0x000006, "Member 'FKoratCharacterDataAbilityFlag::Poor' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, NoAura) == 0x000007, "Member 'FKoratCharacterDataAbilityFlag::NoAura' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, DontMoveNeck) == 0x000008, "Member 'FKoratCharacterDataAbilityFlag::DontMoveNeck' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, EquipSword) == 0x000009, "Member 'FKoratCharacterDataAbilityFlag::EquipSword' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, EquipSword2) == 0x00000A, "Member 'FKoratCharacterDataAbilityFlag::EquipSword2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, DestructAlways) == 0x00000B, "Member 'FKoratCharacterDataAbilityFlag::DestructAlways' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, NoDragonDashRepel) == 0x00000C, "Member 'FKoratCharacterDataAbilityFlag::NoDragonDashRepel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, ResistSomeThrow) == 0x00000D, "Member 'FKoratCharacterDataAbilityFlag::ResistSomeThrow' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, Footstep) == 0x00000E, "Member 'FKoratCharacterDataAbilityFlag::Footstep' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, HighSpeedRiftJump) == 0x00000F, "Member 'FKoratCharacterDataAbilityFlag::HighSpeedRiftJump' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, SunResist) == 0x000010, "Member 'FKoratCharacterDataAbilityFlag::SunResist' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, SunDamege) == 0x000011, "Member 'FKoratCharacterDataAbilityFlag::SunDamege' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, CannotShoot) == 0x000012, "Member 'FKoratCharacterDataAbilityFlag::CannotShoot' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, CannotShootReplaceAction) == 0x000014, "Member 'FKoratCharacterDataAbilityFlag::CannotShootReplaceAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, NoMoveKidanFire) == 0x00001C, "Member 'FKoratCharacterDataAbilityFlag::NoMoveKidanFire' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, StoneMoveKidan) == 0x00001D, "Member 'FKoratCharacterDataAbilityFlag::StoneMoveKidan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, StoneKidan) == 0x00001E, "Member 'FKoratCharacterDataAbilityFlag::StoneKidan' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bSunglasses) == 0x00001F, "Member 'FKoratCharacterDataAbilityFlag::bSunglasses' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCannotPowerImpact) == 0x000020, "Member 'FKoratCharacterDataAbilityFlag::bCannotPowerImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCannotCrashImpact) == 0x000021, "Member 'FKoratCharacterDataAbilityFlag::bCannotCrashImpact' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCannotCharge) == 0x000022, "Member 'FKoratCharacterDataAbilityFlag::bCannotCharge' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bNoEffectDrain) == 0x000023, "Member 'FKoratCharacterDataAbilityFlag::bNoEffectDrain' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCanFly) == 0x000024, "Member 'FKoratCharacterDataAbilityFlag::bCanFly' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bWalkFlying) == 0x000025, "Member 'FKoratCharacterDataAbilityFlag::bWalkFlying' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCanFlyMyself) == 0x000026, "Member 'FKoratCharacterDataAbilityFlag::bCanFlyMyself' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCanHighSpeedMove) == 0x000027, "Member 'FKoratCharacterDataAbilityFlag::bCanHighSpeedMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCanSuperHighSpeedMove) == 0x000028, "Member 'FKoratCharacterDataAbilityFlag::bCanSuperHighSpeedMove' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAbilityFlag, bCanSelfishness) == 0x000029, "Member 'FKoratCharacterDataAbilityFlag::bCanSelfishness' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataBlastComboParameter
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterDataBlastComboParameter final
{
public:
	EKoratBlastSlotType                           BlastSlotType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageScale;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataBlastComboParameter) == 0x000004, "Wrong alignment on FKoratCharacterDataBlastComboParameter");
static_assert(sizeof(FKoratCharacterDataBlastComboParameter) == 0x000008, "Wrong size on FKoratCharacterDataBlastComboParameter");
static_assert(offsetof(FKoratCharacterDataBlastComboParameter, BlastSlotType) == 0x000000, "Member 'FKoratCharacterDataBlastComboParameter::BlastSlotType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataBlastComboParameter, DamageScale) == 0x000004, "Member 'FKoratCharacterDataBlastComboParameter::DamageScale' has a wrong offset!");

// ScriptStruct SS.SSDRMEditUniqueTimeDilation
// 0x0008 (0x0008 - 0x0000)
struct FSSDRMEditUniqueTimeDilation final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDilation;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditUniqueTimeDilation) == 0x000004, "Wrong alignment on FSSDRMEditUniqueTimeDilation");
static_assert(sizeof(FSSDRMEditUniqueTimeDilation) == 0x000008, "Wrong size on FSSDRMEditUniqueTimeDilation");
static_assert(offsetof(FSSDRMEditUniqueTimeDilation, StartFrame) == 0x000000, "Member 'FSSDRMEditUniqueTimeDilation::StartFrame' has a wrong offset!");
static_assert(offsetof(FSSDRMEditUniqueTimeDilation, TimeDilation) == 0x000004, "Member 'FSSDRMEditUniqueTimeDilation::TimeDilation' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataUnderWaterEffectParameter
// 0x0024 (0x0024 - 0x0000)
struct FKoratCharacterDataUnderWaterEffectParameter final
{
public:
	float                                         OpponentAuraSearchBlockingDepth;                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchDistanceRatio;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPAutoRecoverRatio;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SPChargeRecoverRatio;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitBoostSPDecreaseRatio;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingGaugeRecoverRatio;                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkingGaugeDecreaseRatio;                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperZCounterSPDecreaseRatio;                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastGaugeAutoRecoverRatio;                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataUnderWaterEffectParameter) == 0x000004, "Wrong alignment on FKoratCharacterDataUnderWaterEffectParameter");
static_assert(sizeof(FKoratCharacterDataUnderWaterEffectParameter) == 0x000024, "Wrong size on FKoratCharacterDataUnderWaterEffectParameter");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, OpponentAuraSearchBlockingDepth) == 0x000000, "Member 'FKoratCharacterDataUnderWaterEffectParameter::OpponentAuraSearchBlockingDepth' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, AuraSearchDistanceRatio) == 0x000004, "Member 'FKoratCharacterDataUnderWaterEffectParameter::AuraSearchDistanceRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, SPAutoRecoverRatio) == 0x000008, "Member 'FKoratCharacterDataUnderWaterEffectParameter::SPAutoRecoverRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, SPChargeRecoverRatio) == 0x00000C, "Member 'FKoratCharacterDataUnderWaterEffectParameter::SPChargeRecoverRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, LimitBoostSPDecreaseRatio) == 0x000010, "Member 'FKoratCharacterDataUnderWaterEffectParameter::LimitBoostSPDecreaseRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, SparkingGaugeRecoverRatio) == 0x000014, "Member 'FKoratCharacterDataUnderWaterEffectParameter::SparkingGaugeRecoverRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, SparkingGaugeDecreaseRatio) == 0x000018, "Member 'FKoratCharacterDataUnderWaterEffectParameter::SparkingGaugeDecreaseRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, SuperZCounterSPDecreaseRatio) == 0x00001C, "Member 'FKoratCharacterDataUnderWaterEffectParameter::SuperZCounterSPDecreaseRatio' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataUnderWaterEffectParameter, BlastGaugeAutoRecoverRatio) == 0x000020, "Member 'FKoratCharacterDataUnderWaterEffectParameter::BlastGaugeAutoRecoverRatio' has a wrong offset!");

// ScriptStruct SS.SSFateDataRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSFateDataRecord
{
public:
	TArray<class FText>                           VoiceTexts;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSFateDataRecord) == 0x000008, "Wrong alignment on FSSFateDataRecord");
static_assert(sizeof(FSSFateDataRecord) == 0x000010, "Wrong size on FSSFateDataRecord");
static_assert(offsetof(FSSFateDataRecord, VoiceTexts) == 0x000000, "Member 'FSSFateDataRecord::VoiceTexts' has a wrong offset!");

// ScriptStruct SS.SSActionFateDataRecord
// 0x0008 (0x0018 - 0x0010)
struct FSSActionFateDataRecord : public FSSFateDataRecord
{
public:
	struct FKoratActionDataList                   ReplaceAction;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSActionFateDataRecord) == 0x000008, "Wrong alignment on FSSActionFateDataRecord");
static_assert(sizeof(FSSActionFateDataRecord) == 0x000018, "Wrong size on FSSActionFateDataRecord");
static_assert(offsetof(FSSActionFateDataRecord, ReplaceAction) == 0x000010, "Member 'FSSActionFateDataRecord::ReplaceAction' has a wrong offset!");

// ScriptStruct SS.SSIntroductionFateDataRecord
// 0x0008 (0x0020 - 0x0018)
struct FSSIntroductionFateDataRecord final : public FSSActionFateDataRecord
{
public:
	EFateExecutionOrderType                       OrderType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSIntroductionFateDataRecord) == 0x000008, "Wrong alignment on FSSIntroductionFateDataRecord");
static_assert(sizeof(FSSIntroductionFateDataRecord) == 0x000020, "Wrong size on FSSIntroductionFateDataRecord");
static_assert(offsetof(FSSIntroductionFateDataRecord, OrderType) == 0x000018, "Member 'FSSIntroductionFateDataRecord::OrderType' has a wrong offset!");

// ScriptStruct SS.SSFateDataList
// 0x01A8 (0x01A8 - 0x0000)
struct FSSFateDataList final
{
public:
	EFateMoraleType                               MoraleType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGreatApe;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataList>        Rivals;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EGeneralFateDataType, struct FSSActionFateDataRecord> GeneralFateDataMap2;                               // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, EGeneralFateAttribute2> GeneralFateCombinationMap;                         // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FSSIntroductionFateDataRecord> IntroductionSpecialFateDataMap;                    // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FSSActionFateDataRecord> VictorySpecialFateDataMap;                         // 0x0108(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FSSFateDataRecord> ChangeSpecialFateDataMap;                          // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSFateDataList) == 0x000008, "Wrong alignment on FSSFateDataList");
static_assert(sizeof(FSSFateDataList) == 0x0001A8, "Wrong size on FSSFateDataList");
static_assert(offsetof(FSSFateDataList, MoraleType) == 0x000000, "Member 'FSSFateDataList::MoraleType' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, bGreatApe) == 0x000001, "Member 'FSSFateDataList::bGreatApe' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, Rivals) == 0x000008, "Member 'FSSFateDataList::Rivals' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, GeneralFateDataMap2) == 0x000018, "Member 'FSSFateDataList::GeneralFateDataMap2' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, GeneralFateCombinationMap) == 0x000068, "Member 'FSSFateDataList::GeneralFateCombinationMap' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, IntroductionSpecialFateDataMap) == 0x0000B8, "Member 'FSSFateDataList::IntroductionSpecialFateDataMap' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, VictorySpecialFateDataMap) == 0x000108, "Member 'FSSFateDataList::VictorySpecialFateDataMap' has a wrong offset!");
static_assert(offsetof(FSSFateDataList, ChangeSpecialFateDataMap) == 0x000158, "Member 'FSSFateDataList::ChangeSpecialFateDataMap' has a wrong offset!");

// ScriptStruct SS.KoratCharacterDataAssetRecord
// 0x08E0 (0x08E0 - 0x0000)
struct FKoratCharacterDataAssetRecord final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlNumId;                                           // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratUnLockType                              UnLockType;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EExhibitionType>                       ValidExhibitions;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsInstallPlayable;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNpcChara;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterDataCostumeParameter> Costumes;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterFigureDataList          CharacterFigure;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationBlueprint;                                // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationBlueprintForSupport;                      // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationBlueprintForEventUI;                      // 0x00A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCharacterMLSDataAsset*            CharacterMLS;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCharacterCombinationDataAsset*    CharacterCombination;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterEffectColorSetDataTypeDataList, class USSEffectColorDataAsset*> EffectColorDataTypeMap;                            // 0x00E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FKoratAuraLevelDataList                BattleAlwaysAuraType;                              // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAuraLevelDataList                AlwaysAuraType;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EKoratBattleSearchType, TSoftObjectPtr<class ULevelSequence>> OverrideAuraSearchEffectSequence;                  // 0x0140(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<struct FKoratVelocityLineEffectTypeDataList, struct FKoratVelocityLineEffectDataList> OverrideVelocityLineEffect;                        // 0x0190(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataCommonAssets        CommonAssets;                                      // 0x01E0(0x0160)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USSCharacterUiDataAsset*                UIAssets;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataBattleAssets        BattleAssets;                                      // 0x0348(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratBuffPhaseDataAsset*               SparkingBuff;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRefrectFlip;                                  // 0x03E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataAbilityFlag         AbilityFlag;                                       // 0x03EC(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataBlastComboParameter BlastComboParameter;                               // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataActionFlag          ActionFlag;                                        // 0x0420(0x002A)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44A[0x6];                                      // 0x044A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterCannotTransitionAction> CannotTransitionAction;                            // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FKoratActionDataList, struct FKoratActionDataList> OverrideAction;                                    // 0x0460(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataSubInstanceAsset> SubInstances;                                      // 0x04B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataStorySettingParameter StorySettingParameter;                             // 0x04C0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratSoundDataAsset*                   SoundDataAsset;                                    // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataNameInfo            NameInfo;                                          // 0x0530(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSAiCharacterDataList                 AiCharacterData;                                   // 0x0590(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    DefaultItems;                                      // 0x06E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSFateDataList                        FateData;                                          // 0x06F0(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataUnderWaterEffectParameter UnderWaterEffect;                                  // 0x0898(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ExplosionDrownOutableRadius;                       // 0x08BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleOperationGuideDataList> KoratOperationGuideDataList;                       // 0x08C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterFootParameter           FootParams;                                        // 0x08D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterDataAssetRecord) == 0x000008, "Wrong alignment on FKoratCharacterDataAssetRecord");
static_assert(sizeof(FKoratCharacterDataAssetRecord) == 0x0008E0, "Wrong size on FKoratCharacterDataAssetRecord");
static_assert(offsetof(FKoratCharacterDataAssetRecord, SortId) == 0x000000, "Member 'FKoratCharacterDataAssetRecord::SortId' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AlNumId) == 0x000004, "Member 'FKoratCharacterDataAssetRecord::AlNumId' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, UnLockType) == 0x00000C, "Member 'FKoratCharacterDataAssetRecord::UnLockType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, ValidExhibitions) == 0x000010, "Member 'FKoratCharacterDataAssetRecord::ValidExhibitions' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, bIsInstallPlayable) == 0x000020, "Member 'FKoratCharacterDataAssetRecord::bIsInstallPlayable' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, bIsNpcChara) == 0x000021, "Member 'FKoratCharacterDataAssetRecord::bIsNpcChara' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, Costumes) == 0x000028, "Member 'FKoratCharacterDataAssetRecord::Costumes' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, CharacterFigure) == 0x000038, "Member 'FKoratCharacterDataAssetRecord::CharacterFigure' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AnimationBlueprint) == 0x000040, "Member 'FKoratCharacterDataAssetRecord::AnimationBlueprint' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AnimationBlueprintForSupport) == 0x000070, "Member 'FKoratCharacterDataAssetRecord::AnimationBlueprintForSupport' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AnimationBlueprintForEventUI) == 0x0000A0, "Member 'FKoratCharacterDataAssetRecord::AnimationBlueprintForEventUI' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, CharacterMLS) == 0x0000D0, "Member 'FKoratCharacterDataAssetRecord::CharacterMLS' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, CharacterCombination) == 0x0000D8, "Member 'FKoratCharacterDataAssetRecord::CharacterCombination' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, EffectColorDataTypeMap) == 0x0000E0, "Member 'FKoratCharacterDataAssetRecord::EffectColorDataTypeMap' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, BattleAlwaysAuraType) == 0x000130, "Member 'FKoratCharacterDataAssetRecord::BattleAlwaysAuraType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AlwaysAuraType) == 0x000138, "Member 'FKoratCharacterDataAssetRecord::AlwaysAuraType' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, OverrideAuraSearchEffectSequence) == 0x000140, "Member 'FKoratCharacterDataAssetRecord::OverrideAuraSearchEffectSequence' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, OverrideVelocityLineEffect) == 0x000190, "Member 'FKoratCharacterDataAssetRecord::OverrideVelocityLineEffect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, CommonAssets) == 0x0001E0, "Member 'FKoratCharacterDataAssetRecord::CommonAssets' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, UIAssets) == 0x000340, "Member 'FKoratCharacterDataAssetRecord::UIAssets' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, BattleAssets) == 0x000348, "Member 'FKoratCharacterDataAssetRecord::BattleAssets' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, SparkingBuff) == 0x0003E0, "Member 'FKoratCharacterDataAssetRecord::SparkingBuff' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, bAutoRefrectFlip) == 0x0003E8, "Member 'FKoratCharacterDataAssetRecord::bAutoRefrectFlip' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AbilityFlag) == 0x0003EC, "Member 'FKoratCharacterDataAssetRecord::AbilityFlag' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, BlastComboParameter) == 0x000418, "Member 'FKoratCharacterDataAssetRecord::BlastComboParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, ActionFlag) == 0x000420, "Member 'FKoratCharacterDataAssetRecord::ActionFlag' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, CannotTransitionAction) == 0x000450, "Member 'FKoratCharacterDataAssetRecord::CannotTransitionAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, OverrideAction) == 0x000460, "Member 'FKoratCharacterDataAssetRecord::OverrideAction' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, SubInstances) == 0x0004B0, "Member 'FKoratCharacterDataAssetRecord::SubInstances' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, StorySettingParameter) == 0x0004C0, "Member 'FKoratCharacterDataAssetRecord::StorySettingParameter' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, SoundDataAsset) == 0x000528, "Member 'FKoratCharacterDataAssetRecord::SoundDataAsset' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, NameInfo) == 0x000530, "Member 'FKoratCharacterDataAssetRecord::NameInfo' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, AiCharacterData) == 0x000590, "Member 'FKoratCharacterDataAssetRecord::AiCharacterData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, DefaultItems) == 0x0006E0, "Member 'FKoratCharacterDataAssetRecord::DefaultItems' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, FateData) == 0x0006F0, "Member 'FKoratCharacterDataAssetRecord::FateData' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, UnderWaterEffect) == 0x000898, "Member 'FKoratCharacterDataAssetRecord::UnderWaterEffect' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, ExplosionDrownOutableRadius) == 0x0008BC, "Member 'FKoratCharacterDataAssetRecord::ExplosionDrownOutableRadius' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, KoratOperationGuideDataList) == 0x0008C0, "Member 'FKoratCharacterDataAssetRecord::KoratOperationGuideDataList' has a wrong offset!");
static_assert(offsetof(FKoratCharacterDataAssetRecord, FootParams) == 0x0008D0, "Member 'FKoratCharacterDataAssetRecord::FootParams' has a wrong offset!");

// ScriptStruct SS.KoratParticlePrefixList
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FKoratParticlePrefixList final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratParticlePrefixList) == 0x000008, "Wrong alignment on FKoratParticlePrefixList");
static_assert(sizeof(FKoratParticlePrefixList) == 0x000050, "Wrong size on FKoratParticlePrefixList");

// ScriptStruct SS.KoratMaterialPrefixList
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FKoratMaterialPrefixList final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratMaterialPrefixList) == 0x000008, "Wrong alignment on FKoratMaterialPrefixList");
static_assert(sizeof(FKoratMaterialPrefixList) == 0x000050, "Wrong size on FKoratMaterialPrefixList");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterChangeWindowLayout
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout final
{
public:
	bool                                          bUpdateLayout;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout");
static_assert(offsetof(FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout, bUpdateLayout) == 0x000000, "Member 'FSSDramaticBattleCutEditorExecuteParameterChangeWindowLayout::bUpdateLayout' has a wrong offset!");

// ScriptStruct SS.KoratEffectColorReplaceTypeSetting
// 0x0010 (0x0010 - 0x0000)
struct FKoratEffectColorReplaceTypeSetting final
{
public:
	TArray<struct FKoratCharacterEffectColorReplaceTypeDataList> SettingList;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEffectColorReplaceTypeSetting) == 0x000008, "Wrong alignment on FKoratEffectColorReplaceTypeSetting");
static_assert(sizeof(FKoratEffectColorReplaceTypeSetting) == 0x000010, "Wrong size on FKoratEffectColorReplaceTypeSetting");
static_assert(offsetof(FKoratEffectColorReplaceTypeSetting, SettingList) == 0x000000, "Member 'FKoratEffectColorReplaceTypeSetting::SettingList' has a wrong offset!");

// ScriptStruct SS.SSCharacterEnergyBulletParameter
// 0x3810 (0x3810 - 0x0000)
struct FSSCharacterEnergyBulletParameter final
{
public:
	bool                                          bPointLightIsValid;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterPointLightData          PointLight;                                        // 0x0004(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bColorSetIsValid;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterEffectColorSetData      ColorSet;                                          // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BulletWindMotorComponent;                          // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletWindMotorRadius;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletWindMotorSpeed;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashLevelSequence;                          // 0x0068(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashSmashLevelSequence1;                    // 0x0098(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          MuzzleFlashSmashLevelSequence2;                    // 0x00C8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          EnergyBulletLevelSequenceIn;                       // 0x00F8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          EnergyBulletSmashLevelSequenceChargeIn;            // 0x0128(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          EnergyBulletSmashLevelSequenceLoop2;               // 0x0158(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          EnergyBulletChargeLevelSequence;                   // 0x0188(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          BlastImpactLevelSequenceLead;                      // 0x01B8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          BlastImpactLevelSequenceBehind;                    // 0x01E8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect CharacterHitExplosion;                             // 0x0218(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletGroupExplosion CharacterHitGroupExplosion;                        // 0x02E8(0x0110)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect CharacterMultiStageHitExplosion;                   // 0x03F8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect CharacterHitDemoReplacementExplosion;              // 0x04C8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletGroupExplosion CharacterHitDemoReplacementGroupExplosion;         // 0x0598(0x0110)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceState;                                // 0x06A8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceStateMultiHit;                        // 0x06D8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceDemoReplacementState;                 // 0x0708(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect GeometryHitExplosion;                              // 0x0738(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect GeometryMultiStageHitExplosion;                    // 0x0808(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect ClashExplosion;                                    // 0x08D8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect BeamExplosion;                                     // 0x09A8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Cancel;                                            // 0x0A78(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Reflect;                                           // 0x0B48(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect WaitForReflect;                                    // 0x0C18(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect AutoReflect;                                       // 0x0CE8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect EraseExplosion;                                    // 0x0DB8(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Hit;                                               // 0x0E88(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect Guard;                                             // 0x0F58(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSSCharacterEnergyBulletExplosionEffect GuardBreak;                                        // 0x1028(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratEffectBulletRatParameter         BulletGroundReactionParameter;                     // 0x10F8(0x00A0)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceGroundReaction;                       // 0x1198(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterEnergyBulletParameter   Parameter;                                         // 0x11C8(0x02F8)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              DamageMovement1;                                   // 0x14C0(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              DamageMovement2;                                   // 0x17A0(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      HitStop;                                           // 0x1A80(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A94[0x4];                                     // 0x1A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardMovement1;                                    // 0x1A98(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              GuardMovement2;                                    // 0x1D78(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitStopData                      GuardStop;                                         // 0x2058(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_206C[0x4];                                     // 0x206C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BottomDamageMovement1;                             // 0x2070(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              BottomDamageMovement2;                             // 0x2350(0x02E0)(Edit, NativeAccessSpecifierPublic)
	struct FKoratHitBackMovementData              DamageMovement1_ForGiant;                          // 0x2630(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_DamageMovement1;                          // 0x2910(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2911[0x7];                                     // 0x2911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              DamageMovement2_ForGiant;                          // 0x2918(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_DamageMovement2;                          // 0x2BF8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BF9[0x3];                                     // 0x2BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      HitStop_ForGiant;                                  // 0x2BFC(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_HitStop;                                  // 0x2C10(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C11[0x7];                                     // 0x2C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardMovement1_ForGiant;                           // 0x2C18(0x02E0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EF8[0x8];                                     // 0x2EF8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              GuardMovement2_ForGiant;                           // 0x2F00(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardMovement2;                           // 0x31E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31E1[0x3];                                     // 0x31E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitStopData                      GuardStop_ForGiant;                                // 0x31E4(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_GuardStop;                                // 0x31F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31F9[0x7];                                     // 0x31F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BottomDamageMovement1_ForGiant;                    // 0x3200(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_BottomDamageMovement1;                    // 0x34E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E1[0x7];                                     // 0x34E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              BottomDamageMovement2_ForGiant;                    // 0x34E8(0x02E0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsGiant_BottomDamageMovement2;                    // 0x37C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRoll;                                         // 0x37C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37CA[0x2];                                     // 0x37CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBulletEffectDataList             Effect;                                            // 0x37CC(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37D4[0x4];                                     // 0x37D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BulletActorBP;                                     // 0x37D8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBulletParamDataAsset*                ParamDataAsset;                                    // 0x3808(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterEnergyBulletParameter) == 0x000008, "Wrong alignment on FSSCharacterEnergyBulletParameter");
static_assert(sizeof(FSSCharacterEnergyBulletParameter) == 0x003810, "Wrong size on FSSCharacterEnergyBulletParameter");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bPointLightIsValid) == 0x000000, "Member 'FSSCharacterEnergyBulletParameter::bPointLightIsValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, PointLight) == 0x000004, "Member 'FSSCharacterEnergyBulletParameter::PointLight' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bColorSetIsValid) == 0x000024, "Member 'FSSCharacterEnergyBulletParameter::bColorSetIsValid' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, ColorSet) == 0x000028, "Member 'FSSCharacterEnergyBulletParameter::ColorSet' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BulletWindMotorComponent) == 0x000030, "Member 'FSSCharacterEnergyBulletParameter::BulletWindMotorComponent' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BulletWindMotorRadius) == 0x000060, "Member 'FSSCharacterEnergyBulletParameter::BulletWindMotorRadius' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BulletWindMotorSpeed) == 0x000064, "Member 'FSSCharacterEnergyBulletParameter::BulletWindMotorSpeed' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, MuzzleFlashLevelSequence) == 0x000068, "Member 'FSSCharacterEnergyBulletParameter::MuzzleFlashLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, MuzzleFlashSmashLevelSequence1) == 0x000098, "Member 'FSSCharacterEnergyBulletParameter::MuzzleFlashSmashLevelSequence1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, MuzzleFlashSmashLevelSequence2) == 0x0000C8, "Member 'FSSCharacterEnergyBulletParameter::MuzzleFlashSmashLevelSequence2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, EnergyBulletLevelSequenceIn) == 0x0000F8, "Member 'FSSCharacterEnergyBulletParameter::EnergyBulletLevelSequenceIn' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, EnergyBulletSmashLevelSequenceChargeIn) == 0x000128, "Member 'FSSCharacterEnergyBulletParameter::EnergyBulletSmashLevelSequenceChargeIn' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, EnergyBulletSmashLevelSequenceLoop2) == 0x000158, "Member 'FSSCharacterEnergyBulletParameter::EnergyBulletSmashLevelSequenceLoop2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, EnergyBulletChargeLevelSequence) == 0x000188, "Member 'FSSCharacterEnergyBulletParameter::EnergyBulletChargeLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BlastImpactLevelSequenceLead) == 0x0001B8, "Member 'FSSCharacterEnergyBulletParameter::BlastImpactLevelSequenceLead' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BlastImpactLevelSequenceBehind) == 0x0001E8, "Member 'FSSCharacterEnergyBulletParameter::BlastImpactLevelSequenceBehind' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, CharacterHitExplosion) == 0x000218, "Member 'FSSCharacterEnergyBulletParameter::CharacterHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, CharacterHitGroupExplosion) == 0x0002E8, "Member 'FSSCharacterEnergyBulletParameter::CharacterHitGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, CharacterMultiStageHitExplosion) == 0x0003F8, "Member 'FSSCharacterEnergyBulletParameter::CharacterMultiStageHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, CharacterHitDemoReplacementExplosion) == 0x0004C8, "Member 'FSSCharacterEnergyBulletParameter::CharacterHitDemoReplacementExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, CharacterHitDemoReplacementGroupExplosion) == 0x000598, "Member 'FSSCharacterEnergyBulletParameter::CharacterHitDemoReplacementGroupExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, LevelSequenceState) == 0x0006A8, "Member 'FSSCharacterEnergyBulletParameter::LevelSequenceState' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, LevelSequenceStateMultiHit) == 0x0006D8, "Member 'FSSCharacterEnergyBulletParameter::LevelSequenceStateMultiHit' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, LevelSequenceDemoReplacementState) == 0x000708, "Member 'FSSCharacterEnergyBulletParameter::LevelSequenceDemoReplacementState' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GeometryHitExplosion) == 0x000738, "Member 'FSSCharacterEnergyBulletParameter::GeometryHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GeometryMultiStageHitExplosion) == 0x000808, "Member 'FSSCharacterEnergyBulletParameter::GeometryMultiStageHitExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, ClashExplosion) == 0x0008D8, "Member 'FSSCharacterEnergyBulletParameter::ClashExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BeamExplosion) == 0x0009A8, "Member 'FSSCharacterEnergyBulletParameter::BeamExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Cancel) == 0x000A78, "Member 'FSSCharacterEnergyBulletParameter::Cancel' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Reflect) == 0x000B48, "Member 'FSSCharacterEnergyBulletParameter::Reflect' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, WaitForReflect) == 0x000C18, "Member 'FSSCharacterEnergyBulletParameter::WaitForReflect' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, AutoReflect) == 0x000CE8, "Member 'FSSCharacterEnergyBulletParameter::AutoReflect' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, EraseExplosion) == 0x000DB8, "Member 'FSSCharacterEnergyBulletParameter::EraseExplosion' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Hit) == 0x000E88, "Member 'FSSCharacterEnergyBulletParameter::Hit' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Guard) == 0x000F58, "Member 'FSSCharacterEnergyBulletParameter::Guard' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardBreak) == 0x001028, "Member 'FSSCharacterEnergyBulletParameter::GuardBreak' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BulletGroundReactionParameter) == 0x0010F8, "Member 'FSSCharacterEnergyBulletParameter::BulletGroundReactionParameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, LevelSequenceGroundReaction) == 0x001198, "Member 'FSSCharacterEnergyBulletParameter::LevelSequenceGroundReaction' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Parameter) == 0x0011C8, "Member 'FSSCharacterEnergyBulletParameter::Parameter' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, DamageMovement1) == 0x0014C0, "Member 'FSSCharacterEnergyBulletParameter::DamageMovement1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, DamageMovement2) == 0x0017A0, "Member 'FSSCharacterEnergyBulletParameter::DamageMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, HitStop) == 0x001A80, "Member 'FSSCharacterEnergyBulletParameter::HitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardMovement1) == 0x001A98, "Member 'FSSCharacterEnergyBulletParameter::GuardMovement1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardMovement2) == 0x001D78, "Member 'FSSCharacterEnergyBulletParameter::GuardMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardStop) == 0x002058, "Member 'FSSCharacterEnergyBulletParameter::GuardStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BottomDamageMovement1) == 0x002070, "Member 'FSSCharacterEnergyBulletParameter::BottomDamageMovement1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BottomDamageMovement2) == 0x002350, "Member 'FSSCharacterEnergyBulletParameter::BottomDamageMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, DamageMovement1_ForGiant) == 0x002630, "Member 'FSSCharacterEnergyBulletParameter::DamageMovement1_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_DamageMovement1) == 0x002910, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_DamageMovement1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, DamageMovement2_ForGiant) == 0x002918, "Member 'FSSCharacterEnergyBulletParameter::DamageMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_DamageMovement2) == 0x002BF8, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_DamageMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, HitStop_ForGiant) == 0x002BFC, "Member 'FSSCharacterEnergyBulletParameter::HitStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_HitStop) == 0x002C10, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_HitStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardMovement1_ForGiant) == 0x002C18, "Member 'FSSCharacterEnergyBulletParameter::GuardMovement1_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardMovement2_ForGiant) == 0x002F00, "Member 'FSSCharacterEnergyBulletParameter::GuardMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_GuardMovement2) == 0x0031E0, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_GuardMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, GuardStop_ForGiant) == 0x0031E4, "Member 'FSSCharacterEnergyBulletParameter::GuardStop_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_GuardStop) == 0x0031F8, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_GuardStop' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BottomDamageMovement1_ForGiant) == 0x003200, "Member 'FSSCharacterEnergyBulletParameter::BottomDamageMovement1_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_BottomDamageMovement1) == 0x0034E0, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_BottomDamageMovement1' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BottomDamageMovement2_ForGiant) == 0x0034E8, "Member 'FSSCharacterEnergyBulletParameter::BottomDamageMovement2_ForGiant' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bIsGiant_BottomDamageMovement2) == 0x0037C8, "Member 'FSSCharacterEnergyBulletParameter::bIsGiant_BottomDamageMovement2' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, bLockRoll) == 0x0037C9, "Member 'FSSCharacterEnergyBulletParameter::bLockRoll' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, Effect) == 0x0037CC, "Member 'FSSCharacterEnergyBulletParameter::Effect' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, BulletActorBP) == 0x0037D8, "Member 'FSSCharacterEnergyBulletParameter::BulletActorBP' has a wrong offset!");
static_assert(offsetof(FSSCharacterEnergyBulletParameter, ParamDataAsset) == 0x003808, "Member 'FSSCharacterEnergyBulletParameter::ParamDataAsset' has a wrong offset!");

// ScriptStruct SS.SSCharacterEnergyBulletRecord
// 0x0050 (0x0050 - 0x0000)
struct FSSCharacterEnergyBulletRecord final
{
public:
	TMap<struct FKoratBulletKeyDataList, struct FSSCharacterEnergyBulletParameter> AdditionalBullets;                                 // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterEnergyBulletRecord) == 0x000008, "Wrong alignment on FSSCharacterEnergyBulletRecord");
static_assert(sizeof(FSSCharacterEnergyBulletRecord) == 0x000050, "Wrong size on FSSCharacterEnergyBulletRecord");
static_assert(offsetof(FSSCharacterEnergyBulletRecord, AdditionalBullets) == 0x000000, "Member 'FSSCharacterEnergyBulletRecord::AdditionalBullets' has a wrong offset!");

// ScriptStruct SS.SSAdventureIFAgingCharacterEventData
// 0x0060 (0x0060 - 0x0000)
struct FSSAdventureIFAgingCharacterEventData final
{
public:
	TArray<struct FKoratCharacterDataList>        Characters;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, struct FSSAdventureIFAgingEventData> EventDatas;                                        // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAdventureIFAgingCharacterEventData) == 0x000008, "Wrong alignment on FSSAdventureIFAgingCharacterEventData");
static_assert(sizeof(FSSAdventureIFAgingCharacterEventData) == 0x000060, "Wrong size on FSSAdventureIFAgingCharacterEventData");
static_assert(offsetof(FSSAdventureIFAgingCharacterEventData, Characters) == 0x000000, "Member 'FSSAdventureIFAgingCharacterEventData::Characters' has a wrong offset!");
static_assert(offsetof(FSSAdventureIFAgingCharacterEventData, EventDatas) == 0x000010, "Member 'FSSAdventureIFAgingCharacterEventData::EventDatas' has a wrong offset!");

// ScriptStruct SS.KoratCharacterResourceChanging
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharacterResourceChanging final
{
public:
	float                                         HealHP;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealHPPercentage;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxHP;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealSP;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxSP;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HealBlastStock;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealBlastGauge;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxBlastStock;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sparking;                                          // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SparkingCancel;                                    // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxChangeGauge;                                    // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterResourceChanging) == 0x000004, "Wrong alignment on FKoratCharacterResourceChanging");
static_assert(sizeof(FKoratCharacterResourceChanging) == 0x000020, "Wrong size on FKoratCharacterResourceChanging");
static_assert(offsetof(FKoratCharacterResourceChanging, HealHP) == 0x000000, "Member 'FKoratCharacterResourceChanging::HealHP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, HealHPPercentage) == 0x000004, "Member 'FKoratCharacterResourceChanging::HealHPPercentage' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, MaxHP) == 0x000008, "Member 'FKoratCharacterResourceChanging::MaxHP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, HealSP) == 0x00000C, "Member 'FKoratCharacterResourceChanging::HealSP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, MaxSP) == 0x000010, "Member 'FKoratCharacterResourceChanging::MaxSP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, HealBlastStock) == 0x000014, "Member 'FKoratCharacterResourceChanging::HealBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, HealBlastGauge) == 0x000018, "Member 'FKoratCharacterResourceChanging::HealBlastGauge' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, MaxBlastStock) == 0x00001C, "Member 'FKoratCharacterResourceChanging::MaxBlastStock' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, Sparking) == 0x00001D, "Member 'FKoratCharacterResourceChanging::Sparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, SparkingCancel) == 0x00001E, "Member 'FKoratCharacterResourceChanging::SparkingCancel' has a wrong offset!");
static_assert(offsetof(FKoratCharacterResourceChanging, MaxChangeGauge) == 0x00001F, "Member 'FKoratCharacterResourceChanging::MaxChangeGauge' has a wrong offset!");

// ScriptStruct SS.KoratCharacterItemInequality
// 0x0008 (0x0008 - 0x0000)
struct FKoratCharacterItemInequality final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratInequalitySignType                      Inequality;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharacterItemInequality) == 0x000004, "Wrong alignment on FKoratCharacterItemInequality");
static_assert(sizeof(FKoratCharacterItemInequality) == 0x000008, "Wrong size on FKoratCharacterItemInequality");
static_assert(offsetof(FKoratCharacterItemInequality, Num) == 0x000000, "Member 'FKoratCharacterItemInequality::Num' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemInequality, Inequality) == 0x000004, "Member 'FKoratCharacterItemInequality::Inequality' has a wrong offset!");

// ScriptStruct SS.KoratCharacterItemCondition
// 0x00B0 (0x00B0 - 0x0000)
struct FKoratCharacterItemCondition final
{
public:
	ESSCharacterItemConditionTarget               Target;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Condition;                                         // 0x0001(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Condition2;                                        // 0x0002(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSparking;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtBattleStart;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCharacterEntry;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtFirstTaketurns;                                 // 0x0006(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtFastAvoidanceBlast;                             // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtEmoteStart;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtGuardCrash;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtSparking;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtDestroyEnemy;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtUltimateBlast;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtNoHitBlast;                                     // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMap;                                            // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHPPer;                                            // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSPPer;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStockNum;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGender;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDP;                                               // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockon;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDPComparison;                                     // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWater;                                          // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDown;                                             // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEx;                                               // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassingEmoteTime;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FKoratMapDataList>                ConditionMaps;                                     // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemInequality          HPPercent;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemInequality          SPPercent;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemInequality          StockNum;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EKoratCharacterGenderType                     ConditionGender;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterItemInequality          DP;                                                // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ESSCharacterItemConditionIf                   IfLockon;                                          // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSCharacterItemConditionIf                   IfSparking;                                        // 0x0095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterItemInequality          DPComparison;                                      // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ESSCharacterItemConditionIf                   IfInWater;                                         // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSCharacterItemConditionIf                   IfDown;                                            // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterItemInequality          ExParam;                                           // 0x00A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EmoteTime;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterItemCondition) == 0x000008, "Wrong alignment on FKoratCharacterItemCondition");
static_assert(sizeof(FKoratCharacterItemCondition) == 0x0000B0, "Wrong size on FKoratCharacterItemCondition");
static_assert(offsetof(FKoratCharacterItemCondition, Target) == 0x000000, "Member 'FKoratCharacterItemCondition::Target' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, Condition) == 0x000001, "Member 'FKoratCharacterItemCondition::Condition' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, Condition2) == 0x000002, "Member 'FKoratCharacterItemCondition::Condition2' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bSparking) == 0x000003, "Member 'FKoratCharacterItemCondition::bSparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtBattleStart) == 0x000004, "Member 'FKoratCharacterItemCondition::bAtBattleStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtCharacterEntry) == 0x000005, "Member 'FKoratCharacterItemCondition::bAtCharacterEntry' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtFirstTaketurns) == 0x000006, "Member 'FKoratCharacterItemCondition::bAtFirstTaketurns' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtFastAvoidanceBlast) == 0x000007, "Member 'FKoratCharacterItemCondition::bAtFastAvoidanceBlast' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtEmoteStart) == 0x000008, "Member 'FKoratCharacterItemCondition::bAtEmoteStart' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtGuardCrash) == 0x000009, "Member 'FKoratCharacterItemCondition::bAtGuardCrash' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtSparking) == 0x00000A, "Member 'FKoratCharacterItemCondition::bAtSparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtDestroyEnemy) == 0x00000B, "Member 'FKoratCharacterItemCondition::bAtDestroyEnemy' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtUltimateBlast) == 0x00000C, "Member 'FKoratCharacterItemCondition::bAtUltimateBlast' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bAtNoHitBlast) == 0x00000D, "Member 'FKoratCharacterItemCondition::bAtNoHitBlast' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bInMap) == 0x00000E, "Member 'FKoratCharacterItemCondition::bInMap' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bHPPer) == 0x00000F, "Member 'FKoratCharacterItemCondition::bHPPer' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bSPPer) == 0x000010, "Member 'FKoratCharacterItemCondition::bSPPer' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bStockNum) == 0x000011, "Member 'FKoratCharacterItemCondition::bStockNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bGender) == 0x000012, "Member 'FKoratCharacterItemCondition::bGender' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bDP) == 0x000013, "Member 'FKoratCharacterItemCondition::bDP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bLockon) == 0x000014, "Member 'FKoratCharacterItemCondition::bLockon' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bDPComparison) == 0x000015, "Member 'FKoratCharacterItemCondition::bDPComparison' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bInWater) == 0x000016, "Member 'FKoratCharacterItemCondition::bInWater' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bDown) == 0x000017, "Member 'FKoratCharacterItemCondition::bDown' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bEx) == 0x000018, "Member 'FKoratCharacterItemCondition::bEx' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, bPassingEmoteTime) == 0x000019, "Member 'FKoratCharacterItemCondition::bPassingEmoteTime' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, ConditionMaps) == 0x000020, "Member 'FKoratCharacterItemCondition::ConditionMaps' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, HPPercent) == 0x000070, "Member 'FKoratCharacterItemCondition::HPPercent' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, SPPercent) == 0x000078, "Member 'FKoratCharacterItemCondition::SPPercent' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, StockNum) == 0x000080, "Member 'FKoratCharacterItemCondition::StockNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, ConditionGender) == 0x000088, "Member 'FKoratCharacterItemCondition::ConditionGender' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, DP) == 0x00008C, "Member 'FKoratCharacterItemCondition::DP' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, IfLockon) == 0x000094, "Member 'FKoratCharacterItemCondition::IfLockon' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, IfSparking) == 0x000095, "Member 'FKoratCharacterItemCondition::IfSparking' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, DPComparison) == 0x000098, "Member 'FKoratCharacterItemCondition::DPComparison' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, IfInWater) == 0x0000A0, "Member 'FKoratCharacterItemCondition::IfInWater' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, IfDown) == 0x0000A1, "Member 'FKoratCharacterItemCondition::IfDown' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, ExParam) == 0x0000A4, "Member 'FKoratCharacterItemCondition::ExParam' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemCondition, EmoteTime) == 0x0000AC, "Member 'FKoratCharacterItemCondition::EmoteTime' has a wrong offset!");

// ScriptStruct SS.KoratCharacterItemConditionTargetThisItem
// 0x0014 (0x0014 - 0x0000)
struct FKoratCharacterItemConditionTargetThisItem final
{
public:
	bool                                          bCostumeDamageLv;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCostumeScratchLv;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterItemInequality          CostumeDamageLvNum;                                // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemInequality          CostumeScratchLvNum;                               // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCharacterItemConditionTargetThisItem) == 0x000004, "Wrong alignment on FKoratCharacterItemConditionTargetThisItem");
static_assert(sizeof(FKoratCharacterItemConditionTargetThisItem) == 0x000014, "Wrong size on FKoratCharacterItemConditionTargetThisItem");
static_assert(offsetof(FKoratCharacterItemConditionTargetThisItem, bCostumeDamageLv) == 0x000000, "Member 'FKoratCharacterItemConditionTargetThisItem::bCostumeDamageLv' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemConditionTargetThisItem, bCostumeScratchLv) == 0x000001, "Member 'FKoratCharacterItemConditionTargetThisItem::bCostumeScratchLv' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemConditionTargetThisItem, CostumeDamageLvNum) == 0x000004, "Member 'FKoratCharacterItemConditionTargetThisItem::CostumeDamageLvNum' has a wrong offset!");
static_assert(offsetof(FKoratCharacterItemConditionTargetThisItem, CostumeScratchLvNum) == 0x00000C, "Member 'FKoratCharacterItemConditionTargetThisItem::CostumeScratchLvNum' has a wrong offset!");

// ScriptStruct SS.KoratCustomEffectColorSetting
// 0x0020 (0x0020 - 0x0000)
struct FKoratCustomEffectColorSetting final
{
public:
	struct FKoratCharacterEffectColorSetDataTypeDataList TargetType;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratCustomEffectColorDataAsset*       CustomEffectColorDataAsset;                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratCustomEffectColorSetting) == 0x000008, "Wrong alignment on FKoratCustomEffectColorSetting");
static_assert(sizeof(FKoratCustomEffectColorSetting) == 0x000020, "Wrong size on FKoratCustomEffectColorSetting");
static_assert(offsetof(FKoratCustomEffectColorSetting, TargetType) == 0x000000, "Member 'FKoratCustomEffectColorSetting::TargetType' has a wrong offset!");
static_assert(offsetof(FKoratCustomEffectColorSetting, CustomEffectColorDataAsset) == 0x000018, "Member 'FKoratCustomEffectColorSetting::CustomEffectColorDataAsset' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemEffect
// 0x04C8 (0x04C8 - 0x0000)
struct FSSCharacterItemEffect final
{
public:
	TArray<struct FKoratCharacterItemCondition>   Conditions;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterItemConditionTargetThisItem ThisItemConditions;                                // 0x0010(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ESSCharacterItemTarget                        Target;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterParameterChanging       ParameterChanging;                                 // 0x0028(0x0290)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoratCharacterResourceChanging        ResourceChanging;                                  // 0x02B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UKoratBuffPhaseDataAsset*               Buff;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratBlastActionDataList>      EnableAdditionalBlast;                             // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         Costume;                                           // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Accessory;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccessoryValue;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCustomEffectColorSetting;                   // 0x0304(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCustomEffectColorSetting         CustomEffectColorSetting;                          // 0x0308(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UKoratMLSDataAsset*                     ActionMLSData;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, class UKoratMLSDataAsset*> UniqueActionMLSData;                               // 0x0330(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	class UKoratMLSDataAsset*                     InGameActionMLSData;                               // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, class UKoratMLSDataAsset*> InGameUniqueActionMLSData;                         // 0x0388(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	class UKoratMLSDataAsset*                     DemoActionMLSData;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKoratCharacterDataList, class UKoratMLSDataAsset*> DemoUniqueActionMLSData;                           // 0x03E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         VoiceSoundCueID;                                   // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VoiceTextID;                                       // 0x0438(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ShopPreviewVoiceID;                                // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteIndex;                                        // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CombinedCharacter;                                 // 0x0464(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGM;                                               // 0x046C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratAiTypeDataList                   AiType;                                            // 0x0474(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiLevel;                                           // 0x047C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroyThisItem;                                   // 0x0480(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroySameItemInTeam;                             // 0x0481(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratCharacterItemDataList>    EquipItems;                                        // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0498(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterItemEffect) == 0x000008, "Wrong alignment on FSSCharacterItemEffect");
static_assert(sizeof(FSSCharacterItemEffect) == 0x0004C8, "Wrong size on FSSCharacterItemEffect");
static_assert(offsetof(FSSCharacterItemEffect, Conditions) == 0x000000, "Member 'FSSCharacterItemEffect::Conditions' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, ThisItemConditions) == 0x000010, "Member 'FSSCharacterItemEffect::ThisItemConditions' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, Target) == 0x000024, "Member 'FSSCharacterItemEffect::Target' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, ParameterChanging) == 0x000028, "Member 'FSSCharacterItemEffect::ParameterChanging' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, ResourceChanging) == 0x0002B8, "Member 'FSSCharacterItemEffect::ResourceChanging' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, Buff) == 0x0002D8, "Member 'FSSCharacterItemEffect::Buff' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, EnableAdditionalBlast) == 0x0002E0, "Member 'FSSCharacterItemEffect::EnableAdditionalBlast' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, Costume) == 0x0002F0, "Member 'FSSCharacterItemEffect::Costume' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, Accessory) == 0x0002F8, "Member 'FSSCharacterItemEffect::Accessory' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, AccessoryValue) == 0x000300, "Member 'FSSCharacterItemEffect::AccessoryValue' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, bEnableCustomEffectColorSetting) == 0x000304, "Member 'FSSCharacterItemEffect::bEnableCustomEffectColorSetting' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, CustomEffectColorSetting) == 0x000308, "Member 'FSSCharacterItemEffect::CustomEffectColorSetting' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, ActionMLSData) == 0x000328, "Member 'FSSCharacterItemEffect::ActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, UniqueActionMLSData) == 0x000330, "Member 'FSSCharacterItemEffect::UniqueActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, InGameActionMLSData) == 0x000380, "Member 'FSSCharacterItemEffect::InGameActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, InGameUniqueActionMLSData) == 0x000388, "Member 'FSSCharacterItemEffect::InGameUniqueActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, DemoActionMLSData) == 0x0003D8, "Member 'FSSCharacterItemEffect::DemoActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, DemoUniqueActionMLSData) == 0x0003E0, "Member 'FSSCharacterItemEffect::DemoUniqueActionMLSData' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, VoiceSoundCueID) == 0x000430, "Member 'FSSCharacterItemEffect::VoiceSoundCueID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, VoiceTextID) == 0x000438, "Member 'FSSCharacterItemEffect::VoiceTextID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, ShopPreviewVoiceID) == 0x000450, "Member 'FSSCharacterItemEffect::ShopPreviewVoiceID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, EmoteIndex) == 0x000460, "Member 'FSSCharacterItemEffect::EmoteIndex' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, CombinedCharacter) == 0x000464, "Member 'FSSCharacterItemEffect::CombinedCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, BGM) == 0x00046C, "Member 'FSSCharacterItemEffect::BGM' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, AiType) == 0x000474, "Member 'FSSCharacterItemEffect::AiType' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, AiLevel) == 0x00047C, "Member 'FSSCharacterItemEffect::AiLevel' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, DestroyThisItem) == 0x000480, "Member 'FSSCharacterItemEffect::DestroyThisItem' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, DestroySameItemInTeam) == 0x000481, "Member 'FSSCharacterItemEffect::DestroySameItemInTeam' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, EquipItems) == 0x000488, "Member 'FSSCharacterItemEffect::EquipItems' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffect, LevelSequence) == 0x000498, "Member 'FSSCharacterItemEffect::LevelSequence' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord final
{
public:
	ESSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionType DisplayCondition;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord, DisplayCondition) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDisplayConditionDataAssetRecord::DisplayCondition' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemEquipmentSetting
// 0x0040 (0x0040 - 0x0000)
struct FSSCharacterItemEquipmentSetting final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      MapID;                                             // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      BaseMapID;                                         // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPPer;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SPPer;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StockNum;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DP;                                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExParam;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSparking;                                       // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLockOn;                                         // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWater;                                        // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDown;                                           // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmoteDuration;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtBattleStart;                                    // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCharacterEntry;                                 // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtFastAvoidanceBlast;                             // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtEmoteStart;                                     // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtGuardCrash;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtSparking;                                       // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtDestroyEnemy;                                   // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtUltimateBlast;                                  // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtNoHitBlast;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterItemEquipmentSetting) == 0x000004, "Wrong alignment on FSSCharacterItemEquipmentSetting");
static_assert(sizeof(FSSCharacterItemEquipmentSetting) == 0x000040, "Wrong size on FSSCharacterItemEquipmentSetting");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, CharacterID) == 0x000000, "Member 'FSSCharacterItemEquipmentSetting::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, MapID) == 0x000008, "Member 'FSSCharacterItemEquipmentSetting::MapID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, BaseMapID) == 0x000010, "Member 'FSSCharacterItemEquipmentSetting::BaseMapID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, HPPer) == 0x000018, "Member 'FSSCharacterItemEquipmentSetting::HPPer' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, SPPer) == 0x00001C, "Member 'FSSCharacterItemEquipmentSetting::SPPer' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, StockNum) == 0x000020, "Member 'FSSCharacterItemEquipmentSetting::StockNum' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, DP) == 0x000024, "Member 'FSSCharacterItemEquipmentSetting::DP' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, ExParam) == 0x000028, "Member 'FSSCharacterItemEquipmentSetting::ExParam' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bIsSparking) == 0x00002C, "Member 'FSSCharacterItemEquipmentSetting::bIsSparking' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bIsLockOn) == 0x00002D, "Member 'FSSCharacterItemEquipmentSetting::bIsLockOn' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bIsInWater) == 0x00002E, "Member 'FSSCharacterItemEquipmentSetting::bIsInWater' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bIsDown) == 0x00002F, "Member 'FSSCharacterItemEquipmentSetting::bIsDown' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, EmoteDuration) == 0x000030, "Member 'FSSCharacterItemEquipmentSetting::EmoteDuration' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtBattleStart) == 0x000034, "Member 'FSSCharacterItemEquipmentSetting::bAtBattleStart' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtCharacterEntry) == 0x000035, "Member 'FSSCharacterItemEquipmentSetting::bAtCharacterEntry' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtFastAvoidanceBlast) == 0x000036, "Member 'FSSCharacterItemEquipmentSetting::bAtFastAvoidanceBlast' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtEmoteStart) == 0x000037, "Member 'FSSCharacterItemEquipmentSetting::bAtEmoteStart' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtGuardCrash) == 0x000038, "Member 'FSSCharacterItemEquipmentSetting::bAtGuardCrash' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtSparking) == 0x000039, "Member 'FSSCharacterItemEquipmentSetting::bAtSparking' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtDestroyEnemy) == 0x00003A, "Member 'FSSCharacterItemEquipmentSetting::bAtDestroyEnemy' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtUltimateBlast) == 0x00003B, "Member 'FSSCharacterItemEquipmentSetting::bAtUltimateBlast' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEquipmentSetting, bAtNoHitBlast) == 0x00003C, "Member 'FSSCharacterItemEquipmentSetting::bAtNoHitBlast' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemEffectState
// 0x04D0 (0x04D0 - 0x0000)
struct FSSCharacterItemEffectState final
{
public:
	struct FSSCharacterItemEffect                 Effect;                                            // 0x0000(0x04C8)(NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExecuted;                                        // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppliedResourceChanging;                           // 0x04CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CB[0x5];                                      // 0x04CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterItemEffectState) == 0x000008, "Wrong alignment on FSSCharacterItemEffectState");
static_assert(sizeof(FSSCharacterItemEffectState) == 0x0004D0, "Wrong size on FSSCharacterItemEffectState");
static_assert(offsetof(FSSCharacterItemEffectState, Effect) == 0x000000, "Member 'FSSCharacterItemEffectState::Effect' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffectState, Enable) == 0x0004C8, "Member 'FSSCharacterItemEffectState::Enable' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffectState, IsExecuted) == 0x0004C9, "Member 'FSSCharacterItemEffectState::IsExecuted' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffectState, AppliedResourceChanging) == 0x0004CA, "Member 'FSSCharacterItemEffectState::AppliedResourceChanging' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemEffectStateElement
// 0x0018 (0x0018 - 0x0000)
struct FSSCharacterItemEffectStateElement final
{
public:
	struct FKoratCharacterItemDataList            ItemID;                                            // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSCharacterItemEffectState>    EffectStates;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterItemEffectStateElement) == 0x000008, "Wrong alignment on FSSCharacterItemEffectStateElement");
static_assert(sizeof(FSSCharacterItemEffectStateElement) == 0x000018, "Wrong size on FSSCharacterItemEffectStateElement");
static_assert(offsetof(FSSCharacterItemEffectStateElement, ItemID) == 0x000000, "Member 'FSSCharacterItemEffectStateElement::ItemID' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemEffectStateElement, EffectStates) == 0x000008, "Member 'FSSCharacterItemEffectStateElement::EffectStates' has a wrong offset!");

// ScriptStruct SS.SSCharacterDataSearchParameter
// 0x0048 (0x0048 - 0x0000)
struct FSSCharacterDataSearchParameter final
{
public:
	EKoratBattleSearchType                        SearchType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewingTargetLockOnSec;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoSearchRadius;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoSearchLockOnSec;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSearchDistance;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchDistance;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraSearchLockOnSec;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSCharacterSearchScaleInActionParameter> AuraSearchScaleInAction;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AuraSearchScaleInSparkingMode;                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EasyFindingScaleByTarget;                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuraLostSec;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewingTargetLockOnWaterDepth;                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoAuraSearch;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoAutoSearch;                                     // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterDataSearchParameter) == 0x000008, "Wrong alignment on FSSCharacterDataSearchParameter");
static_assert(sizeof(FSSCharacterDataSearchParameter) == 0x000048, "Wrong size on FSSCharacterDataSearchParameter");
static_assert(offsetof(FSSCharacterDataSearchParameter, SearchType) == 0x000000, "Member 'FSSCharacterDataSearchParameter::SearchType' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, ViewingTargetLockOnSec) == 0x000004, "Member 'FSSCharacterDataSearchParameter::ViewingTargetLockOnSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AutoSearchRadius) == 0x000008, "Member 'FSSCharacterDataSearchParameter::AutoSearchRadius' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AutoSearchLockOnSec) == 0x00000C, "Member 'FSSCharacterDataSearchParameter::AutoSearchLockOnSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, CameraSearchDistance) == 0x000010, "Member 'FSSCharacterDataSearchParameter::CameraSearchDistance' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AuraSearchDistance) == 0x000014, "Member 'FSSCharacterDataSearchParameter::AuraSearchDistance' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AuraSearchLockOnSec) == 0x000018, "Member 'FSSCharacterDataSearchParameter::AuraSearchLockOnSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AuraSearchScaleInAction) == 0x000020, "Member 'FSSCharacterDataSearchParameter::AuraSearchScaleInAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AuraSearchScaleInSparkingMode) == 0x000030, "Member 'FSSCharacterDataSearchParameter::AuraSearchScaleInSparkingMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, EasyFindingScaleByTarget) == 0x000034, "Member 'FSSCharacterDataSearchParameter::EasyFindingScaleByTarget' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, AuraLostSec) == 0x000038, "Member 'FSSCharacterDataSearchParameter::AuraLostSec' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, ViewingTargetLockOnWaterDepth) == 0x00003C, "Member 'FSSCharacterDataSearchParameter::ViewingTargetLockOnWaterDepth' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, bNoAuraSearch) == 0x000040, "Member 'FSSCharacterDataSearchParameter::bNoAuraSearch' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, bNoAutoSearch) == 0x000041, "Member 'FSSCharacterDataSearchParameter::bNoAutoSearch' has a wrong offset!");
static_assert(offsetof(FSSCharacterDataSearchParameter, bIsValid) == 0x000042, "Member 'FSSCharacterDataSearchParameter::bIsValid' has a wrong offset!");

// ScriptStruct SS.SSSimpleAimLookatAimParameter
// 0x0080 (0x0080 - 0x0000)
struct FSSSimpleAimLookatAimParameter final
{
public:
	struct FTransform                             EffectorTransform;                                 // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine1;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine2;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSSimpleAimLookatNodeParameter        Spine3;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSimpleAimLookatAimParameter) == 0x000010, "Wrong alignment on FSSSimpleAimLookatAimParameter");
static_assert(sizeof(FSSSimpleAimLookatAimParameter) == 0x000080, "Wrong size on FSSSimpleAimLookatAimParameter");
static_assert(offsetof(FSSSimpleAimLookatAimParameter, EffectorTransform) == 0x000000, "Member 'FSSSimpleAimLookatAimParameter::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatAimParameter, Spine1) == 0x000060, "Member 'FSSSimpleAimLookatAimParameter::Spine1' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatAimParameter, Spine2) == 0x000068, "Member 'FSSSimpleAimLookatAimParameter::Spine2' has a wrong offset!");
static_assert(offsetof(FSSSimpleAimLookatAimParameter, Spine3) == 0x000070, "Member 'FSSSimpleAimLookatAimParameter::Spine3' has a wrong offset!");

// ScriptStruct SS.SSToonPointLightCtrlNativeTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FSSToonPointLightCtrlNativeTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSToonPointLightCtrlNativeTickFunction) == 0x000008, "Wrong alignment on FSSToonPointLightCtrlNativeTickFunction");
static_assert(sizeof(FSSToonPointLightCtrlNativeTickFunction) == 0x000030, "Wrong size on FSSToonPointLightCtrlNativeTickFunction");

// ScriptStruct SS.SSCharacterWarpCmdTransporter
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FSSCharacterWarpCmdTransporter final
{
public:
	struct FSSCharacterWarpCommandInfo            CommandInfo;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, Interp, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   ActiveAction;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionCategoryType                      ActiveActionMainType;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratActionSubCategoryType                   ActiveActionSubType;                               // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           OwnerCharacter;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSCharacter*                           TargetCharacter;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocatorName;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x80];                                      // 0x0040(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterWarpCmdTransporter) == 0x000010, "Wrong alignment on FSSCharacterWarpCmdTransporter");
static_assert(sizeof(FSSCharacterWarpCmdTransporter) == 0x0000C0, "Wrong size on FSSCharacterWarpCmdTransporter");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, CommandInfo) == 0x000000, "Member 'FSSCharacterWarpCmdTransporter::CommandInfo' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, ActiveAction) == 0x000004, "Member 'FSSCharacterWarpCmdTransporter::ActiveAction' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, ActiveActionMainType) == 0x00000C, "Member 'FSSCharacterWarpCmdTransporter::ActiveActionMainType' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, ActiveActionSubType) == 0x00000D, "Member 'FSSCharacterWarpCmdTransporter::ActiveActionSubType' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, OwnerCharacter) == 0x000010, "Member 'FSSCharacterWarpCmdTransporter::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, OwnerActor) == 0x000018, "Member 'FSSCharacterWarpCmdTransporter::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, TargetCharacter) == 0x000020, "Member 'FSSCharacterWarpCmdTransporter::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, OtherActor) == 0x000028, "Member 'FSSCharacterWarpCmdTransporter::OtherActor' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, LocatorName) == 0x000030, "Member 'FSSCharacterWarpCmdTransporter::LocatorName' has a wrong offset!");
static_assert(offsetof(FSSCharacterWarpCmdTransporter, SocketName) == 0x000038, "Member 'FSSCharacterWarpCmdTransporter::SocketName' has a wrong offset!");

// ScriptStruct SS.CharaReaderLoadData
// 0x0088 (0x0088 - 0x0000)
struct FCharaReaderLoadData final
{
public:
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0000(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterCostumeDataList         CostumeDataList;                                   // 0x0008(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    EquipItemList;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           LoadingClasses;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         LoadingInstances;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           LoadedClasses;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         LoadedInstances;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           CameraLoadedClasses;                               // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         CameraLoadedInstances;                             // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSCharacter>            UnloadCheckCharacter;                              // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaReaderLoadData) == 0x000008, "Wrong alignment on FCharaReaderLoadData");
static_assert(sizeof(FCharaReaderLoadData) == 0x000088, "Wrong size on FCharaReaderLoadData");
static_assert(offsetof(FCharaReaderLoadData, CharacterDataList) == 0x000000, "Member 'FCharaReaderLoadData::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, CostumeDataList) == 0x000008, "Member 'FCharaReaderLoadData::CostumeDataList' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, EquipItemList) == 0x000010, "Member 'FCharaReaderLoadData::EquipItemList' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, LoadingClasses) == 0x000020, "Member 'FCharaReaderLoadData::LoadingClasses' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, LoadingInstances) == 0x000030, "Member 'FCharaReaderLoadData::LoadingInstances' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, LoadedClasses) == 0x000040, "Member 'FCharaReaderLoadData::LoadedClasses' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, LoadedInstances) == 0x000050, "Member 'FCharaReaderLoadData::LoadedInstances' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, CameraLoadedClasses) == 0x000060, "Member 'FCharaReaderLoadData::CameraLoadedClasses' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, CameraLoadedInstances) == 0x000070, "Member 'FCharaReaderLoadData::CameraLoadedInstances' has a wrong offset!");
static_assert(offsetof(FCharaReaderLoadData, UnloadCheckCharacter) == 0x000080, "Member 'FCharaReaderLoadData::UnloadCheckCharacter' has a wrong offset!");

// ScriptStruct SS.SSCameraReadyQueue
// 0x0010 (0x0010 - 0x0000)
struct FSSCameraReadyQueue final
{
public:
	TArray<struct FSSCameraReady>                 CameraReadys;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCameraReadyQueue) == 0x000008, "Wrong alignment on FSSCameraReadyQueue");
static_assert(sizeof(FSSCameraReadyQueue) == 0x000010, "Wrong size on FSSCameraReadyQueue");
static_assert(offsetof(FSSCameraReadyQueue, CameraReadys) == 0x000000, "Member 'FSSCameraReadyQueue::CameraReadys' has a wrong offset!");

// ScriptStruct SS.SSCutCameraInertiaFactor
// 0x0180 (0x0180 - 0x0000)
struct FSSCutCameraInertiaFactor final
{
public:
	bool                                          PreLocationUpdated;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreLocationCam;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreLocationLat;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreLocationLatUpdated;                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreRotationUpdated;                                // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PreRotationCam;                                    // 0x0040(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  PreRotationLat;                                    // 0x0060(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreSpeedLat;                                       // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CamMoveAlert;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreDelayUpdated;                                   // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreDelayLocationCam;                               // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreDelayLocationLat;                               // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayLocationUpdated;                              // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DelayLocationCam;                                  // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DelayLocationLat;                                  // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayLocationLatUpdated;                           // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCentrifugalForceAccumlatorUpdated;                // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CentrifugalForceAccumlator;                        // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayRotationUpdated;                              // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DelayRotationCam;                                  // 0x0120(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  DelayRotationLat;                                  // 0x0140(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayRollUpdated;                                  // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayRollCam;                                      // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayPitchUpdated;                                 // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayPitchCam;                                     // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrePitchUpdated;                                   // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrePitchCam;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCutCameraInertiaFactor) == 0x000010, "Wrong alignment on FSSCutCameraInertiaFactor");
static_assert(sizeof(FSSCutCameraInertiaFactor) == 0x000180, "Wrong size on FSSCutCameraInertiaFactor");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreLocationUpdated) == 0x000000, "Member 'FSSCutCameraInertiaFactor::PreLocationUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreLocationCam) == 0x000008, "Member 'FSSCutCameraInertiaFactor::PreLocationCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreLocationLat) == 0x000020, "Member 'FSSCutCameraInertiaFactor::PreLocationLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreLocationLatUpdated) == 0x000038, "Member 'FSSCutCameraInertiaFactor::PreLocationLatUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreRotationUpdated) == 0x000039, "Member 'FSSCutCameraInertiaFactor::PreRotationUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreRotationCam) == 0x000040, "Member 'FSSCutCameraInertiaFactor::PreRotationCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreRotationLat) == 0x000060, "Member 'FSSCutCameraInertiaFactor::PreRotationLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreSpeedLat) == 0x000080, "Member 'FSSCutCameraInertiaFactor::PreSpeedLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, CamMoveAlert) == 0x000098, "Member 'FSSCutCameraInertiaFactor::CamMoveAlert' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreDelayUpdated) == 0x00009C, "Member 'FSSCutCameraInertiaFactor::PreDelayUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreDelayLocationCam) == 0x0000A0, "Member 'FSSCutCameraInertiaFactor::PreDelayLocationCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PreDelayLocationLat) == 0x0000B8, "Member 'FSSCutCameraInertiaFactor::PreDelayLocationLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayLocationUpdated) == 0x0000D0, "Member 'FSSCutCameraInertiaFactor::DelayLocationUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayLocationCam) == 0x0000D8, "Member 'FSSCutCameraInertiaFactor::DelayLocationCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayLocationLat) == 0x0000F0, "Member 'FSSCutCameraInertiaFactor::DelayLocationLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayLocationLatUpdated) == 0x000108, "Member 'FSSCutCameraInertiaFactor::DelayLocationLatUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, bCentrifugalForceAccumlatorUpdated) == 0x000109, "Member 'FSSCutCameraInertiaFactor::bCentrifugalForceAccumlatorUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, CentrifugalForceAccumlator) == 0x00010C, "Member 'FSSCutCameraInertiaFactor::CentrifugalForceAccumlator' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayRotationUpdated) == 0x000110, "Member 'FSSCutCameraInertiaFactor::DelayRotationUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayRotationCam) == 0x000120, "Member 'FSSCutCameraInertiaFactor::DelayRotationCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayRotationLat) == 0x000140, "Member 'FSSCutCameraInertiaFactor::DelayRotationLat' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayRollUpdated) == 0x000160, "Member 'FSSCutCameraInertiaFactor::DelayRollUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayRollCam) == 0x000164, "Member 'FSSCutCameraInertiaFactor::DelayRollCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayPitchUpdated) == 0x000168, "Member 'FSSCutCameraInertiaFactor::DelayPitchUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, DelayPitchCam) == 0x00016C, "Member 'FSSCutCameraInertiaFactor::DelayPitchCam' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PrePitchUpdated) == 0x000170, "Member 'FSSCutCameraInertiaFactor::PrePitchUpdated' has a wrong offset!");
static_assert(offsetof(FSSCutCameraInertiaFactor, PrePitchCam) == 0x000174, "Member 'FSSCutCameraInertiaFactor::PrePitchCam' has a wrong offset!");

// ScriptStruct SS.KoratDamageReactionDataAssetRecord
// 0x0038 (0x0038 - 0x0000)
struct FKoratDamageReactionDataAssetRecord final
{
public:
	struct FKoratActionDataList                   FrontDamageReaction;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   BackDamageReaction;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   FrontGuardReaction;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   UpperGuardReaction;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   UnderGuardReaction;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   GuardBreakReaction;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratActionDataList                   AttackBreakReaction;                               // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDamageReactionDataAssetRecord) == 0x000004, "Wrong alignment on FKoratDamageReactionDataAssetRecord");
static_assert(sizeof(FKoratDamageReactionDataAssetRecord) == 0x000038, "Wrong size on FKoratDamageReactionDataAssetRecord");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, FrontDamageReaction) == 0x000000, "Member 'FKoratDamageReactionDataAssetRecord::FrontDamageReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, BackDamageReaction) == 0x000008, "Member 'FKoratDamageReactionDataAssetRecord::BackDamageReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, FrontGuardReaction) == 0x000010, "Member 'FKoratDamageReactionDataAssetRecord::FrontGuardReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, UpperGuardReaction) == 0x000018, "Member 'FKoratDamageReactionDataAssetRecord::UpperGuardReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, UnderGuardReaction) == 0x000020, "Member 'FKoratDamageReactionDataAssetRecord::UnderGuardReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, GuardBreakReaction) == 0x000028, "Member 'FKoratDamageReactionDataAssetRecord::GuardBreakReaction' has a wrong offset!");
static_assert(offsetof(FKoratDamageReactionDataAssetRecord, AttackBreakReaction) == 0x000030, "Member 'FKoratDamageReactionDataAssetRecord::AttackBreakReaction' has a wrong offset!");

// ScriptStruct SS.SSDebugAdventureIFTestSetting
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSSDebugAdventureIFTestSetting final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataList                CharacterDataList;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEventRepeat;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDebugAdventureIFTestSetting) == 0x000008, "Wrong alignment on FSSDebugAdventureIFTestSetting");
static_assert(sizeof(FSSDebugAdventureIFTestSetting) == 0x000020, "Wrong size on FSSDebugAdventureIFTestSetting");
static_assert(offsetof(FSSDebugAdventureIFTestSetting, CharacterDataList) == 0x000008, "Member 'FSSDebugAdventureIFTestSetting::CharacterDataList' has a wrong offset!");
static_assert(offsetof(FSSDebugAdventureIFTestSetting, EventName) == 0x000010, "Member 'FSSDebugAdventureIFTestSetting::EventName' has a wrong offset!");
static_assert(offsetof(FSSDebugAdventureIFTestSetting, bEventRepeat) == 0x000018, "Member 'FSSDebugAdventureIFTestSetting::bEventRepeat' has a wrong offset!");

// ScriptStruct SS.SSDebugUIWindowSettingValues
// 0x0030 (0x0030 - 0x0000)
struct FSSDebugUIWindowSettingValues final
{
public:
	bool                                          bUseTitleBar;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSize;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FontSize;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               WindowSize;                                        // 0x0010(0x0020)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDebugUIWindowSettingValues) == 0x000010, "Wrong alignment on FSSDebugUIWindowSettingValues");
static_assert(sizeof(FSSDebugUIWindowSettingValues) == 0x000030, "Wrong size on FSSDebugUIWindowSettingValues");
static_assert(offsetof(FSSDebugUIWindowSettingValues, bUseTitleBar) == 0x000000, "Member 'FSSDebugUIWindowSettingValues::bUseTitleBar' has a wrong offset!");
static_assert(offsetof(FSSDebugUIWindowSettingValues, bAutoSize) == 0x000001, "Member 'FSSDebugUIWindowSettingValues::bAutoSize' has a wrong offset!");
static_assert(offsetof(FSSDebugUIWindowSettingValues, FontSize) == 0x000004, "Member 'FSSDebugUIWindowSettingValues::FontSize' has a wrong offset!");
static_assert(offsetof(FSSDebugUIWindowSettingValues, WindowSize) == 0x000010, "Member 'FSSDebugUIWindowSettingValues::WindowSize' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFExhibitionSetting
// 0x0010 (0x0010 - 0x0000)
struct FSSDragonAdventureIFExhibitionSetting final
{
public:
	TArray<class FName>                           EndEvent;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFExhibitionSetting) == 0x000008, "Wrong alignment on FSSDragonAdventureIFExhibitionSetting");
static_assert(sizeof(FSSDragonAdventureIFExhibitionSetting) == 0x000010, "Wrong size on FSSDragonAdventureIFExhibitionSetting");
static_assert(offsetof(FSSDragonAdventureIFExhibitionSetting, EndEvent) == 0x000000, "Member 'FSSDragonAdventureIFExhibitionSetting::EndEvent' has a wrong offset!");

// ScriptStruct SS.SSDragonAdventureIFCharacterBase
// 0x0010 (0x0010 - 0x0000)
struct FSSDragonAdventureIFCharacterBase final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AStaticMeshActor*                       BaseActor;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDragonAdventureIFCharacterBase) == 0x000008, "Wrong alignment on FSSDragonAdventureIFCharacterBase");
static_assert(sizeof(FSSDragonAdventureIFCharacterBase) == 0x000010, "Wrong size on FSSDragonAdventureIFCharacterBase");
static_assert(offsetof(FSSDragonAdventureIFCharacterBase, BaseActor) == 0x000008, "Member 'FSSDragonAdventureIFCharacterBase::BaseActor' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUISetupParameter
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticBattleCutEditorUISetupParameter final
{
public:
	class ASSDramaticBattleCutEditorController*   CutEditorController;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSDramaticBattleNewCutEditorController* NewCutEditorController;                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUISetupParameter) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorUISetupParameter");
static_assert(sizeof(FSSDramaticBattleCutEditorUISetupParameter) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorUISetupParameter");
static_assert(offsetof(FSSDramaticBattleCutEditorUISetupParameter, CutEditorController) == 0x000000, "Member 'FSSDramaticBattleCutEditorUISetupParameter::CutEditorController' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorUISetupParameter, NewCutEditorController) == 0x000008, "Member 'FSSDramaticBattleCutEditorUISetupParameter::NewCutEditorController' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterUpdatePreviewOnFocused");

// ScriptStruct SS.SSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused
// 0x0001 (0x0001 - 0x0000)
struct FSSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused) == 0x000001, "Wrong alignment on FSSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused");
static_assert(sizeof(FSSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused) == 0x000001, "Wrong size on FSSDramaticBattleCutEditorExecuteParameterUpdateTimeLineOnFocused");

// ScriptStruct SS.SSDramaticBatlleCutEditorSelectTargetUnit
// 0x0028 (0x0028 - 0x0000)
struct FSSDramaticBatlleCutEditorSelectTargetUnit final
{
public:
	class FName                                   SituationKey;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDRMEditSituationDataAsset*           SituationDataAsset;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PictureKey;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSDRMEditPictureDataAsset*             PictureDataAsset;                                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFilterClipped;                                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticBatlleCutEditorSelectTargetUnit) == 0x000008, "Wrong alignment on FSSDramaticBatlleCutEditorSelectTargetUnit");
static_assert(sizeof(FSSDramaticBatlleCutEditorSelectTargetUnit) == 0x000028, "Wrong size on FSSDramaticBatlleCutEditorSelectTargetUnit");
static_assert(offsetof(FSSDramaticBatlleCutEditorSelectTargetUnit, SituationKey) == 0x000000, "Member 'FSSDramaticBatlleCutEditorSelectTargetUnit::SituationKey' has a wrong offset!");
static_assert(offsetof(FSSDramaticBatlleCutEditorSelectTargetUnit, SituationDataAsset) == 0x000008, "Member 'FSSDramaticBatlleCutEditorSelectTargetUnit::SituationDataAsset' has a wrong offset!");
static_assert(offsetof(FSSDramaticBatlleCutEditorSelectTargetUnit, PictureKey) == 0x000010, "Member 'FSSDramaticBatlleCutEditorSelectTargetUnit::PictureKey' has a wrong offset!");
static_assert(offsetof(FSSDramaticBatlleCutEditorSelectTargetUnit, PictureDataAsset) == 0x000018, "Member 'FSSDramaticBatlleCutEditorSelectTargetUnit::PictureDataAsset' has a wrong offset!");
static_assert(offsetof(FSSDramaticBatlleCutEditorSelectTargetUnit, IsFilterClipped) == 0x000020, "Member 'FSSDramaticBatlleCutEditorSelectTargetUnit::IsFilterClipped' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup
// 0x00E0 (0x00E0 - 0x0000)
struct FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup final
{
public:
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup) == 0x000010, "Wrong alignment on FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup");
static_assert(sizeof(FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup) == 0x0000E0, "Wrong size on FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup");
static_assert(offsetof(FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup, ColorAndOpacity) == 0x000000, "Member 'FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup, Brush) == 0x000010, "Member 'FSSDramaticBattleCutEdtiorInitalSelectThumbnailAreaBackup::Brush' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText
// 0x0020 (0x0020 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText) == 0x000020, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText, Value) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText::Value' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText, Text) == 0x000008, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText::Text' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray
// 0x0010 (0x0010 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray final
{
public:
	TArray<struct FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolText> SelectParameterBoolTexts;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray) == 0x000010, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray, SelectParameterBoolTexts) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowSelectParameterBoolTextArray::SelectParameterBoolTexts' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData
// 0x0020 (0x0020 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData final
{
public:
	ESSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonFunctionType Function;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData) == 0x000020, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData, Function) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData::Function' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData, Text) == 0x000008, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData::Text' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorInitialSelectUIWindowDialogData
// 0x0040 (0x0040 - 0x0000)
struct FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ContextText;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSSDramaticBattleCutEditorInitialSelectUIWindowDialogButtonData> Buttons;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData) == 0x000008, "Wrong alignment on FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData");
static_assert(sizeof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData) == 0x000040, "Wrong size on FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData, TitleText) == 0x000000, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData::TitleText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData, ContextText) == 0x000018, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData::ContextText' has a wrong offset!");
static_assert(offsetof(FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData, Buttons) == 0x000030, "Member 'FSSDramaticBattleCutEditorInitialSelectUIWindowDialogData::Buttons' has a wrong offset!");

// ScriptStruct SS.SSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord final
{
public:
	struct FKoratButtonGuideDataList              ButtonGuide;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord) == 0x000004, "Wrong alignment on FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord");
static_assert(sizeof(FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord) == 0x000008, "Wrong size on FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord");
static_assert(offsetof(FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord, ButtonGuide) == 0x000000, "Member 'FSSDramaticBattleCutEditorUIWindowButtonGuideDataAssetRecord::ButtonGuide' has a wrong offset!");

// ScriptStruct SS.KoratDramaticTimeSliceData
// 0x0050 (0x0050 - 0x0000)
struct FKoratDramaticTimeSliceData final
{
public:
	class FText                                   ShowText;                                          // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USSEventSceneDEDataAsset> SceneDataAssetPtr;                                 // 0x0018(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneId;                                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticTimeSliceData) == 0x000008, "Wrong alignment on FKoratDramaticTimeSliceData");
static_assert(sizeof(FKoratDramaticTimeSliceData) == 0x000050, "Wrong size on FKoratDramaticTimeSliceData");
static_assert(offsetof(FKoratDramaticTimeSliceData, ShowText) == 0x000000, "Member 'FKoratDramaticTimeSliceData::ShowText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSliceData, SceneDataAssetPtr) == 0x000018, "Member 'FKoratDramaticTimeSliceData::SceneDataAssetPtr' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTimeSliceData, SceneId) == 0x000048, "Member 'FKoratDramaticTimeSliceData::SceneId' has a wrong offset!");

// ScriptStruct SS.KoratEditCharaDataStruct
// 0x0030 (0x0030 - 0x0000)
struct FKoratEditCharaDataStruct final
{
public:
	TArray<struct FKoratDramaticBattleCharacter>  BeforeAlliesTeam;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticBattleCharacter>  BeforeEnemyTeam;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticGuestCharacterStruct> BeforeGuestCharacterArray;                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEditCharaDataStruct) == 0x000008, "Wrong alignment on FKoratEditCharaDataStruct");
static_assert(sizeof(FKoratEditCharaDataStruct) == 0x000030, "Wrong size on FKoratEditCharaDataStruct");
static_assert(offsetof(FKoratEditCharaDataStruct, BeforeAlliesTeam) == 0x000000, "Member 'FKoratEditCharaDataStruct::BeforeAlliesTeam' has a wrong offset!");
static_assert(offsetof(FKoratEditCharaDataStruct, BeforeEnemyTeam) == 0x000010, "Member 'FKoratEditCharaDataStruct::BeforeEnemyTeam' has a wrong offset!");
static_assert(offsetof(FKoratEditCharaDataStruct, BeforeGuestCharacterArray) == 0x000020, "Member 'FKoratEditCharaDataStruct::BeforeGuestCharacterArray' has a wrong offset!");

// ScriptStruct SS.KoratDramaticEditReplaceWord
// 0x0020 (0x0020 - 0x0000)
struct FKoratDramaticEditReplaceWord final
{
public:
	class FText                                   ReplaceWord;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratReplaceTextCategry                      TextCategory;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticEditReplaceWord) == 0x000008, "Wrong alignment on FKoratDramaticEditReplaceWord");
static_assert(sizeof(FKoratDramaticEditReplaceWord) == 0x000020, "Wrong size on FKoratDramaticEditReplaceWord");
static_assert(offsetof(FKoratDramaticEditReplaceWord, ReplaceWord) == 0x000000, "Member 'FKoratDramaticEditReplaceWord::ReplaceWord' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditReplaceWord, TextCategory) == 0x000018, "Member 'FKoratDramaticEditReplaceWord::TextCategory' has a wrong offset!");

// ScriptStruct SS.SSDramaticEditSelectingTextData
// 0x000C (0x000C - 0x0000)
struct FSSDramaticEditSelectingTextData final
{
public:
	class FName                                   NowSelectingText;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSDramaticEditSelectingTextData) == 0x000004, "Wrong alignment on FSSDramaticEditSelectingTextData");
static_assert(sizeof(FSSDramaticEditSelectingTextData) == 0x00000C, "Wrong size on FSSDramaticEditSelectingTextData");
static_assert(offsetof(FSSDramaticEditSelectingTextData, NowSelectingText) == 0x000000, "Member 'FSSDramaticEditSelectingTextData::NowSelectingText' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSummaryCommonData
// 0x0028 (0x0028 - 0x0000)
struct FKoratDramaticBattleSummaryCommonData final
{
public:
	float                                         TextDisplayStartTime;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextDisplaySpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextDisplayPosition;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineSpacingOfSummaryText;                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGMData;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSummaryCommonData) == 0x000008, "Wrong alignment on FKoratDramaticBattleSummaryCommonData");
static_assert(sizeof(FKoratDramaticBattleSummaryCommonData) == 0x000028, "Wrong size on FKoratDramaticBattleSummaryCommonData");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, TextDisplayStartTime) == 0x000000, "Member 'FKoratDramaticBattleSummaryCommonData::TextDisplayStartTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, TextDisplaySpeed) == 0x000004, "Member 'FKoratDramaticBattleSummaryCommonData::TextDisplaySpeed' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, TextDisplayPosition) == 0x000008, "Member 'FKoratDramaticBattleSummaryCommonData::TextDisplayPosition' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, TextSize) == 0x000018, "Member 'FKoratDramaticBattleSummaryCommonData::TextSize' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, LineSpacingOfSummaryText) == 0x00001C, "Member 'FKoratDramaticBattleSummaryCommonData::LineSpacingOfSummaryText' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummaryCommonData, BGMData) == 0x000020, "Member 'FKoratDramaticBattleSummaryCommonData::BGMData' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSummarySet
// 0x0038 (0x0038 - 0x0000)
struct FKoratDramaticBattleSummarySet final
{
public:
	TArray<struct FKoratDramaticBattleSummary>    SummaryOfStory;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleSummaryCommonData  SummaryCommonData;                                 // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSummarySet) == 0x000008, "Wrong alignment on FKoratDramaticBattleSummarySet");
static_assert(sizeof(FKoratDramaticBattleSummarySet) == 0x000038, "Wrong size on FKoratDramaticBattleSummarySet");
static_assert(offsetof(FKoratDramaticBattleSummarySet, SummaryOfStory) == 0x000000, "Member 'FKoratDramaticBattleSummarySet::SummaryOfStory' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSummarySet, SummaryCommonData) == 0x000010, "Member 'FKoratDramaticBattleSummarySet::SummaryCommonData' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattleSaveDataRecord
// 0x0350 (0x0350 - 0x0000)
struct FKoratDramaticBattleSaveDataRecord final
{
public:
	struct FKoratDramaticTimeSlices               TimeSlices;                                        // 0x0000(0x00C0)(NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleTitle              BattleTitle;                                       // 0x00C0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticThumbnail                DramaticBattleThumbnail;                           // 0x00E8(0x00C0)(NativeAccessSpecifierPublic)
	EKortaDramticBattleCategory                   BattleCategory;                                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratDramaticBattleCharacter>  AlliesTeam;                                        // 0x01B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterItemDataList>    BannedEquipItems;                                  // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticBattleCharacter>  EnemyTeam;                                         // 0x01D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratDramaticGuestCharacterStruct> GuestCharacterArray;                               // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        GuestCharacters;                                   // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratMapDataList>              DramamaticMapList;                                 // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratBattleDirectingData              BattleDirecting;                                   // 0x0210(0x0100)(NativeAccessSpecifierPublic)
	struct FKoratDramaticExtraOption              ExtraOption;                                       // 0x0310(0x0030)(NativeAccessSpecifierPublic)
	struct FKoratDramaticAdventureIFOption        AdventureIFOption;                                 // 0x0340(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattleSaveDataRecord) == 0x000008, "Wrong alignment on FKoratDramaticBattleSaveDataRecord");
static_assert(sizeof(FKoratDramaticBattleSaveDataRecord) == 0x000350, "Wrong size on FKoratDramaticBattleSaveDataRecord");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, TimeSlices) == 0x000000, "Member 'FKoratDramaticBattleSaveDataRecord::TimeSlices' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, BattleTitle) == 0x0000C0, "Member 'FKoratDramaticBattleSaveDataRecord::BattleTitle' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, DramaticBattleThumbnail) == 0x0000E8, "Member 'FKoratDramaticBattleSaveDataRecord::DramaticBattleThumbnail' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, BattleCategory) == 0x0001A8, "Member 'FKoratDramaticBattleSaveDataRecord::BattleCategory' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, AlliesTeam) == 0x0001B0, "Member 'FKoratDramaticBattleSaveDataRecord::AlliesTeam' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, BannedEquipItems) == 0x0001C0, "Member 'FKoratDramaticBattleSaveDataRecord::BannedEquipItems' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, EnemyTeam) == 0x0001D0, "Member 'FKoratDramaticBattleSaveDataRecord::EnemyTeam' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, GuestCharacterArray) == 0x0001E0, "Member 'FKoratDramaticBattleSaveDataRecord::GuestCharacterArray' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, GuestCharacters) == 0x0001F0, "Member 'FKoratDramaticBattleSaveDataRecord::GuestCharacters' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, DramamaticMapList) == 0x000200, "Member 'FKoratDramaticBattleSaveDataRecord::DramamaticMapList' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, BattleDirecting) == 0x000210, "Member 'FKoratDramaticBattleSaveDataRecord::BattleDirecting' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, ExtraOption) == 0x000310, "Member 'FKoratDramaticBattleSaveDataRecord::ExtraOption' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattleSaveDataRecord, AdventureIFOption) == 0x000340, "Member 'FKoratDramaticBattleSaveDataRecord::AdventureIFOption' has a wrong offset!");

// ScriptStruct SS.SSDRMEditSituationErrorCombination
// 0x0014 (0x0014 - 0x0000)
struct FSSDRMEditSituationErrorCombination final
{
public:
	struct FKoratDRMEditCameraDataList            Camera;                                            // 0x0000(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDRMEditActionDataList            Action;                                            // 0x0008(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDRMEditSituationErrorCombination) == 0x000004, "Wrong alignment on FSSDRMEditSituationErrorCombination");
static_assert(sizeof(FSSDRMEditSituationErrorCombination) == 0x000014, "Wrong size on FSSDRMEditSituationErrorCombination");
static_assert(offsetof(FSSDRMEditSituationErrorCombination, Camera) == 0x000000, "Member 'FSSDRMEditSituationErrorCombination::Camera' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationErrorCombination, Action) == 0x000008, "Member 'FSSDRMEditSituationErrorCombination::Action' has a wrong offset!");
static_assert(offsetof(FSSDRMEditSituationErrorCombination, PositionIndex) == 0x000010, "Member 'FSSDRMEditSituationErrorCombination::PositionIndex' has a wrong offset!");

// ScriptStruct SS.KoratOverrideColorData
// 0x0178 (0x0178 - 0x0000)
struct FKoratOverrideColorData final
{
public:
	TArray<struct FKoratCharacterDataList>        DefaultIgnore;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratCustomEffectColorData            Default;                                           // 0x0010(0x0158)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKoratOverrideCharacterColorData> CustomRecoreds;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOverrideColorData) == 0x000008, "Wrong alignment on FKoratOverrideColorData");
static_assert(sizeof(FKoratOverrideColorData) == 0x000178, "Wrong size on FKoratOverrideColorData");
static_assert(offsetof(FKoratOverrideColorData, DefaultIgnore) == 0x000000, "Member 'FKoratOverrideColorData::DefaultIgnore' has a wrong offset!");
static_assert(offsetof(FKoratOverrideColorData, Default) == 0x000010, "Member 'FKoratOverrideColorData::Default' has a wrong offset!");
static_assert(offsetof(FKoratOverrideColorData, CustomRecoreds) == 0x000168, "Member 'FKoratOverrideColorData::CustomRecoreds' has a wrong offset!");

// ScriptStruct SS.KoratBulletDirection
// 0x0010 (0x0010 - 0x0000)
struct FKoratBulletDirection final
{
public:
	TArray<struct FRotator>                       RotatorArray;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBulletDirection) == 0x000008, "Wrong alignment on FKoratBulletDirection");
static_assert(sizeof(FKoratBulletDirection) == 0x000010, "Wrong size on FKoratBulletDirection");
static_assert(offsetof(FKoratBulletDirection, RotatorArray) == 0x000000, "Member 'FKoratBulletDirection::RotatorArray' has a wrong offset!");

// ScriptStruct SS.SSEffectPedestalLevelSequencePlayer
// 0x0058 (0x0058 - 0x0000)
struct FSSEffectPedestalLevelSequencePlayer final
{
public:
	class ASSLevelSequenceActor*                  LevelSequenceActor;                                // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x48];                                      // 0x0010(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEffectPedestalLevelSequencePlayer) == 0x000008, "Wrong alignment on FSSEffectPedestalLevelSequencePlayer");
static_assert(sizeof(FSSEffectPedestalLevelSequencePlayer) == 0x000058, "Wrong size on FSSEffectPedestalLevelSequencePlayer");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlayer, LevelSequenceActor) == 0x000000, "Member 'FSSEffectPedestalLevelSequencePlayer::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FSSEffectPedestalLevelSequencePlayer, LevelSequence) == 0x000008, "Member 'FSSEffectPedestalLevelSequencePlayer::LevelSequence' has a wrong offset!");

// ScriptStruct SS.KoratEffectToonPointLightGroupDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FKoratEffectToonPointLightGroupDataAssetRecord final
{
public:
	EKoratEffectToonPointLightGroupType           GroupType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MatchingName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MatchingFolderNames;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratEffectToonPointLightTargetType          TargetType;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratEffectToonPointLightDataType            DataType;                                          // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratEffectToonPointLightGroupDataAssetRecord) == 0x000008, "Wrong alignment on FKoratEffectToonPointLightGroupDataAssetRecord");
static_assert(sizeof(FKoratEffectToonPointLightGroupDataAssetRecord) == 0x000028, "Wrong size on FKoratEffectToonPointLightGroupDataAssetRecord");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, GroupType) == 0x000000, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::GroupType' has a wrong offset!");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, MatchingName) == 0x000004, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::MatchingName' has a wrong offset!");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, MatchingFolderNames) == 0x000010, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::MatchingFolderNames' has a wrong offset!");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, Priority) == 0x000020, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::Priority' has a wrong offset!");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, TargetType) == 0x000024, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::TargetType' has a wrong offset!");
static_assert(offsetof(FKoratEffectToonPointLightGroupDataAssetRecord, DataType) == 0x000025, "Member 'FKoratEffectToonPointLightGroupDataAssetRecord::DataType' has a wrong offset!");

// ScriptStruct SS.DirectionalLightDefaultSettings
// 0x0038 (0x0038 - 0x0000)
struct FDirectionalLightDefaultSettings final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkylightAmbient;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightDefaultSettings) == 0x000008, "Wrong alignment on FDirectionalLightDefaultSettings");
static_assert(sizeof(FDirectionalLightDefaultSettings) == 0x000038, "Wrong size on FDirectionalLightDefaultSettings");
static_assert(offsetof(FDirectionalLightDefaultSettings, Direction) == 0x000000, "Member 'FDirectionalLightDefaultSettings::Direction' has a wrong offset!");
static_assert(offsetof(FDirectionalLightDefaultSettings, LightColor) == 0x000018, "Member 'FDirectionalLightDefaultSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightDefaultSettings, SkylightAmbient) == 0x000028, "Member 'FDirectionalLightDefaultSettings::SkylightAmbient' has a wrong offset!");

// ScriptStruct SS.ToonLightControlSettingAtCameraSequence
// 0x0010 (0x0018 - 0x0008)
struct FToonLightControlSettingAtCameraSequence final : public FTableRowBase
{
public:
	struct FToonLightControlSettingAtCameraSequenceData ToonLightSetting;                                  // 0x0008(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FToonLightControlSettingAtCameraSequence) == 0x000008, "Wrong alignment on FToonLightControlSettingAtCameraSequence");
static_assert(sizeof(FToonLightControlSettingAtCameraSequence) == 0x000018, "Wrong size on FToonLightControlSettingAtCameraSequence");
static_assert(offsetof(FToonLightControlSettingAtCameraSequence, ToonLightSetting) == 0x000008, "Member 'FToonLightControlSettingAtCameraSequence::ToonLightSetting' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCtrlBattleCharacter
// 0x0020 (0x0020 - 0x0000)
struct FSSEventSceneCtrlBattleCharacter final
{
public:
	class ASSCharacter*                           Character;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKoratMLSDataAsset*                     MlsDataAsset;                                      // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCtrlBattleCharacter) == 0x000008, "Wrong alignment on FSSEventSceneCtrlBattleCharacter");
static_assert(sizeof(FSSEventSceneCtrlBattleCharacter) == 0x000020, "Wrong size on FSSEventSceneCtrlBattleCharacter");
static_assert(offsetof(FSSEventSceneCtrlBattleCharacter, Character) == 0x000000, "Member 'FSSEventSceneCtrlBattleCharacter::Character' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCtrlBattleCharacter, MlsDataAsset) == 0x000008, "Member 'FSSEventSceneCtrlBattleCharacter::MlsDataAsset' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneCompileDescriptionMV
// 0x0060 (0x0060 - 0x0000)
struct FSSEventSceneSubsceneCompileDescriptionMV final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Camera;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Subscene;                                          // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubsceneCompileDescriptionMV) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneCompileDescriptionMV");
static_assert(sizeof(FSSEventSceneSubsceneCompileDescriptionMV) == 0x000060, "Wrong size on FSSEventSceneSubsceneCompileDescriptionMV");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionMV, Camera) == 0x000000, "Member 'FSSEventSceneSubsceneCompileDescriptionMV::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneCompileDescriptionMV, Subscene) == 0x000030, "Member 'FSSEventSceneSubsceneCompileDescriptionMV::Subscene' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCharacterRuntimeDescription
// 0x0038 (0x0038 - 0x0000)
struct FSSEventSceneCharacterRuntimeDescription final
{
public:
	class ASSCharacter*                           Instance;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCharacterRuntimeDescription) == 0x000008, "Wrong alignment on FSSEventSceneCharacterRuntimeDescription");
static_assert(sizeof(FSSEventSceneCharacterRuntimeDescription) == 0x000038, "Wrong size on FSSEventSceneCharacterRuntimeDescription");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescription, Instance) == 0x000000, "Member 'FSSEventSceneCharacterRuntimeDescription::Instance' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneRuntimeDescriptionCO
// 0x0010 (0x0010 - 0x0000)
struct FSSEventSceneSubsceneRuntimeDescriptionCO final
{
public:
	class ULevelSequence*                         Camera;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Subscene;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubsceneRuntimeDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneRuntimeDescriptionCO");
static_assert(sizeof(FSSEventSceneSubsceneRuntimeDescriptionCO) == 0x000010, "Wrong size on FSSEventSceneSubsceneRuntimeDescriptionCO");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionCO, Camera) == 0x000000, "Member 'FSSEventSceneSubsceneRuntimeDescriptionCO::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionCO, Subscene) == 0x000008, "Member 'FSSEventSceneSubsceneRuntimeDescriptionCO::Subscene' has a wrong offset!");

// ScriptStruct SS.SSEventSceneChoicesRuntimeDescriptionCO
// 0x00A0 (0x00A0 - 0x0000)
struct FSSEventSceneChoicesRuntimeDescriptionCO final
{
public:
	class USSEventSceneDecisionBranch*            ChoicesWidget;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Feelings;                                          // 0x0008(0x0018)(Transient, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchRuntimeDescriptionCO TopBranch;                                         // 0x0020(0x0020)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchRuntimeDescriptionCO BottomBranch;                                      // 0x0040(0x0020)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchRuntimeDescriptionCO LeftBranch;                                        // 0x0060(0x0020)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSSEventSceneBranchRuntimeDescriptionCO RightBranch;                                       // 0x0080(0x0020)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneChoicesRuntimeDescriptionCO) == 0x000008, "Wrong alignment on FSSEventSceneChoicesRuntimeDescriptionCO");
static_assert(sizeof(FSSEventSceneChoicesRuntimeDescriptionCO) == 0x0000A0, "Wrong size on FSSEventSceneChoicesRuntimeDescriptionCO");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, ChoicesWidget) == 0x000000, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::ChoicesWidget' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, Feelings) == 0x000008, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::Feelings' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, TopBranch) == 0x000020, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::TopBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, BottomBranch) == 0x000040, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::BottomBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, LeftBranch) == 0x000060, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::LeftBranch' has a wrong offset!");
static_assert(offsetof(FSSEventSceneChoicesRuntimeDescriptionCO, RightBranch) == 0x000080, "Member 'FSSEventSceneChoicesRuntimeDescriptionCO::RightBranch' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCharacterRuntimeDescriptionDE
// 0x0068 (0x0068 - 0x0000)
struct FSSEventSceneCharacterRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSEventSceneSequenceRuntimeDescriptionDE ActionLevelSequence;                               // 0x0008(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE HiddenAuraLevelSequence;                           // 0x0018(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE ActionEffectLevelSequence;                         // 0x0028(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE SlowTriggerParticleEffectLevelSequence;            // 0x0038(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE FacialLevelSequence;                               // 0x0048(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCharacterRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneCharacterRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneCharacterRuntimeDescriptionDE) == 0x000068, "Wrong size on FSSEventSceneCharacterRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescriptionDE, ActionLevelSequence) == 0x000008, "Member 'FSSEventSceneCharacterRuntimeDescriptionDE::ActionLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescriptionDE, HiddenAuraLevelSequence) == 0x000018, "Member 'FSSEventSceneCharacterRuntimeDescriptionDE::HiddenAuraLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescriptionDE, ActionEffectLevelSequence) == 0x000028, "Member 'FSSEventSceneCharacterRuntimeDescriptionDE::ActionEffectLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescriptionDE, SlowTriggerParticleEffectLevelSequence) == 0x000038, "Member 'FSSEventSceneCharacterRuntimeDescriptionDE::SlowTriggerParticleEffectLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCharacterRuntimeDescriptionDE, FacialLevelSequence) == 0x000048, "Member 'FSSEventSceneCharacterRuntimeDescriptionDE::FacialLevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCameraRuntimeDescriptionDE
// 0x0018 (0x0018 - 0x0000)
struct FSSEventSceneCameraRuntimeDescriptionDE final
{
public:
	struct FSSEventSceneSequenceRuntimeDescriptionDE CameraLevelSequence;                               // 0x0000(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneCameraRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneCameraRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneCameraRuntimeDescriptionDE) == 0x000018, "Wrong size on FSSEventSceneCameraRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneCameraRuntimeDescriptionDE, CameraLevelSequence) == 0x000000, "Member 'FSSEventSceneCameraRuntimeDescriptionDE::CameraLevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneEffectRuntimeDescriptionDE
// 0x0020 (0x0020 - 0x0000)
struct FSSEventSceneEffectRuntimeDescriptionDE final
{
public:
	struct FSSEventSceneSequenceRuntimeDescriptionDE EffectLevelSequence;                               // 0x0000(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE SlowTriggerFlashEffectLevelSequence;               // 0x0010(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneEffectRuntimeDescriptionDE) == 0x000008, "Wrong alignment on FSSEventSceneEffectRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneEffectRuntimeDescriptionDE) == 0x000020, "Wrong size on FSSEventSceneEffectRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneEffectRuntimeDescriptionDE, EffectLevelSequence) == 0x000000, "Member 'FSSEventSceneEffectRuntimeDescriptionDE::EffectLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneEffectRuntimeDescriptionDE, SlowTriggerFlashEffectLevelSequence) == 0x000010, "Member 'FSSEventSceneEffectRuntimeDescriptionDE::SlowTriggerFlashEffectLevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneCutsceneRuntimeDescriptionDE
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FSSEventSceneCutsceneRuntimeDescriptionDE final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSEventSceneSequenceRuntimeDescriptionDE PostProcessOverrideLevelSequence;                  // 0x0078(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE PencilTransitionLevelSequence;                     // 0x0088(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE BlurTransitionLevelSequence;                       // 0x0098(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSSEventSceneCharacterRuntimeDescriptionDE> Characters;                                        // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FSSEventSceneCameraRuntimeDescriptionDE Camera;                                            // 0x00B8(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSituationRuntimeDescriptionDE Situation;                                         // 0x00D0(0x0028)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneEffectRuntimeDescriptionDE Effect;                                            // 0x00F8(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FKoratBGMDataList                      BGM;                                               // 0x0118(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSEventSceneSubtitleRuntimeDescriptionDE> Subtitles;                                         // 0x0120(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Picture;                                           // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE LayerLevelSequence;                                // 0x0140(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE SEFILevelSequence;                                 // 0x0150(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSEventSceneSequenceRuntimeDescriptionDE SEFOLevelSequence;                                 // 0x0160(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneCutsceneRuntimeDescriptionDE) == 0x000010, "Wrong alignment on FSSEventSceneCutsceneRuntimeDescriptionDE");
static_assert(sizeof(FSSEventSceneCutsceneRuntimeDescriptionDE) == 0x000170, "Wrong size on FSSEventSceneCutsceneRuntimeDescriptionDE");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, PostProcessOverrideLevelSequence) == 0x000078, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::PostProcessOverrideLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, PencilTransitionLevelSequence) == 0x000088, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::PencilTransitionLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, BlurTransitionLevelSequence) == 0x000098, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::BlurTransitionLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Characters) == 0x0000A8, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Characters' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Camera) == 0x0000B8, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Situation) == 0x0000D0, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Situation' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Effect) == 0x0000F8, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Effect' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, BGM) == 0x000118, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::BGM' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Subtitles) == 0x000120, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Subtitles' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, Picture) == 0x000138, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::Picture' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, LayerLevelSequence) == 0x000140, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::LayerLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, SEFILevelSequence) == 0x000150, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::SEFILevelSequence' has a wrong offset!");
static_assert(offsetof(FSSEventSceneCutsceneRuntimeDescriptionDE, SEFOLevelSequence) == 0x000160, "Member 'FSSEventSceneCutsceneRuntimeDescriptionDE::SEFOLevelSequence' has a wrong offset!");

// ScriptStruct SS.SSEventSceneGuideWidgetsDE
// 0x0000 (0x0020 - 0x0020)
struct FSSEventSceneGuideWidgetsDE final : public FSSEventSceneGuideWidgets
{
};
static_assert(alignof(FSSEventSceneGuideWidgetsDE) == 0x000008, "Wrong alignment on FSSEventSceneGuideWidgetsDE");
static_assert(sizeof(FSSEventSceneGuideWidgetsDE) == 0x000020, "Wrong size on FSSEventSceneGuideWidgetsDE");

// ScriptStruct SS.SSEventSceneSubsceneRuntimeDescriptionMV
// 0x0010 (0x0010 - 0x0000)
struct FSSEventSceneSubsceneRuntimeDescriptionMV final
{
public:
	class ULevelSequence*                         Camera;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Subscene;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEventSceneSubsceneRuntimeDescriptionMV) == 0x000008, "Wrong alignment on FSSEventSceneSubsceneRuntimeDescriptionMV");
static_assert(sizeof(FSSEventSceneSubsceneRuntimeDescriptionMV) == 0x000010, "Wrong size on FSSEventSceneSubsceneRuntimeDescriptionMV");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionMV, Camera) == 0x000000, "Member 'FSSEventSceneSubsceneRuntimeDescriptionMV::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionMV, Subscene) == 0x000008, "Member 'FSSEventSceneSubsceneRuntimeDescriptionMV::Subscene' has a wrong offset!");

// ScriptStruct SS.SSEventSceneGuideWidgetsMV
// 0x0008 (0x0028 - 0x0020)
struct FSSEventSceneGuideWidgetsMV final : public FSSEventSceneGuideWidgets
{
public:
	class USSEventSceneCameraSwitch*              IconWidget;                                        // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSSEventSceneGuideWidgetsMV) == 0x000008, "Wrong alignment on FSSEventSceneGuideWidgetsMV");
static_assert(sizeof(FSSEventSceneGuideWidgetsMV) == 0x000028, "Wrong size on FSSEventSceneGuideWidgetsMV");
static_assert(offsetof(FSSEventSceneGuideWidgetsMV, IconWidget) == 0x000020, "Member 'FSSEventSceneGuideWidgetsMV::IconWidget' has a wrong offset!");

// ScriptStruct SS.SSEventSceneSubsceneRuntimeDescriptionTS
// 0x00B0 (0x00B0 - 0x0000)
struct FSSEventSceneSubsceneRuntimeDescriptionTS final
{
public:
	struct FTransform                             RootTransform;                                     // 0x0000(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratEventSceneLocatorDataList        Locator;                                           // 0x0060(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Camera;                                            // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Action;                                            // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULevelSequence*>                 Options;                                           // 0x0078(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FKoratMovieSceneEventScenePayload> Payloads;                                          // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0098(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         FlashEffect;                                       // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSEventSceneSubsceneRuntimeDescriptionTS) == 0x000010, "Wrong alignment on FSSEventSceneSubsceneRuntimeDescriptionTS");
static_assert(sizeof(FSSEventSceneSubsceneRuntimeDescriptionTS) == 0x0000B0, "Wrong size on FSSEventSceneSubsceneRuntimeDescriptionTS");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, RootTransform) == 0x000000, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::RootTransform' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, Locator) == 0x000060, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::Locator' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, Camera) == 0x000068, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::Camera' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, Action) == 0x000070, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::Action' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, Options) == 0x000078, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::Options' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, Payloads) == 0x000088, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::Payloads' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, TransitionDelay) == 0x000098, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::TransitionDelay' has a wrong offset!");
static_assert(offsetof(FSSEventSceneSubsceneRuntimeDescriptionTS, FlashEffect) == 0x0000A0, "Member 'FSSEventSceneSubsceneRuntimeDescriptionTS::FlashEffect' has a wrong offset!");

// ScriptStruct SS.SSExplosion
// 0x0078 (0x0078 - 0x0000)
struct FSSExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSLevelSequenceActor>   ExpActor;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrownOutable;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          DrownOutLevelSequence;                             // 0x0028(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSCharacterSearchReduceParameter      SearchReduceParameter;                             // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSExplosion) == 0x000008, "Wrong alignment on FSSExplosion");
static_assert(sizeof(FSSExplosion) == 0x000078, "Wrong size on FSSExplosion");
static_assert(offsetof(FSSExplosion, Location) == 0x000000, "Member 'FSSExplosion::Location' has a wrong offset!");
static_assert(offsetof(FSSExplosion, Radius) == 0x000018, "Member 'FSSExplosion::Radius' has a wrong offset!");
static_assert(offsetof(FSSExplosion, ExpActor) == 0x00001C, "Member 'FSSExplosion::ExpActor' has a wrong offset!");
static_assert(offsetof(FSSExplosion, bIsDrownOutable) == 0x000024, "Member 'FSSExplosion::bIsDrownOutable' has a wrong offset!");
static_assert(offsetof(FSSExplosion, DrownOutLevelSequence) == 0x000028, "Member 'FSSExplosion::DrownOutLevelSequence' has a wrong offset!");
static_assert(offsetof(FSSExplosion, SearchReduceParameter) == 0x000058, "Member 'FSSExplosion::SearchReduceParameter' has a wrong offset!");

// ScriptStruct SS.KoratEyeInformation
// 0x0018 (0x0018 - 0x0000)
struct FKoratEyeInformation final
{
public:
	float                                         EyeUPosition_L;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeVPosition_L;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeUPosition_R;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeVPosition_R;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeScaleRatio_X;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeScaleRatio_Y;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratEyeInformation) == 0x000004, "Wrong alignment on FKoratEyeInformation");
static_assert(sizeof(FKoratEyeInformation) == 0x000018, "Wrong size on FKoratEyeInformation");
static_assert(offsetof(FKoratEyeInformation, EyeUPosition_L) == 0x000000, "Member 'FKoratEyeInformation::EyeUPosition_L' has a wrong offset!");
static_assert(offsetof(FKoratEyeInformation, EyeVPosition_L) == 0x000004, "Member 'FKoratEyeInformation::EyeVPosition_L' has a wrong offset!");
static_assert(offsetof(FKoratEyeInformation, EyeUPosition_R) == 0x000008, "Member 'FKoratEyeInformation::EyeUPosition_R' has a wrong offset!");
static_assert(offsetof(FKoratEyeInformation, EyeVPosition_R) == 0x00000C, "Member 'FKoratEyeInformation::EyeVPosition_R' has a wrong offset!");
static_assert(offsetof(FKoratEyeInformation, EyeScaleRatio_X) == 0x000010, "Member 'FKoratEyeInformation::EyeScaleRatio_X' has a wrong offset!");
static_assert(offsetof(FKoratEyeInformation, EyeScaleRatio_Y) == 0x000014, "Member 'FKoratEyeInformation::EyeScaleRatio_Y' has a wrong offset!");

// ScriptStruct SS.SSFateChecker
// 0x0050 (0x0050 - 0x0000)
struct FSSFateChecker final
{
public:
	TMap<struct FKoratCharacterDataList, EFateExecutionOrderType> Items;                                             // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSFateChecker) == 0x000008, "Wrong alignment on FSSFateChecker");
static_assert(sizeof(FSSFateChecker) == 0x000050, "Wrong size on FSSFateChecker");
static_assert(offsetof(FSSFateChecker, Items) == 0x000000, "Member 'FSSFateChecker::Items' has a wrong offset!");

// ScriptStruct SS.SSMatchGroupIdentifier
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSMatchGroupIdentifier final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMatchGroupIdentifier) == 0x000004, "Wrong alignment on FSSMatchGroupIdentifier");
static_assert(sizeof(FSSMatchGroupIdentifier) == 0x000008, "Wrong size on FSSMatchGroupIdentifier");

// ScriptStruct SS.SSGalleryMyDataItemRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSGalleryMyDataItemRecord final
{
public:
	ESSGalleryMyDataMajorItemType                 MajorType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESSGalleryMyDataMinorItemType>         MinorItemArray;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGalleryMyDataItemRecord) == 0x000008, "Wrong alignment on FSSGalleryMyDataItemRecord");
static_assert(sizeof(FSSGalleryMyDataItemRecord) == 0x000030, "Wrong size on FSSGalleryMyDataItemRecord");
static_assert(offsetof(FSSGalleryMyDataItemRecord, MajorType) == 0x000000, "Member 'FSSGalleryMyDataItemRecord::MajorType' has a wrong offset!");
static_assert(offsetof(FSSGalleryMyDataItemRecord, MinorItemArray) == 0x000008, "Member 'FSSGalleryMyDataItemRecord::MinorItemArray' has a wrong offset!");
static_assert(offsetof(FSSGalleryMyDataItemRecord, Title) == 0x000018, "Member 'FSSGalleryMyDataItemRecord::Title' has a wrong offset!");

// ScriptStruct SS.SSGalleryParam
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FSSGalleryParam final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGalleryParam) == 0x000008, "Wrong alignment on FSSGalleryParam");
static_assert(sizeof(FSSGalleryParam) == 0x0000B8, "Wrong size on FSSGalleryParam");

// ScriptStruct SS.SSGalleryPictureBookTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSGalleryPictureBookTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGalleryPictureBookTransitionData) == 0x000004, "Wrong alignment on FSSGalleryPictureBookTransitionData");
static_assert(sizeof(FSSGalleryPictureBookTransitionData) == 0x000010, "Wrong size on FSSGalleryPictureBookTransitionData");

// ScriptStruct SS.GalleryPictureBookMenuStruct
// 0x0020 (0x0020 - 0x0000)
struct FGalleryPictureBookMenuStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SSMenu;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryPictureBookMenuManager*       Menu;                                              // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGalleryPictureBookListMenuManager*   ListMenu;                                          // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGalleryPictureBookMenuStruct) == 0x000008, "Wrong alignment on FGalleryPictureBookMenuStruct");
static_assert(sizeof(FGalleryPictureBookMenuStruct) == 0x000020, "Wrong size on FGalleryPictureBookMenuStruct");
static_assert(offsetof(FGalleryPictureBookMenuStruct, SSMenu) == 0x000008, "Member 'FGalleryPictureBookMenuStruct::SSMenu' has a wrong offset!");
static_assert(offsetof(FGalleryPictureBookMenuStruct, Menu) == 0x000010, "Member 'FGalleryPictureBookMenuStruct::Menu' has a wrong offset!");
static_assert(offsetof(FGalleryPictureBookMenuStruct, ListMenu) == 0x000018, "Member 'FGalleryPictureBookMenuStruct::ListMenu' has a wrong offset!");

// ScriptStruct SS.DisplayGaugeSetting
// 0x0008 (0x0008 - 0x0000)
struct FDisplayGaugeSetting final
{
public:
	float                                         DisplayGaugeMin;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayGaugeMax;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplayGaugeSetting) == 0x000004, "Wrong alignment on FDisplayGaugeSetting");
static_assert(sizeof(FDisplayGaugeSetting) == 0x000008, "Wrong size on FDisplayGaugeSetting");
static_assert(offsetof(FDisplayGaugeSetting, DisplayGaugeMin) == 0x000000, "Member 'FDisplayGaugeSetting::DisplayGaugeMin' has a wrong offset!");
static_assert(offsetof(FDisplayGaugeSetting, DisplayGaugeMax) == 0x000004, "Member 'FDisplayGaugeSetting::DisplayGaugeMax' has a wrong offset!");

// ScriptStruct SS.SSHapticFeedbackSettingData
// 0x0040 (0x0040 - 0x0000)
struct FSSHapticFeedbackSettingData final
{
public:
	int32                                         SortId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueSheetName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratVibrationTargetType                     VibrationTarget;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationLevel;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVibration;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSHapticFeedbackSettingData) == 0x000008, "Wrong alignment on FSSHapticFeedbackSettingData");
static_assert(sizeof(FSSHapticFeedbackSettingData) == 0x000040, "Wrong size on FSSHapticFeedbackSettingData");
static_assert(offsetof(FSSHapticFeedbackSettingData, SortId) == 0x000000, "Member 'FSSHapticFeedbackSettingData::SortId' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, CueSheetName) == 0x000008, "Member 'FSSHapticFeedbackSettingData::CueSheetName' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, CueId) == 0x000018, "Member 'FSSHapticFeedbackSettingData::CueId' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, CueName) == 0x000020, "Member 'FSSHapticFeedbackSettingData::CueName' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, VibrationTarget) == 0x000030, "Member 'FSSHapticFeedbackSettingData::VibrationTarget' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, VibrationLevel) == 0x000034, "Member 'FSSHapticFeedbackSettingData::VibrationLevel' has a wrong offset!");
static_assert(offsetof(FSSHapticFeedbackSettingData, IsVibration) == 0x000038, "Member 'FSSHapticFeedbackSettingData::IsVibration' has a wrong offset!");

// ScriptStruct SS.SSInputDeviceInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSSInputDeviceInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSInputDeviceInfo) == 0x000004, "Wrong alignment on FSSInputDeviceInfo");
static_assert(sizeof(FSSInputDeviceInfo) == 0x000008, "Wrong size on FSSInputDeviceInfo");

// ScriptStruct SS.SSKoratSystemDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSKoratSystemDataAssetRecord final
{
public:
	TSoftObjectPtr<class UWorld>                  SubLevel;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSKoratSystemDataAssetRecord) == 0x000008, "Wrong alignment on FSSKoratSystemDataAssetRecord");
static_assert(sizeof(FSSKoratSystemDataAssetRecord) == 0x000030, "Wrong size on FSSKoratSystemDataAssetRecord");
static_assert(offsetof(FSSKoratSystemDataAssetRecord, SubLevel) == 0x000000, "Member 'FSSKoratSystemDataAssetRecord::SubLevel' has a wrong offset!");

// ScriptStruct SS.SSKoratVersionMajor
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionMajor final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionMajor) == 0x000008, "Wrong alignment on FSSKoratVersionMajor");
static_assert(sizeof(FSSKoratVersionMajor) == 0x000010, "Wrong size on FSSKoratVersionMajor");

// ScriptStruct SS.SSKoratVersionServer
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionServer final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionServer) == 0x000008, "Wrong alignment on FSSKoratVersionServer");
static_assert(sizeof(FSSKoratVersionServer) == 0x000010, "Wrong size on FSSKoratVersionServer");

// ScriptStruct SS.SSKoratVersionBattle
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionBattle final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionBattle) == 0x000008, "Wrong alignment on FSSKoratVersionBattle");
static_assert(sizeof(FSSKoratVersionBattle) == 0x000010, "Wrong size on FSSKoratVersionBattle");

// ScriptStruct SS.SSKoratVersionDrama
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionDrama final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionDrama) == 0x000008, "Wrong alignment on FSSKoratVersionDrama");
static_assert(sizeof(FSSKoratVersionDrama) == 0x000010, "Wrong size on FSSKoratVersionDrama");

// ScriptStruct SS.SSKoratVersionReplay
// 0x0000 (0x0010 - 0x0010)
struct FSSKoratVersionReplay final : public FSSVersionBase
{
};
static_assert(alignof(FSSKoratVersionReplay) == 0x000008, "Wrong alignment on FSSKoratVersionReplay");
static_assert(sizeof(FSSKoratVersionReplay) == 0x000010, "Wrong size on FSSKoratVersionReplay");

// ScriptStruct SS.SSLaboCompoCharacterIdInfo
// 0x0058 (0x0058 - 0x0000)
struct FSSLaboCompoCharacterIdInfo final
{
public:
	bool                                          bMakeCharacterIdTrack;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCharacterIdApply;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditableEquipmentItems;                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipmentDefaultItems;                            // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSSLaboCharacterPresetDataAssetRecord> Presets;                                           // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSLaboCompoCharacterIdInfo) == 0x000008, "Wrong alignment on FSSLaboCompoCharacterIdInfo");
static_assert(sizeof(FSSLaboCompoCharacterIdInfo) == 0x000058, "Wrong size on FSSLaboCompoCharacterIdInfo");
static_assert(offsetof(FSSLaboCompoCharacterIdInfo, bMakeCharacterIdTrack) == 0x000000, "Member 'FSSLaboCompoCharacterIdInfo::bMakeCharacterIdTrack' has a wrong offset!");
static_assert(offsetof(FSSLaboCompoCharacterIdInfo, bForceCharacterIdApply) == 0x000001, "Member 'FSSLaboCompoCharacterIdInfo::bForceCharacterIdApply' has a wrong offset!");
static_assert(offsetof(FSSLaboCompoCharacterIdInfo, bEditableEquipmentItems) == 0x000002, "Member 'FSSLaboCompoCharacterIdInfo::bEditableEquipmentItems' has a wrong offset!");
static_assert(offsetof(FSSLaboCompoCharacterIdInfo, bEquipmentDefaultItems) == 0x000003, "Member 'FSSLaboCompoCharacterIdInfo::bEquipmentDefaultItems' has a wrong offset!");
static_assert(offsetof(FSSLaboCompoCharacterIdInfo, Presets) == 0x000008, "Member 'FSSLaboCompoCharacterIdInfo::Presets' has a wrong offset!");

// ScriptStruct SS.RebindCharactersCollection
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FRebindCharactersCollection final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRebindCharactersCollection) == 0x000008, "Wrong alignment on FRebindCharactersCollection");
static_assert(sizeof(FRebindCharactersCollection) == 0x000020, "Wrong size on FRebindCharactersCollection");

// ScriptStruct SS.SSLoggingToolSettingDataAssetRecord
// 0x0010 (0x0010 - 0x0000)
struct FSSLoggingToolSettingDataAssetRecord final
{
public:
	TArray<struct FKoratActionDataList>           ActionDatas;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSLoggingToolSettingDataAssetRecord) == 0x000008, "Wrong alignment on FSSLoggingToolSettingDataAssetRecord");
static_assert(sizeof(FSSLoggingToolSettingDataAssetRecord) == 0x000010, "Wrong size on FSSLoggingToolSettingDataAssetRecord");
static_assert(offsetof(FSSLoggingToolSettingDataAssetRecord, ActionDatas) == 0x000000, "Member 'FSSLoggingToolSettingDataAssetRecord::ActionDatas' has a wrong offset!");

// ScriptStruct SS.SSLookAtTargetLastParameter
// 0x00B0 (0x00B0 - 0x0000)
struct FSSLookAtTargetLastParameter final
{
public:
	bool                                          Baked;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachParentActor;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ParentRotation;                                    // 0x0050(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParentLocation;                                    // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MTargetRelativeLocation;                           // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  MTargetParent;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSLookAtTargetLastParameter) == 0x000010, "Wrong alignment on FSSLookAtTargetLastParameter");
static_assert(sizeof(FSSLookAtTargetLastParameter) == 0x0000B0, "Wrong size on FSSLookAtTargetLastParameter");
static_assert(offsetof(FSSLookAtTargetLastParameter, Baked) == 0x000000, "Member 'FSSLookAtTargetLastParameter::Baked' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, Position) == 0x000008, "Member 'FSSLookAtTargetLastParameter::Position' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, Rotation) == 0x000020, "Member 'FSSLookAtTargetLastParameter::Rotation' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, AttachParentActor) == 0x000040, "Member 'FSSLookAtTargetLastParameter::AttachParentActor' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, ParentRotation) == 0x000050, "Member 'FSSLookAtTargetLastParameter::ParentRotation' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, ParentLocation) == 0x000070, "Member 'FSSLookAtTargetLastParameter::ParentLocation' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, MTargetRelativeLocation) == 0x000088, "Member 'FSSLookAtTargetLastParameter::MTargetRelativeLocation' has a wrong offset!");
static_assert(offsetof(FSSLookAtTargetLastParameter, MTargetParent) == 0x0000A0, "Member 'FSSLookAtTargetLastParameter::MTargetParent' has a wrong offset!");

// ScriptStruct SS.SSHUDWidgetSet
// 0x0108 (0x0108 - 0x0000)
struct FSSHUDWidgetSet final
{
public:
	class USSHUDWidget*                           Bunkatu_Partition;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBattleTimer*                         TimerWidget;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBattleMode010Timer*                  BattleMode010TimerWidget;                          // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSMainGauge*                           P1MainGaugeWidget;                                 // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSComboSet*                            P1ComboSeteWidget;                                 // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSHPStockSet*                          P1HPStockSet;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastGauge*                          P1BlastGaugeSet;                                   // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBBoost*                              P1BBoostWidget;                                    // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSPGauge*                             P1SPGauge;                                         // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSparkingGauge*                       P1SparkingGauge;                                   // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSTeamGauge*                           P1TeamGauge;                                       // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSStyleIconTimer*                      P1StyleIconTimer;                                  // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSMainGauge*                           P2MainGaugeWidget;                                 // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSComboSet*                            P2ComboSeteWidget;                                 // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSHPStockSet*                          P2HPStockSet;                                      // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBlastGauge*                          P2BlastGaugeSet;                                   // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBBoost*                              P2BBoostWidget;                                    // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSPGauge*                             P2SPGauge;                                         // 0x0088(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSparkingGauge*                       P2SparkingGauge;                                   // 0x0090(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSTeamGauge*                           P2TeamGauge;                                       // 0x0098(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSStyleIconTimer*                      P2StyleIconTimer;                                  // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSHUDWidget*                           P1TransformAllGuideWidget;                         // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSStylePanel*                          P1TransformPanelWidget;                            // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSChangePanel*                         P1ChangeGuideWidget;                               // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEmotePanel*                          P1EmoteGuideWidget;                                // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSkillGuideSet*                       P1SkillGuideWidget;                                // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSHUDWidget*                           P2TransformAllGuideWidget;                         // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSStylePanel*                          P2TransformPanelWidget;                            // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSChangePanel*                         P2ChangeGuideWidget;                               // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSEmotePanel*                          P2EmoteGuideWidget;                                // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSSkillGuideSet*                       P2SkillGuideWidget;                                // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBuffIconSet*                         P1BuffIconSet;                                     // 0x00F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSBuffIconSet*                         P2BuffIconSet;                                     // 0x0100(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSHUDWidgetSet) == 0x000008, "Wrong alignment on FSSHUDWidgetSet");
static_assert(sizeof(FSSHUDWidgetSet) == 0x000108, "Wrong size on FSSHUDWidgetSet");
static_assert(offsetof(FSSHUDWidgetSet, Bunkatu_Partition) == 0x000000, "Member 'FSSHUDWidgetSet::Bunkatu_Partition' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, TimerWidget) == 0x000008, "Member 'FSSHUDWidgetSet::TimerWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, BattleMode010TimerWidget) == 0x000010, "Member 'FSSHUDWidgetSet::BattleMode010TimerWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1MainGaugeWidget) == 0x000018, "Member 'FSSHUDWidgetSet::P1MainGaugeWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1ComboSeteWidget) == 0x000020, "Member 'FSSHUDWidgetSet::P1ComboSeteWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1HPStockSet) == 0x000028, "Member 'FSSHUDWidgetSet::P1HPStockSet' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1BlastGaugeSet) == 0x000030, "Member 'FSSHUDWidgetSet::P1BlastGaugeSet' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1BBoostWidget) == 0x000038, "Member 'FSSHUDWidgetSet::P1BBoostWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1SPGauge) == 0x000040, "Member 'FSSHUDWidgetSet::P1SPGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1SparkingGauge) == 0x000048, "Member 'FSSHUDWidgetSet::P1SparkingGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1TeamGauge) == 0x000050, "Member 'FSSHUDWidgetSet::P1TeamGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1StyleIconTimer) == 0x000058, "Member 'FSSHUDWidgetSet::P1StyleIconTimer' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2MainGaugeWidget) == 0x000060, "Member 'FSSHUDWidgetSet::P2MainGaugeWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2ComboSeteWidget) == 0x000068, "Member 'FSSHUDWidgetSet::P2ComboSeteWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2HPStockSet) == 0x000070, "Member 'FSSHUDWidgetSet::P2HPStockSet' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2BlastGaugeSet) == 0x000078, "Member 'FSSHUDWidgetSet::P2BlastGaugeSet' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2BBoostWidget) == 0x000080, "Member 'FSSHUDWidgetSet::P2BBoostWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2SPGauge) == 0x000088, "Member 'FSSHUDWidgetSet::P2SPGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2SparkingGauge) == 0x000090, "Member 'FSSHUDWidgetSet::P2SparkingGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2TeamGauge) == 0x000098, "Member 'FSSHUDWidgetSet::P2TeamGauge' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2StyleIconTimer) == 0x0000A0, "Member 'FSSHUDWidgetSet::P2StyleIconTimer' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1TransformAllGuideWidget) == 0x0000A8, "Member 'FSSHUDWidgetSet::P1TransformAllGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1TransformPanelWidget) == 0x0000B0, "Member 'FSSHUDWidgetSet::P1TransformPanelWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1ChangeGuideWidget) == 0x0000B8, "Member 'FSSHUDWidgetSet::P1ChangeGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1EmoteGuideWidget) == 0x0000C0, "Member 'FSSHUDWidgetSet::P1EmoteGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1SkillGuideWidget) == 0x0000C8, "Member 'FSSHUDWidgetSet::P1SkillGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2TransformAllGuideWidget) == 0x0000D0, "Member 'FSSHUDWidgetSet::P2TransformAllGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2TransformPanelWidget) == 0x0000D8, "Member 'FSSHUDWidgetSet::P2TransformPanelWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2ChangeGuideWidget) == 0x0000E0, "Member 'FSSHUDWidgetSet::P2ChangeGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2EmoteGuideWidget) == 0x0000E8, "Member 'FSSHUDWidgetSet::P2EmoteGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2SkillGuideWidget) == 0x0000F0, "Member 'FSSHUDWidgetSet::P2SkillGuideWidget' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P1BuffIconSet) == 0x0000F8, "Member 'FSSHUDWidgetSet::P1BuffIconSet' has a wrong offset!");
static_assert(offsetof(FSSHUDWidgetSet, P2BuffIconSet) == 0x000100, "Member 'FSSHUDWidgetSet::P2BuffIconSet' has a wrong offset!");

// ScriptStruct SS.SSCharacterSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSCharacterSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterSaveData) == 0x000001, "Wrong alignment on FSSCharacterSaveData");
static_assert(sizeof(FSSCharacterSaveData) == 0x000003, "Wrong size on FSSCharacterSaveData");
static_assert(offsetof(FSSCharacterSaveData, UnLockMode) == 0x000000, "Member 'FSSCharacterSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterSaveData, UnLockDetail) == 0x000001, "Member 'FSSCharacterSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSBGMSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSBGMSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBGMSaveData) == 0x000001, "Wrong alignment on FSSBGMSaveData");
static_assert(sizeof(FSSBGMSaveData) == 0x000003, "Wrong size on FSSBGMSaveData");
static_assert(offsetof(FSSBGMSaveData, UnLockMode) == 0x000000, "Member 'FSSBGMSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSBGMSaveData, UnLockDetail) == 0x000001, "Member 'FSSBGMSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSCharacterItemSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSCharacterItemSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSCharacterItemSaveData) == 0x000001, "Wrong alignment on FSSCharacterItemSaveData");
static_assert(sizeof(FSSCharacterItemSaveData) == 0x000003, "Wrong size on FSSCharacterItemSaveData");
static_assert(offsetof(FSSCharacterItemSaveData, UnLockMode) == 0x000000, "Member 'FSSCharacterItemSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSCharacterItemSaveData, UnLockDetail) == 0x000001, "Member 'FSSCharacterItemSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSStockItemSaveData
// 0x000C (0x000C - 0x0000)
struct FSSStockItemSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StockNum;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0008(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSStockItemSaveData) == 0x000004, "Wrong alignment on FSSStockItemSaveData");
static_assert(sizeof(FSSStockItemSaveData) == 0x00000C, "Wrong size on FSSStockItemSaveData");
static_assert(offsetof(FSSStockItemSaveData, UnLockMode) == 0x000000, "Member 'FSSStockItemSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSStockItemSaveData, StockNum) == 0x000004, "Member 'FSSStockItemSaveData::StockNum' has a wrong offset!");
static_assert(offsetof(FSSStockItemSaveData, UnLockDetail) == 0x000008, "Member 'FSSStockItemSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSShopItemSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSShopItemSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSShopItemSaveData) == 0x000001, "Wrong alignment on FSSShopItemSaveData");
static_assert(sizeof(FSSShopItemSaveData) == 0x000003, "Wrong size on FSSShopItemSaveData");
static_assert(offsetof(FSSShopItemSaveData, UnLockMode) == 0x000000, "Member 'FSSShopItemSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSShopItemSaveData, UnLockDetail) == 0x000001, "Member 'FSSShopItemSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSTextTitleSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSTextTitleSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTextTitleSaveData) == 0x000001, "Wrong alignment on FSSTextTitleSaveData");
static_assert(sizeof(FSSTextTitleSaveData) == 0x000003, "Wrong size on FSSTextTitleSaveData");
static_assert(offsetof(FSSTextTitleSaveData, UnLockMode) == 0x000000, "Member 'FSSTextTitleSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSTextTitleSaveData, UnLockDetail) == 0x000001, "Member 'FSSTextTitleSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSEditPartsTextSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSEditPartsTextSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSEditPartsTextSaveData) == 0x000001, "Wrong alignment on FSSEditPartsTextSaveData");
static_assert(sizeof(FSSEditPartsTextSaveData) == 0x000003, "Wrong size on FSSEditPartsTextSaveData");
static_assert(offsetof(FSSEditPartsTextSaveData, UnLockMode) == 0x000000, "Member 'FSSEditPartsTextSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSEditPartsTextSaveData, UnLockDetail) == 0x000001, "Member 'FSSEditPartsTextSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSPlayerCardBGSaveData
// 0x0003 (0x0003 - 0x0000)
struct FSSPlayerCardBGSaveData final
{
public:
	EKoratUnLockMode                              UnLockMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x0001(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPlayerCardBGSaveData) == 0x000001, "Wrong alignment on FSSPlayerCardBGSaveData");
static_assert(sizeof(FSSPlayerCardBGSaveData) == 0x000003, "Wrong size on FSSPlayerCardBGSaveData");
static_assert(offsetof(FSSPlayerCardBGSaveData, UnLockMode) == 0x000000, "Member 'FSSPlayerCardBGSaveData::UnLockMode' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardBGSaveData, UnLockDetail) == 0x000001, "Member 'FSSPlayerCardBGSaveData::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.SSDownLoadContentsSaveData
// 0x0002 (0x0002 - 0x0000)
struct FSSDownLoadContentsSaveData final
{
public:
	bool                                          bAcquiredOnce;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcquiring;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDownLoadContentsSaveData) == 0x000001, "Wrong alignment on FSSDownLoadContentsSaveData");
static_assert(sizeof(FSSDownLoadContentsSaveData) == 0x000002, "Wrong size on FSSDownLoadContentsSaveData");
static_assert(offsetof(FSSDownLoadContentsSaveData, bAcquiredOnce) == 0x000000, "Member 'FSSDownLoadContentsSaveData::bAcquiredOnce' has a wrong offset!");
static_assert(offsetof(FSSDownLoadContentsSaveData, bAcquiring) == 0x000001, "Member 'FSSDownLoadContentsSaveData::bAcquiring' has a wrong offset!");

// ScriptStruct SS.SSPlayerCardData
// 0x0050 (0x0050 - 0x0000)
struct FSSPlayerCardData final
{
public:
	struct FKoratCharacterDataList                FavoriteCharacter;                                 // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratTextTitleDataList                FavoriteTextTitle;                                 // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratIconTitleDataList                FavoriteIconTitle;                                 // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratPlayingTime                             PlayingTime;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratPlayModeType                            PlayMode;                                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratBGMDataList                      FavoriteBGM;                                       // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapDataList                      FavoriteMap;                                       // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratPlayerCardBGDataList             BG;                                                // 0x002C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBattleMode012Info;                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBattleMode010Info;                             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTournamentInfo;                                // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowRankMatchInfo;                                 // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  EditedItem;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsNeedSync;                                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerCardData) == 0x000008, "Wrong alignment on FSSPlayerCardData");
static_assert(sizeof(FSSPlayerCardData) == 0x000050, "Wrong size on FSSPlayerCardData");
static_assert(offsetof(FSSPlayerCardData, FavoriteCharacter) == 0x000000, "Member 'FSSPlayerCardData::FavoriteCharacter' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, FavoriteTextTitle) == 0x000008, "Member 'FSSPlayerCardData::FavoriteTextTitle' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, FavoriteIconTitle) == 0x000010, "Member 'FSSPlayerCardData::FavoriteIconTitle' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, PlayingTime) == 0x000018, "Member 'FSSPlayerCardData::PlayingTime' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, PlayMode) == 0x000019, "Member 'FSSPlayerCardData::PlayMode' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, FavoriteBGM) == 0x00001C, "Member 'FSSPlayerCardData::FavoriteBGM' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, FavoriteMap) == 0x000024, "Member 'FSSPlayerCardData::FavoriteMap' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, BG) == 0x00002C, "Member 'FSSPlayerCardData::BG' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, ShowBattleMode012Info) == 0x000034, "Member 'FSSPlayerCardData::ShowBattleMode012Info' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, ShowBattleMode010Info) == 0x000035, "Member 'FSSPlayerCardData::ShowBattleMode010Info' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, ShowTournamentInfo) == 0x000036, "Member 'FSSPlayerCardData::ShowTournamentInfo' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, ShowRankMatchInfo) == 0x000037, "Member 'FSSPlayerCardData::ShowRankMatchInfo' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, EditedItem) == 0x000038, "Member 'FSSPlayerCardData::EditedItem' has a wrong offset!");
static_assert(offsetof(FSSPlayerCardData, IsNeedSync) == 0x000048, "Member 'FSSPlayerCardData::IsNeedSync' has a wrong offset!");

// ScriptStruct SS.SSPlayerStatusData
// 0x00A0 (0x00A0 - 0x0000)
struct FSSPlayerStatusData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextRankPointPar;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZItemFrameMax;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteFrameMax;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Money;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPoint;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPoint;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRate;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRatePoint;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassPoint;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSPlayerCardData                      PlayerCard;                                        // 0x0030(0x0050)(NativeAccessSpecifierPublic)
	int32                                         AddMoney;                                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubMoney;                                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiracleOrb;                                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddMoneyNow;                                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AddItemIdsNow;                                     // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPlayerStatusData) == 0x000008, "Wrong alignment on FSSPlayerStatusData");
static_assert(sizeof(FSSPlayerStatusData) == 0x0000A0, "Wrong size on FSSPlayerStatusData");
static_assert(offsetof(FSSPlayerStatusData, Rank) == 0x000000, "Member 'FSSPlayerStatusData::Rank' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, RankPoint) == 0x000004, "Member 'FSSPlayerStatusData::RankPoint' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, NextRankPointPar) == 0x000008, "Member 'FSSPlayerStatusData::NextRankPointPar' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, ZItemFrameMax) == 0x00000C, "Member 'FSSPlayerStatusData::ZItemFrameMax' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, EmoteFrameMax) == 0x000010, "Member 'FSSPlayerStatusData::EmoteFrameMax' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, Money) == 0x000014, "Member 'FSSPlayerStatusData::Money' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, RewardPoint) == 0x000018, "Member 'FSSPlayerStatusData::RewardPoint' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, EventPoint) == 0x00001C, "Member 'FSSPlayerStatusData::EventPoint' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, PlayerRate) == 0x000020, "Member 'FSSPlayerStatusData::PlayerRate' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, PlayerRatePoint) == 0x000024, "Member 'FSSPlayerStatusData::PlayerRatePoint' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, BattlePassPoint) == 0x000028, "Member 'FSSPlayerStatusData::BattlePassPoint' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, PlayerCard) == 0x000030, "Member 'FSSPlayerStatusData::PlayerCard' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, AddMoney) == 0x000080, "Member 'FSSPlayerStatusData::AddMoney' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, SubMoney) == 0x000084, "Member 'FSSPlayerStatusData::SubMoney' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, MiracleOrb) == 0x000088, "Member 'FSSPlayerStatusData::MiracleOrb' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, AddMoneyNow) == 0x00008C, "Member 'FSSPlayerStatusData::AddMoneyNow' has a wrong offset!");
static_assert(offsetof(FSSPlayerStatusData, AddItemIdsNow) == 0x000090, "Member 'FSSPlayerStatusData::AddItemIdsNow' has a wrong offset!");

// ScriptStruct SS.SSMythicalOrbSaveData
// 0x0050 (0x0050 - 0x0000)
struct FSSMythicalOrbSaveData final
{
public:
	TMap<EDragonType, struct FSSMythicalOrbListSaveData> OrbData;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMythicalOrbSaveData) == 0x000008, "Wrong alignment on FSSMythicalOrbSaveData");
static_assert(sizeof(FSSMythicalOrbSaveData) == 0x000050, "Wrong size on FSSMythicalOrbSaveData");
static_assert(offsetof(FSSMythicalOrbSaveData, OrbData) == 0x000000, "Member 'FSSMythicalOrbSaveData::OrbData' has a wrong offset!");

// ScriptStruct SS.SSMissionUserDataSaveDataListSaveData
// 0x0058 (0x0058 - 0x0000)
struct FSSMissionUserDataSaveDataListSaveData final
{
public:
	TMap<struct FKoratMissionDataList, struct FSSMissionUserDataSaveData> MissionUserData;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bAddMissionVoice;                                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformTrophyInfoSynced;                         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMissionUserDataSaveDataListSaveData) == 0x000008, "Wrong alignment on FSSMissionUserDataSaveDataListSaveData");
static_assert(sizeof(FSSMissionUserDataSaveDataListSaveData) == 0x000058, "Wrong size on FSSMissionUserDataSaveDataListSaveData");
static_assert(offsetof(FSSMissionUserDataSaveDataListSaveData, MissionUserData) == 0x000000, "Member 'FSSMissionUserDataSaveDataListSaveData::MissionUserData' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveDataListSaveData, bAddMissionVoice) == 0x000050, "Member 'FSSMissionUserDataSaveDataListSaveData::bAddMissionVoice' has a wrong offset!");
static_assert(offsetof(FSSMissionUserDataSaveDataListSaveData, bPlatformTrophyInfoSynced) == 0x000051, "Member 'FSSMissionUserDataSaveDataListSaveData::bPlatformTrophyInfoSynced' has a wrong offset!");

// ScriptStruct SS.SSMissionModeUserDataListSaveData
// 0x0050 (0x0050 - 0x0000)
struct FSSMissionModeUserDataListSaveData final
{
public:
	TMap<EMenuMissionMode, struct FSSMissionUserDataSaveDataListSaveData> MissionModeUserDataList;                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMissionModeUserDataListSaveData) == 0x000008, "Wrong alignment on FSSMissionModeUserDataListSaveData");
static_assert(sizeof(FSSMissionModeUserDataListSaveData) == 0x000050, "Wrong size on FSSMissionModeUserDataListSaveData");
static_assert(offsetof(FSSMissionModeUserDataListSaveData, MissionModeUserDataList) == 0x000000, "Member 'FSSMissionModeUserDataListSaveData::MissionModeUserDataList' has a wrong offset!");

// ScriptStruct SS.SSGallerySaveData
// 0x0001 (0x0001 - 0x0000)
struct FSSGallerySaveData final
{
public:
	bool                                          bIsEnableReplayCommentary;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGallerySaveData) == 0x000001, "Wrong alignment on FSSGallerySaveData");
static_assert(sizeof(FSSGallerySaveData) == 0x000001, "Wrong size on FSSGallerySaveData");
static_assert(offsetof(FSSGallerySaveData, bIsEnableReplayCommentary) == 0x000000, "Member 'FSSGallerySaveData::bIsEnableReplayCommentary' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveDataCharacterTargetEquip
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleSetupUserDataSaveDataCharacterTargetEquip final
{
public:
	TArray<struct FSSBattleSetupUserDataSaveDataCharacterEquip> TargetSettings;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataSaveDataCharacterTargetEquip) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveDataCharacterTargetEquip");
static_assert(sizeof(FSSBattleSetupUserDataSaveDataCharacterTargetEquip) == 0x000010, "Wrong size on FSSBattleSetupUserDataSaveDataCharacterTargetEquip");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataCharacterTargetEquip, TargetSettings) == 0x000000, "Member 'FSSBattleSetupUserDataSaveDataCharacterTargetEquip::TargetSettings' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveDataTargetTeaming
// 0x0050 (0x0050 - 0x0000)
struct FSSBattleSetupUserDataSaveDataTargetTeaming final
{
public:
	TMap<EKoratCharacterEquipSettingSaveTarget, struct FSSBattleSetupUserDataSaveDataTeamingCharacter> TargetTeaming;                                     // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataSaveDataTargetTeaming) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveDataTargetTeaming");
static_assert(sizeof(FSSBattleSetupUserDataSaveDataTargetTeaming) == 0x000050, "Wrong size on FSSBattleSetupUserDataSaveDataTargetTeaming");
static_assert(offsetof(FSSBattleSetupUserDataSaveDataTargetTeaming, TargetTeaming) == 0x000000, "Member 'FSSBattleSetupUserDataSaveDataTargetTeaming::TargetTeaming' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataCustomizeBuildupItemMySet
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleSetupUserDataCustomizeBuildupItemMySet final
{
public:
	TArray<struct FKoratCharacterItemDataList>    Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataCustomizeBuildupItemMySet) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataCustomizeBuildupItemMySet");
static_assert(sizeof(FSSBattleSetupUserDataCustomizeBuildupItemMySet) == 0x000010, "Wrong size on FSSBattleSetupUserDataCustomizeBuildupItemMySet");
static_assert(offsetof(FSSBattleSetupUserDataCustomizeBuildupItemMySet, Items) == 0x000000, "Member 'FSSBattleSetupUserDataCustomizeBuildupItemMySet::Items' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataCustomizeBuildupItemMySets
// 0x0010 (0x0010 - 0x0000)
struct FSSBattleSetupUserDataCustomizeBuildupItemMySets final
{
public:
	TArray<struct FSSBattleSetupUserDataCustomizeBuildupItemMySet> MySets;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataCustomizeBuildupItemMySets) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataCustomizeBuildupItemMySets");
static_assert(sizeof(FSSBattleSetupUserDataCustomizeBuildupItemMySets) == 0x000010, "Wrong size on FSSBattleSetupUserDataCustomizeBuildupItemMySets");
static_assert(offsetof(FSSBattleSetupUserDataCustomizeBuildupItemMySets, MySets) == 0x000000, "Member 'FSSBattleSetupUserDataCustomizeBuildupItemMySets::MySets' has a wrong offset!");

// ScriptStruct SS.SSBattleSetupUserDataSaveData
// 0x0150 (0x0150 - 0x0000)
struct FSSBattleSetupUserDataSaveData final
{
public:
	TMap<struct FKoratCharacterDataList, struct FSSBattleSetupUserDataSaveDataCharacterTargetEquip> Customize;                                         // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	struct FSSBattleSetupUserDataSaveDataTargetTeaming NormalTeaming;                                     // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	struct FSSBattleSetupUserDataSaveDataTargetTeaming SingleTeaming;                                     // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	struct FSSBattleSetupUserDataSaveDataTargetTeaming DPBattleTeaming;                                   // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	struct FSSBattleSetupUserDataCustomizeBuildupItemMySets BuildupMySet;                                      // 0x0140(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSetupUserDataSaveData) == 0x000008, "Wrong alignment on FSSBattleSetupUserDataSaveData");
static_assert(sizeof(FSSBattleSetupUserDataSaveData) == 0x000150, "Wrong size on FSSBattleSetupUserDataSaveData");
static_assert(offsetof(FSSBattleSetupUserDataSaveData, Customize) == 0x000000, "Member 'FSSBattleSetupUserDataSaveData::Customize' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveData, NormalTeaming) == 0x000050, "Member 'FSSBattleSetupUserDataSaveData::NormalTeaming' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveData, SingleTeaming) == 0x0000A0, "Member 'FSSBattleSetupUserDataSaveData::SingleTeaming' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveData, DPBattleTeaming) == 0x0000F0, "Member 'FSSBattleSetupUserDataSaveData::DPBattleTeaming' has a wrong offset!");
static_assert(offsetof(FSSBattleSetupUserDataSaveData, BuildupMySet) == 0x000140, "Member 'FSSBattleSetupUserDataSaveData::BuildupMySet' has a wrong offset!");

// ScriptStruct SS.SSBattleDirectionUserDataSaveData
// 0x0014 (0x0014 - 0x0000)
struct FSSBattleDirectionUserDataSaveData final
{
public:
	struct FSSBattleDirectionSettingUserDataSaveData Normal;                                            // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleDirectionUserDataSaveData) == 0x000004, "Wrong alignment on FSSBattleDirectionUserDataSaveData");
static_assert(sizeof(FSSBattleDirectionUserDataSaveData) == 0x000014, "Wrong size on FSSBattleDirectionUserDataSaveData");
static_assert(offsetof(FSSBattleDirectionUserDataSaveData, Normal) == 0x000000, "Member 'FSSBattleDirectionUserDataSaveData::Normal' has a wrong offset!");

// ScriptStruct SS.SSBattleSettingUserDataSaveData
// 0x0001 (0x0001 - 0x0000)
struct FSSBattleSettingUserDataSaveData final
{
public:
	EKoratBattleMemberRule                        NormalBattleMemberRule;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleSettingUserDataSaveData) == 0x000001, "Wrong alignment on FSSBattleSettingUserDataSaveData");
static_assert(sizeof(FSSBattleSettingUserDataSaveData) == 0x000001, "Wrong size on FSSBattleSettingUserDataSaveData");
static_assert(offsetof(FSSBattleSettingUserDataSaveData, NormalBattleMemberRule) == 0x000000, "Member 'FSSBattleSettingUserDataSaveData::NormalBattleMemberRule' has a wrong offset!");

// ScriptStruct SS.KoratBattlePlayModeRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratBattlePlayModeRecord final
{
public:
	int32                                         PlayCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              PlayBattleTime;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoseCount;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawCount;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattlePlayModeRecord) == 0x000008, "Wrong alignment on FKoratBattlePlayModeRecord");
static_assert(sizeof(FKoratBattlePlayModeRecord) == 0x000020, "Wrong size on FKoratBattlePlayModeRecord");
static_assert(offsetof(FKoratBattlePlayModeRecord, PlayCount) == 0x000000, "Member 'FKoratBattlePlayModeRecord::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayModeRecord, PlayBattleTime) == 0x000008, "Member 'FKoratBattlePlayModeRecord::PlayBattleTime' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayModeRecord, WinCount) == 0x000010, "Member 'FKoratBattlePlayModeRecord::WinCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayModeRecord, LoseCount) == 0x000014, "Member 'FKoratBattlePlayModeRecord::LoseCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayModeRecord, DrawCount) == 0x000018, "Member 'FKoratBattlePlayModeRecord::DrawCount' has a wrong offset!");

// ScriptStruct SS.KoratBattlePlayerRecord
// 0x00C0 (0x00C0 - 0x0000)
struct FKoratBattlePlayerRecord final
{
public:
	TMap<EKoratPlayModeType, struct FKoratBattlePlayModeRecord> TotalPlayModeCount;                                // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TotalPlayMaxCount;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalVictoryCount;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalKillCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalOpenCharacterCount;                           // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              AverageBattleTimeSpan;                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageEXACount;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSPMCount;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageULTCount;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToTalPlayerPlayMaxCount;                           // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PlayMaxCount;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterDataList>        PlayMaxCharacter;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         HitMaxCount;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                HitMaxCharacter;                                   // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageMaxCount;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                DamageMaxCharacter;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillMaxCount;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                KillMaxCharacter;                                  // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratBattlePlayerRecord) == 0x000008, "Wrong alignment on FKoratBattlePlayerRecord");
static_assert(sizeof(FKoratBattlePlayerRecord) == 0x0000C0, "Wrong size on FKoratBattlePlayerRecord");
static_assert(offsetof(FKoratBattlePlayerRecord, TotalPlayModeCount) == 0x000000, "Member 'FKoratBattlePlayerRecord::TotalPlayModeCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, TotalPlayMaxCount) == 0x000050, "Member 'FKoratBattlePlayerRecord::TotalPlayMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, TotalVictoryCount) == 0x000054, "Member 'FKoratBattlePlayerRecord::TotalVictoryCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, TotalKillCount) == 0x000058, "Member 'FKoratBattlePlayerRecord::TotalKillCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, TotalOpenCharacterCount) == 0x00005C, "Member 'FKoratBattlePlayerRecord::TotalOpenCharacterCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, AverageBattleTimeSpan) == 0x000060, "Member 'FKoratBattlePlayerRecord::AverageBattleTimeSpan' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, AverageEXACount) == 0x000068, "Member 'FKoratBattlePlayerRecord::AverageEXACount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, AverageSPMCount) == 0x00006C, "Member 'FKoratBattlePlayerRecord::AverageSPMCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, AverageULTCount) == 0x000070, "Member 'FKoratBattlePlayerRecord::AverageULTCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, ToTalPlayerPlayMaxCount) == 0x000074, "Member 'FKoratBattlePlayerRecord::ToTalPlayerPlayMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, PlayMaxCount) == 0x000078, "Member 'FKoratBattlePlayerRecord::PlayMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, PlayMaxCharacter) == 0x000088, "Member 'FKoratBattlePlayerRecord::PlayMaxCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, HitMaxCount) == 0x000098, "Member 'FKoratBattlePlayerRecord::HitMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, HitMaxCharacter) == 0x00009C, "Member 'FKoratBattlePlayerRecord::HitMaxCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, DamageMaxCount) == 0x0000A4, "Member 'FKoratBattlePlayerRecord::DamageMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, DamageMaxCharacter) == 0x0000A8, "Member 'FKoratBattlePlayerRecord::DamageMaxCharacter' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, KillMaxCount) == 0x0000B0, "Member 'FKoratBattlePlayerRecord::KillMaxCount' has a wrong offset!");
static_assert(offsetof(FKoratBattlePlayerRecord, KillMaxCharacter) == 0x0000B4, "Member 'FKoratBattlePlayerRecord::KillMaxCharacter' has a wrong offset!");

// ScriptStruct SS.KoratBattleCharacterRecord
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratBattleCharacterRecord final
{
public:
	int32                                         PlayCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProficiencyCount;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProficiencyRank;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxComboNum;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxComboDamage;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GivenDamageMax;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TakenDamageMax;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              BattleTime;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleTimeCount;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EKoratCharacterBattleCountType, int32>   BattleNumCount;                                    // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         AverageCharacterCount;                             // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              AverageBattleTimeSpan;                             // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageEXACount;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSPMCount;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageULTCount;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchSinglePlayCount;                          // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankMatchTeamPlayCount;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMatchPlayCount;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TenkaichPlayCount;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TenkaichOnilePlayCount;                            // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleCharacterRecord) == 0x000008, "Wrong alignment on FKoratBattleCharacterRecord");
static_assert(sizeof(FKoratBattleCharacterRecord) == 0x0000B8, "Wrong size on FKoratBattleCharacterRecord");
static_assert(offsetof(FKoratBattleCharacterRecord, PlayCount) == 0x000000, "Member 'FKoratBattleCharacterRecord::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, ProficiencyCount) == 0x000004, "Member 'FKoratBattleCharacterRecord::ProficiencyCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, ProficiencyRank) == 0x000008, "Member 'FKoratBattleCharacterRecord::ProficiencyRank' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, MaxComboNum) == 0x00000C, "Member 'FKoratBattleCharacterRecord::MaxComboNum' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, MaxComboDamage) == 0x000010, "Member 'FKoratBattleCharacterRecord::MaxComboDamage' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, KillCount) == 0x000014, "Member 'FKoratBattleCharacterRecord::KillCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, GivenDamageMax) == 0x000018, "Member 'FKoratBattleCharacterRecord::GivenDamageMax' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, TakenDamageMax) == 0x000020, "Member 'FKoratBattleCharacterRecord::TakenDamageMax' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, BattleTime) == 0x000028, "Member 'FKoratBattleCharacterRecord::BattleTime' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, BattleTimeCount) == 0x000030, "Member 'FKoratBattleCharacterRecord::BattleTimeCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, BattleNumCount) == 0x000038, "Member 'FKoratBattleCharacterRecord::BattleNumCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, AverageCharacterCount) == 0x000088, "Member 'FKoratBattleCharacterRecord::AverageCharacterCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, AverageBattleTimeSpan) == 0x000090, "Member 'FKoratBattleCharacterRecord::AverageBattleTimeSpan' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, AverageEXACount) == 0x000098, "Member 'FKoratBattleCharacterRecord::AverageEXACount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, AverageSPMCount) == 0x00009C, "Member 'FKoratBattleCharacterRecord::AverageSPMCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, AverageULTCount) == 0x0000A0, "Member 'FKoratBattleCharacterRecord::AverageULTCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, RankMatchSinglePlayCount) == 0x0000A4, "Member 'FKoratBattleCharacterRecord::RankMatchSinglePlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, RankMatchTeamPlayCount) == 0x0000A8, "Member 'FKoratBattleCharacterRecord::RankMatchTeamPlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, PlayerMatchPlayCount) == 0x0000AC, "Member 'FKoratBattleCharacterRecord::PlayerMatchPlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, TenkaichPlayCount) == 0x0000B0, "Member 'FKoratBattleCharacterRecord::TenkaichPlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleCharacterRecord, TenkaichOnilePlayCount) == 0x0000B4, "Member 'FKoratBattleCharacterRecord::TenkaichOnilePlayCount' has a wrong offset!");

// ScriptStruct SS.KoratBattleMapRecord
// 0x000C (0x000C - 0x0000)
struct FKoratBattleMapRecord final
{
public:
	int32                                         PlayCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMapBattleCount                   StagingCount;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratBattleMapRecord) == 0x000004, "Wrong alignment on FKoratBattleMapRecord");
static_assert(sizeof(FKoratBattleMapRecord) == 0x00000C, "Wrong size on FKoratBattleMapRecord");
static_assert(offsetof(FKoratBattleMapRecord, PlayCount) == 0x000000, "Member 'FKoratBattleMapRecord::PlayCount' has a wrong offset!");
static_assert(offsetof(FKoratBattleMapRecord, StagingCount) == 0x000004, "Member 'FKoratBattleMapRecord::StagingCount' has a wrong offset!");

// ScriptStruct SS.KoratDramaticCommonSaveData
// 0x0004 (0x0004 - 0x0000)
struct FKoratDramaticCommonSaveData final
{
public:
	int32                                         PlayCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticCommonSaveData) == 0x000004, "Wrong alignment on FKoratDramaticCommonSaveData");
static_assert(sizeof(FKoratDramaticCommonSaveData) == 0x000004, "Wrong size on FKoratDramaticCommonSaveData");
static_assert(offsetof(FKoratDramaticCommonSaveData, PlayCount) == 0x000000, "Member 'FKoratDramaticCommonSaveData::PlayCount' has a wrong offset!");

// ScriptStruct SS.KoratDramaticBattlePostData
// 0x03F8 (0x03F8 - 0x0000)
struct FKoratDramaticBattlePostData final
{
public:
	struct FKoratDramaticBattleSaveDataRecord     BattleData;                                        // 0x0000(0x0350)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratDramaticCutIDsData> ScenesList;                                        // 0x0350(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratDramaticCutDataRecord> CutScenes;                                         // 0x03A0(0x0050)(NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleExtraDataList      CopyExtraBattleId;                                 // 0x03F0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticBattlePostData) == 0x000008, "Wrong alignment on FKoratDramaticBattlePostData");
static_assert(sizeof(FKoratDramaticBattlePostData) == 0x0003F8, "Wrong size on FKoratDramaticBattlePostData");
static_assert(offsetof(FKoratDramaticBattlePostData, BattleData) == 0x000000, "Member 'FKoratDramaticBattlePostData::BattleData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattlePostData, ScenesList) == 0x000350, "Member 'FKoratDramaticBattlePostData::ScenesList' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattlePostData, CutScenes) == 0x0003A0, "Member 'FKoratDramaticBattlePostData::CutScenes' has a wrong offset!");
static_assert(offsetof(FKoratDramaticBattlePostData, CopyExtraBattleId) == 0x0003F0, "Member 'FKoratDramaticBattlePostData::CopyExtraBattleId' has a wrong offset!");

// ScriptStruct SS.KoratDramaticEditSaveDataRecord
// 0x0478 (0x0478 - 0x0000)
struct FKoratDramaticEditSaveDataRecord final
{
public:
	struct FKoratDramaticBattleSaveDataRecord     DramaticEditData;                                  // 0x0000(0x0350)(NativeAccessSpecifierPublic)
	uint32                                        EditBattleVersion;                                 // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EditDramaVersion;                                  // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        OriginBattleId;                                    // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodCount;                                         // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPosted;                                         // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCleared;                                        // 0x0365(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_366[0x2];                                      // 0x0366(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDramaticCommonSaveData           CommonData;                                        // 0x0368(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FKoratDramaticCutDataRecord> CutScenes;                                         // 0x0370(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FKoratDramaticCutIDsData> Scenes;                                            // 0x03C0(0x0050)(NativeAccessSpecifierPublic)
	struct FDateTime                              EditDateTime;                                      // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                CutDefaultThumbnails;                              // 0x0418(0x0050)(NativeAccessSpecifierPublic)
	class FName                                   EditBattleDateId;                                  // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratDramaticBattleExtraDataList      CopyExtraBattleId;                                 // 0x0470(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticEditSaveDataRecord) == 0x000008, "Wrong alignment on FKoratDramaticEditSaveDataRecord");
static_assert(sizeof(FKoratDramaticEditSaveDataRecord) == 0x000478, "Wrong size on FKoratDramaticEditSaveDataRecord");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, DramaticEditData) == 0x000000, "Member 'FKoratDramaticEditSaveDataRecord::DramaticEditData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, EditBattleVersion) == 0x000350, "Member 'FKoratDramaticEditSaveDataRecord::EditBattleVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, EditDramaVersion) == 0x000354, "Member 'FKoratDramaticEditSaveDataRecord::EditDramaVersion' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, OriginBattleId) == 0x000358, "Member 'FKoratDramaticEditSaveDataRecord::OriginBattleId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, GoodCount) == 0x000360, "Member 'FKoratDramaticEditSaveDataRecord::GoodCount' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, bIsPosted) == 0x000364, "Member 'FKoratDramaticEditSaveDataRecord::bIsPosted' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, bIsCleared) == 0x000365, "Member 'FKoratDramaticEditSaveDataRecord::bIsCleared' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, CommonData) == 0x000368, "Member 'FKoratDramaticEditSaveDataRecord::CommonData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, CutScenes) == 0x000370, "Member 'FKoratDramaticEditSaveDataRecord::CutScenes' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, Scenes) == 0x0003C0, "Member 'FKoratDramaticEditSaveDataRecord::Scenes' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, EditDateTime) == 0x000410, "Member 'FKoratDramaticEditSaveDataRecord::EditDateTime' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, CutDefaultThumbnails) == 0x000418, "Member 'FKoratDramaticEditSaveDataRecord::CutDefaultThumbnails' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, EditBattleDateId) == 0x000468, "Member 'FKoratDramaticEditSaveDataRecord::EditBattleDateId' has a wrong offset!");
static_assert(offsetof(FKoratDramaticEditSaveDataRecord, CopyExtraBattleId) == 0x000470, "Member 'FKoratDramaticEditSaveDataRecord::CopyExtraBattleId' has a wrong offset!");

// ScriptStruct SS.KoratDramaticExtraProgressData
// 0x0008 (0x0008 - 0x0000)
struct FKoratDramaticExtraProgressData final
{
public:
	int32                                         NowProgressNum;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCleard;                                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnlocked;                                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticExtraProgressData) == 0x000004, "Wrong alignment on FKoratDramaticExtraProgressData");
static_assert(sizeof(FKoratDramaticExtraProgressData) == 0x000008, "Wrong size on FKoratDramaticExtraProgressData");
static_assert(offsetof(FKoratDramaticExtraProgressData, NowProgressNum) == 0x000000, "Member 'FKoratDramaticExtraProgressData::NowProgressNum' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraProgressData, bIsCleard) == 0x000004, "Member 'FKoratDramaticExtraProgressData::bIsCleard' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraProgressData, bIsUnlocked) == 0x000005, "Member 'FKoratDramaticExtraProgressData::bIsUnlocked' has a wrong offset!");

// ScriptStruct SS.KoratDramaticExtraSaveDataRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratDramaticExtraSaveDataRecord final
{
public:
	TArray<struct FKoratDramaticExtraProgressData> DramaticMissionProgressDatas;                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratDramaticCommonSaveData           CommonData;                                        // 0x0010(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	EKoratUnLockMode                              UnLockMode;                                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClearedNum;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSUnLockDetail                        UnLockDetail;                                      // 0x001C(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratDramaticExtraSaveDataRecord) == 0x000008, "Wrong alignment on FKoratDramaticExtraSaveDataRecord");
static_assert(sizeof(FKoratDramaticExtraSaveDataRecord) == 0x000020, "Wrong size on FKoratDramaticExtraSaveDataRecord");
static_assert(offsetof(FKoratDramaticExtraSaveDataRecord, DramaticMissionProgressDatas) == 0x000000, "Member 'FKoratDramaticExtraSaveDataRecord::DramaticMissionProgressDatas' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraSaveDataRecord, CommonData) == 0x000010, "Member 'FKoratDramaticExtraSaveDataRecord::CommonData' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraSaveDataRecord, UnLockMode) == 0x000014, "Member 'FKoratDramaticExtraSaveDataRecord::UnLockMode' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraSaveDataRecord, ClearedNum) == 0x000018, "Member 'FKoratDramaticExtraSaveDataRecord::ClearedNum' has a wrong offset!");
static_assert(offsetof(FKoratDramaticExtraSaveDataRecord, UnLockDetail) == 0x00001C, "Member 'FKoratDramaticExtraSaveDataRecord::UnLockDetail' has a wrong offset!");

// ScriptStruct SS.KoratDramaticWLibBattleReportSaveData
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratDramaticWLibBattleReportSaveData final
{
public:
	TMap<ESSWLibPenaltyReasonType, struct FDateTime> LastPenaltyNotifyDate;                             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<ESSWLibPenaltyReasonType, int32>         LastNotifyPenaltyLevel;                            // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	struct FDateTime                              LastReportDate;                                    // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint64>                                TodayReportedBattles;                              // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticWLibBattleReportSaveData) == 0x000008, "Wrong alignment on FKoratDramaticWLibBattleReportSaveData");
static_assert(sizeof(FKoratDramaticWLibBattleReportSaveData) == 0x0000B8, "Wrong size on FKoratDramaticWLibBattleReportSaveData");
static_assert(offsetof(FKoratDramaticWLibBattleReportSaveData, LastPenaltyNotifyDate) == 0x000000, "Member 'FKoratDramaticWLibBattleReportSaveData::LastPenaltyNotifyDate' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibBattleReportSaveData, LastNotifyPenaltyLevel) == 0x000050, "Member 'FKoratDramaticWLibBattleReportSaveData::LastNotifyPenaltyLevel' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibBattleReportSaveData, LastReportDate) == 0x0000A0, "Member 'FKoratDramaticWLibBattleReportSaveData::LastReportDate' has a wrong offset!");
static_assert(offsetof(FKoratDramaticWLibBattleReportSaveData, TodayReportedBattles) == 0x0000A8, "Member 'FKoratDramaticWLibBattleReportSaveData::TodayReportedBattles' has a wrong offset!");

// ScriptStruct SS.KoratDramaticWLibSaveData
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratDramaticWLibSaveData final
{
public:
	struct FKoratDramaticWLibBattleReportSaveData ReportData;                                        // 0x0000(0x00B8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticWLibSaveData) == 0x000008, "Wrong alignment on FKoratDramaticWLibSaveData");
static_assert(sizeof(FKoratDramaticWLibSaveData) == 0x0000B8, "Wrong size on FKoratDramaticWLibSaveData");
static_assert(offsetof(FKoratDramaticWLibSaveData, ReportData) == 0x000000, "Member 'FKoratDramaticWLibSaveData::ReportData' has a wrong offset!");

// ScriptStruct SS.KoratDramaticTipsSaveDataRecord
// 0x0002 (0x0002 - 0x0000)
struct FKoratDramaticTipsSaveDataRecord final
{
public:
	bool                                          bIsListChecked;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIntroChecked;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratDramaticTipsSaveDataRecord) == 0x000001, "Wrong alignment on FKoratDramaticTipsSaveDataRecord");
static_assert(sizeof(FKoratDramaticTipsSaveDataRecord) == 0x000002, "Wrong size on FKoratDramaticTipsSaveDataRecord");
static_assert(offsetof(FKoratDramaticTipsSaveDataRecord, bIsListChecked) == 0x000000, "Member 'FKoratDramaticTipsSaveDataRecord::bIsListChecked' has a wrong offset!");
static_assert(offsetof(FKoratDramaticTipsSaveDataRecord, bIsIntroChecked) == 0x000001, "Member 'FKoratDramaticTipsSaveDataRecord::bIsIntroChecked' has a wrong offset!");

// ScriptStruct SS.SSTutorialData
// 0x0001 (0x0001 - 0x0000)
struct FSSTutorialData final
{
public:
	EKoratTutorialMode                            TutorialMode;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTutorialData) == 0x000001, "Wrong alignment on FSSTutorialData");
static_assert(sizeof(FSSTutorialData) == 0x000001, "Wrong size on FSSTutorialData");
static_assert(offsetof(FSSTutorialData, TutorialMode) == 0x000000, "Member 'FSSTutorialData::TutorialMode' has a wrong offset!");

// ScriptStruct SS.SSTournamentCount
// 0x001C (0x001C - 0x0000)
struct FSSTournamentCount final
{
public:
	class FName                                   TournamentName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VictoryCount;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinStreak;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWinStreak;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TournamentVictoryCount;                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentCount) == 0x000004, "Wrong alignment on FSSTournamentCount");
static_assert(sizeof(FSSTournamentCount) == 0x00001C, "Wrong size on FSSTournamentCount");
static_assert(offsetof(FSSTournamentCount, TournamentName) == 0x000000, "Member 'FSSTournamentCount::TournamentName' has a wrong offset!");
static_assert(offsetof(FSSTournamentCount, PlayCount) == 0x000008, "Member 'FSSTournamentCount::PlayCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentCount, VictoryCount) == 0x00000C, "Member 'FSSTournamentCount::VictoryCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentCount, WinStreak) == 0x000010, "Member 'FSSTournamentCount::WinStreak' has a wrong offset!");
static_assert(offsetof(FSSTournamentCount, MaxWinStreak) == 0x000014, "Member 'FSSTournamentCount::MaxWinStreak' has a wrong offset!");
static_assert(offsetof(FSSTournamentCount, TournamentVictoryCount) == 0x000018, "Member 'FSSTournamentCount::TournamentVictoryCount' has a wrong offset!");

// ScriptStruct SS.SSTournamentData
// 0x0048 (0x0048 - 0x0000)
struct FSSTournamentData final
{
public:
	TArray<class FName>                           VictoryTournamentList;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSTournamentEditData>          EditRules;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSTournamentCount>             TournamentCount;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         VictoryTournamentCount;                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWinStreak;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayCount;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharacterCount;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratCharacterDataList                CharaName;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentData) == 0x000008, "Wrong alignment on FSSTournamentData");
static_assert(sizeof(FSSTournamentData) == 0x000048, "Wrong size on FSSTournamentData");
static_assert(offsetof(FSSTournamentData, VictoryTournamentList) == 0x000000, "Member 'FSSTournamentData::VictoryTournamentList' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, EditRules) == 0x000010, "Member 'FSSTournamentData::EditRules' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, TournamentCount) == 0x000020, "Member 'FSSTournamentData::TournamentCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, VictoryTournamentCount) == 0x000030, "Member 'FSSTournamentData::VictoryTournamentCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, MaxWinStreak) == 0x000034, "Member 'FSSTournamentData::MaxWinStreak' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, TotalPlayCount) == 0x000038, "Member 'FSSTournamentData::TotalPlayCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, MaxCharacterCount) == 0x00003C, "Member 'FSSTournamentData::MaxCharacterCount' has a wrong offset!");
static_assert(offsetof(FSSTournamentData, CharaName) == 0x000040, "Member 'FSSTournamentData::CharaName' has a wrong offset!");

// ScriptStruct SS.SSNotificationBuffer
// 0x0010 (0x0010 - 0x0000)
struct FSSNotificationBuffer final
{
public:
	TArray<struct FSSNotificationData>            Buffer;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSNotificationBuffer) == 0x000008, "Wrong alignment on FSSNotificationBuffer");
static_assert(sizeof(FSSNotificationBuffer) == 0x000010, "Wrong size on FSSNotificationBuffer");
static_assert(offsetof(FSSNotificationBuffer, Buffer) == 0x000000, "Member 'FSSNotificationBuffer::Buffer' has a wrong offset!");

// ScriptStruct SS.SSNotificationSaveData
// 0x0010 (0x0010 - 0x0000)
struct FSSNotificationSaveData final
{
public:
	struct FSSNotificationBuffer                  NotYetShowns;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSNotificationSaveData) == 0x000008, "Wrong alignment on FSSNotificationSaveData");
static_assert(sizeof(FSSNotificationSaveData) == 0x000010, "Wrong size on FSSNotificationSaveData");
static_assert(offsetof(FSSNotificationSaveData, NotYetShowns) == 0x000000, "Member 'FSSNotificationSaveData::NotYetShowns' has a wrong offset!");

// ScriptStruct SS.SSMainMenuTransitionCharacterArray
// 0x0010 (0x0010 - 0x0000)
struct FSSMainMenuTransitionCharacterArray final
{
public:
	TArray<struct FSSMainMenuTransitionCharacterData> Characters;                                        // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuTransitionCharacterArray) == 0x000008, "Wrong alignment on FSSMainMenuTransitionCharacterArray");
static_assert(sizeof(FSSMainMenuTransitionCharacterArray) == 0x000010, "Wrong size on FSSMainMenuTransitionCharacterArray");
static_assert(offsetof(FSSMainMenuTransitionCharacterArray, Characters) == 0x000000, "Member 'FSSMainMenuTransitionCharacterArray::Characters' has a wrong offset!");

// ScriptStruct SS.SSMainMenuTransitionData
// 0x0077 (0x0078 - 0x0001)
struct FSSMainMenuTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMainMenuSceneArea, struct FSSMainMenuTransitionCharacterArray> AreaCharacters;                                    // 0x0018(0x0050)(Transient, NativeAccessSpecifierPublic)
	class ASSMenuCharacterManager*                MenuCharacterManager;                              // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuTransitionData) == 0x000008, "Wrong alignment on FSSMainMenuTransitionData");
static_assert(sizeof(FSSMainMenuTransitionData) == 0x000078, "Wrong size on FSSMainMenuTransitionData");
static_assert(offsetof(FSSMainMenuTransitionData, AreaCharacters) == 0x000018, "Member 'FSSMainMenuTransitionData::AreaCharacters' has a wrong offset!");
static_assert(offsetof(FSSMainMenuTransitionData, MenuCharacterManager) == 0x000068, "Member 'FSSMainMenuTransitionData::MenuCharacterManager' has a wrong offset!");

// ScriptStruct SS.SSMainMenuNPCWaitAnimData
// 0x0050 (0x0050 - 0x0000)
struct FSSMainMenuNPCWaitAnimData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratPlayerStartDataList>      RelationCharacters;                                // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReservedWaitAnimIndex;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlayNextOwn;                                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTransformTrack;                              // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstPlay;                                        // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebindLocator;                                    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuNPCWaitAnimData) == 0x000008, "Wrong alignment on FSSMainMenuNPCWaitAnimData");
static_assert(sizeof(FSSMainMenuNPCWaitAnimData) == 0x000050, "Wrong size on FSSMainMenuNPCWaitAnimData");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, Sequence) == 0x000000, "Member 'FSSMainMenuNPCWaitAnimData::Sequence' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, Duration) == 0x000030, "Member 'FSSMainMenuNPCWaitAnimData::Duration' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, RelationCharacters) == 0x000038, "Member 'FSSMainMenuNPCWaitAnimData::RelationCharacters' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, ReservedWaitAnimIndex) == 0x000048, "Member 'FSSMainMenuNPCWaitAnimData::ReservedWaitAnimIndex' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, bAllowPlayNextOwn) == 0x00004C, "Member 'FSSMainMenuNPCWaitAnimData::bAllowPlayNextOwn' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, bAllowTransformTrack) == 0x00004D, "Member 'FSSMainMenuNPCWaitAnimData::bAllowTransformTrack' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, bFirstPlay) == 0x00004E, "Member 'FSSMainMenuNPCWaitAnimData::bFirstPlay' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPCWaitAnimData, bRebindLocator) == 0x00004F, "Member 'FSSMainMenuNPCWaitAnimData::bRebindLocator' has a wrong offset!");

// ScriptStruct SS.SSMainMenuNPC
// 0x0048 (0x0048 - 0x0000)
struct FSSMainMenuNPC final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSMainMenuNPCWaitAnimData>     WaitAnimData;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AnimDeltaTime;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitAnimIndex;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSMenuCharacter*                       MenuCharacter;                                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSLevelSequenceActor*                  AnimSequenceActor;                                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntryActionPlayed;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceOrigin;                                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMainMenuNPC) == 0x000008, "Wrong alignment on FSSMainMenuNPC");
static_assert(sizeof(FSSMainMenuNPC) == 0x000048, "Wrong size on FSSMainMenuNPC");
static_assert(offsetof(FSSMainMenuNPC, WaitAnimData) == 0x000018, "Member 'FSSMainMenuNPC::WaitAnimData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, AnimDeltaTime) == 0x000028, "Member 'FSSMainMenuNPC::AnimDeltaTime' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, WaitAnimIndex) == 0x00002C, "Member 'FSSMainMenuNPC::WaitAnimIndex' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, MenuCharacter) == 0x000030, "Member 'FSSMainMenuNPC::MenuCharacter' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, AnimSequenceActor) == 0x000038, "Member 'FSSMainMenuNPC::AnimSequenceActor' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, bEntryActionPlayed) == 0x000040, "Member 'FSSMainMenuNPC::bEntryActionPlayed' has a wrong offset!");
static_assert(offsetof(FSSMainMenuNPC, bForceOrigin) == 0x000041, "Member 'FSSMainMenuNPC::bForceOrigin' has a wrong offset!");

// ScriptStruct SS.SSMainMenuAreaNpcData
// 0x0050 (0x0050 - 0x0000)
struct FSSMainMenuAreaNpcData final
{
public:
	TMap<struct FKoratPlayerStartDataList, struct FSSMainMenuNPC> Characters;                                        // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuAreaNpcData) == 0x000008, "Wrong alignment on FSSMainMenuAreaNpcData");
static_assert(sizeof(FSSMainMenuAreaNpcData) == 0x000050, "Wrong size on FSSMainMenuAreaNpcData");
static_assert(offsetof(FSSMainMenuAreaNpcData, Characters) == 0x000000, "Member 'FSSMainMenuAreaNpcData::Characters' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListMenuButtonData
// 0x0028 (0x01F8 - 0x01D0)
struct FSSMainMenuListMenuButtonData final : public FSSMainMenuListButtonBase
{
public:
	TArray<struct FSSMainMenu2ndMenuButtonData>   ButtonData;                                        // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x01E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuListMenuButtonData) == 0x000008, "Wrong alignment on FSSMainMenuListMenuButtonData");
static_assert(sizeof(FSSMainMenuListMenuButtonData) == 0x0001F8, "Wrong size on FSSMainMenuListMenuButtonData");
static_assert(offsetof(FSSMainMenuListMenuButtonData, ButtonData) == 0x0001D0, "Member 'FSSMainMenuListMenuButtonData::ButtonData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuButtonData, TitleText) == 0x0001E0, "Member 'FSSMainMenuListMenuButtonData::TitleText' has a wrong offset!");

// ScriptStruct SS.SSMainMenuListMenuDataAssetRecord
// 0x0068 (0x0068 - 0x0000)
struct FSSMainMenuListMenuDataAssetRecord final
{
public:
	EMainMenuSceneArea                            AreaId;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuListMenuButtonData>  Buttons;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EMainMenuListMenuMode                         MenuMode;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMainMenuButtonBadgeCondition                 NotificationBadgeCondition;                        // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratButtonGuideDataList              ButtonGuide;                                       // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ButtonGuideHiddenIndexes;                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuListMenuDataAssetRecord) == 0x000008, "Wrong alignment on FSSMainMenuListMenuDataAssetRecord");
static_assert(sizeof(FSSMainMenuListMenuDataAssetRecord) == 0x000068, "Wrong size on FSSMainMenuListMenuDataAssetRecord");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, AreaId) == 0x000000, "Member 'FSSMainMenuListMenuDataAssetRecord::AreaId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, TitleText) == 0x000008, "Member 'FSSMainMenuListMenuDataAssetRecord::TitleText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, GuideText) == 0x000020, "Member 'FSSMainMenuListMenuDataAssetRecord::GuideText' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, Buttons) == 0x000038, "Member 'FSSMainMenuListMenuDataAssetRecord::Buttons' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, MenuMode) == 0x000048, "Member 'FSSMainMenuListMenuDataAssetRecord::MenuMode' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, NotificationBadgeCondition) == 0x000049, "Member 'FSSMainMenuListMenuDataAssetRecord::NotificationBadgeCondition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, ButtonGuide) == 0x00004C, "Member 'FSSMainMenuListMenuDataAssetRecord::ButtonGuide' has a wrong offset!");
static_assert(offsetof(FSSMainMenuListMenuDataAssetRecord, ButtonGuideHiddenIndexes) == 0x000058, "Member 'FSSMainMenuListMenuDataAssetRecord::ButtonGuideHiddenIndexes' has a wrong offset!");

// ScriptStruct SS.SSMainMenuLocText
// 0x0030 (0x0030 - 0x0000)
struct FSSMainMenuLocText final
{
public:
	class FString                                 Literal;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuLocText) == 0x000008, "Wrong alignment on FSSMainMenuLocText");
static_assert(sizeof(FSSMainMenuLocText) == 0x000030, "Wrong size on FSSMainMenuLocText");
static_assert(offsetof(FSSMainMenuLocText, Literal) == 0x000000, "Member 'FSSMainMenuLocText::Literal' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLocText, Namespace) == 0x000010, "Member 'FSSMainMenuLocText::Namespace' has a wrong offset!");
static_assert(offsetof(FSSMainMenuLocText, Key) == 0x000020, "Member 'FSSMainMenuLocText::Key' has a wrong offset!");

// ScriptStruct SS.SSMainMenuPagerItem
// 0x0010 (0x0010 - 0x0000)
struct FSSMainMenuPagerItem final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        Switcher;                                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuPagerItem) == 0x000008, "Wrong alignment on FSSMainMenuPagerItem");
static_assert(sizeof(FSSMainMenuPagerItem) == 0x000010, "Wrong size on FSSMainMenuPagerItem");
static_assert(offsetof(FSSMainMenuPagerItem, Widget) == 0x000000, "Member 'FSSMainMenuPagerItem::Widget' has a wrong offset!");
static_assert(offsetof(FSSMainMenuPagerItem, Switcher) == 0x000008, "Member 'FSSMainMenuPagerItem::Switcher' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSceneTransitionData
// 0x00A0 (0x00A0 - 0x0000)
struct FSSMainMenuSceneTransitionData final
{
public:
	TMap<EMainMenuSceneArea, struct FSSMainMenuSceneTransitionSequence> From;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMainMenuSceneArea, struct FSSMainMenuSceneTransitionSequence> To;                                                // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSceneTransitionData) == 0x000008, "Wrong alignment on FSSMainMenuSceneTransitionData");
static_assert(sizeof(FSSMainMenuSceneTransitionData) == 0x0000A0, "Wrong size on FSSMainMenuSceneTransitionData");
static_assert(offsetof(FSSMainMenuSceneTransitionData, From) == 0x000000, "Member 'FSSMainMenuSceneTransitionData::From' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneTransitionData, To) == 0x000050, "Member 'FSSMainMenuSceneTransitionData::To' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubSceneChild
// 0x0190 (0x0190 - 0x0000)
struct FSSMainMenuSubSceneChild final
{
public:
	TArray<struct FSSMainMenuCharacterData>       CharacterList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          FixedCamSequencer;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMainMenuLevelTransitionData         LevelTransition;                                   // 0x0040(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuSubSceneGrandchild>  ChildScene;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubSceneChild) == 0x000008, "Wrong alignment on FSSMainMenuSubSceneChild");
static_assert(sizeof(FSSMainMenuSubSceneChild) == 0x000190, "Wrong size on FSSMainMenuSubSceneChild");
static_assert(offsetof(FSSMainMenuSubSceneChild, CharacterList) == 0x000000, "Member 'FSSMainMenuSubSceneChild::CharacterList' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneChild, FixedCamSequencer) == 0x000010, "Member 'FSSMainMenuSubSceneChild::FixedCamSequencer' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneChild, LevelTransition) == 0x000040, "Member 'FSSMainMenuSubSceneChild::LevelTransition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneChild, ChildScene) == 0x000180, "Member 'FSSMainMenuSubSceneChild::ChildScene' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubSceneData
// 0x0190 (0x0190 - 0x0000)
struct FSSMainMenuSubSceneData final
{
public:
	TArray<struct FSSMainMenuCharacterData>       CharacterList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          FixedCamSequencer;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMainMenuLevelTransitionData         LevelTransition;                                   // 0x0040(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuSubSceneChild>       ChildScene;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubSceneData) == 0x000008, "Wrong alignment on FSSMainMenuSubSceneData");
static_assert(sizeof(FSSMainMenuSubSceneData) == 0x000190, "Wrong size on FSSMainMenuSubSceneData");
static_assert(offsetof(FSSMainMenuSubSceneData, CharacterList) == 0x000000, "Member 'FSSMainMenuSubSceneData::CharacterList' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneData, FixedCamSequencer) == 0x000010, "Member 'FSSMainMenuSubSceneData::FixedCamSequencer' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneData, LevelTransition) == 0x000040, "Member 'FSSMainMenuSubSceneData::LevelTransition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubSceneData, ChildScene) == 0x000180, "Member 'FSSMainMenuSubSceneData::ChildScene' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSceneDataAssetRecord
// 0x0128 (0x0128 - 0x0000)
struct FSSMainMenuSceneDataAssetRecord final
{
public:
	EMainMenuSceneArea                            SceneAreaId;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  AreaSubLevel;                                      // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSMainMenuCharacterData               MainCharacterData;                                 // 0x0038(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSSMainMenuSceneTransitionData         Transition;                                        // 0x0068(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuSubSceneData>        SubScenes;                                         // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSMainMenuCharacterData>       BackgroundCharacterList;                           // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSceneDataAssetRecord) == 0x000008, "Wrong alignment on FSSMainMenuSceneDataAssetRecord");
static_assert(sizeof(FSSMainMenuSceneDataAssetRecord) == 0x000128, "Wrong size on FSSMainMenuSceneDataAssetRecord");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, SceneAreaId) == 0x000000, "Member 'FSSMainMenuSceneDataAssetRecord::SceneAreaId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, AreaSubLevel) == 0x000008, "Member 'FSSMainMenuSceneDataAssetRecord::AreaSubLevel' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, MainCharacterData) == 0x000038, "Member 'FSSMainMenuSceneDataAssetRecord::MainCharacterData' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, Transition) == 0x000068, "Member 'FSSMainMenuSceneDataAssetRecord::Transition' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, SubScenes) == 0x000108, "Member 'FSSMainMenuSceneDataAssetRecord::SubScenes' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSceneDataAssetRecord, BackgroundCharacterList) == 0x000118, "Member 'FSSMainMenuSceneDataAssetRecord::BackgroundCharacterList' has a wrong offset!");

// ScriptStruct SS.SSMainMenuSubLevelDataAssetRecord
// 0x0018 (0x0018 - 0x0000)
struct FSSMainMenuSubLevelDataAssetRecord final
{
public:
	EMainMenuSceneArea                            AreaId;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UWorld>>          VisibleLevels;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMainMenuSubLevelDataAssetRecord) == 0x000008, "Wrong alignment on FSSMainMenuSubLevelDataAssetRecord");
static_assert(sizeof(FSSMainMenuSubLevelDataAssetRecord) == 0x000018, "Wrong size on FSSMainMenuSubLevelDataAssetRecord");
static_assert(offsetof(FSSMainMenuSubLevelDataAssetRecord, AreaId) == 0x000000, "Member 'FSSMainMenuSubLevelDataAssetRecord::AreaId' has a wrong offset!");
static_assert(offsetof(FSSMainMenuSubLevelDataAssetRecord, VisibleLevels) == 0x000008, "Member 'FSSMainMenuSubLevelDataAssetRecord::VisibleLevels' has a wrong offset!");

// ScriptStruct SS.SSAreaEditorEditId
// 0x0008 (0x0008 - 0x0000)
struct FSSAreaEditorEditId final
{
public:
	EMapAreaEditType                              AreaType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniqueId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSAreaEditorEditId) == 0x000004, "Wrong alignment on FSSAreaEditorEditId");
static_assert(sizeof(FSSAreaEditorEditId) == 0x000008, "Wrong size on FSSAreaEditorEditId");
static_assert(offsetof(FSSAreaEditorEditId, AreaType) == 0x000000, "Member 'FSSAreaEditorEditId::AreaType' has a wrong offset!");
static_assert(offsetof(FSSAreaEditorEditId, UniqueId) == 0x000004, "Member 'FSSAreaEditorEditId::UniqueId' has a wrong offset!");

// ScriptStruct SS.SSMapAreaEditorResourceCylinderPoolInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSMapAreaEditorResourceCylinderPoolInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMapAreaEditorResourceCylinderPoolInfo) == 0x000008, "Wrong alignment on FSSMapAreaEditorResourceCylinderPoolInfo");
static_assert(sizeof(FSSMapAreaEditorResourceCylinderPoolInfo) == 0x000010, "Wrong size on FSSMapAreaEditorResourceCylinderPoolInfo");

// ScriptStruct SS.KoratMapAttributeData
// 0x0000 (0x0008 - 0x0008)
struct FKoratMapAttributeData final : public FTableRowBase
{
};
static_assert(alignof(FKoratMapAttributeData) == 0x000008, "Wrong alignment on FKoratMapAttributeData");
static_assert(sizeof(FKoratMapAttributeData) == 0x000008, "Wrong size on FKoratMapAttributeData");

// ScriptStruct SS.SSWarpBoxRegion
// 0x0090 (0x0090 - 0x0000)
struct FSSWarpBoxRegion final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Max;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSWarpRegionTransform                 Transform;                                         // 0x0030(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWarpBoxRegion) == 0x000010, "Wrong alignment on FSSWarpBoxRegion");
static_assert(sizeof(FSSWarpBoxRegion) == 0x000090, "Wrong size on FSSWarpBoxRegion");
static_assert(offsetof(FSSWarpBoxRegion, Min) == 0x000000, "Member 'FSSWarpBoxRegion::Min' has a wrong offset!");
static_assert(offsetof(FSSWarpBoxRegion, Max) == 0x000018, "Member 'FSSWarpBoxRegion::Max' has a wrong offset!");
static_assert(offsetof(FSSWarpBoxRegion, Transform) == 0x000030, "Member 'FSSWarpBoxRegion::Transform' has a wrong offset!");

// ScriptStruct SS.SSWarpCylinderRegion
// 0x0070 (0x0070 - 0x0000)
struct FSSWarpCylinderRegion final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpRegionTransform                 Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWarpCylinderRegion) == 0x000010, "Wrong alignment on FSSWarpCylinderRegion");
static_assert(sizeof(FSSWarpCylinderRegion) == 0x000070, "Wrong size on FSSWarpCylinderRegion");
static_assert(offsetof(FSSWarpCylinderRegion, Radius) == 0x000000, "Member 'FSSWarpCylinderRegion::Radius' has a wrong offset!");
static_assert(offsetof(FSSWarpCylinderRegion, Height) == 0x000004, "Member 'FSSWarpCylinderRegion::Height' has a wrong offset!");
static_assert(offsetof(FSSWarpCylinderRegion, Transform) == 0x000010, "Member 'FSSWarpCylinderRegion::Transform' has a wrong offset!");

// ScriptStruct SS.SSWarpNearByWallArea
// 0x00B0 (0x00B0 - 0x0000)
struct FSSWarpNearByWallArea final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpBoxRegion                       Region;                                            // 0x0010(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEffective;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpNearByWallArea) == 0x000010, "Wrong alignment on FSSWarpNearByWallArea");
static_assert(sizeof(FSSWarpNearByWallArea) == 0x0000B0, "Wrong size on FSSWarpNearByWallArea");
static_assert(offsetof(FSSWarpNearByWallArea, ID) == 0x000000, "Member 'FSSWarpNearByWallArea::ID' has a wrong offset!");
static_assert(offsetof(FSSWarpNearByWallArea, Priority) == 0x000004, "Member 'FSSWarpNearByWallArea::Priority' has a wrong offset!");
static_assert(offsetof(FSSWarpNearByWallArea, Region) == 0x000010, "Member 'FSSWarpNearByWallArea::Region' has a wrong offset!");
static_assert(offsetof(FSSWarpNearByWallArea, IsEffective) == 0x0000A0, "Member 'FSSWarpNearByWallArea::IsEffective' has a wrong offset!");

// ScriptStruct SS.SSLayeredBoxSafeArea
// 0x00B0 (0x00B0 - 0x0000)
struct FSSLayeredBoxSafeArea final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpBoxRegion                       Region;                                            // 0x0010(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEffective;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeedRecoveryWarp;                                // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0xE];                                       // 0x00A2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSLayeredBoxSafeArea) == 0x000010, "Wrong alignment on FSSLayeredBoxSafeArea");
static_assert(sizeof(FSSLayeredBoxSafeArea) == 0x0000B0, "Wrong size on FSSLayeredBoxSafeArea");
static_assert(offsetof(FSSLayeredBoxSafeArea, ID) == 0x000000, "Member 'FSSLayeredBoxSafeArea::ID' has a wrong offset!");
static_assert(offsetof(FSSLayeredBoxSafeArea, Priority) == 0x000004, "Member 'FSSLayeredBoxSafeArea::Priority' has a wrong offset!");
static_assert(offsetof(FSSLayeredBoxSafeArea, Region) == 0x000010, "Member 'FSSLayeredBoxSafeArea::Region' has a wrong offset!");
static_assert(offsetof(FSSLayeredBoxSafeArea, IsEffective) == 0x0000A0, "Member 'FSSLayeredBoxSafeArea::IsEffective' has a wrong offset!");
static_assert(offsetof(FSSLayeredBoxSafeArea, IsNeedRecoveryWarp) == 0x0000A1, "Member 'FSSLayeredBoxSafeArea::IsNeedRecoveryWarp' has a wrong offset!");

// ScriptStruct SS.SSLayeredCylinderSafeArea
// 0x0090 (0x0090 - 0x0000)
struct FSSLayeredCylinderSafeArea final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSWarpCylinderRegion                  Region;                                            // 0x0010(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEffective;                                       // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeedRecoveryWarp;                                // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0xE];                                       // 0x0082(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSLayeredCylinderSafeArea) == 0x000010, "Wrong alignment on FSSLayeredCylinderSafeArea");
static_assert(sizeof(FSSLayeredCylinderSafeArea) == 0x000090, "Wrong size on FSSLayeredCylinderSafeArea");
static_assert(offsetof(FSSLayeredCylinderSafeArea, ID) == 0x000000, "Member 'FSSLayeredCylinderSafeArea::ID' has a wrong offset!");
static_assert(offsetof(FSSLayeredCylinderSafeArea, Priority) == 0x000004, "Member 'FSSLayeredCylinderSafeArea::Priority' has a wrong offset!");
static_assert(offsetof(FSSLayeredCylinderSafeArea, Region) == 0x000010, "Member 'FSSLayeredCylinderSafeArea::Region' has a wrong offset!");
static_assert(offsetof(FSSLayeredCylinderSafeArea, IsEffective) == 0x000080, "Member 'FSSLayeredCylinderSafeArea::IsEffective' has a wrong offset!");
static_assert(offsetof(FSSLayeredCylinderSafeArea, IsNeedRecoveryWarp) == 0x000081, "Member 'FSSLayeredCylinderSafeArea::IsNeedRecoveryWarp' has a wrong offset!");

// ScriptStruct SS.SSWarpPoint
// 0x0080 (0x0080 - 0x0000)
struct FSSWarpPoint final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpPointType                                PointType;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Pose;                                              // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWarpPoint) == 0x000010, "Wrong alignment on FSSWarpPoint");
static_assert(sizeof(FSSWarpPoint) == 0x000080, "Wrong size on FSSWarpPoint");
static_assert(offsetof(FSSWarpPoint, ID) == 0x000000, "Member 'FSSWarpPoint::ID' has a wrong offset!");
static_assert(offsetof(FSSWarpPoint, PointType) == 0x000004, "Member 'FSSWarpPoint::PointType' has a wrong offset!");
static_assert(offsetof(FSSWarpPoint, Name) == 0x000008, "Member 'FSSWarpPoint::Name' has a wrong offset!");
static_assert(offsetof(FSSWarpPoint, Pose) == 0x000020, "Member 'FSSWarpPoint::Pose' has a wrong offset!");

// ScriptStruct SS.SSWarpTargetAreaSet
// 0x0088 (0x0088 - 0x0000)
struct FSSWarpTargetAreaSet final
{
public:
	TArray<struct FSSWarpDirectablePoint>         DirectablePoints;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpDirectablePoint>         AirDirectablePoints;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpDirectablePoint>         WallDirectablePoints;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpDirectablePoint>         WaterDirectablePoints;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpDirectablePoint>         SmallDirectablePoints;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpNearByWallArea>          NearByWallAreas;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSLayeredBoxSafeArea>          WarpLayerdBoxSafeAreaLists;                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSLayeredCylinderSafeArea>     WarpLayerdCylinderSafeAreaLists;                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForceStartPosInDeadlyChangeEntrance;              // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpTargetAreaSet) == 0x000008, "Wrong alignment on FSSWarpTargetAreaSet");
static_assert(sizeof(FSSWarpTargetAreaSet) == 0x000088, "Wrong size on FSSWarpTargetAreaSet");
static_assert(offsetof(FSSWarpTargetAreaSet, DirectablePoints) == 0x000000, "Member 'FSSWarpTargetAreaSet::DirectablePoints' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, AirDirectablePoints) == 0x000010, "Member 'FSSWarpTargetAreaSet::AirDirectablePoints' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, WallDirectablePoints) == 0x000020, "Member 'FSSWarpTargetAreaSet::WallDirectablePoints' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, WaterDirectablePoints) == 0x000030, "Member 'FSSWarpTargetAreaSet::WaterDirectablePoints' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, SmallDirectablePoints) == 0x000040, "Member 'FSSWarpTargetAreaSet::SmallDirectablePoints' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, NearByWallAreas) == 0x000050, "Member 'FSSWarpTargetAreaSet::NearByWallAreas' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, WarpLayerdBoxSafeAreaLists) == 0x000060, "Member 'FSSWarpTargetAreaSet::WarpLayerdBoxSafeAreaLists' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, WarpLayerdCylinderSafeAreaLists) == 0x000070, "Member 'FSSWarpTargetAreaSet::WarpLayerdCylinderSafeAreaLists' has a wrong offset!");
static_assert(offsetof(FSSWarpTargetAreaSet, bForceStartPosInDeadlyChangeEntrance) == 0x000080, "Member 'FSSWarpTargetAreaSet::bForceStartPosInDeadlyChangeEntrance' has a wrong offset!");

// ScriptStruct SS.SSMapWarpAreaDataAssetRecord
// 0x0098 (0x0098 - 0x0000)
struct FSSMapWarpAreaDataAssetRecord final
{
public:
	struct FSSWarpTargetAreaSet                   WarpTargetAreaSet;                                 // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSWarpPoint>                   WarpRelationPoints;                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMapWarpAreaDataAssetRecord) == 0x000008, "Wrong alignment on FSSMapWarpAreaDataAssetRecord");
static_assert(sizeof(FSSMapWarpAreaDataAssetRecord) == 0x000098, "Wrong size on FSSMapWarpAreaDataAssetRecord");
static_assert(offsetof(FSSMapWarpAreaDataAssetRecord, WarpTargetAreaSet) == 0x000000, "Member 'FSSMapWarpAreaDataAssetRecord::WarpTargetAreaSet' has a wrong offset!");
static_assert(offsetof(FSSMapWarpAreaDataAssetRecord, WarpRelationPoints) == 0x000088, "Member 'FSSMapWarpAreaDataAssetRecord::WarpRelationPoints' has a wrong offset!");

// ScriptStruct SS.SSWarpSectionCommnad
// 0x000C (0x000C - 0x0000)
struct FSSWarpSectionCommnad final
{
public:
	struct FKoratBlastActionCategoryDataList      SetctionData;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpStartCondition                           SectionStartCondition;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpStartCondition                           SectionEndCondition;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWarpSectionCommnad) == 0x000004, "Wrong alignment on FSSWarpSectionCommnad");
static_assert(sizeof(FSSWarpSectionCommnad) == 0x00000C, "Wrong size on FSSWarpSectionCommnad");
static_assert(offsetof(FSSWarpSectionCommnad, SetctionData) == 0x000000, "Member 'FSSWarpSectionCommnad::SetctionData' has a wrong offset!");
static_assert(offsetof(FSSWarpSectionCommnad, SectionStartCondition) == 0x000008, "Member 'FSSWarpSectionCommnad::SectionStartCondition' has a wrong offset!");
static_assert(offsetof(FSSWarpSectionCommnad, SectionEndCondition) == 0x000009, "Member 'FSSWarpSectionCommnad::SectionEndCondition' has a wrong offset!");

// ScriptStruct SS.SSRankMatchConditions
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FSSRankMatchConditions final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSRankMatchConditions) == 0x000004, "Wrong alignment on FSSRankMatchConditions");
static_assert(sizeof(FSSRankMatchConditions) == 0x000018, "Wrong size on FSSRankMatchConditions");

// ScriptStruct SS.SSMatchingCondPropDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSMatchingCondPropDataAssetRecord final
{
public:
	class FText                                   PropertyName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSSMatchingCondProp>            PropertyList;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDynamicGenerate;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCPDynamicPropertyListType                   DynamicGenerateType;                               // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMatchingCondPropDataAssetRecord) == 0x000008, "Wrong alignment on FSSMatchingCondPropDataAssetRecord");
static_assert(sizeof(FSSMatchingCondPropDataAssetRecord) == 0x000030, "Wrong size on FSSMatchingCondPropDataAssetRecord");
static_assert(offsetof(FSSMatchingCondPropDataAssetRecord, PropertyName) == 0x000000, "Member 'FSSMatchingCondPropDataAssetRecord::PropertyName' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondPropDataAssetRecord, PropertyList) == 0x000018, "Member 'FSSMatchingCondPropDataAssetRecord::PropertyList' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondPropDataAssetRecord, bDynamicGenerate) == 0x000028, "Member 'FSSMatchingCondPropDataAssetRecord::bDynamicGenerate' has a wrong offset!");
static_assert(offsetof(FSSMatchingCondPropDataAssetRecord, DynamicGenerateType) == 0x000029, "Member 'FSSMatchingCondPropDataAssetRecord::DynamicGenerateType' has a wrong offset!");

// ScriptStruct SS.SSMediaPlayerSetupParameter
// 0x0048 (0x0048 - 0x0000)
struct FSSMediaPlayerSetupParameter final
{
public:
	class UMediaTexture*                          MediaTextureA;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          MediaTextureB;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialParameterNameTextures;                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MaterialParameterNameAlpha;                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMediaPlayerSetupParameter) == 0x000008, "Wrong alignment on FSSMediaPlayerSetupParameter");
static_assert(sizeof(FSSMediaPlayerSetupParameter) == 0x000048, "Wrong size on FSSMediaPlayerSetupParameter");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MediaTextureA) == 0x000000, "Member 'FSSMediaPlayerSetupParameter::MediaTextureA' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MediaTextureB) == 0x000008, "Member 'FSSMediaPlayerSetupParameter::MediaTextureB' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, DynamicMaterial) == 0x000010, "Member 'FSSMediaPlayerSetupParameter::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MeshComponent) == 0x000018, "Member 'FSSMediaPlayerSetupParameter::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MaterialInterface) == 0x000020, "Member 'FSSMediaPlayerSetupParameter::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, Image) == 0x000028, "Member 'FSSMediaPlayerSetupParameter::Image' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MaterialParameterNameTextures) == 0x000030, "Member 'FSSMediaPlayerSetupParameter::MaterialParameterNameTextures' has a wrong offset!");
static_assert(offsetof(FSSMediaPlayerSetupParameter, MaterialParameterNameAlpha) == 0x000040, "Member 'FSSMediaPlayerSetupParameter::MaterialParameterNameAlpha' has a wrong offset!");

// ScriptStruct SS.SSMenuButtonImageLangItem
// 0x0010 (0x0010 - 0x0000)
struct FSSMenuButtonImageLangItem final
{
public:
	class UTexture2D*                             ImageTextures;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageNo;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMenuButtonImageLangItem) == 0x000008, "Wrong alignment on FSSMenuButtonImageLangItem");
static_assert(sizeof(FSSMenuButtonImageLangItem) == 0x000010, "Wrong size on FSSMenuButtonImageLangItem");
static_assert(offsetof(FSSMenuButtonImageLangItem, ImageTextures) == 0x000000, "Member 'FSSMenuButtonImageLangItem::ImageTextures' has a wrong offset!");
static_assert(offsetof(FSSMenuButtonImageLangItem, ImageNo) == 0x000008, "Member 'FSSMenuButtonImageLangItem::ImageNo' has a wrong offset!");

// ScriptStruct SS.SSCharacterLoadOption
// 0x000B (0x000B - 0x0000)
struct FSSCharacterLoadOption final
{
public:
	uint8                                         Pad_0[0xB];                                        // 0x0000(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCharacterLoadOption) == 0x000001, "Wrong alignment on FSSCharacterLoadOption");
static_assert(sizeof(FSSCharacterLoadOption) == 0x00000B, "Wrong size on FSSCharacterLoadOption");

// ScriptStruct SS.MenuCharacterParameter
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FMenuCharacterParameter final
{
public:
	bool                                          bInAsync;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnload;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoadDelay;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoSpawn;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratPlayerStartDataList              StartDataList;                                     // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPlaySide;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratCharacterInstanceType                   InstanceType;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterCostumeDataList         CostumeDataList;                                   // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x25];                                      // 0x0024(0x0025)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSCharacterLoadOption                 CharacterLoadOption;                               // 0x0049(0x000B)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuCharacterParameter) == 0x000008, "Wrong alignment on FMenuCharacterParameter");
static_assert(sizeof(FMenuCharacterParameter) == 0x000058, "Wrong size on FMenuCharacterParameter");
static_assert(offsetof(FMenuCharacterParameter, bInAsync) == 0x000000, "Member 'FMenuCharacterParameter::bInAsync' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, bIsUnload) == 0x000001, "Member 'FMenuCharacterParameter::bIsUnload' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, LoadDelay) == 0x000004, "Member 'FMenuCharacterParameter::LoadDelay' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, bIsAutoSpawn) == 0x000008, "Member 'FMenuCharacterParameter::bIsAutoSpawn' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, StartDataList) == 0x00000C, "Member 'FMenuCharacterParameter::StartDataList' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, SpawnPlaySide) == 0x000014, "Member 'FMenuCharacterParameter::SpawnPlaySide' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, InstanceType) == 0x000018, "Member 'FMenuCharacterParameter::InstanceType' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, CostumeDataList) == 0x00001C, "Member 'FMenuCharacterParameter::CostumeDataList' has a wrong offset!");
static_assert(offsetof(FMenuCharacterParameter, CharacterLoadOption) == 0x000049, "Member 'FMenuCharacterParameter::CharacterLoadOption' has a wrong offset!");

// ScriptStruct SS.SSDialogTextData
// 0x0040 (0x0040 - 0x0000)
struct FSSDialogTextData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ContextText;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<class FText>                           ButtonTexts;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSDialogTextData) == 0x000008, "Wrong alignment on FSSDialogTextData");
static_assert(sizeof(FSSDialogTextData) == 0x000040, "Wrong size on FSSDialogTextData");
static_assert(offsetof(FSSDialogTextData, TitleText) == 0x000000, "Member 'FSSDialogTextData::TitleText' has a wrong offset!");
static_assert(offsetof(FSSDialogTextData, ContextText) == 0x000018, "Member 'FSSDialogTextData::ContextText' has a wrong offset!");
static_assert(offsetof(FSSDialogTextData, ButtonTexts) == 0x000030, "Member 'FSSDialogTextData::ButtonTexts' has a wrong offset!");

// ScriptStruct SS.MenuMapParameter
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMenuMapParameter final
{
public:
	bool                                          bIsAutoLoad;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoSwitch;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x26];                                       // 0x0002(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuMapParameter) == 0x000008, "Wrong alignment on FMenuMapParameter");
static_assert(sizeof(FMenuMapParameter) == 0x000028, "Wrong size on FMenuMapParameter");
static_assert(offsetof(FMenuMapParameter, bIsAutoLoad) == 0x000000, "Member 'FMenuMapParameter::bIsAutoLoad' has a wrong offset!");
static_assert(offsetof(FMenuMapParameter, bIsAutoSwitch) == 0x000001, "Member 'FMenuMapParameter::bIsAutoSwitch' has a wrong offset!");

// ScriptStruct SS.KoratMissionVoiceData
// 0x0028 (0x0028 - 0x0000)
struct FKoratMissionVoiceData final
{
public:
	struct FKoratConversationDataList             VoiceIn;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratConversationDataList             VoiceReceipt;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratConversationDataList             VoiceBulkReceipt;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratConversationDataList             VoiceAdd;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratConversationDataList             VoiceAlone;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionVoiceData) == 0x000004, "Wrong alignment on FKoratMissionVoiceData");
static_assert(sizeof(FKoratMissionVoiceData) == 0x000028, "Wrong size on FKoratMissionVoiceData");
static_assert(offsetof(FKoratMissionVoiceData, VoiceIn) == 0x000000, "Member 'FKoratMissionVoiceData::VoiceIn' has a wrong offset!");
static_assert(offsetof(FKoratMissionVoiceData, VoiceReceipt) == 0x000008, "Member 'FKoratMissionVoiceData::VoiceReceipt' has a wrong offset!");
static_assert(offsetof(FKoratMissionVoiceData, VoiceBulkReceipt) == 0x000010, "Member 'FKoratMissionVoiceData::VoiceBulkReceipt' has a wrong offset!");
static_assert(offsetof(FKoratMissionVoiceData, VoiceAdd) == 0x000018, "Member 'FKoratMissionVoiceData::VoiceAdd' has a wrong offset!");
static_assert(offsetof(FKoratMissionVoiceData, VoiceAlone) == 0x000020, "Member 'FKoratMissionVoiceData::VoiceAlone' has a wrong offset!");

// ScriptStruct SS.MissionListPanel
// 0x0018 (0x0018 - 0x0000)
struct FMissionListPanel final
{
public:
	class USSMissionDataRecord*                   MIssionData;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratMissionDataList                  MissionId;                                         // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPlayStatus                               AnimStatus;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMissionListPanel) == 0x000008, "Wrong alignment on FMissionListPanel");
static_assert(sizeof(FMissionListPanel) == 0x000018, "Wrong size on FMissionListPanel");
static_assert(offsetof(FMissionListPanel, MIssionData) == 0x000000, "Member 'FMissionListPanel::MIssionData' has a wrong offset!");
static_assert(offsetof(FMissionListPanel, MissionId) == 0x000008, "Member 'FMissionListPanel::MissionId' has a wrong offset!");
static_assert(offsetof(FMissionListPanel, AnimStatus) == 0x000010, "Member 'FMissionListPanel::AnimStatus' has a wrong offset!");

// ScriptStruct SS.MissionPanelData
// 0x0040 (0x0040 - 0x0000)
struct FMissionPanelData final
{
public:
	class USSUiWidget*                            DetailBaseWidget;                                  // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSUiWidget*                            StampWidget;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindWidgetAnimation;                               // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindPanelWidgetAnimation;                          // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindPanelWidgetRewardWaitAnimation;                // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindPanelWidgetNomalAnimation;                     // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindStampWidgetAnimation;                          // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       FindStampWidgetNormalAnimation;                    // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionPanelData) == 0x000008, "Wrong alignment on FMissionPanelData");
static_assert(sizeof(FMissionPanelData) == 0x000040, "Wrong size on FMissionPanelData");
static_assert(offsetof(FMissionPanelData, DetailBaseWidget) == 0x000000, "Member 'FMissionPanelData::DetailBaseWidget' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, StampWidget) == 0x000008, "Member 'FMissionPanelData::StampWidget' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindWidgetAnimation) == 0x000010, "Member 'FMissionPanelData::FindWidgetAnimation' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindPanelWidgetAnimation) == 0x000018, "Member 'FMissionPanelData::FindPanelWidgetAnimation' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindPanelWidgetRewardWaitAnimation) == 0x000020, "Member 'FMissionPanelData::FindPanelWidgetRewardWaitAnimation' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindPanelWidgetNomalAnimation) == 0x000028, "Member 'FMissionPanelData::FindPanelWidgetNomalAnimation' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindStampWidgetAnimation) == 0x000030, "Member 'FMissionPanelData::FindStampWidgetAnimation' has a wrong offset!");
static_assert(offsetof(FMissionPanelData, FindStampWidgetNormalAnimation) == 0x000038, "Member 'FMissionPanelData::FindStampWidgetNormalAnimation' has a wrong offset!");

// ScriptStruct SS.SSScrollBarImageParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FSSScrollBarImageParameter final
{
public:
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSScrollBarImageParameter) == 0x000010, "Wrong alignment on FSSScrollBarImageParameter");
static_assert(sizeof(FSSScrollBarImageParameter) == 0x0000E0, "Wrong size on FSSScrollBarImageParameter");
static_assert(offsetof(FSSScrollBarImageParameter, ColorAndOpacity) == 0x000000, "Member 'FSSScrollBarImageParameter::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSScrollBarImageParameter, Brush) == 0x000010, "Member 'FSSScrollBarImageParameter::Brush' has a wrong offset!");

// ScriptStruct SS.SSMissionNowData
// 0x0058 (0x0058 - 0x0000)
struct FSSMissionNowData final
{
public:
	TMap<struct FKoratCharacterDataList, int32>   AdventureCleraRates;                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	int32                                         BattleNum;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMissionNowData) == 0x000008, "Wrong alignment on FSSMissionNowData");
static_assert(sizeof(FSSMissionNowData) == 0x000058, "Wrong size on FSSMissionNowData");
static_assert(offsetof(FSSMissionNowData, AdventureCleraRates) == 0x000000, "Member 'FSSMissionNowData::AdventureCleraRates' has a wrong offset!");
static_assert(offsetof(FSSMissionNowData, BattleNum) == 0x000050, "Member 'FSSMissionNowData::BattleNum' has a wrong offset!");

// ScriptStruct SS.SSMissionUserDataTempArray
// 0x0010 (0x0010 - 0x0000)
struct FSSMissionUserDataTempArray final
{
public:
	TArray<struct FSSMissionUserDataTemp>         Datas;                                             // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMissionUserDataTempArray) == 0x000008, "Wrong alignment on FSSMissionUserDataTempArray");
static_assert(sizeof(FSSMissionUserDataTempArray) == 0x000010, "Wrong size on FSSMissionUserDataTempArray");
static_assert(offsetof(FSSMissionUserDataTempArray, Datas) == 0x000000, "Member 'FSSMissionUserDataTempArray::Datas' has a wrong offset!");

// ScriptStruct SS.SSOPMOVIETransitionWorkerData
// 0x0000 (0x0001 - 0x0001)
struct FSSOPMOVIETransitionWorkerData final : public FSSSubLevelTransitionData
{
};
static_assert(alignof(FSSOPMOVIETransitionWorkerData) == 0x000001, "Wrong alignment on FSSOPMOVIETransitionWorkerData");
static_assert(sizeof(FSSOPMOVIETransitionWorkerData) == 0x000001, "Wrong size on FSSOPMOVIETransitionWorkerData");

// ScriptStruct SS.KoratMissionJadgeData
// 0x00B8 (0x00B8 - 0x0000)
struct FKoratMissionJadgeData final
{
public:
	TMap<EMenuMissionMode, struct FSSMissionUserDataSaveDataListSaveData> MissionUserDatas;                                  // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FSSMissionUserDataTempArray>    UserDataTemps;                                     // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FSSMissionNowData                      MissionNowData;                                    // 0x0060(0x0058)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionJadgeData) == 0x000008, "Wrong alignment on FKoratMissionJadgeData");
static_assert(sizeof(FKoratMissionJadgeData) == 0x0000B8, "Wrong size on FKoratMissionJadgeData");
static_assert(offsetof(FKoratMissionJadgeData, MissionUserDatas) == 0x000000, "Member 'FKoratMissionJadgeData::MissionUserDatas' has a wrong offset!");
static_assert(offsetof(FKoratMissionJadgeData, UserDataTemps) == 0x000050, "Member 'FKoratMissionJadgeData::UserDataTemps' has a wrong offset!");
static_assert(offsetof(FKoratMissionJadgeData, MissionNowData) == 0x000060, "Member 'FKoratMissionJadgeData::MissionNowData' has a wrong offset!");

// ScriptStruct SS.KoratModeMissionList
// 0x0010 (0x0010 - 0x0000)
struct FKoratModeMissionList final
{
public:
	TArray<struct FKoratMissionDataList>          MissionList;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratModeMissionList) == 0x000008, "Wrong alignment on FKoratModeMissionList");
static_assert(sizeof(FKoratModeMissionList) == 0x000010, "Wrong size on FKoratModeMissionList");
static_assert(offsetof(FKoratModeMissionList, MissionList) == 0x000000, "Member 'FKoratModeMissionList::MissionList' has a wrong offset!");

// ScriptStruct SS.SSTrophyProgressMissionTypeDirtyInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FSSTrophyProgressMissionTypeDirtyInfo final
{
public:
	TSet<struct FKoratMissionDataList>            MissionIds;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             AdventureIFEventNames;                             // 0x0050(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTrophyProgressMissionTypeDirtyInfo) == 0x000008, "Wrong alignment on FSSTrophyProgressMissionTypeDirtyInfo");
static_assert(sizeof(FSSTrophyProgressMissionTypeDirtyInfo) == 0x0000A0, "Wrong size on FSSTrophyProgressMissionTypeDirtyInfo");
static_assert(offsetof(FSSTrophyProgressMissionTypeDirtyInfo, MissionIds) == 0x000000, "Member 'FSSTrophyProgressMissionTypeDirtyInfo::MissionIds' has a wrong offset!");
static_assert(offsetof(FSSTrophyProgressMissionTypeDirtyInfo, AdventureIFEventNames) == 0x000050, "Member 'FSSTrophyProgressMissionTypeDirtyInfo::AdventureIFEventNames' has a wrong offset!");

// ScriptStruct SS.KoratVelocityLineEffectPlay
// 0x0038 (0x0038 - 0x0000)
struct FKoratVelocityLineEffectPlay final
{
public:
	TSoftObjectPtr<class ASSLevelSequenceActor>   SequenceActor;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratVelocityLineEffectPlay) == 0x000008, "Wrong alignment on FKoratVelocityLineEffectPlay");
static_assert(sizeof(FKoratVelocityLineEffectPlay) == 0x000038, "Wrong size on FKoratVelocityLineEffectPlay");
static_assert(offsetof(FKoratVelocityLineEffectPlay, SequenceActor) == 0x000000, "Member 'FKoratVelocityLineEffectPlay::SequenceActor' has a wrong offset!");
static_assert(offsetof(FKoratVelocityLineEffectPlay, PlayCount) == 0x000030, "Member 'FKoratVelocityLineEffectPlay::PlayCount' has a wrong offset!");

// ScriptStruct SS.SSMissionSortFilterData
// 0x0020 (0x0020 - 0x0000)
struct FSSMissionSortFilterData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FilterIndexArray;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMissionSortFilterData) == 0x000008, "Wrong alignment on FSSMissionSortFilterData");
static_assert(sizeof(FSSMissionSortFilterData) == 0x000020, "Wrong size on FSSMissionSortFilterData");
static_assert(offsetof(FSSMissionSortFilterData, FilterIndexArray) == 0x000010, "Member 'FSSMissionSortFilterData::FilterIndexArray' has a wrong offset!");

// ScriptStruct SS.SSMissionModeSortFilterData
// 0x0050 (0x0050 - 0x0000)
struct FSSMissionModeSortFilterData final
{
public:
	TMap<EMenuMissionMode, struct FSSMissionSortFilterData> MissionSortFilterDatas;                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMissionModeSortFilterData) == 0x000008, "Wrong alignment on FSSMissionModeSortFilterData");
static_assert(sizeof(FSSMissionModeSortFilterData) == 0x000050, "Wrong size on FSSMissionModeSortFilterData");
static_assert(offsetof(FSSMissionModeSortFilterData, MissionSortFilterDatas) == 0x000000, "Member 'FSSMissionModeSortFilterData::MissionSortFilterDatas' has a wrong offset!");

// ScriptStruct SS.KoratWorldLibBattleIdList
// 0x0010 (0x0010 - 0x0000)
struct FKoratWorldLibBattleIdList final
{
public:
	TArray<uint64>                                BattleIdList;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratWorldLibBattleIdList) == 0x000008, "Wrong alignment on FKoratWorldLibBattleIdList");
static_assert(sizeof(FKoratWorldLibBattleIdList) == 0x000010, "Wrong size on FKoratWorldLibBattleIdList");
static_assert(offsetof(FKoratWorldLibBattleIdList, BattleIdList) == 0x000000, "Member 'FKoratWorldLibBattleIdList::BattleIdList' has a wrong offset!");

// ScriptStruct SS.KoratWorldLibServerInfo
// 0x0014 (0x0014 - 0x0000)
struct FKoratWorldLibServerInfo final
{
public:
	uint32                                        OthersGoodCount;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OthersFavoriteCount;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OthersPlayCount;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MyFavoriteCount;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMasterAchieved;                                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstClearPlayer;                                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratWorldLibServerInfo) == 0x000004, "Wrong alignment on FKoratWorldLibServerInfo");
static_assert(sizeof(FKoratWorldLibServerInfo) == 0x000014, "Wrong size on FKoratWorldLibServerInfo");
static_assert(offsetof(FKoratWorldLibServerInfo, OthersGoodCount) == 0x000000, "Member 'FKoratWorldLibServerInfo::OthersGoodCount' has a wrong offset!");
static_assert(offsetof(FKoratWorldLibServerInfo, OthersFavoriteCount) == 0x000004, "Member 'FKoratWorldLibServerInfo::OthersFavoriteCount' has a wrong offset!");
static_assert(offsetof(FKoratWorldLibServerInfo, OthersPlayCount) == 0x000008, "Member 'FKoratWorldLibServerInfo::OthersPlayCount' has a wrong offset!");
static_assert(offsetof(FKoratWorldLibServerInfo, MyFavoriteCount) == 0x00000C, "Member 'FKoratWorldLibServerInfo::MyFavoriteCount' has a wrong offset!");
static_assert(offsetof(FKoratWorldLibServerInfo, bMasterAchieved) == 0x000010, "Member 'FKoratWorldLibServerInfo::bMasterAchieved' has a wrong offset!");
static_assert(offsetof(FKoratWorldLibServerInfo, bFirstClearPlayer) == 0x000011, "Member 'FKoratWorldLibServerInfo::bFirstClearPlayer' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueRewardData
// 0x0020 (0x0020 - 0x0000)
struct FSSWishComeTrueRewardData final
{
public:
	struct FKoratRewardDataList                   RewardId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Caption;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWishComeTrueRewardData) == 0x000008, "Wrong alignment on FSSWishComeTrueRewardData");
static_assert(sizeof(FSSWishComeTrueRewardData) == 0x000020, "Wrong size on FSSWishComeTrueRewardData");
static_assert(offsetof(FSSWishComeTrueRewardData, RewardId) == 0x000000, "Member 'FSSWishComeTrueRewardData::RewardId' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueRewardData, Caption) == 0x000008, "Member 'FSSWishComeTrueRewardData::Caption' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueContentDetails
// 0x0010 (0x0010 - 0x0000)
struct FSSWishComeTrueContentDetails final
{
public:
	TArray<struct FSSWishComeTrueRewardData>      RewardList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWishComeTrueContentDetails) == 0x000008, "Wrong alignment on FSSWishComeTrueContentDetails");
static_assert(sizeof(FSSWishComeTrueContentDetails) == 0x000010, "Wrong size on FSSWishComeTrueContentDetails");
static_assert(offsetof(FSSWishComeTrueContentDetails, RewardList) == 0x000000, "Member 'FSSWishComeTrueContentDetails::RewardList' has a wrong offset!");

// ScriptStruct SS.KoratMissionDialogData
// 0x0018 (0x0018 - 0x0000)
struct FKoratMissionDialogData final
{
public:
	EMenuMissionDialogType                        DialogType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Datas;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionDialogData) == 0x000008, "Wrong alignment on FKoratMissionDialogData");
static_assert(sizeof(FKoratMissionDialogData) == 0x000018, "Wrong size on FKoratMissionDialogData");
static_assert(offsetof(FKoratMissionDialogData, DialogType) == 0x000000, "Member 'FKoratMissionDialogData::DialogType' has a wrong offset!");
static_assert(offsetof(FKoratMissionDialogData, Datas) == 0x000008, "Member 'FKoratMissionDialogData::Datas' has a wrong offset!");

// ScriptStruct SS.KoratMissionCard
// 0x0008 (0x0008 - 0x0000)
struct FKoratMissionCard final
{
public:
	class USSUiWidget*                            MissionCardBase;                                   // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratMissionCard) == 0x000008, "Wrong alignment on FKoratMissionCard");
static_assert(sizeof(FKoratMissionCard) == 0x000008, "Wrong size on FKoratMissionCard");
static_assert(offsetof(FKoratMissionCard, MissionCardBase) == 0x000000, "Member 'FKoratMissionCard::MissionCardBase' has a wrong offset!");

// ScriptStruct SS.SSMovieConversationData
// 0x00F8 (0x00F8 - 0x0000)
struct FSSMovieConversationData final
{
public:
	struct FKoratBattleConversation               Conversation;                                      // 0x0000(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMovieConversationData) == 0x000008, "Wrong alignment on FSSMovieConversationData");
static_assert(sizeof(FSSMovieConversationData) == 0x0000F8, "Wrong size on FSSMovieConversationData");
static_assert(offsetof(FSSMovieConversationData, Conversation) == 0x000000, "Member 'FSSMovieConversationData::Conversation' has a wrong offset!");
static_assert(offsetof(FSSMovieConversationData, StartTime) == 0x0000F0, "Member 'FSSMovieConversationData::StartTime' has a wrong offset!");

// ScriptStruct SS.SSWCTResourceDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSWCTResourceDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Resource;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWCTResourceDataAssetRecord) == 0x000008, "Wrong alignment on FSSWCTResourceDataAssetRecord");
static_assert(sizeof(FSSWCTResourceDataAssetRecord) == 0x000030, "Wrong size on FSSWCTResourceDataAssetRecord");
static_assert(offsetof(FSSWCTResourceDataAssetRecord, Resource) == 0x000000, "Member 'FSSWCTResourceDataAssetRecord::Resource' has a wrong offset!");

// ScriptStruct SS.SSMpcPriorityInfo
// 0x0038 (0x0038 - 0x0000)
struct FSSMpcPriorityInfo final
{
public:
	class UMaterialParameterCollection*           Mpc;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParameterName;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratMpcParameterType                        ParameterType;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalarValue;                                       // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VectorValue;                                       // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateFlag;                                       // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSMpcPriorityInfo) == 0x000008, "Wrong alignment on FSSMpcPriorityInfo");
static_assert(sizeof(FSSMpcPriorityInfo) == 0x000038, "Wrong size on FSSMpcPriorityInfo");
static_assert(offsetof(FSSMpcPriorityInfo, Mpc) == 0x000000, "Member 'FSSMpcPriorityInfo::Mpc' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, ParameterName) == 0x000008, "Member 'FSSMpcPriorityInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, ParameterType) == 0x000018, "Member 'FSSMpcPriorityInfo::ParameterType' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, Priority) == 0x00001C, "Member 'FSSMpcPriorityInfo::Priority' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, ScalarValue) == 0x000020, "Member 'FSSMpcPriorityInfo::ScalarValue' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, VectorValue) == 0x000024, "Member 'FSSMpcPriorityInfo::VectorValue' has a wrong offset!");
static_assert(offsetof(FSSMpcPriorityInfo, bUpdateFlag) == 0x000034, "Member 'FSSMpcPriorityInfo::bUpdateFlag' has a wrong offset!");

// ScriptStruct SS.SSMythicalOrbData
// 0x0008 (0x0008 - 0x0000)
struct FSSMythicalOrbData final
{
public:
	EDragonType                                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Number;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMythicalOrbData) == 0x000004, "Wrong alignment on FSSMythicalOrbData");
static_assert(sizeof(FSSMythicalOrbData) == 0x000008, "Wrong size on FSSMythicalOrbData");
static_assert(offsetof(FSSMythicalOrbData, Type) == 0x000000, "Member 'FSSMythicalOrbData::Type' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbData, Number) == 0x000004, "Member 'FSSMythicalOrbData::Number' has a wrong offset!");

// ScriptStruct SS.SSMythicalOrbs
// 0x0020 (0x0020 - 0x0000)
struct FSSMythicalOrbs final
{
public:
	EDragonType                                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSMythicalOrbData>             Orbs;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OrbTotalCount;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WishComeTrueCount;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSMythicalOrbs) == 0x000008, "Wrong alignment on FSSMythicalOrbs");
static_assert(sizeof(FSSMythicalOrbs) == 0x000020, "Wrong size on FSSMythicalOrbs");
static_assert(offsetof(FSSMythicalOrbs, Type) == 0x000000, "Member 'FSSMythicalOrbs::Type' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbs, Orbs) == 0x000008, "Member 'FSSMythicalOrbs::Orbs' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbs, OrbTotalCount) == 0x000018, "Member 'FSSMythicalOrbs::OrbTotalCount' has a wrong offset!");
static_assert(offsetof(FSSMythicalOrbs, WishComeTrueCount) == 0x00001C, "Member 'FSSMythicalOrbs::WishComeTrueCount' has a wrong offset!");

// ScriptStruct SS.LookUpEnemySection
// 0x000C (0x000C - 0x0000)
struct FLookUpEnemySection final
{
public:
	bool                                          bLookUpEnemyArgorizum;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookUpEnemyAngleMax;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugLookUpEnemyLine;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLookUpEnemySection) == 0x000004, "Wrong alignment on FLookUpEnemySection");
static_assert(sizeof(FLookUpEnemySection) == 0x00000C, "Wrong size on FLookUpEnemySection");
static_assert(offsetof(FLookUpEnemySection, bLookUpEnemyArgorizum) == 0x000000, "Member 'FLookUpEnemySection::bLookUpEnemyArgorizum' has a wrong offset!");
static_assert(offsetof(FLookUpEnemySection, LookUpEnemyAngleMax) == 0x000004, "Member 'FLookUpEnemySection::LookUpEnemyAngleMax' has a wrong offset!");
static_assert(offsetof(FLookUpEnemySection, bDebugLookUpEnemyLine) == 0x000008, "Member 'FLookUpEnemySection::bDebugLookUpEnemyLine' has a wrong offset!");

// ScriptStruct SS.SSManualCameraInfo
// 0x0008 (0x0008 - 0x0000)
struct FSSManualCameraInfo final
{
public:
	class ASSCutCameraActor*                      CameraInstance;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSManualCameraInfo) == 0x000008, "Wrong alignment on FSSManualCameraInfo");
static_assert(sizeof(FSSManualCameraInfo) == 0x000008, "Wrong size on FSSManualCameraInfo");
static_assert(offsetof(FSSManualCameraInfo, CameraInstance) == 0x000000, "Member 'FSSManualCameraInfo::CameraInstance' has a wrong offset!");

// ScriptStruct SS.SSRecvActionCameraInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FSSRecvActionCameraInfo final
{
public:
	bool                                          IsFirstUpdate;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForce;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnd;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RecvTime;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASSCharacter*                           Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSActionCameraParameterData           ActionCameraParameter;                             // 0x0018(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class ASSNewBattleCameraActor*                ConnectCamera;                                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSRecvActionCameraInfo) == 0x000008, "Wrong alignment on FSSRecvActionCameraInfo");
static_assert(sizeof(FSSRecvActionCameraInfo) == 0x0000E8, "Wrong size on FSSRecvActionCameraInfo");
static_assert(offsetof(FSSRecvActionCameraInfo, IsFirstUpdate) == 0x000000, "Member 'FSSRecvActionCameraInfo::IsFirstUpdate' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, IsForce) == 0x000001, "Member 'FSSRecvActionCameraInfo::IsForce' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, IsEnd) == 0x000002, "Member 'FSSRecvActionCameraInfo::IsEnd' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, RecvTime) == 0x000008, "Member 'FSSRecvActionCameraInfo::RecvTime' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, Character) == 0x000010, "Member 'FSSRecvActionCameraInfo::Character' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, ActionCameraParameter) == 0x000018, "Member 'FSSRecvActionCameraInfo::ActionCameraParameter' has a wrong offset!");
static_assert(offsetof(FSSRecvActionCameraInfo, ConnectCamera) == 0x0000E0, "Member 'FSSRecvActionCameraInfo::ConnectCamera' has a wrong offset!");

// ScriptStruct SS.SSNotificationCommonSettings
// 0x0158 (0x0158 - 0x0000)
struct FSSNotificationCommonSettings final
{
public:
	TMap<ENotificationType, TSoftObjectPtr<class UTexture>> CommonSettings;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EKortaRewardType, TSoftObjectPtr<class UTexture2D>> ItemNotifyIcons;                                   // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EKortaRewardType, bool>                  ItemTypeNumVisibles;                               // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EKortaRewardType, class FText>           ItemTypeHeaderTexts;                               // 0x0100(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MonitoringDelayTime;                               // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSNotificationCommonSettings) == 0x000008, "Wrong alignment on FSSNotificationCommonSettings");
static_assert(sizeof(FSSNotificationCommonSettings) == 0x000158, "Wrong size on FSSNotificationCommonSettings");
static_assert(offsetof(FSSNotificationCommonSettings, CommonSettings) == 0x000000, "Member 'FSSNotificationCommonSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, DisplayTime) == 0x000050, "Member 'FSSNotificationCommonSettings::DisplayTime' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, Delay) == 0x000054, "Member 'FSSNotificationCommonSettings::Delay' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, ZOrder) == 0x000058, "Member 'FSSNotificationCommonSettings::ZOrder' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, ItemNotifyIcons) == 0x000060, "Member 'FSSNotificationCommonSettings::ItemNotifyIcons' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, ItemTypeNumVisibles) == 0x0000B0, "Member 'FSSNotificationCommonSettings::ItemTypeNumVisibles' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, ItemTypeHeaderTexts) == 0x000100, "Member 'FSSNotificationCommonSettings::ItemTypeHeaderTexts' has a wrong offset!");
static_assert(offsetof(FSSNotificationCommonSettings, MonitoringDelayTime) == 0x000150, "Member 'FSSNotificationCommonSettings::MonitoringDelayTime' has a wrong offset!");

// ScriptStruct SS.SSItemNotificationData
// 0x0098 (0x0098 - 0x0000)
struct FSSItemNotificationData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EKortaRewardType                              ItemType;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HeaderText;                                        // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ItemNum;                                           // 0x0048(0x0018)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0060(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSItemNotificationData) == 0x000008, "Wrong alignment on FSSItemNotificationData");
static_assert(sizeof(FSSItemNotificationData) == 0x000098, "Wrong size on FSSItemNotificationData");
static_assert(offsetof(FSSItemNotificationData, ItemType) == 0x000010, "Member 'FSSItemNotificationData::ItemType' has a wrong offset!");
static_assert(offsetof(FSSItemNotificationData, HeaderText) == 0x000018, "Member 'FSSItemNotificationData::HeaderText' has a wrong offset!");
static_assert(offsetof(FSSItemNotificationData, ItemName) == 0x000030, "Member 'FSSItemNotificationData::ItemName' has a wrong offset!");
static_assert(offsetof(FSSItemNotificationData, ItemNum) == 0x000048, "Member 'FSSItemNotificationData::ItemNum' has a wrong offset!");
static_assert(offsetof(FSSItemNotificationData, IconTexture) == 0x000060, "Member 'FSSItemNotificationData::IconTexture' has a wrong offset!");
static_assert(offsetof(FSSItemNotificationData, DisplayTime) == 0x000090, "Member 'FSSItemNotificationData::DisplayTime' has a wrong offset!");

// ScriptStruct SS.SSCriticalNotificationData
// 0x00A8 (0x00A8 - 0x0000)
struct FSSCriticalNotificationData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratNotificationDataList             NotificationDataList;                              // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              ReplaceText;                                       // 0x0020(0x0050)(NativeAccessSpecifierPublic)
	class FText                                   OverrideTitle;                                     // 0x0070(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   OverrideBody;                                      // 0x0088(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSCriticalNotificationData) == 0x000008, "Wrong alignment on FSSCriticalNotificationData");
static_assert(sizeof(FSSCriticalNotificationData) == 0x0000A8, "Wrong size on FSSCriticalNotificationData");
static_assert(offsetof(FSSCriticalNotificationData, NotificationDataList) == 0x000010, "Member 'FSSCriticalNotificationData::NotificationDataList' has a wrong offset!");
static_assert(offsetof(FSSCriticalNotificationData, DateTime) == 0x000018, "Member 'FSSCriticalNotificationData::DateTime' has a wrong offset!");
static_assert(offsetof(FSSCriticalNotificationData, ReplaceText) == 0x000020, "Member 'FSSCriticalNotificationData::ReplaceText' has a wrong offset!");
static_assert(offsetof(FSSCriticalNotificationData, OverrideTitle) == 0x000070, "Member 'FSSCriticalNotificationData::OverrideTitle' has a wrong offset!");
static_assert(offsetof(FSSCriticalNotificationData, OverrideBody) == 0x000088, "Member 'FSSCriticalNotificationData::OverrideBody' has a wrong offset!");

// ScriptStruct SS.SSNotifyActionCameraTargetSpawnParameters
// 0x0010 (0x0010 - 0x0000)
struct FSSNotifyActionCameraTargetSpawnParameters final
{
public:
	int32                                         PlaySide;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASSNotifyActionCameraTargetActor> SpawnActor;                                        // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSNotifyActionCameraTargetSpawnParameters) == 0x000004, "Wrong alignment on FSSNotifyActionCameraTargetSpawnParameters");
static_assert(sizeof(FSSNotifyActionCameraTargetSpawnParameters) == 0x000010, "Wrong size on FSSNotifyActionCameraTargetSpawnParameters");
static_assert(offsetof(FSSNotifyActionCameraTargetSpawnParameters, PlaySide) == 0x000000, "Member 'FSSNotifyActionCameraTargetSpawnParameters::PlaySide' has a wrong offset!");
static_assert(offsetof(FSSNotifyActionCameraTargetSpawnParameters, SpawnActor) == 0x000004, "Member 'FSSNotifyActionCameraTargetSpawnParameters::SpawnActor' has a wrong offset!");

// ScriptStruct SS.SSBattleMode010Param
// 0x00E0 (0x00E0 - 0x0000)
struct FSSBattleMode010Param final
{
public:
	class FName                                   BattleMode010Id;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESSBattleMode010Difficulty, class FName> BattleMode010List;                                 // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsValidEventPointBoost;                            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventPointBoost;                                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPoint;                                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESSBattleMode010Difficulty, int32>       KillCount;                                         // 0x0068(0x0050)(NativeAccessSpecifierPublic)
	bool                                          IsOpenVeryHard;                                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EventStartTime;                                    // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EventEndTime;                                      // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RewardStartTime;                                   // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RewardEndTime;                                     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleMode010Param) == 0x000008, "Wrong alignment on FSSBattleMode010Param");
static_assert(sizeof(FSSBattleMode010Param) == 0x0000E0, "Wrong size on FSSBattleMode010Param");
static_assert(offsetof(FSSBattleMode010Param, BattleMode010Id) == 0x000000, "Member 'FSSBattleMode010Param::BattleMode010Id' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, BattleMode010List) == 0x000008, "Member 'FSSBattleMode010Param::BattleMode010List' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, IsValidEventPointBoost) == 0x000058, "Member 'FSSBattleMode010Param::IsValidEventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, EventPointBoost) == 0x00005C, "Member 'FSSBattleMode010Param::EventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, EventPoint) == 0x000060, "Member 'FSSBattleMode010Param::EventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, KillCount) == 0x000068, "Member 'FSSBattleMode010Param::KillCount' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, IsOpenVeryHard) == 0x0000B8, "Member 'FSSBattleMode010Param::IsOpenVeryHard' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, EventStartTime) == 0x0000C0, "Member 'FSSBattleMode010Param::EventStartTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, EventEndTime) == 0x0000C8, "Member 'FSSBattleMode010Param::EventEndTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, RewardStartTime) == 0x0000D0, "Member 'FSSBattleMode010Param::RewardStartTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Param, RewardEndTime) == 0x0000D8, "Member 'FSSBattleMode010Param::RewardEndTime' has a wrong offset!");

// ScriptStruct SS.SSBattleMode010Result
// 0x0038 (0x0038 - 0x0000)
struct FSSBattleMode010Result final
{
public:
	bool                                          bIsNewRecord;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseEventPointBoost;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIllegalAlert;                                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventPoint;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddEventPoint;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPoint;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRewardPoint;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassPoint;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddBattlePassPoint;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSBattleMode010Difficulty                    Difficulty;                                        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillCount;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              BattleTime;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimePoint;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSBattleMode010Result) == 0x000008, "Wrong alignment on FSSBattleMode010Result");
static_assert(sizeof(FSSBattleMode010Result) == 0x000038, "Wrong size on FSSBattleMode010Result");
static_assert(offsetof(FSSBattleMode010Result, bIsNewRecord) == 0x000000, "Member 'FSSBattleMode010Result::bIsNewRecord' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, bIsUseEventPointBoost) == 0x000001, "Member 'FSSBattleMode010Result::bIsUseEventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, bIsIllegalAlert) == 0x000002, "Member 'FSSBattleMode010Result::bIsIllegalAlert' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, EventPoint) == 0x000004, "Member 'FSSBattleMode010Result::EventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, AddEventPoint) == 0x000008, "Member 'FSSBattleMode010Result::AddEventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, RewardPoint) == 0x00000C, "Member 'FSSBattleMode010Result::RewardPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, AddRewardPoint) == 0x000010, "Member 'FSSBattleMode010Result::AddRewardPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, BattlePassPoint) == 0x000014, "Member 'FSSBattleMode010Result::BattlePassPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, AddBattlePassPoint) == 0x000018, "Member 'FSSBattleMode010Result::AddBattlePassPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, Difficulty) == 0x00001C, "Member 'FSSBattleMode010Result::Difficulty' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, KillCount) == 0x000020, "Member 'FSSBattleMode010Result::KillCount' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, BattleTime) == 0x000028, "Member 'FSSBattleMode010Result::BattleTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010Result, TimePoint) == 0x000030, "Member 'FSSBattleMode010Result::TimePoint' has a wrong offset!");

// ScriptStruct SS.SSBattleMode011Param
// 0x0038 (0x0038 - 0x0000)
struct FSSBattleMode011Param final
{
public:
	class FName                                   BattleMode011Id;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidEventPointBoost;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventPointBoost;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPoint;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EventStartTime;                                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EventEndTime;                                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RewardStartTime;                                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RewardEndTime;                                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleMode011Param) == 0x000008, "Wrong alignment on FSSBattleMode011Param");
static_assert(sizeof(FSSBattleMode011Param) == 0x000038, "Wrong size on FSSBattleMode011Param");
static_assert(offsetof(FSSBattleMode011Param, BattleMode011Id) == 0x000000, "Member 'FSSBattleMode011Param::BattleMode011Id' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, IsValidEventPointBoost) == 0x000008, "Member 'FSSBattleMode011Param::IsValidEventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, EventPointBoost) == 0x00000C, "Member 'FSSBattleMode011Param::EventPointBoost' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, EventPoint) == 0x000010, "Member 'FSSBattleMode011Param::EventPoint' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, EventStartTime) == 0x000018, "Member 'FSSBattleMode011Param::EventStartTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, EventEndTime) == 0x000020, "Member 'FSSBattleMode011Param::EventEndTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, RewardStartTime) == 0x000028, "Member 'FSSBattleMode011Param::RewardStartTime' has a wrong offset!");
static_assert(offsetof(FSSBattleMode011Param, RewardEndTime) == 0x000030, "Member 'FSSBattleMode011Param::RewardEndTime' has a wrong offset!");

// ScriptStruct SS.SSBattleMode010EventBonus
// 0x000C (0x000C - 0x0000)
struct FSSBattleMode010EventBonus final
{
public:
	struct FKoratCharacterDataList                CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventBonus;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSBattleMode010EventBonus) == 0x000004, "Wrong alignment on FSSBattleMode010EventBonus");
static_assert(sizeof(FSSBattleMode010EventBonus) == 0x00000C, "Wrong size on FSSBattleMode010EventBonus");
static_assert(offsetof(FSSBattleMode010EventBonus, CharacterID) == 0x000000, "Member 'FSSBattleMode010EventBonus::CharacterID' has a wrong offset!");
static_assert(offsetof(FSSBattleMode010EventBonus, EventBonus) == 0x000008, "Member 'FSSBattleMode010EventBonus::EventBonus' has a wrong offset!");

// ScriptStruct SS.KoratOperationGuideDataRecord
// 0x0018 (0x0018 - 0x0000)
struct FKoratOperationGuideDataRecord final
{
public:
	class FName                                   SubLevelName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           GuideText;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratOperationGuideDataRecord) == 0x000008, "Wrong alignment on FKoratOperationGuideDataRecord");
static_assert(sizeof(FKoratOperationGuideDataRecord) == 0x000018, "Wrong size on FKoratOperationGuideDataRecord");
static_assert(offsetof(FKoratOperationGuideDataRecord, SubLevelName) == 0x000000, "Member 'FKoratOperationGuideDataRecord::SubLevelName' has a wrong offset!");
static_assert(offsetof(FKoratOperationGuideDataRecord, GuideText) == 0x000008, "Member 'FKoratOperationGuideDataRecord::GuideText' has a wrong offset!");

// ScriptStruct SS.SSPaperTheaterCutData
// 0x0088 (0x0088 - 0x0000)
struct FSSPaperTheaterCutData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstMessageWait;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSPaperTheaterMessageData>     Messages;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UManaSource>             CriMovie;                                          // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SESoundCueID;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceSoundCueID;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSMovieSubtitleDataAssetRecord*        MovieSubtitleDataAsset;                            // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPaperTheaterCutData) == 0x000008, "Wrong alignment on FSSPaperTheaterCutData");
static_assert(sizeof(FSSPaperTheaterCutData) == 0x000088, "Wrong size on FSSPaperTheaterCutData");
static_assert(offsetof(FSSPaperTheaterCutData, Image) == 0x000000, "Member 'FSSPaperTheaterCutData::Image' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, FirstMessageWait) == 0x000030, "Member 'FSSPaperTheaterCutData::FirstMessageWait' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, Messages) == 0x000038, "Member 'FSSPaperTheaterCutData::Messages' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, CriMovie) == 0x000048, "Member 'FSSPaperTheaterCutData::CriMovie' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, SESoundCueID) == 0x000078, "Member 'FSSPaperTheaterCutData::SESoundCueID' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, VoiceSoundCueID) == 0x00007C, "Member 'FSSPaperTheaterCutData::VoiceSoundCueID' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterCutData, MovieSubtitleDataAsset) == 0x000080, "Member 'FSSPaperTheaterCutData::MovieSubtitleDataAsset' has a wrong offset!");

// ScriptStruct SS.SSTournamentPlayerTeamInfo
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FSSTournamentPlayerTeamInfo final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentPlayerTeamInfo) == 0x000008, "Wrong alignment on FSSTournamentPlayerTeamInfo");
static_assert(sizeof(FSSTournamentPlayerTeamInfo) == 0x000068, "Wrong size on FSSTournamentPlayerTeamInfo");

// ScriptStruct SS.SSPaperTheaterTransitionWorkerData
// 0x001F (0x0020 - 0x0001)
struct FSSPaperTheaterTransitionWorkerData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  PaperTheaterOTLevelSequenceActor;                  // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CutImage;                                          // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPaperTheaterTransitionWorkerData) == 0x000008, "Wrong alignment on FSSPaperTheaterTransitionWorkerData");
static_assert(sizeof(FSSPaperTheaterTransitionWorkerData) == 0x000020, "Wrong size on FSSPaperTheaterTransitionWorkerData");
static_assert(offsetof(FSSPaperTheaterTransitionWorkerData, PaperTheaterOTLevelSequenceActor) == 0x000008, "Member 'FSSPaperTheaterTransitionWorkerData::PaperTheaterOTLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FSSPaperTheaterTransitionWorkerData, CutImage) == 0x000018, "Member 'FSSPaperTheaterTransitionWorkerData::CutImage' has a wrong offset!");

// ScriptStruct SS.SSParticleParameter
// 0x00F0 (0x00F0 - 0x0000)
struct FSSParticleParameter final
{
public:
	struct FParticleSysParam                      Parameter;                                         // 0x0000(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInvScalabilityBigCharacter;                       // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSParticleParameter) == 0x000010, "Wrong alignment on FSSParticleParameter");
static_assert(sizeof(FSSParticleParameter) == 0x0000F0, "Wrong size on FSSParticleParameter");
static_assert(offsetof(FSSParticleParameter, Parameter) == 0x000000, "Member 'FSSParticleParameter::Parameter' has a wrong offset!");
static_assert(offsetof(FSSParticleParameter, bInvScalabilityBigCharacter) == 0x0000E0, "Member 'FSSParticleParameter::bInvScalabilityBigCharacter' has a wrong offset!");

// ScriptStruct SS.SSParticleParameterSet
// 0x0010 (0x0010 - 0x0000)
struct FSSParticleParameterSet final
{
public:
	TArray<struct FSSParticleParameter>           Parameters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSParticleParameterSet) == 0x000008, "Wrong alignment on FSSParticleParameterSet");
static_assert(sizeof(FSSParticleParameterSet) == 0x000010, "Wrong size on FSSParticleParameterSet");
static_assert(offsetof(FSSParticleParameterSet, Parameters) == 0x000000, "Member 'FSSParticleParameterSet::Parameters' has a wrong offset!");

// ScriptStruct SS.SSTournamentReservedTeamData
// 0x0040 (0x0040 - 0x0000)
struct FSSTournamentReservedTeamData final
{
public:
	bool                                          bBossTeam;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TeamName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKoratIconTitleDataList                IconTitle;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoratTextTitleDataList                TextTitle;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSTournamentReservedTeamCharacter> Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentReservedTeamData) == 0x000008, "Wrong alignment on FSSTournamentReservedTeamData");
static_assert(sizeof(FSSTournamentReservedTeamData) == 0x000040, "Wrong size on FSSTournamentReservedTeamData");
static_assert(offsetof(FSSTournamentReservedTeamData, bBossTeam) == 0x000000, "Member 'FSSTournamentReservedTeamData::bBossTeam' has a wrong offset!");
static_assert(offsetof(FSSTournamentReservedTeamData, TeamName) == 0x000008, "Member 'FSSTournamentReservedTeamData::TeamName' has a wrong offset!");
static_assert(offsetof(FSSTournamentReservedTeamData, IconTitle) == 0x000020, "Member 'FSSTournamentReservedTeamData::IconTitle' has a wrong offset!");
static_assert(offsetof(FSSTournamentReservedTeamData, TextTitle) == 0x000028, "Member 'FSSTournamentReservedTeamData::TextTitle' has a wrong offset!");
static_assert(offsetof(FSSTournamentReservedTeamData, Members) == 0x000030, "Member 'FSSTournamentReservedTeamData::Members' has a wrong offset!");

// ScriptStruct SS.SSPlayerCardTransitionData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x04) FSSPlayerCardTransitionData final : public FSSSubLevelTransitionData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerCardTransitionData) == 0x000004, "Wrong alignment on FSSPlayerCardTransitionData");
static_assert(sizeof(FSSPlayerCardTransitionData) == 0x000010, "Wrong size on FSSPlayerCardTransitionData");

// ScriptStruct SS.PlayerCardMenuStruct
// 0x0020 (0x0020 - 0x0000)
struct FPlayerCardMenuStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USSMenuManager*                         SSMenu;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSPlayerCardMenuManager*               Menu;                                              // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSPlayerCardListMenuManager*           ListMenu;                                          // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCardMenuStruct) == 0x000008, "Wrong alignment on FPlayerCardMenuStruct");
static_assert(sizeof(FPlayerCardMenuStruct) == 0x000020, "Wrong size on FPlayerCardMenuStruct");
static_assert(offsetof(FPlayerCardMenuStruct, SSMenu) == 0x000008, "Member 'FPlayerCardMenuStruct::SSMenu' has a wrong offset!");
static_assert(offsetof(FPlayerCardMenuStruct, Menu) == 0x000010, "Member 'FPlayerCardMenuStruct::Menu' has a wrong offset!");
static_assert(offsetof(FPlayerCardMenuStruct, ListMenu) == 0x000018, "Member 'FPlayerCardMenuStruct::ListMenu' has a wrong offset!");

// ScriptStruct SS.PlayerCardInfo
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FPlayerCardInfo final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCardInfo) == 0x000008, "Wrong alignment on FPlayerCardInfo");
static_assert(sizeof(FPlayerCardInfo) == 0x0000C8, "Wrong size on FPlayerCardInfo");

// ScriptStruct SS.PlayerCardFRListItem
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FPlayerCardFRListItem final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCardFRListItem) == 0x000008, "Wrong alignment on FPlayerCardFRListItem");
static_assert(sizeof(FPlayerCardFRListItem) == 0x000050, "Wrong size on FPlayerCardFRListItem");

// ScriptStruct SS.SSTournamentSelectResDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSTournamentSelectResDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Resource;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentSelectResDataAssetRecord) == 0x000008, "Wrong alignment on FSSTournamentSelectResDataAssetRecord");
static_assert(sizeof(FSSTournamentSelectResDataAssetRecord) == 0x000030, "Wrong size on FSSTournamentSelectResDataAssetRecord");
static_assert(offsetof(FSSTournamentSelectResDataAssetRecord, Resource) == 0x000000, "Member 'FSSTournamentSelectResDataAssetRecord::Resource' has a wrong offset!");

// ScriptStruct SS.SSPlayerMatchRoomLog
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSSPlayerMatchRoomLog final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerMatchRoomLog) == 0x000008, "Wrong alignment on FSSPlayerMatchRoomLog");
static_assert(sizeof(FSSPlayerMatchRoomLog) == 0x000030, "Wrong size on FSSPlayerMatchRoomLog");

// ScriptStruct SS.SSPlayerMatchRoomPlayer
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FSSPlayerMatchRoomPlayer final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerMatchRoomPlayer) == 0x000008, "Wrong alignment on FSSPlayerMatchRoomPlayer");
static_assert(sizeof(FSSPlayerMatchRoomPlayer) == 0x0000B0, "Wrong size on FSSPlayerMatchRoomPlayer");

// ScriptStruct SS.SSPlayerMatchRoomCreateParams
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSSPlayerMatchRoomCreateParams final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPlayerMatchRoomCreateParams) == 0x000004, "Wrong alignment on FSSPlayerMatchRoomCreateParams");
static_assert(sizeof(FSSPlayerMatchRoomCreateParams) == 0x000020, "Wrong size on FSSPlayerMatchRoomCreateParams");

// ScriptStruct SS.HighSpeedMoveMaterialInstance
// 0x06C0 (0x06C0 - 0x0000)
struct FHighSpeedMoveMaterialInstance final
{
public:
	struct FCommonTrailDataMaterialInstance       CommonMaterials;                                   // 0x0000(0x0240)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Neck;                                              // 0x0240(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Head;                                              // 0x0270(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       WAIST;                                             // 0x02A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Spine2;                                            // 0x02D0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Spine3;                                            // 0x0300(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ThghL;                                             // 0x0330(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ThghR;                                             // 0x0360(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       SocketThghLAuraOffset;                             // 0x0390(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       SocketThghRAuraOffset;                             // 0x03C0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ClankRollL;                                        // 0x03F0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ClankRollR;                                        // 0x0420(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ShoulderL;                                         // 0x0450(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ShoulderR;                                         // 0x0480(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ElbowRollL;                                        // 0x04B0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ElbowRollR;                                        // 0x04E0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       F_Middle1L;                                        // 0x0510(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       F_Middle1R;                                        // 0x0540(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail1;                                             // 0x0570(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail4;                                             // 0x05A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail7;                                             // 0x05D0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail10;                                            // 0x0600(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail13;                                            // 0x0630(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail16;                                            // 0x0660(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Tail18;                                            // 0x0690(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHighSpeedMoveMaterialInstance) == 0x000008, "Wrong alignment on FHighSpeedMoveMaterialInstance");
static_assert(sizeof(FHighSpeedMoveMaterialInstance) == 0x0006C0, "Wrong size on FHighSpeedMoveMaterialInstance");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, CommonMaterials) == 0x000000, "Member 'FHighSpeedMoveMaterialInstance::CommonMaterials' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Neck) == 0x000240, "Member 'FHighSpeedMoveMaterialInstance::Neck' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Head) == 0x000270, "Member 'FHighSpeedMoveMaterialInstance::Head' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, WAIST) == 0x0002A0, "Member 'FHighSpeedMoveMaterialInstance::WAIST' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Spine2) == 0x0002D0, "Member 'FHighSpeedMoveMaterialInstance::Spine2' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Spine3) == 0x000300, "Member 'FHighSpeedMoveMaterialInstance::Spine3' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ThghL) == 0x000330, "Member 'FHighSpeedMoveMaterialInstance::ThghL' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ThghR) == 0x000360, "Member 'FHighSpeedMoveMaterialInstance::ThghR' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, SocketThghLAuraOffset) == 0x000390, "Member 'FHighSpeedMoveMaterialInstance::SocketThghLAuraOffset' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, SocketThghRAuraOffset) == 0x0003C0, "Member 'FHighSpeedMoveMaterialInstance::SocketThghRAuraOffset' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ClankRollL) == 0x0003F0, "Member 'FHighSpeedMoveMaterialInstance::ClankRollL' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ClankRollR) == 0x000420, "Member 'FHighSpeedMoveMaterialInstance::ClankRollR' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ShoulderL) == 0x000450, "Member 'FHighSpeedMoveMaterialInstance::ShoulderL' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ShoulderR) == 0x000480, "Member 'FHighSpeedMoveMaterialInstance::ShoulderR' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ElbowRollL) == 0x0004B0, "Member 'FHighSpeedMoveMaterialInstance::ElbowRollL' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, ElbowRollR) == 0x0004E0, "Member 'FHighSpeedMoveMaterialInstance::ElbowRollR' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, F_Middle1L) == 0x000510, "Member 'FHighSpeedMoveMaterialInstance::F_Middle1L' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, F_Middle1R) == 0x000540, "Member 'FHighSpeedMoveMaterialInstance::F_Middle1R' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail1) == 0x000570, "Member 'FHighSpeedMoveMaterialInstance::Tail1' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail4) == 0x0005A0, "Member 'FHighSpeedMoveMaterialInstance::Tail4' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail7) == 0x0005D0, "Member 'FHighSpeedMoveMaterialInstance::Tail7' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail10) == 0x000600, "Member 'FHighSpeedMoveMaterialInstance::Tail10' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail13) == 0x000630, "Member 'FHighSpeedMoveMaterialInstance::Tail13' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail16) == 0x000660, "Member 'FHighSpeedMoveMaterialInstance::Tail16' has a wrong offset!");
static_assert(offsetof(FHighSpeedMoveMaterialInstance, Tail18) == 0x000690, "Member 'FHighSpeedMoveMaterialInstance::Tail18' has a wrong offset!");

// ScriptStruct SS.SSPLMRoomResourceDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSPLMRoomResourceDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Resource;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPLMRoomResourceDataAssetRecord) == 0x000008, "Wrong alignment on FSSPLMRoomResourceDataAssetRecord");
static_assert(sizeof(FSSPLMRoomResourceDataAssetRecord) == 0x000030, "Wrong size on FSSPLMRoomResourceDataAssetRecord");
static_assert(offsetof(FSSPLMRoomResourceDataAssetRecord, Resource) == 0x000000, "Member 'FSSPLMRoomResourceDataAssetRecord::Resource' has a wrong offset!");

// ScriptStruct SS.SSPLMRoomSubMenuButtonData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FSSPLMRoomSubMenuButtonData final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPLMRoomSubMenuButtonData) == 0x000008, "Wrong alignment on FSSPLMRoomSubMenuButtonData");
static_assert(sizeof(FSSPLMRoomSubMenuButtonData) == 0x000038, "Wrong size on FSSPLMRoomSubMenuButtonData");

// ScriptStruct SS.SSPowerImpactCameraTypeRecord
// 0x0120 (0x0120 - 0x0000)
struct FSSPowerImpactCameraTypeRecord final
{
public:
	struct FSSPowerImpactCameraRecord             GvsN;                                              // 0x0000(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSPowerImpactCameraRecord             NvsG;                                              // 0x0090(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSPowerImpactCameraTypeRecord) == 0x000008, "Wrong alignment on FSSPowerImpactCameraTypeRecord");
static_assert(sizeof(FSSPowerImpactCameraTypeRecord) == 0x000120, "Wrong size on FSSPowerImpactCameraTypeRecord");
static_assert(offsetof(FSSPowerImpactCameraTypeRecord, GvsN) == 0x000000, "Member 'FSSPowerImpactCameraTypeRecord::GvsN' has a wrong offset!");
static_assert(offsetof(FSSPowerImpactCameraTypeRecord, NvsG) == 0x000090, "Member 'FSSPowerImpactCameraTypeRecord::NvsG' has a wrong offset!");

// ScriptStruct SS.SSPropertyText
// 0x0030 (0x0030 - 0x0000)
struct FSSPropertyText final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	TArray<class FText>                           ValueNames;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultIndex;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSPropertyText) == 0x000008, "Wrong alignment on FSSPropertyText");
static_assert(sizeof(FSSPropertyText) == 0x000030, "Wrong size on FSSPropertyText");
static_assert(offsetof(FSSPropertyText, Label) == 0x000000, "Member 'FSSPropertyText::Label' has a wrong offset!");
static_assert(offsetof(FSSPropertyText, ValueNames) == 0x000018, "Member 'FSSPropertyText::ValueNames' has a wrong offset!");
static_assert(offsetof(FSSPropertyText, DefaultIndex) == 0x000028, "Member 'FSSPropertyText::DefaultIndex' has a wrong offset!");

// ScriptStruct SS.SSRankingUserData
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FSSRankingUserData final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSRankingUserData) == 0x000008, "Wrong alignment on FSSRankingUserData");
static_assert(sizeof(FSSRankingUserData) == 0x000078, "Wrong size on FSSRankingUserData");

// ScriptStruct SS.SSRankingCharacterData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSSRankingCharacterData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSRankingCharacterData) == 0x000008, "Wrong alignment on FSSRankingCharacterData");
static_assert(sizeof(FSSRankingCharacterData) == 0x000020, "Wrong size on FSSRankingCharacterData");

// ScriptStruct SS.SSRankingBattleMode010Data
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FSSRankingBattleMode010Data final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSRankingBattleMode010Data) == 0x000008, "Wrong alignment on FSSRankingBattleMode010Data");
static_assert(sizeof(FSSRankingBattleMode010Data) == 0x000070, "Wrong size on FSSRankingBattleMode010Data");

// ScriptStruct SS.SSReplayDataBattleSetting
// 0x0338 (0x0338 - 0x0000)
struct FSSReplayDataBattleSetting final
{
public:
	struct FKoratBattleSetting                    BattleSetting;                                     // 0x0000(0x0318)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint64                                        RandomSeed;                                        // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PreFateVoiceId;                                    // 0x0320(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSReplayDataBattleSetting) == 0x000008, "Wrong alignment on FSSReplayDataBattleSetting");
static_assert(sizeof(FSSReplayDataBattleSetting) == 0x000338, "Wrong size on FSSReplayDataBattleSetting");
static_assert(offsetof(FSSReplayDataBattleSetting, BattleSetting) == 0x000000, "Member 'FSSReplayDataBattleSetting::BattleSetting' has a wrong offset!");
static_assert(offsetof(FSSReplayDataBattleSetting, RandomSeed) == 0x000318, "Member 'FSSReplayDataBattleSetting::RandomSeed' has a wrong offset!");
static_assert(offsetof(FSSReplayDataBattleSetting, PreFateVoiceId) == 0x000320, "Member 'FSSReplayDataBattleSetting::PreFateVoiceId' has a wrong offset!");

// ScriptStruct SS.SSRewardLotteryElement
// 0x000C (0x000C - 0x0000)
struct FSSRewardLotteryElement final
{
public:
	struct FKoratRewardDataList                   RewardId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSRewardLotteryElement) == 0x000004, "Wrong alignment on FSSRewardLotteryElement");
static_assert(sizeof(FSSRewardLotteryElement) == 0x00000C, "Wrong size on FSSRewardLotteryElement");
static_assert(offsetof(FSSRewardLotteryElement, RewardId) == 0x000000, "Member 'FSSRewardLotteryElement::RewardId' has a wrong offset!");
static_assert(offsetof(FSSRewardLotteryElement, Weight) == 0x000008, "Member 'FSSRewardLotteryElement::Weight' has a wrong offset!");

// ScriptStruct SS.KoratRingMenuDataRecord
// 0x0038 (0x0038 - 0x0000)
struct FKoratRingMenuDataRecord final
{
public:
	class FText                                   CommandNameInfo;                                   // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   CommandDiscriptionInfo;                            // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         CommandIcon;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratRingMenuDataRecord) == 0x000008, "Wrong alignment on FKoratRingMenuDataRecord");
static_assert(sizeof(FKoratRingMenuDataRecord) == 0x000038, "Wrong size on FKoratRingMenuDataRecord");
static_assert(offsetof(FKoratRingMenuDataRecord, CommandNameInfo) == 0x000000, "Member 'FKoratRingMenuDataRecord::CommandNameInfo' has a wrong offset!");
static_assert(offsetof(FKoratRingMenuDataRecord, CommandDiscriptionInfo) == 0x000018, "Member 'FKoratRingMenuDataRecord::CommandDiscriptionInfo' has a wrong offset!");
static_assert(offsetof(FKoratRingMenuDataRecord, CommandIcon) == 0x000030, "Member 'FKoratRingMenuDataRecord::CommandIcon' has a wrong offset!");

// ScriptStruct SS.KoratRingMenuDataArray
// 0x0050 (0x0050 - 0x0000)
struct FKoratRingMenuDataArray final
{
public:
	TMap<uint32, struct FKoratRingMenuDataRecord> RingMenuDatas;                                     // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratRingMenuDataArray) == 0x000008, "Wrong alignment on FKoratRingMenuDataArray");
static_assert(sizeof(FKoratRingMenuDataArray) == 0x000050, "Wrong size on FKoratRingMenuDataArray");
static_assert(offsetof(FKoratRingMenuDataArray, RingMenuDatas) == 0x000000, "Member 'FKoratRingMenuDataArray::RingMenuDatas' has a wrong offset!");

// ScriptStruct SS.KoratShopBannerImage
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKoratShopBannerImage final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratShopBannerImage) == 0x000008, "Wrong alignment on FKoratShopBannerImage");
static_assert(sizeof(FKoratShopBannerImage) == 0x000010, "Wrong size on FKoratShopBannerImage");

// ScriptStruct SS.KoratCharaSortMenuRecord
// 0x0020 (0x0020 - 0x0000)
struct FKoratCharaSortMenuRecord final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EKoratCharaSortMenuElementsType               Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKoratCharaSortMenuRecord) == 0x000008, "Wrong alignment on FKoratCharaSortMenuRecord");
static_assert(sizeof(FKoratCharaSortMenuRecord) == 0x000020, "Wrong size on FKoratCharaSortMenuRecord");
static_assert(offsetof(FKoratCharaSortMenuRecord, Text) == 0x000000, "Member 'FKoratCharaSortMenuRecord::Text' has a wrong offset!");
static_assert(offsetof(FKoratCharaSortMenuRecord, Type) == 0x000018, "Member 'FKoratCharaSortMenuRecord::Type' has a wrong offset!");

// ScriptStruct SS.SSStaffRollDataAssetRecord
// 0x0068 (0x0068 - 0x0000)
struct FSSStaffRollDataAssetRecord final
{
public:
	ESSStaffRollPartsType                         PartsType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSStaffRollDataAssetRecord) == 0x000008, "Wrong alignment on FSSStaffRollDataAssetRecord");
static_assert(sizeof(FSSStaffRollDataAssetRecord) == 0x000068, "Wrong size on FSSStaffRollDataAssetRecord");
static_assert(offsetof(FSSStaffRollDataAssetRecord, PartsType) == 0x000000, "Member 'FSSStaffRollDataAssetRecord::PartsType' has a wrong offset!");
static_assert(offsetof(FSSStaffRollDataAssetRecord, Image) == 0x000008, "Member 'FSSStaffRollDataAssetRecord::Image' has a wrong offset!");
static_assert(offsetof(FSSStaffRollDataAssetRecord, Title) == 0x000038, "Member 'FSSStaffRollDataAssetRecord::Title' has a wrong offset!");
static_assert(offsetof(FSSStaffRollDataAssetRecord, Name) == 0x000050, "Member 'FSSStaffRollDataAssetRecord::Name' has a wrong offset!");

// ScriptStruct SS.SSStopWatchLapData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSSStopWatchLapData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSStopWatchLapData) == 0x000008, "Wrong alignment on FSSStopWatchLapData");
static_assert(sizeof(FSSStopWatchLapData) == 0x000010, "Wrong size on FSSStopWatchLapData");

// ScriptStruct SS.SSLocomotionSection
// 0x000C (0x000C - 0x0000)
struct FSSLocomotionSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEndSection;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSLocomotionSection) == 0x000004, "Wrong alignment on FSSLocomotionSection");
static_assert(sizeof(FSSLocomotionSection) == 0x00000C, "Wrong size on FSSLocomotionSection");
static_assert(offsetof(FSSLocomotionSection, SectionName) == 0x000000, "Member 'FSSLocomotionSection::SectionName' has a wrong offset!");
static_assert(offsetof(FSSLocomotionSection, IsLoop) == 0x000008, "Member 'FSSLocomotionSection::IsLoop' has a wrong offset!");
static_assert(offsetof(FSSLocomotionSection, IsEndSection) == 0x000009, "Member 'FSSLocomotionSection::IsEndSection' has a wrong offset!");

// ScriptStruct SS.SSParticleCategoryPattern
// 0x0020 (0x0020 - 0x0000)
struct FSSParticleCategoryPattern final
{
public:
	class FString                                 PrefixString;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrefixHash;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrefixLength;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSParticleCategoryPattern) == 0x000008, "Wrong alignment on FSSParticleCategoryPattern");
static_assert(sizeof(FSSParticleCategoryPattern) == 0x000020, "Wrong size on FSSParticleCategoryPattern");
static_assert(offsetof(FSSParticleCategoryPattern, PrefixString) == 0x000000, "Member 'FSSParticleCategoryPattern::PrefixString' has a wrong offset!");
static_assert(offsetof(FSSParticleCategoryPattern, PrefixHash) == 0x000010, "Member 'FSSParticleCategoryPattern::PrefixHash' has a wrong offset!");
static_assert(offsetof(FSSParticleCategoryPattern, PrefixLength) == 0x000018, "Member 'FSSParticleCategoryPattern::PrefixLength' has a wrong offset!");

// ScriptStruct SS.AdditionalTickFunction
// 0x0048 (0x0070 - 0x0028)
struct alignas(0x10) FAdditionalTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdditionalTickFunction) == 0x000010, "Wrong alignment on FAdditionalTickFunction");
static_assert(sizeof(FAdditionalTickFunction) == 0x000070, "Wrong size on FAdditionalTickFunction");

// ScriptStruct SS.SSSubLevelLoadParamsDataAssetRecord
// 0x0070 (0x0070 - 0x0000)
struct FSSSubLevelLoadParamsDataAssetRecord final
{
public:
	struct FTransform                             LevelTransform;                                    // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialyVisible;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSubLevelLoadParamsDataAssetRecord) == 0x000010, "Wrong alignment on FSSSubLevelLoadParamsDataAssetRecord");
static_assert(sizeof(FSSSubLevelLoadParamsDataAssetRecord) == 0x000070, "Wrong size on FSSSubLevelLoadParamsDataAssetRecord");
static_assert(offsetof(FSSSubLevelLoadParamsDataAssetRecord, LevelTransform) == 0x000000, "Member 'FSSSubLevelLoadParamsDataAssetRecord::LevelTransform' has a wrong offset!");
static_assert(offsetof(FSSSubLevelLoadParamsDataAssetRecord, bInitialyVisible) == 0x000060, "Member 'FSSSubLevelLoadParamsDataAssetRecord::bInitialyVisible' has a wrong offset!");

// ScriptStruct SS.KeyInfo
// 0x0018 (0x0018 - 0x0000)
struct FKeyInfo final
{
public:
	int32                                         KeyboadKeyIndex;                                   // 0x0000(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           Keys;                                              // 0x0008(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyInfo) == 0x000008, "Wrong alignment on FKeyInfo");
static_assert(sizeof(FKeyInfo) == 0x000018, "Wrong size on FKeyInfo");
static_assert(offsetof(FKeyInfo, KeyboadKeyIndex) == 0x000000, "Member 'FKeyInfo::KeyboadKeyIndex' has a wrong offset!");
static_assert(offsetof(FKeyInfo, Keys) == 0x000008, "Member 'FKeyInfo::Keys' has a wrong offset!");

// ScriptStruct SS.KeyInputDIK_FKEY
// 0x0070 (0x0070 - 0x0000)
struct FKeyInputDIK_FKEY final
{
public:
	TArray<int32>                                 Dik;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           DikFKey;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Mouse;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Fkey;                                              // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           CFkey;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FGroupNo;                                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CGroupNo;                                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FSelectNo;                                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CSelectNo;                                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KGroupNo;                                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KSelectNo;                                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyBordMode;                                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyInputDIK_FKEY) == 0x000008, "Wrong alignment on FKeyInputDIK_FKEY");
static_assert(sizeof(FKeyInputDIK_FKEY) == 0x000070, "Wrong size on FKeyInputDIK_FKEY");
static_assert(offsetof(FKeyInputDIK_FKEY, Dik) == 0x000000, "Member 'FKeyInputDIK_FKEY::Dik' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, DikFKey) == 0x000010, "Member 'FKeyInputDIK_FKEY::DikFKey' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, Mouse) == 0x000020, "Member 'FKeyInputDIK_FKEY::Mouse' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, Fkey) == 0x000030, "Member 'FKeyInputDIK_FKEY::Fkey' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, CFkey) == 0x000040, "Member 'FKeyInputDIK_FKEY::CFkey' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, FGroupNo) == 0x000050, "Member 'FKeyInputDIK_FKEY::FGroupNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, CGroupNo) == 0x000054, "Member 'FKeyInputDIK_FKEY::CGroupNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, FSelectNo) == 0x000058, "Member 'FKeyInputDIK_FKEY::FSelectNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, CSelectNo) == 0x00005C, "Member 'FKeyInputDIK_FKEY::CSelectNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, KGroupNo) == 0x000060, "Member 'FKeyInputDIK_FKEY::KGroupNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, KSelectNo) == 0x000064, "Member 'FKeyInputDIK_FKEY::KSelectNo' has a wrong offset!");
static_assert(offsetof(FKeyInputDIK_FKEY, KeyBordMode) == 0x000068, "Member 'FKeyInputDIK_FKEY::KeyBordMode' has a wrong offset!");

// ScriptStruct SS.SSTeamTalkSettingData
// 0x0090 (0x0090 - 0x0000)
struct FSSTeamTalkSettingData final
{
public:
	class FText                                   UpdateNameText;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EKoratTeamCharacterIndex, class FString> ConversationVoiceMap;                              // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTeamTalkSettingData) == 0x000008, "Wrong alignment on FSSTeamTalkSettingData");
static_assert(sizeof(FSSTeamTalkSettingData) == 0x000090, "Wrong size on FSSTeamTalkSettingData");
static_assert(offsetof(FSSTeamTalkSettingData, UpdateNameText) == 0x000000, "Member 'FSSTeamTalkSettingData::UpdateNameText' has a wrong offset!");
static_assert(offsetof(FSSTeamTalkSettingData, Text) == 0x000018, "Member 'FSSTeamTalkSettingData::Text' has a wrong offset!");
static_assert(offsetof(FSSTeamTalkSettingData, Time) == 0x000030, "Member 'FSSTeamTalkSettingData::Time' has a wrong offset!");
static_assert(offsetof(FSSTeamTalkSettingData, Volume) == 0x000034, "Member 'FSSTeamTalkSettingData::Volume' has a wrong offset!");
static_assert(offsetof(FSSTeamTalkSettingData, Interval) == 0x000038, "Member 'FSSTeamTalkSettingData::Interval' has a wrong offset!");
static_assert(offsetof(FSSTeamTalkSettingData, ConversationVoiceMap) == 0x000040, "Member 'FSSTeamTalkSettingData::ConversationVoiceMap' has a wrong offset!");

// ScriptStruct SS.SSTimeLinePlaybackBar
// 0x0028 (0x0028 - 0x0000)
struct FSSTimeLinePlaybackBar final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsSlowStretch;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLinePlaybackBar) == 0x000008, "Wrong alignment on FSSTimeLinePlaybackBar");
static_assert(sizeof(FSSTimeLinePlaybackBar) == 0x000028, "Wrong size on FSSTimeLinePlaybackBar");
static_assert(offsetof(FSSTimeLinePlaybackBar, Start) == 0x000000, "Member 'FSSTimeLinePlaybackBar::Start' has a wrong offset!");
static_assert(offsetof(FSSTimeLinePlaybackBar, Length) == 0x000004, "Member 'FSSTimeLinePlaybackBar::Length' has a wrong offset!");
static_assert(offsetof(FSSTimeLinePlaybackBar, Label) == 0x000008, "Member 'FSSTimeLinePlaybackBar::Label' has a wrong offset!");
static_assert(offsetof(FSSTimeLinePlaybackBar, bIsSlowStretch) == 0x000020, "Member 'FSSTimeLinePlaybackBar::bIsSlowStretch' has a wrong offset!");
static_assert(offsetof(FSSTimeLinePlaybackBar, ID) == 0x000024, "Member 'FSSTimeLinePlaybackBar::ID' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTrackDataBase
// 0x0038 (0x0038 - 0x0000)
struct FSSTimeLineUiTrackDataBase
{
public:
	class FText                                   TrackName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESSTimeLineUiTrackColorType                   ColorType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSTimeLinePlaybackBar>         Bars;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TrackId;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiTrackDataBase) == 0x000008, "Wrong alignment on FSSTimeLineUiTrackDataBase");
static_assert(sizeof(FSSTimeLineUiTrackDataBase) == 0x000038, "Wrong size on FSSTimeLineUiTrackDataBase");
static_assert(offsetof(FSSTimeLineUiTrackDataBase, TrackName) == 0x000000, "Member 'FSSTimeLineUiTrackDataBase::TrackName' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackDataBase, ColorType) == 0x000018, "Member 'FSSTimeLineUiTrackDataBase::ColorType' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackDataBase, Bars) == 0x000020, "Member 'FSSTimeLineUiTrackDataBase::Bars' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackDataBase, TrackId) == 0x000030, "Member 'FSSTimeLineUiTrackDataBase::TrackId' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTrackData3rd
// 0x0000 (0x0038 - 0x0038)
struct FSSTimeLineUiTrackData3rd final : public FSSTimeLineUiTrackDataBase
{
};
static_assert(alignof(FSSTimeLineUiTrackData3rd) == 0x000008, "Wrong alignment on FSSTimeLineUiTrackData3rd");
static_assert(sizeof(FSSTimeLineUiTrackData3rd) == 0x000038, "Wrong size on FSSTimeLineUiTrackData3rd");

// ScriptStruct SS.SSTimeLineUiTrackData2nd
// 0x0010 (0x0048 - 0x0038)
struct FSSTimeLineUiTrackData2nd final : public FSSTimeLineUiTrackDataBase
{
public:
	TArray<struct FSSTimeLineUiTrackData3rd>      Tracks;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiTrackData2nd) == 0x000008, "Wrong alignment on FSSTimeLineUiTrackData2nd");
static_assert(sizeof(FSSTimeLineUiTrackData2nd) == 0x000048, "Wrong size on FSSTimeLineUiTrackData2nd");
static_assert(offsetof(FSSTimeLineUiTrackData2nd, Tracks) == 0x000038, "Member 'FSSTimeLineUiTrackData2nd::Tracks' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTrackData
// 0x0018 (0x0018 - 0x0000)
struct FSSTimeLineUiTrackData final
{
public:
	TArray<struct FSSTimeLineUiTrackData2nd>      Tracks;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiTrackData) == 0x000008, "Wrong alignment on FSSTimeLineUiTrackData");
static_assert(sizeof(FSSTimeLineUiTrackData) == 0x000018, "Wrong size on FSSTimeLineUiTrackData");
static_assert(offsetof(FSSTimeLineUiTrackData, Tracks) == 0x000000, "Member 'FSSTimeLineUiTrackData::Tracks' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTextStyle
// 0x00B8 (0x00B8 - 0x0000)
struct FSSTimeLineUiTextStyle final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDropShadow;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetWidth;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetLocation;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiTextStyle) == 0x000008, "Wrong alignment on FSSTimeLineUiTextStyle");
static_assert(sizeof(FSSTimeLineUiTextStyle) == 0x0000B8, "Wrong size on FSSTimeLineUiTextStyle");
static_assert(offsetof(FSSTimeLineUiTextStyle, Font) == 0x000000, "Member 'FSSTimeLineUiTextStyle::Font' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, ColorAndOpacity) == 0x000058, "Member 'FSSTimeLineUiTextStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, bDropShadow) == 0x000068, "Member 'FSSTimeLineUiTextStyle::bDropShadow' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, ShadowOffset) == 0x000070, "Member 'FSSTimeLineUiTextStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, ShadowColorAndOpacity) == 0x000080, "Member 'FSSTimeLineUiTextStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, OffsetWidth) == 0x000090, "Member 'FSSTimeLineUiTextStyle::OffsetWidth' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, OffsetLocation) == 0x0000A0, "Member 'FSSTimeLineUiTextStyle::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTextStyle, Justification) == 0x0000B0, "Member 'FSSTimeLineUiTextStyle::Justification' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiLineStyle
// 0x0018 (0x0018 - 0x0000)
struct FSSTimeLineUiLineStyle final
{
public:
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiAlias;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiLineStyle) == 0x000004, "Wrong alignment on FSSTimeLineUiLineStyle");
static_assert(sizeof(FSSTimeLineUiLineStyle) == 0x000018, "Wrong size on FSSTimeLineUiLineStyle");
static_assert(offsetof(FSSTimeLineUiLineStyle, ColorAndOpacity) == 0x000000, "Member 'FSSTimeLineUiLineStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLineStyle, Thickness) == 0x000010, "Member 'FSSTimeLineUiLineStyle::Thickness' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLineStyle, bAntiAlias) == 0x000014, "Member 'FSSTimeLineUiLineStyle::bAntiAlias' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiLaneBarStyle
// 0x01C0 (0x01C0 - 0x0000)
struct FSSTimeLineUiLaneBarStyle final
{
public:
	struct FSSTimeLineUiImageStyle                Image;                                             // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTextStyle                 Text;                                              // 0x0100(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiLaneBarStyle) == 0x000010, "Wrong alignment on FSSTimeLineUiLaneBarStyle");
static_assert(sizeof(FSSTimeLineUiLaneBarStyle) == 0x0001C0, "Wrong size on FSSTimeLineUiLaneBarStyle");
static_assert(offsetof(FSSTimeLineUiLaneBarStyle, Image) == 0x000000, "Member 'FSSTimeLineUiLaneBarStyle::Image' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLaneBarStyle, Text) == 0x000100, "Member 'FSSTimeLineUiLaneBarStyle::Text' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiLaneBarStyles
// 0x0600 (0x0600 - 0x0000)
struct FSSTimeLineUiLaneBarStyles final
{
public:
	struct FSSTimeLineUiLaneBarStyle              Default;                                           // 0x0000(0x01C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLaneBarStyle              Select;                                            // 0x01C0(0x01C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLaneBarStyle              Tree;                                              // 0x0380(0x01C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTextStyle                 Text;                                              // 0x0540(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiLaneBarStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiLaneBarStyles");
static_assert(sizeof(FSSTimeLineUiLaneBarStyles) == 0x000600, "Wrong size on FSSTimeLineUiLaneBarStyles");
static_assert(offsetof(FSSTimeLineUiLaneBarStyles, Default) == 0x000000, "Member 'FSSTimeLineUiLaneBarStyles::Default' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLaneBarStyles, Select) == 0x0001C0, "Member 'FSSTimeLineUiLaneBarStyles::Select' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLaneBarStyles, Tree) == 0x000380, "Member 'FSSTimeLineUiLaneBarStyles::Tree' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLaneBarStyles, Text) == 0x000540, "Member 'FSSTimeLineUiLaneBarStyles::Text' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiFreeCursorStyles
// 0x0100 (0x0100 - 0x0000)
struct FSSTimeLineUiFreeCursorStyles final
{
public:
	struct FSSTimeLineUiImageStyle                Image;                                             // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiFreeCursorStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiFreeCursorStyles");
static_assert(sizeof(FSSTimeLineUiFreeCursorStyles) == 0x000100, "Wrong size on FSSTimeLineUiFreeCursorStyles");
static_assert(offsetof(FSSTimeLineUiFreeCursorStyles, Image) == 0x000000, "Member 'FSSTimeLineUiFreeCursorStyles::Image' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTickMarkStyles
// 0x0118 (0x0118 - 0x0000)
struct FSSTimeLineUiTickMarkStyles final
{
public:
	struct FSSTimeLineUiLineStyle                 LaneBgTickLine;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLineStyle                 SliderTickLine;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLineStyle                 SliderSmallTickLine;                               // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTextStyle                 SliderTickText;                                    // 0x0048(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLineStyle                 EndLineTickLine;                                   // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiTickMarkStyles) == 0x000008, "Wrong alignment on FSSTimeLineUiTickMarkStyles");
static_assert(sizeof(FSSTimeLineUiTickMarkStyles) == 0x000118, "Wrong size on FSSTimeLineUiTickMarkStyles");
static_assert(offsetof(FSSTimeLineUiTickMarkStyles, LaneBgTickLine) == 0x000000, "Member 'FSSTimeLineUiTickMarkStyles::LaneBgTickLine' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTickMarkStyles, SliderTickLine) == 0x000018, "Member 'FSSTimeLineUiTickMarkStyles::SliderTickLine' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTickMarkStyles, SliderSmallTickLine) == 0x000030, "Member 'FSSTimeLineUiTickMarkStyles::SliderSmallTickLine' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTickMarkStyles, SliderTickText) == 0x000048, "Member 'FSSTimeLineUiTickMarkStyles::SliderTickText' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTickMarkStyles, EndLineTickLine) == 0x000100, "Member 'FSSTimeLineUiTickMarkStyles::EndLineTickLine' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiTrackStyles
// 0x03C0 (0x03C0 - 0x0000)
struct FSSTimeLineUiTrackStyles final
{
public:
	struct FSSTimeLineUiImageStyle                BoxBg;                                             // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiImageStyle                TreeNodeMark;                                      // 0x0100(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiImageStyle                TreeLeafMark;                                      // 0x0200(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTextStyle                 LabelText;                                         // 0x0300(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiTrackStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiTrackStyles");
static_assert(sizeof(FSSTimeLineUiTrackStyles) == 0x0003C0, "Wrong size on FSSTimeLineUiTrackStyles");
static_assert(offsetof(FSSTimeLineUiTrackStyles, BoxBg) == 0x000000, "Member 'FSSTimeLineUiTrackStyles::BoxBg' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackStyles, TreeNodeMark) == 0x000100, "Member 'FSSTimeLineUiTrackStyles::TreeNodeMark' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackStyles, TreeLeafMark) == 0x000200, "Member 'FSSTimeLineUiTrackStyles::TreeLeafMark' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiTrackStyles, LabelText) == 0x000300, "Member 'FSSTimeLineUiTrackStyles::LabelText' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiPlayHeadStyles
// 0x0120 (0x0120 - 0x0000)
struct FSSTimeLineUiPlayHeadStyles final
{
public:
	struct FSSTimeLineUiImageStyle                TopMark;                                           // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLineStyle                 Line;                                              // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiPlayHeadStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiPlayHeadStyles");
static_assert(sizeof(FSSTimeLineUiPlayHeadStyles) == 0x000120, "Wrong size on FSSTimeLineUiPlayHeadStyles");
static_assert(offsetof(FSSTimeLineUiPlayHeadStyles, TopMark) == 0x000000, "Member 'FSSTimeLineUiPlayHeadStyles::TopMark' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiPlayHeadStyles, Line) == 0x000100, "Member 'FSSTimeLineUiPlayHeadStyles::Line' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiStartTransitionStyles
// 0x0100 (0x0100 - 0x0000)
struct FSSTimeLineUiStartTransitionStyles final
{
public:
	struct FSSTimeLineUiImageStyle                TransitionArea;                                    // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiStartTransitionStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiStartTransitionStyles");
static_assert(sizeof(FSSTimeLineUiStartTransitionStyles) == 0x000100, "Wrong size on FSSTimeLineUiStartTransitionStyles");
static_assert(offsetof(FSSTimeLineUiStartTransitionStyles, TransitionArea) == 0x000000, "Member 'FSSTimeLineUiStartTransitionStyles::TransitionArea' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiInvalidAreaStyles
// 0x0100 (0x0100 - 0x0000)
struct FSSTimeLineUiInvalidAreaStyles final
{
public:
	struct FSSTimeLineUiImageStyle                InvalidArea;                                       // 0x0000(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiInvalidAreaStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiInvalidAreaStyles");
static_assert(sizeof(FSSTimeLineUiInvalidAreaStyles) == 0x000100, "Wrong size on FSSTimeLineUiInvalidAreaStyles");
static_assert(offsetof(FSSTimeLineUiInvalidAreaStyles, InvalidArea) == 0x000000, "Member 'FSSTimeLineUiInvalidAreaStyles::InvalidArea' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiScrollBarStyle
// 0x0790 (0x0790 - 0x0000)
struct FSSTimeLineUiScrollBarStyle final
{
public:
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x0000(0x0770)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              Thickness;                                         // 0x0770(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0780(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiScrollBarStyle) == 0x000010, "Wrong alignment on FSSTimeLineUiScrollBarStyle");
static_assert(sizeof(FSSTimeLineUiScrollBarStyle) == 0x000790, "Wrong size on FSSTimeLineUiScrollBarStyle");
static_assert(offsetof(FSSTimeLineUiScrollBarStyle, ScrollBarStyle) == 0x000000, "Member 'FSSTimeLineUiScrollBarStyle::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScrollBarStyle, Thickness) == 0x000770, "Member 'FSSTimeLineUiScrollBarStyle::Thickness' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScrollBarStyle, Padding) == 0x000780, "Member 'FSSTimeLineUiScrollBarStyle::Padding' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiScrollBarStyles
// 0x0F20 (0x0F20 - 0x0000)
struct FSSTimeLineUiScrollBarStyles final
{
public:
	struct FSSTimeLineUiScrollBarStyle            Vertical;                                          // 0x0000(0x0790)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiScrollBarStyle            Horizontal;                                        // 0x0790(0x0790)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiScrollBarStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiScrollBarStyles");
static_assert(sizeof(FSSTimeLineUiScrollBarStyles) == 0x000F20, "Wrong size on FSSTimeLineUiScrollBarStyles");
static_assert(offsetof(FSSTimeLineUiScrollBarStyles, Vertical) == 0x000000, "Member 'FSSTimeLineUiScrollBarStyles::Vertical' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScrollBarStyles, Horizontal) == 0x000790, "Member 'FSSTimeLineUiScrollBarStyles::Horizontal' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiStyles
// 0x1F70 (0x1F70 - 0x0000)
struct FSSTimeLineUiStyles final
{
public:
	struct FSSTimeLineUiLaneBarStyles             LaneBar;                                           // 0x0000(0x0600)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTrackStyles               TrackInfo;                                         // 0x0600(0x03C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiTickMarkStyles            TickMark;                                          // 0x09C0(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD8[0x8];                                      // 0x0AD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSTimeLineUiFreeCursorStyles          FreeCursor;                                        // 0x0AE0(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiPlayHeadStyles            PlayHead;                                          // 0x0BE0(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiSlowStyles                Slow;                                              // 0x0D00(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiStartTransitionStyles     StartTransition;                                   // 0x0E00(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiInvalidAreaStyles         InvalidArea;                                       // 0x0F00(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiScrollBarStyles           ScrollBar;                                         // 0x1000(0x0F20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ESSTimeLineUiTrackColorType, struct FLinearColor> CategoryColors;                                    // 0x1F20(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiStyles) == 0x000010, "Wrong alignment on FSSTimeLineUiStyles");
static_assert(sizeof(FSSTimeLineUiStyles) == 0x001F70, "Wrong size on FSSTimeLineUiStyles");
static_assert(offsetof(FSSTimeLineUiStyles, LaneBar) == 0x000000, "Member 'FSSTimeLineUiStyles::LaneBar' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, TrackInfo) == 0x000600, "Member 'FSSTimeLineUiStyles::TrackInfo' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, TickMark) == 0x0009C0, "Member 'FSSTimeLineUiStyles::TickMark' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, FreeCursor) == 0x000AE0, "Member 'FSSTimeLineUiStyles::FreeCursor' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, PlayHead) == 0x000BE0, "Member 'FSSTimeLineUiStyles::PlayHead' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, Slow) == 0x000D00, "Member 'FSSTimeLineUiStyles::Slow' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, StartTransition) == 0x000E00, "Member 'FSSTimeLineUiStyles::StartTransition' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, InvalidArea) == 0x000F00, "Member 'FSSTimeLineUiStyles::InvalidArea' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, ScrollBar) == 0x001000, "Member 'FSSTimeLineUiStyles::ScrollBar' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStyles, CategoryColors) == 0x001F20, "Member 'FSSTimeLineUiStyles::CategoryColors' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiScaleLevelSetting
// 0x0018 (0x0018 - 0x0000)
struct FSSTimeLineUiScaleLevelSetting final
{
public:
	float                                         ScalePixelPerSecond;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickLineInterval;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickLineLength;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickTextFractionalDigits;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallTickLineInterval;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallTickLineLength;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiScaleLevelSetting) == 0x000004, "Wrong alignment on FSSTimeLineUiScaleLevelSetting");
static_assert(sizeof(FSSTimeLineUiScaleLevelSetting) == 0x000018, "Wrong size on FSSTimeLineUiScaleLevelSetting");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, ScalePixelPerSecond) == 0x000000, "Member 'FSSTimeLineUiScaleLevelSetting::ScalePixelPerSecond' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, TickLineInterval) == 0x000004, "Member 'FSSTimeLineUiScaleLevelSetting::TickLineInterval' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, TickLineLength) == 0x000008, "Member 'FSSTimeLineUiScaleLevelSetting::TickLineLength' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, TickTextFractionalDigits) == 0x00000C, "Member 'FSSTimeLineUiScaleLevelSetting::TickTextFractionalDigits' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, SmallTickLineInterval) == 0x000010, "Member 'FSSTimeLineUiScaleLevelSetting::SmallTickLineInterval' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiScaleLevelSetting, SmallTickLineLength) == 0x000014, "Member 'FSSTimeLineUiScaleLevelSetting::SmallTickLineLength' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiLayout
// 0x0038 (0x0038 - 0x0000)
struct FSSTimeLineUiLayout final
{
public:
	TArray<struct FSSTimeLineUiScaleLevelSetting> ScaleSettings;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ScaleLevel;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TickTextOffset;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaneBarHeight;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaneLineSpace;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TreeIconToTextSpace;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TreeHierarchyIndent;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiLayout) == 0x000008, "Wrong alignment on FSSTimeLineUiLayout");
static_assert(sizeof(FSSTimeLineUiLayout) == 0x000038, "Wrong size on FSSTimeLineUiLayout");
static_assert(offsetof(FSSTimeLineUiLayout, ScaleSettings) == 0x000000, "Member 'FSSTimeLineUiLayout::ScaleSettings' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, ScaleLevel) == 0x000010, "Member 'FSSTimeLineUiLayout::ScaleLevel' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, TickTextOffset) == 0x000018, "Member 'FSSTimeLineUiLayout::TickTextOffset' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, LaneBarHeight) == 0x000028, "Member 'FSSTimeLineUiLayout::LaneBarHeight' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, LaneLineSpace) == 0x00002C, "Member 'FSSTimeLineUiLayout::LaneLineSpace' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, TreeIconToTextSpace) == 0x000030, "Member 'FSSTimeLineUiLayout::TreeIconToTextSpace' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiLayout, TreeHierarchyIndent) == 0x000034, "Member 'FSSTimeLineUiLayout::TreeHierarchyIndent' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiActionAdjust
// 0x0010 (0x0010 - 0x0000)
struct FSSTimeLineUiActionAdjust final
{
public:
	float                                         FreeCursorSpeed;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultScalePivot;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyFocusHEdgeMergin;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyFocusVEdgeMergin;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineUiActionAdjust) == 0x000004, "Wrong alignment on FSSTimeLineUiActionAdjust");
static_assert(sizeof(FSSTimeLineUiActionAdjust) == 0x000010, "Wrong size on FSSTimeLineUiActionAdjust");
static_assert(offsetof(FSSTimeLineUiActionAdjust, FreeCursorSpeed) == 0x000000, "Member 'FSSTimeLineUiActionAdjust::FreeCursorSpeed' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiActionAdjust, DefaultScalePivot) == 0x000004, "Member 'FSSTimeLineUiActionAdjust::DefaultScalePivot' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiActionAdjust, KeyFocusHEdgeMergin) == 0x000008, "Member 'FSSTimeLineUiActionAdjust::KeyFocusHEdgeMergin' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiActionAdjust, KeyFocusVEdgeMergin) == 0x00000C, "Member 'FSSTimeLineUiActionAdjust::KeyFocusVEdgeMergin' has a wrong offset!");

// ScriptStruct SS.SSTimeLineUiStatus
// 0x0020 (0x0020 - 0x0000)
struct FSSTimeLineUiStatus final
{
public:
	TArray<int32>                                 SelectBarIdList;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ScrollOffsetX;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollOffsetY;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTimeLineUiStatus) == 0x000008, "Wrong alignment on FSSTimeLineUiStatus");
static_assert(sizeof(FSSTimeLineUiStatus) == 0x000020, "Wrong size on FSSTimeLineUiStatus");
static_assert(offsetof(FSSTimeLineUiStatus, SelectBarIdList) == 0x000000, "Member 'FSSTimeLineUiStatus::SelectBarIdList' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStatus, ScrollOffsetX) == 0x000010, "Member 'FSSTimeLineUiStatus::ScrollOffsetX' has a wrong offset!");
static_assert(offsetof(FSSTimeLineUiStatus, ScrollOffsetY) == 0x000018, "Member 'FSSTimeLineUiStatus::ScrollOffsetY' has a wrong offset!");

// ScriptStruct SS.SSTimeLineData
// 0x2020 (0x2020 - 0x0000)
struct FSSTimeLineData final
{
public:
	struct FSSTimeLineUiTrackData                 TrackData;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSTimeLineUiStyles                    Style;                                             // 0x0020(0x1F70)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiLayout                    Layout;                                            // 0x1F90(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiDrawSetting               DrawSetting;                                       // 0x1FC8(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSTimeLineUiActionAdjust              ActionAdjust;                                      // 0x1FEC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFC[0x4];                                     // 0x1FFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSSTimeLineUiStatus                    Status;                                            // 0x2000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTimeLineData) == 0x000010, "Wrong alignment on FSSTimeLineData");
static_assert(sizeof(FSSTimeLineData) == 0x002020, "Wrong size on FSSTimeLineData");
static_assert(offsetof(FSSTimeLineData, TrackData) == 0x000000, "Member 'FSSTimeLineData::TrackData' has a wrong offset!");
static_assert(offsetof(FSSTimeLineData, Style) == 0x000020, "Member 'FSSTimeLineData::Style' has a wrong offset!");
static_assert(offsetof(FSSTimeLineData, Layout) == 0x001F90, "Member 'FSSTimeLineData::Layout' has a wrong offset!");
static_assert(offsetof(FSSTimeLineData, DrawSetting) == 0x001FC8, "Member 'FSSTimeLineData::DrawSetting' has a wrong offset!");
static_assert(offsetof(FSSTimeLineData, ActionAdjust) == 0x001FEC, "Member 'FSSTimeLineData::ActionAdjust' has a wrong offset!");
static_assert(offsetof(FSSTimeLineData, Status) == 0x002000, "Member 'FSSTimeLineData::Status' has a wrong offset!");

// ScriptStruct SS.SSTournamentMatchResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSSTournamentMatchResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentMatchResult) == 0x000008, "Wrong alignment on FSSTournamentMatchResult");
static_assert(sizeof(FSSTournamentMatchResult) == 0x000018, "Wrong size on FSSTournamentMatchResult");

// ScriptStruct SS.SSTournamentRoundMatchResults
// 0x0050 (0x0050 - 0x0000)
struct FSSTournamentRoundMatchResults final
{
public:
	TMap<int32, struct FSSTournamentMatchResult>  RoundMatchResult;                                  // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentRoundMatchResults) == 0x000008, "Wrong alignment on FSSTournamentRoundMatchResults");
static_assert(sizeof(FSSTournamentRoundMatchResults) == 0x000050, "Wrong size on FSSTournamentRoundMatchResults");
static_assert(offsetof(FSSTournamentRoundMatchResults, RoundMatchResult) == 0x000000, "Member 'FSSTournamentRoundMatchResults::RoundMatchResult' has a wrong offset!");

// ScriptStruct SS.SSTournamentPlayerCharacter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSSTournamentPlayerCharacter final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentPlayerCharacter) == 0x000008, "Wrong alignment on FSSTournamentPlayerCharacter");
static_assert(sizeof(FSSTournamentPlayerCharacter) == 0x000020, "Wrong size on FSSTournamentPlayerCharacter");

// ScriptStruct SS.SSTournamentChartResDataAssetRecord
// 0x0030 (0x0030 - 0x0000)
struct FSSTournamentChartResDataAssetRecord final
{
public:
	TSoftClassPtr<class UClass>                   Resource;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentChartResDataAssetRecord) == 0x000008, "Wrong alignment on FSSTournamentChartResDataAssetRecord");
static_assert(sizeof(FSSTournamentChartResDataAssetRecord) == 0x000030, "Wrong size on FSSTournamentChartResDataAssetRecord");
static_assert(offsetof(FSSTournamentChartResDataAssetRecord, Resource) == 0x000000, "Member 'FSSTournamentChartResDataAssetRecord::Resource' has a wrong offset!");

// ScriptStruct SS.SSTournamentRuleSet
// 0x0190 (0x0190 - 0x0000)
struct FSSTournamentRuleSet final
{
public:
	class FName                                   TournamentId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TournamentName;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterFilterDataList>  PlayerCharacterRestriction;                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKoratCharacterFilterDataList>  ComCharacterRestriction;                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ETournamentTimeLimit                          Timelimit;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratMapDataList                      ReservedStage;                                     // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratBattleMemberRule                        MemberRule;                                        // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDP;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMemberChange;                              // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCharacterSelect;                            // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETournamentZItemCustomizeType                 ZItemCustomizeType;                                // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKoratHealthRecoveryMode                      HealthRecoveryMode;                                // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthRecoveryPercentage;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFly;                                        // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOutOfField;                                 // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              TournamentNameImage;                               // 0x0060(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EntryAnimIcon;                                     // 0x0090(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETournamentEntryAnimType                      EntryAnimType;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKoratRewardDataList>           FirstVictoryReward;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKoratRewardLotteryDataList            RepeatVictoryReward;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKoratBattleDirectingSetup>     BattleDirectingSetups;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ETournamentVoiceEventId, struct FKoratConversationDataList> VoiceEvent;                                        // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FSSTournamentReservedTeamData> ReservedComTeams;                                  // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTournamentRuleSet) == 0x000008, "Wrong alignment on FSSTournamentRuleSet");
static_assert(sizeof(FSSTournamentRuleSet) == 0x000190, "Wrong size on FSSTournamentRuleSet");
static_assert(offsetof(FSSTournamentRuleSet, TournamentId) == 0x000000, "Member 'FSSTournamentRuleSet::TournamentId' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, TournamentName) == 0x000008, "Member 'FSSTournamentRuleSet::TournamentName' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, PlayerCharacterRestriction) == 0x000020, "Member 'FSSTournamentRuleSet::PlayerCharacterRestriction' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, ComCharacterRestriction) == 0x000030, "Member 'FSSTournamentRuleSet::ComCharacterRestriction' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, Timelimit) == 0x000040, "Member 'FSSTournamentRuleSet::Timelimit' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, ReservedStage) == 0x000044, "Member 'FSSTournamentRuleSet::ReservedStage' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, MemberRule) == 0x00004C, "Member 'FSSTournamentRuleSet::MemberRule' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, MaxDP) == 0x000050, "Member 'FSSTournamentRuleSet::MaxDP' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, bDisableMemberChange) == 0x000054, "Member 'FSSTournamentRuleSet::bDisableMemberChange' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, bEnableCharacterSelect) == 0x000055, "Member 'FSSTournamentRuleSet::bEnableCharacterSelect' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, ZItemCustomizeType) == 0x000056, "Member 'FSSTournamentRuleSet::ZItemCustomizeType' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, HealthRecoveryMode) == 0x000057, "Member 'FSSTournamentRuleSet::HealthRecoveryMode' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, HealthRecoveryPercentage) == 0x000058, "Member 'FSSTournamentRuleSet::HealthRecoveryPercentage' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, bEnableFly) == 0x00005C, "Member 'FSSTournamentRuleSet::bEnableFly' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, bEnableOutOfField) == 0x00005D, "Member 'FSSTournamentRuleSet::bEnableOutOfField' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, TournamentNameImage) == 0x000060, "Member 'FSSTournamentRuleSet::TournamentNameImage' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, EntryAnimIcon) == 0x000090, "Member 'FSSTournamentRuleSet::EntryAnimIcon' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, EntryAnimType) == 0x0000C0, "Member 'FSSTournamentRuleSet::EntryAnimType' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, FirstVictoryReward) == 0x0000C8, "Member 'FSSTournamentRuleSet::FirstVictoryReward' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, RepeatVictoryReward) == 0x0000D8, "Member 'FSSTournamentRuleSet::RepeatVictoryReward' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, BattleDirectingSetups) == 0x0000E0, "Member 'FSSTournamentRuleSet::BattleDirectingSetups' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, VoiceEvent) == 0x0000F0, "Member 'FSSTournamentRuleSet::VoiceEvent' has a wrong offset!");
static_assert(offsetof(FSSTournamentRuleSet, ReservedComTeams) == 0x000140, "Member 'FSSTournamentRuleSet::ReservedComTeams' has a wrong offset!");

// ScriptStruct SS.SSTournamentRuleEditorMemberRuleSet
// 0x0002 (0x0002 - 0x0000)
struct FSSTournamentRuleEditorMemberRuleSet final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSTournamentRuleEditorMemberRuleSet) == 0x000001, "Wrong alignment on FSSTournamentRuleEditorMemberRuleSet");
static_assert(sizeof(FSSTournamentRuleEditorMemberRuleSet) == 0x000002, "Wrong size on FSSTournamentRuleEditorMemberRuleSet");

// ScriptStruct SS.TrackingGaugeSetting
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FTrackingGaugeSetting final
{
public:
	float                                         GaugeAngleDegree;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GaugeTrackingPointNameStart;                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GaugeTrackingPointNameRoute;                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GaugeTrackingPointNameEnd;                         // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x34];                                      // 0x001C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackingGaugeSetting) == 0x000008, "Wrong alignment on FTrackingGaugeSetting");
static_assert(sizeof(FTrackingGaugeSetting) == 0x000050, "Wrong size on FTrackingGaugeSetting");
static_assert(offsetof(FTrackingGaugeSetting, GaugeAngleDegree) == 0x000000, "Member 'FTrackingGaugeSetting::GaugeAngleDegree' has a wrong offset!");
static_assert(offsetof(FTrackingGaugeSetting, GaugeTrackingPointNameStart) == 0x000004, "Member 'FTrackingGaugeSetting::GaugeTrackingPointNameStart' has a wrong offset!");
static_assert(offsetof(FTrackingGaugeSetting, GaugeTrackingPointNameRoute) == 0x00000C, "Member 'FTrackingGaugeSetting::GaugeTrackingPointNameRoute' has a wrong offset!");
static_assert(offsetof(FTrackingGaugeSetting, GaugeTrackingPointNameEnd) == 0x000014, "Member 'FTrackingGaugeSetting::GaugeTrackingPointNameEnd' has a wrong offset!");

// ScriptStruct SS.SSTravelCharacter
// 0x0010 (0x0010 - 0x0000)
struct FSSTravelCharacter final
{
public:
	class ASSCharacter*                           Character;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSUICharacterReader*                   CharacterReader;                                   // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSTravelCharacter) == 0x000008, "Wrong alignment on FSSTravelCharacter");
static_assert(sizeof(FSSTravelCharacter) == 0x000010, "Wrong size on FSSTravelCharacter");
static_assert(offsetof(FSSTravelCharacter, Character) == 0x000000, "Member 'FSSTravelCharacter::Character' has a wrong offset!");
static_assert(offsetof(FSSTravelCharacter, CharacterReader) == 0x000008, "Member 'FSSTravelCharacter::CharacterReader' has a wrong offset!");

// ScriptStruct SS.SSSubLevelTravelInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FSSSubLevelTravelInfo final
{
public:
	struct FKoratUILevelDataList                  UILevel;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETansitionLevelSequenceType                   TansitionLevelSequenceType;                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSLevelSequenceActor*                  TransitionLevelSequenceActor;                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  AssetContainerSubLevel;                            // 0x0020(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 AssetContainerLevelStream;                         // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  LightSubLevelToPassTheSequene;                     // 0x0058(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSSTravelCharacter>             TravelCharacters;                                  // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSSubLevelTravelInfo) == 0x000008, "Wrong alignment on FSSSubLevelTravelInfo");
static_assert(sizeof(FSSSubLevelTravelInfo) == 0x0000E8, "Wrong size on FSSSubLevelTravelInfo");
static_assert(offsetof(FSSSubLevelTravelInfo, UILevel) == 0x000000, "Member 'FSSSubLevelTravelInfo::UILevel' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, Condition) == 0x000008, "Member 'FSSSubLevelTravelInfo::Condition' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, TansitionLevelSequenceType) == 0x000010, "Member 'FSSSubLevelTravelInfo::TansitionLevelSequenceType' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, TransitionLevelSequenceActor) == 0x000018, "Member 'FSSSubLevelTravelInfo::TransitionLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, AssetContainerSubLevel) == 0x000020, "Member 'FSSSubLevelTravelInfo::AssetContainerSubLevel' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, AssetContainerLevelStream) == 0x000050, "Member 'FSSSubLevelTravelInfo::AssetContainerLevelStream' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, LightSubLevelToPassTheSequene) == 0x000058, "Member 'FSSSubLevelTravelInfo::LightSubLevelToPassTheSequene' has a wrong offset!");
static_assert(offsetof(FSSSubLevelTravelInfo, TravelCharacters) == 0x0000A0, "Member 'FSSSubLevelTravelInfo::TravelCharacters' has a wrong offset!");

// ScriptStruct SS.KoratTutorialButtonTextData
// 0x0060 (0x0060 - 0x0000)
struct FKoratTutorialButtonTextData final
{
public:
	struct FKoratBattlePracticsMenuDataList       PracticeMenuData;                                  // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ButtonText;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FKoratBattlePracticsMenuDataList       ClassicPracticeMenuData;                           // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ClassicButtonText;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ClassicGuideText;                                  // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoratTutorialButtonTextData) == 0x000008, "Wrong alignment on FKoratTutorialButtonTextData");
static_assert(sizeof(FKoratTutorialButtonTextData) == 0x000060, "Wrong size on FKoratTutorialButtonTextData");
static_assert(offsetof(FKoratTutorialButtonTextData, PracticeMenuData) == 0x000000, "Member 'FKoratTutorialButtonTextData::PracticeMenuData' has a wrong offset!");
static_assert(offsetof(FKoratTutorialButtonTextData, ButtonText) == 0x000008, "Member 'FKoratTutorialButtonTextData::ButtonText' has a wrong offset!");
static_assert(offsetof(FKoratTutorialButtonTextData, GuideText) == 0x000018, "Member 'FKoratTutorialButtonTextData::GuideText' has a wrong offset!");
static_assert(offsetof(FKoratTutorialButtonTextData, ClassicPracticeMenuData) == 0x000030, "Member 'FKoratTutorialButtonTextData::ClassicPracticeMenuData' has a wrong offset!");
static_assert(offsetof(FKoratTutorialButtonTextData, ClassicButtonText) == 0x000038, "Member 'FKoratTutorialButtonTextData::ClassicButtonText' has a wrong offset!");
static_assert(offsetof(FKoratTutorialButtonTextData, ClassicGuideText) == 0x000048, "Member 'FKoratTutorialButtonTextData::ClassicGuideText' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueCategoryDataAssetRecord
// 0x0038 (0x0038 - 0x0000)
struct FSSWishComeTrueCategoryDataAssetRecord final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasDetails;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSWishComeTrueCategoryDataAssetRecord) == 0x000008, "Wrong alignment on FSSWishComeTrueCategoryDataAssetRecord");
static_assert(sizeof(FSSWishComeTrueCategoryDataAssetRecord) == 0x000038, "Wrong size on FSSWishComeTrueCategoryDataAssetRecord");
static_assert(offsetof(FSSWishComeTrueCategoryDataAssetRecord, Caption) == 0x000000, "Member 'FSSWishComeTrueCategoryDataAssetRecord::Caption' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueCategoryDataAssetRecord, bHasDetails) == 0x000018, "Member 'FSSWishComeTrueCategoryDataAssetRecord::bHasDetails' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueCategoryDataAssetRecord, Description) == 0x000020, "Member 'FSSWishComeTrueCategoryDataAssetRecord::Description' has a wrong offset!");

// ScriptStruct SS.SSWishComeTrueContentDataAssetRecord
// 0x0060 (0x0060 - 0x0000)
struct FSSWishComeTrueContentDataAssetRecord final
{
public:
	EDragonType                                   DragonType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EWishCategory, struct FSSWishComeTrueContentDetails> Categories;                                        // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PossibleRequestCount;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSWishComeTrueContentDataAssetRecord) == 0x000008, "Wrong alignment on FSSWishComeTrueContentDataAssetRecord");
static_assert(sizeof(FSSWishComeTrueContentDataAssetRecord) == 0x000060, "Wrong size on FSSWishComeTrueContentDataAssetRecord");
static_assert(offsetof(FSSWishComeTrueContentDataAssetRecord, DragonType) == 0x000000, "Member 'FSSWishComeTrueContentDataAssetRecord::DragonType' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueContentDataAssetRecord, Categories) == 0x000008, "Member 'FSSWishComeTrueContentDataAssetRecord::Categories' has a wrong offset!");
static_assert(offsetof(FSSWishComeTrueContentDataAssetRecord, PossibleRequestCount) == 0x000058, "Member 'FSSWishComeTrueContentDataAssetRecord::PossibleRequestCount' has a wrong offset!");

}

