#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBurstSmash

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.Check
// 0x0058 (0x0058 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_Check final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStart;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       CallFunc_GetDragonHomingStatus_DragonHomingStatus; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_3; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_4; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_Check) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_Check");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_Check) == 0x000058, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_Check");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CanStart) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetDragonHomingStatus_DragonHomingStatus) == 0x000018, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetDragonHomingStatus_DragonHomingStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000020, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000030, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetLocomotionComponent_LocomotionComponent_3) == 0x000038, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetLocomotionComponent_LocomotionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000040, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_GetLocomotionComponent_LocomotionComponent_4) == 0x000048, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_GetLocomotionComponent_LocomotionComponent_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Check, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000050, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Check::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.CheckAndStart
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_CanStart;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart) == 0x000020, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, CallFunc_Check_CanStart) == 0x000018, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::CallFunc_Check_CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, CallFunc_Start_NewParam) == 0x000019, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart, CallFunc_CheckAndStart_IsStarted) == 0x00001A, "Member 'BP_CharacterLocomotionSubBurstSmash_C_CheckAndStart::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.GetInitZBurstDashBaseRotation
// 0x00C8 (0x00C8 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation final
{
public:
	struct FRotator                               ___;                                               // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetInputVectorXYZ_OutInputVector;         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetInitZBurstDashBaseRotation____;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_DegAtan2_ReturnValue;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation) == 0x0000C8, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, ___) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::___' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, Temp_bool_Variable) == 0x000018, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_GetInputVectorXYZ_OutInputVector) == 0x000020, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_GetInputVectorXYZ_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakVector_Y) == 0x000048, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_GetInitZBurstDashBaseRotation____) == 0x000060, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_GetInitZBurstDashBaseRotation____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_DegAtan2_ReturnValue) == 0x000078, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakRotator_Roll) == 0x000080, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakRotator_Pitch) == 0x000084, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_BreakRotator_Yaw) == 0x000088, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, K2Node_Select_Default) == 0x000098, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, K2Node_Select_Option_0_ImplicitCast) == 0x0000B8, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000C0, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetInitZBurstDashBaseRotation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.GetLocomotionDetailStatus
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         LocomotionDetailStatus;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus) == 0x000008, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, LocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable_4) == 0x000005, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, Temp_byte_Variable_5) == 0x000006, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus, K2Node_Select_Default) == 0x000007, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.GetRunningAction
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   RunningAction;                                     // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction) == 0x000008, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction, RunningAction) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetRunningAction::RunningAction' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.GetRunningSection
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection final
{
public:
	class FName                                   RunningSection;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRunningSection_RunningSection;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection) == 0x000010, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection, RunningSection) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection::RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection, CallFunc_GetRunningSection_RunningSection) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_GetRunningSection::CallFunc_GetRunningSection_RunningSection' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.IsEnableAction
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction) == 0x000002, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionSubBurstSmash_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.Start
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_Start final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_Start) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_Start");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_Start) == 0x000010, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_Start");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Start, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Start::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Start, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Start::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Start, NewParam) == 0x000009, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Start::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Start, CallFunc_Start_NewParam) == 0x00000A, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Start::CallFunc_Start_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.Update
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_Update) == 0x000030, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000020, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, CallFunc_Update_NewParam) == 0x000028, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::CallFunc_Update_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_CharacterLocomotionSubBurstSmash_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubBurstSmash.BP_CharacterLocomotionSubBurstSmash_C.ZBurstDash LPUpdate
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterAction_C> K2Node_DynamicCast_AsBPI_Character_Action;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         CallFunc_UpdateZBurstDashMove_NextZBurstDashStatus; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Update_Sub_State_Timer_OutSubStateTimer;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate");
static_assert(sizeof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate) == 0x000038, "Wrong size on BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, K2Node_DynamicCast_AsBPI_Character_Action) == 0x000008, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::K2Node_DynamicCast_AsBPI_Character_Action' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, CallFunc_UpdateZBurstDashMove_NextZBurstDashStatus) == 0x000019, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::CallFunc_UpdateZBurstDashMove_NextZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000020, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate, CallFunc_Update_Sub_State_Timer_OutSubStateTimer) == 0x000030, "Member 'BP_CharacterLocomotionSubBurstSmash_C_ZBurstDash_LPUpdate::CallFunc_Update_Sub_State_Timer_OutSubStateTimer' has a wrong offset!");

}

