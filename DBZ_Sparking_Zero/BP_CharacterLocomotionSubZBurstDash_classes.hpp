#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubZBurstDash

#include "Basic.hpp"

#include "EAnimStateMachineEventType_structs.hpp"
#include "Engine_structs.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterLocomotionSubDash_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubZBurstDash.BP_CharacterLocomotionSubZBurstDash_C
// 0x0210 (0x02D0 - 0x00C0)
class UBP_CharacterLocomotionSubZBurstDash_C : public UBP_CharacterLocomotionSubDash_C
{
public:
	EKoratZBurstDashState                         ZBurstDashStatus;                                  // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratZBurstDashState                         AnimEventZBurstDashState;                          // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSplineComponent_C*         LocomotionSplineComponent;                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ZBurstDashMoveDistance;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CharacterLocomotionDashRoute_C*     ZBurstDashRoute;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ZBurstDashBaseRotation;                            // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ZBurstDashChaseTargetLocation;                     // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ZBurstDashTargetRotation;                          // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ZBurstDashStartLocation;                           // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZBurstDashEndLocation;                             // 0x0140(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZBurstDashOldLocation;                             // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZBurstDashStartSplineTangent;                      // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZBurstDashEndSplineTangent;                        // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZBurstDashVelocity;                                // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZBurstDashMoveEndTimer;                            // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineCoordinateSpace                        ZBurstDashSplineCoodinateSpace;                    // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ZBurstDashMoveInputValue;                          // 0x01C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ______Kn__n__;                                     // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _________;                                         // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _____TangentScale;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               __________0;                                       // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               _____B___;                                         // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        ______________;                                    // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __M_____Sw;                                        // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _____OTw____Sw;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __________1__b_LNB_;                               // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug____________;                                 // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __________________B_;                              // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ___________Kn__n__;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _______________0;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __________TangentScale;                            // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               _______________1;                                  // 0x0268(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               __________B___;                                    // 0x0280(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        __________OTw____Sw;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   In_Action;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ____;                                              // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipIN;                                            // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LPSectionTimer;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLP0;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LP0n_pMinus_;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LP0LB_KMinus_;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateVelocity(double InDeltaSeconds, const struct FVector& InOldLocation);
	void CalculateZBurstDashSplineTangent(const struct FRotator& InRotation, struct FVector* Tangent);
	void ChangeZBurstDashStatus(EKoratZBurstDashState InZBurstDashStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void CheckZBurstDashEnd(double InDeltaSeconds, bool InIsCanChase, bool* IsEnd, bool* IsChangeOT);
	void ClearStatus();
	void Get_ZBurst_Dash_Remain_Length(double* RemainLength);
	void GetInitZBurstDashBaseRotation(struct FRotator* ___);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void GetVelocity(struct FVector* Velocity);
	void GetZBurstDashParameter(double* _Kn__n__, double* _____0, double* TangentScale, struct FRotator* _____1, struct FRotator* B___, double* Param___________0, double* __M_____Sw_0, double* OTw____Sw, double* _____1__b_LNB_);
	void GetZBurstDashRoute();
	void GetZBurstDashStateMovementParameter(EKoratZBurstDashState InZBurstDashStatus, bool* IsUseParameter, struct FKoratCharacterDataDragonDashMovementParameter* MovementParameter);
	void GetZBurstDashTargetLocationAndRotation(struct FVector* Location, struct FRotator* Rotation);
	bool IsCanZBurstDashChase();
	void IsEnableAction(bool* IsEnable);
	void IsZBurstDashMoveEnd(bool* IsEnd);
	void OnZBurstDashAnimEvent(EKoratZBurstDashState ZBurstDashState, EAnimStateMachineEventType AnimStateMachineEvent);
	void SetSplineComponent();
	void SetZBurstDashMaxSpeed();
	void SetZBurstDashParameter(const struct FVector& InInputVector);
	void SetZBurstDashRotateRoute();
	void SetZBurstDashStatus(EKoratZBurstDashState InZBurstDashStatus, EKoratCharacterActionFinishReason InActionFinishReason);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void UpdateZBurstDashMove(double InDeltaSeconds, bool InIsDashCombatives, EKoratZBurstDashState* NextZBurstDashStatus);
	void ZBurst_Dash_Combatives_On_End_Dash_Combatives();
	void ZBurst_Dash_LPStop();
	void ZBurst_Dash_OTOn_Set_Anim_Time();
	void ZBurstDash_Combatives();
	void ZBurstDash_Combatives_Stop();
	void ZBurstDash_Combatives_Update();
	void ZBurstDash_IN();
	void ZBurstDash_INKey_Pressed();
	void ZBurstDash_INKey_Released();
	void ZBurstDash_INOn_Set_Anim_Time();
	void ZBurstDash_INStop();
	void ZBurstDash_INUpdate();
	void ZBurstDash_LP();
	void ZBurstDash_LPKey_Pressed();
	void ZBurstDash_LPOn_Hit();
	void ZBurstDash_LPOn_Play_Dash_Combatives();
	void ZBurstDash_LPOnAddInputX();
	void ZBurstDash_LPUpdate();
	void ZBurstDash_OT();
	void ZBurstDash_OTOn_Hit();
	void ZBurstDash_OTOn_Play_Dash_Combatives();
	void ZBurstDash_OTStop();
	void ZBurstDash_OTUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubZBurstDash_C">();
	}
	static class UBP_CharacterLocomotionSubZBurstDash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubZBurstDash_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubZBurstDash_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubZBurstDash_C");
static_assert(sizeof(UBP_CharacterLocomotionSubZBurstDash_C) == 0x0002D0, "Wrong size on UBP_CharacterLocomotionSubZBurstDash_C");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashStatus) == 0x0000C0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashStatus' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, AnimEventZBurstDashState) == 0x0000C1, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::AnimEventZBurstDashState' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, LocomotionSplineComponent) == 0x0000C8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::LocomotionSplineComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashMoveDistance) == 0x0000D0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashMoveDistance' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashRoute) == 0x0000D8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashRoute' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashBaseRotation) == 0x0000E0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashBaseRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashChaseTargetLocation) == 0x0000F8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashChaseTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashTargetRotation) == 0x000110, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashTargetRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashStartLocation) == 0x000128, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashStartLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashEndLocation) == 0x000140, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashEndLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashOldLocation) == 0x000158, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashOldLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashStartSplineTangent) == 0x000170, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashStartSplineTangent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashEndSplineTangent) == 0x000188, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashEndSplineTangent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashVelocity) == 0x0001A0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashVelocity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashMoveEndTimer) == 0x0001B8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashMoveEndTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashSplineCoodinateSpace) == 0x0001C0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashSplineCoodinateSpace' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ZBurstDashMoveInputValue) == 0x0001C8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::ZBurstDashMoveInputValue' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ______Kn__n__) == 0x0001E0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::______Kn__n__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _________) == 0x0001E8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _____TangentScale) == 0x0001F0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_____TangentScale' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________0) == 0x0001F8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _____B___) == 0x000210, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_____B___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ______________) == 0x000228, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::______________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __M_____Sw) == 0x000230, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__M_____Sw' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _____OTw____Sw) == 0x000238, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_____OTw____Sw' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________1__b_LNB_) == 0x000240, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________1__b_LNB_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, Debug____________) == 0x000248, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::Debug____________' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________________B_) == 0x000249, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________________B_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ___________Kn__n__) == 0x000250, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::___________Kn__n__' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _______________0) == 0x000258, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_______________0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________TangentScale) == 0x000260, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________TangentScale' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, _______________1) == 0x000268, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::_______________1' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________B___) == 0x000280, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________B___' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, __________OTw____Sw) == 0x000298, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::__________OTw____Sw' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, In_Action) == 0x0002A0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::In_Action' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, ____) == 0x0002A8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::____' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, SkipIN) == 0x0002A9, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::SkipIN' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, LPSectionTimer) == 0x0002B0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::LPSectionTimer' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, EnableLP0) == 0x0002B8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::EnableLP0' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, LP0n_pMinus_) == 0x0002C0, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::LP0n_pMinus_' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubZBurstDash_C, LP0LB_KMinus_) == 0x0002C8, "Member 'UBP_CharacterLocomotionSubZBurstDash_C::LP0LB_KMinus_' has a wrong offset!");

}

