#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IW_Ripple

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_IW_Ripple.BP_IW_Ripple_C
// 0x0060 (0x02F0 - 0x0290)
class ABP_IW_Ripple_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWindSimFieldMotorComponent*            WindSimFieldMotor;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RippleInterval;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Radius;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        VelocityBasePower;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        VelocityPowerAmplitude;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          KoratAttached;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AccSeconds;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KoratWindSpeedBase;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        KoratWindSpeedAmplitude;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseKoratWindSpeedParam;                            // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_IW_Ripple(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_IW_Ripple_C">();
	}
	static class ABP_IW_Ripple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_IW_Ripple_C>();
	}
};
static_assert(alignof(ABP_IW_Ripple_C) == 0x000008, "Wrong alignment on ABP_IW_Ripple_C");
static_assert(sizeof(ABP_IW_Ripple_C) == 0x0002F0, "Wrong size on ABP_IW_Ripple_C");
static_assert(offsetof(ABP_IW_Ripple_C, UberGraphFrame) == 0x000290, "Member 'ABP_IW_Ripple_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, WindSimFieldMotor) == 0x000298, "Member 'ABP_IW_Ripple_C::WindSimFieldMotor' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, Scene) == 0x0002A0, "Member 'ABP_IW_Ripple_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, RippleInterval) == 0x0002A8, "Member 'ABP_IW_Ripple_C::RippleInterval' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, Radius) == 0x0002B0, "Member 'ABP_IW_Ripple_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, VelocityBasePower) == 0x0002B8, "Member 'ABP_IW_Ripple_C::VelocityBasePower' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, VelocityPowerAmplitude) == 0x0002C0, "Member 'ABP_IW_Ripple_C::VelocityPowerAmplitude' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, KoratAttached) == 0x0002C8, "Member 'ABP_IW_Ripple_C::KoratAttached' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, AccSeconds) == 0x0002D0, "Member 'ABP_IW_Ripple_C::AccSeconds' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, KoratWindSpeedBase) == 0x0002D8, "Member 'ABP_IW_Ripple_C::KoratWindSpeedBase' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, KoratWindSpeedAmplitude) == 0x0002E0, "Member 'ABP_IW_Ripple_C::KoratWindSpeedAmplitude' has a wrong offset!");
static_assert(offsetof(ABP_IW_Ripple_C, UseKoratWindSpeedParam) == 0x0002E8, "Member 'ABP_IW_Ripple_C::UseKoratWindSpeedParam' has a wrong offset!");

}

