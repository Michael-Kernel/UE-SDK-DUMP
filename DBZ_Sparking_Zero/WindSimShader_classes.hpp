#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindSimShader

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "WindSimShader_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class WindSimShader.WindSimFieldActor
// 0x0008 (0x0298 - 0x0290)
class AWindSimFieldActor : public AActor
{
public:
	class UWindSimFieldComponent*                 FieldComponent;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldActor">();
	}
	static class AWindSimFieldActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindSimFieldActor>();
	}
};
static_assert(alignof(AWindSimFieldActor) == 0x000008, "Wrong alignment on AWindSimFieldActor");
static_assert(sizeof(AWindSimFieldActor) == 0x000298, "Wrong size on AWindSimFieldActor");
static_assert(offsetof(AWindSimFieldActor, FieldComponent) == 0x000290, "Member 'AWindSimFieldActor::FieldComponent' has a wrong offset!");

// Class WindSimShader.WindSimFieldComponent
// 0x0070 (0x05B0 - 0x0540)
class UWindSimFieldComponent final : public UPrimitiveComponent
{
public:
	class UTexture2D*                             DebugViewTexture;                                  // 0x0540(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTargetVolume*             WindField;                                         // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindFieldPixelWorldSize;                           // 0x0550(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindViscous;                                       // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoissonSteps;                                   // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindSimFieldShaderType                       ShaderType;                                        // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_575[0x3B];                                     // 0x0575(0x003B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddInputData(EWindSimFieldMotorType Type, const struct FVector& Location, const struct FVector& Vec, float Radius, float Power, bool Impulse, float Fade_rate);
	bool AddInputDataLocal(EWindSimFieldMotorType Type, const struct FVector& Pos, const struct FVector& Vec, float Radius, float Power, float Fade_rate);
	void Initialize();
	void Move(const struct FVector& TargetLocation);
	void ResetWindField();
	void SetActiveSimulation(bool bInActiveSimulation);
	void SetEnable(bool bEnable);
	void SetOutputType(int32 Type);
	void SetPoissonSteps(int32 Steps);
	void SetShaderType(EWindSimFieldShaderType Type);
	void SetTimeScale(float Scale);
	void SetWindViscous(float Viscous);

	void GetFieldDimension(struct FVector* Dimension) const;
	int32 GetPoissonSteps() const;
	EWindSimFieldShaderType GetShaderType() const;
	float GetTimeScale() const;
	float GetWindViscous() const;
	void GetWorldFieldSize(struct FVector* Size) const;
	bool IsActiveSimulation() const;
	bool IsEnable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldComponent">();
	}
	static class UWindSimFieldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindSimFieldComponent>();
	}
};
static_assert(alignof(UWindSimFieldComponent) == 0x000010, "Wrong alignment on UWindSimFieldComponent");
static_assert(sizeof(UWindSimFieldComponent) == 0x0005B0, "Wrong size on UWindSimFieldComponent");
static_assert(offsetof(UWindSimFieldComponent, DebugViewTexture) == 0x000540, "Member 'UWindSimFieldComponent::DebugViewTexture' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, WindField) == 0x000548, "Member 'UWindSimFieldComponent::WindField' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, WindFieldPixelWorldSize) == 0x000550, "Member 'UWindSimFieldComponent::WindFieldPixelWorldSize' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, TimeScale) == 0x000568, "Member 'UWindSimFieldComponent::TimeScale' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, WindViscous) == 0x00056C, "Member 'UWindSimFieldComponent::WindViscous' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, NumPoissonSteps) == 0x000570, "Member 'UWindSimFieldComponent::NumPoissonSteps' has a wrong offset!");
static_assert(offsetof(UWindSimFieldComponent, ShaderType) == 0x000574, "Member 'UWindSimFieldComponent::ShaderType' has a wrong offset!");

// Class WindSimShader.WindSimFieldManager
// 0x0008 (0x0298 - 0x0290)
class AWindSimFieldManager : public AActor
{
public:
	class UWindSimFieldManagerComponent*          ManagerComponent;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void EnableInputWindVelocityDebugDrawLine(bool bEnable);
	void ShowWindVelocityViewer(bool bInShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldManager">();
	}
	static class AWindSimFieldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindSimFieldManager>();
	}
};
static_assert(alignof(AWindSimFieldManager) == 0x000008, "Wrong alignment on AWindSimFieldManager");
static_assert(sizeof(AWindSimFieldManager) == 0x000298, "Wrong size on AWindSimFieldManager");
static_assert(offsetof(AWindSimFieldManager, ManagerComponent) == 0x000290, "Member 'AWindSimFieldManager::ManagerComponent' has a wrong offset!");

// Class WindSimShader.WindSimFieldManagerComponent
// 0x0078 (0x0118 - 0x00A0)
class UWindSimFieldManagerComponent final : public UActorComponent
{
public:
	class UWindSimFieldComponent*                 FieldComponent;                                    // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FieldActor;                                        // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationTimeInterval;                            // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationTimeScale;                               // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindViscous;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPoissonSteps;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindSimFieldShaderType                       ShaderType;                                        // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowedActor;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           FieldLocationParameterCollection;                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FieldLocationParameterName;                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           PlayerLocationParameterCollection;                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerLocationParameterName;                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerLocationOffset;                              // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddInputWindVelocity(EWindSimFieldMotorType InType, const struct FVector& InLocation, const struct FVector& InVector, float InRadius, float InPower, bool InImpulse);
	void SetupParameterCollectionInstanceForFieldLocaion(class UMaterialParameterCollection* Collection, class FName ParameterName);
	void SetupParameterCollectionInstanceForPlayerLocaion(class UMaterialParameterCollection* Collection, class FName ParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldManagerComponent">();
	}
	static class UWindSimFieldManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindSimFieldManagerComponent>();
	}
};
static_assert(alignof(UWindSimFieldManagerComponent) == 0x000008, "Wrong alignment on UWindSimFieldManagerComponent");
static_assert(sizeof(UWindSimFieldManagerComponent) == 0x000118, "Wrong size on UWindSimFieldManagerComponent");
static_assert(offsetof(UWindSimFieldManagerComponent, FieldComponent) == 0x0000A0, "Member 'UWindSimFieldManagerComponent::FieldComponent' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, FieldActor) == 0x0000A8, "Member 'UWindSimFieldManagerComponent::FieldActor' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, SimulationTimeInterval) == 0x0000B0, "Member 'UWindSimFieldManagerComponent::SimulationTimeInterval' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, SimulationTimeScale) == 0x0000B4, "Member 'UWindSimFieldManagerComponent::SimulationTimeScale' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, WindViscous) == 0x0000B8, "Member 'UWindSimFieldManagerComponent::WindViscous' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, NumPoissonSteps) == 0x0000BC, "Member 'UWindSimFieldManagerComponent::NumPoissonSteps' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, ShaderType) == 0x0000C0, "Member 'UWindSimFieldManagerComponent::ShaderType' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, FollowedActor) == 0x0000C8, "Member 'UWindSimFieldManagerComponent::FollowedActor' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, FieldLocationParameterCollection) == 0x0000D0, "Member 'UWindSimFieldManagerComponent::FieldLocationParameterCollection' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, FieldLocationParameterName) == 0x0000D8, "Member 'UWindSimFieldManagerComponent::FieldLocationParameterName' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, PlayerLocationParameterCollection) == 0x0000E0, "Member 'UWindSimFieldManagerComponent::PlayerLocationParameterCollection' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, PlayerLocationParameterName) == 0x0000E8, "Member 'UWindSimFieldManagerComponent::PlayerLocationParameterName' has a wrong offset!");
static_assert(offsetof(UWindSimFieldManagerComponent, PlayerLocationOffset) == 0x0000F0, "Member 'UWindSimFieldManagerComponent::PlayerLocationOffset' has a wrong offset!");

// Class WindSimShader.WindSimFieldMotor
// 0x0008 (0x0298 - 0x0290)
class AWindSimFieldMotor final : public AInfo
{
public:
	class UWindSimFieldMotorComponent*            MotorComponent;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldMotor">();
	}
	static class AWindSimFieldMotor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindSimFieldMotor>();
	}
};
static_assert(alignof(AWindSimFieldMotor) == 0x000008, "Wrong alignment on AWindSimFieldMotor");
static_assert(sizeof(AWindSimFieldMotor) == 0x000298, "Wrong size on AWindSimFieldMotor");
static_assert(offsetof(AWindSimFieldMotor, MotorComponent) == 0x000290, "Member 'AWindSimFieldMotor::MotorComponent' has a wrong offset!");

// Class WindSimShader.WindSimFieldMotorComponent
// 0x0070 (0x0310 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) UWindSimFieldMotorComponent : public USceneComponent
{
public:
	class UWindSimFieldManagerComponent*          ManagerComponent;                                  // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ManagerActor;                                      // 0x02A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveMotor;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindSimFieldMotorType                        Type;                                              // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUpVector;                                      // 0x02B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3[0x1];                                      // 0x02B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VectorLength;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDelayTime;                                     // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevLocation;                                      // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrevLocationEnable;                               // 0x02E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevVector;                                        // 0x02E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0300(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddInputWindVelocity(EWindSimFieldMotorType InType, const struct FVector& InLocation, const struct FVector& InVector, float InRadius, float InPower, bool InImpulse, bool InDebugDraw);
	void SetFadeOut(float InDelayTime, float InFadeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindSimFieldMotorComponent">();
	}
	static class UWindSimFieldMotorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindSimFieldMotorComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWindSimFieldMotorComponent) == 0x000010, "Wrong alignment on UWindSimFieldMotorComponent");
static_assert(sizeof(UWindSimFieldMotorComponent) == 0x000310, "Wrong size on UWindSimFieldMotorComponent");
static_assert(offsetof(UWindSimFieldMotorComponent, ManagerComponent) == 0x0002A0, "Member 'UWindSimFieldMotorComponent::ManagerComponent' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, ManagerActor) == 0x0002A8, "Member 'UWindSimFieldMotorComponent::ManagerActor' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, bActiveMotor) == 0x0002B0, "Member 'UWindSimFieldMotorComponent::bActiveMotor' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, Type) == 0x0002B1, "Member 'UWindSimFieldMotorComponent::Type' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, bUseUpVector) == 0x0002B2, "Member 'UWindSimFieldMotorComponent::bUseUpVector' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, VectorLength) == 0x0002B4, "Member 'UWindSimFieldMotorComponent::VectorLength' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, Radius) == 0x0002B8, "Member 'UWindSimFieldMotorComponent::Radius' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, Power) == 0x0002BC, "Member 'UWindSimFieldMotorComponent::Power' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, FadeDelayTime) == 0x0002C0, "Member 'UWindSimFieldMotorComponent::FadeDelayTime' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, FadeTime) == 0x0002C4, "Member 'UWindSimFieldMotorComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, PrevLocation) == 0x0002C8, "Member 'UWindSimFieldMotorComponent::PrevLocation' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, bPrevLocationEnable) == 0x0002E0, "Member 'UWindSimFieldMotorComponent::bPrevLocationEnable' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, PrevVector) == 0x0002E8, "Member 'UWindSimFieldMotorComponent::PrevVector' has a wrong offset!");
static_assert(offsetof(UWindSimFieldMotorComponent, bDebugDraw) == 0x000300, "Member 'UWindSimFieldMotorComponent::bDebugDraw' has a wrong offset!");

}

