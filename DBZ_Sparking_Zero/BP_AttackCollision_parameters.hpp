#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackCollision

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AttackCollision.BP_AttackCollision_C.ActorBeginOverlap
// 0x1A30 (0x1A30 - 0x0000)
struct BP_AttackCollision_C_ActorBeginOverlap final
{
public:
	class AActor*                                 OverlapActor_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              OffsetType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        AttackerBPCharacter;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        OverlapBPCharacter;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class ABP_AttackCollision_C*            Temp_object_Variable;                              // 0x0080(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ABP_AttackCollision_C*            Temp_object_Variable_1;                            // 0x0088(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOccurOffsetHitCollision_IsOccur;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              CallFunc_IsOccurOffsetHitCollision_OffsetType;     // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackSuccessAngle_ReturnValue;         // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSBulletActor*                         K2Node_DynamicCast_AsSSBullet_Actor;               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClashCombatives_ReturnValue;              // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndSetGroupHitFlag_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDestructionObject_ReturnValue;          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInvincibleAgainstCombatives_ReturnValue; // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterHitCollision_C> K2Node_DynamicCast_AsBPI_Character_Hit_Collision;  // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalcHitTransform_HitTransform;            // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratGaveDamageParameter              K2Node_MakeStruct_KoratGaveDamageParameter;        // 0x0150(0x0B50)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0CA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA1[0x7];                                      // 0x0CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_AttackCollision_C*            Temp_object_Variable_2;                            // 0x0CA8(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOccurOffsetHitCharacter_IsOccur;        // 0x0CB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0CB1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0CB2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB3[0x5];                                      // 0x0CB3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterHitCollision_C> K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1; // 0x0CB8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0CC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC9[0x7];                                      // 0x0CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_1;               // 0x0CD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0CD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD9[0x3];                                      // 0x0CD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0CDC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0CE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE4[0x4];                                      // 0x0CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AttackCollision_C*                  K2Node_DynamicCast_AsBP_Attack_Collision;          // 0x0CE8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0CF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0CF1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF2[0x6];                                      // 0x0CF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_2;               // 0x0CF8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0D00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0D01(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0D02(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D03[0xD];                                      // 0x0D03(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0D10(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0D70(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x0DD0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0E30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E31[0x7];                                      // 0x0E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_3;               // 0x0E38(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0E40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E41[0x7];                                      // 0x0E41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterHitCollision_C> K2Node_DynamicCast_AsBPI_Character_Hit_Collision_2; // 0x0E48(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0E58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInvincibleAgainstCombatives_ReturnValue_1; // 0x0E59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5A[0x6];                                      // 0x0E5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratGaveDamageParameter              K2Node_MakeStruct_KoratGaveDamageParameter_1;      // 0x0E60(0x0B50)()
	struct FTransform                             CallFunc_CalcHitTransform_HitTransform_1;          // 0x19B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x1A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x1A14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x1A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x1A19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorBeingDestroyed_ReturnValue;        // 0x1A1A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1B[0x5];                                     // 0x1A1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_4;               // 0x1A20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x1A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x1A29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_ActorBeginOverlap) == 0x000010, "Wrong alignment on BP_AttackCollision_C_ActorBeginOverlap");
static_assert(sizeof(BP_AttackCollision_C_ActorBeginOverlap) == 0x001A30, "Wrong size on BP_AttackCollision_C_ActorBeginOverlap");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, OverlapActor_0) == 0x000000, "Member 'BP_AttackCollision_C_ActorBeginOverlap::OverlapActor_0' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, OffsetType) == 0x000008, "Member 'BP_AttackCollision_C_ActorBeginOverlap::OffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, AttackerBPCharacter) == 0x000010, "Member 'BP_AttackCollision_C_ActorBeginOverlap::AttackerBPCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, OverlapBPCharacter) == 0x000018, "Member 'BP_AttackCollision_C_ActorBeginOverlap::OverlapBPCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, Transform) == 0x000020, "Member 'BP_AttackCollision_C_ActorBeginOverlap::Transform' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, Temp_object_Variable) == 0x000080, "Member 'BP_AttackCollision_C_ActorBeginOverlap::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, Temp_object_Variable_1) == 0x000088, "Member 'BP_AttackCollision_C_ActorBeginOverlap::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsOccurOffsetHitCollision_IsOccur) == 0x000090, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsOccurOffsetHitCollision_IsOccur' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsOccurOffsetHitCollision_OffsetType) == 0x000091, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsOccurOffsetHitCollision_OffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsAttackSuccessAngle_ReturnValue) == 0x000092, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsAttackSuccessAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000093, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000094, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsSSBullet_Actor) == 0x000098, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsSSBullet_Actor' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A1, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_ClashCombatives_ReturnValue) == 0x0000A2, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_ClashCombatives_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000A3, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_GetObjectName_ReturnValue) == 0x0000A8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Conv_StringToName_ReturnValue) == 0x0000B8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_CheckAndSetGroupHitFlag_ReturnValue) == 0x0000C0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_CheckAndSetGroupHitFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsDestructionObject_ReturnValue) == 0x0000C1, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsDestructionObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_CheckInvincibleAgainstCombatives_ReturnValue) == 0x0000C2, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_CheckInvincibleAgainstCombatives_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Character) == 0x0000C8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBPI_Character_Hit_Collision) == 0x0000D8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBPI_Character_Hit_Collision' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_2) == 0x0000E8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_CalcHitTransform_HitTransform) == 0x0000F0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_CalcHitTransform_HitTransform' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_MakeStruct_KoratGaveDamageParameter) == 0x000150, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_MakeStruct_KoratGaveDamageParameter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000CA0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, Temp_object_Variable_2) == 0x000CA8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsOccurOffsetHitCharacter_IsOccur) == 0x000CB0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsOccurOffsetHitCharacter_IsOccur' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Not_PreBool_ReturnValue_2) == 0x000CB1, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_BooleanOR_ReturnValue) == 0x000CB2, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1) == 0x000CB8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_3) == 0x000CC8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Character_1) == 0x000CD0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Character_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_4) == 0x000CD8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Array_Add_ReturnValue) == 0x000CDC, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Array_Find_ReturnValue) == 0x000CE0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Attack_Collision) == 0x000CE8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Attack_Collision' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_5) == 0x000CF0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000CF1, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Character_2) == 0x000CF8, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Character_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_6) == 0x000D00, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_BooleanOR_ReturnValue_1) == 0x000D01, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Not_PreBool_ReturnValue_3) == 0x000D02, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000D10, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000D70, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x000DD0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_SwitchEnum_CmpSuccess) == 0x000E30, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Character_3) == 0x000E38, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Character_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_7) == 0x000E40, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBPI_Character_Hit_Collision_2) == 0x000E48, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBPI_Character_Hit_Collision_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_8) == 0x000E58, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_CheckInvincibleAgainstCombatives_ReturnValue_1) == 0x000E59, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_CheckInvincibleAgainstCombatives_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_MakeStruct_KoratGaveDamageParameter_1) == 0x000E60, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_MakeStruct_KoratGaveDamageParameter_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_CalcHitTransform_HitTransform_1) == 0x0019B0, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_CalcHitTransform_HitTransform_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Array_Add_ReturnValue_1) == 0x001A10, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Array_Find_ReturnValue_1) == 0x001A14, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x001A18, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x001A19, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_IsActorBeingDestroyed_ReturnValue) == 0x001A1A, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_IsActorBeingDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_AsBP_Character_4) == 0x001A20, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_AsBP_Character_4' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, K2Node_DynamicCast_bSuccess_9) == 0x001A28, "Member 'BP_AttackCollision_C_ActorBeginOverlap::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ActorBeginOverlap, CallFunc_Not_PreBool_ReturnValue_4) == 0x001A29, "Member 'BP_AttackCollision_C_ActorBeginOverlap::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.CalcHitTransform
// 0x0260 (0x0260 - 0x0000)
struct BP_AttackCollision_C_CalcHitTransform final
{
public:
	struct FTransform                             HitTransform_0;                                    // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0060(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_CalculatCrossPointOnPhysicsAsset_OutTransform; // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_CalculatCrossPointOnPhysicsAsset_OutBoneName; // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalculatCrossPointOnPhysicsAsset_ReturnValue; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation;               // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_TraceNearPhysicalAssetsCollition_OutHitTransform; // 0x01E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_TraceNearPhysicalAssetsCollition_OutHitBoneName; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceNearPhysicalAssetsCollition_ReturnValue; // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TraceNearPhysicalAssetsCollition_InRadius_ImplicitCast; // 0x0258(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_CalcHitTransform) == 0x000010, "Wrong alignment on BP_AttackCollision_C_CalcHitTransform");
static_assert(sizeof(BP_AttackCollision_C_CalcHitTransform) == 0x000260, "Wrong size on BP_AttackCollision_C_CalcHitTransform");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, HitTransform_0) == 0x000000, "Member 'BP_AttackCollision_C_CalcHitTransform::HitTransform_0' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, Transform) == 0x000060, "Member 'BP_AttackCollision_C_CalcHitTransform::Transform' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_AttackCollision_C_CalcHitTransform::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_CalculatCrossPointOnPhysicsAsset_OutTransform) == 0x0000E0, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_CalculatCrossPointOnPhysicsAsset_OutTransform' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_CalculatCrossPointOnPhysicsAsset_OutBoneName) == 0x000140, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_CalculatCrossPointOnPhysicsAsset_OutBoneName' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_CalculatCrossPointOnPhysicsAsset_ReturnValue) == 0x000148, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_CalculatCrossPointOnPhysicsAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, K2Node_DynamicCast_AsBP_Character) == 0x000150, "Member 'BP_AttackCollision_C_CalcHitTransform::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_AttackCollision_C_CalcHitTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_GetAttackRotation_rotation) == 0x000160, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_GetAttackRotation_rotation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_TraceNearPhysicalAssetsCollition_OutHitTransform) == 0x0001E0, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_TraceNearPhysicalAssetsCollition_OutHitTransform' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_TraceNearPhysicalAssetsCollition_OutHitBoneName) == 0x000240, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_TraceNearPhysicalAssetsCollition_OutHitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_TraceNearPhysicalAssetsCollition_ReturnValue) == 0x000248, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_TraceNearPhysicalAssetsCollition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000250, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CalcHitTransform, CallFunc_TraceNearPhysicalAssetsCollition_InRadius_ImplicitCast) == 0x000258, "Member 'BP_AttackCollision_C_CalcHitTransform::CallFunc_TraceNearPhysicalAssetsCollition_InRadius_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.CreatedCollision
// 0x0098 (0x0098 - 0x0000)
struct BP_AttackCollision_C_CreatedCollision final
{
public:
	class ASSCharacter*                           InCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratAttackCollisionParameter         CollisionParameter_0;                              // 0x0008(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FKoratActionDataList                   CombativesSetData_0;                               // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FKoratAdditionalDamageInfo             AdditionalDamageInfo;                              // 0x0078(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	EKoratActionAttackType                        InAttackType;                                      // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 NewLocalVar_0;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_CreatedCollision) == 0x000008, "Wrong alignment on BP_AttackCollision_C_CreatedCollision");
static_assert(sizeof(BP_AttackCollision_C_CreatedCollision) == 0x000098, "Wrong size on BP_AttackCollision_C_CreatedCollision");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, InCharacter) == 0x000000, "Member 'BP_AttackCollision_C_CreatedCollision::InCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, CollisionParameter_0) == 0x000008, "Member 'BP_AttackCollision_C_CreatedCollision::CollisionParameter_0' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, CombativesSetData_0) == 0x000070, "Member 'BP_AttackCollision_C_CreatedCollision::CombativesSetData_0' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, AdditionalDamageInfo) == 0x000078, "Member 'BP_AttackCollision_C_CreatedCollision::AdditionalDamageInfo' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, InAttackType) == 0x000084, "Member 'BP_AttackCollision_C_CreatedCollision::InAttackType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, NewLocalVar_0) == 0x000088, "Member 'BP_AttackCollision_C_CreatedCollision::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_CreatedCollision, K2Node_SwitchEnum_CmpSuccess) == 0x000090, "Member 'BP_AttackCollision_C_CreatedCollision::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.DeleteCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_AttackCollision_C_DeleteCollision final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_DeleteCollision) == 0x000001, "Wrong alignment on BP_AttackCollision_C_DeleteCollision");
static_assert(sizeof(BP_AttackCollision_C_DeleteCollision) == 0x000001, "Wrong size on BP_AttackCollision_C_DeleteCollision");
static_assert(offsetof(BP_AttackCollision_C_DeleteCollision, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_AttackCollision_C_DeleteCollision::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.DrawBoneCapsuleDebug
// 0x0048 (0x0048 - 0x0000)
struct BP_AttackCollision_C_DrawBoneCapsuleDebug final
{
public:
	double                                        CallFunc_GetDrawAttackCollisionTime_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_DrawBoneCapsuleDebug) == 0x000008, "Wrong alignment on BP_AttackCollision_C_DrawBoneCapsuleDebug");
static_assert(sizeof(BP_AttackCollision_C_DrawBoneCapsuleDebug) == 0x000048, "Wrong size on BP_AttackCollision_C_DrawBoneCapsuleDebug");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, CallFunc_GetDrawAttackCollisionTime_ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::CallFunc_GetDrawAttackCollisionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, K2Node_MakeArray_Array_1) == 0x000020, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x000030, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x000040, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoneCapsuleDebug, CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast) == 0x000044, "Member 'BP_AttackCollision_C_DrawBoneCapsuleDebug::CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.DrawBoxDebug
// 0x0068 (0x0068 - 0x0000)
struct BP_AttackCollision_C_DrawBoxDebug final
{
public:
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetDrawAttackCollisionTime_ReturnValue;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_BoxTraceMultiForObjects_OutHits;          // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceMultiForObjects_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BoxTraceMultiForObjects_DrawTime_ImplicitCast; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_DrawBoxDebug) == 0x000008, "Wrong alignment on BP_AttackCollision_C_DrawBoxDebug");
static_assert(sizeof(BP_AttackCollision_C_DrawBoxDebug) == 0x000068, "Wrong size on BP_AttackCollision_C_DrawBoxDebug");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_GetDrawAttackCollisionTime_ReturnValue) == 0x000018, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_GetDrawAttackCollisionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, K2Node_MakeArray_Array) == 0x000030, "Member 'BP_AttackCollision_C_DrawBoxDebug::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, K2Node_MakeArray_Array_1) == 0x000040, "Member 'BP_AttackCollision_C_DrawBoxDebug::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_BoxTraceMultiForObjects_OutHits) == 0x000050, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_BoxTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_BoxTraceMultiForObjects_ReturnValue) == 0x000060, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_BoxTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawBoxDebug, CallFunc_BoxTraceMultiForObjects_DrawTime_ImplicitCast) == 0x000064, "Member 'BP_AttackCollision_C_DrawBoxDebug::CallFunc_BoxTraceMultiForObjects_DrawTime_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.DrawCapsuleDebug
// 0x0100 (0x0100 - 0x0000)
struct BP_AttackCollision_C_DrawCapsuleDebug final
{
public:
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDrawAttackCollisionTime_ReturnValue;   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x00D0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_DrawCapsuleDebug) == 0x000008, "Wrong alignment on BP_AttackCollision_C_DrawCapsuleDebug");
static_assert(sizeof(BP_AttackCollision_C_DrawCapsuleDebug) == 0x000100, "Wrong size on BP_AttackCollision_C_DrawCapsuleDebug");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000018, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_ComposeRotators_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000038, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_GetDrawAttackCollisionTime_ReturnValue) == 0x000070, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_GetDrawAttackCollisionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Add_VectorVector_ReturnValue) == 0x000090, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x0000A8, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, K2Node_MakeArray_Array) == 0x0000B0, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, K2Node_MakeArray_Array_1) == 0x0000C0, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x0000D0, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0000E0, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0000E8, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0000F0, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawCapsuleDebug, CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast) == 0x0000F8, "Member 'BP_AttackCollision_C_DrawCapsuleDebug::CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.DrawSphereDebug
// 0x0048 (0x0048 - 0x0000)
struct BP_AttackCollision_C_DrawSphereDebug final
{
public:
	double                                        CallFunc_GetDrawAttackCollisionTime_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0020(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_DrawSphereDebug) == 0x000008, "Wrong alignment on BP_AttackCollision_C_DrawSphereDebug");
static_assert(sizeof(BP_AttackCollision_C_DrawSphereDebug) == 0x000048, "Wrong size on BP_AttackCollision_C_DrawSphereDebug");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, CallFunc_GetDrawAttackCollisionTime_ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_DrawSphereDebug::CallFunc_GetDrawAttackCollisionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_DrawSphereDebug::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_AttackCollision_C_DrawSphereDebug::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, K2Node_MakeArray_Array_1) == 0x000020, "Member 'BP_AttackCollision_C_DrawSphereDebug::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x000030, "Member 'BP_AttackCollision_C_DrawSphereDebug::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x000040, "Member 'BP_AttackCollision_C_DrawSphereDebug::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_DrawSphereDebug, CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast) == 0x000044, "Member 'BP_AttackCollision_C_DrawSphereDebug::CallFunc_SphereTraceMultiForObjects_DrawTime_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.EnableCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_AttackCollision_C_EnableCollision final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_EnableCollision) == 0x000001, "Wrong alignment on BP_AttackCollision_C_EnableCollision");
static_assert(sizeof(BP_AttackCollision_C_EnableCollision) == 0x000001, "Wrong size on BP_AttackCollision_C_EnableCollision");
static_assert(offsetof(BP_AttackCollision_C_EnableCollision, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_AttackCollision_C_EnableCollision::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ExecAddHitAttackCollisionData
// 0x0B50 (0x0B50 - 0x0000)
struct BP_AttackCollision_C_ExecAddHitAttackCollisionData final
{
public:
	struct FKoratGaveDamageParameter              InDamageParam;                                     // 0x0000(0x0B50)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_AttackCollision_C_ExecAddHitAttackCollisionData) == 0x000010, "Wrong alignment on BP_AttackCollision_C_ExecAddHitAttackCollisionData");
static_assert(sizeof(BP_AttackCollision_C_ExecAddHitAttackCollisionData) == 0x000B50, "Wrong size on BP_AttackCollision_C_ExecAddHitAttackCollisionData");
static_assert(offsetof(BP_AttackCollision_C_ExecAddHitAttackCollisionData, InDamageParam) == 0x000000, "Member 'BP_AttackCollision_C_ExecAddHitAttackCollisionData::InDamageParam' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ExecOccurOffset
// 0x0B40 (0x0B40 - 0x0000)
struct BP_AttackCollision_C_ExecOccurOffset final
{
public:
	class ASSCharacter*                           InAttacker;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           InOpponentOffsetCharacter;                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   InAction;                                          // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              InOffsetType;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InOffsetLocation;                                  // 0x0020(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratReceivedDamageParameter          InDamageParam;                                     // 0x0080(0x0AC0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_AttackCollision_C_ExecOccurOffset) == 0x000010, "Wrong alignment on BP_AttackCollision_C_ExecOccurOffset");
static_assert(sizeof(BP_AttackCollision_C_ExecOccurOffset) == 0x000B40, "Wrong size on BP_AttackCollision_C_ExecOccurOffset");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InAttacker) == 0x000000, "Member 'BP_AttackCollision_C_ExecOccurOffset::InAttacker' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InOpponentOffsetCharacter) == 0x000008, "Member 'BP_AttackCollision_C_ExecOccurOffset::InOpponentOffsetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InAction) == 0x000010, "Member 'BP_AttackCollision_C_ExecOccurOffset::InAction' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InOffsetType) == 0x000018, "Member 'BP_AttackCollision_C_ExecOccurOffset::InOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InOffsetLocation) == 0x000020, "Member 'BP_AttackCollision_C_ExecOccurOffset::InOffsetLocation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecOccurOffset, InDamageParam) == 0x000080, "Member 'BP_AttackCollision_C_ExecOccurOffset::InDamageParam' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ExecSetHitBoneLocation
// 0x0008 (0x0008 - 0x0000)
struct BP_AttackCollision_C_ExecSetHitBoneLocation final
{
public:
	class ASSCharacter*                           OverlapCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_ExecSetHitBoneLocation) == 0x000008, "Wrong alignment on BP_AttackCollision_C_ExecSetHitBoneLocation");
static_assert(sizeof(BP_AttackCollision_C_ExecSetHitBoneLocation) == 0x000008, "Wrong size on BP_AttackCollision_C_ExecSetHitBoneLocation");
static_assert(offsetof(BP_AttackCollision_C_ExecSetHitBoneLocation, OverlapCharacter) == 0x000000, "Member 'BP_AttackCollision_C_ExecSetHitBoneLocation::OverlapCharacter' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ExecuteUbergraph_BP_AttackCollision
// 0x17B0 (0x17B0 - 0x0000)
struct BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_Event_OverlapCharacter;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratAttackCollisionParameter         K2Node_Event_InCollisionParameter;                 // 0x0030(0x0068)(ConstParm, NoDestructor)
	struct FKoratActionDataList                   K2Node_Event_InAction_1;                           // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratAdditionalDamageInfo             K2Node_Event_InAdditionalDamageInfo;               // 0x00A0(0x000C)(ConstParm, NoDestructor)
	EKoratActionAttackType                        K2Node_Event_InAttackType;                         // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSBattleLevelScriptActor*              CallFunc_GetSSBattleLevelScriptActor_ReturnValue;  // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratGaveDamageParameter              K2Node_Event_InDamageParam_1;                      // 0x00C0(0x0B50)(ConstParm)
	class ASSCharacter*                           K2Node_Event_InAttacker;                           // 0x0C10(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_Event_InOpponentOffsetCharacter;            // 0x0C18(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   K2Node_Event_InAction;                             // 0x0C20(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              K2Node_Event_InOffsetType;                         // 0x0C28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C29[0x7];                                      // 0x0C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_InOffsetLocation;                     // 0x0C30(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKoratReceivedDamageParameter          K2Node_Event_InDamageParam;                        // 0x0C90(0x0AC0)(ConstParm)
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character_1;               // 0x1750(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x1758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1759[0x7];                                     // 0x1759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_AttackCollision_C*            Temp_object_Variable;                              // 0x1760(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharacterHitCollision_C> K2Node_DynamicCast_AsBPI_Character_Hit_Collision;  // 0x1768(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x1778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1779[0x7];                                     // 0x1779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterHitCollision_C> K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1; // 0x1780(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x1790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1791[0x3];                                     // 0x1791(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOptimizeMode_ReturnValue;              // 0x1794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class ABP_AttackCollision_C*            Temp_object_Variable_1;                            // 0x1798(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x17A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision) == 0x000010, "Wrong alignment on BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision");
static_assert(sizeof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision) == 0x0017B0, "Wrong size on BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, EntryPoint) == 0x000000, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_OverlapCharacter) == 0x000008, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_OverlapCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_AsBP_Character) == 0x000018, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_OtherActor) == 0x000028, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InCollisionParameter) == 0x000030, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InCollisionParameter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InAction_1) == 0x000098, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InAction_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InAdditionalDamageInfo) == 0x0000A0, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InAdditionalDamageInfo' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InAttackType) == 0x0000AC, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InAttackType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, CallFunc_GetSSBattleLevelScriptActor_ReturnValue) == 0x0000B0, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::CallFunc_GetSSBattleLevelScriptActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InDamageParam_1) == 0x0000C0, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InDamageParam_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InAttacker) == 0x000C10, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InAttacker' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InOpponentOffsetCharacter) == 0x000C18, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InOpponentOffsetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InAction) == 0x000C20, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InAction' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InOffsetType) == 0x000C28, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InOffsetLocation) == 0x000C30, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InOffsetLocation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_Event_InDamageParam) == 0x000C90, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_Event_InDamageParam' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_AsBP_Character_1) == 0x001750, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_AsBP_Character_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_bSuccess_1) == 0x001758, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, Temp_object_Variable) == 0x001760, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_AsBPI_Character_Hit_Collision) == 0x001768, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_AsBPI_Character_Hit_Collision' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_bSuccess_2) == 0x001778, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1) == 0x001780, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_AsBPI_Character_Hit_Collision_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, K2Node_DynamicCast_bSuccess_3) == 0x001790, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, CallFunc_GetOptimizeMode_ReturnValue) == 0x001794, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::CallFunc_GetOptimizeMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, Temp_object_Variable_1) == 0x001798, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0017A0, "Member 'BP_AttackCollision_C_ExecuteUbergraph_BP_AttackCollision::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.GetAttackRotation
// 0x0048 (0x0048 - 0x0000)
struct BP_AttackCollision_C_GetAttackRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_OutRotation;            // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AttackCollision_C_GetAttackRotation) == 0x000008, "Wrong alignment on BP_AttackCollision_C_GetAttackRotation");
static_assert(sizeof(BP_AttackCollision_C_GetAttackRotation) == 0x000048, "Wrong size on BP_AttackCollision_C_GetAttackRotation");
static_assert(offsetof(BP_AttackCollision_C_GetAttackRotation, Rotation) == 0x000000, "Member 'BP_AttackCollision_C_GetAttackRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetAttackRotation, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_AttackCollision_C_GetAttackRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetAttackRotation, K2Node_DynamicCast_AsBP_Character) == 0x000020, "Member 'BP_AttackCollision_C_GetAttackRotation::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetAttackRotation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AttackCollision_C_GetAttackRotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetAttackRotation, CallFunc_GetAttackRotation_OutRotation) == 0x000030, "Member 'BP_AttackCollision_C_GetAttackRotation::CallFunc_GetAttackRotation_OutRotation' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawAttackCollisionTime
// 0x0038 (0x0038 - 0x0000)
struct BP_AttackCollision_C_GetDrawAttackCollisionTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawAttackCollisionTime_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue_1;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawAttackCollisionTime_ReturnValue_1; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast_1;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_GetDrawAttackCollisionTime) == 0x000008, "Wrong alignment on BP_AttackCollision_C_GetDrawAttackCollisionTime");
static_assert(sizeof(BP_AttackCollision_C_GetDrawAttackCollisionTime) == 0x000038, "Wrong size on BP_AttackCollision_C_GetDrawAttackCollisionTime");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, K2Node_DynamicCast_AsSSCharacter) == 0x000010, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, CallFunc_GetDrawAttackCollisionTime_ReturnValue) == 0x00001C, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::CallFunc_GetDrawAttackCollisionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, CallFunc_IsDrawAttackCollision_ReturnValue_1) == 0x000020, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::CallFunc_IsDrawAttackCollision_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, CallFunc_GetDrawAttackCollisionTime_ReturnValue_1) == 0x000024, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::CallFunc_GetDrawAttackCollisionTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000028, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawAttackCollisionTime, K2Node_FunctionResult_ReturnValue_ImplicitCast_1) == 0x000030, "Member 'BP_AttackCollision_C_GetDrawAttackCollisionTime::K2Node_FunctionResult_ReturnValue_ImplicitCast_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawHitAreaTime
// 0x0038 (0x0038 - 0x0000)
struct BP_AttackCollision_C_GetDrawHitAreaTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitArea_ReturnValue;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawHitAreaTime_ReturnValue;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitArea_ReturnValue_1;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawHitAreaTime_ReturnValue_1;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast_1;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_GetDrawHitAreaTime) == 0x000008, "Wrong alignment on BP_AttackCollision_C_GetDrawHitAreaTime");
static_assert(sizeof(BP_AttackCollision_C_GetDrawHitAreaTime) == 0x000038, "Wrong size on BP_AttackCollision_C_GetDrawHitAreaTime");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, CallFunc_IsDrawHitArea_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::CallFunc_IsDrawHitArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, K2Node_DynamicCast_AsSSCharacter) == 0x000010, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, CallFunc_GetDrawHitAreaTime_ReturnValue) == 0x00001C, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::CallFunc_GetDrawHitAreaTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, CallFunc_IsDrawHitArea_ReturnValue_1) == 0x000020, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::CallFunc_IsDrawHitArea_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, CallFunc_GetDrawHitAreaTime_ReturnValue_1) == 0x000024, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::CallFunc_GetDrawHitAreaTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000028, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitAreaTime, K2Node_FunctionResult_ReturnValue_ImplicitCast_1) == 0x000030, "Member 'BP_AttackCollision_C_GetDrawHitAreaTime::K2Node_FunctionResult_ReturnValue_ImplicitCast_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.GetDrawHitPositionTime
// 0x0038 (0x0038 - 0x0000)
struct BP_AttackCollision_C_GetDrawHitPositionTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitPosition_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawHitPositionTime_ReturnValue;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitPosition_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDrawHitPositionTime_ReturnValue_1;     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast_1;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_GetDrawHitPositionTime) == 0x000008, "Wrong alignment on BP_AttackCollision_C_GetDrawHitPositionTime");
static_assert(sizeof(BP_AttackCollision_C_GetDrawHitPositionTime) == 0x000038, "Wrong size on BP_AttackCollision_C_GetDrawHitPositionTime");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, CallFunc_IsDrawHitPosition_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::CallFunc_IsDrawHitPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, K2Node_DynamicCast_AsSSCharacter) == 0x000010, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, CallFunc_GetDrawHitPositionTime_ReturnValue) == 0x00001C, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::CallFunc_GetDrawHitPositionTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, CallFunc_IsDrawHitPosition_ReturnValue_1) == 0x000020, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::CallFunc_IsDrawHitPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, CallFunc_GetDrawHitPositionTime_ReturnValue_1) == 0x000024, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::CallFunc_GetDrawHitPositionTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000028, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_GetDrawHitPositionTime, K2Node_FunctionResult_ReturnValue_ImplicitCast_1) == 0x000030, "Member 'BP_AttackCollision_C_GetDrawHitPositionTime::K2Node_FunctionResult_ReturnValue_ImplicitCast_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawAttackCollision
// 0x0018 (0x0018 - 0x0000)
struct BP_AttackCollision_C_IsDrawAttackCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawAttackCollision_ReturnValue_1;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_IsDrawAttackCollision) == 0x000008, "Wrong alignment on BP_AttackCollision_C_IsDrawAttackCollision");
static_assert(sizeof(BP_AttackCollision_C_IsDrawAttackCollision) == 0x000018, "Wrong size on BP_AttackCollision_C_IsDrawAttackCollision");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, K2Node_DynamicCast_AsSSCharacter) == 0x000008, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, CallFunc_IsDrawAttackCollision_ReturnValue) == 0x000011, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::CallFunc_IsDrawAttackCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawAttackCollision, CallFunc_IsDrawAttackCollision_ReturnValue_1) == 0x000012, "Member 'BP_AttackCollision_C_IsDrawAttackCollision::CallFunc_IsDrawAttackCollision_ReturnValue_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawHitArea
// 0x0018 (0x0018 - 0x0000)
struct BP_AttackCollision_C_IsDrawHitArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitArea_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitArea_ReturnValue_1;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_IsDrawHitArea) == 0x000008, "Wrong alignment on BP_AttackCollision_C_IsDrawHitArea");
static_assert(sizeof(BP_AttackCollision_C_IsDrawHitArea) == 0x000018, "Wrong size on BP_AttackCollision_C_IsDrawHitArea");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitArea, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_IsDrawHitArea::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitArea, CallFunc_IsDrawHitArea_ReturnValue) == 0x000001, "Member 'BP_AttackCollision_C_IsDrawHitArea::CallFunc_IsDrawHitArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitArea, K2Node_DynamicCast_AsSSCharacter) == 0x000008, "Member 'BP_AttackCollision_C_IsDrawHitArea::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitArea, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AttackCollision_C_IsDrawHitArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitArea, CallFunc_IsDrawHitArea_ReturnValue_1) == 0x000011, "Member 'BP_AttackCollision_C_IsDrawHitArea::CallFunc_IsDrawHitArea_ReturnValue_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.IsDrawHitPosition
// 0x0018 (0x0018 - 0x0000)
struct BP_AttackCollision_C_IsDrawHitPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitPosition_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrawHitPosition_ReturnValue_1;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_IsDrawHitPosition) == 0x000008, "Wrong alignment on BP_AttackCollision_C_IsDrawHitPosition");
static_assert(sizeof(BP_AttackCollision_C_IsDrawHitPosition) == 0x000018, "Wrong size on BP_AttackCollision_C_IsDrawHitPosition");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitPosition, ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_IsDrawHitPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitPosition, CallFunc_IsDrawHitPosition_ReturnValue) == 0x000001, "Member 'BP_AttackCollision_C_IsDrawHitPosition::CallFunc_IsDrawHitPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitPosition, K2Node_DynamicCast_AsSSCharacter) == 0x000008, "Member 'BP_AttackCollision_C_IsDrawHitPosition::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitPosition, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AttackCollision_C_IsDrawHitPosition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsDrawHitPosition, CallFunc_IsDrawHitPosition_ReturnValue_1) == 0x000011, "Member 'BP_AttackCollision_C_IsDrawHitPosition::CallFunc_IsDrawHitPosition_ReturnValue_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.IsOccurOffsetHitCharacter
// 0x0040 (0x0040 - 0x0000)
struct BP_AttackCollision_C_IsOccurOffsetHitCharacter final
{
public:
	class ABP_Character_C*                        InAttackerCharacter;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        InOverlapCharacter;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOccur;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              OverlapOffsetType;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              AttackerOffsetType;                                // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           OverlapCharacter;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue_1;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeNow_IsNear;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackSuccessAngle_ReturnValue;         // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue; // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue; // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_IsOccurOffsetHitCharacter) == 0x000008, "Wrong alignment on BP_AttackCollision_C_IsOccurOffsetHitCharacter");
static_assert(sizeof(BP_AttackCollision_C_IsOccurOffsetHitCharacter) == 0x000040, "Wrong size on BP_AttackCollision_C_IsOccurOffsetHitCharacter");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, InAttackerCharacter) == 0x000000, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::InAttackerCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, InOverlapCharacter) == 0x000008, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::InOverlapCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, IsOccur) == 0x000010, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::IsOccur' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, OverlapOffsetType) == 0x000011, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::OverlapOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, AttackerOffsetType) == 0x000012, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::AttackerOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, OverlapCharacter) == 0x000018, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::OverlapCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_IsGiantChara_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_IsGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_IsGiantChara_ReturnValue_1) == 0x000021, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_IsGiantChara_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000028, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_IsNearRangeNow_IsNear) == 0x00003A, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_IsNearRangeNow_IsNear' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_IsAttackSuccessAngle_ReturnValue) == 0x00003B, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_IsAttackSuccessAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue) == 0x00003C, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue) == 0x00003D, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003E, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCharacter, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00003F, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCharacter::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.IsOccurOffsetHitCollision
// 0x0038 (0x0038 - 0x0000)
struct BP_AttackCollision_C_IsOccurOffsetHitCollision final
{
public:
	class ASSCharacter*                           InAttackerCharacter;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        InOverlapCharacter;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOccur;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              OffsetType;                                        // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              OverlapOffsetType;                                 // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              AttackerOffsetType;                                // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue_1;               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharacterLocomotion_C> K2Node_DynamicCast_AsBPI_Character_Locomotion;     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearRangeNow_IsNear;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackSuccessAngle_ReturnValue;         // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAttackSuccessAngle_ReturnValue_1;       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue; // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratOffsetType                              CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue; // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_IsOccurOffsetHitCollision) == 0x000008, "Wrong alignment on BP_AttackCollision_C_IsOccurOffsetHitCollision");
static_assert(sizeof(BP_AttackCollision_C_IsOccurOffsetHitCollision) == 0x000038, "Wrong size on BP_AttackCollision_C_IsOccurOffsetHitCollision");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, InAttackerCharacter) == 0x000000, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::InAttackerCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, InOverlapCharacter) == 0x000008, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::InOverlapCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, IsOccur) == 0x000010, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::IsOccur' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, OffsetType) == 0x000011, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::OffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, OverlapOffsetType) == 0x000012, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::OverlapOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, AttackerOffsetType) == 0x000013, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::AttackerOffsetType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_IsGiantChara_ReturnValue) == 0x000014, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_IsGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_IsGiantChara_ReturnValue_1) == 0x000015, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_IsGiantChara_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, K2Node_DynamicCast_AsBPI_Character_Locomotion) == 0x000018, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::K2Node_DynamicCast_AsBPI_Character_Locomotion' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_IsNearRangeNow_IsNear) == 0x00002A, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_IsNearRangeNow_IsNear' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_IsAttackSuccessAngle_ReturnValue) == 0x00002B, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_IsAttackSuccessAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_IsAttackSuccessAngle_ReturnValue_1) == 0x00002C, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_IsAttackSuccessAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_BooleanAND_ReturnValue_1) == 0x00002D, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue) == 0x00002E, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_GetCurrentOffsetTypeOfDefense_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002F, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000030, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000031, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000032, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_IsOccurOffsetHitCollision, CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue) == 0x000033, "Member 'BP_AttackCollision_C_IsOccurOffsetHitCollision::CallFunc_GetCurrentOffsetTypeOfAttack_ReturnValue' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ReceiveActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_AttackCollision_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_AttackCollision_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_AttackCollision_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong size on BP_AttackCollision_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_AttackCollision_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_AttackCollision_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AttackCollision_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AttackCollision_C_ReceiveTick");
static_assert(sizeof(BP_AttackCollision_C_ReceiveTick) == 0x000004, "Wrong size on BP_AttackCollision_C_ReceiveTick");
static_assert(offsetof(BP_AttackCollision_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AttackCollision_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.RefreshCollision
// 0x0080 (0x0080 - 0x0000)
struct BP_AttackCollision_C_RefreshCollision final
{
public:
	struct FKoratAttackCollisionParameter         InCollisionParameter;                              // 0x0000(0x0068)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FKoratActionDataList                   InAction;                                          // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FKoratAdditionalDamageInfo             InAdditionalDamageInfo;                            // 0x0070(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EKoratActionAttackType                        InAttackType;                                      // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_RefreshCollision) == 0x000008, "Wrong alignment on BP_AttackCollision_C_RefreshCollision");
static_assert(sizeof(BP_AttackCollision_C_RefreshCollision) == 0x000080, "Wrong size on BP_AttackCollision_C_RefreshCollision");
static_assert(offsetof(BP_AttackCollision_C_RefreshCollision, InCollisionParameter) == 0x000000, "Member 'BP_AttackCollision_C_RefreshCollision::InCollisionParameter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_RefreshCollision, InAction) == 0x000068, "Member 'BP_AttackCollision_C_RefreshCollision::InAction' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_RefreshCollision, InAdditionalDamageInfo) == 0x000070, "Member 'BP_AttackCollision_C_RefreshCollision::InAdditionalDamageInfo' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_RefreshCollision, InAttackType) == 0x00007C, "Member 'BP_AttackCollision_C_RefreshCollision::InAttackType' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.SetRefreshParameter
// 0x00C8 (0x00C8 - 0x0000)
struct BP_AttackCollision_C_SetRefreshParameter final
{
public:
	struct FKoratAttackCollisionParameter         InCollisionParameter;                              // 0x0000(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FKoratActionDataList                   InCombativesSetData;                               // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FKoratAdditionalDamageInfo             InAdditionalDamageInfo;                            // 0x0070(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	EKoratActionAttackType                        InAttackType;                                      // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentActionAttackCollisionScale_ReturnValue; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           K2Node_DynamicCast_AsSSCharacter;                  // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_SetRefreshParameter) == 0x000008, "Wrong alignment on BP_AttackCollision_C_SetRefreshParameter");
static_assert(sizeof(BP_AttackCollision_C_SetRefreshParameter) == 0x0000C8, "Wrong size on BP_AttackCollision_C_SetRefreshParameter");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, InCollisionParameter) == 0x000000, "Member 'BP_AttackCollision_C_SetRefreshParameter::InCollisionParameter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, InCombativesSetData) == 0x000068, "Member 'BP_AttackCollision_C_SetRefreshParameter::InCombativesSetData' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, InAdditionalDamageInfo) == 0x000070, "Member 'BP_AttackCollision_C_SetRefreshParameter::InAdditionalDamageInfo' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, InAttackType) == 0x00007C, "Member 'BP_AttackCollision_C_SetRefreshParameter::InAttackType' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, CallFunc_GetCurrentActionAttackCollisionScale_ReturnValue) == 0x000080, "Member 'BP_AttackCollision_C_SetRefreshParameter::CallFunc_GetCurrentActionAttackCollisionScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000088, "Member 'BP_AttackCollision_C_SetRefreshParameter::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_AttackCollision_C_SetRefreshParameter::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, K2Node_DynamicCast_AsSSCharacter) == 0x0000B8, "Member 'BP_AttackCollision_C_SetRefreshParameter::K2Node_DynamicCast_AsSSCharacter' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_SetRefreshParameter, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_AttackCollision_C_SetRefreshParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.Tick
// 0x000D (0x000D - 0x0000)
struct BP_AttackCollision_C_Tick final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue_1;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue_2;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue_3;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_5;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_Tick) == 0x000001, "Wrong alignment on BP_AttackCollision_C_Tick");
static_assert(sizeof(BP_AttackCollision_C_Tick) == 0x00000D, "Wrong size on BP_AttackCollision_C_Tick");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000001, "Member 'BP_AttackCollision_C_Tick::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess_1) == 0x000002, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000003, "Member 'BP_AttackCollision_C_Tick::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_AttackCollision_C_Tick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000005, "Member 'BP_AttackCollision_C_Tick::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_GetCollisionEnabled_ReturnValue_1) == 0x000006, "Member 'BP_AttackCollision_C_Tick::CallFunc_GetCollisionEnabled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess_2) == 0x000007, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess_3) == 0x000008, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_GetCollisionEnabled_ReturnValue_2) == 0x000009, "Member 'BP_AttackCollision_C_Tick::CallFunc_GetCollisionEnabled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, CallFunc_GetCollisionEnabled_ReturnValue_3) == 0x00000A, "Member 'BP_AttackCollision_C_Tick::CallFunc_GetCollisionEnabled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess_4) == 0x00000B, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_Tick, K2Node_SwitchEnum_CmpSuccess_5) == 0x00000C, "Member 'BP_AttackCollision_C_Tick::K2Node_SwitchEnum_CmpSuccess_5' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoneCapsuleParam
// 0x0220 (0x0220 - 0x0000)
struct BP_AttackCollision_C_UpdateBoneCapsuleParam final
{
public:
	bool                                          InInit;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreCapsuleLocation;                                // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_2;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x00F0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0120(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast; // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ExecCollision_CapsuleHalfHeight_ImplicitCast; // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_UpdateBoneCapsuleParam) == 0x000010, "Wrong alignment on BP_AttackCollision_C_UpdateBoneCapsuleParam");
static_assert(sizeof(BP_AttackCollision_C_UpdateBoneCapsuleParam) == 0x000220, "Wrong size on BP_AttackCollision_C_UpdateBoneCapsuleParam");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, InInit) == 0x000000, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::InInit' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, PreCapsuleLocation) == 0x000008, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::PreCapsuleLocation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Vector_Zero_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue) == 0x000038, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003C, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000058, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue_1) == 0x000070, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue_2) == 0x000074, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000079, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000098, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_MakeRotFromZ_ReturnValue) == 0x0000C8, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_VSize_ReturnValue) == 0x0000E0, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x0000F0, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000110, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_BooleanAND_ReturnValue) == 0x000119, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000120, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000208, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000210, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast) == 0x000218, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneCapsuleParam, CallFunc_ExecCollision_CapsuleHalfHeight_ImplicitCast) == 0x00021C, "Member 'BP_AttackCollision_C_UpdateBoneCapsuleParam::CallFunc_ExecCollision_CapsuleHalfHeight_ImplicitCast' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoneLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_AttackCollision_C_UpdateBoneLocation final
{
public:
	struct FVector                                CallFunc_GetSocketLocationSyncSafe_ReturnValue;    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocationSyncSafe_ReturnValue_1;  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_UpdateBoneLocation) == 0x000008, "Wrong alignment on BP_AttackCollision_C_UpdateBoneLocation");
static_assert(sizeof(BP_AttackCollision_C_UpdateBoneLocation) == 0x000030, "Wrong size on BP_AttackCollision_C_UpdateBoneLocation");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneLocation, CallFunc_GetSocketLocationSyncSafe_ReturnValue) == 0x000000, "Member 'BP_AttackCollision_C_UpdateBoneLocation::CallFunc_GetSocketLocationSyncSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoneLocation, CallFunc_GetSocketLocationSyncSafe_ReturnValue_1) == 0x000018, "Member 'BP_AttackCollision_C_UpdateBoneLocation::CallFunc_GetSocketLocationSyncSafe_ReturnValue_1' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.UpdateBoxParam
// 0x01C0 (0x01C0 - 0x0000)
struct BP_AttackCollision_C_UpdateBoxParam final
{
public:
	bool                                          InInit;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOptimizeMode_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_2;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation;               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation_1;             // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x00A0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x00D8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AttackCollision_C_UpdateBoxParam) == 0x000010, "Wrong alignment on BP_AttackCollision_C_UpdateBoxParam");
static_assert(sizeof(BP_AttackCollision_C_UpdateBoxParam) == 0x0001C0, "Wrong size on BP_AttackCollision_C_UpdateBoxParam");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, InInit) == 0x000000, "Member 'BP_AttackCollision_C_UpdateBoxParam::InInit' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GetOptimizeMode_ReturnValue) == 0x000004, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GetOptimizeMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GetOptimizeMode_ReturnValue_1) == 0x00000C, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GetOptimizeMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GetOptimizeMode_ReturnValue_2) == 0x000010, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GetOptimizeMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000015, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GetAttackRotation_rotation) == 0x000018, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GetAttackRotation_rotation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GetAttackRotation_rotation_1) == 0x000038, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GetAttackRotation_rotation_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_BooleanAND_ReturnValue) == 0x000069, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_ComposeRotators_ReturnValue) == 0x000070, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000088, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x0000A0, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateBoxParam, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0000D8, "Member 'BP_AttackCollision_C_UpdateBoxParam::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.UpdateCapsuleParam
// 0x01E0 (0x01E0 - 0x0000)
struct BP_AttackCollision_C_UpdateCapsuleParam final
{
public:
	bool                                          InInit;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_1;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_2;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation;               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation_1;             // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x00C0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x00F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AttackCollision_C_UpdateCapsuleParam) == 0x000010, "Wrong alignment on BP_AttackCollision_C_UpdateCapsuleParam");
static_assert(sizeof(BP_AttackCollision_C_UpdateCapsuleParam) == 0x0001E0, "Wrong size on BP_AttackCollision_C_UpdateCapsuleParam");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, InInit) == 0x000000, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::InInit' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_Vector_Zero_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue_1) == 0x000028, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GetOptimizeMode_ReturnValue_2) == 0x00002C, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GetOptimizeMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000031, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GetAttackRotation_rotation) == 0x000038, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GetAttackRotation_rotation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GetAttackRotation_rotation_1) == 0x000058, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GetAttackRotation_rotation_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_Not_PreBool_ReturnValue) == 0x000088, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_ComposeRotators_ReturnValue) == 0x000090, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000A8, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x0000C0, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E0, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateCapsuleParam, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0000F8, "Member 'BP_AttackCollision_C_UpdateCapsuleParam::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function BP_AttackCollision.BP_AttackCollision_C.UpdateSphereParam
// 0x01E0 (0x01E0 - 0x0000)
struct BP_AttackCollision_C_UpdateSphereParam final
{
public:
	bool                                          InInit;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Quat_Identity_ReturnValue;                // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_1;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOptimizeMode_ReturnValue_2;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAttackRotation_rotation_1;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x00E0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AttackCollision_C_UpdateSphereParam) == 0x000010, "Wrong alignment on BP_AttackCollision_C_UpdateSphereParam");
static_assert(sizeof(BP_AttackCollision_C_UpdateSphereParam) == 0x0001E0, "Wrong size on BP_AttackCollision_C_UpdateSphereParam");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, InInit) == 0x000000, "Member 'BP_AttackCollision_C_UpdateSphereParam::InInit' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_Vector_Zero_ReturnValue) == 0x000008, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_Quat_Identity_ReturnValue) == 0x000020, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_Quat_Identity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GetOptimizeMode_ReturnValue) == 0x000040, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GetOptimizeMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000044, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GetOptimizeMode_ReturnValue_1) == 0x000048, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GetOptimizeMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GetOptimizeMode_ReturnValue_2) == 0x00004C, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GetOptimizeMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_Greater_IntInt_ReturnValue) == 0x000051, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GetAttackRotation_rotation) == 0x000058, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GetAttackRotation_rotation' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GetAttackRotation_rotation_1) == 0x000078, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GetAttackRotation_rotation_1' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_Not_PreBool_ReturnValue) == 0x0000A8, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_ComposeRotators_ReturnValue) == 0x0000B0, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000C8, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0000E0, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AttackCollision_C_UpdateSphereParam, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C8, "Member 'BP_AttackCollision_C_UpdateSphereParam::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

}

