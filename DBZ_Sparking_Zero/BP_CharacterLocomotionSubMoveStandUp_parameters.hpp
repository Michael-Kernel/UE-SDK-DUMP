#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubMoveStandUp

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECharacterMoveStandUpDirection_structs.hpp"
#include "ECharacterDirection_structs.hpp"
#include "ECharacterMoveStandUpState_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.CalculateActionDirection
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection final
{
public:
	ECharacterDirection                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetRotation_Rotation;                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           CallFunc_CalcDirection_Direction;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                K2Node_Select_Default;                             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalcDirection_InYaw_ImplicitCast;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection) == 0x000070, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, Temp_byte_Variable) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, Temp_byte_Variable_1) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, Temp_byte_Variable_2) == 0x000002, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, Temp_byte_Variable_3) == 0x000003, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, Temp_byte_Variable_4) == 0x000004, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_GetRotation_Rotation) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_GetRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_BreakRotator_Roll) == 0x000058, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_BreakRotator_Pitch) == 0x00005C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_BreakRotator_Yaw) == 0x000060, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_CalcDirection_Direction) == 0x000064, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_CalcDirection_Direction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, K2Node_Select_Default) == 0x000065, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection, CallFunc_CalcDirection_InYaw_ImplicitCast) == 0x000068, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateActionDirection::CallFunc_CalcDirection_InYaw_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.CalculateInputDirection
// 0x0078 (0x0078 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection final
{
public:
	ECharacterDirection                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           CallFunc_CalcDirection_Direction;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                K2Node_Select_Default;                             // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalcDirection_InYaw_ImplicitCast;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection) == 0x000078, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, Temp_byte_Variable) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, Temp_byte_Variable_1) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, Temp_byte_Variable_2) == 0x000002, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, Temp_byte_Variable_3) == 0x000003, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, Temp_byte_Variable_4) == 0x000004, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakVector_X) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakVector_Z) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakRotator_Roll) == 0x000060, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakRotator_Pitch) == 0x000064, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_BreakRotator_Yaw) == 0x000068, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_CalcDirection_Direction) == 0x00006C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_CalcDirection_Direction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, K2Node_Select_Default) == 0x00006D, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection, CallFunc_CalcDirection_InYaw_ImplicitCast) == 0x000070, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateInputDirection::CallFunc_CalcDirection_InYaw_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.CalculateMoveVector
// 0x00C8 (0x00C8 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector final
{
public:
	struct FRotator                               FrontRotation;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewLocalVar_0;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetMoveLookatRotation_LookAtRotation;     // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default;                             // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector) == 0x0000C8, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, FrontRotation) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::FrontRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, NewLocalVar_0) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, Temp_byte_Variable) == 0x000019, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, Temp_struct_Variable) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, Temp_struct_Variable_1) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, Temp_struct_Variable_2) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, Temp_struct_Variable_3) == 0x000068, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, CallFunc_GetMoveLookatRotation_LookAtRotation) == 0x000080, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::CallFunc_GetMoveLookatRotation_LookAtRotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, K2Node_Select_Default) == 0x000098, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000B0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CalculateMoveVector::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.Check
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_Check final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStart;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGiantChara_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInput_IsOK;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_Check) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_Check");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_Check) == 0x000020, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_Check");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Check, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Check::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Check, CanStart) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Check::CanStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Check, CallFunc_GetSSCharacter_SSCharacter) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Check::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Check, CallFunc_IsGiantChara_ReturnValue) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Check::CallFunc_IsGiantChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Check, CallFunc_CheckInput_IsOK) == 0x000019, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Check::CallFunc_CheckInput_IsOK' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.CheckInput
// 0x0048 (0x0048 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_CheckInput final
{
public:
	bool                                          IsOK;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseHitStop_IsUseHitStop;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_CheckInput");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput) == 0x000048, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_CheckInput");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, IsOK) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::IsOK' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_GetSSCharacter_SSCharacter) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, K2Node_DynamicCast_AsBP_Character) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_IsUseHitStop_IsUseHitStop) == 0x000019, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_IsUseHitStop_IsUseHitStop' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_CheckInput, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_CheckInput::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetBlowInfo
// 0x0318 (0x0318 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EKoratBlowState                               CallFunc_GetBlowInfo_BlowStatus;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlowType                                CallFunc_GetBlowInfo_BlowType;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetBlowInfo_BlowIsFront;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratHitBackMovementData              CallFunc_GetBlowInfo_HitBackData;                  // 0x0010(0x02E0)()
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedNormal;           // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowHitSpeedParallel;         // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundSSpeedMax;           // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBlowInfo_BlowBoundMSpeedMax;           // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBlowInfo_BlowReactionLevel;            // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo) == 0x000318, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowType) == 0x000009, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowIsFront) == 0x00000A, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowIsFront' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_HitBackData) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_HitBackData' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowHitSpeedNormal) == 0x0002F0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowHitSpeedNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowHitSpeedParallel) == 0x0002F8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowHitSpeedParallel' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowBoundSSpeedMax) == 0x000300, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowBoundSSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowBoundMSpeedMax) == 0x000308, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowBoundMSpeedMax' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo, CallFunc_GetBlowInfo_BlowReactionLevel) == 0x000310, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetBlowInfo::CallFunc_GetBlowInfo_BlowReactionLevel' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetLocomotionDetailStatus
// 0x0006 (0x0006 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         LocomotionDetailStatus;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus) == 0x000006, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, LocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus, K2Node_Select_Default) == 0x000005, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetMovementParameter
// 0x00B8 (0x00B8 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter final
{
public:
	ECharacterMoveStandUpState                    InActionStatus;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ____;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ____B_;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _____;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zerobni_n7U;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ___;                                               // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratMoveStandUpMovementParameter     Temp_struct_Variable;                              // 0x0034(0x0014)(NoDestructor)
	class UCurveFloat*                            CallFunc_GetParameter________;                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratMoveStandUpMovementParameter     CallFunc_GetParameter________IN;                   // 0x0050(0x0014)(NoDestructor)
	struct FKoratMoveStandUpMovementParameter     CallFunc_GetParameter________OT;                   // 0x0064(0x0014)(NoDestructor)
	struct FKoratMoveStandUpMovementParameter     K2Node_Select_Default;                             // 0x0078(0x0014)(NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult______ImplicitCast;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult________ImplicitCast;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_______ImplicitCast;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult__________ImplicitCast;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_____ImplicitCast;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter) == 0x0000B8, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, InActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::InActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, ____) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, ____B_) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::____B_' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, _____) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::_____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, Zerobni_n7U) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::Zerobni_n7U' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, ___) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::___' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, Temp_byte_Variable) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, Temp_struct_Variable) == 0x000034, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, CallFunc_GetParameter________) == 0x000048, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::CallFunc_GetParameter________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, CallFunc_GetParameter________IN) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::CallFunc_GetParameter________IN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, CallFunc_GetParameter________OT) == 0x000064, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::CallFunc_GetParameter________OT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_Select_Default) == 0x000078, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_FunctionResult______ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_FunctionResult______ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_FunctionResult________ImplicitCast) == 0x000098, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_FunctionResult________ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_FunctionResult_______ImplicitCast) == 0x0000A0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_FunctionResult_______ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_FunctionResult__________ImplicitCast) == 0x0000A8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_FunctionResult__________ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter, K2Node_FunctionResult_____ImplicitCast) == 0x0000B0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetMovementParameter::K2Node_FunctionResult_____ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetParameter
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetParameter final
{
public:
	class UCurveFloat*                            _______;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratMoveStandUpMovementParameter     _______IN;                                         // 0x0008(0x0014)(Parm, OutParm, NoDestructor)
	struct FKoratMoveStandUpMovementParameter     _______OT;                                         // 0x001C(0x0014)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetParameter");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetParameter) == 0x000030, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetParameter");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetParameter, _______) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetParameter::_______' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetParameter, _______IN) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetParameter::_______IN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetParameter, _______OT) == 0x00001C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetParameter::_______OT' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetRunningAction
// 0x0060 (0x0060 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   RunningAction;                                     // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable;                              // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_1;                            // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_2;                            // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_3;                            // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratActionDataList                   Temp_struct_Variable_4;                            // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_5;                            // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_6;                            // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   Temp_struct_Variable_7;                            // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   K2Node_Select_Default;                             // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   K2Node_Select_Default_1;                           // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction) == 0x000060, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, RunningAction) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::RunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_3) == 0x000024, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_byte_Variable_1) == 0x00002C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_4) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_5) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_6) == 0x000040, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, Temp_struct_Variable_7) == 0x000048, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, K2Node_Select_Default) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction, K2Node_Select_Default_1) == 0x000058, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningAction::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.GetRunningSection
// 0x002C (0x002C - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection final
{
public:
	class FName                                   RunningSection;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection) == 0x00002C, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, RunningSection) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, Temp_name_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, Temp_name_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, Temp_name_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection, K2Node_Select_Default) == 0x000024, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_GetRunningSection::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.IsEnableAction
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction) == 0x000002, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_IsEnableAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.SetMoveInputVector
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector final
{
public:
	struct FVector2D                              ValidInputVector;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector) == 0x000050, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, ValidInputVector) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::ValidInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_BreakVector2D_X) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMoveInputVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.SetMovementParameter
// 0x0070 (0x0070 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter final
{
public:
	ECharacterMoveStandUpState                    InActionStatus;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_2; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_3; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_4; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetCharacterMovement_CharacterMovement_5; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMovementParameter_____;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMovementParameter_______;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMovementParameter______;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMovementParameter_________;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMovementParameter____;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_GroundFriction_ImplicitCast;    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter) == 0x000070, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, InActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::InActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement_1) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement_2) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement_3) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement_4) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetCharacterMovement_CharacterMovement_5) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetCharacterMovement_CharacterMovement_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetMovementParameter_____) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetMovementParameter_____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetMovementParameter_______) == 0x000040, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetMovementParameter_______' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetMovementParameter______) == 0x000048, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetMovementParameter______' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetMovementParameter_________) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetMovementParameter_________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, CallFunc_GetMovementParameter____) == 0x000058, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::CallFunc_GetMovementParameter____' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x000060, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x000064, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, K2Node_VariableSet_GroundFriction_ImplicitCast) == 0x000068, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::K2Node_VariableSet_GroundFriction_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x00006C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetMovementParameter::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.SetStatus
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_SetStatus final
{
public:
	ECharacterMoveStandUpState                    InActionStatus;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterActionFinishReason             InActionFinishReason;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateRunningAction_OutIsChangeAction;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_SetStatus");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus) == 0x000028, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_SetStatus");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, InActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::InActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, InActionFinishReason) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::InActionFinishReason' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetStatus, CallFunc_UpdateRunningAction_OutIsChangeAction) == 0x000021, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetStatus::CallFunc_UpdateRunningAction_OutIsChangeAction' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.SetUpMovement Parameter
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter final
{
public:
	ECharacterMoveStandUpState                    InActionStatus;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter) == 0x000001, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter, InActionStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpMovement_Parameter::InActionStatus' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.SetUpTurn
// 0x0110 (0x0110 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn final
{
public:
	ECharacterDirection                           NewLocalVar_7;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           NewLocalVar_6;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterDirection                           NewLocalVar_5;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLocalVar_0;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewLocalVar_4;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewLocalVar_3;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewLocalVar_2;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewLocalVar_1;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotation_Rotation;                     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetRotation_Rotation_1;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpDirection                Temp_byte_Variable;                                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CallFunc_GetParameter________;                     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratMoveStandUpMovementParameter     CallFunc_GetParameter________IN;                   // 0x00B8(0x0014)(NoDestructor)
	struct FKoratMoveStandUpMovementParameter     CallFunc_GetParameter________OT;                   // 0x00CC(0x0014)(NoDestructor)
	double                                        K2Node_Select_NewEnumerator0_ImplicitCast;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_NewEnumerator2_ImplicitCast;         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_NewEnumerator3_ImplicitCast;         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_Angle_ImplicitCast;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_NewEnumerator1_ImplicitCast;         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn) == 0x000110, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_7) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_6) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_5) == 0x000002, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_0) == 0x000003, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_4) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_3) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_2) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, NewLocalVar_1) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_GetRotation_Rotation) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_GetRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000040, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_GetRotation_Rotation_1) == 0x000058, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_GetRotation_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000070, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, Temp_byte_Variable) == 0x000094, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_NormalizeAxis_ReturnValue) == 0x0000A0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, K2Node_Select_Default) == 0x0000A8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_GetParameter________) == 0x0000B0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_GetParameter________' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_GetParameter________IN) == 0x0000B8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_GetParameter________IN' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_GetParameter________OT) == 0x0000CC, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_GetParameter________OT' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, K2Node_Select_NewEnumerator0_ImplicitCast) == 0x0000E0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::K2Node_Select_NewEnumerator0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, K2Node_Select_NewEnumerator2_ImplicitCast) == 0x0000E8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::K2Node_Select_NewEnumerator2_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, K2Node_Select_NewEnumerator3_ImplicitCast) == 0x0000F0, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::K2Node_Select_NewEnumerator3_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000F8, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, CallFunc_NormalizeAxis_Angle_ImplicitCast) == 0x000100, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::CallFunc_NormalizeAxis_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn, K2Node_Select_NewEnumerator1_ImplicitCast) == 0x000108, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_SetUpTurn::K2Node_Select_NewEnumerator1_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.Start
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_Start final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_Start) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_Start");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_Start) == 0x000020, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_Start");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Start, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Start::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Start, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Start::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Start, NewParam) == 0x000009, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Start::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateIN
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateIN final
{
public:
	ECharacterLocomotionEventType                 CallFunc_GetUpdateEventType_EventType;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateIN) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateIN");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateIN) == 0x000002, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateIN");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateIN, CallFunc_GetUpdateEventType_EventType) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateIN::CallFunc_GetUpdateEventType_EventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateIN, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateIN::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateINOnSetAnimTime
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime) == 0x000018, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINOnSetAnimTime::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateINStop
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateINStop final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateINStop) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateINStop");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateINStop) == 0x000008, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateINStop");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINStop, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINStop::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateINUpdate
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate final
{
public:
	double                                        CallFunc_GetUpdateDeltaSeconds_DeltaSeconds;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    CallFunc_UpdateMove_NextActionStatus;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate) == 0x000010, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate, CallFunc_GetUpdateDeltaSeconds_DeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate::CallFunc_GetUpdateDeltaSeconds_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate, CallFunc_UpdateMove_NextActionStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateINUpdate::CallFunc_UpdateMove_NextActionStatus' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateOT
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateOT final
{
public:
	ECharacterLocomotionEventType                 CallFunc_GetUpdateEventType_EventType;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateOT) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateOT");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateOT) == 0x000002, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateOT");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOT, CallFunc_GetUpdateEventType_EventType) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOT::CallFunc_GetUpdateEventType_EventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOT, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOT::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateOTOnSetAnimTime
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_2; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime) == 0x000020, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime, CallFunc_GetLocomotionComponent_LocomotionComponent_2) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTOnSetAnimTime::CallFunc_GetLocomotionComponent_LocomotionComponent_2' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateOTStop
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop) == 0x000008, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTStop::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.StateOTUpdate
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate final
{
public:
	double                                        CallFunc_GetUpdateDeltaSeconds_DeltaSeconds;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    CallFunc_UpdateMove_NextActionStatus;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate) == 0x000010, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate, CallFunc_GetUpdateDeltaSeconds_DeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate::CallFunc_GetUpdateDeltaSeconds_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate, CallFunc_UpdateMove_NextActionStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_StateOTUpdate::CallFunc_UpdateMove_NextActionStatus' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.Update
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetUpdateDeltaSeconds_DeltaSeconds;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_Update) == 0x000030, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, CallFunc_GetUpdateDeltaSeconds_DeltaSeconds) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::CallFunc_GetUpdateDeltaSeconds_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_Update, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_Update::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.UpdateAlways
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Update_Sub_State_Timer_OutSubStateTimer;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways) == 0x000018, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways, CallFunc_Update_Sub_State_Timer_OutSubStateTimer) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateAlways::CallFunc_Update_Sub_State_Timer_OutSubStateTimer' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.UpdateMove
// 0x0028 (0x0028 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterMoveStandUpState                    NextActionStatus;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPawn_Pawn;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove) == 0x000028, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove, NextActionStatus) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove::NextActionStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove, CallFunc_GetPawn_Pawn) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove::CallFunc_GetPawn_Pawn' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateMove::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubMoveStandUp.BP_CharacterLocomotionSubMoveStandUp_C.UpdateTurn
// 0x0098 (0x0098 - 0x0000)
struct BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Rotation_IsSuccessfully;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_B_ImplicitCast;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn");
static_assert(sizeof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn) == 0x000098, "Wrong size on BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_BreakRotator_Roll) == 0x000008, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_BreakRotator_Pitch) == 0x00000C, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_BreakRotator_Yaw) == 0x000010, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_GetTimeRange_MinTime) == 0x000014, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_GetTimeRange_MaxTime) == 0x000018, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_FMin_ReturnValue) == 0x000020, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_GetFloatValue_ReturnValue) == 0x000030, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Set_Rotation_IsSuccessfully) == 0x000068, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Set_Rotation_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_FMin_B_ImplicitCast) == 0x000078, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_FMin_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000080, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000088, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000090, "Member 'BP_CharacterLocomotionSubMoveStandUp_C_UpdateTurn::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

}

