#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubRevengeDash

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.CheckAndStart
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart) == 0x000010, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart, CallFunc_Start_NewParam) == 0x00000A, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart, CallFunc_CheckAndStart_IsStarted) == 0x00000B, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckAndStart::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.CheckHomingEndSP
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP, IsEnd) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_CheckHomingEndSP::IsEnd' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.ConsumeSPHomingIN
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingIN::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.ConsumeSPHomingLP
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_ConsumeSPHomingLP::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.GetHomingStateMovementParameter
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter final
{
public:
	EKoratDragonHomingState                       InStatus;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseParameter;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameter;                                 // 0x0008(0x0020)(Parm, OutParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable;                              // 0x0030(0x0020)(NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable_1;                            // 0x0050(0x0020)(NoDestructor)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default;                             // 0x0078(0x0020)(NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default_1;                           // 0x0098(0x0020)(NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter) == 0x0000C0, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, InStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::InStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, IsUseParameter) == 0x000001, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, MovementParameter) == 0x000008, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::MovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_bool_Variable) == 0x000028, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_bool_Variable_1) == 0x00002A, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_bool_Variable_2) == 0x00002B, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_struct_Variable) == 0x000030, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_struct_Variable_1) == 0x000050, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, Temp_byte_Variable) == 0x000070, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, K2Node_Select_Default) == 0x000078, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, K2Node_Select_Default_1) == 0x000098, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter, K2Node_Select_Default_2) == 0x0000B8, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetHomingStateMovementParameter::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.GetLocomotionDetailStatus
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         LocomotionDetailStatus;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus) == 0x000008, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, LocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_4) == 0x000005, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_5) == 0x000006, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus, K2Node_Select_Default) == 0x000007, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.GetRunningAction
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   RunningAction;                                     // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction) == 0x000008, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction, RunningAction) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningAction::RunningAction' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.GetRunningSection
// 0x003C (0x003C - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection final
{
public:
	class FName                                   RunningSection;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection) == 0x00003C, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, RunningSection) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_name_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_name_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_name_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_name_Variable_3) == 0x000024, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, Temp_name_Variable_4) == 0x00002C, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection, K2Node_Select_Default) == 0x000034, "Member 'BP_CharacterLocomotionSubRevengeDash_C_GetRunningSection::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.IsCanHomingChase
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_IsCanHomingChase::ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.IsEnableAction
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction) == 0x000002, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable) == 0x000001, "Member 'BP_CharacterLocomotionSubRevengeDash_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.OnStopRevengeDash
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash) == 0x000010, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash, CallFunc_Update_NewParam) == 0x000008, "Member 'BP_CharacterLocomotionSubRevengeDash_C_OnStopRevengeDash::CallFunc_Update_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.StartCheckSPConsumableHomingIN
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN final
{
public:
	bool                                          IsOK;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN, IsOK) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_StartCheckSPConsumableHomingIN::IsOK' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.Update
// 0x0030 (0x0030 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_Update) == 0x000030, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, Result) == 0x000019, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::Result' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, CallFunc_GetSSCharacter_SSCharacter) == 0x000020, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_Update, CallFunc_Update_NewParam) == 0x000029, "Member 'BP_CharacterLocomotionSubRevengeDash_C_Update::CallFunc_Update_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubRevengeDash.BP_CharacterLocomotionSubRevengeDash_C.UpdateHomingLPKey Pressed
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed");
static_assert(sizeof(BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed) == 0x000001, "Wrong size on BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed");
static_assert(offsetof(BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubRevengeDash_C_UpdateHomingLPKey_Pressed::IsSuccessfully' has a wrong offset!");

}

