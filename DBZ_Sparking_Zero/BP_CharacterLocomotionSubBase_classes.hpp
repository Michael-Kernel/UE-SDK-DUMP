#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBase

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "SS_classes.hpp"
#include "ECharacterLocomotionEventType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubBase.BP_CharacterLocomotionSubBase_C
// 0x0018 (0x0060 - 0x0048)
class UBP_CharacterLocomotionSubBase_C : public UKoratCharacterLocomotionSubBase
{
public:
	class UBP_CharacterLocomotionComponent_C*     LocomotionComponent;                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 EventType;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaSeconds;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Calculate_Animation_Direction(const struct FVector& InVelocity, const struct FRotator& InCharacterRot, const struct FRotator& InLastVelocityRot, double* DirectionY, double* DirectionZ);
	void ChangeRangeMode(bool InIsNear);
	void Check(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool* CanStart);
	void CheckAndStart(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* IsStarted);
	void ClearStatus();
	void GetBlowBrakeUkemiCheckKey(EKoratBattleKey* UkemiCheckKey);
	void GetCharacter(class ACharacter** Character);
	void GetCharacterMovement(class UCharacterMovementComponent** CharacterMovement);
	void GetFallUkemiCheckKey(EKoratBattleKey* UkemiCheckKey);
	void GetInputVectorXYZ(struct FVector* OutInputVector);
	void GetLockOnMode(bool* OutIsLockOn);
	void GetLocomotionComponent(class UBP_CharacterLocomotionComponent_C** LocomotionComponent_0);
	void GetLocomotionDetailStatus(EKoratCharacterLocomotionDetailStatus* LocomotionDetailStatus);
	void GetMoveLookAtRotation(bool InIsMoveInput, struct FRotator* LookAtRotation);
	void GetMovementMode(EMovementMode* MovementMode);
	struct FVector GetMyLocation();
	void GetOnHitType(class UObject* InOnHitArgOther, const struct FVector& InOnHitArgHitNormal, const struct FHitResult& InOnHitArgHit, bool* IsHitCharacter, bool* IsHitFloor_0, bool* IsHitWall, bool* IsHitOthers);
	struct FRotator GetOnlyYawRotation(const struct FRotator& InLookAtRotation);
	void GetPawn(class APawn** Pawn);
	void GetRotation(struct FRotator* Rotation);
	void GetRunningAction(struct FKoratActionDataList* RunningAction);
	void GetRunningSection(class FName* RunningSection);
	void GetSSCharacter(class ASSCharacter** SSCharacter);
	void GetStandUpDashCheckKey(EKoratBattleKey* UkemiCheckKey);
	void GetTargetDistance(double* Length);
	void GetTargetDistanceXY(double* Length);
	struct FVector GetTargetLocation();
	void GetUkemiCheckKey(EKoratBattleKey* UkemiCheckKey);
	void GetUpdateDeltaSeconds(double* DeltaSeconds_0);
	void GetUpdateEventType(ECharacterLocomotionEventType* EventType_0);
	void GetUseCharacterRotationPitch(bool* UsePitch);
	void GetVelocity(struct FVector* Velocity);
	void GetWallUkemiCheckKey(EKoratBattleKey* UkemiCheckKey);
	void IsEnableAction(bool* IsEnable);
	void IsHitFloor(const struct FVector& InHitNormal, const struct FHitResult& InHitArgHit, bool* OutIsFloor);
	void IsNearRangeDistance(double InDistance, bool* IsNear);
	void IsUnconscious(bool* IsUnconscious_0);
	void IsUpdateSpeed(bool* IsUpdate);
	void ReloadParam();
	void RotateToTarget(double InDeltaSeconds, double InInterpSpeed, const struct FRotator& InTargetRotation, bool* OutIsTurnEnd);
	void Set_Rotation(const struct FRotator& InNewRotation, bool InTeleportPhysics, const struct FFLocomotionRotationParameter& InRotationParameter, bool* IsSuccessfully);
	void SetLocomotionComponent(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent);
	void SetMovementMode(EMovementMode InMovementMode, bool InClearSavedMovementMode);
	void SetUpUpdate(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds);
	void SetUseCharacterRotationPitch(bool InUsePitch, bool* UsePitch);
	void Start(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, bool InInSkip, bool* NewParam);
	void Update(class UBP_CharacterLocomotionComponent_C* InLocomotionComponent, ECharacterLocomotionEventType InEventType, double InDeltaSeconds, bool* NewParam);
	void Update_Turn(double InDeltaSeconds, bool InIsRequestTurn, const struct FRotator& InTargetRotation, bool* OutIsTurnEnd);
	void UpdateLockOn(double InDeltaSeconds);
	void UpdateRange(double InDistance, bool InIsForceChange);
	void UpdateSpeed(double InDistance2, bool InIsFixRangeSpeed2, bool InIsNear2);
	void Z________h______________kY_K(bool* Result);
	bool _____k________h___ki_Y_K();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubBase_C">();
	}
	static class UBP_CharacterLocomotionSubBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubBase_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubBase_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubBase_C");
static_assert(sizeof(UBP_CharacterLocomotionSubBase_C) == 0x000060, "Wrong size on UBP_CharacterLocomotionSubBase_C");
static_assert(offsetof(UBP_CharacterLocomotionSubBase_C, LocomotionComponent) == 0x000048, "Member 'UBP_CharacterLocomotionSubBase_C::LocomotionComponent' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBase_C, EventType) == 0x000050, "Member 'UBP_CharacterLocomotionSubBase_C::EventType' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubBase_C, DeltaSeconds) == 0x000058, "Member 'UBP_CharacterLocomotionSubBase_C::DeltaSeconds' has a wrong offset!");

}

