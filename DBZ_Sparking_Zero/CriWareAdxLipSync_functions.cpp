#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareAdxLipSync

#include "Basic.hpp"

#include "CriWareAdxLipSync_classes.hpp"
#include "CriWareAdxLipSync_parameters.hpp"


namespace SDK
{

// Function CriWareAdxLipSync.LipsAnalyzerBase.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxInputSamplingRate                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELipsAnalyzerDataReadoutMode            DataReadoutMode                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsAnalyzerBase::Init(const int32 MaxInputSamplingRate, const ELipsAnalyzerDataReadoutMode DataReadoutMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "Init");

	Params::LipsAnalyzerBase_Init Parms{};

	Parms.MaxInputSamplingRate = MaxInputSamplingRate;
	Parms.DataReadoutMode = DataReadoutMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.SetReadoutOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   OffsetMs                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsAnalyzerBase::SetReadoutOffset(int64 OffsetMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "SetReadoutOffset");

	Params::LipsAnalyzerBase_SetReadoutOffset Parms{};

	Parms.OffsetMs = OffsetMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.SetSamplingRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SamplingRateHz                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsAnalyzerBase::SetSamplingRate(const int32 SamplingRateHz)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "SetSamplingRate");

	Params::LipsAnalyzerBase_SetSamplingRate Parms{};

	Parms.SamplingRateHz = SamplingRateHz;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.SetSilenceThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   VolumeDb                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsAnalyzerBase::SetSilenceThreshold(const float VolumeDb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "SetSilenceThreshold");

	Params::LipsAnalyzerBase_SetSilenceThreshold Parms{};

	Parms.VolumeDb = VolumeDb;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.GetInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCriLipsMouthInfo                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMouthInfo ULipsAnalyzerBase::GetInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "GetInfo");

	Params::LipsAnalyzerBase_GetInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.GetInfoAtSilence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCriLipsMouthInfo                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMouthInfo ULipsAnalyzerBase::GetInfoAtSilence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "GetInfoAtSilence");

	Params::LipsAnalyzerBase_GetInfoAtSilence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.GetMorphTargetBlendAmountAsJapanese
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCriLipsMorphTargetBlendAmountAsJapaneseReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMorphTargetBlendAmountAsJapanese ULipsAnalyzerBase::GetMorphTargetBlendAmountAsJapanese() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "GetMorphTargetBlendAmountAsJapanese");

	Params::LipsAnalyzerBase_GetMorphTargetBlendAmountAsJapanese Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.GetSilenceThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULipsAnalyzerBase::GetSilenceThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "GetSilenceThreshold");

	Params::LipsAnalyzerBase_GetSilenceThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.GetVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULipsAnalyzerBase::GetVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "GetVolume");

	Params::LipsAnalyzerBase_GetVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAnalyzerBase.IsAtSilence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULipsAnalyzerBase::IsAtSilence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAnalyzerBase", "IsAtSilence");

	Params::LipsAnalyzerBase_IsAtSilence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAtomAnalyzer.Attach
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAtomComponent*                   InAtomComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsAtomAnalyzer::Attach(class UAtomComponent* InAtomComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAtomAnalyzer", "Attach");

	Params::LipsAtomAnalyzer_Attach Parms{};

	Parms.InAtomComponent = InAtomComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAtomAnalyzer.Detach
// (Final, Native, Public, BlueprintCallable)

void ULipsAtomAnalyzer::Detach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAtomAnalyzer", "Detach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.LipsAtomAnalyzer.IsAttached
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULipsAtomAnalyzer::IsAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAtomAnalyzer", "IsAttached");

	Params::LipsAtomAnalyzer_IsAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAtomAnalyzer.GetProcessStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELipsAtomAnalyzerProcessStatus          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELipsAtomAnalyzerProcessStatus ULipsAtomAnalyzer::GetProcessStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAtomAnalyzer", "GetProcessStatus");

	Params::LipsAtomAnalyzer_GetProcessStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.LipsAtomAnalyzer.GetReadoutStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELipsAtomAnalyzerReadoutStatus          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELipsAtomAnalyzerReadoutStatus ULipsAtomAnalyzer::GetReadoutStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsAtomAnalyzer", "GetReadoutStatus");

	Params::LipsAtomAnalyzer_GetReadoutStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CriWareAdxLipSync.MovieSceneLipSyncAtomSection.SetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FFrameNumber                     InStartOffset                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieSceneLipSyncAtomSection::SetStartOffset(const struct FFrameNumber& InStartOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneLipSyncAtomSection", "SetStartOffset");

	Params::MovieSceneLipSyncAtomSection_SetStartOffset Parms{};

	Parms.InStartOffset = std::move(InStartOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CriWareAdxLipSync.MovieSceneLipSyncAtomSection.GetStartOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFrameNumber                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFrameNumber UMovieSceneLipSyncAtomSection::GetStartOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneLipSyncAtomSection", "GetStartOffset");

	Params::MovieSceneLipSyncAtomSection_GetStartOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

