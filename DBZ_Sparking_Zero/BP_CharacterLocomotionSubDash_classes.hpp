#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubDash

#include "Basic.hpp"

#include "SS_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterLocomotionSubBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterLocomotionSubDash.BP_CharacterLocomotionSubDash_C
// 0x0060 (0x00C0 - 0x0060)
class UBP_CharacterLocomotionSubDash_C : public UBP_CharacterLocomotionSubBase_C
{
public:
	struct FVector                                DashInputXYZ;                                      // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DashIsInputNeutral;                                // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DashRotation;                                      // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter DashMovementParam;                                 // 0x0098(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        DashHoldTimer;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddDashVector(double InDeltaSeconds);
	void ClearVelocityDashAtStart();
	void GetDashInputVector(const struct FVector& InInputVector, struct FVector* OutInputVector, bool* OutIsInputNeutral);
	void GetDashVectorAndRotation(const struct FVector& InInputVector, bool InIsOnlyYawRotation, struct FVector* OutVector, struct FRotator* OutRotation);
	void RotateDash(bool InIsIgnoreRoll, bool InIsIgnorePitch, bool InIsIgnoreYaw);
	void SetUpDashStateMovementParameter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterLocomotionSubDash_C">();
	}
	static class UBP_CharacterLocomotionSubDash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterLocomotionSubDash_C>();
	}
};
static_assert(alignof(UBP_CharacterLocomotionSubDash_C) == 0x000008, "Wrong alignment on UBP_CharacterLocomotionSubDash_C");
static_assert(sizeof(UBP_CharacterLocomotionSubDash_C) == 0x0000C0, "Wrong size on UBP_CharacterLocomotionSubDash_C");
static_assert(offsetof(UBP_CharacterLocomotionSubDash_C, DashInputXYZ) == 0x000060, "Member 'UBP_CharacterLocomotionSubDash_C::DashInputXYZ' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDash_C, DashIsInputNeutral) == 0x000078, "Member 'UBP_CharacterLocomotionSubDash_C::DashIsInputNeutral' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDash_C, DashRotation) == 0x000080, "Member 'UBP_CharacterLocomotionSubDash_C::DashRotation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDash_C, DashMovementParam) == 0x000098, "Member 'UBP_CharacterLocomotionSubDash_C::DashMovementParam' has a wrong offset!");
static_assert(offsetof(UBP_CharacterLocomotionSubDash_C, DashHoldTimer) == 0x0000B8, "Member 'UBP_CharacterLocomotionSubDash_C::DashHoldTimer' has a wrong offset!");

}

