#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoratControlRigExtension

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ControlRig_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class KoratControlRigExtension.KoratControlRig
// 0x0008 (0x0568 - 0x0560)
class UKoratControlRig : public UControlRig
{
public:
	class FName                                   ReplaceTag;                                        // 0x0560(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratControlRig">();
	}
	static class UKoratControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoratControlRig>();
	}
};
static_assert(alignof(UKoratControlRig) == 0x000008, "Wrong alignment on UKoratControlRig");
static_assert(sizeof(UKoratControlRig) == 0x000568, "Wrong size on UKoratControlRig");
static_assert(offsetof(UKoratControlRig, ReplaceTag) == 0x000560, "Member 'UKoratControlRig::ReplaceTag' has a wrong offset!");

// Class KoratControlRigExtension.KoratFacialControlRig
// 0x0000 (0x0568 - 0x0568)
class UKoratFacialControlRig : public UKoratControlRig
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratFacialControlRig">();
	}
	static class UKoratFacialControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoratFacialControlRig>();
	}
};
static_assert(alignof(UKoratFacialControlRig) == 0x000008, "Wrong alignment on UKoratFacialControlRig");
static_assert(sizeof(UKoratFacialControlRig) == 0x000568, "Wrong size on UKoratFacialControlRig");

// Class KoratControlRigExtension.KoratControlRigExtensionInterface
// 0x0000 (0x0028 - 0x0028)
class IKoratControlRigExtensionInterface final : public IInterface
{
public:
	TSubclassOf<class UControlRig> GetOverwriteLimitsClass(const class UClass* InClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratControlRigExtensionInterface">();
	}
	static class IKoratControlRigExtensionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IKoratControlRigExtensionInterface>();
	}
};
static_assert(alignof(IKoratControlRigExtensionInterface) == 0x000008, "Wrong alignment on IKoratControlRigExtensionInterface");
static_assert(sizeof(IKoratControlRigExtensionInterface) == 0x000028, "Wrong size on IKoratControlRigExtensionInterface");

// Class KoratControlRigExtension.KoratControlRigFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKoratControlRigFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool EqualClass(const class UClass* InClass, const TSoftClassPtr<class UClass> ClassPtr);
	static bool EqualControlRig(const class UControlRig* ControlRig, const TSoftClassPtr<class UClass> ClassPtr);
	static void OverwriteControlLimits(class UControlRig* ControlRig, TSubclassOf<class UControlRig> SourceClass);
	static void SetControlMaximumRotator(class UControlRig* ControlRig, const class FName Name_0, const struct FRotator& Value);
	static void SetControlMinimumRotator(class UControlRig* ControlRig, const class FName Name_0, const struct FRotator& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoratControlRigFunctionLibrary">();
	}
	static class UKoratControlRigFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoratControlRigFunctionLibrary>();
	}
};
static_assert(alignof(UKoratControlRigFunctionLibrary) == 0x000008, "Wrong alignment on UKoratControlRigFunctionLibrary");
static_assert(sizeof(UKoratControlRigFunctionLibrary) == 0x000028, "Wrong size on UKoratControlRigFunctionLibrary");

}

