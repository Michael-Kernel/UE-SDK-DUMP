#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SpRuntime_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class SpRuntime.SpParticleModuleLocationStaticVertSurface
// 0x0068 (0x0098 - 0x0030)
class USpParticleModuleLocationStaticVertSurface final : public UParticleModuleLocationBase
{
public:
	ESpLocationStaticVertSurfaceSource            SourceType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UniversalOffset;                                   // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUpdatePositionEachFrame : 1;                      // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientMeshEmitters : 1;                           // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StaticMeshActorParamName;                          // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnforceNormalCheck : 1;                           // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NormalToCompare;                                   // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalCheckToleranceDegrees;                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalCheckTolerance;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ValidMaterialIndices;                              // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bInheritVertexColor : 1;                           // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInheritUV : 1;                                    // 0x0090(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        InheritUVChannel;                                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpParticleModuleLocationStaticVertSurface">();
	}
	static class USpParticleModuleLocationStaticVertSurface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpParticleModuleLocationStaticVertSurface>();
	}
};
static_assert(alignof(USpParticleModuleLocationStaticVertSurface) == 0x000008, "Wrong alignment on USpParticleModuleLocationStaticVertSurface");
static_assert(sizeof(USpParticleModuleLocationStaticVertSurface) == 0x000098, "Wrong size on USpParticleModuleLocationStaticVertSurface");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, SourceType) == 0x000030, "Member 'USpParticleModuleLocationStaticVertSurface::SourceType' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, UniversalOffset) == 0x000038, "Member 'USpParticleModuleLocationStaticVertSurface::UniversalOffset' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, StaticMeshActorParamName) == 0x000054, "Member 'USpParticleModuleLocationStaticVertSurface::StaticMeshActorParamName' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, NormalToCompare) == 0x000060, "Member 'USpParticleModuleLocationStaticVertSurface::NormalToCompare' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, NormalCheckToleranceDegrees) == 0x000078, "Member 'USpParticleModuleLocationStaticVertSurface::NormalCheckToleranceDegrees' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, NormalCheckTolerance) == 0x00007C, "Member 'USpParticleModuleLocationStaticVertSurface::NormalCheckTolerance' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, ValidMaterialIndices) == 0x000080, "Member 'USpParticleModuleLocationStaticVertSurface::ValidMaterialIndices' has a wrong offset!");
static_assert(offsetof(USpParticleModuleLocationStaticVertSurface, InheritUVChannel) == 0x000094, "Member 'USpParticleModuleLocationStaticVertSurface::InheritUVChannel' has a wrong offset!");

// Class SpRuntime.SpDebugGuiConfig
// 0x0020 (0x0048 - 0x0028)
class USpDebugGuiConfig final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpDebugGuiConfig">();
	}
	static class USpDebugGuiConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpDebugGuiConfig>();
	}
};
static_assert(alignof(USpDebugGuiConfig) == 0x000008, "Wrong alignment on USpDebugGuiConfig");
static_assert(sizeof(USpDebugGuiConfig) == 0x000048, "Wrong size on USpDebugGuiConfig");

// Class SpRuntime.SpRuntimeBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USpRuntimeBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AssertionAssert(const class FString& InMessage, bool InExpression);
	static void AssertionError(const class FString& InMessage, bool InExpression);
	static void AssertionFatal(const class FString& InMessage, bool InExpression);
	static void AssertionInfo(const class FString& InMessage);
	static void AssertionPrint(const class FString& InMessage);
	static void AssertionWarning(const class FString& InMessage, bool InExpression);
	static TSoftObjectPtr<class UTexture2D> CreateViewportCaptureSoftTexture();
	static bool IsGamepadAttached(int32 InControllerId);
	static bool IsGamepadAttached_Microsft(int32 InControllerId);
	static bool IsGamepadAttached_Sony(int32 InControllerId);
	static bool IsGamepadAttached_Valve(int32 InControllerId);
	static void PrintGamepadAttached();
	static void SetDebugDisplayEnable(bool InEnable);
	static void SetDebugDisplayPrintVisible(bool InVisible);
	static void SetDebugDisplayTelopVisible(bool InVisible);
	static void SetDebugGuiEnable(bool InEnable);
	static void SetDebugGuiMeterVisible(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpRuntimeBlueprintLibrary">();
	}
	static class USpRuntimeBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpRuntimeBlueprintLibrary>();
	}
};
static_assert(alignof(USpRuntimeBlueprintLibrary) == 0x000008, "Wrong alignment on USpRuntimeBlueprintLibrary");
static_assert(sizeof(USpRuntimeBlueprintLibrary) == 0x000028, "Wrong size on USpRuntimeBlueprintLibrary");

// Class SpRuntime.SpDebugGuiMeter
// 0x0048 (0x0070 - 0x0028)
class USpDebugGuiMeter final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpDebugGuiMeter">();
	}
	static class USpDebugGuiMeter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpDebugGuiMeter>();
	}
};
static_assert(alignof(USpDebugGuiMeter) == 0x000008, "Wrong alignment on USpDebugGuiMeter");
static_assert(sizeof(USpDebugGuiMeter) == 0x000070, "Wrong size on USpDebugGuiMeter");

// Class SpRuntime.SpRuntimeEngineSettings
// 0x0068 (0x0090 - 0x0028)
class USpRuntimeEngineSettings final : public UObject
{
public:
	bool                                          IsConsumerControllerSeparation;                    // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssertionOutputBlueprintCallstackEnable;          // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugUIFontSize;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ResidentMenuOpenCloseWithKeyboard;                 // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ResidentMenuOpenCloseWithGamepad;                  // 0x0040(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bShowDebugTelop;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugTelopSpeed;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugTelopListHeight;                              // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           DebugTelopOpenCloseWithGamepad;                    // 0x0060(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           DebugTelopVisibleWithGamepad;                      // 0x0070(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bDebugGuiEnable;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugGuiAlwaysRunStat;                            // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugGuiMeterEnable;                              // 0x0082(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugGuiMeterWideMode;                            // 0x0083(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugGuiMeterScale;                                // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugGuiMeterFrames;                               // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpRuntimeEngineSettings">();
	}
	static class USpRuntimeEngineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpRuntimeEngineSettings>();
	}
};
static_assert(alignof(USpRuntimeEngineSettings) == 0x000008, "Wrong alignment on USpRuntimeEngineSettings");
static_assert(sizeof(USpRuntimeEngineSettings) == 0x000090, "Wrong size on USpRuntimeEngineSettings");
static_assert(offsetof(USpRuntimeEngineSettings, IsConsumerControllerSeparation) == 0x000028, "Member 'USpRuntimeEngineSettings::IsConsumerControllerSeparation' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bAssertionOutputBlueprintCallstackEnable) == 0x000029, "Member 'USpRuntimeEngineSettings::bAssertionOutputBlueprintCallstackEnable' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugUIFontSize) == 0x00002C, "Member 'USpRuntimeEngineSettings::DebugUIFontSize' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, ResidentMenuOpenCloseWithKeyboard) == 0x000030, "Member 'USpRuntimeEngineSettings::ResidentMenuOpenCloseWithKeyboard' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, ResidentMenuOpenCloseWithGamepad) == 0x000040, "Member 'USpRuntimeEngineSettings::ResidentMenuOpenCloseWithGamepad' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bShowDebugTelop) == 0x000050, "Member 'USpRuntimeEngineSettings::bShowDebugTelop' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugTelopSpeed) == 0x000054, "Member 'USpRuntimeEngineSettings::DebugTelopSpeed' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugTelopListHeight) == 0x000058, "Member 'USpRuntimeEngineSettings::DebugTelopListHeight' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugTelopOpenCloseWithGamepad) == 0x000060, "Member 'USpRuntimeEngineSettings::DebugTelopOpenCloseWithGamepad' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugTelopVisibleWithGamepad) == 0x000070, "Member 'USpRuntimeEngineSettings::DebugTelopVisibleWithGamepad' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bDebugGuiEnable) == 0x000080, "Member 'USpRuntimeEngineSettings::bDebugGuiEnable' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bDebugGuiAlwaysRunStat) == 0x000081, "Member 'USpRuntimeEngineSettings::bDebugGuiAlwaysRunStat' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bDebugGuiMeterEnable) == 0x000082, "Member 'USpRuntimeEngineSettings::bDebugGuiMeterEnable' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, bDebugGuiMeterWideMode) == 0x000083, "Member 'USpRuntimeEngineSettings::bDebugGuiMeterWideMode' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugGuiMeterScale) == 0x000084, "Member 'USpRuntimeEngineSettings::DebugGuiMeterScale' has a wrong offset!");
static_assert(offsetof(USpRuntimeEngineSettings, DebugGuiMeterFrames) == 0x000088, "Member 'USpRuntimeEngineSettings::DebugGuiMeterFrames' has a wrong offset!");

// Class SpRuntime.SpDebugModelViewerModelCtrlComponent
// 0x0030 (0x00D0 - 0x00A0)
class USpDebugModelViewerModelCtrlComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpDebugModelViewerModelCtrlComponent">();
	}
	static class USpDebugModelViewerModelCtrlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpDebugModelViewerModelCtrlComponent>();
	}
};
static_assert(alignof(USpDebugModelViewerModelCtrlComponent) == 0x000008, "Wrong alignment on USpDebugModelViewerModelCtrlComponent");
static_assert(sizeof(USpDebugModelViewerModelCtrlComponent) == 0x0000D0, "Wrong size on USpDebugModelViewerModelCtrlComponent");

// Class SpRuntime.SpDebugModelViewerModelSpawner
// 0x0000 (0x0028 - 0x0028)
class USpDebugModelViewerModelSpawner final : public UBlueprintFunctionLibrary
{
public:
	static class AActor* GetModel(const struct FSpDebugModelViewerModelHandle& InHandle);
	static class USpDebugModelViewerModelCtrlComponent* GetModelCtrlComponent(const struct FSpDebugModelViewerModelHandle& InHandle);
	static struct FSpDebugModelViewerModelHandle GetModelHandle(class AActor* InActor);
	static bool IsManageModel(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpDebugModelViewerModelSpawner">();
	}
	static class USpDebugModelViewerModelSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpDebugModelViewerModelSpawner>();
	}
};
static_assert(alignof(USpDebugModelViewerModelSpawner) == 0x000008, "Wrong alignment on USpDebugModelViewerModelSpawner");
static_assert(sizeof(USpDebugModelViewerModelSpawner) == 0x000028, "Wrong size on USpDebugModelViewerModelSpawner");

// Class SpRuntime.SpDebugModelViewerSpawnCtrlComponent
// 0x00C0 (0x0160 - 0x00A0)
class USpDebugModelViewerSpawnCtrlComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0xA8];                                      // 0x00A0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchResourcePath;                                // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecursiveSearchResourcePath;                    // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEntryToResidentDebugMenuDefault;                // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSpDebugModelViewerModelHandle CreateModel(const class FString& InResourcePath, const struct FTransform& InTransform);
	void DeleteAllModels();
	void DeleteModel(const struct FSpDebugModelViewerModelHandle& InHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpDebugModelViewerSpawnCtrlComponent">();
	}
	static class USpDebugModelViewerSpawnCtrlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpDebugModelViewerSpawnCtrlComponent>();
	}
};
static_assert(alignof(USpDebugModelViewerSpawnCtrlComponent) == 0x000008, "Wrong alignment on USpDebugModelViewerSpawnCtrlComponent");
static_assert(sizeof(USpDebugModelViewerSpawnCtrlComponent) == 0x000160, "Wrong size on USpDebugModelViewerSpawnCtrlComponent");
static_assert(offsetof(USpDebugModelViewerSpawnCtrlComponent, SearchResourcePath) == 0x000148, "Member 'USpDebugModelViewerSpawnCtrlComponent::SearchResourcePath' has a wrong offset!");
static_assert(offsetof(USpDebugModelViewerSpawnCtrlComponent, bIsRecursiveSearchResourcePath) == 0x000158, "Member 'USpDebugModelViewerSpawnCtrlComponent::bIsRecursiveSearchResourcePath' has a wrong offset!");
static_assert(offsetof(USpDebugModelViewerSpawnCtrlComponent, bIsEntryToResidentDebugMenuDefault) == 0x000159, "Member 'USpDebugModelViewerSpawnCtrlComponent::bIsEntryToResidentDebugMenuDefault' has a wrong offset!");

// Class SpRuntime.SpRuntimeEditorSettings
// 0x0018 (0x0040 - 0x0028)
class USpRuntimeEditorSettings final : public UObject
{
public:
	bool                                          bAssertionOutputMessageLogEnable;                  // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssertionOutputMessageLogLimitOverWarningLevel;   // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultWBPAnimationFPS;                            // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpComboBoxStringSettingItem>   ComboBoxStringItemArray;                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpRuntimeEditorSettings">();
	}
	static class USpRuntimeEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpRuntimeEditorSettings>();
	}
};
static_assert(alignof(USpRuntimeEditorSettings) == 0x000008, "Wrong alignment on USpRuntimeEditorSettings");
static_assert(sizeof(USpRuntimeEditorSettings) == 0x000040, "Wrong size on USpRuntimeEditorSettings");
static_assert(offsetof(USpRuntimeEditorSettings, bAssertionOutputMessageLogEnable) == 0x000028, "Member 'USpRuntimeEditorSettings::bAssertionOutputMessageLogEnable' has a wrong offset!");
static_assert(offsetof(USpRuntimeEditorSettings, bAssertionOutputMessageLogLimitOverWarningLevel) == 0x000029, "Member 'USpRuntimeEditorSettings::bAssertionOutputMessageLogLimitOverWarningLevel' has a wrong offset!");
static_assert(offsetof(USpRuntimeEditorSettings, DefaultWBPAnimationFPS) == 0x00002C, "Member 'USpRuntimeEditorSettings::DefaultWBPAnimationFPS' has a wrong offset!");
static_assert(offsetof(USpRuntimeEditorSettings, ComboBoxStringItemArray) == 0x000030, "Member 'USpRuntimeEditorSettings::ComboBoxStringItemArray' has a wrong offset!");

// Class SpRuntime.SpTextBlock
// 0x01C0 (0x0330 - 0x0170)
class USpTextBlock final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0170(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0188(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseColorAndOpacityIndex;                           // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSlateColor>                    ColorAndOpacityList;                               // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x01B0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            StrikeBrush;                                       // 0x0210(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x0300(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x0314(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoWrapText;                                     // 0x0315(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleTextMode;                                   // 0x0316(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_317[0x19];                                     // 0x0317(0x0019)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicFontMaterial();
	class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
	void SetAutoWrapText(bool InAutoTextWrap);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(int32 InIndex, float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetStrikeBrush(const struct FSlateBrush& InStrikeBrush);
	void SetText(const class FText& InText);
	void SetUseColorAndOpacityIndex(int32 InIndex);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpTextBlock">();
	}
	static class USpTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpTextBlock>();
	}
};
static_assert(alignof(USpTextBlock) == 0x000010, "Wrong alignment on USpTextBlock");
static_assert(sizeof(USpTextBlock) == 0x000330, "Wrong size on USpTextBlock");
static_assert(offsetof(USpTextBlock, Text) == 0x000170, "Member 'USpTextBlock::Text' has a wrong offset!");
static_assert(offsetof(USpTextBlock, TextDelegate) == 0x000188, "Member 'USpTextBlock::TextDelegate' has a wrong offset!");
static_assert(offsetof(USpTextBlock, UseColorAndOpacityIndex) == 0x000198, "Member 'USpTextBlock::UseColorAndOpacityIndex' has a wrong offset!");
static_assert(offsetof(USpTextBlock, ColorAndOpacityList) == 0x0001A0, "Member 'USpTextBlock::ColorAndOpacityList' has a wrong offset!");
static_assert(offsetof(USpTextBlock, Font) == 0x0001B0, "Member 'USpTextBlock::Font' has a wrong offset!");
static_assert(offsetof(USpTextBlock, StrikeBrush) == 0x000210, "Member 'USpTextBlock::StrikeBrush' has a wrong offset!");
static_assert(offsetof(USpTextBlock, ShadowOffset) == 0x0002E0, "Member 'USpTextBlock::ShadowOffset' has a wrong offset!");
static_assert(offsetof(USpTextBlock, ShadowColorAndOpacity) == 0x0002F0, "Member 'USpTextBlock::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(USpTextBlock, ShadowColorAndOpacityDelegate) == 0x000300, "Member 'USpTextBlock::ShadowColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(USpTextBlock, MinDesiredWidth) == 0x000310, "Member 'USpTextBlock::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(USpTextBlock, bWrapWithInvalidationPanel) == 0x000314, "Member 'USpTextBlock::bWrapWithInvalidationPanel' has a wrong offset!");
static_assert(offsetof(USpTextBlock, bAutoWrapText) == 0x000315, "Member 'USpTextBlock::bAutoWrapText' has a wrong offset!");
static_assert(offsetof(USpTextBlock, bSimpleTextMode) == 0x000316, "Member 'USpTextBlock::bSimpleTextMode' has a wrong offset!");

// Class SpRuntime.SpUIAutoScrollBox
// 0x0028 (0x0190 - 0x0168)
class USpUIAutoScrollBox final : public UContentWidget
{
public:
	ESpUIScrollDirection                          Direction;                                         // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrollLimit;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWaitTime;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndWaitTime;                                       // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x14];                                     // 0x017C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetScroll(bool bInTickStop);
	void ResetScrollCount();
	void StartScroll();
	void StopScroll(bool bInResetPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIAutoScrollBox">();
	}
	static class USpUIAutoScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIAutoScrollBox>();
	}
};
static_assert(alignof(USpUIAutoScrollBox) == 0x000008, "Wrong alignment on USpUIAutoScrollBox");
static_assert(sizeof(USpUIAutoScrollBox) == 0x000190, "Wrong size on USpUIAutoScrollBox");
static_assert(offsetof(USpUIAutoScrollBox, Direction) == 0x000168, "Member 'USpUIAutoScrollBox::Direction' has a wrong offset!");
static_assert(offsetof(USpUIAutoScrollBox, ScrollLimit) == 0x00016C, "Member 'USpUIAutoScrollBox::ScrollLimit' has a wrong offset!");
static_assert(offsetof(USpUIAutoScrollBox, ScrollSpeed) == 0x000170, "Member 'USpUIAutoScrollBox::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(USpUIAutoScrollBox, StartWaitTime) == 0x000174, "Member 'USpUIAutoScrollBox::StartWaitTime' has a wrong offset!");
static_assert(offsetof(USpUIAutoScrollBox, EndWaitTime) == 0x000178, "Member 'USpUIAutoScrollBox::EndWaitTime' has a wrong offset!");

// Class SpRuntime.SpUIAutoScrollBoxSlot
// 0x0018 (0x0050 - 0x0038)
class USpUIAutoScrollBoxSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A[0x16];                                      // 0x003A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIAutoScrollBoxSlot">();
	}
	static class USpUIAutoScrollBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIAutoScrollBoxSlot>();
	}
};
static_assert(alignof(USpUIAutoScrollBoxSlot) == 0x000008, "Wrong alignment on USpUIAutoScrollBoxSlot");
static_assert(sizeof(USpUIAutoScrollBoxSlot) == 0x000050, "Wrong size on USpUIAutoScrollBoxSlot");
static_assert(offsetof(USpUIAutoScrollBoxSlot, HorizontalAlignment) == 0x000038, "Member 'USpUIAutoScrollBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USpUIAutoScrollBoxSlot, VerticalAlignment) == 0x000039, "Member 'USpUIAutoScrollBoxSlot::VerticalAlignment' has a wrong offset!");

// Class SpRuntime.SpUICircleGauge
// 0x0048 (0x0198 - 0x0150)
class USpUICircleGauge final : public UWidget
{
public:
	bool                                          bGaugeReverse;                                     // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GaugeAngle;                                        // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeMax;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BaseTexture;                                       // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MaskTexture;                                       // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GaugeMaterial;                                     // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x10];                                     // 0x0188(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPercent(const float InPercent);

	float GetPercent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUICircleGauge">();
	}
	static class USpUICircleGauge* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUICircleGauge>();
	}
};
static_assert(alignof(USpUICircleGauge) == 0x000008, "Wrong alignment on USpUICircleGauge");
static_assert(sizeof(USpUICircleGauge) == 0x000198, "Wrong size on USpUICircleGauge");
static_assert(offsetof(USpUICircleGauge, bGaugeReverse) == 0x000150, "Member 'USpUICircleGauge::bGaugeReverse' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, GaugeAngle) == 0x000154, "Member 'USpUICircleGauge::GaugeAngle' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, GaugeMax) == 0x000158, "Member 'USpUICircleGauge::GaugeMax' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, Percent) == 0x00015C, "Member 'USpUICircleGauge::Percent' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, ColorAndOpacity) == 0x000160, "Member 'USpUICircleGauge::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, BaseTexture) == 0x000170, "Member 'USpUICircleGauge::BaseTexture' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, MaskTexture) == 0x000178, "Member 'USpUICircleGauge::MaskTexture' has a wrong offset!");
static_assert(offsetof(USpUICircleGauge, GaugeMaterial) == 0x000180, "Member 'USpUICircleGauge::GaugeMaterial' has a wrong offset!");

// Class SpRuntime.SpUICollisionBox
// 0x0060 (0x01B0 - 0x0150)
class USpUICollisionBox final : public UWidget
{
public:
	bool                                          IsKeyboardFocusable;                               // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                BindWidget;                                        // 0x0158(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CollisionLeftTop;                                  // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CollisionRightTop;                                 // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CollisionLeftBottom;                               // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CollisionRightBottom;                              // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x10];                                     // 0x01A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCollisionPoint(const struct FVector2D& LeftTop, const struct FVector2D& RightTop, const struct FVector2D& LeftBottom, const struct FVector2D& RightBottom);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUICollisionBox">();
	}
	static class USpUICollisionBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUICollisionBox>();
	}
};
static_assert(alignof(USpUICollisionBox) == 0x000008, "Wrong alignment on USpUICollisionBox");
static_assert(sizeof(USpUICollisionBox) == 0x0001B0, "Wrong size on USpUICollisionBox");
static_assert(offsetof(USpUICollisionBox, IsKeyboardFocusable) == 0x000150, "Member 'USpUICollisionBox::IsKeyboardFocusable' has a wrong offset!");
static_assert(offsetof(USpUICollisionBox, BindWidget) == 0x000158, "Member 'USpUICollisionBox::BindWidget' has a wrong offset!");
static_assert(offsetof(USpUICollisionBox, CollisionLeftTop) == 0x000160, "Member 'USpUICollisionBox::CollisionLeftTop' has a wrong offset!");
static_assert(offsetof(USpUICollisionBox, CollisionRightTop) == 0x000170, "Member 'USpUICollisionBox::CollisionRightTop' has a wrong offset!");
static_assert(offsetof(USpUICollisionBox, CollisionLeftBottom) == 0x000180, "Member 'USpUICollisionBox::CollisionLeftBottom' has a wrong offset!");
static_assert(offsetof(USpUICollisionBox, CollisionRightBottom) == 0x000190, "Member 'USpUICollisionBox::CollisionRightBottom' has a wrong offset!");

// Class SpRuntime.SpUIFixedScrollBox
// 0x01E8 (0x0350 - 0x0168)
class USpUIFixedScrollBox final : public UPanelWidget
{
public:
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bScrollLoop;                                       // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOrientation                                  Orientation;                                       // 0x0179(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollAmount;                                      // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysShowScrollBar;                              // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0xF];                                      // 0x0181(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BarBrush;                                          // 0x0190(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ThumbBrush;                                        // 0x0260(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     EffectMaterial;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BarThickness;                                      // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThumbThickness;                                    // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                BarMargin;                                         // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIFixedScrollBox">();
	}
	static class USpUIFixedScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIFixedScrollBox>();
	}
};
static_assert(alignof(USpUIFixedScrollBox) == 0x000010, "Wrong alignment on USpUIFixedScrollBox");
static_assert(sizeof(USpUIFixedScrollBox) == 0x000350, "Wrong size on USpUIFixedScrollBox");
static_assert(offsetof(USpUIFixedScrollBox, bScrollLoop) == 0x000178, "Member 'USpUIFixedScrollBox::bScrollLoop' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, Orientation) == 0x000179, "Member 'USpUIFixedScrollBox::Orientation' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, ScrollAmount) == 0x00017C, "Member 'USpUIFixedScrollBox::ScrollAmount' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, bAlwaysShowScrollBar) == 0x000180, "Member 'USpUIFixedScrollBox::bAlwaysShowScrollBar' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, BarBrush) == 0x000190, "Member 'USpUIFixedScrollBox::BarBrush' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, ThumbBrush) == 0x000260, "Member 'USpUIFixedScrollBox::ThumbBrush' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, EffectMaterial) == 0x000330, "Member 'USpUIFixedScrollBox::EffectMaterial' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, BarThickness) == 0x000338, "Member 'USpUIFixedScrollBox::BarThickness' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, ThumbThickness) == 0x00033C, "Member 'USpUIFixedScrollBox::ThumbThickness' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBox, BarMargin) == 0x000340, "Member 'USpUIFixedScrollBox::BarMargin' has a wrong offset!");

// Class SpRuntime.SpUIFixedScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class USpUIFixedScrollBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0xE];                                       // 0x004A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIFixedScrollBoxSlot">();
	}
	static class USpUIFixedScrollBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIFixedScrollBoxSlot>();
	}
};
static_assert(alignof(USpUIFixedScrollBoxSlot) == 0x000008, "Wrong alignment on USpUIFixedScrollBoxSlot");
static_assert(sizeof(USpUIFixedScrollBoxSlot) == 0x000058, "Wrong size on USpUIFixedScrollBoxSlot");
static_assert(offsetof(USpUIFixedScrollBoxSlot, Padding) == 0x000038, "Member 'USpUIFixedScrollBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBoxSlot, HorizontalAlignment) == 0x000048, "Member 'USpUIFixedScrollBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USpUIFixedScrollBoxSlot, VerticalAlignment) == 0x000049, "Member 'USpUIFixedScrollBoxSlot::VerticalAlignment' has a wrong offset!");

// Class SpRuntime.SpUIGauge
// 0x0130 (0x0280 - 0x0150)
class USpUIGauge final : public UWidget
{
public:
	EProgressBarFillType                          FillType;                                          // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                BarMargin;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0180(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             BaseTexture;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MaskTexture;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GaugeMaterial;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x18];                                     // 0x0268(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPercent(const float InPercent);

	float GetPercent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIGauge">();
	}
	static class USpUIGauge* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIGauge>();
	}
};
static_assert(alignof(USpUIGauge) == 0x000010, "Wrong alignment on USpUIGauge");
static_assert(sizeof(USpUIGauge) == 0x000280, "Wrong size on USpUIGauge");
static_assert(offsetof(USpUIGauge, FillType) == 0x000150, "Member 'USpUIGauge::FillType' has a wrong offset!");
static_assert(offsetof(USpUIGauge, Percent) == 0x000154, "Member 'USpUIGauge::Percent' has a wrong offset!");
static_assert(offsetof(USpUIGauge, BarMargin) == 0x000158, "Member 'USpUIGauge::BarMargin' has a wrong offset!");
static_assert(offsetof(USpUIGauge, ColorAndOpacity) == 0x000168, "Member 'USpUIGauge::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(USpUIGauge, BackgroundBrush) == 0x000180, "Member 'USpUIGauge::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(USpUIGauge, BaseTexture) == 0x000250, "Member 'USpUIGauge::BaseTexture' has a wrong offset!");
static_assert(offsetof(USpUIGauge, MaskTexture) == 0x000258, "Member 'USpUIGauge::MaskTexture' has a wrong offset!");
static_assert(offsetof(USpUIGauge, GaugeMaterial) == 0x000260, "Member 'USpUIGauge::GaugeMaterial' has a wrong offset!");

// Class SpRuntime.SpUIMultiCollisionBox
// 0x0028 (0x0178 - 0x0150)
class USpUIMultiCollisionBox final : public UWidget
{
public:
	bool                                          IsKeyboardFocusable;                               // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FirstFocusCollisionIndex;                          // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpUICollisionBoxData>          Collisions;                                        // 0x0158(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCollisionPoint(int32 InIndex, const struct FVector2D& LeftTop, const struct FVector2D& RightTop, const struct FVector2D& LeftBottom, const struct FVector2D& RightBottom);
	void SetFirstFocusCollision(int32 InIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIMultiCollisionBox">();
	}
	static class USpUIMultiCollisionBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIMultiCollisionBox>();
	}
};
static_assert(alignof(USpUIMultiCollisionBox) == 0x000008, "Wrong alignment on USpUIMultiCollisionBox");
static_assert(sizeof(USpUIMultiCollisionBox) == 0x000178, "Wrong size on USpUIMultiCollisionBox");
static_assert(offsetof(USpUIMultiCollisionBox, IsKeyboardFocusable) == 0x000150, "Member 'USpUIMultiCollisionBox::IsKeyboardFocusable' has a wrong offset!");
static_assert(offsetof(USpUIMultiCollisionBox, FirstFocusCollisionIndex) == 0x000154, "Member 'USpUIMultiCollisionBox::FirstFocusCollisionIndex' has a wrong offset!");
static_assert(offsetof(USpUIMultiCollisionBox, Collisions) == 0x000158, "Member 'USpUIMultiCollisionBox::Collisions' has a wrong offset!");

// Class SpRuntime.SpUIParticle
// 0x00C8 (0x0218 - 0x0150)
class USpUIParticle final : public UWidget
{
public:
	TArray<struct FSlateBrush>                    BrushArray;                                        // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoStart;                                        // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGeometryFollow;                                   // 0x0161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpUIParticleType                             LoopType;                                          // 0x0162(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0164(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AreaSize;                                          // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleMax;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickMin;                                           // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickMax;                                           // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMin;                                       // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMax;                                       // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveMin;                                           // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveMax;                                           // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpUIParticleRotateType                       RotateType;                                        // 0x01AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RotateSpeedMin;                                    // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotateSpeedMax;                                    // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InjectionAngle;                                    // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InjectionHalfArc;                                  // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeBegin;                                   // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeEnd;                                     // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginMove;                                         // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMove;                                           // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleChangeBegin;                                  // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleChangeEnd;                                    // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginScale;                                        // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeBegin;                                  // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeEnd;                                    // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BeginColor;                                        // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndColor;                                          // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x10];                                     // 0x0208(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetParticleInjectionAngle(const int32 InAngle, const int32 InHalfArc);
	void SetParticlePosition(const struct FVector2D& InPosition);
	void StartParticle();
	void StopParticle(const bool bInForce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIParticle">();
	}
	static class USpUIParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIParticle>();
	}
};
static_assert(alignof(USpUIParticle) == 0x000008, "Wrong alignment on USpUIParticle");
static_assert(sizeof(USpUIParticle) == 0x000218, "Wrong size on USpUIParticle");
static_assert(offsetof(USpUIParticle, BrushArray) == 0x000150, "Member 'USpUIParticle::BrushArray' has a wrong offset!");
static_assert(offsetof(USpUIParticle, bAutoStart) == 0x000160, "Member 'USpUIParticle::bAutoStart' has a wrong offset!");
static_assert(offsetof(USpUIParticle, bGeometryFollow) == 0x000161, "Member 'USpUIParticle::bGeometryFollow' has a wrong offset!");
static_assert(offsetof(USpUIParticle, LoopType) == 0x000162, "Member 'USpUIParticle::LoopType' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ColorAndOpacity) == 0x000164, "Member 'USpUIParticle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(USpUIParticle, AreaSize) == 0x000178, "Member 'USpUIParticle::AreaSize' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ParticleMax) == 0x000188, "Member 'USpUIParticle::ParticleMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, TickMin) == 0x00018C, "Member 'USpUIParticle::TickMin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, TickMax) == 0x000190, "Member 'USpUIParticle::TickMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, LifeTimeMin) == 0x000194, "Member 'USpUIParticle::LifeTimeMin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, LifeTimeMax) == 0x000198, "Member 'USpUIParticle::LifeTimeMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, MoveMin) == 0x00019C, "Member 'USpUIParticle::MoveMin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, MoveMax) == 0x0001A0, "Member 'USpUIParticle::MoveMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ScaleMin) == 0x0001A4, "Member 'USpUIParticle::ScaleMin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ScaleMax) == 0x0001A8, "Member 'USpUIParticle::ScaleMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, RotateType) == 0x0001AC, "Member 'USpUIParticle::RotateType' has a wrong offset!");
static_assert(offsetof(USpUIParticle, RotateSpeedMin) == 0x0001B0, "Member 'USpUIParticle::RotateSpeedMin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, RotateSpeedMax) == 0x0001B4, "Member 'USpUIParticle::RotateSpeedMax' has a wrong offset!");
static_assert(offsetof(USpUIParticle, InjectionAngle) == 0x0001B8, "Member 'USpUIParticle::InjectionAngle' has a wrong offset!");
static_assert(offsetof(USpUIParticle, InjectionHalfArc) == 0x0001BC, "Member 'USpUIParticle::InjectionHalfArc' has a wrong offset!");
static_assert(offsetof(USpUIParticle, MoveChangeBegin) == 0x0001C0, "Member 'USpUIParticle::MoveChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, MoveChangeEnd) == 0x0001C4, "Member 'USpUIParticle::MoveChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUIParticle, BeginMove) == 0x0001C8, "Member 'USpUIParticle::BeginMove' has a wrong offset!");
static_assert(offsetof(USpUIParticle, EndMove) == 0x0001CC, "Member 'USpUIParticle::EndMove' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ScaleChangeBegin) == 0x0001D0, "Member 'USpUIParticle::ScaleChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ScaleChangeEnd) == 0x0001D4, "Member 'USpUIParticle::ScaleChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUIParticle, BeginScale) == 0x0001D8, "Member 'USpUIParticle::BeginScale' has a wrong offset!");
static_assert(offsetof(USpUIParticle, EndScale) == 0x0001DC, "Member 'USpUIParticle::EndScale' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ColorChangeBegin) == 0x0001E0, "Member 'USpUIParticle::ColorChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUIParticle, ColorChangeEnd) == 0x0001E4, "Member 'USpUIParticle::ColorChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUIParticle, BeginColor) == 0x0001E8, "Member 'USpUIParticle::BeginColor' has a wrong offset!");
static_assert(offsetof(USpUIParticle, EndColor) == 0x0001F8, "Member 'USpUIParticle::EndColor' has a wrong offset!");

// Class SpRuntime.SpUIRichTextIcon
// 0x01B8 (0x01E0 - 0x0028)
class USpUIRichTextIcon : public URichTextBlockDecorator
{
public:
	TMap<class FName, struct FIconSetData>        PlatformIconSet;                                   // 0x0028(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UDataTable*>          PlatformIconSetObj;                                // 0x0078(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              WindowsIconSet;                                    // 0x00C8(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             WindowsIconSetObj;                                 // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              PS4IconSet;                                        // 0x0100(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             PS4IconSetObj;                                     // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              XBoxIconSet;                                       // 0x0138(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             XBoxIconSetObj;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              SwitchIconSet;                                     // 0x0170(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             SwitchIconSetObj;                                  // 0x01A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              IconMaskSet;                                       // 0x01A8(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             IconMaskSetObj;                                    // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIRichTextIcon">();
	}
	static class USpUIRichTextIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIRichTextIcon>();
	}
};
static_assert(alignof(USpUIRichTextIcon) == 0x000008, "Wrong alignment on USpUIRichTextIcon");
static_assert(sizeof(USpUIRichTextIcon) == 0x0001E0, "Wrong size on USpUIRichTextIcon");
static_assert(offsetof(USpUIRichTextIcon, PlatformIconSet) == 0x000028, "Member 'USpUIRichTextIcon::PlatformIconSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, PlatformIconSetObj) == 0x000078, "Member 'USpUIRichTextIcon::PlatformIconSetObj' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, WindowsIconSet) == 0x0000C8, "Member 'USpUIRichTextIcon::WindowsIconSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, WindowsIconSetObj) == 0x0000F8, "Member 'USpUIRichTextIcon::WindowsIconSetObj' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, PS4IconSet) == 0x000100, "Member 'USpUIRichTextIcon::PS4IconSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, PS4IconSetObj) == 0x000130, "Member 'USpUIRichTextIcon::PS4IconSetObj' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, XBoxIconSet) == 0x000138, "Member 'USpUIRichTextIcon::XBoxIconSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, XBoxIconSetObj) == 0x000168, "Member 'USpUIRichTextIcon::XBoxIconSetObj' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, SwitchIconSet) == 0x000170, "Member 'USpUIRichTextIcon::SwitchIconSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, SwitchIconSetObj) == 0x0001A0, "Member 'USpUIRichTextIcon::SwitchIconSetObj' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, IconMaskSet) == 0x0001A8, "Member 'USpUIRichTextIcon::IconMaskSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextIcon, IconMaskSetObj) == 0x0001D8, "Member 'USpUIRichTextIcon::IconMaskSetObj' has a wrong offset!");

// Class SpRuntime.SpUIRichTextReference
// 0x0010 (0x0038 - 0x0028)
class USpUIRichTextReference final : public URichTextBlockDecorator
{
public:
	class UDataTable*                             NameSet;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             PlaceSet;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIRichTextReference">();
	}
	static class USpUIRichTextReference* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIRichTextReference>();
	}
};
static_assert(alignof(USpUIRichTextReference) == 0x000008, "Wrong alignment on USpUIRichTextReference");
static_assert(sizeof(USpUIRichTextReference) == 0x000038, "Wrong size on USpUIRichTextReference");
static_assert(offsetof(USpUIRichTextReference, NameSet) == 0x000028, "Member 'USpUIRichTextReference::NameSet' has a wrong offset!");
static_assert(offsetof(USpUIRichTextReference, PlaceSet) == 0x000030, "Member 'USpUIRichTextReference::PlaceSet' has a wrong offset!");

// Class SpRuntime.SpUIScrollBox
// 0x0398 (0x0500 - 0x0168)
class USpUIScrollBox : public UPanelWidget
{
public:
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bScrollLoop;                                       // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFocusKeepCenter;                                  // 0x0179(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOrientation                                  Orientation;                                       // 0x017A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17B[0x1];                                      // 0x017B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollAmount;                                      // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysShowScrollBar;                              // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0xF];                                      // 0x0181(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BarBrush;                                          // 0x0190(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseHoverAndDraggedThumb;                          // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ThumbBrush;                                        // 0x0270(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ThumbBrushHovered;                                 // 0x0340(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ThumbBrushDragged;                                 // 0x0410(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         BarThickness;                                      // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThumbThickness;                                    // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                BarMargin;                                         // 0x04E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     EffectMaterial;                                    // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FVector2D GetOrientationalContentSize();
	float GetScrollOffset();
	float GetScrollOffsetRatio();
	void ScrollAmountValue(ESpUIScrollDirection InDirection);
	void ScrollDirectValue(ESpUIScrollDirection InDirection, float InScrollValue);
	void SetScrollOffset(float InNewOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIScrollBox">();
	}
	static class USpUIScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIScrollBox>();
	}
};
static_assert(alignof(USpUIScrollBox) == 0x000010, "Wrong alignment on USpUIScrollBox");
static_assert(sizeof(USpUIScrollBox) == 0x000500, "Wrong size on USpUIScrollBox");
static_assert(offsetof(USpUIScrollBox, bScrollLoop) == 0x000178, "Member 'USpUIScrollBox::bScrollLoop' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, bFocusKeepCenter) == 0x000179, "Member 'USpUIScrollBox::bFocusKeepCenter' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, Orientation) == 0x00017A, "Member 'USpUIScrollBox::Orientation' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, ScrollAmount) == 0x00017C, "Member 'USpUIScrollBox::ScrollAmount' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, bAlwaysShowScrollBar) == 0x000180, "Member 'USpUIScrollBox::bAlwaysShowScrollBar' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, BarBrush) == 0x000190, "Member 'USpUIScrollBox::BarBrush' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, bUseHoverAndDraggedThumb) == 0x000260, "Member 'USpUIScrollBox::bUseHoverAndDraggedThumb' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, ThumbBrush) == 0x000270, "Member 'USpUIScrollBox::ThumbBrush' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, ThumbBrushHovered) == 0x000340, "Member 'USpUIScrollBox::ThumbBrushHovered' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, ThumbBrushDragged) == 0x000410, "Member 'USpUIScrollBox::ThumbBrushDragged' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, BarThickness) == 0x0004E0, "Member 'USpUIScrollBox::BarThickness' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, ThumbThickness) == 0x0004E4, "Member 'USpUIScrollBox::ThumbThickness' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, BarMargin) == 0x0004E8, "Member 'USpUIScrollBox::BarMargin' has a wrong offset!");
static_assert(offsetof(USpUIScrollBox, EffectMaterial) == 0x0004F8, "Member 'USpUIScrollBox::EffectMaterial' has a wrong offset!");

// Class SpRuntime.SpUIScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class USpUIScrollBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0xE];                                       // 0x004A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIScrollBoxSlot">();
	}
	static class USpUIScrollBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIScrollBoxSlot>();
	}
};
static_assert(alignof(USpUIScrollBoxSlot) == 0x000008, "Wrong alignment on USpUIScrollBoxSlot");
static_assert(sizeof(USpUIScrollBoxSlot) == 0x000058, "Wrong size on USpUIScrollBoxSlot");
static_assert(offsetof(USpUIScrollBoxSlot, Padding) == 0x000038, "Member 'USpUIScrollBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(USpUIScrollBoxSlot, HorizontalAlignment) == 0x000048, "Member 'USpUIScrollBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USpUIScrollBoxSlot, VerticalAlignment) == 0x000049, "Member 'USpUIScrollBoxSlot::VerticalAlignment' has a wrong offset!");

// Class SpRuntime.SpUITextParticle
// 0x0118 (0x0268 - 0x0150)
class USpUITextParticle final : public UWidget
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0150(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           TextArray;                                         // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoStart;                                        // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGeometryFollow;                                   // 0x01B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpUIParticleType                             LoopType;                                          // 0x01BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x01BC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AreaSize;                                          // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleMax;                                       // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickMin;                                           // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickMax;                                           // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMin;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMax;                                       // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveMin;                                           // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveMax;                                           // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InjectionAngle;                                    // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InjectionHalfArc;                                  // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeBegin;                                   // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeEnd;                                     // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginMove;                                         // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndMove;                                           // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleChangeBegin;                                  // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleChangeEnd;                                    // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginScale;                                        // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScale;                                          // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeBegin;                                  // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorChangeEnd;                                    // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BeginColor;                                        // 0x0234(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndColor;                                          // 0x0244(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x14];                                     // 0x0254(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetParticleInjectionAngle(const int32 InAngle, const int32 InHalfArc);
	void SetParticlePosition(const struct FVector2D& InPosition);
	void SetParticleTextArray(const TArray<class FText>& InTextArray);
	void StartParticle();
	void StopParticle(const bool bInForce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUITextParticle">();
	}
	static class USpUITextParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUITextParticle>();
	}
};
static_assert(alignof(USpUITextParticle) == 0x000008, "Wrong alignment on USpUITextParticle");
static_assert(sizeof(USpUITextParticle) == 0x000268, "Wrong size on USpUITextParticle");
static_assert(offsetof(USpUITextParticle, Font) == 0x000150, "Member 'USpUITextParticle::Font' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, TextArray) == 0x0001A8, "Member 'USpUITextParticle::TextArray' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, bAutoStart) == 0x0001B8, "Member 'USpUITextParticle::bAutoStart' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, bGeometryFollow) == 0x0001B9, "Member 'USpUITextParticle::bGeometryFollow' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, LoopType) == 0x0001BA, "Member 'USpUITextParticle::LoopType' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ColorAndOpacity) == 0x0001BC, "Member 'USpUITextParticle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, AreaSize) == 0x0001D0, "Member 'USpUITextParticle::AreaSize' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ParticleMax) == 0x0001E0, "Member 'USpUITextParticle::ParticleMax' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, TickMin) == 0x0001E4, "Member 'USpUITextParticle::TickMin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, TickMax) == 0x0001E8, "Member 'USpUITextParticle::TickMax' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, LifeTimeMin) == 0x0001EC, "Member 'USpUITextParticle::LifeTimeMin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, LifeTimeMax) == 0x0001F0, "Member 'USpUITextParticle::LifeTimeMax' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, MoveMin) == 0x0001F4, "Member 'USpUITextParticle::MoveMin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, MoveMax) == 0x0001F8, "Member 'USpUITextParticle::MoveMax' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ScaleMin) == 0x0001FC, "Member 'USpUITextParticle::ScaleMin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ScaleMax) == 0x000200, "Member 'USpUITextParticle::ScaleMax' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, InjectionAngle) == 0x000204, "Member 'USpUITextParticle::InjectionAngle' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, InjectionHalfArc) == 0x000208, "Member 'USpUITextParticle::InjectionHalfArc' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, MoveChangeBegin) == 0x00020C, "Member 'USpUITextParticle::MoveChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, MoveChangeEnd) == 0x000210, "Member 'USpUITextParticle::MoveChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, BeginMove) == 0x000214, "Member 'USpUITextParticle::BeginMove' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, EndMove) == 0x000218, "Member 'USpUITextParticle::EndMove' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ScaleChangeBegin) == 0x00021C, "Member 'USpUITextParticle::ScaleChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ScaleChangeEnd) == 0x000220, "Member 'USpUITextParticle::ScaleChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, BeginScale) == 0x000224, "Member 'USpUITextParticle::BeginScale' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, EndScale) == 0x000228, "Member 'USpUITextParticle::EndScale' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ColorChangeBegin) == 0x00022C, "Member 'USpUITextParticle::ColorChangeBegin' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, ColorChangeEnd) == 0x000230, "Member 'USpUITextParticle::ColorChangeEnd' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, BeginColor) == 0x000234, "Member 'USpUITextParticle::BeginColor' has a wrong offset!");
static_assert(offsetof(USpUITextParticle, EndColor) == 0x000244, "Member 'USpUITextParticle::EndColor' has a wrong offset!");

// Class SpRuntime.SpUIWindow
// 0x0218 (0x0380 - 0x0168)
class USpUIWindow final : public UContentWidget
{
public:
	bool                                          bAutoSize;                                         // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WindowSize;                                        // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasTitleBar;                                       // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WindowTitle;                                       // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            TitleBarBrush;                                     // 0x01A0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ContentBoxBrush;                                   // 0x0270(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnMinimizeClickedEvent;                            // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnMaximizeClickedEvent;                            // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnCloseClickedEvent;                               // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x10];                                     // 0x0370(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestroyWindow();
	void SetWindowPosition(const struct FVector2D& InPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIWindow">();
	}
	static class USpUIWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIWindow>();
	}
};
static_assert(alignof(USpUIWindow) == 0x000010, "Wrong alignment on USpUIWindow");
static_assert(sizeof(USpUIWindow) == 0x000380, "Wrong size on USpUIWindow");
static_assert(offsetof(USpUIWindow, bAutoSize) == 0x000168, "Member 'USpUIWindow::bAutoSize' has a wrong offset!");
static_assert(offsetof(USpUIWindow, WindowSize) == 0x000170, "Member 'USpUIWindow::WindowSize' has a wrong offset!");
static_assert(offsetof(USpUIWindow, HasTitleBar) == 0x000180, "Member 'USpUIWindow::HasTitleBar' has a wrong offset!");
static_assert(offsetof(USpUIWindow, WindowTitle) == 0x000188, "Member 'USpUIWindow::WindowTitle' has a wrong offset!");
static_assert(offsetof(USpUIWindow, TitleBarBrush) == 0x0001A0, "Member 'USpUIWindow::TitleBarBrush' has a wrong offset!");
static_assert(offsetof(USpUIWindow, ContentBoxBrush) == 0x000270, "Member 'USpUIWindow::ContentBoxBrush' has a wrong offset!");
static_assert(offsetof(USpUIWindow, OnMinimizeClickedEvent) == 0x000340, "Member 'USpUIWindow::OnMinimizeClickedEvent' has a wrong offset!");
static_assert(offsetof(USpUIWindow, OnMaximizeClickedEvent) == 0x000350, "Member 'USpUIWindow::OnMaximizeClickedEvent' has a wrong offset!");
static_assert(offsetof(USpUIWindow, OnCloseClickedEvent) == 0x000360, "Member 'USpUIWindow::OnCloseClickedEvent' has a wrong offset!");

// Class SpRuntime.SpUIWindowSlot
// 0x0010 (0x0048 - 0x0038)
class USpUIWindowSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpUIWindowSlot">();
	}
	static class USpUIWindowSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpUIWindowSlot>();
	}
};
static_assert(alignof(USpUIWindowSlot) == 0x000008, "Wrong alignment on USpUIWindowSlot");
static_assert(sizeof(USpUIWindowSlot) == 0x000048, "Wrong size on USpUIWindowSlot");

}

