#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterLocomotionSubBlastDash

#include "Basic.hpp"

#include "ECharacterLocomotionEventType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.CheckAndStart
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_CheckAndStart final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Start_NewParam;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndStart_IsStarted;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_CheckAndStart");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart) == 0x000010, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_CheckAndStart");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckAndStart::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckAndStart::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart, IsStarted) == 0x000009, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckAndStart::IsStarted' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart, CallFunc_Start_NewParam) == 0x00000A, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckAndStart::CallFunc_Start_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckAndStart, CallFunc_CheckAndStart_IsStarted) == 0x00000B, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckAndStart::CallFunc_CheckAndStart_IsStarted' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.CheckHomingEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd final
{
public:
	double                                        InDeltaSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsCanChase;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnd;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd) == 0x000010, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd, InDeltaSeconds) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd, InIsCanChase) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd::InIsCanChase' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd, IsEnd) == 0x000009, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckHomingEnd::IsEnd' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.CheckHomingEndSP
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP, IsEnd) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_CheckHomingEndSP::IsEnd' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.ConsumeSPHomingIN
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingIN::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.ConsumeSPHomingLP
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_ConsumeSPHomingLP::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.GetHomingStateMovementParameter
// 0x0100 (0x0100 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter final
{
public:
	EKoratDragonHomingState                       InStatus;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseParameter;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter MovementParameter;                                 // 0x0008(0x0020)(Parm, OutParm, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable;                              // 0x0030(0x0020)(NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlastMoveSpeed_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter Temp_struct_Variable_1;                            // 0x0068(0x0020)(NoDestructor)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default;                             // 0x0090(0x0020)(NoDestructor)
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_Select_Default_1;                           // 0x00B0(0x0020)(NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratCharacterDataDragonDashMovementParameter K2Node_SetFieldsInStruct_StructOut;                // 0x00D8(0x0020)(NoDestructor)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter) == 0x000100, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, InStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::InStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, IsUseParameter) == 0x000001, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::IsUseParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, MovementParameter) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::MovementParameter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_bool_Variable) == 0x000028, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_struct_Variable) == 0x000030, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_bool_Variable_1) == 0x000050, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_bool_Variable_2) == 0x000051, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, CallFunc_GetSSCharacter_SSCharacter) == 0x000058, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, CallFunc_GetBlastMoveSpeed_ReturnValue) == 0x000060, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::CallFunc_GetBlastMoveSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000064, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_struct_Variable_1) == 0x000068, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, Temp_byte_Variable) == 0x000088, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, K2Node_Select_Default) == 0x000090, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, K2Node_Select_Default_1) == 0x0000B0, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, K2Node_Select_Default_2) == 0x0000D0, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, K2Node_SetFieldsInStruct_StructOut) == 0x0000D8, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000F8, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetHomingStateMovementParameter::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.GetLocomotionDetailStatus
// 0x001B (0x001B - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus final
{
public:
	EKoratCharacterLocomotionDetailStatus         LocomotionDetailStatus;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_7;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_8;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_9;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_10;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_11;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratBlastSlotType                           Temp_byte_Variable_12;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_13;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_14;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_15;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable_16;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_17;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_18;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_19;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_20;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         Temp_byte_Variable_21;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_1;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_2;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratCharacterLocomotionDetailStatus         K2Node_Select_Default_3;                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus) == 0x00001B, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, LocomotionDetailStatus) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::LocomotionDetailStatus' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_1) == 0x000002, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_2) == 0x000003, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_3) == 0x000004, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_4) == 0x000005, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_5) == 0x000006, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_6) == 0x000007, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_7) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_8) == 0x000009, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_9) == 0x00000A, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_10) == 0x00000B, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_11) == 0x00000C, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_12) == 0x00000D, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_13) == 0x00000E, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_14) == 0x00000F, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_15) == 0x000010, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_16) == 0x000011, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_17) == 0x000012, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_18) == 0x000013, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_19) == 0x000014, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_20) == 0x000015, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, Temp_byte_Variable_21) == 0x000016, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::Temp_byte_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, K2Node_Select_Default) == 0x000017, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, K2Node_Select_Default_1) == 0x000018, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, K2Node_Select_Default_2) == 0x000019, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus, K2Node_Select_Default_3) == 0x00001A, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetLocomotionDetailStatus::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.GetRunningAction
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_GetRunningAction final
{
public:
	struct FKoratActionDataList                   RunningAction;                                     // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CallFunc_GetSSCharacter_SSCharacter;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKoratActionDataList                   CallFunc_GetBlastAction_ReturnValue;               // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_GetRunningAction) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_GetRunningAction");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_GetRunningAction) == 0x000018, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_GetRunningAction");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningAction, RunningAction) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningAction::RunningAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningAction, CallFunc_GetSSCharacter_SSCharacter) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningAction::CallFunc_GetSSCharacter_SSCharacter' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningAction, CallFunc_GetBlastAction_ReturnValue) == 0x000010, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningAction::CallFunc_GetBlastAction_ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.GetRunningSection
// 0x003C (0x003C - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_GetRunningSection final
{
public:
	class FName                                   RunningSection;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKoratDragonHomingState                       Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection) == 0x000004, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_GetRunningSection");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection) == 0x00003C, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_GetRunningSection");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, RunningSection) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::RunningSection' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_byte_Variable) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_name_Variable) == 0x00000C, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_name_Variable_1) == 0x000014, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_name_Variable_2) == 0x00001C, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_name_Variable_3) == 0x000024, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, Temp_name_Variable_4) == 0x00002C, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_GetRunningSection, K2Node_Select_Default) == 0x000034, "Member 'BP_CharacterLocomotionSubBlastDash_C_GetRunningSection::K2Node_Select_Default' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.IsCanHomingChase
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase, ReturnValue) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_IsCanHomingChase::ReturnValue' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.IsEnableAction
// 0x0002 (0x0002 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_IsEnableAction final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableAction_IsEnable;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_IsEnableAction) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_IsEnableAction");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_IsEnableAction) == 0x000002, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_IsEnableAction");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_IsEnableAction, IsEnable) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_IsEnableAction::IsEnable' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_IsEnableAction, CallFunc_IsEnableAction_IsEnable) == 0x000001, "Member 'BP_CharacterLocomotionSubBlastDash_C_IsEnableAction::CallFunc_IsEnableAction_IsEnable' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.OnStopBlastDash
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash) == 0x000010, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash, CallFunc_Update_NewParam) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_OnStopBlastDash::CallFunc_Update_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.SetBlastSlotType
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType final
{
public:
	EKoratBlastSlotType                           InBlastSlotType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType, InBlastSlotType) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_SetBlastSlotType::InBlastSlotType' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.Start
// 0x0040 (0x0040 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_Start final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InInSkip;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ConsumeSPHomingIN_IsSuccessfully;         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDashInputVector_OutInputVector;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDashInputVector_OutIsInputNeutral;     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_Start) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_Start");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_Start) == 0x000040, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_Start");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, InInSkip) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::InInSkip' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, NewParam) == 0x000009, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, CallFunc_ConsumeSPHomingIN_IsSuccessfully) == 0x00000A, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::CallFunc_ConsumeSPHomingIN_IsSuccessfully' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000010, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, CallFunc_GetLocomotionComponent_LocomotionComponent_1) == 0x000018, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::CallFunc_GetLocomotionComponent_LocomotionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, CallFunc_GetDashInputVector_OutInputVector) == 0x000020, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::CallFunc_GetDashInputVector_OutInputVector' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Start, CallFunc_GetDashInputVector_OutIsInputNeutral) == 0x000038, "Member 'BP_CharacterLocomotionSubBlastDash_C_Start::CallFunc_GetDashInputVector_OutIsInputNeutral' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.StartCheckSPConsumableHomingIN
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN final
{
public:
	bool                                          IsOK;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN, IsOK) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_StartCheckSPConsumableHomingIN::IsOK' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.Update
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_Update final
{
public:
	class UBP_CharacterLocomotionComponent_C*     InLocomotionComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ECharacterLocomotionEventType                 InEventType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InDeltaSeconds;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_NewParam;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_Update) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_Update");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_Update) == 0x000020, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_Update");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Update, InLocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_Update::InLocomotionComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Update, InEventType) == 0x000008, "Member 'BP_CharacterLocomotionSubBlastDash_C_Update::InEventType' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Update, InDeltaSeconds) == 0x000010, "Member 'BP_CharacterLocomotionSubBlastDash_C_Update::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Update, NewParam) == 0x000018, "Member 'BP_CharacterLocomotionSubBlastDash_C_Update::NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_Update, CallFunc_Update_NewParam) == 0x000019, "Member 'BP_CharacterLocomotionSubBlastDash_C_Update::CallFunc_Update_NewParam' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.UpdateHomingLPKey Pressed
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed final
{
public:
	bool                                          IsSuccessfully;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed) == 0x000001, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed) == 0x000001, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed, IsSuccessfully) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPKey_Pressed::IsSuccessfully' has a wrong offset!");

// Function BP_CharacterLocomotionSubBlastDash.BP_CharacterLocomotionSubBlastDash_C.UpdateHomingLPStop
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop final
{
public:
	class UBP_CharacterLocomotionComponent_C*     CallFunc_GetLocomotionComponent_LocomotionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop) == 0x000008, "Wrong alignment on BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop");
static_assert(sizeof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop) == 0x000008, "Wrong size on BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop");
static_assert(offsetof(BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop, CallFunc_GetLocomotionComponent_LocomotionComponent) == 0x000000, "Member 'BP_CharacterLocomotionSubBlastDash_C_UpdateHomingLPStop::CallFunc_GetLocomotionComponent_LocomotionComponent' has a wrong offset!");

}

