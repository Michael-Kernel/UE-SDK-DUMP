#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugBlowActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SS_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DebugBlowActor.BP_DebugBlowActor_C
// 0x03B8 (0x0658 - 0x02A0)
class ABP_DebugBlowActor_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CharacterMy;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ASSCharacter*                           CharacterTarget;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitBlowStart;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFrontHit;                                         // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKoratDamageReactionDataList           DamageReactionDataList;                            // 0x02C4(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementDataList          HitBackMovementDataList;                           // 0x02CC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBlowStart;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASSCharacter*                           CharacterBlow;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FKoratHitBackMovementData              HitBackMovementData;                               // 0x0300(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LocalVector;                                       // 0x05E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlowPlay;                                         // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterBlowLocation;                             // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationBackup;                                    // 0x0618(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterBlowRotation;                             // 0x0630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsinAre;                                           // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResetTime;                                         // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlowInit();
	void BlowStart();
	void ExecuteUbergraph_BP_DebugBlowActor(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DebugBlowActor_C">();
	}
	static class ABP_DebugBlowActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DebugBlowActor_C>();
	}
};
static_assert(alignof(ABP_DebugBlowActor_C) == 0x000008, "Wrong alignment on ABP_DebugBlowActor_C");
static_assert(sizeof(ABP_DebugBlowActor_C) == 0x000658, "Wrong size on ABP_DebugBlowActor_C");
static_assert(offsetof(ABP_DebugBlowActor_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_DebugBlowActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, Arrow) == 0x0002A8, "Member 'ABP_DebugBlowActor_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, CharacterMy) == 0x0002B0, "Member 'ABP_DebugBlowActor_C::CharacterMy' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, CharacterTarget) == 0x0002B8, "Member 'ABP_DebugBlowActor_C::CharacterTarget' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, bInitBlowStart) == 0x0002C0, "Member 'ABP_DebugBlowActor_C::bInitBlowStart' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, bFrontHit) == 0x0002C1, "Member 'ABP_DebugBlowActor_C::bFrontHit' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, DamageReactionDataList) == 0x0002C4, "Member 'ABP_DebugBlowActor_C::DamageReactionDataList' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, HitBackMovementDataList) == 0x0002CC, "Member 'ABP_DebugBlowActor_C::HitBackMovementDataList' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, Rotation) == 0x0002D8, "Member 'ABP_DebugBlowActor_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, bBlowStart) == 0x0002F0, "Member 'ABP_DebugBlowActor_C::bBlowStart' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, CharacterBlow) == 0x0002F8, "Member 'ABP_DebugBlowActor_C::CharacterBlow' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, HitBackMovementData) == 0x000300, "Member 'ABP_DebugBlowActor_C::HitBackMovementData' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, LocalVector) == 0x0005E0, "Member 'ABP_DebugBlowActor_C::LocalVector' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, bBlowPlay) == 0x0005F8, "Member 'ABP_DebugBlowActor_C::bBlowPlay' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, CharacterBlowLocation) == 0x000600, "Member 'ABP_DebugBlowActor_C::CharacterBlowLocation' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, RotationBackup) == 0x000618, "Member 'ABP_DebugBlowActor_C::RotationBackup' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, CharacterBlowRotation) == 0x000630, "Member 'ABP_DebugBlowActor_C::CharacterBlowRotation' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, IsinAre) == 0x000648, "Member 'ABP_DebugBlowActor_C::IsinAre' has a wrong offset!");
static_assert(offsetof(ABP_DebugBlowActor_C, ResetTime) == 0x000650, "Member 'ABP_DebugBlowActor_C::ResetTime' has a wrong offset!");

}

