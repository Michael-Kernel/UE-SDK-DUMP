#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DefaultGameEnvSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DefaultGameEnvSystem.DefaultGameEnvSystem_C.ExecuteUbergraph_DefaultGameEnvSystem
// 0x0008 (0x0008 - 0x0000)
struct DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem) == 0x000004, "Wrong alignment on DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem");
static_assert(sizeof(DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem) == 0x000008, "Wrong size on DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem");
static_assert(offsetof(DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem, EntryPoint) == 0x000000, "Member 'DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem::EntryPoint' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'DefaultGameEnvSystem_C_ExecuteUbergraph_DefaultGameEnvSystem::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function DefaultGameEnvSystem.DefaultGameEnvSystem_C.Blueprint_PostUpdate
// 0x0004 (0x0004 - 0x0000)
struct DefaultGameEnvSystem_C_Blueprint_PostUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DefaultGameEnvSystem_C_Blueprint_PostUpdate) == 0x000004, "Wrong alignment on DefaultGameEnvSystem_C_Blueprint_PostUpdate");
static_assert(sizeof(DefaultGameEnvSystem_C_Blueprint_PostUpdate) == 0x000004, "Wrong size on DefaultGameEnvSystem_C_Blueprint_PostUpdate");
static_assert(offsetof(DefaultGameEnvSystem_C_Blueprint_PostUpdate, DeltaSeconds) == 0x000000, "Member 'DefaultGameEnvSystem_C_Blueprint_PostUpdate::DeltaSeconds' has a wrong offset!");

// Function DefaultGameEnvSystem.DefaultGameEnvSystem_C.LineTrace
// 0x0180 (0x0180 - 0x0000)
struct DefaultGameEnvSystem_C_LineTrace final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel_0;                                    // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RTPC;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutHitDistance;                                    // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OutHitActor;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0048(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DefaultGameEnvSystem_C_LineTrace) == 0x000008, "Wrong alignment on DefaultGameEnvSystem_C_LineTrace");
static_assert(sizeof(DefaultGameEnvSystem_C_LineTrace) == 0x000180, "Wrong size on DefaultGameEnvSystem_C_LineTrace");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, ActorLocation) == 0x000000, "Member 'DefaultGameEnvSystem_C_LineTrace::ActorLocation' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, Vector) == 0x00000C, "Member 'DefaultGameEnvSystem_C_LineTrace::Vector' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, MaxDistance) == 0x000018, "Member 'DefaultGameEnvSystem_C_LineTrace::MaxDistance' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, TraceChannel_0) == 0x00001C, "Member 'DefaultGameEnvSystem_C_LineTrace::TraceChannel_0' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, TraceColor) == 0x000020, "Member 'DefaultGameEnvSystem_C_LineTrace::TraceColor' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, RTPC) == 0x000030, "Member 'DefaultGameEnvSystem_C_LineTrace::RTPC' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, OutHitDistance) == 0x000038, "Member 'DefaultGameEnvSystem_C_LineTrace::OutHitDistance' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, OutHitActor) == 0x000040, "Member 'DefaultGameEnvSystem_C_LineTrace::OutHitActor' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, Temp_object_Variable) == 0x000048, "Member 'DefaultGameEnvSystem_C_LineTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_LineTraceSingle_OutHit) == 0x000070, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x0000F8, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F9, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FA, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_Location) == 0x000104, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_Normal) == 0x00011C, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000128, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000150, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_HitItem) == 0x000158, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_ElementIndex) == 0x00015C, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_FaceIndex) == 0x000160, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_TraceStart) == 0x000164, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_LineTrace, CallFunc_BreakHitResult_TraceEnd) == 0x000170, "Member 'DefaultGameEnvSystem_C_LineTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function DefaultGameEnvSystem.DefaultGameEnvSystem_C.PrintDistanceAndActor
// 0x00A8 (0x00A8 - 0x0000)
struct DefaultGameEnvSystem_C_PrintDistanceAndActor final
{
public:
	class FString                                 StringPrefix;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayTime;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0040(0x0018)()
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(DefaultGameEnvSystem_C_PrintDistanceAndActor) == 0x000008, "Wrong alignment on DefaultGameEnvSystem_C_PrintDistanceAndActor");
static_assert(sizeof(DefaultGameEnvSystem_C_PrintDistanceAndActor) == 0x0000A8, "Wrong size on DefaultGameEnvSystem_C_PrintDistanceAndActor");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, StringPrefix) == 0x000000, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::StringPrefix' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, Actor) == 0x000010, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::Actor' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, Distance) == 0x000018, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::Distance' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, TextColor) == 0x00001C, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::TextColor' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, DisplayTime) == 0x00002C, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::DisplayTime' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Conv_FloatToText_ReturnValue) == 0x000040, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_GetDisplayName_ReturnValue) == 0x000058, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Conv_TextToString_ReturnValue) == 0x000068, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DefaultGameEnvSystem_C_PrintDistanceAndActor, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'DefaultGameEnvSystem_C_PrintDistanceAndActor::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

}

