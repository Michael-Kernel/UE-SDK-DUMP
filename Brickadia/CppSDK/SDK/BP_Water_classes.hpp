#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Water

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Brickadia_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Water.BP_Water_C
// 0x00C0 (0x03C0 - 0x0300)
class ABP_Water_C final : public ABRPhysicsPlaneVolume
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   WaterMesh;                                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  WaterPostProcess;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoHideWaterOnZeroHeight;                        // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterHeight;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterScattering;                                   // 0x0328(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterAbsorption;                                   // 0x0340(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        WaterFogIntensity;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WaterFogScatteringColor;                           // 0x0360(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WaterFogAmbientColor;                              // 0x0370(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               WaterMaterial;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UnderwaterMaterial;                                // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageRepeatDelay;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterFogScatteringScale;                           // 0x0398(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        WaterFogAmbientScale;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        WaterWorldHeightOffset;                            // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABRCharacter*>                   PlayersToDamage;                                   // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void BndEvt__BP_Water_PlaneCollisionComponent_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Water_PlaneCollisionComponent_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_Water(int32 EntryPoint);
	void OnRep_WaterAbsorption();
	void OnRep_WaterFogAmbientColor();
	void OnRep_WaterFogAmbientScale();
	void OnRep_WaterFogIntensity();
	void OnRep_WaterFogScatteringColor();
	void OnRep_WaterFogScatteringScale();
	void OnRep_WaterHeight();
	void OnRep_WaterScattering();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetWaterAbsorption(const struct FVector& Value);
	void SetWaterFogAmbientColor(const struct FLinearColor& Value);
	void SetWaterFogAmbientScale(double Value);
	void SetWaterFogIntensity(double Value);
	void SetWaterFogScatteringColor(const struct FLinearColor& Value);
	void SetWaterFogScatteringScale(double Value);
	void SetWaterHeight(double Value);
	void SetWaterScattering(const struct FVector& Value);
	void SpawnWaterSplash(class AActor* Actor);
	void UpdateWaterLevel();
	void UpdateWaterMaterials();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Water_C">();
	}
	static class ABP_Water_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Water_C>();
	}
};
static_assert(alignof(ABP_Water_C) == 0x000008, "Wrong alignment on ABP_Water_C");
static_assert(sizeof(ABP_Water_C) == 0x0003C0, "Wrong size on ABP_Water_C");
static_assert(offsetof(ABP_Water_C, UberGraphFrame) == 0x000300, "Member 'ABP_Water_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterMesh) == 0x000308, "Member 'ABP_Water_C::WaterMesh' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterPostProcess) == 0x000310, "Member 'ABP_Water_C::WaterPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, bAutoHideWaterOnZeroHeight) == 0x000318, "Member 'ABP_Water_C::bAutoHideWaterOnZeroHeight' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterHeight) == 0x000320, "Member 'ABP_Water_C::WaterHeight' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterScattering) == 0x000328, "Member 'ABP_Water_C::WaterScattering' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterAbsorption) == 0x000340, "Member 'ABP_Water_C::WaterAbsorption' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterFogIntensity) == 0x000358, "Member 'ABP_Water_C::WaterFogIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterFogScatteringColor) == 0x000360, "Member 'ABP_Water_C::WaterFogScatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterFogAmbientColor) == 0x000370, "Member 'ABP_Water_C::WaterFogAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterMaterial) == 0x000380, "Member 'ABP_Water_C::WaterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, UnderwaterMaterial) == 0x000388, "Member 'ABP_Water_C::UnderwaterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, DamageRepeatDelay) == 0x000390, "Member 'ABP_Water_C::DamageRepeatDelay' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterFogScatteringScale) == 0x000398, "Member 'ABP_Water_C::WaterFogScatteringScale' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterFogAmbientScale) == 0x0003A0, "Member 'ABP_Water_C::WaterFogAmbientScale' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, WaterWorldHeightOffset) == 0x0003A8, "Member 'ABP_Water_C::WaterWorldHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_Water_C, PlayersToDamage) == 0x0003B0, "Member 'ABP_Water_C::PlayersToDamage' has a wrong offset!");

}

