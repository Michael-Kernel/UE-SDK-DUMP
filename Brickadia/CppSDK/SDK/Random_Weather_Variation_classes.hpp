#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Random_Weather_Variation

#include "Basic.hpp"

#include "UDS_TemperatureType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_RandomWeatherTiming_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Random_Weather_Variation.Random_Weather_Variation_C
// 0x0120 (0x01C8 - 0x00A8)
class URandom_Weather_Variation_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 UDW;                                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   UDS;                                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Target_Random_Weather_Type;                        // 0x00C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Lerp_Alpha;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Timer_Length;                              // 0x00D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Volume;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Last_Random_Weather_Type;                          // 0x00E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUDS_Weather_Settings_C*                Current_Random_Weather_State;                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Timer;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Started;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Eased_Lerp_Alpha;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changing_Weather;                                  // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          For_WOV;                                           // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUDS_Weather_Settings_C*>        Weather_Forecast;                                  // 0x0110(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          First_Type_Selected;                               // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Random_Forecast_Steps;                             // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blend_Season_Probabillities;                       // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Extreme_Cloud_Coverage_Shifts;               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Repeating_Weather_Types;                     // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Changing_From_Snow_To_Rain;                  // 0x012B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extreme_Cloud_Coverage_Shift_Threshold;            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Length;                                 // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UUDS_Weather_Settings_C*, double>  Weather_Specific_Interval_Multipliers;             // 0x0140(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFloatRange                            Change_Interval;                                   // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Random_Weather_Change_Hour;                        // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Speed;                                     // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUDW_Material_State_Manager_C*          Material_State_Manager_Component;                  // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Random_Stream;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	float                                         Tick_Delta_Seconds;                                // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_State(const struct FRandomWeatherVariation_State& Random_Weather_State);
	void Bind_to_UDS();
	void Change_to_Next_Random_Weather_Type();
	void Check_For_Client_Startup();
	void Check_For_Season_Instant_Refresh();
	void Clear_and_Restart();
	void Create_Composite_Probability_Map(TMap<class UUDS_Weather_Settings_C*, double>* Out);
	void Current_Hour_Changed(int32 Hour);
	void ExecuteUbergraph_Random_Weather_Variation(int32 EntryPoint);
	void Fill_Weather_Forecast();
	void Filter_Probability_Map(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Current_Random_Type, TMap<class UUDS_Weather_Settings_C*, double>* Filtered_Probability_Map);
	void Get_Climate_Temperature_Ranges(class UUDS_Climate_Preset_C* Climate_Object, EUDS_TemperatureType Scale, struct FVector2D* Summer_Range, struct FVector2D* Autumn_Range, struct FVector2D* Winter_Range, struct FVector2D* Spring_Range);
	double Get_Current_Lerp_Alpha();
	void Get_Season_Probability_Map(int32 Season, TMap<class UUDS_Weather_Settings_C*, double>* Map);
	void Get_State_for_Saving(struct FRandomWeatherVariation_State* State);
	void Hourly(int32 Hour);
	void Increment_Change_Timer();
	void Increment_Random_Weather();
	void Instant_Material_Update();
	void Make_Climate_Probability_Map(class UUDS_Climate_Preset_C* Climate, int32 Season, TMap<class UUDS_Weather_Settings_C*, double>* Probability_Map);
	void Random_Weather_Mode(EUDS_RandomWeatherTiming* Mode);
	void Recalculate_Forecast();
	void ReceiveTick(float DeltaSeconds);
	void Reset_Timer();
	void Select_Random_Weather_Type(const TMap<class UUDS_Weather_Settings_C*, double>& Probability_Map, class UUDS_Weather_Settings_C* Previous_Weather, class UUDS_Weather_Settings_C** Out);
	void Set_New_Random_Interval_Timer();
	void Start_Up_Random_Weather_Variation(class AActor* UDW_0, class AActor* Volume_0, bool Start_with_a_Random_Type, class UUDS_Weather_Settings_C* Starting_Weather_Settings, int32 Random_Forecast_Steps_0, bool Blend_Season_Probabillities_0, bool Avoid_Extreme_Cloud_Coverage_Shifts_0, bool Avoid_Repeating_Weather_Types_0, bool Avoid_Changing_From_Snow_To_Rain_0, double Extreme_Cloud_Coverage_Shift_Threshold_0, double Transition_Length_0, const TMap<class UUDS_Weather_Settings_C*, double>& Weather_Specific_Interval_Multipliers_0, const struct FFloatRange& Change_Interval_0, int32 Random_Weather_Change_Hour_0, class UUDW_Material_State_Manager_C* Material_Manager, const struct FRandomStream& Random_Stream_0);
	void State_Source_Map(TMap<class UUDS_Weather_Settings_C*, double>* Source_Map);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Random_Weather_Variation_C">();
	}
	static class URandom_Weather_Variation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URandom_Weather_Variation_C>();
	}
};
static_assert(alignof(URandom_Weather_Variation_C) == 0x000008, "Wrong alignment on URandom_Weather_Variation_C");
static_assert(sizeof(URandom_Weather_Variation_C) == 0x0001C8, "Wrong size on URandom_Weather_Variation_C");
static_assert(offsetof(URandom_Weather_Variation_C, UberGraphFrame) == 0x0000A8, "Member 'URandom_Weather_Variation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, UDW) == 0x0000B0, "Member 'URandom_Weather_Variation_C::UDW' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, UDS) == 0x0000B8, "Member 'URandom_Weather_Variation_C::UDS' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Target_Random_Weather_Type) == 0x0000C0, "Member 'URandom_Weather_Variation_C::Target_Random_Weather_Type' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Lerp_Alpha) == 0x0000C8, "Member 'URandom_Weather_Variation_C::Current_Lerp_Alpha' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Timer_Length) == 0x0000D0, "Member 'URandom_Weather_Variation_C::Current_Timer_Length' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Volume) == 0x0000D8, "Member 'URandom_Weather_Variation_C::Volume' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Last_Random_Weather_Type) == 0x0000E0, "Member 'URandom_Weather_Variation_C::Last_Random_Weather_Type' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Random_Weather_State) == 0x0000E8, "Member 'URandom_Weather_Variation_C::Current_Random_Weather_State' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Change_Timer) == 0x0000F0, "Member 'URandom_Weather_Variation_C::Change_Timer' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Started) == 0x0000F8, "Member 'URandom_Weather_Variation_C::Started' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Eased_Lerp_Alpha) == 0x000100, "Member 'URandom_Weather_Variation_C::Eased_Lerp_Alpha' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Changing_Weather) == 0x000108, "Member 'URandom_Weather_Variation_C::Changing_Weather' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, For_WOV) == 0x000109, "Member 'URandom_Weather_Variation_C::For_WOV' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Forecast) == 0x000110, "Member 'URandom_Weather_Variation_C::Weather_Forecast' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, First_Type_Selected) == 0x000120, "Member 'URandom_Weather_Variation_C::First_Type_Selected' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Forecast_Steps) == 0x000124, "Member 'URandom_Weather_Variation_C::Random_Forecast_Steps' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Blend_Season_Probabillities) == 0x000128, "Member 'URandom_Weather_Variation_C::Blend_Season_Probabillities' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Avoid_Extreme_Cloud_Coverage_Shifts) == 0x000129, "Member 'URandom_Weather_Variation_C::Avoid_Extreme_Cloud_Coverage_Shifts' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Avoid_Repeating_Weather_Types) == 0x00012A, "Member 'URandom_Weather_Variation_C::Avoid_Repeating_Weather_Types' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Avoid_Changing_From_Snow_To_Rain) == 0x00012B, "Member 'URandom_Weather_Variation_C::Avoid_Changing_From_Snow_To_Rain' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Extreme_Cloud_Coverage_Shift_Threshold) == 0x000130, "Member 'URandom_Weather_Variation_C::Extreme_Cloud_Coverage_Shift_Threshold' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Transition_Length) == 0x000138, "Member 'URandom_Weather_Variation_C::Transition_Length' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Specific_Interval_Multipliers) == 0x000140, "Member 'URandom_Weather_Variation_C::Weather_Specific_Interval_Multipliers' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Change_Interval) == 0x000190, "Member 'URandom_Weather_Variation_C::Change_Interval' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Weather_Change_Hour) == 0x0001A0, "Member 'URandom_Weather_Variation_C::Random_Weather_Change_Hour' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Speed) == 0x0001A8, "Member 'URandom_Weather_Variation_C::Weather_Speed' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Material_State_Manager_Component) == 0x0001B0, "Member 'URandom_Weather_Variation_C::Material_State_Manager_Component' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Stream) == 0x0001B8, "Member 'URandom_Weather_Variation_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Tick_Delta_Seconds) == 0x0001C0, "Member 'URandom_Weather_Variation_C::Tick_Delta_Seconds' has a wrong offset!");

}

