#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AvatarViewportController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BPS_AvatarEditorState_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AvatarViewportController.WBP_AvatarViewportController_C
// 0x0150 (0x0420 - 0x02D0)
class UWBP_AvatarViewportController_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UViewport*                              Viewport;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                OrbitFocusPosition;                                // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitPitchClampMin;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitPitchClampMax;                                // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitPitchSoftClampDistance;                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitPitchSpeed;                                   // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitYawSpeed;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitRotationInterpolationSpeed;                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceClampMin;                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceClampMax;                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              PreCaptureMousePosition;                           // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OrbitRotationCurrent;                              // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FRotator                               OrbitRotationTarget;                               // 0x0360(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	double                                        OrbitDistanceCurrent;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceTarget;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceSoftClampDistance;                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceSpeed;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceInterpolationSpeed;                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 BackgroundLoaderClass;                             // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitPitchOverflowStorage;                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        OrbitDistanceOverflowStorage;                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_Figure_AvatarEditor_C*              Avatar;                                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HoveredSocket;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bPaintingEnabled;                                  // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRPlayerPartComponent*                 HoveredPart;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bHoveringEnabled;                                  // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttemptingLeftDrag;                               // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLeftDragClickAllowed;                             // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB[0x1];                                      // 0x03DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CurrentPaintColor;                                 // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasUncommittedChanges;                            // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasUnpersistedChanges;                            // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UBRPlayerPartComponent* Part)> OnPartClicked;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         UndoCursor;                                        // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBPS_AvatarEditorState>         UndoStack;                                         // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const struct FColor& Color)> OnColorCopied;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ApplyStateFromUndoStack();
	void AttachDecalAtFirstFreeIndex(class UBRPlayerDecalDescriptor* Descriptor);
	void AttachPartAtFirstFreeIndex(class UBRPlayerPartDescriptor* Descriptor);
	void AttachRequiredPartsWithAnim();
	void ClearHoveredPart();
	void Construct();
	void CopyCurrentColor();
	void DisableHovering();
	void DisablePainting();
	void EnableHovering();
	void EnablePainting();
	void ExecuteUbergraph_WBP_AvatarViewportController(int32 EntryPoint);
	void HideSockets();
	bool LineTraceForPart(class UBRPlayerPartComponent** OutPart, int32* OutFaceIndex);
	bool LineTraceForSocket(class UStaticMeshComponent** Socket);
	void LoadAvatar(const struct FBRPlayerAvatarCustomizationV3& Customization, bool* bSuccess);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent);
	void ProcessHoverTick();
	void ProcessOrbitDrag(const struct FVector2D& Delta);
	void ProcessOrbitTick();
	void ProcessOrbitZoom(double Delta);
	void ProcessPaintTick();
	void ResetAvatar();
	void ResetUndoStack();
	void SetHoveredPart(class UBRPlayerPartComponent* HoveredPart_0);
	void SetPartCollisionEnabled(bool bNewCollision);
	void ShowSocketsForDecal(class UBRPlayerDecalDescriptor* DecalInfo);
	void ShowSocketsForPart(class UBRPlayerPartDescriptor* PartInfo);
	void SnapshotStateToUndoStack();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TryRedo();
	void TryUndo();
	void UpdateAvatar();
	void UpdateViewportCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AvatarViewportController_C">();
	}
	static class UWBP_AvatarViewportController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AvatarViewportController_C>();
	}
};
static_assert(alignof(UWBP_AvatarViewportController_C) == 0x000008, "Wrong alignment on UWBP_AvatarViewportController_C");
static_assert(sizeof(UWBP_AvatarViewportController_C) == 0x000420, "Wrong size on UWBP_AvatarViewportController_C");
static_assert(offsetof(UWBP_AvatarViewportController_C, UberGraphFrame) == 0x0002D0, "Member 'UWBP_AvatarViewportController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, Viewport) == 0x0002D8, "Member 'UWBP_AvatarViewportController_C::Viewport' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitFocusPosition) == 0x0002E0, "Member 'UWBP_AvatarViewportController_C::OrbitFocusPosition' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitPitchClampMin) == 0x0002F8, "Member 'UWBP_AvatarViewportController_C::OrbitPitchClampMin' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitPitchClampMax) == 0x000300, "Member 'UWBP_AvatarViewportController_C::OrbitPitchClampMax' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitPitchSoftClampDistance) == 0x000308, "Member 'UWBP_AvatarViewportController_C::OrbitPitchSoftClampDistance' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitPitchSpeed) == 0x000310, "Member 'UWBP_AvatarViewportController_C::OrbitPitchSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitYawSpeed) == 0x000318, "Member 'UWBP_AvatarViewportController_C::OrbitYawSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitRotationInterpolationSpeed) == 0x000320, "Member 'UWBP_AvatarViewportController_C::OrbitRotationInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceClampMin) == 0x000328, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceClampMin' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceClampMax) == 0x000330, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceClampMax' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, PreCaptureMousePosition) == 0x000338, "Member 'UWBP_AvatarViewportController_C::PreCaptureMousePosition' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitRotationCurrent) == 0x000348, "Member 'UWBP_AvatarViewportController_C::OrbitRotationCurrent' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitRotationTarget) == 0x000360, "Member 'UWBP_AvatarViewportController_C::OrbitRotationTarget' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceCurrent) == 0x000378, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceCurrent' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceTarget) == 0x000380, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceTarget' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceSoftClampDistance) == 0x000388, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceSoftClampDistance' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceSpeed) == 0x000390, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceInterpolationSpeed) == 0x000398, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, BackgroundLoaderClass) == 0x0003A0, "Member 'UWBP_AvatarViewportController_C::BackgroundLoaderClass' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitPitchOverflowStorage) == 0x0003A8, "Member 'UWBP_AvatarViewportController_C::OrbitPitchOverflowStorage' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OrbitDistanceOverflowStorage) == 0x0003B0, "Member 'UWBP_AvatarViewportController_C::OrbitDistanceOverflowStorage' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, Avatar) == 0x0003B8, "Member 'UWBP_AvatarViewportController_C::Avatar' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, HoveredSocket) == 0x0003C0, "Member 'UWBP_AvatarViewportController_C::HoveredSocket' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bPaintingEnabled) == 0x0003C8, "Member 'UWBP_AvatarViewportController_C::bPaintingEnabled' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, HoveredPart) == 0x0003D0, "Member 'UWBP_AvatarViewportController_C::HoveredPart' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bHoveringEnabled) == 0x0003D8, "Member 'UWBP_AvatarViewportController_C::bHoveringEnabled' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bAttemptingLeftDrag) == 0x0003D9, "Member 'UWBP_AvatarViewportController_C::bAttemptingLeftDrag' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bLeftDragClickAllowed) == 0x0003DA, "Member 'UWBP_AvatarViewportController_C::bLeftDragClickAllowed' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, CurrentPaintColor) == 0x0003DC, "Member 'UWBP_AvatarViewportController_C::CurrentPaintColor' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bHasUncommittedChanges) == 0x0003E0, "Member 'UWBP_AvatarViewportController_C::bHasUncommittedChanges' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, bHasUnpersistedChanges) == 0x0003E1, "Member 'UWBP_AvatarViewportController_C::bHasUnpersistedChanges' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OnPartClicked) == 0x0003E8, "Member 'UWBP_AvatarViewportController_C::OnPartClicked' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, UndoCursor) == 0x0003F8, "Member 'UWBP_AvatarViewportController_C::UndoCursor' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, UndoStack) == 0x000400, "Member 'UWBP_AvatarViewportController_C::UndoStack' has a wrong offset!");
static_assert(offsetof(UWBP_AvatarViewportController_C, OnColorCopied) == 0x000410, "Member 'UWBP_AvatarViewportController_C::OnColorCopied' has a wrong offset!");

}

