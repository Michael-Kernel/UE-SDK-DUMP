#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GenericBindingDialog

#include "Basic.hpp"

#include "Brickadia_structs.hpp"
#include "Brickadia_classes.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_GenericBindingDialog.WBP_GenericBindingDialog_C
// 0x00B0 (0x0390 - 0x02E0)
class UWBP_GenericBindingDialog_C final : public UBRDialogBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_DialogFrame_SmallHeader_C*         DialogFrame;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBlock_Default_C*                InfoTextAbort;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBlock_Default_C*                InfoTextDetails;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBlock_Default_C*                InfoTextIntroduction;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWS_TextBlock_Default_C*                InfoTextName;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FName                                   BindingName;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   BindingDisplayName;                                // 0x0318(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMulticastInlineDelegate<void(const struct FBRInputKey_WithModifiers& KeyWithModifiers)> OnKeySelected;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FBRInputKey_Axis& KeyAxis)> OnAxisSelected;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsBindingGamepad;                                 // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsBindingAxis;                                    // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsBindingPositiveFakeAxis;                        // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsBindingNegativeFakeAxis;                        // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBRInputKeyDisplayNames*                KeyNameOverrides;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           GamepadFakeAxisKeys;                               // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           GamepadTriggerKeys;                                // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           GamepadTriggerAxes;                                // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           AbortTimer;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_GenericBindingDialog(int32 EntryPoint);
	void HandleAbort();
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void OnButton1Clicked_C3FF95834BD159B85DC7EC83A2E2C10F();
	void OnButton1Clicked_C9C4ECE748FB59C5AF47A4B8D7AFF6BC();
	void OnButton2Clicked_C3FF95834BD159B85DC7EC83A2E2C10F();
	void OnButton2Clicked_C9C4ECE748FB59C5AF47A4B8D7AFF6BC();
	void OnHideDialogFinished();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnOpenDialog();
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void SelectAxisAndClose(const struct FBRInputKey_Axis& Key_Axis);
	void SelectKeyAndClose(const struct FBRInputKey_WithModifiers& Key_WithModifiers);
	void UpdateHelpText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_GenericBindingDialog_C">();
	}
	static class UWBP_GenericBindingDialog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_GenericBindingDialog_C>();
	}
};
static_assert(alignof(UWBP_GenericBindingDialog_C) == 0x000008, "Wrong alignment on UWBP_GenericBindingDialog_C");
static_assert(sizeof(UWBP_GenericBindingDialog_C) == 0x000390, "Wrong size on UWBP_GenericBindingDialog_C");
static_assert(offsetof(UWBP_GenericBindingDialog_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_GenericBindingDialog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, DialogFrame) == 0x0002E8, "Member 'UWBP_GenericBindingDialog_C::DialogFrame' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, InfoTextAbort) == 0x0002F0, "Member 'UWBP_GenericBindingDialog_C::InfoTextAbort' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, InfoTextDetails) == 0x0002F8, "Member 'UWBP_GenericBindingDialog_C::InfoTextDetails' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, InfoTextIntroduction) == 0x000300, "Member 'UWBP_GenericBindingDialog_C::InfoTextIntroduction' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, InfoTextName) == 0x000308, "Member 'UWBP_GenericBindingDialog_C::InfoTextName' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, BindingName) == 0x000310, "Member 'UWBP_GenericBindingDialog_C::BindingName' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, BindingDisplayName) == 0x000318, "Member 'UWBP_GenericBindingDialog_C::BindingDisplayName' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, OnKeySelected) == 0x000328, "Member 'UWBP_GenericBindingDialog_C::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, OnAxisSelected) == 0x000338, "Member 'UWBP_GenericBindingDialog_C::OnAxisSelected' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, bIsBindingGamepad) == 0x000348, "Member 'UWBP_GenericBindingDialog_C::bIsBindingGamepad' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, bIsBindingAxis) == 0x000349, "Member 'UWBP_GenericBindingDialog_C::bIsBindingAxis' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, bIsBindingPositiveFakeAxis) == 0x00034A, "Member 'UWBP_GenericBindingDialog_C::bIsBindingPositiveFakeAxis' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, bIsBindingNegativeFakeAxis) == 0x00034B, "Member 'UWBP_GenericBindingDialog_C::bIsBindingNegativeFakeAxis' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, KeyNameOverrides) == 0x000350, "Member 'UWBP_GenericBindingDialog_C::KeyNameOverrides' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, GamepadFakeAxisKeys) == 0x000358, "Member 'UWBP_GenericBindingDialog_C::GamepadFakeAxisKeys' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, GamepadTriggerKeys) == 0x000368, "Member 'UWBP_GenericBindingDialog_C::GamepadTriggerKeys' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, GamepadTriggerAxes) == 0x000378, "Member 'UWBP_GenericBindingDialog_C::GamepadTriggerAxes' has a wrong offset!");
static_assert(offsetof(UWBP_GenericBindingDialog_C, AbortTimer) == 0x000388, "Member 'UWBP_GenericBindingDialog_C::AbortTimer' has a wrong offset!");

}

