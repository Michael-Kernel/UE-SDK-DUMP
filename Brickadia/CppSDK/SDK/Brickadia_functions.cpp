#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Brickadia

#include "Basic.hpp"

#include "Brickadia_classes.hpp"
#include "Brickadia_parameters.hpp"


namespace SDK
{

// Function Brickadia.BRPlacerComponent.GetPlacer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRTool_Placer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRTool_Placer* UBRPlacerComponent::GetPlacer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerComponent", "GetPlacer");

	Params::BRPlacerComponent_GetPlacer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlaceableActor.HandleAttachedPlacement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewParentActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              NewParentComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlaceableActor::HandleAttachedPlacement(class AActor* NewParentActor, class UPrimitiveComponent* NewParentComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlaceableActor", "HandleAttachedPlacement");

	Params::BRPlaceableActor_HandleAttachedPlacement Parms{};

	Parms.NewParentActor = NewParentActor;
	Parms.NewParentComponent = NewParentComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlaceableActor.OverridePlacementPivots
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBrickPlacementPivots&     AutoPivot                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBrickPlacementPivots            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBrickPlacementPivots ABRPlaceableActor::OverridePlacementPivots(const struct FBrickPlacementPivots& AutoPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlaceableActor", "OverridePlacementPivots");

	Params::BRPlaceableActor_OverridePlacementPivots Parms{};

	Parms.AutoPivot = std::move(AutoPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHBoxedValueIsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBHBoxed&                  Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBHBoxedBlueprintFunctionLibrary::BHBoxedValueIsValid(const struct FBHBoxed& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BHBoxedBlueprintFunctionLibrary", "BHBoxedValueIsValid");

	Params::BHBoxedBlueprintFunctionLibrary_BHBoxedValueIsValid Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHBoxValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBHBoxed                         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBHBoxed UBHBoxedBlueprintFunctionLibrary::BHBoxValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BHBoxedBlueprintFunctionLibrary", "BHBoxValue");

	Params::BHBoxedBlueprintFunctionLibrary_BHBoxValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BHBoxedBlueprintFunctionLibrary.BHUnboxValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBHBoxed&                  InValue                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBoxedBlueprintFunctionLibrary::BHUnboxValue(const struct FBHBoxed& InValue, int32* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BHBoxedBlueprintFunctionLibrary", "BHUnboxValue");

	Params::BHBoxedBlueprintFunctionLibrary_BHUnboxValue Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;
}


// Function Brickadia.BHBlockEditorNodeWidget.HandleNodeChainVisual
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHResolvedTypeInfo&       Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bHasLastType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBHResolvedTypeInfo&       LastType                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorNodeWidget::HandleNodeChainVisual(const struct FBHResolvedTypeInfo& Type, bool bHasLastType, const struct FBHResolvedTypeInfo& LastType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorNodeWidget", "HandleNodeChainVisual");

	Params::BHBlockEditorNodeWidget_HandleNodeChainVisual Parms{};

	Parms.Type = std::move(Type);
	Parms.bHasLastType = bHasLastType;
	Parms.LastType = std::move(LastType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerPlacementModeBase.IsSpacingAllowed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPlacerPlacementModeBase::IsSpacingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerPlacementModeBase", "IsSpacingAllowed");

	Params::BRPlacerPlacementModeBase_IsSpacingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback.GetPlacementProcBrickAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UProceduralBrick*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProceduralBrick* UBRPlacerPlacementMode_ResizeWithInstanceVolumeFallback::GetPlacementProcBrickAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback", "GetPlacementProcBrickAsset");

	Params::BRPlacerPlacementMode_ResizeWithInstanceVolumeFallback_GetPlacementProcBrickAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BHBlockEditorLiteralNodeWidget.HandleColor
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorLiteralNodeWidget::HandleColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorLiteralNodeWidget", "HandleColor");

	Params::BHBlockEditorLiteralNodeWidget_HandleColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorLineDecorWidget.HandleColor
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorLineDecorWidget::HandleColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorLineDecorWidget", "HandleColor");

	Params::BHBlockEditorLineDecorWidget_HandleColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorLineWidget.HandleAltColor
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsOdd                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorLineWidget::HandleAltColor(bool bIsOdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorLineWidget", "HandleAltColor");

	Params::BHBlockEditorLineWidget_HandleAltColor Parms{};

	Parms.bIsOdd = bIsOdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorPropertyEntryWidget.HandleOpened
// (Final, Native, Public, BlueprintCallable)

void UBHBlockEditorPropertyEntryWidget::HandleOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorPropertyEntryWidget", "HandleOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorPropertyEntryWidget.HandleType
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHResolvedTypeInfo&       Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorPropertyEntryWidget::HandleType(const struct FBHResolvedTypeInfo& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorPropertyEntryWidget", "HandleType");

	Params::BHBlockEditorPropertyEntryWidget_HandleType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerControlMode_Delete.MulticastHammerBrick
// (Final, Net, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerControlMode_Delete::MulticastHammerBrick(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Delete", "MulticastHammerBrick");

	Params::BRPlacerControlMode_Delete_MulticastHammerBrick Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Delete.MulticastHammerEntity
// (Final, Net, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerControlMode_Delete::MulticastHammerEntity(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Delete", "MulticastHammerEntity");

	Params::BRPlacerControlMode_Delete_MulticastHammerEntity Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Delete.ServerHammerBrick
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerControlMode_Delete::ServerHammerBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Delete", "ServerHammerBrick");

	Params::BRPlacerControlMode_Delete_ServerHammerBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Delete.ServerHammerEntity
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerControlMode_Delete::ServerHammerEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Delete", "ServerHammerEntity");

	Params::BRPlacerControlMode_Delete_ServerHammerEntity Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorRoutinePropertyEntryWidget.HandleOpened
// (Final, Native, Public, BlueprintCallable)

void UBHBlockEditorRoutinePropertyEntryWidget::HandleOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorRoutinePropertyEntryWidget", "HandleOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorRoutinePropertyEntryWidget.HandleType
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHResolvedTypeInfo&       Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorRoutinePropertyEntryWidget::HandleType(const struct FBHResolvedTypeInfo& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorRoutinePropertyEntryWidget", "HandleType");

	Params::BHBlockEditorRoutinePropertyEntryWidget_HandleType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorReturnValueWidget.HandleOpened
// (Final, Native, Public, BlueprintCallable)

void UBHBlockEditorReturnValueWidget::HandleOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorReturnValueWidget", "HandleOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorReturnValueWidget.HandleType
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHResolvedTypeInfo&       Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorReturnValueWidget::HandleType(const struct FBHResolvedTypeInfo& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorReturnValueWidget", "HandleType");

	Params::BHBlockEditorReturnValueWidget_HandleType Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorRoutineEntryWidget.HandleOpened
// (Final, Native, Public, BlueprintCallable)

void UBHBlockEditorRoutineEntryWidget::HandleOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorRoutineEntryWidget", "HandleOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorRoutineEntryWidget.HandleType
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHResolvedTypeInfo&       Type                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsFunction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorRoutineEntryWidget::HandleType(const struct FBHResolvedTypeInfo& Type, bool bIsFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorRoutineEntryWidget", "HandleType");

	Params::BHBlockEditorRoutineEntryWidget_HandleType Parms{};

	Parms.Type = std::move(Type);
	Parms.bIsFunction = bIsFunction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRInputIconFallbackPartWidget.SetKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInputIconFallbackPartWidget::SetKey(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputIconFallbackPartWidget", "SetKey");

	Params::BRInputIconFallbackPartWidget_SetKey Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.FinishHideDialog
// (Final, Native, Public)

void UBRDialogBase::FinishHideDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "FinishHideDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.FinishOpenDialog
// (Final, Native, Public)

void UBRDialogBase::FinishOpenDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "FinishOpenDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.HideDialog
// (Final, Native, Public, BlueprintCallable)

void UBRDialogBase::HideDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "HideDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonDoubleClick
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRDialogBase::OnBackgroundMouseButtonDoubleClick(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnBackgroundMouseButtonDoubleClick");

	Params::BRDialogBase_OnBackgroundMouseButtonDoubleClick Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonDown
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRDialogBase::OnBackgroundMouseButtonDown(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnBackgroundMouseButtonDown");

	Params::BRDialogBase_OnBackgroundMouseButtonDown Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnBackgroundMouseButtonUp
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRDialogBase::OnBackgroundMouseButtonUp(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnBackgroundMouseButtonUp");

	Params::BRDialogBase_OnBackgroundMouseButtonUp Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnEscapeDialog
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UBRDialogBase::OnEscapeDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnEscapeDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnHideDialog
// (Native, Event, Public, BlueprintEvent)

void UBRDialogBase::OnHideDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnHideDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnHideDialogFinished
// (Native, Event, Public, BlueprintEvent)

void UBRDialogBase::OnHideDialogFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnHideDialogFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnOpenDialog
// (Native, Event, Public, BlueprintEvent)

void UBRDialogBase::OnOpenDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnOpenDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OnOpenDialogFinished
// (Native, Event, Public, BlueprintEvent)

void UBRDialogBase::OnOpenDialogFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OnOpenDialogFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OpenDialog
// (Final, Native, Public, BlueprintCallable)

void UBRDialogBase::OpenDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OpenDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OpenDialog_IfNoOther
// (Final, Native, Public, BlueprintCallable)

void UBRDialogBase::OpenDialog_IfNoOther()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OpenDialog_IfNoOther");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OpenOrHideDialog
// (Final, Native, Public, BlueprintCallable)

void UBRDialogBase::OpenOrHideDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OpenOrHideDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.OpenOrHideDialog_IfNoOther
// (Final, Native, Public, BlueprintCallable)

void UBRDialogBase::OpenOrHideDialog_IfNoOther()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "OpenOrHideDialog_IfNoOther");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogBase.BackgroundAllowsToolFreeMouse
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::BackgroundAllowsToolFreeMouse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "BackgroundAllowsToolFreeMouse");

	Params::BRDialogBase_BackgroundAllowsToolFreeMouse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.GetDialogState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRDialogState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRDialogState UBRDialogBase::GetDialogState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "GetDialogState");

	Params::BRDialogBase_GetDialogState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.GetHUD
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRHUD*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRHUD* UBRDialogBase::GetHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "GetHUD");

	Params::BRDialogBase_GetHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.IsHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::IsHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "IsHidden");

	Params::BRDialogBase_IsHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.IsHiddenOrHiding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::IsHiddenOrHiding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "IsHiddenOrHiding");

	Params::BRDialogBase_IsHiddenOrHiding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "IsOpen");

	Params::BRDialogBase_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.IsOpenOrOpening
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::IsOpenOrOpening() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "IsOpenOrOpening");

	Params::BRDialogBase_IsOpenOrOpening Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDialogBase.IsTopmost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRDialogBase::IsTopmost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogBase", "IsTopmost");

	Params::BRDialogBase_IsTopmost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BHBlockEditorWidget.HandleBehaviorNameText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorWidget::HandleBehaviorNameText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorWidget", "HandleBehaviorNameText");

	Params::BHBlockEditorWidget_HandleBehaviorNameText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorWidget.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBehaviorBase*                    Behavior                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorWidget::Setup(class UBehaviorBase* Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorWidget", "Setup");

	Params::BHBlockEditorWidget_Setup Parms{};

	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorWidget.TEMP_Test
// (Final, Native, Public, BlueprintCallable)

void UBHBlockEditorWidget::TEMP_Test()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorWidget", "TEMP_Test");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorLiteralValueWidgetBase.HandleChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBHBoxed&                  Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorLiteralValueWidgetBase::HandleChanged(const struct FBHBoxed& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorLiteralValueWidgetBase", "HandleChanged");

	Params::BHBlockEditorLiteralValueWidgetBase_HandleChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorLiteralValueWidgetBase.Setup
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBHBoxed&                  Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBHBlockEditorLiteralValueWidgetBase::Setup(const struct FBHBoxed& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorLiteralValueWidgetBase", "Setup");

	Params::BHBlockEditorLiteralValueWidgetBase_Setup Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BHBlockEditorNodeElementWidget_ArgSlot.HandleTypeColor
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorNodeElementWidget_ArgSlot::HandleTypeColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorNodeElementWidget_ArgSlot", "HandleTypeColor");

	Params::BHBlockEditorNodeElementWidget_ArgSlot_HandleTypeColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BHBlockEditorNodeElementWidget_ArgSlot.HideSlotUnderNode
// (Event, Public, BlueprintEvent)

void UBHBlockEditorNodeElementWidget_ArgSlot::HideSlotUnderNode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorNodeElementWidget_ArgSlot", "HideSlotUnderNode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BHBlockEditorNodeElementWidget_DestVarSlot.HandleTypeColor
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBHBlockEditorNodeElementWidget_DestVarSlot::HandleTypeColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BHBlockEditorNodeElementWidget_DestVarSlot", "HandleTypeColor");

	Params::BHBlockEditorNodeElementWidget_DestVarSlot_HandleTypeColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BrickAsset.GetDisplayBrickType
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBrickAsset::GetDisplayBrickType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickAsset", "GetDisplayBrickType");

	Params::BrickAsset_GetDisplayBrickType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuideToolHelpers.GenerateCircle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedStaticMesh                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGuideToolHelpers::GenerateCircle(class UInstancedStaticMeshComponent* InstancedStaticMesh, int32 Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuideToolHelpers", "GenerateCircle");

	Params::BRGuideToolHelpers_GenerateCircle Parms{};

	Parms.InstancedStaticMesh = InstancedStaticMesh;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChangeDisplayNameAsyncAction.AsyncChangeDisplayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewDisplayName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRChangeDisplayNameAsyncAction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRChangeDisplayNameAsyncAction* UBRChangeDisplayNameAsyncAction::AsyncChangeDisplayName(class UObject* WorldContextObject, const class FString& NewDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRChangeDisplayNameAsyncAction", "AsyncChangeDisplayName");

	Params::BRChangeDisplayNameAsyncAction_AsyncChangeDisplayName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NewDisplayName = std::move(NewDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetIsJumping
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetIsJumping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetIsJumping");

	Params::BRAnimInstance_GetIsJumping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetIsJumpingAlternate
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetIsJumpingAlternate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetIsJumpingAlternate");

	Params::BRAnimInstance_GetIsJumpingAlternate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetLegRotatorL
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBRAnimInstance::GetLegRotatorL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetLegRotatorL");

	Params::BRAnimInstance_GetLegRotatorL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetLegRotatorR
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBRAnimInstance::GetLegRotatorR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetLegRotatorR");

	Params::BRAnimInstance_GetLegRotatorR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetAimDeltaPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetAimDeltaPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetAimDeltaPitch");

	Params::BRAnimInstance_GetAimDeltaPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetAimDeltaYaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetAimDeltaYaw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetAimDeltaYaw");

	Params::BRAnimInstance_GetAimDeltaYaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetAimPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetAimPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetAimPitch");

	Params::BRAnimInstance_GetAimPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetBaseAimPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetBaseAimPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetBaseAimPitch");

	Params::BRAnimInstance_GetBaseAimPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetCursorInfluenceAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetCursorInfluenceAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetCursorInfluenceAngle");

	Params::BRAnimInstance_GetCursorInfluenceAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetForwardSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetForwardSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetForwardSpeed");

	Params::BRAnimInstance_GetForwardSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetForwardSpeedWithRootAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetForwardSpeedWithRootAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetForwardSpeedWithRootAngle");

	Params::BRAnimInstance_GetForwardSpeedWithRootAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetHasPhysicsGrabbedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetHasPhysicsGrabbedObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetHasPhysicsGrabbedObject");

	Params::BRAnimInstance_GetHasPhysicsGrabbedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetIsCrouchingWithAimOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetIsCrouchingWithAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetIsCrouchingWithAimOffset");

	Params::BRAnimInstance_GetIsCrouchingWithAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetIsMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetIsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetIsMoving");

	Params::BRAnimInstance_GetIsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetItemAimLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBRAnimInstance::GetItemAimLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetItemAimLocation");

	Params::BRAnimInstance_GetItemAimLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetLeanPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetLeanPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetLeanPitch");

	Params::BRAnimInstance_GetLeanPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetLeanRoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetLeanRoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetLeanRoll");

	Params::BRAnimInstance_GetLeanRoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetMuzzleAimOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBRAnimInstance::GetMuzzleAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetMuzzleAimOffset");

	Params::BRAnimInstance_GetMuzzleAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetRootAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetRootAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetRootAngle");

	Params::BRAnimInstance_GetRootAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetSpeed");

	Params::BRAnimInstance_GetSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetStrafeSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetStrafeSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetStrafeSpeed");

	Params::BRAnimInstance_GetStrafeSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetStrafeSpeedWithRootAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRAnimInstance::GetStrafeSpeedWithRootAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetStrafeSpeedWithRootAngle");

	Params::BRAnimInstance_GetStrafeSpeedWithRootAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetUseAimOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetUseAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetUseAimOffset");

	Params::BRAnimInstance_GetUseAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetUseBaseAimOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetUseBaseAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetUseBaseAimOffset");

	Params::BRAnimInstance_GetUseBaseAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.GetUseCustomAimOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAnimInstance::GetUseCustomAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "GetUseCustomAimOffset");

	Params::BRAnimInstance_GetUseCustomAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAnimInstance.TryGetOwningFigure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* UBRAnimInstance::TryGetOwningFigure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimInstance", "TryGetOwningFigure");

	Params::BRAnimInstance_TryGetOwningFigure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerGrid.UpdateColor
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlacerGrid::UpdateColor(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerGrid", "UpdateColor");

	Params::BRPlacerGrid_UpdateColor Parms{};

	Parms.InColor = std::move(InColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerGrid.UpdateGrid
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UBrickGridComponent*              BrickGrid                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InGridCellSize                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InPlacementPivotExtent                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                GridLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         InDirection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InExtentBeyondBrickInCells                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlacerGrid::UpdateGrid(class UBrickGridComponent* BrickGrid, const struct FIntVector& InGridCellSize, const struct FIntVector& InPlacementPivotExtent, const struct FIntVector& GridLocation, EBrickDirection InDirection, int32 InExtentBeyondBrickInCells)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerGrid", "UpdateGrid");

	Params::BRPlacerGrid_UpdateGrid Parms{};

	Parms.BrickGrid = BrickGrid;
	Parms.InGridCellSize = std::move(InGridCellSize);
	Parms.InPlacementPivotExtent = std::move(InPlacementPivotExtent);
	Parms.GridLocation = std::move(GridLocation);
	Parms.InDirection = InDirection;
	Parms.InExtentBeyondBrickInCells = InExtentBeyondBrickInCells;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRHUD.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRHUD*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRHUD* ABRHUD::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRHUD", "Get");

	Params::BRHUD_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetHUDWidget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHUDWidgetBase*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHUDWidgetBase* ABRHUD::GetHUDWidget(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRHUD", "GetHUDWidget");

	Params::BRHUD_GetHUDWidget Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.ConditionalDisableBackgroundBlur
// (Final, Native, Private)

void ABRHUD::ConditionalDisableBackgroundBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "ConditionalDisableBackgroundBlur");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHUD.HideDialogByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRDialogBase>        Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfTopmost                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRHUD::HideDialogByClass(TSubclassOf<class UBRDialogBase> Class_0, bool bOnlyIfTopmost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "HideDialogByClass");

	Params::BRHUD_HideDialogByClass Parms{};

	Parms.Class_0 = Class_0;
	Parms.bOnlyIfTopmost = bOnlyIfTopmost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHUD.OpenDialogByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRDialogBase>        Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyIfNoOther                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRDialogBase*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRDialogBase* ABRHUD::OpenDialogByClass(TSubclassOf<class UBRDialogBase> Class_0, bool bOnlyIfNoOther, bool bCreateIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "OpenDialogByClass");

	Params::BRHUD_OpenDialogByClass Parms{};

	Parms.Class_0 = Class_0;
	Parms.bOnlyIfNoOther = bOnlyIfNoOther;
	Parms.bCreateIfMissing = bCreateIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.SetFreeMouse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFreeMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRHUD::SetFreeMouse(bool bFreeMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "SetFreeMouse");

	Params::BRHUD_SetFreeMouse Parms{};

	Parms.bFreeMouse = bFreeMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHUD.SetHideHud
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHideHud                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRHUD::SetHideHud(bool bHideHud)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "SetHideHud");

	Params::BRHUD_SetHideHud Parms{};

	Parms.bHideHud = bHideHud;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHUD.GetDialogByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBRDialogBase>        Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRDialogBase*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRDialogBase* ABRHUD::GetDialogByClass(TSubclassOf<class UBRDialogBase> Class_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetDialogByClass");

	Params::BRHUD_GetDialogByClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetFreeMouse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRHUD::GetFreeMouse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetFreeMouse");

	Params::BRHUD_GetFreeMouse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetHideHud
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRHUD::GetHideHud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetHideHud");

	Params::BRHUD_GetHideHud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetMostRecentOpenDialog
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRDialogBase*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRDialogBase* ABRHUD::GetMostRecentOpenDialog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetMostRecentOpenDialog");

	Params::BRHUD_GetMostRecentOpenDialog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetOpenDialogs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRDialogBase*>            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRDialogBase*> ABRHUD::GetOpenDialogs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetOpenDialogs");

	Params::BRHUD_GetOpenDialogs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.GetOrCreateDialogByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBRDialogBase>        Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRDialogBase*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRDialogBase* ABRHUD::GetOrCreateDialogByClass(TSubclassOf<class UBRDialogBase> Class_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "GetOrCreateDialogByClass");

	Params::BRHUD_GetOrCreateDialogByClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.HasAnyOpenDialogs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRHUD::HasAnyOpenDialogs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "HasAnyOpenDialogs");

	Params::BRHUD_HasAnyOpenDialogs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHUD.HasAnyOpenDialogsExcept
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRDialogBase*              Dialog                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRHUD::HasAnyOpenDialogsExcept(const class UBRDialogBase* Dialog) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHUD", "HasAnyOpenDialogsExcept");

	Params::BRHUD_HasAnyOpenDialogsExcept Parms{};

	Parms.Dialog = Dialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRApplicatorComponentListEntryWidget.Setup
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBrickComponentTypeBase*          InComponentType                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentListEntryWidget::Setup(class UBrickComponentTypeBase* InComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentListEntryWidget", "Setup");

	Params::BRApplicatorComponentListEntryWidget_Setup Parms{};

	Parms.InComponentType = InComponentType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRApplicatorComponentListEntryWidget.TriggerSelected
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorComponentListEntryWidget::TriggerSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentListEntryWidget", "TriggerSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentListCategoryWidget.Setup
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InCategoryName                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRApplicatorComponentListCategoryWidget::Setup(const class FText& InCategoryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentListCategoryWidget", "Setup");

	Params::BRApplicatorComponentListCategoryWidget_Setup Parms{};

	Parms.InCategoryName = std::move(InCategoryName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentListWidget.Setup
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentListWidget::Setup(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentListWidget", "Setup");

	Params::BRApplicatorComponentListWidget_Setup Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.OnComponentEnabledChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentWidget::OnComponentEnabledChanged(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "OnComponentEnabledChanged");

	Params::BRApplicatorComponentWidget_OnComponentEnabledChanged Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.Remove
// (Native, Event, Public, BlueprintEvent)

void UBRApplicatorComponentWidget::Remove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "Remove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.Setup
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UBRApplicatorBrickDialog*         InApplicatorDialog                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          InComponentType                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentWidget::Setup(class UBRApplicatorBrickDialog* InApplicatorDialog, class UBrickComponentTypeBase* InComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "Setup");

	Params::BRApplicatorComponentWidget_Setup Parms{};

	Parms.InApplicatorDialog = InApplicatorDialog;
	Parms.InComponentType = InComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.TriggerEditComponent
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorComponentWidget::TriggerEditComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "TriggerEditComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.TriggerRemoveComponent
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorComponentWidget::TriggerRemoveComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "TriggerRemoveComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentWidget.GetComponentType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickComponentTypeBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickComponentTypeBase* UBRApplicatorComponentWidget::GetComponentType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentWidget", "GetComponentType");

	Params::BRApplicatorComponentWidget_GetComponentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.CanCreateBrickType
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UProceduralBrick::CanCreateBrickType(const struct FIntVector& HalfSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "CanCreateBrickType");

	Params::ProceduralBrick_CanCreateBrickType Parms{};

	Parms.HalfSize = std::move(HalfSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.ComputeBrickMenuPresets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FIntVector>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FIntVector> UProceduralBrick::ComputeBrickMenuPresets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "ComputeBrickMenuPresets");

	Params::ProceduralBrick_ComputeBrickMenuPresets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.CreateBrickMenuPresets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UBrickType*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBrickType*> UProceduralBrick::CreateBrickMenuPresets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "CreateBrickMenuPresets");

	Params::ProceduralBrick_CreateBrickMenuPresets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.FindBrickType
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UProceduralBrick::FindBrickType(const struct FIntVector& HalfSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "FindBrickType");

	Params::ProceduralBrick_FindBrickType Parms{};

	Parms.HalfSize = std::move(HalfSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.FindOrCreateBrickType
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UProceduralBrick::FindOrCreateBrickType(const struct FIntVector& HalfSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "FindOrCreateBrickType");

	Params::ProceduralBrick_FindOrCreateBrickType Parms{};

	Parms.HalfSize = std::move(HalfSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.FindOrCreateBrickTypeChecked
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UProceduralBrick::FindOrCreateBrickTypeChecked(const struct FIntVector& HalfSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "FindOrCreateBrickTypeChecked");

	Params::ProceduralBrick_FindOrCreateBrickTypeChecked Parms{};

	Parms.HalfSize = std::move(HalfSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.GetAxisHalfSizeText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   HalfSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UProceduralBrick::GetAxisHalfSizeText(int32 HalfSize, EBrickAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "GetAxisHalfSizeText");

	Params::ProceduralBrick_GetAxisHalfSizeText Parms{};

	Parms.HalfSize = HalfSize;
	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.ProceduralBrick.GetResizerConfig
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FIntVector*                      OutSizeMin                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutSizeMax                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutSizeStep                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProceduralBrick::GetResizerConfig(struct FIntVector* OutSizeMin, struct FIntVector* OutSizeMax, struct FIntVector* OutSizeStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "GetResizerConfig");

	Params::ProceduralBrick_GetResizerConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSizeMin != nullptr)
		*OutSizeMin = std::move(Parms.OutSizeMin);

	if (OutSizeMax != nullptr)
		*OutSizeMax = std::move(Parms.OutSizeMax);

	if (OutSizeStep != nullptr)
		*OutSizeStep = std::move(Parms.OutSizeStep);
}


// Function Brickadia.ProceduralBrick.NearestCreatableBrickType
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UProceduralBrick::NearestCreatableBrickType(const struct FIntVector& HalfSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrick", "NearestCreatableBrickType");

	Params::ProceduralBrick_NearestCreatableBrickType Parms{};

	Parms.HalfSize = std::move(HalfSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRApplicatorBrickDialog.GetComponentListContent
// (Final, Native, Private)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UBRApplicatorBrickDialog::GetComponentListContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "GetComponentListContent");

	Params::BRApplicatorBrickDialog_GetComponentListContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Interaction
// (Final, Native, Private)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::OnCollidesChanged_Interaction(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "OnCollidesChanged_Interaction");

	Params::BRApplicatorBrickDialog_OnCollidesChanged_Interaction Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Player
// (Final, Native, Private)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::OnCollidesChanged_Player(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "OnCollidesChanged_Player");

	Params::BRApplicatorBrickDialog_OnCollidesChanged_Player Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.OnCollidesChanged_Weapon
// (Final, Native, Private)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::OnCollidesChanged_Weapon(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "OnCollidesChanged_Weapon");

	Params::BRApplicatorBrickDialog_OnCollidesChanged_Weapon Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.OnVisibleChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bIsChecked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::OnVisibleChanged(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "OnVisibleChanged");

	Params::BRApplicatorBrickDialog_OnVisibleChanged Parms{};

	Parms.bIsChecked = bIsChecked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.SetupAndOpen
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRTool_Applicator*               InApplicator                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::SetupAndOpen(class ABRTool_Applicator* InApplicator, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "SetupAndOpen");

	Params::BRApplicatorBrickDialog_SetupAndOpen Parms{};

	Parms.InApplicator = InApplicator;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.TriggerClearAll
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorBrickDialog::TriggerClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "TriggerClearAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.TriggerLoadFromPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::TriggerLoadFromPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "TriggerLoadFromPreset");

	Params::BRApplicatorBrickDialog_TriggerLoadFromPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.TriggerResetToDefaults
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorBrickDialog::TriggerResetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "TriggerResetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.TriggerSaveToPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorBrickDialog::TriggerSaveToPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "TriggerSaveToPreset");

	Params::BRApplicatorBrickDialog_TriggerSaveToPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.TriggerShowComponentList
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorBrickDialog::TriggerShowComponentList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "TriggerShowComponentList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorBrickDialog.GetApplicator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRTool_Applicator*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRTool_Applicator* UBRApplicatorBrickDialog::GetApplicator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "GetApplicator");

	Params::BRApplicatorBrickDialog_GetApplicator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRApplicatorBrickDialog.GetCurrentBrickHandle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FBrickHandle UBRApplicatorBrickDialog::GetCurrentBrickHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorBrickDialog", "GetCurrentBrickHandle");

	Params::BRApplicatorBrickDialog_GetCurrentBrickHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.DialogBackdropBase.DisableBackgroundBlur
// (Event, Public, BlueprintEvent)

void UDialogBackdropBase::DisableBackgroundBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogBackdropBase", "DisableBackgroundBlur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.DialogBackdropBase.DisableClickCatcher
// (Event, Public, BlueprintEvent)

void UDialogBackdropBase::DisableClickCatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogBackdropBase", "DisableClickCatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.DialogBackdropBase.EnableBackgroundBlur
// (Event, Public, BlueprintEvent)

void UDialogBackdropBase::EnableBackgroundBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogBackdropBase", "EnableBackgroundBlur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.DialogBackdropBase.EnableClickCatcher
// (Event, Public, BlueprintEvent)

void UDialogBackdropBase::EnableClickCatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogBackdropBase", "EnableClickCatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRApplicatorComponentDialog.ApplyChanges
// (Final, Native, Private)

void UBRApplicatorComponentDialog::ApplyChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "ApplyChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.CommitChanges
// (Final, Native, Private)

void UBRApplicatorComponentDialog::CommitChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "CommitChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.SetupAndOpen
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRTool_Applicator*               InApplicator                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentDialog::SetupAndOpen(class ABRTool_Applicator* InApplicator, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "SetupAndOpen");

	Params::BRApplicatorComponentDialog_SetupAndOpen Parms{};

	Parms.InApplicator = InApplicator;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.SetupOptions
// (Final, Native, Private)

void UBRApplicatorComponentDialog::SetupOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "SetupOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.SubmitChanges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCommit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentDialog::SubmitChanges(const struct FInspectorPropertyChangelist& Changelist, bool bCommit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "SubmitChanges");

	Params::BRApplicatorComponentDialog_SubmitChanges Parms{};

	Parms.Changelist = std::move(Changelist);
	Parms.bCommit = bCommit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.TriggerLoadFromPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentDialog::TriggerLoadFromPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "TriggerLoadFromPreset");

	Params::BRApplicatorComponentDialog_TriggerLoadFromPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.TriggerResetToDefaults
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorComponentDialog::TriggerResetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "TriggerResetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.TriggerReturn
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorComponentDialog::TriggerReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "TriggerReturn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorComponentDialog.TriggerSaveToPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorComponentDialog::TriggerSaveToPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorComponentDialog", "TriggerSaveToPreset");

	Params::BRApplicatorComponentDialog_TriggerSaveToPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.ApplyChanges
// (Final, Native, Private)

void UBRApplicatorEntityDialog::ApplyChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "ApplyChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.CommitChanges
// (Final, Native, Private)

void UBRApplicatorEntityDialog::CommitChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "CommitChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.SetupAndOpen
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRTool_Applicator*               InApplicator                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorEntityDialog::SetupAndOpen(class ABRTool_Applicator* InApplicator, class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "SetupAndOpen");

	Params::BRApplicatorEntityDialog_SetupAndOpen Parms{};

	Parms.InApplicator = InApplicator;
	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.SetupOptions
// (Final, Native, Private)

void UBRApplicatorEntityDialog::SetupOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "SetupOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.SubmitChanges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCommit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorEntityDialog::SubmitChanges(const struct FInspectorPropertyChangelist& Changelist, bool bCommit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "SubmitChanges");

	Params::BRApplicatorEntityDialog_SubmitChanges Parms{};

	Parms.Changelist = std::move(Changelist);
	Parms.bCommit = bCommit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.TriggerLoadFromPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorEntityDialog::TriggerLoadFromPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "TriggerLoadFromPreset");

	Params::BRApplicatorEntityDialog_TriggerLoadFromPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.TriggerResetToDefaults
// (Final, Native, Public, BlueprintCallable)

void UBRApplicatorEntityDialog::TriggerResetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "TriggerResetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.TriggerSaveToPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorEntityDialog::TriggerSaveToPreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "TriggerSaveToPreset");

	Params::BRApplicatorEntityDialog_TriggerSaveToPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRApplicatorEntityDialog.GetCurrentEntity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UBRApplicatorEntityDialog::GetCurrentEntity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorEntityDialog", "GetCurrentEntity");

	Params::BRApplicatorEntityDialog_GetCurrentEntity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAssetManager.GenerateCatalogBrickTypeArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class UBrickType*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBrickType*> UBRAssetManager::GenerateCatalogBrickTypeArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRAssetManager", "GenerateCatalogBrickTypeArray");

	Params::BRAssetManager_GenerateCatalogBrickTypeArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAssetManager.IsBrickListReady
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                EventToCallIfNot                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAssetManager::IsBrickListReady(const TDelegate<void()>& EventToCallIfNot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRAssetManager", "IsBrickListReady");

	Params::BRAssetManager_IsBrickListReady Parms{};

	Parms.EventToCallIfNot = EventToCallIfNot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAssetManager.SyncGetGameTypeAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UBRGameTypeDescriptor*>*   Assets                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRAssetManager::SyncGetGameTypeAssets(TArray<class UBRGameTypeDescriptor*>* Assets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRAssetManager", "SyncGetGameTypeAssets");

	Params::BRAssetManager_SyncGetGameTypeAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Assets != nullptr)
		*Assets = std::move(Parms.Assets);
}


// Function Brickadia.BRAssetManager.FindBrickAssetByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickAsset*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickAsset* UBRAssetManager::FindBrickAssetByName(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAssetManager", "FindBrickAssetByName");

	Params::BRAssetManager_FindBrickAssetByName Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAssetManager.FindMapPackageByCommandName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UWorld>*           MapPackage                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAssetManager::FindMapPackageByCommandName(const class FString& Name_0, TSoftObjectPtr<class UWorld>* MapPackage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAssetManager", "FindMapPackageByCommandName");

	Params::BRAssetManager_FindMapPackageByCommandName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MapPackage != nullptr)
		*MapPackage = Parms.MapPackage;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInteractablePromptWidget.Setup
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PromptMessage                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInteractablePromptWidget::Setup(const struct FBrickHandle& BrickHandle, const class FString& PromptMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInteractablePromptWidget", "Setup");

	Params::BRInteractablePromptWidget_Setup Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.PromptMessage = std::move(PromptMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.IsSteamBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::IsSteamBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRAuthSubsystem", "IsSteamBuild");

	Params::BRAuthSubsystem_IsSteamBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.GetConnectString
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRAuthSubsystem::GetConnectString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetConnectString");

	Params::BRAuthSubsystem_GetConnectString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.GetExternalName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRAuthSubsystem::GetExternalName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetExternalName");

	Params::BRAuthSubsystem_GetExternalName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.RetryCheckLogin
// (Final, Native, Public, BlueprintCallable)

void UBRAuthSubsystem::RetryCheckLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "RetryCheckLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.RetrySteamLogin
// (Final, Native, Public, BlueprintCallable)

void UBRAuthSubsystem::RetrySteamLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "RetrySteamLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.StartConnectSteamAccount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRAuthSubsystem::StartConnectSteamAccount(const class FString& Email, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "StartConnectSteamAccount");

	Params::BRAuthSubsystem_StartConnectSteamAccount Parms{};

	Parms.Email = std::move(Email);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.StartLogin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRAuthSubsystem::StartLogin(const class FString& Email, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "StartLogin");

	Params::BRAuthSubsystem_StartLogin Parms{};

	Parms.Email = std::move(Email);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.StartLogout
// (Final, Native, Public, BlueprintCallable)

void UBRAuthSubsystem::StartLogout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "StartLogout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.StartRegisterSteamAccount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRAuthSubsystem::StartRegisterSteamAccount(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "StartRegisterSteamAccount");

	Params::BRAuthSubsystem_StartRegisterSteamAccount Parms{};

	Parms.UserName = std::move(UserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAuthSubsystem.GetAuthErrorCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRAuthSubsystem::GetAuthErrorCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetAuthErrorCode");

	Params::BRAuthSubsystem_GetAuthErrorCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.GetAuthErrorMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRAuthSubsystem::GetAuthErrorMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetAuthErrorMessage");

	Params::BRAuthSubsystem_GetAuthErrorMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.GetAuthState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRAuthState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRAuthState UBRAuthSubsystem::GetAuthState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetAuthState");

	Params::BRAuthSubsystem_GetAuthState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.GetAuthUserData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRAuthUserData            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FBRAuthUserData UBRAuthSubsystem::GetAuthUserData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "GetAuthUserData");

	Params::BRAuthSubsystem_GetAuthUserData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.HasAuthError
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::HasAuthError() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "HasAuthError");

	Params::BRAuthSubsystem_HasAuthError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.IsAuthStateInvalid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::IsAuthStateInvalid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "IsAuthStateInvalid");

	Params::BRAuthSubsystem_IsAuthStateInvalid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.IsAuthStatePending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::IsAuthStatePending() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "IsAuthStatePending");

	Params::BRAuthSubsystem_IsAuthStatePending Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.IsAuthStateValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::IsAuthStateValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "IsAuthStateValid");

	Params::BRAuthSubsystem_IsAuthStateValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAuthSubsystem.IsLoggedInWithEOS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRAuthSubsystem::IsLoggedInWithEOS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAuthSubsystem", "IsLoggedInWithEOS");

	Params::BRAuthSubsystem_IsLoggedInWithEOS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRAutoSaveSubsystem.ForceLastModifyTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// double                                  Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRAutoSaveSubsystem::ForceLastModifyTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAutoSaveSubsystem", "ForceLastModifyTime");

	Params::BRAutoSaveSubsystem_ForceLastModifyTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAutoSaveSubsystem.HandleSettingsChange
// (Final, Native, Public)
// Parameters:
// class UBRGameSettingsBase*              SettingsInstance                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRAutoSaveSubsystem::HandleSettingsChange(class UBRGameSettingsBase* SettingsInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAutoSaveSubsystem", "HandleSettingsChange");

	Params::BRAutoSaveSubsystem_HandleSettingsChange Parms{};

	Parms.SettingsInstance = SettingsInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlogHelpers.GetBestBlogImageUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    FullSizeUrl                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlogHelpers::GetBestBlogImageUrl(const class FString& FullSizeUrl, int32 DesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlogHelpers", "GetBestBlogImageUrl");

	Params::BRBlogHelpers_GetBestBlogImageUrl Parms{};

	Parms.FullSizeUrl = std::move(FullSizeUrl);
	Parms.DesiredWidth = DesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRListBlogPostsAsyncAction.AsyncListBlogPosts
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumPostsToRequest                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRListBlogPostsAsyncAction*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRListBlogPostsAsyncAction* UBRListBlogPostsAsyncAction::AsyncListBlogPosts(class UObject* WorldContextObject, int32 InSequence, int32 NumPostsToRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRListBlogPostsAsyncAction", "AsyncListBlogPosts");

	Params::BRListBlogPostsAsyncAction_AsyncListBlogPosts Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.NumPostsToRequest = NumPostsToRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRDownloadAndResizeImageAsyncAction.AsyncDownloadAndResizeImage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredHeight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCache                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRDownloadAndResizeImageAsyncAction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRDownloadAndResizeImageAsyncAction* UBRDownloadAndResizeImageAsyncAction::AsyncDownloadAndResizeImage(class UObject* WorldContextObject, int32 InSequence, const class FString& URL, int32 DesiredWidth, int32 DesiredHeight, bool bUseCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRDownloadAndResizeImageAsyncAction", "AsyncDownloadAndResizeImage");

	Params::BRDownloadAndResizeImageAsyncAction_AsyncDownloadAndResizeImage Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.URL = std::move(URL);
	Parms.DesiredWidth = DesiredWidth;
	Parms.DesiredHeight = DesiredHeight;
	Parms.bUseCache = bUseCache;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.AbortConnectingToServer
// (Final, Native, Static, Public, BlueprintCallable)

void UBRBlueprintLibrary::AbortConnectingToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "AbortConnectingToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.ActorLineTraceSingle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::ActorLineTraceSingle(struct FHitResult* OutHit, class AActor* Actor, const struct FVector& Start, const struct FVector& End, bool bTraceComplex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ActorLineTraceSingle");

	Params::BRBlueprintLibrary_ActorLineTraceSingle Parms{};

	Parms.Actor = Actor;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.bTraceComplex = bTraceComplex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.AssetNameToDisplayString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::AssetNameToDisplayString(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "AssetNameToDisplayString");

	Params::BRBlueprintLibrary_AssetNameToDisplayString Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.BeginConnectingToServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AddressAndPort                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    ServerIdString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::BeginConnectingToServer(const class UObject* WorldContextObject, const class FString& AddressAndPort, const TMap<class FString, class FString>& Options, const class FString& ServerIdString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "BeginConnectingToServer");

	Params::BRBlueprintLibrary_BeginConnectingToServer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AddressAndPort = std::move(AddressAndPort);
	Parms.Options = std::move(Options);
	Parms.ServerIdString = std::move(ServerIdString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.BRSaveConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::BRSaveConfig(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "BRSaveConfig");

	Params::BRBlueprintLibrary_BRSaveConfig Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.ClassToObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRBlueprintLibrary::ClassToObject(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ClassToObject");

	Params::BRBlueprintLibrary_ClassToObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.ColorToLinearColorNoSRGB
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRBlueprintLibrary::ColorToLinearColorNoSRGB(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ColorToLinearColorNoSRGB");

	Params::BRBlueprintLibrary_ColorToLinearColorNoSRGB Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.ComputeExponentialClampDelta
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampMin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampMax                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExponentialDistance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float&                                  OverflowStorage                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRBlueprintLibrary::ComputeExponentialClampDelta(float Current, float ClampMin, float ClampMax, float ExponentialDistance, float Delta, float& OverflowStorage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ComputeExponentialClampDelta");

	Params::BRBlueprintLibrary_ComputeExponentialClampDelta Parms{};

	Parms.Current = Current;
	Parms.ClampMin = ClampMin;
	Parms.ClampMax = ClampMax;
	Parms.ExponentialDistance = ExponentialDistance;
	Parms.Delta = Delta;
	Parms.OverflowStorage = OverflowStorage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OverflowStorage = Parms.OverflowStorage;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.ComputePreciseSkeletalMeshBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UBRBlueprintLibrary::ComputePreciseSkeletalMeshBounds(class USkeletalMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ComputePreciseSkeletalMeshBounds");

	Params::BRBlueprintLibrary_ComputePreciseSkeletalMeshBounds Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.Conv_StringToFColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor*                          OutConvertedColor                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   OutIsValid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::Conv_StringToFColor(const class FString& InString, struct FColor* OutConvertedColor, bool* OutIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "Conv_StringToFColor");

	Params::BRBlueprintLibrary_Conv_StringToFColor Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConvertedColor != nullptr)
		*OutConvertedColor = std::move(Parms.OutConvertedColor);

	if (OutIsValid != nullptr)
		*OutIsValid = Parms.OutIsValid;
}


// Function Brickadia.BRBlueprintLibrary.EqualEqual_ColorColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FColor&                    A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::EqualEqual_ColorColor(const struct FColor& A, const struct FColor& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "EqualEqual_ColorColor");

	Params::BRBlueprintLibrary_EqualEqual_ColorColor Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.EqualEqual_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::EqualEqual_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "EqualEqual_IntVectorIntVector");

	Params::BRBlueprintLibrary_EqualEqual_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.EscapeNetOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::EscapeNetOption(const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "EscapeNetOption");

	Params::BRBlueprintLibrary_EscapeNetOption Parms{};

	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.FormatLargeNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Number                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRBlueprintLibrary::FormatLargeNumber(int32 Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "FormatLargeNumber");

	Params::BRBlueprintLibrary_FormatLargeNumber Parms{};

	Parms.Number = Number;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.FormatLinearColorToHex
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::FormatLinearColorToHex(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "FormatLinearColorToHex");

	Params::BRBlueprintLibrary_FormatLinearColorToHex Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.FormatTimespanSimple
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimespan&                 Timespan                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRBlueprintLibrary::FormatTimespanSimple(const struct FTimespan& Timespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "FormatTimespanSimple");

	Params::BRBlueprintLibrary_FormatTimespanSimple Parms{};

	Parms.Timespan = std::move(Timespan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.FuzzyFindTest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Query                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::FuzzyFindTest(const class FString& Name_0, const class FString& Query)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "FuzzyFindTest");

	Params::BRBlueprintLibrary_FuzzyFindTest Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Query = std::move(Query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetActorBoundsCenter
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNonColliding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeFromChildActors                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBRBlueprintLibrary::GetActorBoundsCenter(class AActor* Actor, bool bNonColliding, bool bIncludeFromChildActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetActorBoundsCenter");

	Params::BRBlueprintLibrary_GetActorBoundsCenter Parms{};

	Parms.Actor = Actor;
	Parms.bNonColliding = bNonColliding;
	Parms.bIncludeFromChildActors = bIncludeFromChildActors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetBackendWebAddress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetBackendWebAddress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetBackendWebAddress");

	Params::BRBlueprintLibrary_GetBackendWebAddress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetBRGameState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRGameStateBase*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRGameStateBase* UBRBlueprintLibrary::GetBRGameState(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetBRGameState");

	Params::BRBlueprintLibrary_GetBRGameState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetBrickadiaVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetBrickadiaVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetBrickadiaVersion");

	Params::BRBlueprintLibrary_GetBrickadiaVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetBrickadiaVersionChangelist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRBlueprintLibrary::GetBrickadiaVersionChangelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetBrickadiaVersionChangelist");

	Params::BRBlueprintLibrary_GetBrickadiaVersionChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetBRPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* UBRBlueprintLibrary::GetBRPlayerController(const class UObject* WorldContextObject, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetBRPlayerController");

	Params::BRBlueprintLibrary_GetBRPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetClassDefaultObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UClass*                     Class_0                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRBlueprintLibrary::GetClassDefaultObject(const class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetClassDefaultObject");

	Params::BRBlueprintLibrary_GetClassDefaultObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetConnectStringFromServerEntry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonResponse_GetServers_Entry&Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InviteCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetConnectStringFromServerEntry(const struct FJsonResponse_GetServers_Entry& Entry, const class FString& InviteCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetConnectStringFromServerEntry");

	Params::BRBlueprintLibrary_GetConnectStringFromServerEntry Parms{};

	Parms.Entry = std::move(Entry);
	Parms.InviteCode = std::move(InviteCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetLoadedLightScenario
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetLoadedLightScenario(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetLoadedLightScenario");

	Params::BRBlueprintLibrary_GetLoadedLightScenario Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetMapInfoForCurrentMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRMapInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRMapInfo* UBRBlueprintLibrary::GetMapInfoForCurrentMap(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetMapInfoForCurrentMap");

	Params::BRBlueprintLibrary_GetMapInfoForCurrentMap Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetMapInfoForWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UWorld*                     World                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRMapInfo*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRMapInfo* UBRBlueprintLibrary::GetMapInfoForWorld(const class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetMapInfoForWorld");

	Params::BRBlueprintLibrary_GetMapInfoForWorld Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetObjectClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UBRBlueprintLibrary::GetObjectClass(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetObjectClass");

	Params::BRBlueprintLibrary_GetObjectClass Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetPlatformClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetPlatformClipboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetPlatformClipboard");

	Params::BRBlueprintLibrary_GetPlatformClipboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetSoftPackageName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TSoftObjectPtr<class UObject>&    Ptr                                                    (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::GetSoftPackageName(const TSoftObjectPtr<class UObject>& Ptr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetSoftPackageName");

	Params::BRBlueprintLibrary_GetSoftPackageName Parms{};

	Parms.Ptr = Ptr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.GetWeaponSimResourceState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRWeaponSimulationState&  State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRBlueprintLibrary::GetWeaponSimResourceState(const struct FBRWeaponSimulationState& State, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "GetWeaponSimResourceState");

	Params::BRBlueprintLibrary_GetWeaponSimResourceState Parms{};

	Parms.State = std::move(State);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IdOrRegisterBrickOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              BrickOwner                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRBlueprintLibrary::IdOrRegisterBrickOwner(const class UObject* WorldContextObject, class ABRPlayerController* BrickOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IdOrRegisterBrickOwner");

	Params::BRBlueprintLibrary_IdOrRegisterBrickOwner Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickOwner = BrickOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IdOrRegisterBrickOwner_NotPresent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickOwnerData&           BrickOwnerData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRBlueprintLibrary::IdOrRegisterBrickOwner_NotPresent(const class UObject* WorldContextObject, const struct FBrickOwnerData& BrickOwnerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IdOrRegisterBrickOwner_NotPresent");

	Params::BRBlueprintLibrary_IdOrRegisterBrickOwner_NotPresent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickOwnerData = std::move(BrickOwnerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsClassPackageBlacklisted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsClassPackageBlacklisted(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsClassPackageBlacklisted");

	Params::BRBlueprintLibrary_IsClassPackageBlacklisted Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsContrastColorLight
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsContrastColorLight(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsContrastColorLight");

	Params::BRBlueprintLibrary_IsContrastColorLight Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsInputActionPressed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputActionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsInputActionPressed(const class APlayerController* PlayerController, class FName InputActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsInputActionPressed");

	Params::BRBlueprintLibrary_IsInputActionPressed Parms{};

	Parms.PlayerController = PlayerController;
	Parms.InputActionName = InputActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsInviteCodeFormat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsInviteCodeFormat(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsInviteCodeFormat");

	Params::BRBlueprintLibrary_IsInviteCodeFormat Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsObjectPackageBlacklisted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsObjectPackageBlacklisted(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsObjectPackageBlacklisted");

	Params::BRBlueprintLibrary_IsObjectPackageBlacklisted Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.IsPublicBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::IsPublicBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "IsPublicBuild");

	Params::BRBlueprintLibrary_IsPublicBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.JoinTextArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FText>&              SourceArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Separator                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRBlueprintLibrary::JoinTextArray(const TArray<class FText>& SourceArray, const class FText& Separator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "JoinTextArray");

	Params::BRBlueprintLibrary_JoinTextArray Parms{};

	Parms.SourceArray = std::move(SourceArray);
	Parms.Separator = std::move(Separator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.K2_SetMultiTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimerHandle UBRBlueprintLibrary::K2_SetMultiTimerDelegate(TDelegate<void()> Delegate, float Time, bool bLooping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "K2_SetMultiTimerDelegate");

	Params::BRBlueprintLibrary_K2_SetMultiTimerDelegate Parms{};

	Parms.Delegate = Delegate;
	Parms.Time = Time;
	Parms.bLooping = bLooping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.K2_SetTimerDelegateWithDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FirstDelay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimerHandle UBRBlueprintLibrary::K2_SetTimerDelegateWithDelay(TDelegate<void()> Delegate, float Time, float FirstDelay, bool bLooping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "K2_SetTimerDelegateWithDelay");

	Params::BRBlueprintLibrary_K2_SetTimerDelegateWithDelay Parms{};

	Parms.Delegate = Delegate;
	Parms.Time = Time;
	Parms.FirstDelay = FirstDelay;
	Parms.bLooping = bLooping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.LinearColorToColorNoSRGB
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              LinearColor                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRBlueprintLibrary::LinearColorToColorNoSRGB(const struct FLinearColor& LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "LinearColorToColorNoSRGB");

	Params::BRBlueprintLibrary_LinearColorToColorNoSRGB Parms{};

	Parms.LinearColor = std::move(LinearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.NativeBreakpoint
// (Final, Native, Static, Public, BlueprintCallable)

void UBRBlueprintLibrary::NativeBreakpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "NativeBreakpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.NaturalSortStringArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>&                  Strings                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::NaturalSortStringArray(TArray<class FString>& Strings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "NaturalSortStringArray");

	Params::BRBlueprintLibrary_NaturalSortStringArray Parms{};

	Parms.Strings = std::move(Strings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Strings = std::move(Parms.Strings);
}


// Function Brickadia.BRBlueprintLibrary.NotEqual_ColorColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FColor&                    A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::NotEqual_ColorColor(const struct FColor& A, const struct FColor& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "NotEqual_ColorColor");

	Params::BRBlueprintLibrary_NotEqual_ColorColor Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.NotEqual_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBlueprintLibrary::NotEqual_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "NotEqual_IntVectorIntVector");

	Params::BRBlueprintLibrary_NotEqual_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.ObjectToClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UBRBlueprintLibrary::ObjectToClass(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ObjectToClass");

	Params::BRBlueprintLibrary_ObjectToClass Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.ParseHexStringToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    HexCode                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRBlueprintLibrary::ParseHexStringToLinearColor(const class FString& HexCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "ParseHexStringToLinearColor");

	Params::BRBlueprintLibrary_ParseHexStringToLinearColor Parms{};

	Parms.HexCode = std::move(HexCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RandomFColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRBlueprintLibrary::RandomFColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RandomFColor");

	Params::BRBlueprintLibrary_RandomFColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RangeWrapInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RangeLowerBound                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RangeUpperBound                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRBlueprintLibrary::RangeWrapInteger(int32 Input, int32 RangeLowerBound, int32 RangeUpperBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RangeWrapInteger");

	Params::BRBlueprintLibrary_RangeWrapInteger Parms{};

	Parms.Input = Input;
	Parms.RangeLowerBound = RangeLowerBound;
	Parms.RangeUpperBound = RangeUpperBound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RecolorButtonStyle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FButtonStyle&              Style                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              LinearColor                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FButtonStyle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FButtonStyle UBRBlueprintLibrary::RecolorButtonStyle(const struct FButtonStyle& Style, const struct FLinearColor& LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RecolorButtonStyle");

	Params::BRBlueprintLibrary_RecolorButtonStyle Parms{};

	Parms.Style = std::move(Style);
	Parms.LinearColor = std::move(LinearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RecolorLinearColorFromDiff
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              OldColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              OldNormalColor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              BaseColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor UBRBlueprintLibrary::RecolorLinearColorFromDiff(const struct FLinearColor& OldColor, const struct FLinearColor& OldNormalColor, const struct FLinearColor& BaseColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RecolorLinearColorFromDiff");

	Params::BRBlueprintLibrary_RecolorLinearColorFromDiff Parms{};

	Parms.OldColor = std::move(OldColor);
	Parms.OldNormalColor = std::move(OldNormalColor);
	Parms.BaseColor = std::move(BaseColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RecolorSlateButtonBrushFromDiff
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSlateBrush&               OldBrush                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateBrush&               OldNormalBrush                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              BaseColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UBRBlueprintLibrary::RecolorSlateButtonBrushFromDiff(const struct FSlateBrush& OldBrush, const struct FSlateBrush& OldNormalBrush, const struct FLinearColor& BaseColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RecolorSlateButtonBrushFromDiff");

	Params::BRBlueprintLibrary_RecolorSlateButtonBrushFromDiff Parms{};

	Parms.OldBrush = std::move(OldBrush);
	Parms.OldNormalBrush = std::move(OldNormalBrush);
	Parms.BaseColor = std::move(BaseColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RecolorSlateColorFromDiff
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSlateColor&               OldColor                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateColor&               OldNormalColor                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              BaseColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor UBRBlueprintLibrary::RecolorSlateColorFromDiff(const struct FSlateColor& OldColor, const struct FSlateColor& OldNormalColor, const struct FLinearColor& BaseColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RecolorSlateColorFromDiff");

	Params::BRBlueprintLibrary_RecolorSlateColorFromDiff Parms{};

	Parms.OldColor = std::move(OldColor);
	Parms.OldNormalColor = std::move(OldNormalColor);
	Parms.BaseColor = std::move(BaseColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.RestartGame
// (Final, Native, Static, Public, BlueprintCallable)

void UBRBlueprintLibrary::RestartGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "RestartGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.SanitizeRegexString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::SanitizeRegexString(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SanitizeRegexString");

	Params::BRBlueprintLibrary_SanitizeRegexString Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.SetPlatformClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SetPlatformClipboard(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SetPlatformClipboard");

	Params::BRBlueprintLibrary_SetPlatformClipboard Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.SetUnfocusedVolumeMultiplier
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   NewMultiplier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SetUnfocusedVolumeMultiplier(float NewMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SetUnfocusedVolumeMultiplier");

	Params::BRBlueprintLibrary_SetUnfocusedVolumeMultiplier Parms{};

	Parms.NewMultiplier = NewMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.SetWorldGravityZ
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityZ                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SetWorldGravityZ(const class UObject* WorldContextObject, float GravityZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SetWorldGravityZ");

	Params::BRBlueprintLibrary_SetWorldGravityZ Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GravityZ = GravityZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBlueprintLibrary.SortPlayerStateArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ABRPlayerState*>&          States                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SortPlayerStateArray(TArray<class ABRPlayerState*>& States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SortPlayerStateArray");

	Params::BRBlueprintLibrary_SortPlayerStateArray Parms{};

	Parms.States = std::move(States);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	States = std::move(Parms.States);
}


// Function Brickadia.BRBlueprintLibrary.SortPlayerStateArray_ByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ABRPlayerState*>&          States                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SortPlayerStateArray_ByName(TArray<class ABRPlayerState*>& States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SortPlayerStateArray_ByName");

	Params::BRBlueprintLibrary_SortPlayerStateArray_ByName Parms{};

	Parms.States = std::move(States);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	States = std::move(Parms.States);
}


// Function Brickadia.BRBlueprintLibrary.SortTeamArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UBRRulesetTeam*>&          Teams                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SortTeamArray(TArray<class UBRRulesetTeam*>& Teams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SortTeamArray");

	Params::BRBlueprintLibrary_SortTeamArray Parms{};

	Parms.Teams = std::move(Teams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Teams = std::move(Parms.Teams);
}


// Function Brickadia.BRBlueprintLibrary.SplitNetOptions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>*     Output                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void UBRBlueprintLibrary::SplitNetOptions(const class FString& Options, TMap<class FString, class FString>* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "SplitNetOptions");

	Params::BRBlueprintLibrary_SplitNetOptions Parms{};

	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function Brickadia.BRBlueprintLibrary.TrimStartAndEnd
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::TrimStartAndEnd(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "TrimStartAndEnd");

	Params::BRBlueprintLibrary_TrimStartAndEnd Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBlueprintLibrary.UnescapeNetOption
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRBlueprintLibrary::UnescapeNetOption(const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRBlueprintLibrary", "UnescapeNetOption");

	Params::BRBlueprintLibrary_UnescapeNetOption Parms{};

	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBundleManager.RequestTravelToEnvironment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Environment                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHostListenServer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRBundleManager::RequestTravelToEnvironment(const class FString& Environment, bool bHostListenServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRBundleManager", "RequestTravelToEnvironment");

	Params::BRBundleManager_RequestTravelToEnvironment Parms{};

	Parms.Environment = std::move(Environment);
	Parms.bHostListenServer = bHostListenServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRBundleManager.RequestTravelToWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Revision                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHostListenServer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWriteable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRBundleManager::RequestTravelToWorld(const class FString& FilePath, int32 Revision, bool bHostListenServer, bool bWriteable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRBundleManager", "RequestTravelToWorld");

	Params::BRBundleManager_RequestTravelToWorld Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Revision = Revision;
	Parms.bHostListenServer = bHostListenServer;
	Parms.bWriteable = bWriteable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBundleManager.GetGalleryListingProvider
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IBRBundleListingProvider>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IBRBundleListingProvider> UBRBundleManager::GetGalleryListingProvider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRBundleManager", "GetGalleryListingProvider");

	Params::BRBundleManager_GetGalleryListingProvider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBundleManager.GetLocalListingProvider
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IBRBundleListingProvider>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IBRBundleListingProvider> UBRBundleManager::GetLocalListingProvider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRBundleManager", "GetLocalListingProvider");

	Params::BRBundleManager_GetLocalListingProvider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRBundleManager.GetPendingWorldBundle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRBundleDatabase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRBundleDatabase* UBRBundleManager::GetPendingWorldBundle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRBundleManager", "GetPendingWorldBundle");

	Params::BRBundleManager_GetPendingWorldBundle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCatalogObject.GetCatalogData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FBRCatalogData                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRCatalogData IBRCatalogObject::GetCatalogData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalogObject", "GetCatalogData");

	Params::BRCatalogObject_GetCatalogData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCatalog.Combined
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<class UBRCatalog*>&        Catalogs                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UBRCatalogCustomizationData*      Customization                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRCatalog*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRCatalog* UBRCatalog::Combined(const TArray<class UBRCatalog*>& Catalogs, class UBRCatalogCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRCatalog", "Combined");

	Params::BRCatalog_Combined Parms{};

	Parms.Catalogs = std::move(Catalogs);
	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCatalog.AddItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Category                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Tab                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Summary                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBRCatalogOverrides&       Overrides                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRCatalog::AddItem(class UObject* Item, const class FText& Name_0, const class FText& Category, const class FText& Tab, const class FText& Summary, const struct FBRCatalogOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalog", "AddItem");

	Params::BRCatalog_AddItem Parms{};

	Parms.Item = Item;
	Parms.Name_0 = std::move(Name_0);
	Parms.Category = std::move(Category);
	Parms.Tab = std::move(Tab);
	Parms.Summary = std::move(Summary);
	Parms.Overrides = std::move(Overrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCatalog.Sort
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRCatalogCustomizationData*      Customization                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRCatalog::Sort(class UBRCatalogCustomizationData* Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalog", "Sort");

	Params::BRCatalog_Sort Parms{};

	Parms.Customization = Customization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyDescriptor.IsEnabled
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPropertyDescriptor::IsEnabled(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor", "IsEnabled");

	Params::InspectorPropertyDescriptor_IsEnabled Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor.SetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyValue&   ChangeValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRunNotify                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyDescriptor::SetValue(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, const struct FInspectorPropertyValue& ChangeValue, bool bRunNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor", "SetValue");

	Params::InspectorPropertyDescriptor_SetValue Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ChangeValue = std::move(ChangeValue);
	Parms.bRunNotify = bRunNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyDescriptor.GetDefaultValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyDescriptor::GetDefaultValue(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor", "GetDefaultValue");

	Params::InspectorPropertyDescriptor_GetDefaultValue Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor.GetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyDescriptor::GetValue(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor", "GetValue");

	Params::InspectorPropertyDescriptor_GetValue Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor.IsDefaultValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPropertyDescriptor::IsDefaultValue(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor", "IsDefaultValue");

	Params::InspectorPropertyDescriptor_IsDefaultValue Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.AsyncGenerateCatalog
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UBRCatalog* CreatedCatalog)>&OnLoadedDelegate                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInspectorPropertyDescriptor_PrimaryAssetCatalog::AsyncGenerateCatalog(class UObject* WorldContext, const TDelegate<void(class UBRCatalog* CreatedCatalog)>& OnLoadedDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInspectorPropertyDescriptor_PrimaryAssetCatalog", "AsyncGenerateCatalog");

	Params::BRInspectorPropertyDescriptor_PrimaryAssetCatalog_AsyncGenerateCatalog Parms{};

	Parms.WorldContext = WorldContext;
	Parms.OnLoadedDelegate = OnLoadedDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.NameToCatalogData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             NameValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRCatalogData                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRCatalogData UBRInspectorPropertyDescriptor_PrimaryAssetCatalog::NameToCatalogData(class FName NameValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInspectorPropertyDescriptor_PrimaryAssetCatalog", "NameToCatalogData");

	Params::BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToCatalogData Parms{};

	Parms.NameValue = NameValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInspectorPropertyDescriptor_PrimaryAssetCatalog.NameToObject
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             NameValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRInspectorPropertyDescriptor_PrimaryAssetCatalog::NameToObject(class FName NameValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInspectorPropertyDescriptor_PrimaryAssetCatalog", "NameToObject");

	Params::BRInspectorPropertyDescriptor_PrimaryAssetCatalog_NameToObject Parms{};

	Parms.NameValue = NameValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCatalogSubsystem.AsyncGetOrGeneratePrimaryAssetCatalog
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetType&         Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UBRCatalog* CreatedCatalog)>&OnLoadedDelegate                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CacheName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRCatalogOverrides&       Overrides                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRCatalogSubsystem::AsyncGetOrGeneratePrimaryAssetCatalog(const struct FPrimaryAssetType& Type, const TDelegate<void(class UBRCatalog* CreatedCatalog)>& OnLoadedDelegate, class FName CacheName, const struct FBRCatalogOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalogSubsystem", "AsyncGetOrGeneratePrimaryAssetCatalog");

	Params::BRCatalogSubsystem_AsyncGetOrGeneratePrimaryAssetCatalog Parms{};

	Parms.Type = std::move(Type);
	Parms.OnLoadedDelegate = OnLoadedDelegate;
	Parms.CacheName = CacheName;
	Parms.Overrides = std::move(Overrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCatalogSubsystem.GetOrGenerateCatalog
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           Assets                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             CacheName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRCatalogCustomizationData*      Customization                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRCatalogOverrides&       Overrides                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UBRCatalog*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRCatalog* UBRCatalogSubsystem::GetOrGenerateCatalog(const TArray<class UObject*>& Assets, class FName CacheName, class UBRCatalogCustomizationData* Customization, const struct FBRCatalogOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalogSubsystem", "GetOrGenerateCatalog");

	Params::BRCatalogSubsystem_GetOrGenerateCatalog Parms{};

	Parms.Assets = std::move(Assets);
	Parms.CacheName = CacheName;
	Parms.Customization = Customization;
	Parms.Overrides = std::move(Overrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCatalogSubsystem.SyncGetOrGeneratePrimaryAssetCatalog
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FPrimaryAssetType&         Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CacheName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRCatalogOverrides&       Overrides                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UBRCatalog*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRCatalog* UBRCatalogSubsystem::SyncGetOrGeneratePrimaryAssetCatalog(const struct FPrimaryAssetType& Type, class FName CacheName, const struct FBRCatalogOverrides& Overrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCatalogSubsystem", "SyncGetOrGeneratePrimaryAssetCatalog");

	Params::BRCatalogSubsystem_SyncGetOrGeneratePrimaryAssetCatalog Parms{};

	Parms.Type = std::move(Type);
	Parms.CacheName = CacheName;
	Parms.Overrides = std::move(Overrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.IsAnyPartTagValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FName>&              PartTags                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TSet<class FName>&                AllowedTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::IsAnyPartTagValid(const TArray<class FName>& PartTags, const TSet<class FName>& AllowedTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRCharacter", "IsAnyPartTagValid");

	Params::BRCharacter_IsAnyPartTagValid Parms{};

	Parms.PartTags = std::move(PartTags);
	Parms.AllowedTags = std::move(AllowedTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.AddStartingInventory
// (Native, Event, Public, BlueprintEvent)

void ABRCharacter::AddStartingInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AddStartingInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.AttachPlayerDecal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerDecalDescriptor*         Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::AttachPlayerDecal(class UBRPlayerDecalDescriptor* Descriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AttachPlayerDecal");

	Params::BRCharacter_AttachPlayerDecal Parms{};

	Parms.Descriptor = Descriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.AttachPlayerPart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerPartDescriptor*          Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRules                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPlayerPartComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerPartComponent* ABRCharacter::AttachPlayerPart(class UBRPlayerPartDescriptor* Descriptor, bool bIgnoreRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AttachPlayerPart");

	Params::BRCharacter_AttachPlayerPart Parms{};

	Parms.Descriptor = Descriptor;
	Parms.bIgnoreRules = bIgnoreRules;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.AttachPlayerPartBySocketName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerPartDescriptor*          Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRules                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPlayerPartComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerPartComponent* ABRCharacter::AttachPlayerPartBySocketName(class UBRPlayerPartDescriptor* Descriptor, class FName InSocketName, bool bIgnoreRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AttachPlayerPartBySocketName");

	Params::BRCharacter_AttachPlayerPartBySocketName Parms{};

	Parms.Descriptor = Descriptor;
	Parms.InSocketName = InSocketName;
	Parms.bIgnoreRules = bIgnoreRules;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.AttachPlayerPartByTreeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerPartDescriptor*          Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRules                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPlayerPartComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerPartComponent* ABRCharacter::AttachPlayerPartByTreeIndex(class UBRPlayerPartDescriptor* Descriptor, int32 TreeIndex, bool bIgnoreRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AttachPlayerPartByTreeIndex");

	Params::BRCharacter_AttachPlayerPartByTreeIndex Parms{};

	Parms.Descriptor = Descriptor;
	Parms.TreeIndex = TreeIndex;
	Parms.bIgnoreRules = bIgnoreRules;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.AttachRequiredParts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UBRPlayerPartComponent*>*  OutAttachedParts                                       (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::AttachRequiredParts(TArray<class UBRPlayerPartComponent*>* OutAttachedParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "AttachRequiredParts");

	Params::BRCharacter_AttachRequiredParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAttachedParts != nullptr)
		*OutAttachedParts = std::move(Parms.OutAttachedParts);

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.BuildAvatarCustomizationFromPlayerParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBRPlayerAvatarCustomizationV3   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRPlayerAvatarCustomizationV3 ABRCharacter::BuildAvatarCustomizationFromPlayerParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "BuildAvatarCustomizationFromPlayerParts");

	Params::BRCharacter_BuildAvatarCustomizationFromPlayerParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.BuildPlayerAvatar
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRPlayerAvatarCustomizationV3&NewAvatar                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRules                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::BuildPlayerAvatar(const struct FBRPlayerAvatarCustomizationV3& NewAvatar, bool bIgnoreRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "BuildPlayerAvatar");

	Params::BRCharacter_BuildPlayerAvatar Parms{};

	Parms.NewAvatar = std::move(NewAvatar);
	Parms.bIgnoreRules = bIgnoreRules;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.ChangeSeatZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ChangeSeatZoomLevel(const float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ChangeSeatZoomLevel");

	Params::BRCharacter_ChangeSeatZoomLevel Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ClearDesiredInventoryIndex
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::ClearDesiredInventoryIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ClearDesiredInventoryIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ClientOnObjectReleased
// (Net, NetReliable, Native, Event, Public, NetClient)

void ABRCharacter::ClientOnObjectReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ClientOnObjectReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ClientSetFirstPerson
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// bool                                    bNewFirstPerson                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ClientSetFirstPerson(bool bNewFirstPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ClientSetFirstPerson");

	Params::BRCharacter_ClientSetFirstPerson Parms{};

	Parms.bNewFirstPerson = bNewFirstPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ClientSetFlying
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// EBRCharacterFlyMode                     NewFlyMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ClientSetFlying(EBRCharacterFlyMode NewFlyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ClientSetFlying");

	Params::BRCharacter_ClientSetFlying Parms{};

	Parms.NewFlyMode = NewFlyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.EquipPlacer
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::EquipPlacer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "EquipPlacer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.HandleAttachWieldedItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRItemBase*                      Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::HandleAttachWieldedItem(class ABRItemBase* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "HandleAttachWieldedItem");

	Params::BRCharacter_HandleAttachWieldedItem Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.HandleDetachWieldedItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRItemBase*                      Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::HandleDetachWieldedItem(class ABRItemBase* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "HandleDetachWieldedItem");

	Params::BRCharacter_HandleDetachWieldedItem Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.HandleLocalGeneralSettingsChanged
// (Final, Native, Public)
// Parameters:
// class UBRGameSettingsBase*              SettingsObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::HandleLocalGeneralSettingsChanged(class UBRGameSettingsBase* SettingsObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "HandleLocalGeneralSettingsChanged");

	Params::BRCharacter_HandleLocalGeneralSettingsChanged Parms{};

	Parms.SettingsObject = SettingsObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.IsGhost
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::IsGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "IsGhost");

	Params::BRCharacter_IsGhost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.MaybeStartInteract
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::MaybeStartInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MaybeStartInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MaybeStopInteract
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::MaybeStopInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MaybeStopInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastHandleDeath
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   FinalDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DeathCauser                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ImpulseBone                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantizeNormal& ImpulseDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantize100&    PreDeathVelocity                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::MulticastHandleDeath(float FinalDamage, const class UDamageType* DeathType, class ABRPlayerState* InstigatedBy, class AActor* DeathCauser, class FName ImpulseBone, const struct FVector_NetQuantizeNormal& ImpulseDirection, const struct FVector_NetQuantize100& PreDeathVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastHandleDeath");

	Params::BRCharacter_MulticastHandleDeath Parms{};

	Parms.FinalDamage = FinalDamage;
	Parms.DeathType = DeathType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DeathCauser = DeathCauser;
	Parms.ImpulseBone = ImpulseBone;
	Parms.ImpulseDirection = std::move(ImpulseDirection);
	Parms.PreDeathVelocity = std::move(PreDeathVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastOnInteractPress
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// EBRCharacterInteractAnimType            AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::MulticastOnInteractPress(EBRCharacterInteractAnimType AnimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastOnInteractPress");

	Params::BRCharacter_MulticastOnInteractPress Parms{};

	Parms.AnimType = AnimType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastOnInteractRelease
// (Net, Native, Event, NetMulticast, Public)

void ABRCharacter::MulticastOnInteractRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastOnInteractRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastOnObjectGrabbed
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ABRCharacter::MulticastOnObjectGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastOnObjectGrabbed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastPlaySound
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::MulticastPlaySound(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastPlaySound");

	Params::BRCharacter_MulticastPlaySound Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.MulticastSetIgnoreBaseRotation
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bNewIgnoreBaseRotation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::MulticastSetIgnoreBaseRotation(bool bNewIgnoreBaseRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastSetIgnoreBaseRotation");

	Params::BRCharacter_MulticastSetIgnoreBaseRotation Parms{};

	Parms.bNewIgnoreBaseRotation = bNewIgnoreBaseRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnGrabRotatePressed
// (Final, Native, Public)

void ABRCharacter::OnGrabRotatePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnGrabRotatePressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnGrabRotateReleased
// (Final, Native, Public)

void ABRCharacter::OnGrabRotateReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnGrabRotateReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnHealthRegenStart
// (Final, Native, Public)

void ABRCharacter::OnHealthRegenStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnHealthRegenStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnInteractPress
// (Event, Public, BlueprintEvent)
// Parameters:
// EBRCharacterInteractAnimType            AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::OnInteractPress(EBRCharacterInteractAnimType AnimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnInteractPress");

	Params::BRCharacter_OnInteractPress Parms{};

	Parms.AnimType = AnimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRCharacter.OnInteractRelease
// (Event, Public, BlueprintEvent)

void ABRCharacter::OnInteractRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnInteractRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRCharacter.OnObjectGrabbed
// (Event, Public, BlueprintEvent)

void ABRCharacter::OnObjectGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnObjectGrabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRCharacter.OnRep_CollideWithPawns
// (Final, Native, Public)

void ABRCharacter::OnRep_CollideWithPawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_CollideWithPawns");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_Ghost
// (Final, Native, Public)

void ABRCharacter::OnRep_Ghost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_Ghost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_Health
// (Final, Native, Public)

void ABRCharacter::OnRep_Health()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_Health");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_PendingSeatBrickHandle
// (Final, Native, Private)

void ABRCharacter::OnRep_PendingSeatBrickHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_PendingSeatBrickHandle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_PointAtLocation
// (Final, Native, Private)

void ABRCharacter::OnRep_PointAtLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_PointAtLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_ReplicatedAvatar
// (Final, Native, Public)

void ABRCharacter::OnRep_ReplicatedAvatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_ReplicatedAvatar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_ReplicatedControlMode
// (Final, Native, Public)

void ABRCharacter::OnRep_ReplicatedControlMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_ReplicatedControlMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_StackWithPawns
// (Final, Native, Public)

void ABRCharacter::OnRep_StackWithPawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_StackWithPawns");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_WeaponSimState_Owner
// (Final, Native, Private)

void ABRCharacter::OnRep_WeaponSimState_Owner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_WeaponSimState_Owner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRep_WeaponSimState_Remote
// (Final, Native, Private)

void ABRCharacter::OnRep_WeaponSimState_Remote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRep_WeaponSimState_Remote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnRespawnInvulnerabilityExpire
// (Final, Native, Public)

void ABRCharacter::OnRespawnInvulnerabilityExpire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnRespawnInvulnerabilityExpire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.OnSelfDestructPreventionEnd
// (Final, Native, Public)

void ABRCharacter::OnSelfDestructPreventionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "OnSelfDestructPreventionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.PauseAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::PauseAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "PauseAnimMontage");

	Params::BRCharacter_PauseAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.PlayAnimMontageFromTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::PlayAnimMontageFromTime(class UAnimMontage* AnimMontage, float Rate, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "PlayAnimMontageFromTime");

	Params::BRCharacter_PlayAnimMontageFromTime Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.Rate = Rate;
	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.PlayFootstepSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::PlayFootstepSound(int32 Type, float VolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "PlayFootstepSound");

	Params::BRCharacter_PlayFootstepSound Parms{};

	Parms.Type = Type;
	Parms.VolumeMultiplier = VolumeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.PopFootstepLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       LayerSound                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::PopFootstepLayer(class USoundBase* LayerSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "PopFootstepLayer");

	Params::BRCharacter_PopFootstepLayer Parms{};

	Parms.LayerSound = LayerSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.PushFootstepLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       LayerSound                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::PushFootstepLayer(class USoundBase* LayerSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "PushFootstepLayer");

	Params::BRCharacter_PushFootstepLayer Parms{};

	Parms.LayerSound = LayerSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ReceiveOnRep_PlayerState
// (Event, Public, BlueprintEvent)

void ABRCharacter::ReceiveOnRep_PlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ReceiveOnRep_PlayerState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRCharacter.RemoveAllPlayerParts
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::RemoveAllPlayerParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "RemoveAllPlayerParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.RemoveChildrenPlayerPartsFromSocketName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::RemoveChildrenPlayerPartsFromSocketName(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "RemoveChildrenPlayerPartsFromSocketName");

	Params::BRCharacter_RemoveChildrenPlayerPartsFromSocketName Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.RemoveChildrenPlayerPartsFromTreeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::RemoveChildrenPlayerPartsFromTreeIndex(int32 TreeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "RemoveChildrenPlayerPartsFromTreeIndex");

	Params::BRCharacter_RemoveChildrenPlayerPartsFromTreeIndex Parms{};

	Parms.TreeIndex = TreeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.RemovePlayerPartAtSocketName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveChildren                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::RemovePlayerPartAtSocketName(class FName SocketName, bool bRemoveChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "RemovePlayerPartAtSocketName");

	Params::BRCharacter_RemovePlayerPartAtSocketName Parms{};

	Parms.SocketName = SocketName;
	Parms.bRemoveChildren = bRemoveChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.RemovePlayerPartAtTreeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveChildren                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::RemovePlayerPartAtTreeIndex(int32 TreeIndex, bool bRemoveChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "RemovePlayerPartAtTreeIndex");

	Params::BRCharacter_RemovePlayerPartAtTreeIndex Parms{};

	Parms.TreeIndex = TreeIndex;
	Parms.bRemoveChildren = bRemoveChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ResetPlayerParts
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::ResetPlayerParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ResetPlayerParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ResumeAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ResumeAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ResumeAnimMontage");

	Params::BRCharacter_ResumeAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerGrabObject
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              ObjectToGrab                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerGrabObject(class UPrimitiveComponent* ObjectToGrab, const struct FVector& HitLocation, float HitDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerGrabObject");

	Params::BRCharacter_ServerGrabObject Parms{};

	Parms.ObjectToGrab = ObjectToGrab;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDistance = HitDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerLeaveSeat
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ABRCharacter::ServerLeaveSeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerLeaveSeat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerMaybeStartInteract
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRCharacterInteractAnimType            AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsNearbyInteraction                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerMaybeStartInteract(const struct FBrickHandle& BrickHandle, EBRCharacterInteractAnimType AnimType, bool bIsNearbyInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerMaybeStartInteract");

	Params::BRCharacter_ServerMaybeStartInteract Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.AnimType = AnimType;
	Parms.bIsNearbyInteraction = bIsNearbyInteraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerProcessMousePitchForGrab
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerProcessMousePitchForGrab(float Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerProcessMousePitchForGrab");

	Params::BRCharacter_ServerProcessMousePitchForGrab Parms{};

	Parms.Pitch = Pitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerProcessMouseYawForGrab
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerProcessMouseYawForGrab(float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerProcessMouseYawForGrab");

	Params::BRCharacter_ServerProcessMouseYawForGrab Parms{};

	Parms.Yaw = Yaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerReleaseHeldObject
// (Net, NetReliable, Native, Event, Public, NetServer)

void ABRCharacter::ServerReleaseHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerReleaseHeldObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerSelfDestruct
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ABRCharacter::ServerSelfDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerSelfDestruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerSetDesiredIgnoreBaseRotation
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bIgnoreBaseRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerSetDesiredIgnoreBaseRotation(bool bIgnoreBaseRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerSetDesiredIgnoreBaseRotation");

	Params::BRCharacter_ServerSetDesiredIgnoreBaseRotation Parms{};

	Parms.bIgnoreBaseRotation = bIgnoreBaseRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerSetOutOfBody
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bNewOutOfBody                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::ServerSetOutOfBody(bool bNewOutOfBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerSetOutOfBody");

	Params::BRCharacter_ServerSetOutOfBody Parms{};

	Parms.bNewOutOfBody = bNewOutOfBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerSetOutOfBodyRotation
// (Net, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FRotator&                  NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABRCharacter::ServerSetOutOfBodyRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerSetOutOfBodyRotation");

	Params::BRCharacter_ServerSetOutOfBodyRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerStopAnyInteract
// (Net, NetReliable, Native, Event, Public, NetServer)

void ABRCharacter::ServerStopAnyInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerStopAnyInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.ServerTeleportToView
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ABRCharacter::ServerTeleportToView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "ServerTeleportToView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ComponentName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetCamera(class FName ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetCamera");

	Params::BRCharacter_SetCamera Parms{};

	Parms.ComponentName = ComponentName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetCameraArm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ComponentName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetCameraArm(class FName ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetCameraArm");

	Params::BRCharacter_SetCameraArm Parms{};

	Parms.ComponentName = ComponentName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetCanStack
// (Final, BlueprintAuthorityOnly, Native, Public)
// Parameters:
// bool                                    bStacks                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetCanStack(bool bStacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetCanStack");

	Params::BRCharacter_SetCanStack Parms{};

	Parms.bStacks = bStacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetDamage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DamageIn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetDamage(float DamageIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetDamage");

	Params::BRCharacter_SetDamage Parms{};

	Parms.DamageIn = DamageIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetDamageLimit
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetDamageLimit(float Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetDamageLimit");

	Params::BRCharacter_SetDamageLimit Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetDesiredMainInventoryIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetDesiredMainInventoryIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetDesiredMainInventoryIndex");

	Params::BRCharacter_SetDesiredMainInventoryIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetDesiredToolInventoryIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetDesiredToolInventoryIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetDesiredToolInventoryIndex");

	Params::BRCharacter_SetDesiredToolInventoryIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetDesiredToTempSlot
// (Final, Native, Public, BlueprintCallable)

void ABRCharacter::SetDesiredToTempSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetDesiredToTempSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetFirstPerson
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewFirstPerson                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetFirstPerson(bool bNewFirstPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetFirstPerson");

	Params::BRCharacter_SetFirstPerson Parms{};

	Parms.bNewFirstPerson = bNewFirstPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetFlyMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRCharacterFlyMode                     NewFlyMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetFlyMode(EBRCharacterFlyMode NewFlyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetFlyMode");

	Params::BRCharacter_SetFlyMode Parms{};

	Parms.NewFlyMode = NewFlyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetGhost
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewGhost                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetGhost(bool bNewGhost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetGhost");

	Params::BRCharacter_SetGhost Parms{};

	Parms.bNewGhost = bNewGhost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetOutOfBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewOutOfBody                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetOutOfBody(bool bNewOutOfBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetOutOfBody");

	Params::BRCharacter_SetOutOfBody Parms{};

	Parms.bNewOutOfBody = bNewOutOfBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetOutOfBodyRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABRCharacter::SetOutOfBodyRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetOutOfBodyRotation");

	Params::BRCharacter_SetOutOfBodyRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetPartCollisionEnabledForAvatarEditing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetPartCollisionEnabledForAvatarEditing(bool bNewCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetPartCollisionEnabledForAvatarEditing");

	Params::BRCharacter_SetPartCollisionEnabledForAvatarEditing Parms{};

	Parms.bNewCollision = bNewCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetPawnCollision
// (Final, BlueprintAuthorityOnly, Native, Public)
// Parameters:
// bool                                    bCollides                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetPawnCollision(bool bCollides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetPawnCollision");

	Params::BRCharacter_SetPawnCollision Parms{};

	Parms.bCollides = bCollides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetPlayerPartVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bThirdPerson                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetPlayerPartVisibility(bool bThirdPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetPlayerPartVisibility");

	Params::BRCharacter_SetPlayerPartVisibility Parms{};

	Parms.bThirdPerson = bThirdPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetSprinting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSprinting                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetSprinting(bool bNewSprinting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetSprinting");

	Params::BRCharacter_SetSprinting Parms{};

	Parms.bNewSprinting = bNewSprinting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SetViewModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ComponentName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::SetViewModel(class FName ComponentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SetViewModel");

	Params::BRCharacter_SetViewModel Parms{};

	Parms.ComponentName = ComponentName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.SkipFirstPersonTransitionAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABRCharacter::SkipFirstPersonTransitionAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "SkipFirstPersonTransitionAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.StopAnimMontageImmediately
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::StopAnimMontageImmediately(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "StopAnimMontageImmediately");

	Params::BRCharacter_StopAnimMontageImmediately Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.TryAutoToggleTool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ABRToolBase>          Tool                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::TryAutoToggleTool(TSubclassOf<class ABRToolBase> Tool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "TryAutoToggleTool");

	Params::BRCharacter_TryAutoToggleTool Parms{};

	Parms.Tool = Tool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacter.CanAttachPlayerPartAtTreeIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRPlayerPartDescriptor*    Descriptor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::CanAttachPlayerPartAtTreeIndex(const class UBRPlayerPartDescriptor* Descriptor, int32 TreeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "CanAttachPlayerPartAtTreeIndex");

	Params::BRCharacter_CanAttachPlayerPartAtTreeIndex Parms{};

	Parms.Descriptor = Descriptor;
	Parms.TreeIndex = TreeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.CanFly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::CanFly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "CanFly");

	Params::BRCharacter_CanFly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.CanGhost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::CanGhost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "CanGhost");

	Params::BRCharacter_CanGhost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.FindPlayerPartByTreeIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPlayerPartComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerPartComponent* ABRCharacter::FindPlayerPartByTreeIndex(int32 TreeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "FindPlayerPartByTreeIndex");

	Params::BRCharacter_FindPlayerPartByTreeIndex Parms{};

	Parms.TreeIndex = TreeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetActorDeltaRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ABRCharacter::GetActorDeltaRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetActorDeltaRotation");

	Params::BRCharacter_GetActorDeltaRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetAimDeltaRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ABRCharacter::GetAimDeltaRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetAimDeltaRotation");

	Params::BRCharacter_GetAimDeltaRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetAvailableSocketsFromDecal
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRPlayerDecalDescriptor*   Descriptor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          TreeIndices                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABRCharacter::GetAvailableSocketsFromDecal(const class UBRPlayerDecalDescriptor* Descriptor, TArray<int32>* TreeIndices) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetAvailableSocketsFromDecal");

	Params::BRCharacter_GetAvailableSocketsFromDecal Parms{};

	Parms.Descriptor = Descriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TreeIndices != nullptr)
		*TreeIndices = std::move(Parms.TreeIndices);
}


// Function Brickadia.BRCharacter.GetAvailableSocketsFromPart
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlayerPartDescriptor*          Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          TreeIndices                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABRCharacter::GetAvailableSocketsFromPart(class UBRPlayerPartDescriptor* Descriptor, TArray<int32>* TreeIndices) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetAvailableSocketsFromPart");

	Params::BRCharacter_GetAvailableSocketsFromPart Parms{};

	Parms.Descriptor = Descriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TreeIndices != nullptr)
		*TreeIndices = std::move(Parms.TreeIndices);
}


// Function Brickadia.BRCharacter.GetBRCharacterMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRCharacterMovementComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRCharacterMovementComponent* ABRCharacter::GetBRCharacterMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetBRCharacterMovement");

	Params::BRCharacter_GetBRCharacterMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetBRPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRCharacter::GetBRPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetBRPlayerController");

	Params::BRCharacter_GetBRPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetBRPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRCharacter::GetBRPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetBRPlayerState");

	Params::BRCharacter_GetBRPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* ABRCharacter::GetCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCamera");

	Params::BRCharacter_GetCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCameraArm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USpringArmComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USpringArmComponent* ABRCharacter::GetCameraArm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCameraArm");

	Params::BRCharacter_GetCameraArm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCanStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetCanStack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCanStack");

	Params::BRCharacter_GetCanStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCharacterInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryComponent* ABRCharacter::GetCharacterInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCharacterInventory");

	Params::BRCharacter_GetCharacterInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCharacterInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* ABRCharacter::GetCharacterInventoryEntry(int32 Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCharacterInventoryEntry");

	Params::BRCharacter_GetCharacterInventoryEntry Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCharacterTempInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* ABRCharacter::GetCharacterTempInventoryEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCharacterTempInventoryEntry");

	Params::BRCharacter_GetCharacterTempInventoryEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetCurrentInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* ABRCharacter::GetCurrentInventoryEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetCurrentInventoryEntry");

	Params::BRCharacter_GetCurrentInventoryEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABRCharacter::GetDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetDamage");

	Params::BRCharacter_GetDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetDamageLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABRCharacter::GetDamageLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetDamageLimit");

	Params::BRCharacter_GetDamageLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetDesiredItemClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ABRItemBase>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ABRItemBase> ABRCharacter::GetDesiredItemClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetDesiredItemClass");

	Params::BRCharacter_GetDesiredItemClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetDesiredItemInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRItemBase*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRItemBase* ABRCharacter::GetDesiredItemInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetDesiredItemInstance");

	Params::BRCharacter_GetDesiredItemInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetFireOcclusionStartPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRCharacter::GetFireOcclusionStartPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetFireOcclusionStartPosition");

	Params::BRCharacter_GetFireOcclusionStartPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetFlyMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRCharacterFlyMode                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRCharacterFlyMode ABRCharacter::GetFlyMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetFlyMode");

	Params::BRCharacter_GetFlyMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetFreeMouse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetFreeMouse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetFreeMouse");

	Params::BRCharacter_GetFreeMouse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetItemAttachmentSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ABRCharacter::GetItemAttachmentSocketTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetItemAttachmentSocketTransform");

	Params::BRCharacter_GetItemAttachmentSocketTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetItemClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ABRItemBase>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ABRItemBase> ABRCharacter::GetItemClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetItemClass");

	Params::BRCharacter_GetItemClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetItemInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRItemBase*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRItemBase* ABRCharacter::GetItemInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetItemInstance");

	Params::BRCharacter_GetItemInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetItemMuzzleLocationLocalSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleSocket                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRCharacter::GetItemMuzzleLocationLocalSpace(class FName MuzzleSocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetItemMuzzleLocationLocalSpace");

	Params::BRCharacter_GetItemMuzzleLocationLocalSpace Parms{};

	Parms.MuzzleSocket = MuzzleSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetLocationUnderCrosshair
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   PointOnStartPlane                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Latency                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRCharacter::GetLocationUnderCrosshair(const struct FVector& PointOnStartPlane, float Latency, float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetLocationUnderCrosshair");

	Params::BRCharacter_GetLocationUnderCrosshair Parms{};

	Parms.PointOnStartPlane = std::move(PointOnStartPlane);
	Parms.Latency = Latency;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetOutOfBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetOutOfBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetOutOfBody");

	Params::BRCharacter_GetOutOfBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetOutOfBodyRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ABRCharacter::GetOutOfBodyRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetOutOfBodyRotation");

	Params::BRCharacter_GetOutOfBodyRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetPawnCollision
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetPawnCollision() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetPawnCollision");

	Params::BRCharacter_GetPawnCollision Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetRemainingRequiredParts
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>*                          TreeIndices                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABRCharacter::GetRemainingRequiredParts(TArray<int32>* TreeIndices) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetRemainingRequiredParts");

	Params::BRCharacter_GetRemainingRequiredParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TreeIndices != nullptr)
		*TreeIndices = std::move(Parms.TreeIndices);
}


// Function Brickadia.BRCharacter.GetSeatBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle ABRCharacter::GetSeatBrick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetSeatBrick");

	Params::BRCharacter_GetSeatBrick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetSeatedOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRCharacter::GetSeatedOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetSeatedOffset");

	Params::BRCharacter_GetSeatedOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetSeatedRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ABRCharacter::GetSeatedRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetSeatedRotation");

	Params::BRCharacter_GetSeatedRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetSeatZoomLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABRCharacter::GetSeatZoomLevel(float Amount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetSeatZoomLevel");

	Params::BRCharacter_GetSeatZoomLevel Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetShowFirstPersonModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetShowFirstPersonModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetShowFirstPersonModel");

	Params::BRCharacter_GetShowFirstPersonModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::GetSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetSprinting");

	Params::BRCharacter_GetSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.GetViewModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ABRCharacter::GetViewModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "GetViewModel");

	Params::BRCharacter_GetViewModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.HasItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::HasItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "HasItem");

	Params::BRCharacter_HasItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.HasRequiredPartsAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::HasRequiredPartsAttached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "HasRequiredPartsAttached");

	Params::BRCharacter_HasRequiredPartsAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.IsFirstPerson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "IsFirstPerson");

	Params::BRCharacter_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.IsSitting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::IsSitting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "IsSitting");

	Params::BRCharacter_IsSitting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.IsStrafing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRCharacter::IsStrafing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "IsStrafing");

	Params::BRCharacter_IsStrafing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacter.MulticastDebugDrawBoxes
// (Net, Native, Event, NetMulticast, Public, HasDefaults, Const)
// Parameters:
// const TArray<struct FTransform>&        BoxTransforms                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           BoxExtents                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRCharacter::MulticastDebugDrawBoxes(const TArray<struct FTransform>& BoxTransforms, const TArray<struct FVector>& BoxExtents, const struct FVector& Start, const struct FVector& End, bool bHit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacter", "MulticastDebugDrawBoxes");

	Params::BRCharacter_MulticastDebugDrawBoxes Parms{};

	Parms.BoxTransforms = std::move(BoxTransforms);
	Parms.BoxExtents = std::move(BoxExtents);
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.bHit = bHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.AddVehicleControlInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   VehicleDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ScaleValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRCharacterMovementComponent::AddVehicleControlInput(const struct FVector& VehicleDirection, const float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "AddVehicleControlInput");

	Params::BRCharacterMovementComponent_AddVehicleControlInput Parms{};

	Parms.VehicleDirection = std::move(VehicleDirection);
	Parms.ScaleValue = ScaleValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.OnRep_ReplicatedVehicleControlInput
// (Final, Native, Private)

void UBRCharacterMovementComponent::OnRep_ReplicatedVehicleControlInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "OnRep_ReplicatedVehicleControlInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.SetControlMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRCharacterControlMode                 NewControlMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRCharacterMovementComponent::SetControlMode(EBRCharacterControlMode NewControlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "SetControlMode");

	Params::BRCharacterMovementComponent_SetControlMode Parms{};

	Parms.NewControlMode = NewControlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.SetFlyMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRCharacterFlyMode                     NewFlyMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRCharacterMovementComponent::SetFlyMode(EBRCharacterFlyMode NewFlyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "SetFlyMode");

	Params::BRCharacterMovementComponent_SetFlyMode Parms{};

	Parms.NewFlyMode = NewFlyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.SetSprinting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSprinting                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRCharacterMovementComponent::SetSprinting(bool bNewSprinting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "SetSprinting");

	Params::BRCharacterMovementComponent_SetSprinting Parms{};

	Parms.bNewSprinting = bNewSprinting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRCharacterMovementComponent.GetBRCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* UBRCharacterMovementComponent::GetBRCharacterOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "GetBRCharacterOwner");

	Params::BRCharacterMovementComponent_GetBRCharacterOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.GetClientVehicleControlInput
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBRCharacterMovementComponent::GetClientVehicleControlInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "GetClientVehicleControlInput");

	Params::BRCharacterMovementComponent_GetClientVehicleControlInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.GetControlMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRCharacterControlMode                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRCharacterControlMode UBRCharacterMovementComponent::GetControlMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "GetControlMode");

	Params::BRCharacterMovementComponent_GetControlMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.GetFlyMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRCharacterFlyMode                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRCharacterFlyMode UBRCharacterMovementComponent::GetFlyMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "GetFlyMode");

	Params::BRCharacterMovementComponent_GetFlyMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.GetSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRCharacterMovementComponent::GetSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "GetSprinting");

	Params::BRCharacterMovementComponent_GetSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.IsFirstPerson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRCharacterMovementComponent::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "IsFirstPerson");

	Params::BRCharacterMovementComponent_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRCharacterMovementComponent.IsStrafing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRCharacterMovementComponent::IsStrafing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRCharacterMovementComponent", "IsStrafing");

	Params::BRCharacterMovementComponent_IsStrafing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRChatCommandLibrary_Default.Ban
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minutes                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Ban(const struct FBRChatCommandContext& Context, const class FString& Player, int32 Minutes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Ban");

	Params::BRChatCommandLibrary_Default_Ban Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.Minutes = Minutes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.BanAdv
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minutes                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::BanAdv(const struct FBRChatCommandContext& Context, const class FString& Player, int32 Minutes, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "BanAdv");

	Params::BRChatCommandLibrary_Default_BanAdv Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.Minutes = Minutes;
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.BrickCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::BrickCount(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "BrickCount");

	Params::BRChatCommandLibrary_Default_BrickCount Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ClearAllObjects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ClearAllObjects(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ClearAllObjects");

	Params::BRChatCommandLibrary_Default_ClearAllObjects Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ClearCheckPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ClearCheckPoint(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ClearCheckPoint");

	Params::BRChatCommandLibrary_Default_ClearCheckPoint Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ClearObjects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ClearObjects(class ABRPlayerController* Caller, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ClearObjects");

	Params::BRChatCommandLibrary_Default_ClearObjects Parms{};

	Parms.Caller = Caller;
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ClearOwnObjects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ClearOwnObjects(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ClearOwnObjects");

	Params::BRChatCommandLibrary_Default_ClearOwnObjects Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.GetTransformSelf
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::GetTransformSelf(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "GetTransformSelf");

	Params::BRChatCommandLibrary_Default_GetTransformSelf Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.GetTransformTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::GetTransformTarget(const struct FBRChatCommandContext& Context, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "GetTransformTarget");

	Params::BRChatCommandLibrary_Default_GetTransformTarget Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Ghost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Ghost(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Ghost");

	Params::BRChatCommandLibrary_Default_Ghost Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.GrantRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Role                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::GrantRole(const struct FBRChatCommandContext& Context, const class FString& Role, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "GrantRole");

	Params::BRChatCommandLibrary_Default_GrantRole Parms{};

	Parms.Context = std::move(Context);
	Parms.Role = std::move(Role);
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Help
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Help(const struct FBRChatCommandContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Help");

	Params::BRChatCommandLibrary_Default_Help Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.HelpSpecific
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::HelpSpecific(const struct FBRChatCommandContext& Context, const class FString& CommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "HelpSpecific");

	Params::BRChatCommandLibrary_Default_HelpSpecific Parms{};

	Parms.Context = std::move(Context);
	Parms.CommandName = std::move(CommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.JoinTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Team                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::JoinTeam(class ABRPlayerController* Caller, const class FString& Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "JoinTeam");

	Params::BRChatCommandLibrary_Default_JoinTeam Parms{};

	Parms.Caller = Caller;
	Parms.Team = std::move(Team);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Kick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Kick(const struct FBRChatCommandContext& Context, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Kick");

	Params::BRChatCommandLibrary_Default_Kick Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.KickAdv
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::KickAdv(const struct FBRChatCommandContext& Context, const class FString& Player, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "KickAdv");

	Params::BRChatCommandLibrary_Default_KickAdv Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.LeaveTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::LeaveTeam(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "LeaveTeam");

	Params::BRChatCommandLibrary_Default_LeaveTeam Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.List16AutoSaves
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::List16AutoSaves(const struct FBRChatCommandContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "List16AutoSaves");

	Params::BRChatCommandLibrary_Default_List16AutoSaves Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ListNumAutoSaves
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   NumAutoSaves                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ListNumAutoSaves(const struct FBRChatCommandContext& Context, int32 NumAutoSaves)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ListNumAutoSaves");

	Params::BRChatCommandLibrary_Default_ListNumAutoSaves Parms{};

	Parms.Context = std::move(Context);
	Parms.NumAutoSaves = NumAutoSaves;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ListPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ListPlayers(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ListPlayers");

	Params::BRChatCommandLibrary_Default_ListPlayers Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ListRoles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ListRoles(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ListRoles");

	Params::BRChatCommandLibrary_Default_ListRoles Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ListTeams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ListTeams(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ListTeams");

	Params::BRChatCommandLibrary_Default_ListTeams Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Load
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Load(const struct FBRChatCommandContext& Context, const class FString& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Load");

	Params::BRChatCommandLibrary_Default_Load Parms{};

	Parms.Context = std::move(Context);
	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.LoadLastAutoSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::LoadLastAutoSave(const struct FBRChatCommandContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "LoadLastAutoSave");

	Params::BRChatCommandLibrary_Default_LoadLastAutoSave Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.LoadNthLastAutoSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   NFromLast                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::LoadNthLastAutoSave(const struct FBRChatCommandContext& Context, int32 NFromLast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "LoadNthLastAutoSave");

	Params::BRChatCommandLibrary_Default_LoadNthLastAutoSave Parms{};

	Parms.Context = std::move(Context);
	Parms.NFromLast = NFromLast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.LoadOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetZ                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::LoadOffset(const struct FBRChatCommandContext& Context, const class FString& File, int32 OffsetX, int32 OffsetY, int32 OffsetZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "LoadOffset");

	Params::BRChatCommandLibrary_Default_LoadOffset Parms{};

	Parms.Context = std::move(Context);
	Parms.File = std::move(File);
	Parms.OffsetX = OffsetX;
	Parms.OffsetY = OffsetY;
	Parms.OffsetZ = OffsetZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.LoadOffsetAdv
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    File                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OffsetZ                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCorrectPaletteColors                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCorrectCustomColors                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::LoadOffsetAdv(const struct FBRChatCommandContext& Context, const class FString& File, int32 OffsetX, int32 OffsetY, int32 OffsetZ, bool bCorrectPaletteColors, bool bCorrectCustomColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "LoadOffsetAdv");

	Params::BRChatCommandLibrary_Default_LoadOffsetAdv Parms{};

	Parms.Context = std::move(Context);
	Parms.File = std::move(File);
	Parms.OffsetX = OffsetX;
	Parms.OffsetY = OffsetY;
	Parms.OffsetZ = OffsetZ;
	Parms.bCorrectPaletteColors = bCorrectPaletteColors;
	Parms.bCorrectCustomColors = bCorrectCustomColors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.PlayerCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::PlayerCount(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "PlayerCount");

	Params::BRChatCommandLibrary_Default_PlayerCount Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.RevokeRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Role                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::RevokeRole(const struct FBRChatCommandContext& Context, const class FString& Role, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "RevokeRole");

	Params::BRChatCommandLibrary_Default_RevokeRole Parms{};

	Parms.Context = std::move(Context);
	Parms.Role = std::move(Role);
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Teleport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlayer                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Teleport(const struct FBRChatCommandContext& Context, const class FString& Player, const class FString& OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Teleport");

	Params::BRChatCommandLibrary_Default_Teleport Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.OtherPlayer = std::move(OtherPlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportBack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportBack(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportBack");

	Params::BRChatCommandLibrary_Default_TeleportBack Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerBack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportPlayerBack(class ABRPlayerController* Caller, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportPlayerBack");

	Params::BRChatCommandLibrary_Default_TeleportPlayerBack Parms{};

	Parms.Caller = Caller;
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerToLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepVelocity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportPlayerToLocation(const struct FBRChatCommandContext& Context, const class FString& Player, float X, float Y, float Z, bool bKeepVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportPlayerToLocation");

	Params::BRChatCommandLibrary_Default_TeleportPlayerToLocation Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.bKeepVelocity = bKeepVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportPlayerToLocationRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepVelocity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportPlayerToLocationRotation(const struct FBRChatCommandContext& Context, const class FString& Player, float X, float Y, float Z, float Pitch, float Yaw, bool bKeepVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportPlayerToLocationRotation");

	Params::BRChatCommandLibrary_Default_TeleportPlayerToLocationRotation Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.bKeepVelocity = bKeepVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportSelf
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OtherPlayer                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportSelf(class ABRPlayerController* Caller, const class FString& OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportSelf");

	Params::BRChatCommandLibrary_Default_TeleportSelf Parms{};

	Parms.Caller = Caller;
	Parms.OtherPlayer = std::move(OtherPlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.TeleportToAimTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::TeleportToAimTarget(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "TeleportToAimTarget");

	Params::BRChatCommandLibrary_Default_TeleportToAimTarget Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.ToggleSpectatorMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::ToggleSpectatorMode(class ABRPlayerController* Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "ToggleSpectatorMode");

	Params::BRChatCommandLibrary_Default_ToggleSpectatorMode Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_Default.Unban
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Player                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_Default::Unban(const struct FBRChatCommandContext& Context, const class FString& Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_Default", "Unban");

	Params::BRChatCommandLibrary_Default_Unban Parms{};

	Parms.Context = std::move(Context);
	Parms.Player = std::move(Player);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandLibrary_DynamicGrids.DestroyAllDynamicGrids
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBRChatCommandLibrary_DynamicGrids::DestroyAllDynamicGrids(const struct FBRChatCommandContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandLibrary_DynamicGrids", "DestroyAllDynamicGrids");

	Params::BRChatCommandLibrary_DynamicGrids_DestroyAllDynamicGrids Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorColorWidget.HandleClicked
// (Final, Native, Private)

void UBRColorSelectorColorWidget::HandleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorColorWidget", "HandleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorColorWidget.HandleHovered
// (Final, Native, Private)

void UBRColorSelectorColorWidget::HandleHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorColorWidget", "HandleHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorColorWidget.HandleUnhovered
// (Final, Native, Private)

void UBRColorSelectorColorWidget::HandleUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorColorWidget", "HandleUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorMaterialWidget.HandleClicked
// (Final, Native, Private)

void UBRColorSelectorMaterialWidget::HandleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorMaterialWidget", "HandleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorMaterialWidget.HandleHovered
// (Final, Native, Private)

void UBRColorSelectorMaterialWidget::HandleHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorMaterialWidget", "HandleHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorMaterialWidget.HandleUnhovered
// (Final, Native, Private)

void UBRColorSelectorMaterialWidget::HandleUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorMaterialWidget", "HandleUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorColorsWidget.HandleServerColorsChanged
// (Final, Native, Private)
// Parameters:
// class UBRGameSettingsBase*              SettingsObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSelectorColorsWidget::HandleServerColorsChanged(class UBRGameSettingsBase* SettingsObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorColorsWidget", "HandleServerColorsChanged");

	Params::BRColorSelectorColorsWidget_HandleServerColorsChanged Parms{};

	Parms.SettingsObject = SettingsObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorMaterialsWidget.HandleMaterialAlphaChanged
// (Final, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSelectorMaterialsWidget::HandleMaterialAlphaChanged(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorMaterialsWidget", "HandleMaterialAlphaChanged");

	Params::BRColorSelectorMaterialsWidget_HandleMaterialAlphaChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorWidget.HandleColorSelectionStateUpdated
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FColor&                    NewState                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSelectorWidget::HandleColorSelectionStateUpdated(const struct FColor& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorWidget", "HandleColorSelectionStateUpdated");

	Params::BRColorSelectorWidget_HandleColorSelectionStateUpdated Parms{};

	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorWidget.HandleMaterialSelectionStateUpdated
// (Final, Native, Public)
// Parameters:
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MaterialAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSelectorWidget::HandleMaterialSelectionStateUpdated(int32 MaterialIndex, uint8 MaterialAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorWidget", "HandleMaterialSelectionStateUpdated");

	Params::BRColorSelectorWidget_HandleMaterialSelectionStateUpdated Parms{};

	Parms.MaterialIndex = MaterialIndex;
	Parms.MaterialAlpha = MaterialAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.HandleSelectionStateUpdated
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FBRColorSelectionState&    SelectionState                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRColorSelectorDialog::HandleSelectionStateUpdated(const struct FBRColorSelectionState& SelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "HandleSelectionStateUpdated");

	Params::BRColorSelectorDialog_HandleSelectionStateUpdated Parms{};

	Parms.SelectionState = std::move(SelectionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.PaintReleased
// (Final, Native, Private)

void UBRColorSelectorDialog::PaintReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "PaintReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.ScrollDown
// (Final, Native, Private)

void UBRColorSelectorDialog::ScrollDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "ScrollDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.ScrollLeft
// (Final, Native, Private)

void UBRColorSelectorDialog::ScrollLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "ScrollLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.ScrollRight
// (Final, Native, Private)

void UBRColorSelectorDialog::ScrollRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "ScrollRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSelectorDialog.ScrollUp
// (Final, Native, Private)

void UBRColorSelectorDialog::ScrollUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSelectorDialog", "ScrollUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPaletteToolWidget.OnColorSelectionStateUpdated
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBRColorSelectionState&    NewState                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRPaletteToolWidget::OnColorSelectionStateUpdated(const struct FBRColorSelectionState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPaletteToolWidget", "OnColorSelectionStateUpdated");

	Params::BRPaletteToolWidget_OnColorSelectionStateUpdated Parms{};

	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.ApplyMeshColors
// (Final, Native, Public, BlueprintCallable)

void ABRItemBase::ApplyMeshColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "ApplyMeshColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.HideItem
// (Native, Event, Public, BlueprintEvent)

void ABRItemBase::HideItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "HideItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.OnPutAway
// (Native, Event, Public, BlueprintEvent)

void ABRItemBase::OnPutAway()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "OnPutAway");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.OnRep_MeshColors
// (Final, Native, Public)

void ABRItemBase::OnRep_MeshColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "OnRep_MeshColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.OnWielded
// (Native, Event, Public, BlueprintEvent)

void ABRItemBase::OnWielded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "OnWielded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.PauseAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRItemBase::PauseAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "PauseAnimMontage");

	Params::BRItemBase_PauseAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.PlayAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRItemBase::PlayAnimMontage(class UAnimMontage* AnimMontage, float Rate, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "PlayAnimMontage");

	Params::BRItemBase_PlayAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.Rate = Rate;
	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.ResumeAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRItemBase::ResumeAnimMontage(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "ResumeAnimMontage");

	Params::BRItemBase_ResumeAnimMontage Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.SetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRItemBase::SetMeshColor(int32 Index_0, const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "SetMeshColor");

	Params::BRItemBase_SetMeshColor Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.StopAnimMontageImmediately
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRItemBase::StopAnimMontageImmediately(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "StopAnimMontageImmediately");

	Params::BRItemBase_StopAnimMontageImmediately Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.UnhideItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABRItemBase::UnhideItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "UnhideItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRItemBase.CanWield
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ABRCharacter*                     WielderIn                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFirstCheck                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::CanWield(class ABRCharacter* WielderIn, bool bFirstCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "CanWield");

	Params::BRItemBase_CanWield Parms{};

	Parms.WielderIn = WielderIn;
	Parms.bFirstCheck = bFirstCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetFireAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   PointOnStartPlane                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRItemBase::GetFireAtLocation(const struct FVector& PointOnStartPlane, float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetFireAtLocation");

	Params::BRItemBase_GetFireAtLocation Parms{};

	Parms.PointOnStartPlane = std::move(PointOnStartPlane);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRItemBase::GetMeshColor(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetMeshColor");

	Params::BRItemBase_GetMeshColor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetMuzzleLocationLocalSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleSocket                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRItemBase::GetMuzzleLocationLocalSpace(class FName MuzzleSocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetMuzzleLocationLocalSpace");

	Params::BRItemBase_GetMuzzleLocationLocalSpace Parms{};

	Parms.MuzzleSocket = MuzzleSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetMuzzleLocationWorldSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleSocket                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRItemBase::GetMuzzleLocationWorldSpace(class FName MuzzleSocket) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetMuzzleLocationWorldSpace");

	Params::BRItemBase_GetMuzzleLocationWorldSpace Parms{};

	Parms.MuzzleSocket = MuzzleSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetOwnerBRPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRItemBase::GetOwnerBRPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetOwnerBRPlayerController");

	Params::BRItemBase_GetOwnerBRPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetOwnerBRPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRItemBase::GetOwnerBRPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetOwnerBRPlayerState");

	Params::BRItemBase_GetOwnerBRPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetOwnerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* ABRItemBase::GetOwnerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetOwnerController");

	Params::BRItemBase_GetOwnerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetOwningInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryComponent* ABRItemBase::GetOwningInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetOwningInventory");

	Params::BRItemBase_GetOwningInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetOwningInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* ABRItemBase::GetOwningInventoryEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetOwningInventoryEntry");

	Params::BRItemBase_GetOwningInventoryEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.GetWielder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* ABRItemBase::GetWielder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "GetWielder");

	Params::BRItemBase_GetWielder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.IsLocallyControlled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::IsLocallyControlled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "IsLocallyControlled");

	Params::BRItemBase_IsLocallyControlled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.IsPuttingAway
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::IsPuttingAway() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "IsPuttingAway");

	Params::BRItemBase_IsPuttingAway Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.IsTool
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::IsTool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "IsTool");

	Params::BRItemBase_IsTool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.IsWielded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::IsWielded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "IsWielded");

	Params::BRItemBase_IsWielded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRItemBase.ShouldUseFireAtLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRItemBase::ShouldUseFireAtLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRItemBase", "ShouldUseFireAtLocation");

	Params::BRItemBase_ShouldUseFireAtLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.AddHighlightedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::AddHighlightedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "AddHighlightedActor");

	Params::BRToolBase_AddHighlightedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.AddHighlightedBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::AddHighlightedBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "AddHighlightedBrick");

	Params::BRToolBase_AddHighlightedBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.ClearHighlighted
// (Final, Native, Public, BlueprintCallable)

void ABRToolBase::ClearHighlighted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "ClearHighlighted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.GetControllerInputMode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EControllerInputMode                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EControllerInputMode ABRToolBase::GetControllerInputMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetControllerInputMode");

	Params::BRToolBase_GetControllerInputMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.RefreshHighlights
// (Final, Native, Public, BlueprintCallable)

void ABRToolBase::RefreshHighlights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "RefreshHighlights");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.RemoveHighlightedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::RemoveHighlightedActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "RemoveHighlightedActor");

	Params::BRToolBase_RemoveHighlightedActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.RemoveHighlightedBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::RemoveHighlightedBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "RemoveHighlightedBrick");

	Params::BRToolBase_RemoveHighlightedBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.SetDeferToolBindVisibilityChanges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDeferring                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::SetDeferToolBindVisibilityChanges(bool bNewDeferring)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "SetDeferToolBindVisibilityChanges");

	Params::BRToolBase_SetDeferToolBindVisibilityChanges Parms{};

	Parms.bNewDeferring = bNewDeferring;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.SetHighlightSelectionLayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickSelectionLayers                   NewSelectionLayers                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::SetHighlightSelectionLayers(EBrickSelectionLayers NewSelectionLayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "SetHighlightSelectionLayers");

	Params::BRToolBase_SetHighlightSelectionLayers Parms{};

	Parms.NewSelectionLayers = NewSelectionLayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.SetToolBindTagVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BindInfoId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRToolBase::SetToolBindTagVisible(class FName BindInfoId, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "SetToolBindTagVisible");

	Params::BRToolBase_SetToolBindTagVisible Parms{};

	Parms.BindInfoId = BindInfoId;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToAim
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToAim(struct FHitResult* HitResult, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToAim");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToAim Parms{};

	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToAim_CustomChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToAim_CustomChannel(struct FHitResult* HitResult, ECollisionChannel TraceChannel, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToAim_CustomChannel");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToAim_CustomChannel Parms{};

	Parms.TraceChannel = TraceChannel;
	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToCursor
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToCursor(struct FHitResult* HitResult, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToCursor");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToCursor Parms{};

	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToCursor_CustomChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToCursor_CustomChannel(struct FHitResult* HitResult, ECollisionChannel TraceChannel, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToCursor_CustomChannel");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToCursor_CustomChannel Parms{};

	Parms.TraceChannel = TraceChannel;
	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToScreenCenter
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToScreenCenter(struct FHitResult* HitResult, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToScreenCenter");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter Parms{};

	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCameraRay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel(struct FHitResult* HitResult, ECollisionChannel TraceChannel, float Distance, bool bUseCameraRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel");

	Params::BRToolBase_BP_LineTraceByChannelMuzzleToScreenCenter_CustomChannel Parms{};

	Parms.TraceChannel = TraceChannel;
	Parms.Distance = Distance;
	Parms.bUseCameraRay = bUseCameraRay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetAimRay
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRay*                            OutRay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::GetAimRay(struct FRay* OutRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetAimRay");

	Params::BRToolBase_GetAimRay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRay != nullptr)
		*OutRay = std::move(Parms.OutRay);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetBrickUnderCursor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle ABRToolBase::GetBrickUnderCursor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetBrickUnderCursor");

	Params::BRToolBase_GetBrickUnderCursor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetCursorRay
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRay*                            OutRay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::GetCursorRay(struct FRay* OutRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetCursorRay");

	Params::BRToolBase_GetCursorRay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRay != nullptr)
		*OutRay = std::move(Parms.OutRay);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetScreenCenterRay
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRay*                            OutRay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRToolBase::GetScreenCenterRay(struct FRay* OutRay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetScreenCenterRay");

	Params::BRToolBase_GetScreenCenterRay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRay != nullptr)
		*OutRay = std::move(Parms.OutRay);

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetToolCrosshairWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRToolWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRToolWidget* ABRToolBase::GetToolCrosshairWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetToolCrosshairWidget");

	Params::BRToolBase_GetToolCrosshairWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetToolQuickbarWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRToolWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRToolWidget* ABRToolBase::GetToolQuickbarWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetToolQuickbarWidget");

	Params::BRToolBase_GetToolQuickbarWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBase.GetToolWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRToolWidget*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRToolWidget* ABRToolBase::GetToolWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBase", "GetToolWidget");

	Params::BRToolBase_GetToolWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRConnectorPortSelectDialog.HandleNarrowSearchTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRConnectorPortSelectDialog::HandleNarrowSearchTextChanged(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorPortSelectDialog", "HandleNarrowSearchTextChanged");

	Params::BRConnectorPortSelectDialog_HandleNarrowSearchTextChanged Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorPortSelectDialog.HandleNarrowSearchTextCommitted
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRConnectorPortSelectDialog::HandleNarrowSearchTextCommitted(const class FText& NewText, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorPortSelectDialog", "HandleNarrowSearchTextCommitted");

	Params::BRConnectorPortSelectDialog_HandleNarrowSearchTextCommitted Parms{};

	Parms.NewText = std::move(NewText);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPaletteToolBase.HandleServerColorsChanged
// (Final, Native, Protected)
// Parameters:
// class UBRGameSettingsBase*              SettingsObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRColorPaletteToolBase::HandleServerColorsChanged(class UBRGameSettingsBase* SettingsObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPaletteToolBase", "HandleServerColorsChanged");

	Params::BRColorPaletteToolBase_HandleServerColorsChanged Parms{};

	Parms.SettingsObject = SettingsObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPaletteToolBase.OnColorSelectionStateUpdated
// (Native, Event, Public, BlueprintEvent)

void ABRColorPaletteToolBase::OnColorSelectionStateUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPaletteToolBase", "OnColorSelectionStateUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPaletteToolBase.PickColorUnderCursor
// (Final, Native, Public, BlueprintCallable)

void ABRColorPaletteToolBase::PickColorUnderCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPaletteToolBase", "PickColorUnderCursor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPaletteToolBase.SetColorSelectionState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRColorSelectionState&    SelectionState                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRColorPaletteToolBase::SetColorSelectionState(const struct FBRColorSelectionState& SelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPaletteToolBase", "SetColorSelectionState");

	Params::BRColorPaletteToolBase_SetColorSelectionState Parms{};

	Parms.SelectionState = std::move(SelectionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPaletteToolBase.GetColorSelectionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRColorSelectionState     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FBRColorSelectionState ABRColorPaletteToolBase::GetColorSelectionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPaletteToolBase", "GetColorSelectionState");

	Params::BRColorPaletteToolBase_GetColorSelectionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorStatics.BrickColorDistance
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FColor&                    Color1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Color2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRColorStatics::BrickColorDistance(const struct FColor& Color1, const struct FColor& Color2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRColorStatics", "BrickColorDistance");

	Params::BRColorStatics_BrickColorDistance Parms{};

	Parms.Color1 = std::move(Color1);
	Parms.Color2 = std::move(Color2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorStatics.ConvertFromOklab
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRColorStatics::ConvertFromOklab(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRColorStatics", "ConvertFromOklab");

	Params::BRColorStatics_ConvertFromOklab Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorStatics.ConvertToOklab
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRColorStatics::ConvertToOklab(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRColorStatics", "ConvertToOklab");

	Params::BRColorStatics_ConvertToOklab Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorPalette.GetMaxGroupNameLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRColorPalette::GetMaxGroupNameLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRColorPalette", "GetMaxGroupNameLength");

	Params::BRColorPalette_GetMaxGroupNameLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorPalette.OnRep_Data
// (Final, Native, Public)

void UBRColorPalette::OnRep_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPalette", "OnRep_Data");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPalette.SetData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FBRColorPaletteData&       InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRColorPalette::SetData(const struct FBRColorPaletteData& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPalette", "SetData");

	Params::BRColorPalette_SetData Parms{};

	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorPalette.GetAllColors
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FColor>*                  OutColors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRColorPalette::GetAllColors(TArray<struct FColor>* OutColors) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPalette", "GetAllColors");

	Params::BRColorPalette_GetAllColors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColors != nullptr)
		*OutColors = std::move(Parms.OutColors);
}


// Function Brickadia.BRColorPalette.GetClosestColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor&                    Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRColorPalette::GetClosestColor(const struct FColor& Input) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorPalette", "GetClosestColor");

	Params::BRColorPalette_GetClosestColor Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.FixColorPaletteAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRColorPalette*                  Palette                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRColorSubsystem::FixColorPaletteAlpha(class UBRColorPalette* Palette)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "FixColorPaletteAlpha");

	Params::BRColorSubsystem_FixColorPaletteAlpha Parms{};

	Parms.Palette = Palette;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.ForceFixColorPalette
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRColorPalette*                  Palette                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSubsystem::ForceFixColorPalette(class UBRColorPalette* Palette)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "ForceFixColorPalette");

	Params::BRColorSubsystem_ForceFixColorPalette Parms{};

	Parms.Palette = Palette;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSubsystem.GetColorPaletteList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UBRColorSubsystem::GetColorPaletteList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "GetColorPaletteList");

	Params::BRColorSubsystem_GetColorPaletteList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.GetDefaultColorPalette
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBRColorPalette*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRColorPalette* UBRColorSubsystem::GetDefaultColorPalette()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "GetDefaultColorPalette");

	Params::BRColorSubsystem_GetDefaultColorPalette Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.GetMaxGroups
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRColorSubsystem::GetMaxGroups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "GetMaxGroups");

	Params::BRColorSubsystem_GetMaxGroups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.GetMaxRows
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRColorSubsystem::GetMaxRows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "GetMaxRows");

	Params::BRColorSubsystem_GetMaxRows Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.IsValidColorPalette
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRColorPaletteData&       PaletteData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRColorSubsystem::IsValidColorPalette(const struct FBRColorPaletteData& PaletteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "IsValidColorPalette");

	Params::BRColorSubsystem_IsValidColorPalette Parms{};

	Parms.PaletteData = std::move(PaletteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRColorSubsystem.SaveColorPalette
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRColorPalette*                  Palette                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRColorSubsystem::SaveColorPalette(class UObject* WorldContext, const class FString& Name_0, class UBRColorPalette* Palette)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "SaveColorPalette");

	Params::BRColorSubsystem_SaveColorPalette Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Name_0 = std::move(Name_0);
	Parms.Palette = Palette;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRColorSubsystem.TryLoadColorPalette
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRColorPalette*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRColorPalette* UBRColorSubsystem::TryLoadColorPalette(class UObject* WorldContext, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRColorSubsystem", "TryLoadColorPalette");

	Params::BRColorSubsystem_TryLoadColorPalette Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettingsActor.OnRep_SettingsInstanceCollection
// (Final, Native, Public)

void ABRServerSettingsActor::OnRep_SettingsInstanceCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsActor", "OnRep_SettingsInstanceCollection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase.LiveChangeSettings
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRGameSettingsBase::LiveChangeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "LiveChangeSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase.PostInitSettings
// (Event, Public, BlueprintEvent)

void UBRGameSettingsBase::PostInitSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "PostInitSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRGameSettingsBase.PostLiveChangeSettings
// (Event, Public, BlueprintEvent)

void UBRGameSettingsBase::PostLiveChangeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "PostLiveChangeSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRGameSettingsBase.PostReloadSettings
// (Event, Public, BlueprintEvent)

void UBRGameSettingsBase::PostReloadSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "PostReloadSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRGameSettingsBase.PostSaveSettings
// (Event, Public, BlueprintEvent)

void UBRGameSettingsBase::PostSaveSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "PostSaveSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRGameSettingsBase.ReloadSettings
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRGameSettingsBase::ReloadSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "ReloadSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase.SaveSettings
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRGameSettingsBase::SaveSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase", "SaveSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorComponentPortsWidget.ReceiveComponentDisplayName
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      DisplayName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRConnectorComponentPortsWidget::ReceiveComponentDisplayName(const class FText& DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorComponentPortsWidget", "ReceiveComponentDisplayName");

	Params::BRConnectorComponentPortsWidget_ReceiveComponentDisplayName Parms{};

	Parms.DisplayName = std::move(DisplayName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRServerSettings_Color.AddServerPalette
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRColorPaletteData&       PaletteData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRServerSettings_Color::AddServerPalette(const struct FBRColorPaletteData& PaletteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "AddServerPalette");

	Params::BRServerSettings_Color_AddServerPalette Parms{};

	Parms.PaletteData = std::move(PaletteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettings_Color.GetServerPalette
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRColorPalette*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRColorPalette* UBRServerSettings_Color::GetServerPalette(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "GetServerPalette");

	Params::BRServerSettings_Color_GetServerPalette Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettings_Color.OnRep_ServerPalettes
// (Final, Native, Public)

void UBRServerSettings_Color::OnRep_ServerPalettes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "OnRep_ServerPalettes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettings_Color.RemoveServerPalette
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRServerSettings_Color::RemoveServerPalette(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "RemoveServerPalette");

	Params::BRServerSettings_Color_RemoveServerPalette Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettings_Color.SetServerPalette
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRColorPaletteData&       PaletteData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRServerSettings_Color::SetServerPalette(const struct FBRColorPaletteData& PaletteData, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "SetServerPalette");

	Params::BRServerSettings_Color_SetServerPalette Parms{};

	Parms.PaletteData = std::move(PaletteData);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettings_Color.GetClosestServerColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor&                    Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRServerSettings_Color::GetClosestServerColor(const struct FColor& Input) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "GetClosestServerColor");

	Params::BRServerSettings_Color_GetClosestServerColor Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettings_Color.GetColorList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FColor>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FColor> UBRServerSettings_Color::GetColorList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettings_Color", "GetColorList");

	Params::BRServerSettings_Color_GetColorList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerWidget.OnNewAlignmentMode
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBRPlacerAlignmentModeBase*       NewAlignmentMode                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerWidget::OnNewAlignmentMode(class UBRPlacerAlignmentModeBase* NewAlignmentMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerWidget", "OnNewAlignmentMode");

	Params::BRPlacerWidget_OnNewAlignmentMode Parms{};

	Parms.NewAlignmentMode = NewAlignmentMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerWidget.OnNewPlacementMode
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBRPlacerPlacementModeBase*       NewPlacementMode                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerWidget::OnNewPlacementMode(class UBRPlacerPlacementModeBase* NewPlacementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerWidget", "OnNewPlacementMode");

	Params::BRPlacerWidget_OnNewPlacementMode Parms{};

	Parms.NewPlacementMode = NewPlacementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerWidget.OnNewPlacingState
// (Event, Public, BlueprintEvent)
// Parameters:
// EBRPlacerPlacingState                   NewPlacingState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerWidget::OnNewPlacingState(EBRPlacerPlacingState NewPlacingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerWidget", "OnNewPlacingState");

	Params::BRPlacerWidget_OnNewPlacingState Parms{};

	Parms.NewPlacingState = NewPlacingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerWidget.GetPlacer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRTool_Placer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRTool_Placer* UBRPlacerWidget::GetPlacer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerWidget", "GetPlacer");

	Params::BRPlacerWidget_GetPlacer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerStatusWidget.SetBrickName
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewBrickName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlacerStatusWidget::SetBrickName(const class FText& NewBrickName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerStatusWidget", "SetBrickName");

	Params::BRPlacerStatusWidget_SetBrickName Parms{};

	Parms.NewBrickName = std::move(NewBrickName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerStatusWidget.SetDragText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewSizeText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlacerStatusWidget::SetDragText(const class FText& NewSizeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerStatusWidget", "SetDragText");

	Params::BRPlacerStatusWidget_SetDragText Parms{};

	Parms.NewSizeText = std::move(NewSizeText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerStatusWidget.SetPlaceAsPhysicsAvailable
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bAvailable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerStatusWidget::SetPlaceAsPhysicsAvailable(bool bAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerStatusWidget", "SetPlaceAsPhysicsAvailable");

	Params::BRPlacerStatusWidget_SetPlaceAsPhysicsAvailable Parms{};

	Parms.bAvailable = bAvailable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerStatusWidget.SetPlaceAsPhysicsEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerStatusWidget::SetPlaceAsPhysicsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerStatusWidget", "SetPlaceAsPhysicsEnabled");

	Params::BRPlacerStatusWidget_SetPlaceAsPhysicsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlacerStatusWidget.SetSpacingText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewSpacingText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlacerStatusWidget::SetSpacingText(const class FText& NewSpacingText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerStatusWidget", "SetSpacingText");

	Params::BRPlacerStatusWidget_SetSpacingText Parms{};

	Parms.NewSpacingText = std::move(NewSpacingText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRDialogButtonBase.SetButtonEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRDialogButtonBase::SetButtonEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogButtonBase", "SetButtonEnabled");

	Params::BRDialogButtonBase_SetButtonEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRDialogFrameBase.SetDialogTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      DialogTitle                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRDialogFrameBase::SetDialogTitle(const class FText& DialogTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogFrameBase", "SetDialogTitle");

	Params::BRDialogFrameBase_SetDialogTitle Parms{};

	Parms.DialogTitle = std::move(DialogTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRDialogContainerBase.PlayCloseAnimation
// (Native, Event, Public, BlueprintEvent)

void UBRDialogContainerBase::PlayCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogContainerBase", "PlayCloseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRDialogContainerBase.PlayOpenAnimation
// (Native, Event, Public, BlueprintEvent)

void UBRDialogContainerBase::PlayOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRDialogContainerBase", "PlayOpenAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BROneButtonDialogBase.SimulateButtonClick
// (Final, Native, Public, BlueprintCallable)

void UBROneButtonDialogBase::SimulateButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BROneButtonDialogBase", "SimulateButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTwoButtonsDialogBase.SimulateButton1Click
// (Final, Native, Public, BlueprintCallable)

void UBRTwoButtonsDialogBase::SimulateButton1Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTwoButtonsDialogBase", "SimulateButton1Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTwoButtonsDialogBase.SimulateButton2Click
// (Final, Native, Public, BlueprintCallable)

void UBRTwoButtonsDialogBase::SimulateButton2Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTwoButtonsDialogBase", "SimulateButton2Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRWeaponExplosion>   ExplosionClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponLibrary::SpawnExplosionAtLocation(const class UObject* WorldContextObject, TSubclassOf<class UBRWeaponExplosion> ExplosionClass, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Scale, class AActor* DamageCauser, class AController* InstigatorController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRWeaponLibrary", "SpawnExplosionAtLocation");

	Params::BRWeaponLibrary_SpawnExplosionAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ExplosionClass = ExplosionClass;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Scale = std::move(Scale);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatorController = InstigatorController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocationWithIgnoredActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRWeaponExplosion>   ExplosionClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoredActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponLibrary::SpawnExplosionAtLocationWithIgnoredActors(const class UObject* WorldContextObject, TSubclassOf<class UBRWeaponExplosion> ExplosionClass, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Scale, const TArray<class AActor*>& IgnoredActors, class AActor* DamageCauser, class AController* InstigatorController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRWeaponLibrary", "SpawnExplosionAtLocationWithIgnoredActors");

	Params::BRWeaponLibrary_SpawnExplosionAtLocationWithIgnoredActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ExplosionClass = ExplosionClass;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Scale = std::move(Scale);
	Parms.IgnoredActors = std::move(IgnoredActors);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatorController = InstigatorController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponLibrary.SpawnExplosionAtLocationWithSeed
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRWeaponExplosion>   ExplosionClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RandomSeed                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponLibrary::SpawnExplosionAtLocationWithSeed(const class UObject* WorldContextObject, TSubclassOf<class UBRWeaponExplosion> ExplosionClass, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Scale, const int32 RandomSeed, class AActor* DamageCauser, class AController* InstigatorController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRWeaponLibrary", "SpawnExplosionAtLocationWithSeed");

	Params::BRWeaponLibrary_SpawnExplosionAtLocationWithSeed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ExplosionClass = ExplosionClass;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Scale = std::move(Scale);
	Parms.RandomSeed = RandomSeed;
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatorController = InstigatorController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRThreeButtonsDialogBase.SimulateButton1Click
// (Final, Native, Public, BlueprintCallable)

void UBRThreeButtonsDialogBase::SimulateButton1Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRThreeButtonsDialogBase", "SimulateButton1Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRThreeButtonsDialogBase.SimulateButton2Click
// (Final, Native, Public, BlueprintCallable)

void UBRThreeButtonsDialogBase::SimulateButton2Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRThreeButtonsDialogBase", "SimulateButton2Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRThreeButtonsDialogBase.SimulateButton3Click
// (Final, Native, Public, BlueprintCallable)

void UBRThreeButtonsDialogBase::SimulateButton3Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRThreeButtonsDialogBase", "SimulateButton3Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorComponentPortWidget.NotifyChoose
// (Final, Native, Public, BlueprintCallable)

void UBRConnectorComponentPortWidget::NotifyChoose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorComponentPortWidget", "NotifyChoose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorComponentPortWidget.NotifyDisconnect
// (Final, Native, Public, BlueprintCallable)

void UBRConnectorComponentPortWidget::NotifyDisconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorComponentPortWidget", "NotifyDisconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorComponentPortWidget.ReceiveIsConnected
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bConnected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRConnectorComponentPortWidget::ReceiveIsConnected(bool bConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorComponentPortWidget", "ReceiveIsConnected");

	Params::BRConnectorComponentPortWidget_ReceiveIsConnected Parms{};

	Parms.bConnected = bConnected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRConnectorComponentPortWidget.ReceivePortDisplayInfo
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      DisplayName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Tooltip                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBHResolvedTypeInfo&       TypeInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInIsOutput                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRConnectorComponentPortWidget::ReceivePortDisplayInfo(const class FText& DisplayName, const class FText& Tooltip, const struct FBHResolvedTypeInfo& TypeInfo, bool bInIsOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorComponentPortWidget", "ReceivePortDisplayInfo");

	Params::BRConnectorComponentPortWidget_ReceivePortDisplayInfo Parms{};

	Parms.DisplayName = std::move(DisplayName);
	Parms.Tooltip = std::move(Tooltip);
	Parms.TypeInfo = std::move(TypeInfo);
	Parms.bInIsOutput = bInIsOutput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BREntityActor.UpdateColors
// (Final, Native, Private)

void ABREntityActor::UpdateColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntityActor", "UpdateColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BREntity.SetColor
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBREntity::SetColor(int32 Index_0, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "SetColor");

	Params::BREntity_SetColor Parms{};

	Parms.Index_0 = Index_0;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BREntity.SetOwnerId
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   OwnerId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBREntity::SetOwnerId(int32 OwnerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "SetOwnerId");

	Params::BREntity_SetOwnerId Parms{};

	Parms.OwnerId = OwnerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BREntity.GetColor
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor IBREntity::GetColor(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetColor");

	Params::BREntity_GetColor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREntity.GetDefaultColor
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor IBREntity::GetDefaultColor(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetDefaultColor");

	Params::BREntity_GetDefaultColor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREntity.GetEntityType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBREntityTypeBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBREntityTypeBase* IBREntity::GetEntityType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetEntityType");

	Params::BREntity_GetEntityType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREntity.GetOwnerData
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBrickOwnerData                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBrickOwnerData IBREntity::GetOwnerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetOwnerData");

	Params::BREntity_GetOwnerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREntity.GetOwnerId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IBREntity::GetOwnerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetOwnerId");

	Params::BREntity_GetOwnerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREntity.GetPersistentHandle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBREntityPersistentHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBREntityPersistentHandle IBREntity::GetPersistentHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREntity", "GetPersistentHandle");

	Params::BREntity_GetPersistentHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BREnvironmentManagerComponent.ServerChangeEnvironmentSettingsGroup
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             SettingsGroupName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBREnvironmentManagerComponent::ServerChangeEnvironmentSettingsGroup(class FName SettingsGroupName, const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BREnvironmentManagerComponent", "ServerChangeEnvironmentSettingsGroup");

	Params::BREnvironmentManagerComponent_ServerChangeEnvironmentSettingsGroup Parms{};

	Parms.SettingsGroupName = SettingsGroupName;
	Parms.Changelist = std::move(Changelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponExplosion.SpawnExplosionAtLocation
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoredActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponExplosion::SpawnExplosionAtLocation(const class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Scale, const TArray<class AActor*>& IgnoredActors, class AActor* DamageCauser, class AController* InstigatorController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponExplosion", "SpawnExplosionAtLocation");

	Params::BRWeaponExplosion_SpawnExplosionAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Scale = std::move(Scale);
	Parms.IgnoredActors = std::move(IgnoredActors);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatorController = InstigatorController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponExplosion.SpawnExplosionAtLocationWithSeed
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RandomSeed                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            IgnoredActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponExplosion::SpawnExplosionAtLocationWithSeed(const class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Normal, const struct FVector& Scale, const int32 RandomSeed, const TArray<class AActor*>& IgnoredActors, class AActor* DamageCauser, class AController* InstigatorController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponExplosion", "SpawnExplosionAtLocationWithSeed");

	Params::BRWeaponExplosion_SpawnExplosionAtLocationWithSeed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Scale = std::move(Scale);
	Parms.RandomSeed = RandomSeed;
	Parms.IgnoredActors = std::move(IgnoredActors);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatorController = InstigatorController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRFontHelperLibrary.MeasureString
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateFontInfo&            InFontInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FontScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBRFontHelperLibrary::MeasureString(const class FString& Text, const struct FSlateFontInfo& InFontInfo, float FontScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRFontHelperLibrary", "MeasureString");

	Params::BRFontHelperLibrary_MeasureString Parms{};

	Parms.Text = std::move(Text);
	Parms.InFontInfo = std::move(InFontInfo);
	Parms.FontScale = FontScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRFontHelperLibrary.MeasureStringExtended
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateFontInfo&            InFontInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeKerningWithPrecedingChar                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FontScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBRFontHelperLibrary::MeasureStringExtended(const class FString& Text, int32 StartIndex, int32 EndIndex, const struct FSlateFontInfo& InFontInfo, bool bIncludeKerningWithPrecedingChar, float FontScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRFontHelperLibrary", "MeasureStringExtended");

	Params::BRFontHelperLibrary_MeasureStringExtended Parms{};

	Parms.Text = std::move(Text);
	Parms.StartIndex = StartIndex;
	Parms.EndIndex = EndIndex;
	Parms.InFontInfo = std::move(InFontInfo);
	Parms.bIncludeKerningWithPrecedingChar = bIncludeKerningWithPrecedingChar;
	Parms.FontScale = FontScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRFontHelperLibrary.MeasureText
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSlateFontInfo&            InFontInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FontScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBRFontHelperLibrary::MeasureText(const class FText& Text, const struct FSlateFontInfo& InFontInfo, float FontScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRFontHelperLibrary", "MeasureText");

	Params::BRFontHelperLibrary_MeasureText Parms{};

	Parms.Text = std::move(Text);
	Parms.InFontInfo = std::move(InFontInfo);
	Parms.FontScale = FontScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponStateBehavior_ChangesResources.ProcessResources
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ChangesResources::ProcessResources(class ABRWeaponBase* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ChangesResources", "ProcessResources");

	Params::BRWeaponStateBehavior_ChangesResources_ProcessResources Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRConnectorStatusWidget.ClearInput
// (Event, Public, BlueprintEvent)

void UBRConnectorStatusWidget::ClearInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "ClearInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRConnectorStatusWidget.ClearOutput
// (Event, Public, BlueprintEvent)

void UBRConnectorStatusWidget::ClearOutput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "ClearOutput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRConnectorStatusWidget.SetInputActive
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRConnectorStatusWidget::SetInputActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "SetInputActive");

	Params::BRConnectorStatusWidget_SetInputActive Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRConnectorStatusWidget.SetInputName
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      CompName                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRConnectorStatusWidget::SetInputName(const class FText& CompName, const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "SetInputName");

	Params::BRConnectorStatusWidget_SetInputName Parms{};

	Parms.CompName = std::move(CompName);
	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRConnectorStatusWidget.SetOutputActive
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRConnectorStatusWidget::SetOutputActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "SetOutputActive");

	Params::BRConnectorStatusWidget_SetOutputActive Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRConnectorStatusWidget.SetOutputName
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      CompName                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRConnectorStatusWidget::SetOutputName(const class FText& CompName, const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "SetOutputName");

	Params::BRConnectorStatusWidget_SetOutputName Parms{};

	Parms.CompName = std::move(CompName);
	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRConnectorStatusWidget.GetConnector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRTool_Connector*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRTool_Connector* UBRConnectorStatusWidget::GetConnector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRConnectorStatusWidget", "GetConnector");

	Params::BRConnectorStatusWidget_GetConnector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Painter.Effects_FillPaint
// (Event, Public, BlueprintEvent)

void ABRTool_Painter::Effects_FillPaint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Painter", "Effects_FillPaint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Painter.Effects_FiringChanged
// (Event, Public, BlueprintEvent)

void ABRTool_Painter::Effects_FiringChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Painter", "Effects_FiringChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Painter.MulticastFillPaintEffects
// (Net, Native, Event, NetMulticast, Public)

void ABRTool_Painter::MulticastFillPaintEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Painter", "MulticastFillPaintEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Painter.ServerFillPaint
// (Net, Native, Event, Public, NetServer)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRColorSelectionState&    ClientColorSelectionState                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bPaintColor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPaintMaterial                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Painter::ServerFillPaint(const struct FBrickHandle& BrickHandle, const struct FBRColorSelectionState& ClientColorSelectionState, bool bPaintColor, bool bPaintMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Painter", "ServerFillPaint");

	Params::BRTool_Painter_ServerFillPaint Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ClientColorSelectionState = std::move(ClientColorSelectionState);
	Parms.bPaintColor = bPaintColor;
	Parms.bPaintMaterial = bPaintMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Painter.ServerPaintBrick
// (Net, Native, Event, Public, NetServer)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRColorSelectionState&    ClientColorSelectionState                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ClientStrokeIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMergePaintStrokes                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPaintColor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPaintMaterial                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Painter::ServerPaintBrick(const struct FBrickHandle& BrickHandle, const struct FBRColorSelectionState& ClientColorSelectionState, int32 ClientStrokeIndex, bool bMergePaintStrokes, bool bPaintColor, bool bPaintMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Painter", "ServerPaintBrick");

	Params::BRTool_Painter_ServerPaintBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ClientColorSelectionState = std::move(ClientColorSelectionState);
	Parms.ClientStrokeIndex = ClientStrokeIndex;
	Parms.bMergePaintStrokes = bMergePaintStrokes;
	Parms.bPaintColor = bPaintColor;
	Parms.bPaintMaterial = bPaintMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameInstance.GetBRGameInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGameInstance*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGameInstance* UBRGameInstance::GetBRGameInstance(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGameInstance", "GetBRGameInstance");

	Params::BRGameInstance_GetBRGameInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.GetMessagesFromHistory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxNumMessages                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UBRGameInstance::GetMessagesFromHistory(int32 StartIndex, int32 MaxNumMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "GetMessagesFromHistory");

	Params::BRGameInstance_GetMessagesFromHistory Parms{};

	Parms.StartIndex = StartIndex;
	Parms.MaxNumMessages = MaxNumMessages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.GetNumRecentMessages
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameInstance::GetNumRecentMessages(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "GetNumRecentMessages");

	Params::BRGameInstance_GetNumRecentMessages Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.PushChatMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   SenderId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameInstance::PushChatMessage(const class FString& Message, const struct FBRGuid& SenderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "PushChatMessage");

	Params::BRGameInstance_PushChatMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.SenderId = std::move(SenderId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.PushRecentlyUsedBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameInstance::PushRecentlyUsedBrick(class UBrickType* BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "PushRecentlyUsedBrick");

	Params::BRGameInstance_PushRecentlyUsedBrick Parms{};

	Parms.BrickType = BrickType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameInstance.RemoveRecentlyUsedBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameInstance::RemoveRecentlyUsedBrick(class UBrickType* BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "RemoveRecentlyUsedBrick");

	Params::BRGameInstance_RemoveRecentlyUsedBrick Parms{};

	Parms.BrickType = BrickType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameInstance.RequestNewInviteCodeNextSession
// (Final, Native, Public, BlueprintCallable)

void UBRGameInstance::RequestNewInviteCodeNextSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "RequestNewInviteCodeNextSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameInstance.FindEmojiBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TagOrId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UBRGameInstance::FindEmojiBrush(class FName TagOrId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "FindEmojiBrush");

	Params::BRGameInstance_FindEmojiBrush Parms{};

	Parms.TagOrId = TagOrId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.GetBrickMaterialIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameInstance::GetBrickMaterialIndex(class FName Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "GetBrickMaterialIndex");

	Params::BRGameInstance_GetBrickMaterialIndex Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.GetMaterialIndicesUsableForPainting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBRGameInstance::GetMaterialIndicesUsableForPainting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "GetMaterialIndicesUsableForPainting");

	Params::BRGameInstance_GetMaterialIndicesUsableForPainting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.GetMessageHistoryLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameInstance::GetMessageHistoryLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "GetMessageHistoryLength");

	Params::BRGameInstance_GetMessageHistoryLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameInstance.IsMaterialIndexUsableForPainting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameInstance::IsMaterialIndexUsableForPainting(int32 MaterialIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameInstance", "IsMaterialIndexUsableForPainting");

	Params::BRGameInstance_IsMaterialIndexUsableForPainting Parms{};

	Parms.MaterialIndex = MaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSession.BRKickPlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              KickedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              Kicker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    KickReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameSession::BRKickPlayer(class ABRPlayerController* KickedPlayer, class ABRPlayerController* Kicker, const class FString& KickReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSession", "BRKickPlayer");

	Params::BRGameSession_BRKickPlayer Parms{};

	Parms.KickedPlayer = KickedPlayer;
	Parms.Kicker = Kicker;
	Parms.KickReason = std::move(KickReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSession.HandleAuthComplete
// (Final, Native, Private)

void ABRGameSession::HandleAuthComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSession", "HandleAuthComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSession.HandleServerSettingsUpdate
// (Final, Native, Public)
// Parameters:
// class UBRGameSettingsBase*              Settings                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameSession::HandleServerSettingsUpdate(class UBRGameSettingsBase* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSession", "HandleServerSettingsUpdate");

	Params::BRGameSession_HandleServerSettingsUpdate Parms{};

	Parms.Settings = Settings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGetServerListAsyncAction.AsyncGetServerList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGetServerListAsyncAction*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGetServerListAsyncAction* UBRGetServerListAsyncAction::AsyncGetServerList(class UObject* WorldContextObject, int32 InSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGetServerListAsyncAction", "AsyncGetServerList");

	Params::BRGetServerListAsyncAction_AsyncGetServerList Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGetServerInfoAsyncAction.AsyncGetServerInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Identity                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGetServerInfoAsyncAction*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGetServerInfoAsyncAction* UBRGetServerInfoAsyncAction::AsyncGetServerInfo(class UObject* WorldContextObject, int32 InSequence, const class FString& Identity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGetServerInfoAsyncAction", "AsyncGetServerInfo");

	Params::BRGetServerInfoAsyncAction_AsyncGetServerInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.Identity = std::move(Identity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGetServerInfoAsyncAction.AsyncGetServerInfoByInviteCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InviteCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGetServerInfoAsyncAction*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGetServerInfoAsyncAction* UBRGetServerInfoAsyncAction::AsyncGetServerInfoByInviteCode(class UObject* WorldContextObject, int32 InSequence, const class FString& InviteCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGetServerInfoAsyncAction", "AsyncGetServerInfoByInviteCode");

	Params::BRGetServerInfoAsyncAction_AsyncGetServerInfoByInviteCode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.InviteCode = std::move(InviteCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerListHelpers.FilterServerItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>*                 OutFilteredItems                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRServerListHelpers::FilterServerItems(const TArray<class UObject*>& Items, const class FString& SearchString, TArray<class UObject*>* OutFilteredItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRServerListHelpers", "FilterServerItems");

	Params::BRServerListHelpers_FilterServerItems Parms{};

	Parms.Items = std::move(Items);
	Parms.SearchString = std::move(SearchString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFilteredItems != nullptr)
		*OutFilteredItems = std::move(Parms.OutFilteredItems);
}


// Function Brickadia.BRServerListHelpers.FilterServerItemsExact
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Identity                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRServerListHelpers::FilterServerItemsExact(const TArray<class UObject*>& Items, const class FString& Identity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRServerListHelpers", "FilterServerItemsExact");

	Params::BRServerListHelpers_FilterServerItemsExact Parms{};

	Parms.Items = std::move(Items);
	Parms.Identity = std::move(Identity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInputKeyDisplayNames.GetShortKeyDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FKey&                      Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRInputKeyDisplayNames::GetShortKeyDisplayName(const struct FKey& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputKeyDisplayNames", "GetShortKeyDisplayName");

	Params::BRInputKeyDisplayNames_GetShortKeyDisplayName Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInputKeyDisplayNames.GetShortKeyDisplayName_WithModifiers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRInputKey_WithModifiers& KeyWithModifiers                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRInputKeyDisplayNames::GetShortKeyDisplayName_WithModifiers(const struct FBRInputKey_WithModifiers& KeyWithModifiers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputKeyDisplayNames", "GetShortKeyDisplayName_WithModifiers");

	Params::BRInputKeyDisplayNames_GetShortKeyDisplayName_WithModifiers Parms{};

	Parms.KeyWithModifiers = std::move(KeyWithModifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsSubsystem.ReloadAllSettings
// (Final, Native, Public, BlueprintCallable)

void UBRGameSettingsSubsystem::ReloadAllSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "ReloadAllSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsSubsystem.SaveAllSettings
// (Final, Native, Public, BlueprintCallable)

void UBRGameSettingsSubsystem::SaveAllSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "SaveAllSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsSubsystem.SubscribeToChanges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRGameSettingsBase>  SettingsClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UBRGameSettingsBase* SettingsObject)>&Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsSubsystem::SubscribeToChanges(TSubclassOf<class UBRGameSettingsBase> SettingsClass, const TDelegate<void(class UBRGameSettingsBase* SettingsObject)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "SubscribeToChanges");

	Params::BRGameSettingsSubsystem_SubscribeToChanges Parms{};

	Parms.SettingsClass = SettingsClass;
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsSubsystem.SubscribeToLiveChanges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRGameSettingsBase>  SettingsClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UBRGameSettingsBase* SettingsObject)>&Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsSubsystem::SubscribeToLiveChanges(TSubclassOf<class UBRGameSettingsBase> SettingsClass, const TDelegate<void(class UBRGameSettingsBase* SettingsObject)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "SubscribeToLiveChanges");

	Params::BRGameSettingsSubsystem_SubscribeToLiveChanges Parms{};

	Parms.SettingsClass = SettingsClass;
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsSubsystem.GetAllSettingsInstances
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRGameSettingsBase*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBRGameSettingsBase*> UBRGameSettingsSubsystem::GetAllSettingsInstances() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "GetAllSettingsInstances");

	Params::BRGameSettingsSubsystem_GetAllSettingsInstances Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsSubsystem.GetSettingsInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBRGameSettingsBase>  SettingsClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGameSettingsBase*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGameSettingsBase* UBRGameSettingsSubsystem::GetSettingsInstance(TSubclassOf<class UBRGameSettingsBase> SettingsClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsSubsystem", "GetSettingsInstance");

	Params::BRGameSettingsSubsystem_GetSettingsInstance Parms{};

	Parms.SettingsClass = SettingsClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.AppendInputBindingDescriptors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UInspectorPropertyDescriptorList>BaseDescriptorListClass                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyWidgetBase>PropertyWidgetClass_Action                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyWidgetBase>PropertyWidgetClass_Axis                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorCategoryRowBase>CategoryWidgetClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInputBindingDescriptorList*    InputBindingDescriptorList                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptorList* UBRGameSettingsBase_Controls::AppendInputBindingDescriptors(TSubclassOf<class UInspectorPropertyDescriptorList> BaseDescriptorListClass, TSubclassOf<class UInspectorPropertyWidgetBase> PropertyWidgetClass_Action, TSubclassOf<class UInspectorPropertyWidgetBase> PropertyWidgetClass_Axis, TSubclassOf<class UInspectorCategoryRowBase> CategoryWidgetClass, class UBRInputBindingDescriptorList* InputBindingDescriptorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "AppendInputBindingDescriptors");

	Params::BRGameSettingsBase_Controls_AppendInputBindingDescriptors Parms{};

	Parms.BaseDescriptorListClass = BaseDescriptorListClass;
	Parms.PropertyWidgetClass_Action = PropertyWidgetClass_Action;
	Parms.PropertyWidgetClass_Axis = PropertyWidgetClass_Axis;
	Parms.CategoryWidgetClass = CategoryWidgetClass;
	Parms.InputBindingDescriptorList = InputBindingDescriptorList;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetActionBindingDetails
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRInputBindingDetails_Action&NewDetails                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetActionBindingDetails(class FName ActionName, const struct FBRInputBindingDetails_Action& NewDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetActionBindingDetails");

	Params::BRGameSettingsBase_Controls_SetActionBindingDetails Parms{};

	Parms.ActionName = ActionName;
	Parms.NewDetails = std::move(NewDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetAxisBindingDetails
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AxisName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRInputBindingDetails_Axis&NewDetails                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetAxisBindingDetails(class FName AxisName, const struct FBRInputBindingDetails_Axis& NewDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetAxisBindingDetails");

	Params::BRGameSettingsBase_Controls_SetAxisBindingDetails Parms{};

	Parms.AxisName = AxisName;
	Parms.NewDetails = std::move(NewDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetEnableMouseSmoothing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetEnableMouseSmoothing(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetEnableMouseSmoothing");

	Params::BRGameSettingsBase_Controls_SetEnableMouseSmoothing Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetLeftStickSensitivityX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetLeftStickSensitivityX(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetLeftStickSensitivityX");

	Params::BRGameSettingsBase_Controls_SetLeftStickSensitivityX Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetLeftStickSensitivityY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetLeftStickSensitivityY(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetLeftStickSensitivityY");

	Params::BRGameSettingsBase_Controls_SetLeftStickSensitivityY Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetMouseSensitivityX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetMouseSensitivityX(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetMouseSensitivityX");

	Params::BRGameSettingsBase_Controls_SetMouseSensitivityX Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetMouseSensitivityY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetMouseSensitivityY(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetMouseSensitivityY");

	Params::BRGameSettingsBase_Controls_SetMouseSensitivityY Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetRightStickSensitivityX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetRightStickSensitivityX(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetRightStickSensitivityX");

	Params::BRGameSettingsBase_Controls_SetRightStickSensitivityX Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetRightStickSensitivityY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSensitivity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetRightStickSensitivityY(float NewSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetRightStickSensitivityY");

	Params::BRGameSettingsBase_Controls_SetRightStickSensitivityY Parms{};

	Parms.NewSensitivity = NewSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.SetTapToSprint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewTapToSprint                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_Controls::SetTapToSprint(bool bNewTapToSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "SetTapToSprint");

	Params::BRGameSettingsBase_Controls_SetTapToSprint Parms{};

	Parms.bNewTapToSprint = bNewTapToSprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_Controls.GetActionBindingDetails
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRInputBindingDetails_Action    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRInputBindingDetails_Action UBRGameSettingsBase_Controls::GetActionBindingDetails(class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "GetActionBindingDetails");

	Params::BRGameSettingsBase_Controls_GetActionBindingDetails Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.GetAxisBindingDetails
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             AxisName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRInputBindingDetails_Axis      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRInputBindingDetails_Axis UBRGameSettingsBase_Controls::GetAxisBindingDetails(class FName AxisName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "GetAxisBindingDetails");

	Params::BRGameSettingsBase_Controls_GetAxisBindingDetails Parms{};

	Parms.AxisName = AxisName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.GetControllerInputDeviceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRInputDeviceType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRInputDeviceType UBRGameSettingsBase_Controls::GetControllerInputDeviceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "GetControllerInputDeviceType");

	Params::BRGameSettingsBase_Controls_GetControllerInputDeviceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.GetCurrentInputDeviceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRInputDeviceType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRInputDeviceType UBRGameSettingsBase_Controls::GetCurrentInputDeviceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "GetCurrentInputDeviceType");

	Params::BRGameSettingsBase_Controls_GetCurrentInputDeviceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.IsActionCurrentlyBound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameSettingsBase_Controls::IsActionCurrentlyBound(class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "IsActionCurrentlyBound");

	Params::BRGameSettingsBase_Controls_IsActionCurrentlyBound Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_Controls.IsAxisCurrentlyBound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameSettingsBase_Controls::IsAxisCurrentlyBound(class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_Controls", "IsAxisCurrentlyBound");

	Params::BRGameSettingsBase_Controls_IsAxisCurrentlyBound Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameSettingsBase_General.SetDisableChatMessages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDisableChatMessages                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_General::SetDisableChatMessages(bool bNewDisableChatMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_General", "SetDisableChatMessages");

	Params::BRGameSettingsBase_General_SetDisableChatMessages Parms{};

	Parms.bNewDisableChatMessages = bNewDisableChatMessages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_General.SetEnablePrivateRelays
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnablePrivateRelays                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_General::SetEnablePrivateRelays(bool bNewEnablePrivateRelays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_General", "SetEnablePrivateRelays");

	Params::BRGameSettingsBase_General_SetEnablePrivateRelays Parms{};

	Parms.bNewEnablePrivateRelays = bNewEnablePrivateRelays;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_General.SetForceThirdPersonOnDeath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewForceThirdPersonOnDeath                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_General::SetForceThirdPersonOnDeath(bool bNewForceThirdPersonOnDeath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_General", "SetForceThirdPersonOnDeath");

	Params::BRGameSettingsBase_General_SetForceThirdPersonOnDeath Parms{};

	Parms.bNewForceThirdPersonOnDeath = bNewForceThirdPersonOnDeath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameSettingsBase_General.SetRecentBrickListLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameSettingsBase_General::SetRecentBrickListLimit(int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameSettingsBase_General", "SetRecentBrickListLimit");

	Params::BRGameSettingsBase_General_SetRecentBrickListLimit Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.Ban
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   BannedId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 Expiry                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   BannerId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::Ban(const struct FBRGuid& BannedId, const struct FDateTime& Expiry, const struct FBRGuid& BannerId, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "Ban");

	Params::BRGameStateBase_Ban Parms{};

	Parms.BannedId = std::move(BannedId);
	Parms.Expiry = std::move(Expiry);
	Parms.BannerId = std::move(BannerId);
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.ChangeEnvironmentSettingsGroup
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              UpdaterController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SettingsGroupName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABRGameStateBase::ChangeEnvironmentSettingsGroup(class ABRPlayerController* UpdaterController, class FName SettingsGroupName, const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "ChangeEnvironmentSettingsGroup");

	Params::BRGameStateBase_ChangeEnvironmentSettingsGroup Parms{};

	Parms.UpdaterController = UpdaterController;
	Parms.SettingsGroupName = SettingsGroupName;
	Parms.Changelist = std::move(Changelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.CheckBans
// (Final, Native, Public, BlueprintCallable)

void ABRGameStateBase::CheckBans()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "CheckBans");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.CreateMinigame
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              MinigameOwner                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::CreateMinigame(class ABRPlayerController* MinigameOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "CreateMinigame");

	Params::BRGameStateBase_CreateMinigame Parms{};

	Parms.MinigameOwner = MinigameOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.CreateMinigameForId
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   MinigameOwnerId                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::CreateMinigameForId(const struct FBRGuid& MinigameOwnerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "CreateMinigameForId");

	Params::BRGameStateBase_CreateMinigameForId Parms{};

	Parms.MinigameOwnerId = std::move(MinigameOwnerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.DestroyMinigame
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::DestroyMinigame(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "DestroyMinigame");

	Params::BRGameStateBase_DestroyMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.FindUserId
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRGuid*                         OutId                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameStateBase::FindUserId(const class FString& Name_0, struct FBRGuid* OutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "FindUserId");

	Params::BRGameStateBase_FindUserId Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutId != nullptr)
		*OutId = std::move(Parms.OutId);

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetBan
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBan                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBan ABRGameStateBase::GetBan(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetBan");

	Params::BRGameStateBase_GetBan Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownCustomRoles
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> ABRGameStateBase::GetLastKnownCustomRoles(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownCustomRoles");

	Params::BRGameStateBase_GetLastKnownCustomRoles Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownDisplayName
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABRGameStateBase::GetLastKnownDisplayName(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownDisplayName");

	Params::BRGameStateBase_GetLastKnownDisplayName Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownHadPermission
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameStateBase::GetLastKnownHadPermission(const struct FBRGuid& ID, class FName Permission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownHadPermission");

	Params::BRGameStateBase_GetLastKnownHadPermission Parms{};

	Parms.ID = std::move(ID);
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownHadRole
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameStateBase::GetLastKnownHadRole(const struct FBRGuid& ID, const class FString& RoleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownHadRole");

	Params::BRGameStateBase_GetLastKnownHadRole Parms{};

	Parms.ID = std::move(ID);
	Parms.RoleId = std::move(RoleId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownHighestRole
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* ABRGameStateBase::GetLastKnownHighestRole(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownHighestRole");

	Params::BRGameStateBase_GetLastKnownHighestRole Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownName
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABRGameStateBase::GetLastKnownName(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownName");

	Params::BRGameStateBase_GetLastKnownName Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownNameColor
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRGameStateBase::GetLastKnownNameColor(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownNameColor");

	Params::BRGameStateBase_GetLastKnownNameColor Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownRoles
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> ABRGameStateBase::GetLastKnownRoles(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownRoles");

	Params::BRGameStateBase_GetLastKnownRoles Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetLastKnownUserName
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABRGameStateBase::GetLastKnownUserName(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetLastKnownUserName");

	Params::BRGameStateBase_GetLastKnownUserName Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.IdOrRegisterBrickOwner
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class ABRPlayerController*        BrickOwner                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::IdOrRegisterBrickOwner(const class ABRPlayerController* BrickOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "IdOrRegisterBrickOwner");

	Params::BRGameStateBase_IdOrRegisterBrickOwner Parms{};

	Parms.BrickOwner = BrickOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.IdOrRegisterBrickOwner_NotPresent
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickOwnerData&           BrickOwnerData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::IdOrRegisterBrickOwner_NotPresent(const struct FBrickOwnerData& BrickOwnerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "IdOrRegisterBrickOwner_NotPresent");

	Params::BRGameStateBase_IdOrRegisterBrickOwner_NotPresent Parms{};

	Parms.BrickOwnerData = std::move(BrickOwnerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.IsBanned
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameStateBase::IsBanned(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "IsBanned");

	Params::BRGameStateBase_IsBanned Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.LoadPlayerData
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   TARGET                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::LoadPlayerData(class ABRPlayerState* TARGET)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "LoadPlayerData");

	Params::BRGameStateBase_LoadPlayerData Parms{};

	Parms.TARGET = TARGET;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.LoadSavedPlayerDataMapFromJSON
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABRGameStateBase::LoadSavedPlayerDataMapFromJSON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "LoadSavedPlayerDataMapFromJSON");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastPlaySound2D
// (Net, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastPlaySound2D(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastPlaySound2D");

	Params::BRGameStateBase_MulticastPlaySound2D Parms{};

	Parms.Sound = Sound;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastPlaySoundAtLocation
// (Net, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastPlaySoundAtLocation");

	Params::BRGameStateBase_MulticastPlaySoundAtLocation Parms{};

	Parms.Sound = Sound;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.ConcurrencySettings = ConcurrencySettings;
	Parms.OwningActor = OwningActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastPlaySoundAttached
// (Net, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastPlaySoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastPlaySoundAttached");

	Params::BRGameStateBase_MulticastPlaySoundAttached Parms{};

	Parms.Sound = Sound;
	Parms.AttachToComponent = AttachToComponent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.ConcurrencySettings = ConcurrencySettings;
	Parms.OwningActor = OwningActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastPlaySoundAttached2
// (Net, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoundAttenuationSettings& AttenuationSettings                                    (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSoundConcurrencySettings& ConcurrencySettings                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastPlaySoundAttached2(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, const struct FSoundAttenuationSettings& AttenuationSettings, const struct FSoundConcurrencySettings& ConcurrencySettings, class AActor* OwningActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastPlaySoundAttached2");

	Params::BRGameStateBase_MulticastPlaySoundAttached2 Parms{};

	Parms.Sound = Sound;
	Parms.AttachToComponent = AttachToComponent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = std::move(AttenuationSettings);
	Parms.ConcurrencySettings = std::move(ConcurrencySettings);
	Parms.OwningActor = OwningActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastPushChatMessage
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   SenderId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastPushChatMessage(const class FString& ChatMessage, const struct FBRGuid& SenderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastPushChatMessage");

	Params::BRGameStateBase_MulticastPushChatMessage Parms{};

	Parms.ChatMessage = std::move(ChatMessage);
	Parms.SenderId = std::move(SenderId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastSetNameTyping
// (Net, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTyping                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::MulticastSetNameTyping(const class FString& Name_0, bool bIsTyping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastSetNameTyping");

	Params::BRGameStateBase_MulticastSetNameTyping Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.bIsTyping = bIsTyping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.MulticastUpdatePlayerList
// (Net, Native, Event, NetMulticast, Public)

void ABRGameStateBase::MulticastUpdatePlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "MulticastUpdatePlayerList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.OnRep_BrickOwnerTable
// (Final, Native, Private)

void ABRGameStateBase::OnRep_BrickOwnerTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "OnRep_BrickOwnerTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.OnRep_Minigames
// (Final, Native, Public)

void ABRGameStateBase::OnRep_Minigames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "OnRep_Minigames");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.RequestNewInviteCode
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABRGameStateBase::RequestNewInviteCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "RequestNewInviteCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.SavePlayerData
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   TARGET                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::SavePlayerData(class ABRPlayerState* TARGET)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "SavePlayerData");

	Params::BRGameStateBase_SavePlayerData Parms{};

	Parms.TARGET = TARGET;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.SaveSavedPlayerDataMapToJSON
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABRGameStateBase::SaveSavedPlayerDataMapToJSON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "SaveSavedPlayerDataMapToJSON");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.SetHasRoleOffline
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGrant                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRGameStateBase::SetHasRoleOffline(const struct FBRGuid& ID, const class FString& RoleId, bool bGrant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "SetHasRoleOffline");

	Params::BRGameStateBase_SetHasRoleOffline Parms{};

	Parms.ID = std::move(ID);
	Parms.RoleId = std::move(RoleId);
	Parms.bGrant = bGrant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.Unban
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::Unban(const struct FBRGuid& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "Unban");

	Params::BRGameStateBase_Unban Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.UpdateReplicatedServerData
// (Final, Native, Public)
// Parameters:
// const class FString&                    InviteCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGameStateBase::UpdateReplicatedServerData(const class FString& InviteCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "UpdateReplicatedServerData");

	Params::BRGameStateBase_UpdateReplicatedServerData Parms{};

	Parms.InviteCode = std::move(InviteCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.UpdateReplicatedUserData
// (Final, Native, Public)

void ABRGameStateBase::UpdateReplicatedUserData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "UpdateReplicatedUserData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameStateBase.FindClient
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRGameStateBase::FindClient(const class FString& Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "FindClient");

	Params::BRGameStateBase_FindClient Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.FindClientByUserId
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRGameStateBase::FindClientByUserId(const struct FBRGuid& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "FindClientByUserId");

	Params::BRGameStateBase_FindClientByUserId Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.FindClientState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRGameStateBase::FindClientState(const class FString& Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "FindClientState");

	Params::BRGameStateBase_FindClientState Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.FindClientStateByUserId
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRGameStateBase::FindClientStateByUserId(const struct FBRGuid& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "FindClientStateByUserId");

	Params::BRGameStateBase_FindClientStateByUserId Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetAllKnownPlayerGuids
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FBRGuid>*                 inArray                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::GetAllKnownPlayerGuids(TArray<struct FBRGuid>* inArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetAllKnownPlayerGuids");

	Params::BRGameStateBase_GetAllKnownPlayerGuids Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (inArray != nullptr)
		*inArray = std::move(Parms.inArray);

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetBanList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<struct FBRGuid, struct FBan> ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FBRGuid, struct FBan> ABRGameStateBase::GetBanList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetBanList");

	Params::BRGameStateBase_GetBanList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetBrickOwnerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickOwnerData            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FBrickOwnerData ABRGameStateBase::GetBrickOwnerData(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetBrickOwnerData");

	Params::BRGameStateBase_GetBrickOwnerData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetBrickOwnerTableSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::GetBrickOwnerTableSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetBrickOwnerTableSize");

	Params::BRGameStateBase_GetBrickOwnerTableSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetCurrentInviteCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABRGameStateBase::GetCurrentInviteCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetCurrentInviteCode");

	Params::BRGameStateBase_GetCurrentInviteCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetDefaultBrickOwnerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickOwnerData            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FBrickOwnerData ABRGameStateBase::GetDefaultBrickOwnerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetDefaultBrickOwnerData");

	Params::BRGameStateBase_GetDefaultBrickOwnerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetMinigame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* ABRGameStateBase::GetMinigame(int32 MinigameId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetMinigame");

	Params::BRGameStateBase_GetMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetMinigameCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::GetMinigameCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetMinigameCount");

	Params::BRGameStateBase_GetMinigameCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetMinigameID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRRuleset*                       Minigame                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::GetMinigameID(class ABRRuleset* Minigame) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetMinigameID");

	Params::BRGameStateBase_GetMinigameID Parms{};

	Parms.Minigame = Minigame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.GetMinigames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ABRRuleset*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class ABRRuleset*> ABRGameStateBase::GetMinigames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "GetMinigames");

	Params::BRGameStateBase_GetMinigames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameStateBase.IdBrickOwner_NotPresent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   OwnerGuid                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRGameStateBase::IdBrickOwner_NotPresent(const struct FBRGuid& OwnerGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameStateBase", "IdBrickOwner_NotPresent");

	Params::BRGameStateBase_IdBrickOwner_NotPresent Parms{};

	Parms.OwnerGuid = std::move(OwnerGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetCombinedPropertyDescriptor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInspectorPropertyDescriptorList* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptorList* UBRRulesetGameType::GetCombinedPropertyDescriptor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetCombinedPropertyDescriptor");

	Params::BRRulesetGameType_GetCombinedPropertyDescriptor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetLeaderboardColumnIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetGameType::GetLeaderboardColumnIndex(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetLeaderboardColumnIndex");

	Params::BRRulesetGameType_GetLeaderboardColumnIndex Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetSpectatorTargets
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABRPlayerState*                   Spectator                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UBRRulesetGameType::GetSpectatorTargets(class ABRPlayerState* Spectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetSpectatorTargets");

	Params::BRRulesetGameType_GetSpectatorTargets Parms{};

	Parms.Spectator = Spectator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.HandleDie
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TScriptInterface<class IBRRulesetMemberDestructable>&DeadMember                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DeathCauser                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandleDie(const TScriptInterface<class IBRRulesetMemberDestructable>& DeadMember, float FinalDamage, const class UDamageType* DeathType, class AController* InstigatedBy, class AActor* DeathCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandleDie");

	Params::BRRulesetGameType_HandleDie Parms{};

	Parms.DeadMember = DeadMember;
	Parms.FinalDamage = FinalDamage;
	Parms.DeathType = DeathType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DeathCauser = DeathCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandleEditSettings
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   MinigameEditor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandleEditSettings(class ABRPlayerState* MinigameEditor, const struct FInspectorPropertyChangelist& Settings, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandleEditSettings");

	Params::BRRulesetGameType_HandleEditSettings Parms{};

	Parms.MinigameEditor = MinigameEditor;
	Parms.Settings = std::move(Settings);
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerChatMessage
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerChatMessage(class ABRPlayerState* TriggerPlayer, const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerChatMessage");

	Params::BRRulesetGameType_HandlePlayerChatMessage Parms{};

	Parms.TriggerPlayer = TriggerPlayer;
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerReachCheckPoint
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerReachCheckPoint(class ABRPlayerState* TriggeredBy, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerReachCheckPoint");

	Params::BRRulesetGameType_HandlePlayerReachCheckPoint Parms{};

	Parms.TriggeredBy = TriggeredBy;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerReachGoalPoint
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerReachGoalPoint(class ABRPlayerState* TriggeredBy, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerReachGoalPoint");

	Params::BRRulesetGameType_HandlePlayerReachGoalPoint Parms{};

	Parms.TriggeredBy = TriggeredBy;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerRestart
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerRestart(class ABRPlayerState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerRestart");

	Params::BRRulesetGameType_HandlePlayerRestart Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerSwitchTeam
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            NewTeamId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRespawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMessage                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerSwitchTeam(class ABRPlayerState* Member, const int32& NewTeamId, bool bRespawn, bool bMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerSwitchTeam");

	Params::BRRulesetGameType_HandlePlayerSwitchTeam Parms{};

	Parms.Member = Member;
	Parms.NewTeamId = NewTeamId;
	Parms.bRespawn = bRespawn;
	Parms.bMessage = bMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.HandlePlayerTeamChatMessage
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::HandlePlayerTeamChatMessage(class ABRPlayerState* TriggerPlayer, const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "HandlePlayerTeamChatMessage");

	Params::BRRulesetGameType_HandlePlayerTeamChatMessage Parms{};

	Parms.TriggerPlayer = TriggerPlayer;
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyDeselected
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetGameType::NotifyDeselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyDeselected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyEditTeamSettings
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   MinigameEditor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyEditTeamSettings(class ABRPlayerState* MinigameEditor, const class FString& TeamName, const struct FInspectorPropertyChangelist& Settings, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyEditTeamSettings");

	Params::BRRulesetGameType_NotifyEditTeamSettings Parms{};

	Parms.MinigameEditor = MinigameEditor;
	Parms.TeamName = std::move(TeamName);
	Parms.Settings = std::move(Settings);
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyEndSession
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyEndSession(class ABRPlayerState* TriggeredBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyEndSession");

	Params::BRRulesetGameType_NotifyEndSession Parms{};

	Parms.TriggeredBy = TriggeredBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyJoinRuleset
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   NewMember                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyJoinRuleset(class ABRPlayerState* NewMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyJoinRuleset");

	Params::BRRulesetGameType_NotifyJoinRuleset Parms{};

	Parms.NewMember = NewMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyLeaveRuleset
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   OldMember                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyLeaveRuleset(class ABRPlayerState* OldMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyLeaveRuleset");

	Params::BRRulesetGameType_NotifyLeaveRuleset Parms{};

	Parms.OldMember = OldMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyMemberGameTypeInit
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyMemberGameTypeInit(class ABRPlayerState* Member)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyMemberGameTypeInit");

	Params::BRRulesetGameType_NotifyMemberGameTypeInit Parms{};

	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyNewRound
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const int32&                            round                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetGameType::NotifyNewRound(const int32& round)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyNewRound");

	Params::BRRulesetGameType_NotifyNewRound Parms{};

	Parms.round = round;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyReset
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetGameType::NotifyReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifySelected
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetGameType::NotifySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifySelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.NotifyStartSession
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetGameType::NotifyStartSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "NotifyStartSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.OnRep_InspectorSetting
// (Final, Native, Public, BlueprintCallable)

void UBRRulesetGameType::OnRep_InspectorSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "OnRep_InspectorSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetGameType.CanMemberBeDamagedBy
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const TScriptInterface<class IBRRulesetMember>&Member                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::CanMemberBeDamagedBy(const TScriptInterface<class IBRRulesetMember>& Member, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "CanMemberBeDamagedBy");

	Params::BRRulesetGameType_CanMemberBeDamagedBy Parms{};

	Parms.Member = Member;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetCanEnableGameplayPermission
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::GetCanEnableGameplayPermission(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetCanEnableGameplayPermission");

	Params::BRRulesetGameType_GetCanEnableGameplayPermission Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetNextRoundDelay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRRulesetGameType::GetNextRoundDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetNextRoundDelay");

	Params::BRRulesetGameType_GetNextRoundDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetNextRoundNumber
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetGameType::GetNextRoundNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetNextRoundNumber");

	Params::BRRulesetGameType_GetNextRoundNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetPlayerCanRestart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::GetPlayerCanRestart(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetPlayerCanRestart");

	Params::BRRulesetGameType_GetPlayerCanRestart Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetPlayerCanSwitchTeam
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            TeamId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::GetPlayerCanSwitchTeam(class ABRPlayerState* State, const int32& TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetPlayerCanSwitchTeam");

	Params::BRRulesetGameType_GetPlayerCanSwitchTeam Parms{};

	Parms.State = State;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetPlayerHasGameplayPermission
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::GetPlayerHasGameplayPermission(class ABRPlayerState* State, class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetPlayerHasGameplayPermission");

	Params::BRRulesetGameType_GetPlayerHasGameplayPermission Parms{};

	Parms.State = State;
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetPlayerNameColor
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRRulesetGameType::GetPlayerNameColor(class ABRPlayerState* Member) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetPlayerNameColor");

	Params::BRRulesetGameType_GetPlayerNameColor Parms{};

	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetPlayerStartTransform
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBRRulesetGameType::GetPlayerStartTransform(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetPlayerStartTransform");

	Params::BRRulesetGameType_GetPlayerStartTransform Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.GetRuleset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* UBRRulesetGameType::GetRuleset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "GetRuleset");

	Params::BRRulesetGameType_GetRuleset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetGameType.IsLeaderboardColumnVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ColumnName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetGameType::IsLeaderboardColumnVisible(class FName ColumnName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetGameType", "IsLeaderboardColumnVisible");

	Params::BRRulesetGameType_IsLeaderboardColumnVisible Parms{};

	Parms.ColumnName = ColumnName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameTypeComponent_Sandbox.SetSandboxiness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   SandboxinessIn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameTypeComponent_Sandbox::SetSandboxiness(float SandboxinessIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameTypeComponent_Sandbox", "SetSandboxiness");

	Params::BRGameTypeComponent_Sandbox_SetSandboxiness Parms{};

	Parms.SandboxinessIn = SandboxinessIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.GetAllowedScreenResolutionStringList
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UBRGameUserSettings::GetAllowedScreenResolutionStringList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGameUserSettings", "GetAllowedScreenResolutionStringList");

	Params::BRGameUserSettings_GetAllowedScreenResolutionStringList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetBRGameUserSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBRGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGameUserSettings* UBRGameUserSettings::GetBRGameUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGameUserSettings", "GetBRGameUserSettings");

	Params::BRGameUserSettings_GetBRGameUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.BR_SetHDR_UI_Nits
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::BR_SetHDR_UI_Nits(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_SetHDR_UI_Nits");

	Params::BRGameUserSettings_BR_SetHDR_UI_Nits Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.BR_SetHDREnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::BR_SetHDREnabled(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_SetHDREnabled");

	Params::BRGameUserSettings_BR_SetHDREnabled Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.BR_SetHDRNits
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::BR_SetHDRNits(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_SetHDRNits");

	Params::BRGameUserSettings_BR_SetHDRNits Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.PreviewApplySettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCheckForCommandLineOverrides                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::PreviewApplySettings(bool bCheckForCommandLineOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "PreviewApplySettings");

	Params::BRGameUserSettings_PreviewApplySettings Parms{};

	Parms.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.PreviewDiscardSettings
// (Final, Native, Public, BlueprintCallable)

void UBRGameUserSettings::PreviewDiscardSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "PreviewDiscardSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetAntiAliasingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRAntiAliasingMode                     Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetAntiAliasingMode(EBRAntiAliasingMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetAntiAliasingMode");

	Params::BRGameUserSettings_SetAntiAliasingMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetCameraShakeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetCameraShakeScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetCameraShakeScale");

	Params::BRGameUserSettings_SetCameraShakeScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetEnableGizmoMSAA
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetEnableGizmoMSAA(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetEnableGizmoMSAA");

	Params::BRGameUserSettings_SetEnableGizmoMSAA Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetEnableGizmoPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetEnableGizmoPass(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetEnableGizmoPass");

	Params::BRGameUserSettings_SetEnableGizmoPass Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetEnableOIT
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetEnableOIT(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetEnableOIT");

	Params::BRGameUserSettings_SetEnableOIT Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetFieldOfView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetFieldOfView(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetFieldOfView");

	Params::BRGameUserSettings_SetFieldOfView Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetFrameGenerationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetFrameGenerationEnabled(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetFrameGenerationEnabled");

	Params::BRGameUserSettings_SetFrameGenerationEnabled Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetGlobalIlluminationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRGlobalIlluminationMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetGlobalIlluminationMode(EBRGlobalIlluminationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetGlobalIlluminationMode");

	Params::BRGameUserSettings_SetGlobalIlluminationMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetMotionBlurMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRMotionBlurMode                       Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetMotionBlurMode(EBRMotionBlurMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetMotionBlurMode");

	Params::BRGameUserSettings_SetMotionBlurMode Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetReflexEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetReflexEnabled(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetReflexEnabled");

	Params::BRGameUserSettings_SetReflexEnabled Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetRenderingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRRenderingMode                        Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetRenderingMode(EBRRenderingMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetRenderingMode");

	Params::BRGameUserSettings_SetRenderingMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetResolutionScalePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRResolutionScalePreset                Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetResolutionScalePreset(EBRResolutionScalePreset Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetResolutionScalePreset");

	Params::BRGameUserSettings_SetResolutionScalePreset Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetScreenResolutionById
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetScreenResolutionById(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetScreenResolutionById");

	Params::BRGameUserSettings_SetScreenResolutionById Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetSimpleShadingSupportLocalLights
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetSimpleShadingSupportLocalLights(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetSimpleShadingSupportLocalLights");

	Params::BRGameUserSettings_SetSimpleShadingSupportLocalLights Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetSupportRayTracing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetSupportRayTracing(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetSupportRayTracing");

	Params::BRGameUserSettings_SetSupportRayTracing Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.SetUseVirtualShadowMaps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGameUserSettings::SetUseVirtualShadowMaps(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "SetUseVirtualShadowMaps");

	Params::BRGameUserSettings_SetUseVirtualShadowMaps Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGameUserSettings.BR_GetHDR_UI_Nits
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameUserSettings::BR_GetHDR_UI_Nits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_GetHDR_UI_Nits");

	Params::BRGameUserSettings_BR_GetHDR_UI_Nits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.BR_GetHDREnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::BR_GetHDREnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_GetHDREnabled");

	Params::BRGameUserSettings_BR_GetHDREnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.BR_GetHDRNits
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameUserSettings::BR_GetHDRNits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_GetHDRNits");

	Params::BRGameUserSettings_BR_GetHDRNits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.BR_GetHDRSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::BR_GetHDRSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "BR_GetHDRSupported");

	Params::BRGameUserSettings_BR_GetHDRSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.ComputeAutoResolutionScalePreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRResolutionScalePreset                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRResolutionScalePreset UBRGameUserSettings::ComputeAutoResolutionScalePreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "ComputeAutoResolutionScalePreset");

	Params::BRGameUserSettings_ComputeAutoResolutionScalePreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetAntiAliasingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRAntiAliasingMode                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRAntiAliasingMode UBRGameUserSettings::GetAntiAliasingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetAntiAliasingMode");

	Params::BRGameUserSettings_GetAntiAliasingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetCameraShakeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRGameUserSettings::GetCameraShakeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetCameraShakeScale");

	Params::BRGameUserSettings_GetCameraShakeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetCanChangeScreenResolution
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetCanChangeScreenResolution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetCanChangeScreenResolution");

	Params::BRGameUserSettings_GetCanChangeScreenResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetEnableGizmoMSAA
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetEnableGizmoMSAA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetEnableGizmoMSAA");

	Params::BRGameUserSettings_GetEnableGizmoMSAA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetEnableGizmoPass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetEnableGizmoPass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetEnableGizmoPass");

	Params::BRGameUserSettings_GetEnableGizmoPass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetEnableOIT
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetEnableOIT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetEnableOIT");

	Params::BRGameUserSettings_GetEnableOIT Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetFieldOfView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRGameUserSettings::GetFieldOfView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetFieldOfView");

	Params::BRGameUserSettings_GetFieldOfView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetFrameGenerationDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetFrameGenerationDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetFrameGenerationDisabled");

	Params::BRGameUserSettings_GetFrameGenerationDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetFrameGenerationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetFrameGenerationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetFrameGenerationEnabled");

	Params::BRGameUserSettings_GetFrameGenerationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetGlobalIlluminationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRGlobalIlluminationMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRGlobalIlluminationMode UBRGameUserSettings::GetGlobalIlluminationMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetGlobalIlluminationMode");

	Params::BRGameUserSettings_GetGlobalIlluminationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetMotionBlurMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRMotionBlurMode                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRMotionBlurMode UBRGameUserSettings::GetMotionBlurMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetMotionBlurMode");

	Params::BRGameUserSettings_GetMotionBlurMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetReflexDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetReflexDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetReflexDisabled");

	Params::BRGameUserSettings_GetReflexDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetReflexEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetReflexEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetReflexEnabled");

	Params::BRGameUserSettings_GetReflexEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetRenderingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRRenderingMode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRRenderingMode UBRGameUserSettings::GetRenderingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetRenderingMode");

	Params::BRGameUserSettings_GetRenderingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetResolutionScalePreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRResolutionScalePreset                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRResolutionScalePreset UBRGameUserSettings::GetResolutionScalePreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetResolutionScalePreset");

	Params::BRGameUserSettings_GetResolutionScalePreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetResolutionScalePresetScaleFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRResolutionScalePreset                Preset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRGameUserSettings::GetResolutionScalePresetScaleFactor(EBRResolutionScalePreset Preset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetResolutionScalePresetScaleFactor");

	Params::BRGameUserSettings_GetResolutionScalePresetScaleFactor Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetResolutionScaleValueEx
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBRGameUserSettings::GetResolutionScaleValueEx() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetResolutionScaleValueEx");

	Params::BRGameUserSettings_GetResolutionScaleValueEx Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetScreenResolutionById
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRGameUserSettings::GetScreenResolutionById() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetScreenResolutionById");

	Params::BRGameUserSettings_GetScreenResolutionById Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetSimpleShadingSupportLocalLights
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetSimpleShadingSupportLocalLights() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetSimpleShadingSupportLocalLights");

	Params::BRGameUserSettings_GetSimpleShadingSupportLocalLights Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetSupportRayTracing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetSupportRayTracing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetSupportRayTracing");

	Params::BRGameUserSettings_GetSupportRayTracing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.GetUseVirtualShadowMaps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::GetUseVirtualShadowMaps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "GetUseVirtualShadowMaps");

	Params::BRGameUserSettings_GetUseVirtualShadowMaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeCustom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsAntiAliasingModeCustom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsAntiAliasingModeCustom");

	Params::BRGameUserSettings_IsAntiAliasingModeCustom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeNotCustom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsAntiAliasingModeNotCustom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsAntiAliasingModeNotCustom");

	Params::BRGameUserSettings_IsAntiAliasingModeNotCustom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsAntiAliasingModeSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBRAntiAliasingMode                     Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsAntiAliasingModeSupported(EBRAntiAliasingMode Mode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsAntiAliasingModeSupported");

	Params::BRGameUserSettings_IsAntiAliasingModeSupported Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsFrameGenerationSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsFrameGenerationSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsFrameGenerationSupported");

	Params::BRGameUserSettings_IsFrameGenerationSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsGlobalIlluminationModeNotNone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsGlobalIlluminationModeNotNone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsGlobalIlluminationModeNotNone");

	Params::BRGameUserSettings_IsGlobalIlluminationModeNotNone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsGlobalIlluminationQualitySupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsGlobalIlluminationQualitySupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsGlobalIlluminationQualitySupported");

	Params::BRGameUserSettings_IsGlobalIlluminationQualitySupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsOITSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsOITSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsOITSupported");

	Params::BRGameUserSettings_IsOITSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsReflexSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsReflexSupported() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsReflexSupported");

	Params::BRGameUserSettings_IsReflexSupported Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsRenderingModeDirectX12
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsRenderingModeDirectX12() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsRenderingModeDirectX12");

	Params::BRGameUserSettings_IsRenderingModeDirectX12 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsRenderingModeNotSimpleShading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsRenderingModeNotSimpleShading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsRenderingModeNotSimpleShading");

	Params::BRGameUserSettings_IsRenderingModeNotSimpleShading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsRenderingModeSimpleShading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsRenderingModeSimpleShading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsRenderingModeSimpleShading");

	Params::BRGameUserSettings_IsRenderingModeSimpleShading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsResolutionScalePresetCustom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsResolutionScalePresetCustom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsResolutionScalePresetCustom");

	Params::BRGameUserSettings_IsResolutionScalePresetCustom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameUserSettings.IsResolutionScalePresetNotCustom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGameUserSettings::IsResolutionScalePresetNotCustom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameUserSettings", "IsResolutionScalePresetNotCustom");

	Params::BRGameUserSettings_IsResolutionScalePresetNotCustom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGameViewportClient.ApplyGizmoSettingValue
// (Final, Native, Private)

void UBRGameViewportClient::ApplyGizmoSettingValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGameViewportClient", "ApplyGizmoSettingValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogEntryWidget.HandleClicked
// (Final, Native, Public)

void UBRGenericCatalogEntryWidget::HandleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogEntryWidget", "HandleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogEntryWidget.HandleDropped
// (Final, Native, Public)
// Parameters:
// class UDragDropOperation*               Operation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogEntryWidget::HandleDropped(class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogEntryWidget", "HandleDropped");

	Params::BRGenericCatalogEntryWidget_HandleDropped Parms{};

	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogEntryWidget.Setup
// (Final, Native, Public, BlueprintCallable)

void UBRGenericCatalogEntryWidget::Setup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogEntryWidget", "Setup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogTabButtonWidget.HandleClicked
// (Final, Native, Private)

void UBRGenericCatalogTabButtonWidget::HandleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogTabButtonWidget", "HandleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogTabButtonWidget.SetShowSelected
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Selected                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogTabButtonWidget::SetShowSelected(bool Selected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogTabButtonWidget", "SetShowSelected");

	Params::BRGenericCatalogTabButtonWidget_SetShowSelected Parms{};

	Parms.Selected = Selected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRGenericCatalogWidget.BringObjectIntoView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          TARGET                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::BringObjectIntoView(class UObject* TARGET)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "BringObjectIntoView");

	Params::BRGenericCatalogWidget_BringObjectIntoView Parms{};

	Parms.TARGET = TARGET;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.Clear
// (Final, Native, Public, BlueprintCallable)

void UBRGenericCatalogWidget::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.CreateEntryWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRCatalogEntry&           CatalogEntry                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRGenericCatalogEntryWidget>UsedEntryWidget                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGenericCatalogEntryWidget*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRGenericCatalogEntryWidget* UBRGenericCatalogWidget::CreateEntryWidget(const struct FBRCatalogEntry& CatalogEntry, TSubclassOf<class UBRGenericCatalogEntryWidget> UsedEntryWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "CreateEntryWidget");

	Params::BRGenericCatalogWidget_CreateEntryWidget Parms{};

	Parms.CatalogEntry = std::move(CatalogEntry);
	Parms.UsedEntryWidget = UsedEntryWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryDragEnded
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryDragEnded(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryDragEnded");

	Params::BRGenericCatalogWidget_HandleEntryDragEnded Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryDragStarted
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryDragStarted(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryDragStarted");

	Params::BRGenericCatalogWidget_HandleEntryDragStarted Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryHoverEnded
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryHoverEnded(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryHoverEnded");

	Params::BRGenericCatalogWidget_HandleEntryHoverEnded Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryHoverStarted
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryHoverStarted(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryHoverStarted");

	Params::BRGenericCatalogWidget_HandleEntryHoverStarted Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryLeftClick
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryLeftClick(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryLeftClick");

	Params::BRGenericCatalogWidget_HandleEntryLeftClick Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleEntryMiddleClick
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogEntryWidget*     Entry                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleEntryMiddleClick(class UBRGenericCatalogEntryWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleEntryMiddleClick");

	Params::BRGenericCatalogWidget_HandleEntryMiddleClick Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.HandleTabSelection
// (Final, Native, Private)
// Parameters:
// class UBRGenericCatalogTabButtonWidget* Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::HandleTabSelection(class UBRGenericCatalogTabButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "HandleTabSelection");

	Params::BRGenericCatalogWidget_HandleTabSelection Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.InsertCustomTab
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRCatalogCustomTab&       TabData                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::InsertCustomTab(const struct FBRCatalogCustomTab& TabData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "InsertCustomTab");

	Params::BRGenericCatalogWidget_InsertCustomTab Parms{};

	Parms.TabData = std::move(TabData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.Rebuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRCatalog*                       InCatalog                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::Rebuild(class UBRCatalog* InCatalog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "Rebuild");

	Params::BRGenericCatalogWidget_Rebuild Parms{};

	Parms.InCatalog = InCatalog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.RebuildAdv
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBRCatalog*                       InCatalog                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FBRCatalogCustomTab>&CustomTabsAtStart                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FBRCatalogCustomTab>&CustomTabsAtEnd                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::RebuildAdv(class UBRCatalog* InCatalog, const TArray<struct FBRCatalogCustomTab>& CustomTabsAtStart, const TArray<struct FBRCatalogCustomTab>& CustomTabsAtEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "RebuildAdv");

	Params::BRGenericCatalogWidget_RebuildAdv Parms{};

	Parms.InCatalog = InCatalog;
	Parms.CustomTabsAtStart = std::move(CustomTabsAtStart);
	Parms.CustomTabsAtEnd = std::move(CustomTabsAtEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGenericCatalogWidget.SelectTab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TabIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGenericCatalogWidget::SelectTab(int32 TabIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGenericCatalogWidget", "SelectTab");

	Params::BRGenericCatalogWidget_SelectTab Parms{};

	Parms.TabIndex = TabIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRGizmoText.Setup
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FText&                      InCount                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRGizmoText::Setup(const class FText& InCount, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRGizmoText", "Setup");

	Params::BRGizmoText_Setup Parms{};

	Parms.InCount = std::move(InCount);
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BrickDebugComponent.SetBrickColor
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickDebugComponent::SetBrickColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickDebugComponent", "SetBrickColor");

	Params::BrickDebugComponent_SetBrickColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickDebugComponent.SetBrickType
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UBrickType*                       NewBrickType                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickDebugComponent::SetBrickType(class UBrickType* NewBrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickDebugComponent", "SetBrickType");

	Params::BrickDebugComponent_SetBrickType Parms{};

	Parms.NewBrickType = NewBrickType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickDebugComponent.GetBrickColor
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBrickDebugComponent::GetBrickColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickDebugComponent", "GetBrickColor");

	Params::BrickDebugComponent_GetBrickColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDebugComponent.GetBrickType
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBrickDebugComponent::GetBrickType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickDebugComponent", "GetBrickType");

	Params::BrickDebugComponent_GetBrickType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BasicBrickDebugComponent.SetBrick
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UBasicBrick*                      NewBrick                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBasicBrickDebugComponent::SetBrick(class UBasicBrick* NewBrick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasicBrickDebugComponent", "SetBrick");

	Params::BasicBrickDebugComponent_SetBrick Parms{};

	Parms.NewBrick = NewBrick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyDescriptorList.FindDescriptor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptor*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptor* UInspectorPropertyDescriptorList::FindDescriptor(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptorList", "FindDescriptor");

	Params::InspectorPropertyDescriptorList_FindDescriptor Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.Conv_BRGuidToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   InGuid                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRGuidLibrary::Conv_BRGuidToString(const struct FBRGuid& InGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "Conv_BRGuidToString");

	Params::BRGuidLibrary_Conv_BRGuidToString Parms{};

	Parms.InGuid = std::move(InGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.EqualEqual_BRGuidBRGuid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGuidLibrary::EqualEqual_BRGuidBRGuid(const struct FBRGuid& A, const struct FBRGuid& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "EqualEqual_BRGuidBRGuid");

	Params::BRGuidLibrary_EqualEqual_BRGuidBRGuid Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.Invalidate_BRGuid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBRGuid&                         InGuid                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGuidLibrary::Invalidate_BRGuid(struct FBRGuid& InGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "Invalidate_BRGuid");

	Params::BRGuidLibrary_Invalidate_BRGuid Parms{};

	Parms.InGuid = std::move(InGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InGuid = std::move(Parms.InGuid);
}


// Function Brickadia.BRGuidLibrary.IsValid_BRGuid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   InGuid                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGuidLibrary::IsValid_BRGuid(const struct FBRGuid& InGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "IsValid_BRGuid");

	Params::BRGuidLibrary_IsValid_BRGuid Parms{};

	Parms.InGuid = std::move(InGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.MakePublicBrickOwnerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBRGuid                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBRGuid UBRGuidLibrary::MakePublicBrickOwnerId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "MakePublicBrickOwnerId");

	Params::BRGuidLibrary_MakePublicBrickOwnerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.NotEqual_BRGuidBRGuid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRGuid&                   A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRGuidLibrary::NotEqual_BRGuidBRGuid(const struct FBRGuid& A, const struct FBRGuid& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "NotEqual_BRGuidBRGuid");

	Params::BRGuidLibrary_NotEqual_BRGuidBRGuid Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRGuidLibrary.Parse_StringToBRGuid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    GuidString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRGuid*                         OutGuid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutSuccess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRGuidLibrary::Parse_StringToBRGuid(const class FString& GuidString, struct FBRGuid* OutGuid, bool* bOutSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRGuidLibrary", "Parse_StringToBRGuid");

	Params::BRGuidLibrary_Parse_StringToBRGuid Parms{};

	Parms.GuidString = std::move(GuidString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGuid != nullptr)
		*OutGuid = std::move(Parms.OutGuid);

	if (bOutSuccess != nullptr)
		*bOutSuccess = Parms.bOutSuccess;
}


// Function Brickadia.BRHintSubsystem.AllowCloseHints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRHintSubsystem::AllowCloseHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "AllowCloseHints");

	Params::BRHintSubsystem_AllowCloseHints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHintSubsystem.CloseHints
// (Final, Native, Public, BlueprintCallable)

void UBRHintSubsystem::CloseHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "CloseHints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHintSubsystem.GetAllHints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FHintInfoTableRow>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FHintInfoTableRow> UBRHintSubsystem::GetAllHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "GetAllHints");

	Params::BRHintSubsystem_GetAllHints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRHintSubsystem.NextHint
// (Final, Native, Public, BlueprintCallable)

void UBRHintSubsystem::NextHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "NextHint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHintSubsystem.PrevHint
// (Final, Native, Public, BlueprintCallable)

void UBRHintSubsystem::PrevHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "PrevHint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRHintSubsystem.RequestHintCategory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHintCategory                           Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceDisplay                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRHintSubsystem::RequestHintCategory(EHintCategory Category, bool ForceDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRHintSubsystem", "RequestHintCategory");

	Params::BRHintSubsystem_RequestHintCategory Parms{};

	Parms.Category = Category;
	Parms.ForceDisplay = ForceDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.HUDWidgetBase.OnBackdropBlurDisabled
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnBackdropBlurDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnBackdropBlurDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetBase.OnBackdropBlurEnabled
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnBackdropBlurEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnBackdropBlurEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetBase.OnBackdropClickCatcherDisabled
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnBackdropClickCatcherDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnBackdropClickCatcherDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetBase.OnBackdropClickCatcherEnabled
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnBackdropClickCatcherEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnBackdropClickCatcherEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetBase.OnDialogsHideHUD
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnDialogsHideHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnDialogsHideHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetBase.OnDialogsShowHUD
// (Event, Public, BlueprintEvent)

void UHUDWidgetBase::OnDialogsShowHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetBase", "OnDialogsShowHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.HUDWidgetIngameBase.OnPossessedPawnChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDWidgetIngameBase::OnPossessedPawnChanged(class APawn* OldPawn, class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDWidgetIngameBase", "OnPossessedPawnChanged");

	Params::HUDWidgetIngameBase_OnPossessedPawnChanged Parms{};

	Parms.OldPawn = OldPawn;
	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BasicBrick.GetBrickType
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBasicBrick::GetBrickType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasicBrick", "GetBrickType");

	Params::BasicBrick_GetBrickType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.AttachComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckQuota                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentAttachResult             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentAttachResult UBrickComponentLibrary::AttachComponent(class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType, bool bCheckQuota)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "AttachComponent");

	Params::BrickComponentLibrary_AttachComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;
	Parms.bCheckQuota = bCheckQuota;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.DetachComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentDetachResult             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentDetachResult UBrickComponentLibrary::DetachComponent(class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "DetachComponent");

	Params::BrickComponentLibrary_DetachComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.GetAllComponentTypes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBrickComponentTypeBase*>* OutComponentTypes                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBrickComponentLibrary::GetAllComponentTypes(const class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle, TArray<class UBrickComponentTypeBase*>* OutComponentTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetAllComponentTypes");

	Params::BrickComponentLibrary_GetAllComponentTypes Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponentTypes != nullptr)
		*OutComponentTypes = std::move(Parms.OutComponentTypes);
}


// Function Brickadia.BrickComponentLibrary.GetAllRegisteredComponentTypes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBrickComponentTypeBase*>* OutComponentTypes                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludeTombstones                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComponentLibrary::GetAllRegisteredComponentTypes(class UObject* WorldContextObject, TArray<class UBrickComponentTypeBase*>* OutComponentTypes, bool bIncludeTombstones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetAllRegisteredComponentTypes");

	Params::BrickComponentLibrary_GetAllRegisteredComponentTypes Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bIncludeTombstones = bIncludeTombstones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutComponentTypes != nullptr)
		*OutComponentTypes = std::move(Parms.OutComponentTypes);
}


// Function Brickadia.BrickComponentLibrary.GetComponentType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBrickComponentTypeBase>ComponentTypeClass                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickComponentTypeBase* UBrickComponentLibrary::GetComponentType(class UObject* WorldContextObject, TSubclassOf<class UBrickComponentTypeBase> ComponentTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetComponentType");

	Params::BrickComponentLibrary_GetComponentType Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ComponentTypeClass = ComponentTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.GetComponentTypeByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickComponentTypeBase* UBrickComponentLibrary::GetComponentTypeByName(class UObject* WorldContextObject, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetComponentTypeByName");

	Params::BrickComponentLibrary_GetComponentTypeByName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.GetComponentTypeDerivedFrom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBrickComponentTypeBase>ComponentTypeClass                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickComponentTypeBase* UBrickComponentLibrary::GetComponentTypeDerivedFrom(class UObject* WorldContextObject, TSubclassOf<class UBrickComponentTypeBase> ComponentTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetComponentTypeDerivedFrom");

	Params::BrickComponentLibrary_GetComponentTypeDerivedFrom Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ComponentTypeClass = ComponentTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.GetNumRegisteredComponentClasses
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickComponentLibrary::GetNumRegisteredComponentClasses(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "GetNumRegisteredComponentClasses");

	Params::BrickComponentLibrary_GetNumRegisteredComponentClasses Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.HasAnyComponents
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickComponentLibrary::HasAnyComponents(const class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "HasAnyComponents");

	Params::BrickComponentLibrary_HasAnyComponents Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentLibrary.HasComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickComponentLibrary::HasComponent(const class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickComponentLibrary", "HasComponent");

	Params::BrickComponentLibrary_HasComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_AnyStruct
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_AnyStruct(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_AnyStruct");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_AnyStruct Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Boolean
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Boolean(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Boolean");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Boolean Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Byte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Byte(uint8 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Byte");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Byte Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Double
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Double(double InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Double");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Double Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Float
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Float(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Float");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Float Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Int
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Int(int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Int");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Int Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Int64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Int64(int64 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Int64");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Int64 Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Name
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Name(class FName InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Name");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Name Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_Null
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_Null()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_Null");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_Null Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.BoxPropertyValue_String
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InValue                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyValue UInspectorPropertyValueLibrary::BoxPropertyValue_String(const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "BoxPropertyValue_String");

	Params::InspectorPropertyValueLibrary_BoxPropertyValue_String Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.GetPropertyValueType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EInspectorPropertyValueType             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInspectorPropertyValueType UInspectorPropertyValueLibrary::GetPropertyValueType(const struct FInspectorPropertyValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "GetPropertyValueType");

	Params::InspectorPropertyValueLibrary_GetPropertyValueType Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.Int64ToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInspectorPropertyValueLibrary::Int64ToString(int64 Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "Int64ToString");

	Params::InspectorPropertyValueLibrary_Int64ToString Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.PropertyValueToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInspectorPropertyValueLibrary::PropertyValueToString(const struct FInspectorPropertyValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "PropertyValueToString");

	Params::InspectorPropertyValueLibrary_PropertyValueToString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.StringToInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInspectorPropertyValueLibrary::StringToInt64(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "StringToInt64");

	Params::InspectorPropertyValueLibrary_StringToInt64 Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_AnyStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_AnyStruct(const struct FInspectorPropertyValue& Value, bool* bIsValid, int32* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_AnyStruct");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_AnyStruct Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Boolean
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Boolean(const struct FInspectorPropertyValue& Value, bool* bIsValid, bool* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Boolean");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Boolean Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Byte
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Byte(const struct FInspectorPropertyValue& Value, bool* bIsValid, uint8* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Byte");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Byte Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double*                                 Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Double(const struct FInspectorPropertyValue& Value, bool* bIsValid, double* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Double");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Double Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Float(const struct FInspectorPropertyValue& Value, bool* bIsValid, float* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Float");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Float Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Int
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Int(const struct FInspectorPropertyValue& Value, bool* bIsValid, int32* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Int");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Int Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Int64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Int64(const struct FInspectorPropertyValue& Value, bool* bIsValid, int64* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Int64");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Int64 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            Unboxed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_Name(const struct FInspectorPropertyValue& Value, bool* bIsValid, class FName* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_Name");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_Name Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = Parms.Unboxed;
}


// Function Brickadia.InspectorPropertyValueLibrary.UnboxPropertyValue_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool*                                   bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Unboxed                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyValueLibrary::UnboxPropertyValue_String(const struct FInspectorPropertyValue& Value, bool* bIsValid, class FString* Unboxed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorPropertyValueLibrary", "UnboxPropertyValue_String");

	Params::InspectorPropertyValueLibrary_UnboxPropertyValue_String Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	if (Unboxed != nullptr)
		*Unboxed = std::move(Parms.Unboxed);
}


// Function Brickadia.BRPlayerPartComponent.ApplyMeshColors
// (Final, Native, Public, BlueprintCallable)

void UBRPlayerPartComponent::ApplyMeshColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "ApplyMeshColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.ClearDescriptor
// (Final, Native, Public, BlueprintCallable)

void UBRPlayerPartComponent::ClearDescriptor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "ClearDescriptor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.GetMeshColorSectionIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FaceIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRPlayerPartComponent::GetMeshColorSectionIndex(int32 FaceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "GetMeshColorSectionIndex");

	Params::BRPlayerPartComponent_GetMeshColorSectionIndex Parms{};

	Parms.FaceIndex = FaceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerPartComponent.SetDecal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerDecalDescriptor*         NewDecal                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlayerPartComponent::SetDecal(class UBRPlayerDecalDescriptor* NewDecal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "SetDecal");

	Params::BRPlayerPartComponent_SetDecal Parms{};

	Parms.NewDecal = NewDecal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.SetDescriptor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPlayerPartDescriptor*          NewDescriptor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlayerPartComponent::SetDescriptor(class UBRPlayerPartDescriptor* NewDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "SetDescriptor");

	Params::BRPlayerPartComponent_SetDescriptor Parms{};

	Parms.NewDescriptor = NewDescriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.SetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlayerPartComponent::SetMeshColor(int32 Index_0, const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "SetMeshColor");

	Params::BRPlayerPartComponent_SetMeshColor Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.SetMirrored
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bMirror                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlayerPartComponent::SetMirrored(bool bMirror)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "SetMirrored");

	Params::BRPlayerPartComponent_SetMirrored Parms{};

	Parms.bMirror = bMirror;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartComponent.GetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRPlayerPartComponent::GetMeshColor(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartComponent", "GetMeshColor");

	Params::BRPlayerPartComponent_GetMeshColor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPainterScrollPalette.ColorSelected
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FColor&                    Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPainterScrollPalette::ColorSelected(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPainterScrollPalette", "ColorSelected");

	Params::BRPainterScrollPalette_ColorSelected Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPainterScrollPalette.ScrollDown
// (Final, Native, Public)

void UBRPainterScrollPalette::ScrollDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPainterScrollPalette", "ScrollDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPainterScrollPalette.ScrollLeft
// (Final, Native, Public)

void UBRPainterScrollPalette::ScrollLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPainterScrollPalette", "ScrollLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPainterScrollPalette.ScrollRight
// (Final, Native, Public)

void UBRPainterScrollPalette::ScrollRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPainterScrollPalette", "ScrollRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPainterScrollPalette.ScrollUp
// (Final, Native, Public)

void UBRPainterScrollPalette::ScrollUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPainterScrollPalette", "ScrollUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.ClearDisplayUnit
// (Final, Native, Public, BlueprintCallable)

void USpinBoxInteger::ClearDisplayUnit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "ClearDisplayUnit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.ClearMaxSliderValue
// (Final, Native, Public, BlueprintCallable)

void USpinBoxInteger::ClearMaxSliderValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "ClearMaxSliderValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.ClearMaxValue
// (Final, Native, Public, BlueprintCallable)

void USpinBoxInteger::ClearMaxValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "ClearMaxValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.ClearMinSliderValue
// (Final, Native, Public, BlueprintCallable)

void USpinBoxInteger::ClearMinSliderValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "ClearMinSliderValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.ClearMinValue
// (Final, Native, Public, BlueprintCallable)

void USpinBoxInteger::ClearMinValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "ClearMinValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetAlwaysUsesDeltaSnap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetAlwaysUsesDeltaSnap(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetAlwaysUsesDeltaSnap");

	Params::SpinBoxInteger_SetAlwaysUsesDeltaSnap Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetDelta
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetDelta(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetDelta");

	Params::SpinBoxInteger_SetDelta Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetDisplayUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUnit                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetDisplayUnit(EUnit NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetDisplayUnit");

	Params::SpinBoxInteger_SetDisplayUnit Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetForegroundColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSlateColor&               InForegroundColor                                      (Parm, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetForegroundColor(const struct FSlateColor& InForegroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetForegroundColor");

	Params::SpinBoxInteger_SetForegroundColor Parms{};

	Parms.InForegroundColor = std::move(InForegroundColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMaxFractionalDigits
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMaxFractionalDigits(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMaxFractionalDigits");

	Params::SpinBoxInteger_SetMaxFractionalDigits Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMaxSliderValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMaxSliderValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMaxSliderValue");

	Params::SpinBoxInteger_SetMaxSliderValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMaxValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMaxValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMaxValue");

	Params::SpinBoxInteger_SetMaxValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMinFractionalDigits
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMinFractionalDigits(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMinFractionalDigits");

	Params::SpinBoxInteger_SetMinFractionalDigits Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMinSliderValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMinSliderValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMinSliderValue");

	Params::SpinBoxInteger_SetMinSliderValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetMinValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetMinValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetMinValue");

	Params::SpinBoxInteger_SetMinValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetUnderlyingUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUnit                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetUnderlyingUnit(EUnit NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetUnderlyingUnit");

	Params::SpinBoxInteger_SetUnderlyingUnit Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpinBoxInteger::SetValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "SetValue");

	Params::SpinBoxInteger_SetValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.SpinBoxInteger.GetAlwaysUsesDeltaSnap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpinBoxInteger::GetAlwaysUsesDeltaSnap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetAlwaysUsesDeltaSnap");

	Params::SpinBoxInteger_GetAlwaysUsesDeltaSnap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetDelta
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetDelta");

	Params::SpinBoxInteger_GetDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetDisplayUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUnit                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUnit USpinBoxInteger::GetDisplayUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetDisplayUnit");

	Params::SpinBoxInteger_GetDisplayUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMaxFractionalDigits
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMaxFractionalDigits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMaxFractionalDigits");

	Params::SpinBoxInteger_GetMaxFractionalDigits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMaxSliderValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMaxSliderValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMaxSliderValue");

	Params::SpinBoxInteger_GetMaxSliderValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMaxValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMaxValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMaxValue");

	Params::SpinBoxInteger_GetMaxValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMinFractionalDigits
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMinFractionalDigits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMinFractionalDigits");

	Params::SpinBoxInteger_GetMinFractionalDigits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMinSliderValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMinSliderValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMinSliderValue");

	Params::SpinBoxInteger_GetMinSliderValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetMinValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetMinValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetMinValue");

	Params::SpinBoxInteger_GetMinValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetUnderlyingUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUnit                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUnit USpinBoxInteger::GetUnderlyingUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetUnderlyingUnit");

	Params::SpinBoxInteger_GetUnderlyingUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.SpinBoxInteger.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USpinBoxInteger::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpinBoxInteger", "GetValue");

	Params::SpinBoxInteger_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineAttached
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickComponentInstanceRef&InstanceRef                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentData_WheelEngine&EngineState                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EBrickComponentAttachReason             Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComponentType_Internal_WheelEngine::Effects_OnEngineAttached(const struct FBrickComponentInstanceRef& InstanceRef, const struct FBrickComponentData_WheelEngine& EngineState, EBrickComponentAttachReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComponentType_Internal_WheelEngine", "Effects_OnEngineAttached");

	Params::BrickComponentType_Internal_WheelEngine_Effects_OnEngineAttached Parms{};

	Parms.InstanceRef = std::move(InstanceRef);
	Parms.EngineState = std::move(EngineState);
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineAudioDescriptorUpdated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickComponentInstanceRef&InstanceRef                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentData_WheelEngine&EngineState                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EBrickComponentPropertyChangeReason     Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickComponentType_Internal_WheelEngine::Effects_OnEngineAudioDescriptorUpdated(const struct FBrickComponentInstanceRef& InstanceRef, const struct FBrickComponentData_WheelEngine& EngineState, EBrickComponentPropertyChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComponentType_Internal_WheelEngine", "Effects_OnEngineAudioDescriptorUpdated");

	Params::BrickComponentType_Internal_WheelEngine_Effects_OnEngineAudioDescriptorUpdated Parms{};

	Parms.InstanceRef = std::move(InstanceRef);
	Parms.EngineState = std::move(EngineState);
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineOnStateChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickComponentInstanceRef&InstanceRef                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentData_WheelEngine&EngineState                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FBrickWheelEngineUpdateContext&EngineContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickComponentType_Internal_WheelEngine::Effects_OnEngineOnStateChanged(const struct FBrickComponentInstanceRef& InstanceRef, const struct FBrickComponentData_WheelEngine& EngineState, const struct FBrickWheelEngineUpdateContext& EngineContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComponentType_Internal_WheelEngine", "Effects_OnEngineOnStateChanged");

	Params::BrickComponentType_Internal_WheelEngine_Effects_OnEngineOnStateChanged Parms{};

	Parms.InstanceRef = std::move(InstanceRef);
	Parms.EngineState = std::move(EngineState);
	Parms.EngineContext = std::move(EngineContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BrickComponentType_Internal_WheelEngine.Effects_OnEngineUpdate
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBrickComponentInstanceRef&InstanceRef                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentData_WheelEngine&EngineState                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FBrickWheelEngineUpdateContext&EngineContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickComponentType_Internal_WheelEngine::Effects_OnEngineUpdate(const struct FBrickComponentInstanceRef& InstanceRef, const struct FBrickComponentData_WheelEngine& EngineState, const struct FBrickWheelEngineUpdateContext& EngineContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickComponentType_Internal_WheelEngine", "Effects_OnEngineUpdate");

	Params::BrickComponentType_Internal_WheelEngine_Effects_OnEngineUpdate Parms{};

	Parms.InstanceRef = std::move(InstanceRef);
	Parms.EngineState = std::move(EngineState);
	Parms.EngineContext = std::move(EngineContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.ProceduralBrickDebugComponent.ResetCache
// (Final, Native, Private)

void UProceduralBrickDebugComponent::ResetCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrickDebugComponent", "ResetCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.ProceduralBrickDebugComponent.SetBrick
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UProceduralBrick*                 NewBrick                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProceduralBrickDebugComponent::SetBrick(class UProceduralBrick* NewBrick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralBrickDebugComponent", "SetBrick");

	Params::ProceduralBrickDebugComponent_SetBrick Parms{};

	Parms.NewBrick = NewBrick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickBuildingTemplate.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickBuildingTemplate::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickBuildingTemplate", "IsValid");

	Params::BrickBuildingTemplate_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDuplicatorLibrary.CaptureSelectionFromBox
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              BrickGrid                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntBox&                   Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MaxBricks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutOverflow                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireTrust                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ControllerForTrustCheck                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumTrustFails                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickSelection*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickSelection* UBrickDuplicatorLibrary::CaptureSelectionFromBox(class UBrickGridComponent* BrickGrid, const struct FIntBox& Box, int32 MaxBricks, bool* bOutOverflow, bool bRequireTrust, class ABRPlayerController* ControllerForTrustCheck, int32* OutNumTrustFails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDuplicatorLibrary", "CaptureSelectionFromBox");

	Params::BrickDuplicatorLibrary_CaptureSelectionFromBox Parms{};

	Parms.BrickGrid = BrickGrid;
	Parms.Box = std::move(Box);
	Parms.MaxBricks = MaxBricks;
	Parms.bRequireTrust = bRequireTrust;
	Parms.ControllerForTrustCheck = ControllerForTrustCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutOverflow != nullptr)
		*bOutOverflow = Parms.bOutOverflow;

	if (OutNumTrustFails != nullptr)
		*OutNumTrustFails = Parms.OutNumTrustFails;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDuplicatorLibrary.CaptureSelectionFromGrid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              BrickGrid                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickSelection*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickSelection* UBrickDuplicatorLibrary::CaptureSelectionFromGrid(class UBrickGridComponent* BrickGrid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDuplicatorLibrary", "CaptureSelectionFromGrid");

	Params::BrickDuplicatorLibrary_CaptureSelectionFromGrid Parms{};

	Parms.BrickGrid = BrickGrid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDuplicatorLibrary.CaptureTemplateFromBox
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              BrickGrid                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntBox&                   Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MaxBricks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutOverflow                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireTrust                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ControllerForTrustCheck                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumTrustFails                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickBuildingTemplate*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickBuildingTemplate* UBrickDuplicatorLibrary::CaptureTemplateFromBox(class UBrickGridComponent* BrickGrid, const struct FIntBox& Box, int32 MaxBricks, bool* bOutOverflow, bool bRequireTrust, class ABRPlayerController* ControllerForTrustCheck, int32* OutNumTrustFails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDuplicatorLibrary", "CaptureTemplateFromBox");

	Params::BrickDuplicatorLibrary_CaptureTemplateFromBox Parms{};

	Parms.BrickGrid = BrickGrid;
	Parms.Box = std::move(Box);
	Parms.MaxBricks = MaxBricks;
	Parms.bRequireTrust = bRequireTrust;
	Parms.ControllerForTrustCheck = ControllerForTrustCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutOverflow != nullptr)
		*bOutOverflow = Parms.bOutOverflow;

	if (OutNumTrustFails != nullptr)
		*OutNumTrustFails = Parms.OutNumTrustFails;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDuplicatorLibrary.CreateTemplateFromSelection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickSelection*                  Selection                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreWires                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickBuildingTemplate*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickBuildingTemplate* UBrickDuplicatorLibrary::CreateTemplateFromSelection(class UObject* WorldContextObject, class UBrickSelection* Selection, bool bIgnoreWires)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDuplicatorLibrary", "CreateTemplateFromSelection");

	Params::BrickDuplicatorLibrary_CreateTemplateFromSelection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Selection = Selection;
	Parms.bIgnoreWires = bIgnoreWires;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickDuplicatorLibrary.GetTemplatePlacementInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrickRegistry*                   Registry                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickBuildingTemplate*           Template                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickTemplatePlacementInfo      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FBrickTemplatePlacementInfo UBrickDuplicatorLibrary::GetTemplatePlacementInfo(class UBrickRegistry* Registry, class UBrickBuildingTemplate* Template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickDuplicatorLibrary", "GetTemplatePlacementInfo");

	Params::BrickDuplicatorLibrary_GetTemplatePlacementInfo Parms{};

	Parms.Registry = Registry;
	Parms.Template = Template;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerAddColorPalette
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRColorPaletteData&       Data                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerAddColorPalette(const struct FBRColorPaletteData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerAddColorPalette");

	Params::BRServerSettingsManagerComponent_ServerAddColorPalette Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeMap
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class UBRMapInfo*                       NewMap                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerChangeMap(class UBRMapInfo* NewMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerChangeMap");

	Params::BRServerSettingsManagerComponent_ServerChangeMap Parms{};

	Parms.NewMap = NewMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeRoleName
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnnounce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerChangeRoleName(const class FString& RoleId, const class FString& Name_0, bool bAnnounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerChangeRoleName");

	Params::BRServerSettingsManagerComponent_ServerChangeRoleName Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.Name_0 = std::move(Name_0);
	Parms.bAnnounce = bAnnounce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeRoleSettings
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAnnounce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerChangeRoleSettings(const class FString& RoleId, const struct FInspectorPropertyChangelist& Changelist, bool bAnnounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerChangeRoleSettings");

	Params::BRServerSettingsManagerComponent_ServerChangeRoleSettings Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.Changelist = std::move(Changelist);
	Parms.bAnnounce = bAnnounce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerChangeSettings
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRServerSettingsBase>ServerSettingsClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAnnounce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerChangeSettings(TSubclassOf<class UBRServerSettingsBase> ServerSettingsClass, const struct FInspectorPropertyChangelist& Changelist, bool bAnnounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerChangeSettings");

	Params::BRServerSettingsManagerComponent_ServerChangeSettings Parms{};

	Parms.ServerSettingsClass = ServerSettingsClass;
	Parms.Changelist = std::move(Changelist);
	Parms.bAnnounce = bAnnounce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerCreateRole
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CreateAfterRoleId                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAnnounce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerCreateRole(const class FString& RoleId, const class FString& CreateAfterRoleId, const struct FInspectorPropertyChangelist& Changelist, bool bAnnounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerCreateRole");

	Params::BRServerSettingsManagerComponent_ServerCreateRole Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.CreateAfterRoleId = std::move(CreateAfterRoleId);
	Parms.Changelist = std::move(Changelist);
	Parms.bAnnounce = bAnnounce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerDeleteRole
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnnounce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerDeleteRole(const class FString& RoleId, bool bAnnounce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerDeleteRole");

	Params::BRServerSettingsManagerComponent_ServerDeleteRole Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.bAnnounce = bAnnounce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerMigrateColorsInPalette
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRColorPaletteData&       OldPalette                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBRColorPaletteData&       NewPalette                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// EBRColorMigrationMode                   Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerMigrateColorsInPalette(const struct FBRColorPaletteData& OldPalette, const struct FBRColorPaletteData& NewPalette, EBRColorMigrationMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerMigrateColorsInPalette");

	Params::BRServerSettingsManagerComponent_ServerMigrateColorsInPalette Parms{};

	Parms.OldPalette = std::move(OldPalette);
	Parms.NewPalette = std::move(NewPalette);
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerRemoveColorPalette
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerRemoveColorPalette(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerRemoveColorPalette");

	Params::BRServerSettingsManagerComponent_ServerRemoveColorPalette Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerReorderRoles
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    RoleToMove                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoleToMoveAfter                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerReorderRoles(const class FString& RoleToMove, const class FString& RoleToMoveAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerReorderRoles");

	Params::BRServerSettingsManagerComponent_ServerReorderRoles Parms{};

	Parms.RoleToMove = std::move(RoleToMove);
	Parms.RoleToMoveAfter = std::move(RoleToMoveAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerSetColorPalette
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRColorPaletteData&       Data                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerSetColorPalette(const struct FBRColorPaletteData& Data, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerSetColorPalette");

	Params::BRServerSettingsManagerComponent_ServerSetColorPalette Parms{};

	Parms.Data = std::move(Data);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsManagerComponent.ServerSetHasRole
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Role                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHas                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsManagerComponent::ServerSetHasRole(class ABRPlayerState* PlayerState, const class FString& Role, bool bHas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsManagerComponent", "ServerSetHasRole");

	Params::BRServerSettingsManagerComponent_ServerSetHasRole Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Role = std::move(Role);
	Parms.bHas = bHas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridActor.GetBrickGrid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* ABrickGridActor::GetBrickGrid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridActor", "GetBrickGrid");

	Params::BrickGridActor_GetBrickGrid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.ContainsPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::ContainsPoint(const struct FIntVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGridComponent", "ContainsPoint");

	Params::BrickGridComponent_ContainsPoint Parms{};

	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.BulkInsertOrDeleteBricks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FBrickHandle>&      BrickHandles                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EBrickInsertFlags                       Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickGridComponent::BulkInsertOrDeleteBricks(const TArray<struct FBrickHandle>& BrickHandles, EBrickInsertFlags Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "BulkInsertOrDeleteBricks");

	Params::BrickGridComponent_BulkInsertOrDeleteBricks Parms{};

	Parms.BrickHandles = std::move(BrickHandles);
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.BulkRemoveAndDeleteBricks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FBrickHandle>&      BrickHandles                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickGridComponent::BulkRemoveAndDeleteBricks(const TArray<struct FBrickHandle>& BrickHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "BulkRemoveAndDeleteBricks");

	Params::BrickGridComponent_BulkRemoveAndDeleteBricks Parms{};

	Parms.BrickHandles = std::move(BrickHandles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridComponent.ClearAndDeleteBricks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickGridComponent::ClearAndDeleteBricks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "ClearAndDeleteBricks");

	Params::BrickGridComponent_ClearAndDeleteBricks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.ClearAndDeleteBricksByUser
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   UserId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickGridComponent::ClearAndDeleteBricksByUser(const struct FBRGuid& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "ClearAndDeleteBricksByUser");

	Params::BrickGridComponent_ClearAndDeleteBricksByUser Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.CollectAllBricks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FBrickHandle>*            OutBrickHandles                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBrickGridComponent::CollectAllBricks(TArray<struct FBrickHandle>* OutBrickHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "CollectAllBricks");

	Params::BrickGridComponent_CollectAllBricks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrickHandles != nullptr)
		*OutBrickHandles = std::move(Parms.OutBrickHandles);
}


// Function Brickadia.BrickGridComponent.CollectAllBricksForOwner
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FBrickHandle>*            OutBrickHandles                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   Owner                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridComponent::CollectAllBricksForOwner(TArray<struct FBrickHandle>* OutBrickHandles, const struct FBRGuid& Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "CollectAllBricksForOwner");

	Params::BrickGridComponent_CollectAllBricksForOwner Parms{};

	Parms.Owner = std::move(Owner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrickHandles != nullptr)
		*OutBrickHandles = std::move(Parms.OutBrickHandles);
}


// Function Brickadia.BrickGridComponent.CollectAllBricksForOwnerInRegion
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FBrickHandle>*            OutBrickHandles                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FBRGuid&                   Owner                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntBox&                   Range                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBrickGridComponent::CollectAllBricksForOwnerInRegion(TArray<struct FBrickHandle>* OutBrickHandles, const struct FBRGuid& Owner, const struct FIntBox& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "CollectAllBricksForOwnerInRegion");

	Params::BrickGridComponent_CollectAllBricksForOwnerInRegion Parms{};

	Parms.Owner = std::move(Owner);
	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrickHandles != nullptr)
		*OutBrickHandles = std::move(Parms.OutBrickHandles);
}


// Function Brickadia.BrickGridComponent.GetBrickAndComponentCount
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32*                                  OutBricks                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutComponents                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridComponent::GetBrickAndComponentCount(int32* OutBricks, int32* OutComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetBrickAndComponentCount");

	Params::BrickGridComponent_GetBrickAndComponentCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBricks != nullptr)
		*OutBricks = Parms.OutBricks;

	if (OutComponents != nullptr)
		*OutComponents = Parms.OutComponents;
}


// Function Brickadia.BrickGridComponent.GetBrickCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickGridComponent::GetBrickCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetBrickCount");

	Params::BrickGridComponent_GetBrickCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.InsertOrDeleteBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickInsertFlags                       Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::InsertOrDeleteBrick(const struct FBrickHandle& BrickHandle, EBrickInsertFlags Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "InsertOrDeleteBrick");

	Params::BrickGridComponent_InsertOrDeleteBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.PrintChunkReport
// (Final, Native, Public, BlueprintCallable)

void UBrickGridComponent::PrintChunkReport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "PrintChunkReport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridComponent.PropagateCustomDepthSettings
// (Final, Native, Public, BlueprintCallable)

void UBrickGridComponent::PropagateCustomDepthSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "PropagateCustomDepthSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridComponent.RemoveAndDeleteBrick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::RemoveAndDeleteBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "RemoveAndDeleteBrick");

	Params::BrickGridComponent_RemoveAndDeleteBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.SetChunkOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::SetChunkOffset(const struct FIntVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "SetChunkOffset");

	Params::BrickGridComponent_SetChunkOffset Parms{};

	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.SetChunkSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::SetChunkSize(int32 Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "SetChunkSize");

	Params::BrickGridComponent_SetChunkSize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.SetInstancing
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                Counts                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridComponent::SetInstancing(const struct FIntVector& Offset, const struct FIntVector& Counts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "SetInstancing");

	Params::BrickGridComponent_SetInstancing Parms{};

	Parms.Offset = std::move(Offset);
	Parms.Counts = std::move(Counts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridComponent.BrickBoxSearchMulti
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FBrickHandle>*            Results                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FIntBox&                   Range                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bRequireContains                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxResults                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridComponent::BrickBoxSearchMulti(TArray<struct FBrickHandle>* Results, const struct FIntBox& Range, bool bRequireContains, int32 MaxResults) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "BrickBoxSearchMulti");

	Params::BrickGridComponent_BrickBoxSearchMulti Parms{};

	Parms.Range = std::move(Range);
	Parms.bRequireContains = bRequireContains;
	Parms.MaxResults = MaxResults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function Brickadia.BrickGridComponent.BrickBoxSearchSingle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FIntBox&                   Range                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bRequireContains                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle UBrickGridComponent::BrickBoxSearchSingle(const struct FIntBox& Range, bool bRequireContains) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "BrickBoxSearchSingle");

	Params::BrickGridComponent_BrickBoxSearchSingle Parms{};

	Parms.Range = std::move(Range);
	Parms.bRequireContains = bRequireContains;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.CanInsertBrick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickInsertFlags                       Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::CanInsertBrick(const struct FBrickHandle& BrickHandle, EBrickInsertFlags Flags_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "CanInsertBrick");

	Params::BrickGridComponent_CanInsertBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.CanInsertBrickType
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBrickType*                 Type                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickInsertFlags                       Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FBrickHandle>&      IgnoredBricks                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::CanInsertBrickType(const class UBrickType* Type, const struct FIntVector& position, EBrickOrientation Orientation, EBrickInsertFlags Flags_0, const TArray<struct FBrickHandle>& IgnoredBricks) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "CanInsertBrickType");

	Params::BrickGridComponent_CanInsertBrickType Parms{};

	Parms.Type = Type;
	Parms.position = std::move(position);
	Parms.Orientation = Orientation;
	Parms.Flags_0 = Flags_0;
	Parms.IgnoredBricks = std::move(IgnoredBricks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.GetChunkOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FIntVector                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FIntVector UBrickGridComponent::GetChunkOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetChunkOffset");

	Params::BrickGridComponent_GetChunkOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.GetChunkSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickGridComponent::GetChunkSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetChunkSize");

	Params::BrickGridComponent_GetChunkSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.GetInstancing
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector*                      OutOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutCounts                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickGridComponent::GetInstancing(struct FIntVector* OutOffset, struct FIntVector* OutCounts) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetInstancing");

	Params::BrickGridComponent_GetInstancing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOffset != nullptr)
		*OutOffset = std::move(Parms.OutOffset);

	if (OutCounts != nullptr)
		*OutCounts = std::move(Parms.OutCounts);
}


// Function Brickadia.BrickGridComponent.GetRowInstancingOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickGridComponent::GetRowInstancingOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "GetRowInstancingOffset");

	Params::BrickGridComponent_GetRowInstancingOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridComponent.IsModificationAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickGridComponent::IsModificationAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridComponent", "IsModificationAllowed");

	Params::BrickGridComponent_IsModificationAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.Audio_AlignmentMode_Change
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBRPlacerAlignmentModeBase*       NewAlignmentMode                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_AlignmentMode_Change(class UBRPlacerAlignmentModeBase* NewAlignmentMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_AlignmentMode_Change");

	Params::BRTool_Placer_Audio_AlignmentMode_Change Parms{};

	Parms.NewAlignmentMode = NewAlignmentMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_ControlMode_Change
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBRPlacerControlModeBase*         NewControlMode                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_ControlMode_Change(class UBRPlacerControlModeBase* NewControlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_ControlMode_Change");

	Params::BRTool_Placer_Audio_ControlMode_Change Parms{};

	Parms.NewControlMode = NewControlMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_KeyboardMode_MoveBrick
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   OldLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRepeating                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_KeyboardMode_MoveBrick(const struct FVector& OldLocation, const struct FVector& NewLocation, bool bIsRepeating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_KeyboardMode_MoveBrick");

	Params::BRTool_Placer_Audio_KeyboardMode_MoveBrick Parms{};

	Parms.OldLocation = std::move(OldLocation);
	Parms.NewLocation = std::move(NewLocation);
	Parms.bIsRepeating = bIsRepeating;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_KeyboardMode_StateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// EBRPlacerKeyboardModeState              OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRPlacerKeyboardModeState              NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_KeyboardMode_StateChange(EBRPlacerKeyboardModeState OldState, EBRPlacerKeyboardModeState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_KeyboardMode_StateChange");

	Params::BRTool_Placer_Audio_KeyboardMode_StateChange Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Float_ChangeDistance
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Mouse_Float_ChangeDistance(int32 NewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Float_ChangeDistance");

	Params::BRTool_Placer_Audio_Mouse_Float_ChangeDistance Parms{};

	Parms.NewDistance = NewDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Float_Start
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   StartingDistance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Mouse_Float_Start(int32 StartingDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Float_Start");

	Params::BRTool_Placer_Audio_Mouse_Float_Start Parms{};

	Parms.StartingDistance = StartingDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Float_Stop
// (Event, Public, BlueprintEvent)

void ABRTool_Placer::Audio_Mouse_Float_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Float_Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Locking_ChangeDistance
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Mouse_Locking_ChangeDistance(int32 NewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Locking_ChangeDistance");

	Params::BRTool_Placer_Audio_Mouse_Locking_ChangeDistance Parms{};

	Parms.NewDistance = NewDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Locking_Start
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   StartingDistance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Mouse_Locking_Start(int32 StartingDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Locking_Start");

	Params::BRTool_Placer_Audio_Mouse_Locking_Start Parms{};

	Parms.StartingDistance = StartingDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_Locking_Stop
// (Event, Public, BlueprintEvent)

void ABRTool_Placer::Audio_Mouse_Locking_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_Locking_Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Placer.Audio_Mouse_StateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// EBRPlacerMouseModeState                 OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRPlacerMouseModeState                 NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Mouse_StateChange(EBRPlacerMouseModeState OldState, EBRPlacerMouseModeState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Mouse_StateChange");

	Params::BRTool_Placer_Audio_Mouse_StateChange Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_PlacementMode_Change
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBRPlacerPlacementModeBase*       NewPlacementMode                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_PlacementMode_Change(class UBRPlacerPlacementModeBase* NewPlacementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_PlacementMode_Change");

	Params::BRTool_Placer_Audio_PlacementMode_Change Parms{};

	Parms.NewPlacementMode = NewPlacementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Placing_ChangePlacementSize
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FIntVector&                NewPlacementSize                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              ChangedAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Placing_ChangePlacementSize(const struct FIntVector& NewPlacementSize, EBrickAxis ChangedAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Placing_ChangePlacementSize");

	Params::BRTool_Placer_Audio_Placing_ChangePlacementSize Parms{};

	Parms.NewPlacementSize = std::move(NewPlacementSize);
	Parms.ChangedAxis = ChangedAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Placing_ChangePlacementSpacing
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FIntVector&                NewPlacementSpacing                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              ChangedSpacingAxis                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Placing_ChangePlacementSpacing(const struct FIntVector& NewPlacementSpacing, EBrickAxis ChangedSpacingAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Placing_ChangePlacementSpacing");

	Params::BRTool_Placer_Audio_Placing_ChangePlacementSpacing Parms{};

	Parms.NewPlacementSpacing = std::move(NewPlacementSpacing);
	Parms.ChangedSpacingAxis = ChangedSpacingAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Placing_Commit
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   PlacementStartBrickPos                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PlacementEndBrickPos                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                PlacementBounds                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Placing_Commit(const struct FVector& PlacementStartBrickPos, const struct FVector& PlacementEndBrickPos, const struct FIntVector& PlacementBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Placing_Commit");

	Params::BRTool_Placer_Audio_Placing_Commit Parms{};

	Parms.PlacementStartBrickPos = std::move(PlacementStartBrickPos);
	Parms.PlacementEndBrickPos = std::move(PlacementEndBrickPos);
	Parms.PlacementBounds = std::move(PlacementBounds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_Placing_Start
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_Placing_Start(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_Placing_Start");

	Params::BRTool_Placer_Audio_Placing_Start Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_ReorientBrick
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         OldDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         NewDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_ReorientBrick(const struct FVector& Location, EBrickDirection OldDirection, EBrickDirection NewDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_ReorientBrick");

	Params::BRTool_Placer_Audio_ReorientBrick Parms{};

	Parms.Location = std::move(Location);
	Parms.OldDirection = OldDirection;
	Parms.NewDirection = NewDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.Audio_RotateBrick
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       OldOrientation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              AboutAxis                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRepeating                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Audio_RotateBrick(const struct FVector& Location, EBrickOrientation OldOrientation, EBrickAxis AboutAxis, bool bIsRepeating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Audio_RotateBrick");

	Params::BRTool_Placer_Audio_RotateBrick Parms{};

	Parms.Location = std::move(Location);
	Parms.OldOrientation = OldOrientation;
	Parms.AboutAxis = AboutAxis;
	Parms.bIsRepeating = bIsRepeating;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.OnCurrentBrickGridDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::OnCurrentBrickGridDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "OnCurrentBrickGridDestroyed");

	Params::BRTool_Placer_OnCurrentBrickGridDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.ServerPlaceAsPhysics
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ABRTool_Placer::ServerPlaceAsPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "ServerPlaceAsPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.ServerPlaceCurrentTemplateVolume
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// const struct FBRPlacementContext&       Context                                                (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   JointStartPosition                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSize                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSpacing                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSize                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSigns                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithPhysics                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::ServerPlaceCurrentTemplateVolume(const struct FBRPlacementContext& Context, const struct FIntVector& position, const struct FVector& JointStartPosition, EBrickOrientation Orientation, const struct FIntVector& InstanceSize, const struct FIntVector& InstanceSpacing, const struct FIntVector& VolumeSize, const struct FIntVector& VolumeSigns, bool bWithPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "ServerPlaceCurrentTemplateVolume");

	Params::BRTool_Placer_ServerPlaceCurrentTemplateVolume Parms{};

	Parms.Context = std::move(Context);
	Parms.position = std::move(position);
	Parms.JointStartPosition = std::move(JointStartPosition);
	Parms.Orientation = Orientation;
	Parms.InstanceSize = std::move(InstanceSize);
	Parms.InstanceSpacing = std::move(InstanceSpacing);
	Parms.VolumeSize = std::move(VolumeSize);
	Parms.VolumeSigns = std::move(VolumeSigns);
	Parms.bWithPhysics = bWithPhysics;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.ServerPlaceSimpleBrickVolume
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// const struct FBRPlacementContext&       Context                                                (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FBrickTypeNetWrapper&      BrickType                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    ColorAndAlpha                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   JointStartPosition                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSize                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSpacing                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSize                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSigns                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::ServerPlaceSimpleBrickVolume(const struct FBRPlacementContext& Context, const struct FBrickTypeNetWrapper& BrickType, const struct FColor& ColorAndAlpha, int32 MaterialIndex, const struct FIntVector& position, const struct FVector& JointStartPosition, EBrickOrientation Orientation, const struct FIntVector& InstanceSize, const struct FIntVector& InstanceSpacing, const struct FIntVector& VolumeSize, const struct FIntVector& VolumeSigns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "ServerPlaceSimpleBrickVolume");

	Params::BRTool_Placer_ServerPlaceSimpleBrickVolume Parms{};

	Parms.Context = std::move(Context);
	Parms.BrickType = std::move(BrickType);
	Parms.ColorAndAlpha = std::move(ColorAndAlpha);
	Parms.MaterialIndex = MaterialIndex;
	Parms.position = std::move(position);
	Parms.JointStartPosition = std::move(JointStartPosition);
	Parms.Orientation = Orientation;
	Parms.InstanceSize = std::move(InstanceSize);
	Parms.InstanceSpacing = std::move(InstanceSpacing);
	Parms.VolumeSize = std::move(VolumeSize);
	Parms.VolumeSigns = std::move(VolumeSigns);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.ServerPlaceSimpleEntityVolume
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// const struct FBRPlacementContext&       Context                                                (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UBREntityTypeBase*                EntityType                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    ColorAndAlpha                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   JointStartPosition                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSize                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                InstanceSpacing                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSize                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                VolumeSigns                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::ServerPlaceSimpleEntityVolume(const struct FBRPlacementContext& Context, class UBREntityTypeBase* EntityType, const struct FColor& ColorAndAlpha, const struct FIntVector& position, const struct FVector& JointStartPosition, EBrickOrientation Orientation, const struct FIntVector& InstanceSize, const struct FIntVector& InstanceSpacing, const struct FIntVector& VolumeSize, const struct FIntVector& VolumeSigns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "ServerPlaceSimpleEntityVolume");

	Params::BRTool_Placer_ServerPlaceSimpleEntityVolume Parms{};

	Parms.Context = std::move(Context);
	Parms.EntityType = EntityType;
	Parms.ColorAndAlpha = std::move(ColorAndAlpha);
	Parms.position = std::move(position);
	Parms.JointStartPosition = std::move(JointStartPosition);
	Parms.Orientation = Orientation;
	Parms.InstanceSize = std::move(InstanceSize);
	Parms.InstanceSpacing = std::move(InstanceSpacing);
	Parms.VolumeSize = std::move(VolumeSize);
	Parms.VolumeSigns = std::move(VolumeSigns);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchAlignmentMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewAlignmentMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::SwitchAlignmentMode(class FName NewAlignmentMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchAlignmentMode");

	Params::BRTool_Placer_SwitchAlignmentMode Parms{};

	Parms.NewAlignmentMode = NewAlignmentMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchAlignmentMode_Default
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Placer::SwitchAlignmentMode_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchAlignmentMode_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchControlMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewControlMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::SwitchControlMode(class FName NewControlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchControlMode");

	Params::BRTool_Placer_SwitchControlMode Parms{};

	Parms.NewControlMode = NewControlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchControlMode_Default
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Placer::SwitchControlMode_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchControlMode_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchPlacementMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewPlacementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::SwitchPlacementMode(class FName NewPlacementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchPlacementMode");

	Params::BRTool_Placer_SwitchPlacementMode Parms{};

	Parms.NewPlacementMode = NewPlacementMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.SwitchPlacementMode_Default
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Placer::SwitchPlacementMode_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "SwitchPlacementMode_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Placer.Visuals_ChangeScreen
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UThumbnailProcessor>  ThumbnailProcessor                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ThumbnailObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Placer::Visuals_ChangeScreen(TSubclassOf<class UThumbnailProcessor> ThumbnailProcessor, class UObject* ThumbnailObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "Visuals_ChangeScreen");

	Params::BRTool_Placer_Visuals_ChangeScreen Parms{};

	Parms.ThumbnailProcessor = ThumbnailProcessor;
	Parms.ThumbnailObject = ThumbnailObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Placer.GetAlignmentModes_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class UBRPlacerAlignmentModeBase*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TMap<class FName, class UBRPlacerAlignmentModeBase*> ABRTool_Placer::GetAlignmentModes_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetAlignmentModes_BP");

	Params::BRTool_Placer_GetAlignmentModes_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetControlModes_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class UBRPlacerControlModeBase*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TMap<class FName, class UBRPlacerControlModeBase*> ABRTool_Placer::GetControlModes_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetControlModes_BP");

	Params::BRTool_Placer_GetControlModes_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetCurrentAlignmentMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlacerAlignmentModeBase*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlacerAlignmentModeBase* ABRTool_Placer::GetCurrentAlignmentMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetCurrentAlignmentMode");

	Params::BRTool_Placer_GetCurrentAlignmentMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetCurrentControlMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlacerControlModeBase*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlacerControlModeBase* ABRTool_Placer::GetCurrentControlMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetCurrentControlMode");

	Params::BRTool_Placer_GetCurrentControlMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetCurrentPivots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBrickPlacementPivots            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBrickPlacementPivots ABRTool_Placer::GetCurrentPivots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetCurrentPivots");

	Params::BRTool_Placer_GetCurrentPivots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetCurrentPlacementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlacerPlacementModeBase*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlacerPlacementModeBase* ABRTool_Placer::GetCurrentPlacementMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetCurrentPlacementMode");

	Params::BRTool_Placer_GetCurrentPlacementMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetPlacementAudioLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABRTool_Placer::GetPlacementAudioLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetPlacementAudioLocation");

	Params::BRTool_Placer_GetPlacementAudioLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Placer.GetPlacementModes_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class UBRPlacerPlacementModeBase*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TMap<class FName, class UBRPlacerPlacementModeBase*> ABRTool_Placer::GetPlacementModes_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Placer", "GetPlacementModes_BP");

	Params::BRTool_Placer_GetPlacementModes_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.CompressMaterialAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   MaterialAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UBrickInstanceStatics::CompressMaterialAlpha(uint8 MaterialAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "CompressMaterialAlpha");

	Params::BrickInstanceStatics_CompressMaterialAlpha Parms{};

	Parms.MaterialAlpha = MaterialAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.DecompressMaterialAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   MaterialAlphaCompressed                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UBrickInstanceStatics::DecompressMaterialAlpha(uint8 MaterialAlphaCompressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "DecompressMaterialAlpha");

	Params::BrickInstanceStatics_DecompressMaterialAlpha Parms{};

	Parms.MaterialAlphaCompressed = MaterialAlphaCompressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.EqualEqual_BrickHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::EqualEqual_BrickHandle(const struct FBrickHandle& A, const struct FBrickHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "EqualEqual_BrickHandle");

	Params::BrickInstanceStatics_EqualEqual_BrickHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.EqualEqual_BrickPersistentHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickPersistentHandle&    A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickPersistentHandle&    B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::EqualEqual_BrickPersistentHandle(const struct FBrickPersistentHandle& A, const struct FBrickPersistentHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "EqualEqual_BrickPersistentHandle");

	Params::BrickInstanceStatics_EqualEqual_BrickPersistentHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.FindOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* UBrickInstanceStatics::FindOwner(const class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "FindOwner");

	Params::BrickInstanceStatics_FindOwner Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetBasicBrick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicBrick*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBasicBrick* UBrickInstanceStatics::GetBasicBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetBasicBrick");

	Params::BrickInstanceStatics_GetBasicBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetBrickAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickAsset*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickAsset* UBrickInstanceStatics::GetBrickAsset(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetBrickAsset");

	Params::BrickInstanceStatics_GetBrickAsset Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetBrickGrid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* UBrickInstanceStatics::GetBrickGrid(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetBrickGrid");

	Params::BrickInstanceStatics_GetBrickGrid Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetBrickOwnerData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickOwnerData                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBrickOwnerData UBrickInstanceStatics::GetBrickOwnerData(const class UObject* WorldContextObject, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetBrickOwnerData");

	Params::BrickInstanceStatics_GetBrickOwnerData Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetBrickType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBrickInstanceStatics::GetBrickType(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetBrickType");

	Params::BrickInstanceStatics_GetBrickType Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::GetCollisionChannel(const struct FBrickHandle& BrickHandle, EBrickCollisionChannels Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetCollisionChannel");

	Params::BrickInstanceStatics_GetCollisionChannel Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetCollisionChannels
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickCollisionChannels UBrickInstanceStatics::GetCollisionChannels(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetCollisionChannels");

	Params::BrickInstanceStatics_GetCollisionChannels Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBrickInstanceStatics::GetColor(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetColor");

	Params::BrickInstanceStatics_GetColor Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetColorAndAlpha
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBrickInstanceStatics::GetColorAndAlpha(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetColorAndAlpha");

	Params::BrickInstanceStatics_GetColorAndAlpha Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickInstanceStatics::GetDirection(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetDirection");

	Params::BrickInstanceStatics_GetDirection Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetHalfSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickInstanceStatics::GetHalfSize(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetHalfSize");

	Params::BrickInstanceStatics_GetHalfSize Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetIntBox
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickInstanceStatics::GetIntBox(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetIntBox");

	Params::BrickInstanceStatics_GetIntBox Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetMaterialAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UBrickInstanceStatics::GetMaterialAlpha(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetMaterialAlpha");

	Params::BrickInstanceStatics_GetMaterialAlpha Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetMaterialIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickInstanceStatics::GetMaterialIndex(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetMaterialIndex");

	Params::BrickInstanceStatics_GetMaterialIndex Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickInstanceStatics::GetOrientation(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetOrientation");

	Params::BrickInstanceStatics_GetOrientation Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetOwnerId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickInstanceStatics::GetOwnerId(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetOwnerId");

	Params::BrickInstanceStatics_GetOwnerId Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetPosition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickInstanceStatics::GetPosition(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetPosition");

	Params::BrickInstanceStatics_GetPosition Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetProceduralBrick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UProceduralBrick*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProceduralBrick* UBrickInstanceStatics::GetProceduralBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetProceduralBrick");

	Params::BrickInstanceStatics_GetProceduralBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetRotatedHalfSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickInstanceStatics::GetRotatedHalfSize(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetRotatedHalfSize");

	Params::BrickInstanceStatics_GetRotatedHalfSize Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetRotation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickRotation UBrickInstanceStatics::GetRotation(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetRotation");

	Params::BrickInstanceStatics_GetRotation Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetSelectionLayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickSelectionLayers                   Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::GetSelectionLayer(const struct FBrickHandle& BrickHandle, EBrickSelectionLayers Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetSelectionLayer");

	Params::BrickInstanceStatics_GetSelectionLayer Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetSelectionLayers
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickSelectionLayers                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickSelectionLayers UBrickInstanceStatics::GetSelectionLayers(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetSelectionLayers");

	Params::BrickInstanceStatics_GetSelectionLayers Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetSpawnTransformAboveBrick
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CharacterHalfHeight                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBrickInstanceStatics::GetSpawnTransformAboveBrick(const struct FBrickHandle& BrickHandle, float CharacterHalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetSpawnTransformAboveBrick");

	Params::BrickInstanceStatics_GetSpawnTransformAboveBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.CharacterHalfHeight = CharacterHalfHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.GetVisibility
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::GetVisibility(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "GetVisibility");

	Params::BrickInstanceStatics_GetVisibility Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.HasTrustToModifyBrick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABRPlayerController*        Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::HasTrustToModifyBrick(const struct FBrickHandle& BrickHandle, const class ABRPlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "HasTrustToModifyBrick");

	Params::BrickInstanceStatics_HasTrustToModifyBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.IsHandleValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::IsHandleValid(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "IsHandleValid");

	Params::BrickInstanceStatics_IsHandleValid Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.IsPersistentHandleValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickPersistentHandle&    BrickPersistentHandle                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::IsPersistentHandleValid(const struct FBrickPersistentHandle& BrickPersistentHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "IsPersistentHandleValid");

	Params::BrickInstanceStatics_IsPersistentHandleValid Parms{};

	Parms.BrickPersistentHandle = std::move(BrickPersistentHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.MergeCollisionChannels
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bPlayer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWeapon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInteraction                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTool                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickCollisionChannels UBrickInstanceStatics::MergeCollisionChannels(bool bPlayer, bool bWeapon, bool bInteraction, bool bTool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "MergeCollisionChannels");

	Params::BrickInstanceStatics_MergeCollisionChannels Parms{};

	Parms.bPlayer = bPlayer;
	Parms.bWeapon = bWeapon;
	Parms.bInteraction = bInteraction;
	Parms.bTool = bTool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.NotEqual_BrickHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::NotEqual_BrickHandle(const struct FBrickHandle& A, const struct FBrickHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "NotEqual_BrickHandle");

	Params::BrickInstanceStatics_NotEqual_BrickHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.NotEqual_BrickPersistentHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickPersistentHandle&    A                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickPersistentHandle&    B                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickInstanceStatics::NotEqual_BrickPersistentHandle(const struct FBrickPersistentHandle& A, const struct FBrickPersistentHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "NotEqual_BrickPersistentHandle");

	Params::BrickInstanceStatics_NotEqual_BrickPersistentHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.QuantizeMaterialAlpha
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   MaterialAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UBrickInstanceStatics::QuantizeMaterialAlpha(uint8 MaterialAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "QuantizeMaterialAlpha");

	Params::BrickInstanceStatics_QuantizeMaterialAlpha Parms{};

	Parms.MaterialAlpha = MaterialAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.ResolvePersistentHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickPersistentHandle&    BrickPersistentHandle                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle UBrickInstanceStatics::ResolvePersistentHandle(const struct FBrickPersistentHandle& BrickPersistentHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "ResolvePersistentHandle");

	Params::BrickInstanceStatics_ResolvePersistentHandle Parms{};

	Parms.BrickPersistentHandle = std::move(BrickPersistentHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.ResolvePersistentHandleArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FBrickPersistentHandle>&BrickPersistentHandles                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FBrickHandle>*            OutHandles                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bExcludeInvalid                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::ResolvePersistentHandleArray(const TArray<struct FBrickPersistentHandle>& BrickPersistentHandles, TArray<struct FBrickHandle>* OutHandles, bool bExcludeInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "ResolvePersistentHandleArray");

	Params::BrickInstanceStatics_ResolvePersistentHandleArray Parms{};

	Parms.BrickPersistentHandles = std::move(BrickPersistentHandles);
	Parms.bExcludeInvalid = bExcludeInvalid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHandles != nullptr)
		*OutHandles = std::move(Parms.OutHandles);
}


// Function Brickadia.BrickInstanceStatics.SetBrickType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       NewBrickType                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetBrickType(const struct FBrickHandle& BrickHandle, class UBrickType* NewBrickType, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetBrickType");

	Params::BrickInstanceStatics_SetBrickType Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewBrickType = NewBrickType;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetBrickTypeFromBasicBrick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBasicBrick*                      NewBasicBrick                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetBrickTypeFromBasicBrick(const struct FBrickHandle& BrickHandle, class UBasicBrick* NewBasicBrick, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetBrickTypeFromBasicBrick");

	Params::BrickInstanceStatics_SetBrickTypeFromBasicBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewBasicBrick = NewBasicBrick;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetBrickTypeFromProceduralBrick
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UProceduralBrick*                 NewProceduralBrick                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                NewSize                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetBrickTypeFromProceduralBrick(const struct FBrickHandle& BrickHandle, class UProceduralBrick* NewProceduralBrick, const struct FIntVector& NewSize, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetBrickTypeFromProceduralBrick");

	Params::BrickInstanceStatics_SetBrickTypeFromProceduralBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewProceduralBrick = NewProceduralBrick;
	Parms.NewSize = std::move(NewSize);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetCollisionChannel(const struct FBrickHandle& BrickHandle, EBrickCollisionChannels Channel, bool bValue, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetCollisionChannel");

	Params::BrickInstanceStatics_SetCollisionChannel Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Channel = Channel;
	Parms.bValue = bValue;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetCollisionChannels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 NewCollisionChannels                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetCollisionChannels(const struct FBrickHandle& BrickHandle, EBrickCollisionChannels NewCollisionChannels, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetCollisionChannels");

	Params::BrickInstanceStatics_SetCollisionChannels Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewCollisionChannels = NewCollisionChannels;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetColor(const struct FBrickHandle& BrickHandle, const struct FColor& NewColor, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetColor");

	Params::BrickInstanceStatics_SetColor Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewColor = std::move(NewColor);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetDirection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         NewDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetDirection(const struct FBrickHandle& BrickHandle, EBrickDirection NewDirection, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetDirection");

	Params::BrickInstanceStatics_SetDirection Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewDirection = NewDirection;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetMaterialAlpha
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewMaterialAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetMaterialAlpha(const struct FBrickHandle& BrickHandle, uint8 NewMaterialAlpha, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetMaterialAlpha");

	Params::BrickInstanceStatics_SetMaterialAlpha Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewMaterialAlpha = NewMaterialAlpha;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetMaterialIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewMaterialIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetMaterialIndex(const struct FBrickHandle& BrickHandle, int32 NewMaterialIndex, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetMaterialIndex");

	Params::BrickInstanceStatics_SetMaterialIndex Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewMaterialIndex = NewMaterialIndex;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetOrientation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       NewOrientation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetOrientation(const struct FBrickHandle& BrickHandle, EBrickOrientation NewOrientation, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetOrientation");

	Params::BrickInstanceStatics_SetOrientation Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewOrientation = NewOrientation;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetOwnerId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetOwnerId(const struct FBrickHandle& BrickHandle, int32 NewId, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetOwnerId");

	Params::BrickInstanceStatics_SetOwnerId Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewId = NewId;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetPosition(const struct FBrickHandle& BrickHandle, const struct FIntVector& NewPosition, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetPosition");

	Params::BrickInstanceStatics_SetPosition Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewPosition = std::move(NewPosition);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetRotation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetRotation(const struct FBrickHandle& BrickHandle, EBrickRotation NewRotation, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetRotation");

	Params::BrickInstanceStatics_SetRotation Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewRotation = NewRotation;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetSelectionLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickSelectionLayers                   Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetSelectionLayer(const struct FBrickHandle& BrickHandle, EBrickSelectionLayers Layer, bool bValue, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetSelectionLayer");

	Params::BrickInstanceStatics_SetSelectionLayer Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Layer = Layer;
	Parms.bValue = bValue;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetSelectionLayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickSelectionLayers                   NewSelectionLayers                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetSelectionLayers(const struct FBrickHandle& BrickHandle, EBrickSelectionLayers NewSelectionLayers, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetSelectionLayers");

	Params::BrickInstanceStatics_SetSelectionLayers Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.NewSelectionLayers = NewSelectionLayers;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SetVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SetVisibility(const struct FBrickHandle& BrickHandle, bool bNewVisibility, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SetVisibility");

	Params::BrickInstanceStatics_SetVisibility Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.bNewVisibility = bNewVisibility;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickInstanceStatics.SplitCollisionChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickCollisionChannels                 CollisionChannels                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutPlayer                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutWeapon                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutInteraction                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutTool                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::SplitCollisionChannels(EBrickCollisionChannels CollisionChannels, bool* bOutPlayer, bool* bOutWeapon, bool* bOutInteraction, bool* bOutTool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "SplitCollisionChannels");

	Params::BrickInstanceStatics_SplitCollisionChannels Parms{};

	Parms.CollisionChannels = CollisionChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutPlayer != nullptr)
		*bOutPlayer = Parms.bOutPlayer;

	if (bOutWeapon != nullptr)
		*bOutWeapon = Parms.bOutWeapon;

	if (bOutInteraction != nullptr)
		*bOutInteraction = Parms.bOutInteraction;

	if (bOutTool != nullptr)
		*bOutTool = Parms.bOutTool;
}


// Function Brickadia.BrickInstanceStatics.ToPersistentHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickPersistentHandle           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickPersistentHandle UBrickInstanceStatics::ToPersistentHandle(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "ToPersistentHandle");

	Params::BrickInstanceStatics_ToPersistentHandle Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickInstanceStatics.ToPersistentHandleArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FBrickHandle>&      BrickHandles                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FBrickPersistentHandle>*  OutPersistentHandles                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bExcludeInvalid                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickInstanceStatics::ToPersistentHandleArray(const TArray<struct FBrickHandle>& BrickHandles, TArray<struct FBrickPersistentHandle>* OutPersistentHandles, bool bExcludeInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickInstanceStatics", "ToPersistentHandleArray");

	Params::BrickInstanceStatics_ToPersistentHandleArray Parms{};

	Parms.BrickHandles = std::move(BrickHandles);
	Parms.bExcludeInvalid = bExcludeInvalid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPersistentHandles != nullptr)
		*OutPersistentHandles = std::move(Parms.OutPersistentHandles);
}


// Function Brickadia.BrickMaterialCollection.GetMaterial
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickTextureGroup                      Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UBrickMaterialCollection::GetMaterial(EBrickTextureGroup Texture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickMaterialCollection", "GetMaterial");

	Params::BrickMaterialCollection_GetMaterial Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolPreviewPartBase.ApplyDisplayParameters
// (Native, Protected)

void UBRToolPreviewPartBase::ApplyDisplayParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewPartBase", "ApplyDisplayParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewPartBase.ApplyTransformParameters
// (Native, Protected)

void UBRToolPreviewPartBase::ApplyTransformParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewPartBase", "ApplyTransformParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickMathLibrary.AlignGhostBrickToHitResult
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              TargetGrid                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EBrickRotation                          DesiredRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation*                      OutOrientation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::AlignGhostBrickToHitResult(class UBrickGridComponent* TargetGrid, class UBrickType* BrickType, const struct FHitResult& HitResult, EBrickRotation DesiredRotation, struct FIntVector* OutPosition, EBrickOrientation* OutOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "AlignGhostBrickToHitResult");

	Params::BrickMathLibrary_AlignGhostBrickToHitResult Parms{};

	Parms.TargetGrid = TargetGrid;
	Parms.BrickType = BrickType;
	Parms.HitResult = std::move(HitResult);
	Parms.DesiredRotation = DesiredRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutOrientation != nullptr)
		*OutOrientation = Parms.OutOrientation;
}


// Function Brickadia.BrickMathLibrary.CheckOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickMathLibrary::CheckOrientation(EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "CheckOrientation");

	Params::BrickMathLibrary_CheckOrientation Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.CombineIntBoxes
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   BoxA                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntBox&                   BoxB                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickMathLibrary::CombineIntBoxes(const struct FIntBox& BoxA, const struct FIntBox& BoxB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "CombineIntBoxes");

	Params::BrickMathLibrary_CombineIntBoxes Parms{};

	Parms.BoxA = std::move(BoxA);
	Parms.BoxB = std::move(BoxB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.CombineIntBoxesWithLimit
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   BoxA                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntBox&                   BoxB                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntVector&                MaxExtent                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutLimitExceeded                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickMathLibrary::CombineIntBoxesWithLimit(const struct FIntBox& BoxA, const struct FIntBox& BoxB, const struct FIntVector& MaxExtent, bool* bOutLimitExceeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "CombineIntBoxesWithLimit");

	Params::BrickMathLibrary_CombineIntBoxesWithLimit Parms{};

	Parms.BoxA = std::move(BoxA);
	Parms.BoxB = std::move(BoxB);
	Parms.MaxExtent = std::move(MaxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutLimitExceeded != nullptr)
		*bOutLimitExceeded = Parms.bOutLimitExceeded;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.CombineOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::CombineOrientation(EBrickDirection Direction, EBrickRotation Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "CombineOrientation");

	Params::BrickMathLibrary_CombineOrientation Parms{};

	Parms.Direction = Direction;
	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeDesiredOrientation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickPlacementPivots&     Pivots                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EBrickDirection                         OtherStudDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAnchorType                        OtherStudType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          DesiredRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::ComputeDesiredOrientation(const struct FBrickPlacementPivots& Pivots, EBrickDirection OtherStudDirection, EBrickAnchorType OtherStudType, EBrickRotation DesiredRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeDesiredOrientation");

	Params::BrickMathLibrary_ComputeDesiredOrientation Parms{};

	Parms.Pivots = std::move(Pivots);
	Parms.OtherStudDirection = OtherStudDirection;
	Parms.OtherStudType = OtherStudType;
	Parms.DesiredRotation = DesiredRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeExpandedPivot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   Pivot                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntVector&                HalfSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox*                         OutResult                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBrickMathLibrary::ComputeExpandedPivot(const struct FIntBox& Pivot, const struct FIntVector& HalfSize, EBrickDirection Direction, struct FIntBox* OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeExpandedPivot");

	Params::BrickMathLibrary_ComputeExpandedPivot Parms{};

	Parms.Pivot = std::move(Pivot);
	Parms.HalfSize = std::move(HalfSize);
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);
}


// Function Brickadia.BrickMathLibrary.ComputeGeneralResizeDraggingStartOffset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                GridTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                CurrentCenter                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                CurrentSize                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayStart                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayEnd                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         HandleDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandleMargin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickMathLibrary::ComputeGeneralResizeDraggingStartOffset(const struct FTransform& GridTransform, const struct FIntVector& CurrentCenter, const struct FIntVector& CurrentSize, const struct FVector& RayStart, const struct FVector& RayEnd, EBrickDirection HandleDirection, float HandleMargin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGeneralResizeDraggingStartOffset");

	Params::BrickMathLibrary_ComputeGeneralResizeDraggingStartOffset Parms{};

	Parms.GridTransform = std::move(GridTransform);
	Parms.CurrentCenter = std::move(CurrentCenter);
	Parms.CurrentSize = std::move(CurrentSize);
	Parms.RayStart = std::move(RayStart);
	Parms.RayEnd = std::move(RayEnd);
	Parms.HandleDirection = HandleDirection;
	Parms.HandleMargin = HandleMargin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridAlignment3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                GridOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                GridCellSize                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                PivotExtent                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         AlignmentDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ComputeGridAlignment3D(const struct FIntVector& GridOrigin, const struct FIntVector& GridCellSize, const struct FIntVector& PivotExtent, const struct FVector& HitPosition, EBrickDirection AlignmentDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridAlignment3D");

	Params::BrickMathLibrary_ComputeGridAlignment3D Parms{};

	Parms.GridOrigin = std::move(GridOrigin);
	Parms.GridCellSize = std::move(GridCellSize);
	Parms.PivotExtent = std::move(PivotExtent);
	Parms.HitPosition = std::move(HitPosition);
	Parms.AlignmentDirection = AlignmentDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridAlignmentOffset3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                GridOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                GridCellSize                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                PivotExtent                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         AlignmentDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ComputeGridAlignmentOffset3D(const struct FIntVector& GridOrigin, const struct FIntVector& GridCellSize, const struct FIntVector& PivotExtent, const struct FVector& HitPosition, EBrickDirection AlignmentDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridAlignmentOffset3D");

	Params::BrickMathLibrary_ComputeGridAlignmentOffset3D Parms{};

	Parms.GridOrigin = std::move(GridOrigin);
	Parms.GridCellSize = std::move(GridCellSize);
	Parms.PivotExtent = std::move(PivotExtent);
	Parms.HitPosition = std::move(HitPosition);
	Parms.AlignmentDirection = AlignmentDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridOriginBelowPivot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   Pivot                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                GridCellSize                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       PivotOrientation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         BottomDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ComputeGridOriginBelowPivot(const struct FIntBox& Pivot, const struct FIntVector& position, const struct FIntVector& GridCellSize, EBrickOrientation PivotOrientation, EBrickDirection BottomDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridOriginBelowPivot");

	Params::BrickMathLibrary_ComputeGridOriginBelowPivot Parms{};

	Parms.Pivot = std::move(Pivot);
	Parms.position = std::move(position);
	Parms.GridCellSize = std::move(GridCellSize);
	Parms.PivotOrientation = PivotOrientation;
	Parms.BottomDirection = BottomDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridSideAlignment1D
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   GridCellSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PivotExtent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitCell                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::ComputeGridSideAlignment1D(int32 GridCellSize, int32 PivotExtent, float HitCell)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridSideAlignment1D");

	Params::BrickMathLibrary_ComputeGridSideAlignment1D Parms{};

	Parms.GridCellSize = GridCellSize;
	Parms.PivotExtent = PivotExtent;
	Parms.HitCell = HitCell;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridSideAlignmentOffset1D
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   GridCellSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PivotExtent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitCell                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::ComputeGridSideAlignmentOffset1D(int32 GridCellSize, int32 PivotExtent, float HitCell)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridSideAlignmentOffset1D");

	Params::BrickMathLibrary_ComputeGridSideAlignmentOffset1D Parms{};

	Parms.GridCellSize = GridCellSize;
	Parms.PivotExtent = PivotExtent;
	Parms.HitCell = HitCell;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridTopAlignment1D
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   GridCellSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitCell                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlignUp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::ComputeGridTopAlignment1D(int32 GridCellSize, float HitCell, bool bAlignUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridTopAlignment1D");

	Params::BrickMathLibrary_ComputeGridTopAlignment1D Parms{};

	Parms.GridCellSize = GridCellSize;
	Parms.HitCell = HitCell;
	Parms.bAlignUp = bAlignUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeGridTopAlignmentOffset1D
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   GridCellSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PivotExtent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitCell                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlignUp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::ComputeGridTopAlignmentOffset1D(int32 GridCellSize, int32 PivotExtent, float HitCell, bool bAlignUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeGridTopAlignmentOffset1D");

	Params::BrickMathLibrary_ComputeGridTopAlignmentOffset1D Parms{};

	Parms.GridCellSize = GridCellSize;
	Parms.PivotExtent = PivotExtent;
	Parms.HitCell = HitCell;
	Parms.bAlignUp = bAlignUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeOptimalGridFromHitResult
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UBrickGridComponent**             OutBrickGrid                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutGridOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutGridCellSize                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutStudDirection                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAnchorType*                       OutStudType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutHitStuds                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::ComputeOptimalGridFromHitResult(const class UObject* WorldContextObject, const struct FHitResult& HitResult, class UBrickGridComponent** OutBrickGrid, struct FIntVector* OutGridOrigin, struct FIntVector* OutGridCellSize, EBrickDirection* OutStudDirection, EBrickAnchorType* OutStudType, bool* bOutHitStuds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeOptimalGridFromHitResult");

	Params::BrickMathLibrary_ComputeOptimalGridFromHitResult Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrickGrid != nullptr)
		*OutBrickGrid = Parms.OutBrickGrid;

	if (OutGridOrigin != nullptr)
		*OutGridOrigin = std::move(Parms.OutGridOrigin);

	if (OutGridCellSize != nullptr)
		*OutGridCellSize = std::move(Parms.OutGridCellSize);

	if (OutStudDirection != nullptr)
		*OutStudDirection = Parms.OutStudDirection;

	if (OutStudType != nullptr)
		*OutStudType = Parms.OutStudType;

	if (bOutHitStuds != nullptr)
		*bOutHitStuds = Parms.bOutHitStuds;
}


// Function Brickadia.BrickMathLibrary.ComputeOptimalGridFromStudGroup
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBrickStudGroup&           Studs                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntVector&                BrickPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       BrickOrientation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutGridOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutGridCellSize                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutStudDirection                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAnchorType*                       OutStudType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::ComputeOptimalGridFromStudGroup(const struct FBrickStudGroup& Studs, const struct FIntVector& BrickPosition, EBrickOrientation BrickOrientation, struct FIntVector* OutGridOrigin, struct FIntVector* OutGridCellSize, EBrickDirection* OutStudDirection, EBrickAnchorType* OutStudType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeOptimalGridFromStudGroup");

	Params::BrickMathLibrary_ComputeOptimalGridFromStudGroup Parms{};

	Parms.Studs = std::move(Studs);
	Parms.BrickPosition = std::move(BrickPosition);
	Parms.BrickOrientation = BrickOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGridOrigin != nullptr)
		*OutGridOrigin = std::move(Parms.OutGridOrigin);

	if (OutGridCellSize != nullptr)
		*OutGridCellSize = std::move(Parms.OutGridCellSize);

	if (OutStudDirection != nullptr)
		*OutStudDirection = Parms.OutStudDirection;

	if (OutStudType != nullptr)
		*OutStudType = Parms.OutStudType;
}


// Function Brickadia.BrickMathLibrary.ComputePivotForStudGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickStudGroup&           Studs                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FIntBox*                         OutPivot                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::ComputePivotForStudGroup(const struct FBrickStudGroup& Studs, struct FIntBox* OutPivot, EBrickDirection* OutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputePivotForStudGroup");

	Params::BrickMathLibrary_ComputePivotForStudGroup Parms{};

	Parms.Studs = std::move(Studs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPivot != nullptr)
		*OutPivot = std::move(Parms.OutPivot);

	if (OutDirection != nullptr)
		*OutDirection = Parms.OutDirection;
}


// Function Brickadia.BrickMathLibrary.ComputePivotsForBrickType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickPlacementPivots            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBrickPlacementPivots UBrickMathLibrary::ComputePivotsForBrickType(class UBrickType* BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputePivotsForBrickType");

	Params::BrickMathLibrary_ComputePivotsForBrickType Parms{};

	Parms.BrickType = BrickType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputePivotsForEntity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickPlacementPivots            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBrickPlacementPivots UBrickMathLibrary::ComputePivotsForEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputePivotsForEntity");

	Params::BrickMathLibrary_ComputePivotsForEntity Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputePivotsForEntityType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBREntityTypeBase*                EntityType                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickPlacementPivots            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBrickPlacementPivots UBrickMathLibrary::ComputePivotsForEntityType(class UBREntityTypeBase* EntityType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputePivotsForEntityType");

	Params::BrickMathLibrary_ComputePivotsForEntityType Parms{};

	Parms.EntityType = EntityType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeRowDragging
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                GridTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   GridRelativeRoot                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldRayStart                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldRayDirection                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedPivotExtent                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedSpacing                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedDragCellExtent                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowXAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowYAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowZAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutRowDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutRowLength                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickMathLibrary::ComputeRowDragging(const struct FTransform& GridTransform, const struct FVector& GridRelativeRoot, const struct FVector& WorldRayStart, const struct FVector& WorldRayDirection, const struct FIntVector& OrientedPivotExtent, const struct FIntVector& OrientedSpacing, const struct FIntVector& OrientedDragCellExtent, bool bAllowXAxis, bool bAllowYAxis, bool bAllowZAxis, EBrickDirection* OutRowDirection, int32* OutRowLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeRowDragging");

	Params::BrickMathLibrary_ComputeRowDragging Parms{};

	Parms.GridTransform = std::move(GridTransform);
	Parms.GridRelativeRoot = std::move(GridRelativeRoot);
	Parms.WorldRayStart = std::move(WorldRayStart);
	Parms.WorldRayDirection = std::move(WorldRayDirection);
	Parms.OrientedPivotExtent = std::move(OrientedPivotExtent);
	Parms.OrientedSpacing = std::move(OrientedSpacing);
	Parms.OrientedDragCellExtent = std::move(OrientedDragCellExtent);
	Parms.bAllowXAxis = bAllowXAxis;
	Parms.bAllowYAxis = bAllowYAxis;
	Parms.bAllowZAxis = bAllowZAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRowDirection != nullptr)
		*OutRowDirection = Parms.OutRowDirection;

	if (OutRowLength != nullptr)
		*OutRowLength = Parms.OutRowLength;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeRowDraggingV2
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class APlayerController*          PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                GridTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   GridRelativeRoot                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldRayStart                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldRayDirection                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedPivotExtent                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedSpacing                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedDragCellExtent                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowXAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowYAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowZAxis                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutRowDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutRowLength                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickMathLibrary::ComputeRowDraggingV2(const class APlayerController* PlayerController, const struct FTransform& GridTransform, const struct FVector& GridRelativeRoot, const struct FVector& WorldRayStart, const struct FVector& WorldRayDirection, const struct FVector2D& ScreenPosition, const struct FIntVector& OrientedPivotExtent, const struct FIntVector& OrientedSpacing, const struct FIntVector& OrientedDragCellExtent, bool bAllowXAxis, bool bAllowYAxis, bool bAllowZAxis, EBrickDirection* OutRowDirection, int32* OutRowLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeRowDraggingV2");

	Params::BrickMathLibrary_ComputeRowDraggingV2 Parms{};

	Parms.PlayerController = PlayerController;
	Parms.GridTransform = std::move(GridTransform);
	Parms.GridRelativeRoot = std::move(GridRelativeRoot);
	Parms.WorldRayStart = std::move(WorldRayStart);
	Parms.WorldRayDirection = std::move(WorldRayDirection);
	Parms.ScreenPosition = std::move(ScreenPosition);
	Parms.OrientedPivotExtent = std::move(OrientedPivotExtent);
	Parms.OrientedSpacing = std::move(OrientedSpacing);
	Parms.OrientedDragCellExtent = std::move(OrientedDragCellExtent);
	Parms.bAllowXAxis = bAllowXAxis;
	Parms.bAllowYAxis = bAllowYAxis;
	Parms.bAllowZAxis = bAllowZAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRowDirection != nullptr)
		*OutRowDirection = Parms.OutRowDirection;

	if (OutRowLength != nullptr)
		*OutRowLength = Parms.OutRowLength;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ComputeRowEndPositions
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                OriginPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedPivotExtent                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedSpacing                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                OrientedDragCellExtent                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         RowDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RowLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutRowStartPosition                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutRowEndPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::ComputeRowEndPositions(const struct FIntVector& OriginPosition, const struct FIntVector& OrientedPivotExtent, const struct FIntVector& OrientedSpacing, const struct FIntVector& OrientedDragCellExtent, EBrickDirection RowDirection, int32 RowLength, struct FIntVector* OutRowStartPosition, struct FIntVector* OutRowEndPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ComputeRowEndPositions");

	Params::BrickMathLibrary_ComputeRowEndPositions Parms{};

	Parms.OriginPosition = std::move(OriginPosition);
	Parms.OrientedPivotExtent = std::move(OrientedPivotExtent);
	Parms.OrientedSpacing = std::move(OrientedSpacing);
	Parms.OrientedDragCellExtent = std::move(OrientedDragCellExtent);
	Parms.RowDirection = RowDirection;
	Parms.RowLength = RowLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRowStartPosition != nullptr)
		*OutRowStartPosition = std::move(Parms.OutRowStartPosition);

	if (OutRowEndPosition != nullptr)
		*OutRowEndPosition = std::move(Parms.OutRowEndPosition);
}


// Function Brickadia.BrickMathLibrary.FindOptimalPlacement
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              TargetGrid                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitNormal                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::FindOptimalPlacement(class UBrickGridComponent* TargetGrid, class UBrickType* BrickType, EBrickDirection Direction, EBrickRotation Rotation, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "FindOptimalPlacement");

	Params::BrickMathLibrary_FindOptimalPlacement Parms{};

	Parms.TargetGrid = TargetGrid;
	Parms.BrickType = BrickType;
	Parms.Direction = Direction;
	Parms.Rotation = Rotation;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.FlipDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::FlipDirection(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "FlipDirection");

	Params::BrickMathLibrary_FlipDirection Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.FlipRotation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickRotation                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickRotation UBrickMathLibrary::FlipRotation(EBrickRotation Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "FlipRotation");

	Params::BrickMathLibrary_FlipRotation Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetAxisIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickAxis                              Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::GetAxisIntVector(EBrickAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetAxisIntVector");

	Params::BrickMathLibrary_GetAxisIntVector Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetAxisNegativeDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickAxis                              Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::GetAxisNegativeDirection(EBrickAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetAxisNegativeDirection");

	Params::BrickMathLibrary_GetAxisNegativeDirection Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetAxisPositiveDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickAxis                              Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::GetAxisPositiveDirection(EBrickAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetAxisPositiveDirection");

	Params::BrickMathLibrary_GetAxisPositiveDirection Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetAxisVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickAxis                              Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::GetAxisVector(EBrickAxis Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetAxisVector");

	Params::BrickMathLibrary_GetAxisVector Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickAxis UBrickMathLibrary::GetDirectionAxis(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionAxis");

	Params::BrickMathLibrary_GetDirectionAxis Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::GetDirectionIntVector(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionIntVector");

	Params::BrickMathLibrary_GetDirectionIntVector Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UBrickMathLibrary::GetDirectionQuat(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionQuat");

	Params::BrickMathLibrary_GetDirectionQuat Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBrickMathLibrary::GetDirectionRotator(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionRotator");

	Params::BrickMathLibrary_GetDirectionRotator Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionSign
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::GetDirectionSign(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionSign");

	Params::BrickMathLibrary_GetDirectionSign Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetDirectionVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::GetDirectionVector(EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetDirectionVector");

	Params::BrickMathLibrary_GetDirectionVector Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetIntVectorAxisValue
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         AxisDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickMathLibrary::GetIntVectorAxisValue(const struct FIntVector& Vector, EBrickDirection AxisDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetIntVectorAxisValue");

	Params::BrickMathLibrary_GetIntVectorAxisValue Parms{};

	Parms.Vector = std::move(Vector);
	Parms.AxisDirection = AxisDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetLargestComponentNormal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::GetLargestComponentNormal(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetLargestComponentNormal");

	Params::BrickMathLibrary_GetLargestComponentNormal Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetLargestComponentVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::GetLargestComponentVector(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetLargestComponentVector");

	Params::BrickMathLibrary_GetLargestComponentVector Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetNearestDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::GetNearestDirection(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetNearestDirection");

	Params::BrickMathLibrary_GetNearestDirection Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetNearestDirectionIgnoringZ
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::GetNearestDirectionIgnoringZ(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetNearestDirectionIgnoringZ");

	Params::BrickMathLibrary_GetNearestDirectionIgnoringZ Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetNearestDirectionIntVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreZ                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::GetNearestDirectionIntVector(const struct FVector& Vector, bool bIgnoreZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetNearestDirectionIntVector");

	Params::BrickMathLibrary_GetNearestDirectionIntVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.bIgnoreZ = bIgnoreZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetNearestDirectionVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreZ                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::GetNearestDirectionVector(const struct FVector& Vector, bool bIgnoreZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetNearestDirectionVector");

	Params::BrickMathLibrary_GetNearestDirectionVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.bIgnoreZ = bIgnoreZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetNearestRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Vector2D                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickRotation UBrickMathLibrary::GetNearestRotation(const struct FVector2D& Vector2D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetNearestRotation");

	Params::BrickMathLibrary_GetNearestRotation Parms{};

	Parms.Vector2D = std::move(Vector2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetOptimalBoxViewDistance
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InFOVDegrees                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBox&                      Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickMathLibrary::GetOptimalBoxViewDistance(float InFOVDegrees, const struct FBox& Box)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetOptimalBoxViewDistance");

	Params::BrickMathLibrary_GetOptimalBoxViewDistance Parms{};

	Parms.InFOVDegrees = InFOVDegrees;
	Parms.Box = std::move(Box);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetOrientationFromQuat
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     Quat                                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::GetOrientationFromQuat(const struct FQuat& Quat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetOrientationFromQuat");

	Params::BrickMathLibrary_GetOrientationFromQuat Parms{};

	Parms.Quat = std::move(Quat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetOrientationFromRotator
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  Rotator                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::GetOrientationFromRotator(const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetOrientationFromRotator");

	Params::BrickMathLibrary_GetOrientationFromRotator Parms{};

	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetOrientationQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UBrickMathLibrary::GetOrientationQuat(EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetOrientationQuat");

	Params::BrickMathLibrary_GetOrientationQuat Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetOrientationRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBrickMathLibrary::GetOrientationRotator(EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetOrientationRotator");

	Params::BrickMathLibrary_GetOrientationRotator Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetPlaneFromIntVector
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlane                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPlane UBrickMathLibrary::GetPlaneFromIntVector(const struct FIntVector& Origin, EBrickDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetPlaneFromIntVector");

	Params::BrickMathLibrary_GetPlaneFromIntVector Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetPointDistanceToBoxFrame
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBox&                      Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickMathLibrary::GetPointDistanceToBoxFrame(const struct FBox& Box, const struct FVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetPointDistanceToBoxFrame");

	Params::BrickMathLibrary_GetPointDistanceToBoxFrame Parms{};

	Parms.Box = std::move(Box);
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetRemainingAxis
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickAxis                              AxisA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              AxisB                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickAxis                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickAxis UBrickMathLibrary::GetRemainingAxis(EBrickAxis AxisA, EBrickAxis AxisB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetRemainingAxis");

	Params::BrickMathLibrary_GetRemainingAxis Parms{};

	Parms.AxisA = AxisA;
	Parms.AxisB = AxisB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetRotationQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickRotation                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UBrickMathLibrary::GetRotationQuat(EBrickRotation Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetRotationQuat");

	Params::BrickMathLibrary_GetRotationQuat Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetRotationRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickRotation                          Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBrickMathLibrary::GetRotationRotator(EBrickRotation Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetRotationRotator");

	Params::BrickMathLibrary_GetRotationRotator Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetRowEndOffset
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         RowDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RowLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RowSpacing                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                BrickSize                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       BrickOrientation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::GetRowEndOffset(EBrickDirection RowDirection, int32 RowLength, int32 RowSpacing, const struct FIntVector& BrickSize, EBrickOrientation BrickOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetRowEndOffset");

	Params::BrickMathLibrary_GetRowEndOffset Parms{};

	Parms.RowDirection = RowDirection;
	Parms.RowLength = RowLength;
	Parms.RowSpacing = RowSpacing;
	Parms.BrickSize = std::move(BrickSize);
	Parms.BrickOrientation = BrickOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.GetWorldTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBrickMathLibrary::GetWorldTransform(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "GetWorldTransform");

	Params::BrickMathLibrary_GetWorldTransform Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.HandleGeneralResizeDragging
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                GridTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                CurrentCenter                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                CurrentSize                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                MinSize                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                MaxSize                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                GridIncrements                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayStart                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayEnd                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         HandleDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandleMargin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutNewCenter                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector*                      OutNewSize                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickMathLibrary::HandleGeneralResizeDragging(const struct FTransform& GridTransform, const struct FIntVector& CurrentCenter, const struct FIntVector& CurrentSize, const struct FIntVector& MinSize, const struct FIntVector& MaxSize, const struct FIntVector& GridIncrements, const struct FVector& RayStart, const struct FVector& RayEnd, EBrickDirection HandleDirection, float HandleMargin, float StartOffset, struct FIntVector* OutNewCenter, struct FIntVector* OutNewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "HandleGeneralResizeDragging");

	Params::BrickMathLibrary_HandleGeneralResizeDragging Parms{};

	Parms.GridTransform = std::move(GridTransform);
	Parms.CurrentCenter = std::move(CurrentCenter);
	Parms.CurrentSize = std::move(CurrentSize);
	Parms.MinSize = std::move(MinSize);
	Parms.MaxSize = std::move(MaxSize);
	Parms.GridIncrements = std::move(GridIncrements);
	Parms.RayStart = std::move(RayStart);
	Parms.RayEnd = std::move(RayEnd);
	Parms.HandleDirection = HandleDirection;
	Parms.HandleMargin = HandleMargin;
	Parms.StartOffset = StartOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewCenter != nullptr)
		*OutNewCenter = std::move(Parms.OutNewCenter);

	if (OutNewSize != nullptr)
		*OutNewSize = std::move(Parms.OutNewSize);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.InverseMultiplyOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       OrientationA                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       OrientationB                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::InverseMultiplyOrientation(EBrickOrientation OrientationA, EBrickOrientation OrientationB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "InverseMultiplyOrientation");

	Params::BrickMathLibrary_InverseMultiplyOrientation Parms{};

	Parms.OrientationA = OrientationA;
	Parms.OrientationB = OrientationB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.InverseOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::InverseOrientation(EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "InverseOrientation");

	Params::BrickMathLibrary_InverseOrientation Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.MultiplyOrientation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       OrientationA                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       OrientationB                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickOrientation UBrickMathLibrary::MultiplyOrientation(EBrickOrientation OrientationA, EBrickOrientation OrientationB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "MultiplyOrientation");

	Params::BrickMathLibrary_MultiplyOrientation Parms{};

	Parms.OrientationA = OrientationA;
	Parms.OrientationB = OrientationB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoAxis
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         AxisDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ProjectIntVectorOntoAxis(const struct FIntVector& Vector, EBrickDirection AxisDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ProjectIntVectorOntoAxis");

	Params::BrickMathLibrary_ProjectIntVectorOntoAxis Parms{};

	Parms.Vector = std::move(Vector);
	Parms.AxisDirection = AxisDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoPlane
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                PointOnPlane                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         PlaneNormalDirection                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ProjectIntVectorOntoPlane(const struct FIntVector& Vector, const struct FIntVector& PointOnPlane, EBrickDirection PlaneNormalDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ProjectIntVectorOntoPlane");

	Params::BrickMathLibrary_ProjectIntVectorOntoPlane Parms{};

	Parms.Vector = std::move(Vector);
	Parms.PointOnPlane = std::move(PointOnPlane);
	Parms.PlaneNormalDirection = PlaneNormalDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.ProjectIntVectorOntoZeroPlane
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         PlaneNormalDirection                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::ProjectIntVectorOntoZeroPlane(const struct FIntVector& Vector, EBrickDirection PlaneNormalDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "ProjectIntVectorOntoZeroPlane");

	Params::BrickMathLibrary_ProjectIntVectorOntoZeroPlane Parms{};

	Parms.Vector = std::move(Vector);
	Parms.PlaneNormalDirection = PlaneNormalDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::RotateDirection(EBrickDirection Direction, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateDirection");

	Params::BrickMathLibrary_RotateDirection Parms{};

	Parms.Direction = Direction;
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateIntBox
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickMathLibrary::RotateIntBox(const struct FIntBox& Box, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateIntBox");

	Params::BrickMathLibrary_RotateIntBox Parms{};

	Parms.Box = std::move(Box);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateIntVector
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::RotateIntVector(const struct FIntVector& Vector, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateIntVector");

	Params::BrickMathLibrary_RotateIntVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateSize
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::RotateSize(const struct FIntVector& Size, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateSize");

	Params::BrickMathLibrary_RotateSize Parms{};

	Parms.Size = std::move(Size);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateSize3f
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector3f&                 Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector3f UBrickMathLibrary::RotateSize3f(const struct FVector3f& Size, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateSize3f");

	Params::BrickMathLibrary_RotateSize3f Parms{};

	Parms.Size = std::move(Size);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateVector
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::RotateVector(const struct FVector& Vector, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateVector");

	Params::BrickMathLibrary_RotateVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.RotateVector3f
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector3f&                 Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector3f UBrickMathLibrary::RotateVector3f(const struct FVector3f& Vector, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "RotateVector3f");

	Params::BrickMathLibrary_RotateVector3f Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.SetIntVectorAxisValue
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         AxisDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::SetIntVectorAxisValue(const struct FIntVector& Vector, int32 Value, EBrickDirection AxisDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "SetIntVectorAxisValue");

	Params::BrickMathLibrary_SetIntVectorAxisValue Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Value = Value;
	Parms.AxisDirection = AxisDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.SplitOrientation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection*                        OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickRotation*                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickMathLibrary::SplitOrientation(EBrickOrientation Orientation, EBrickDirection* OutDirection, EBrickRotation* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "SplitOrientation");

	Params::BrickMathLibrary_SplitOrientation Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = Parms.OutDirection;

	if (OutRotation != nullptr)
		*OutRotation = Parms.OutRotation;
}


// Function Brickadia.BrickMathLibrary.TransformIntBox
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FIntVector&                position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickMathLibrary::TransformIntBox(const struct FIntBox& Box, const struct FIntVector& position, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "TransformIntBox");

	Params::BrickMathLibrary_TransformIntBox Parms{};

	Parms.Box = std::move(Box);
	Parms.position = std::move(position);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBrickDirection                         Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickDirection UBrickMathLibrary::UnrotateDirection(EBrickDirection Direction, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateDirection");

	Params::BrickMathLibrary_UnrotateDirection Parms{};

	Parms.Direction = Direction;
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateIntBox
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntBox&                   Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntBox                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FIntBox UBrickMathLibrary::UnrotateIntBox(const struct FIntBox& Box, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateIntBox");

	Params::BrickMathLibrary_UnrotateIntBox Parms{};

	Parms.Box = std::move(Box);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateIntVector
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::UnrotateIntVector(const struct FIntVector& Vector, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateIntVector");

	Params::BrickMathLibrary_UnrotateIntVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateSize
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickMathLibrary::UnrotateSize(const struct FIntVector& Size, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateSize");

	Params::BrickMathLibrary_UnrotateSize Parms{};

	Parms.Size = std::move(Size);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateSize3f
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector3f&                 Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector3f UBrickMathLibrary::UnrotateSize3f(const struct FVector3f& Size, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateSize3f");

	Params::BrickMathLibrary_UnrotateSize3f Parms{};

	Parms.Size = std::move(Size);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickMathLibrary.UnrotateVector
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickOrientation                       Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBrickMathLibrary::UnrotateVector(const struct FVector& Vector, EBrickOrientation Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickMathLibrary", "UnrotateVector");

	Params::BrickMathLibrary_UnrotateVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerAvatarManagerComponent.FindPlayerPartDescriptor
// (Final, Native, Static, Public)
// Parameters:
// const class FText&                      InCategory                                             (Parm, NativeAccessSpecifierPublic)
// const class FText&                      InDisplayName                                          (Parm, NativeAccessSpecifierPublic)
// class UBRPlayerPartDescriptor*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerPartDescriptor* UBRPlayerAvatarManagerComponent::FindPlayerPartDescriptor(const class FText& InCategory, const class FText& InDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPlayerAvatarManagerComponent", "FindPlayerPartDescriptor");

	Params::BRPlayerAvatarManagerComponent_FindPlayerPartDescriptor Parms{};

	Parms.InCategory = std::move(InCategory);
	Parms.InDisplayName = std::move(InDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerAvatarManagerComponent.FixupOldColorsToLinear
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBRPlayerAvatarCustomizationV2&  Avatar                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlayerAvatarManagerComponent::FixupOldColorsToLinear(struct FBRPlayerAvatarCustomizationV2& Avatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPlayerAvatarManagerComponent", "FixupOldColorsToLinear");

	Params::BRPlayerAvatarManagerComponent_FixupOldColorsToLinear Parms{};

	Parms.Avatar = std::move(Avatar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Avatar = std::move(Parms.Avatar);
}


// Function Brickadia.BRPlayerAvatarManagerComponent.UpgradeCustomization
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRPlayerAvatarCustomizationV2&Old                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBRPlayerAvatarCustomizationV3   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBRPlayerAvatarCustomizationV3 UBRPlayerAvatarManagerComponent::UpgradeCustomization(const struct FBRPlayerAvatarCustomizationV2& Old)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPlayerAvatarManagerComponent", "UpgradeCustomization");

	Params::BRPlayerAvatarManagerComponent_UpgradeCustomization Parms{};

	Parms.Old = std::move(Old);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerAvatarManagerComponent.ServerUpdatePlayerAvatar
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRPlayerAvatarCustomizationV3&NewAvatar                                              (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlayerAvatarManagerComponent::ServerUpdatePlayerAvatar(const struct FBRPlayerAvatarCustomizationV3& NewAvatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerAvatarManagerComponent", "ServerUpdatePlayerAvatar");

	Params::BRPlayerAvatarManagerComponent_ServerUpdatePlayerAvatar Parms{};

	Parms.NewAvatar = std::move(NewAvatar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerAvatarManagerComponent.UpdatePlayerAvatar
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRPlayerAvatarCustomizationV3&NewAvatar                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRPlayerAvatarManagerComponent::UpdatePlayerAvatar(const struct FBRPlayerAvatarCustomizationV3& NewAvatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerAvatarManagerComponent", "UpdatePlayerAvatar");

	Params::BRPlayerAvatarManagerComponent_UpdatePlayerAvatar Parms{};

	Parms.NewAvatar = std::move(NewAvatar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickHelpers.GetBrickFromHitResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle UBrickHelpers::GetBrickFromHitResult(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickHelpers", "GetBrickFromHitResult");

	Params::BrickHelpers_GetBrickFromHitResult Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickHelpers.GetBrickTypeFromBrickAsset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickAsset*                      Brick                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                ProceduralSize                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBrickHelpers::GetBrickTypeFromBrickAsset(class UBrickAsset* Brick, const struct FIntVector& ProceduralSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickHelpers", "GetBrickTypeFromBrickAsset");

	Params::BrickHelpers_GetBrickTypeFromBrickAsset Parms{};

	Parms.Brick = Brick;
	Parms.ProceduralSize = std::move(ProceduralSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickHelpers.GetGlobalBrickGrid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* UBrickHelpers::GetGlobalBrickGrid(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickHelpers", "GetGlobalBrickGrid");

	Params::BrickHelpers_GetGlobalBrickGrid Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickHelpers.GetGlobalBrickGridActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABrickGridActor*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickGridActor* UBrickHelpers::GetGlobalBrickGridActor(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickHelpers", "GetGlobalBrickGridActor");

	Params::BrickHelpers_GetGlobalBrickGridActor Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickHelpers.GetGlobalBrickGridEntityHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBREntityPersistentHandle        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBREntityPersistentHandle UBrickHelpers::GetGlobalBrickGridEntityHandle(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickHelpers", "GetGlobalBrickGridEntityHandle");

	Params::BrickHelpers_GetGlobalBrickGridEntityHandle Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridPreviewActor.ApplyPreviewMode
// (Final, Native, Private)

void ABrickGridPreviewActor::ApplyPreviewMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "ApplyPreviewMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridPreviewActor.ApplyPreviewSimpleParameters
// (Final, Native, Private)

void ABrickGridPreviewActor::ApplyPreviewSimpleParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "ApplyPreviewSimpleParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridPreviewActor.ApplyPreviewTransformParameters
// (Final, Native, Private)

void ABrickGridPreviewActor::ApplyPreviewTransformParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "ApplyPreviewTransformParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridPreviewActor.ApplyPreviewVisible
// (Final, Native, Private)

void ABrickGridPreviewActor::ApplyPreviewVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "ApplyPreviewVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridPreviewActor.ApplyPreviewVolumeParameters
// (Final, Native, Private)

void ABrickGridPreviewActor::ApplyPreviewVolumeParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "ApplyPreviewVolumeParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickGridPreviewActor.GetActiveBrickGrid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* ABrickGridPreviewActor::GetActiveBrickGrid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "GetActiveBrickGrid");

	Params::BrickGridPreviewActor_GetActiveBrickGrid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridPreviewActor.GetFreeBrickGrid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* ABrickGridPreviewActor::GetFreeBrickGrid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "GetFreeBrickGrid");

	Params::BrickGridPreviewActor_GetFreeBrickGrid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGridPreviewActor.GetSimpleBrickGrid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickGridComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGridComponent* ABrickGridPreviewActor::GetSimpleBrickGrid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickGridPreviewActor", "GetSimpleBrickGrid");

	Params::BrickGridPreviewActor_GetSimpleBrickGrid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponProjectile.ApplyMeshColors
// (Final, Native, Public, BlueprintCallable)

void ABRWeaponProjectile::ApplyMeshColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "ApplyMeshColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponProjectile.ProcessBounce
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRWeaponProjectile::ProcessBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "ProcessBounce");

	Params::BRWeaponProjectile_ProcessBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponProjectile.ProcessImpactDamageableObject
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRWeaponProjectile::ProcessImpactDamageableObject(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "ProcessImpactDamageableObject");

	Params::BRWeaponProjectile_ProcessImpactDamageableObject Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponProjectile.ProcessStop
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABRWeaponProjectile::ProcessStop(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "ProcessStop");

	Params::BRWeaponProjectile_ProcessStop Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponProjectile.ProcessTimeout
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABRWeaponProjectile::ProcessTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "ProcessTimeout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponProjectile.SetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRWeaponProjectile::SetMeshColor(int32 Index_0, const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "SetMeshColor");

	Params::BRWeaponProjectile_SetMeshColor Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponProjectile.GetImpactExplosion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bDirectHit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHeadshot                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRWeaponExplosion>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UBRWeaponExplosion> ABRWeaponProjectile::GetImpactExplosion(bool bDirectHit, bool bHeadshot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "GetImpactExplosion");

	Params::BRWeaponProjectile_GetImpactExplosion Parms{};

	Parms.bDirectHit = bDirectHit;
	Parms.bHeadshot = bHeadshot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponProjectile.GetMeshColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRWeaponProjectile::GetMeshColor(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectile", "GetMeshColor");

	Params::BRWeaponProjectile_GetMeshColor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickPreviewManagerComponent.OnRep_BrickGridPreviewActor
// (Final, Native, Private)

void UBrickPreviewManagerComponent::OnRep_BrickGridPreviewActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "OnRep_BrickGridPreviewActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewMode_TEMP
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// EBrickPreviewMode                       NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::ServerSetPreviewMode_TEMP(EBrickPreviewMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "ServerSetPreviewMode_TEMP");

	Params::BrickPreviewManagerComponent_ServerSetPreviewMode_TEMP Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewSimpleParameters
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const struct FBrickPreviewSimpleParameters&NewParameters                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::ServerSetPreviewSimpleParameters(const struct FBrickPreviewSimpleParameters& NewParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "ServerSetPreviewSimpleParameters");

	Params::BrickPreviewManagerComponent_ServerSetPreviewSimpleParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewTransformParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBrickPreviewTransformParameters&NewParameters                                          (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::ServerSetPreviewTransformParameters(const struct FBrickPreviewTransformParameters& NewParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "ServerSetPreviewTransformParameters");

	Params::BrickPreviewManagerComponent_ServerSetPreviewTransformParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewVisible
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::ServerSetPreviewVisible(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "ServerSetPreviewVisible");

	Params::BrickPreviewManagerComponent_ServerSetPreviewVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.ServerSetPreviewVolumeParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBrickPreviewVolumeParameters&NewParameters                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::ServerSetPreviewVolumeParameters(const struct FBrickPreviewVolumeParameters& NewParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "ServerSetPreviewVolumeParameters");

	Params::BrickPreviewManagerComponent_ServerSetPreviewVolumeParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.SetPreviewMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBrickPreviewMode                       NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::SetPreviewMode(EBrickPreviewMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "SetPreviewMode");

	Params::BrickPreviewManagerComponent_SetPreviewMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.SetPreviewSimpleParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickPreviewSimpleParameters&NewParameters                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bKillPreview                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::SetPreviewSimpleParameters(const struct FBrickPreviewSimpleParameters& NewParameters, bool bKillPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "SetPreviewSimpleParameters");

	Params::BrickPreviewManagerComponent_SetPreviewSimpleParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);
	Parms.bKillPreview = bKillPreview;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.SetPreviewTransformParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickPreviewTransformParameters&NewParameters                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::SetPreviewTransformParameters(const struct FBrickPreviewTransformParameters& NewParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "SetPreviewTransformParameters");

	Params::BrickPreviewManagerComponent_SetPreviewTransformParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.SetPreviewVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::SetPreviewVisible(bool bNewVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "SetPreviewVisible");

	Params::BrickPreviewManagerComponent_SetPreviewVisible Parms{};

	Parms.bNewVisible = bNewVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.SetPreviewVolumeParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickPreviewVolumeParameters&NewParameters                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bKillPreview                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickPreviewManagerComponent::SetPreviewVolumeParameters(const struct FBrickPreviewVolumeParameters& NewParameters, bool bKillPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "SetPreviewVolumeParameters");

	Params::BrickPreviewManagerComponent_SetPreviewVolumeParameters Parms{};

	Parms.NewParameters = std::move(NewParameters);
	Parms.bKillPreview = bKillPreview;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickPreviewManagerComponent.GetBrickGridPreviewActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABrickGridPreviewActor*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABrickGridPreviewActor* UBrickPreviewManagerComponent::GetBrickGridPreviewActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickPreviewManagerComponent", "GetBrickGridPreviewActor");

	Params::BrickPreviewManagerComponent_GetBrickGridPreviewActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.CanConnectWire
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickComponentWirePortRef&SourcePortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentWirePortRef&TargetPortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::CanConnectWire(const struct FBrickComponentWirePortRef& SourcePortRef, const struct FBrickComponentWirePortRef& TargetPortRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "CanConnectWire");

	Params::BrickRegistry_CanConnectWire Parms{};

	Parms.SourcePortRef = std::move(SourcePortRef);
	Parms.TargetPortRef = std::move(TargetPortRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.ConnectComponentWire
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickComponentWirePortRef&SourcePortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentWirePortRef&TargetPortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentWireConnectResult        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentWireConnectResult UBrickRegistry::ConnectComponentWire(const struct FBrickComponentWirePortRef& SourcePortRef, const struct FBrickComponentWirePortRef& TargetPortRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "ConnectComponentWire");

	Params::BrickRegistry_ConnectComponentWire Parms{};

	Parms.SourcePortRef = std::move(SourcePortRef);
	Parms.TargetPortRef = std::move(TargetPortRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.DisconnectComponentWire
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickComponentWirePortRef&SourcePortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentWirePortRef&TargetPortRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentWireDisconnectResult     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentWireDisconnectResult UBrickRegistry::DisconnectComponentWire(const struct FBrickComponentWirePortRef& SourcePortRef, const struct FBrickComponentWirePortRef& TargetPortRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "DisconnectComponentWire");

	Params::BrickRegistry_DisconnectComponentWire Parms{};

	Parms.SourcePortRef = std::move(SourcePortRef);
	Parms.TargetPortRef = std::move(TargetPortRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.DisconnectComponentWireByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WireIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentWireDisconnectResult     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentWireDisconnectResult UBrickRegistry::DisconnectComponentWireByIndex(int32 WireIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "DisconnectComponentWireByIndex");

	Params::BrickRegistry_DisconnectComponentWireByIndex Parms{};

	Parms.WireIndex = WireIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.DisconnectComponentWireByPort
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBrickComponentWirePortRef&PortRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsOutput                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickComponentWireDisconnectResult     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickComponentWireDisconnectResult UBrickRegistry::DisconnectComponentWireByPort(const struct FBrickComponentWirePortRef& PortRef, bool bAsOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "DisconnectComponentWireByPort");

	Params::BrickRegistry_DisconnectComponentWireByPort Parms{};

	Parms.PortRef = std::move(PortRef);
	Parms.bAsOutput = bAsOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.DisconnectComponentWiresByComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickComponentInstanceRef&Component                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickRegistry::DisconnectComponentWiresByComponent(const struct FBrickComponentInstanceRef& Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "DisconnectComponentWiresByComponent");

	Params::BrickRegistry_DisconnectComponentWiresByComponent Parms{};

	Parms.Component = std::move(Component);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickRegistry.ForceLastModifyTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// double                                  Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickRegistry::ForceLastModifyTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "ForceLastModifyTime");

	Params::BrickRegistry_ForceLastModifyTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickRegistry.IsComponentInstanceRefValid
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickComponentInstanceRef&ComponentRef                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::IsComponentInstanceRefValid(const struct FBrickComponentInstanceRef& ComponentRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "IsComponentInstanceRefValid");

	Params::BrickRegistry_IsComponentInstanceRefValid Parms{};

	Parms.ComponentRef = std::move(ComponentRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.IsComponentLatentInstanceRefValid
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickComponentLatentInstanceRef&ComponentRef                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::IsComponentLatentInstanceRefValid(const struct FBrickComponentLatentInstanceRef& ComponentRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "IsComponentLatentInstanceRefValid");

	Params::BrickRegistry_IsComponentLatentInstanceRefValid Parms{};

	Parms.ComponentRef = std::move(ComponentRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.IsComponentLatentWirePortRefValid
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickComponentLatentWirePortRef&PortRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsOutput                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::IsComponentLatentWirePortRefValid(const struct FBrickComponentLatentWirePortRef& PortRef, bool bAsOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "IsComponentLatentWirePortRefValid");

	Params::BrickRegistry_IsComponentLatentWirePortRefValid Parms{};

	Parms.PortRef = std::move(PortRef);
	Parms.bAsOutput = bAsOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.IsComponentWirePortRefValid
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickComponentWirePortRef&PortRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsOutput                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::IsComponentWirePortRefValid(const struct FBrickComponentWirePortRef& PortRef, bool bAsOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "IsComponentWirePortRefValid");

	Params::BrickRegistry_IsComponentWirePortRefValid Parms{};

	Parms.PortRef = std::move(PortRef);
	Parms.bAsOutput = bAsOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.NotifyBrickChange
// (Final, Native, Public, BlueprintCallable)

void UBrickRegistry::NotifyBrickChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "NotifyBrickChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickRegistry.SetHiddenBrickRenderingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickRegistry::SetHiddenBrickRenderingEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "SetHiddenBrickRenderingEnabled");

	Params::BrickRegistry_SetHiddenBrickRenderingEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickRegistry.SetWireRenderingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickRegistry::SetWireRenderingEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "SetWireRenderingEnabled");

	Params::BrickRegistry_SetWireRenderingEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickRegistry.CreateBrickLatentHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickLatentHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickLatentHandle UBrickRegistry::CreateBrickLatentHandle(const struct FBrickHandle& BrickHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "CreateBrickLatentHandle");

	Params::BrickRegistry_CreateBrickLatentHandle Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.FindBrickByLatentHandle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickLatentHandle&        LatentHandle                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle UBrickRegistry::FindBrickByLatentHandle(const struct FBrickLatentHandle& LatentHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "FindBrickByLatentHandle");

	Params::BrickRegistry_FindBrickByLatentHandle Parms{};

	Parms.LatentHandle = std::move(LatentHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.GetHiddenBrickRenderingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::GetHiddenBrickRenderingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "GetHiddenBrickRenderingEnabled");

	Params::BrickRegistry_GetHiddenBrickRenderingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.GetLastBrickModificationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBrickRegistry::GetLastBrickModificationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "GetLastBrickModificationTime");

	Params::BrickRegistry_GetLastBrickModificationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.GetWireRenderingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::GetWireRenderingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "GetWireRenderingEnabled");

	Params::BrickRegistry_GetWireRenderingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickRegistry.HasWiresConnectedToPort
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickComponentWirePortRef&PortRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsOutput                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickRegistry::HasWiresConnectedToPort(const struct FBrickComponentWirePortRef& PortRef, bool bAsOutput) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickRegistry", "HasWiresConnectedToPort");

	Params::BrickRegistry_HasWiresConnectedToPort Parms{};

	Parms.PortRef = std::move(PortRef);
	Parms.bAsOutput = bAsOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.AddTrackedProjectile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRWeaponProjectile*              Projectile                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::AddTrackedProjectile(class ABRWeaponProjectile* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "AddTrackedProjectile");

	Params::BRPlayerState_AddTrackedProjectile Parms{};

	Parms.Projectile = Projectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.ClearRoles
// (Final, Native, Public, BlueprintCallable)

void ABRPlayerState::ClearRoles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "ClearRoles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.DestroyTrackedProjectiles
// (Final, Native, Public, BlueprintCallable)

void ABRPlayerState::DestroyTrackedProjectiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "DestroyTrackedProjectiles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.IncLeaderboardValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::IncLeaderboardValue(class FName ValueName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "IncLeaderboardValue");

	Params::BRPlayerState_IncLeaderboardValue Parms{};

	Parms.ValueName = ValueName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.IncLeaderboardValueByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::IncLeaderboardValueByIndex(int32 Index_0, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "IncLeaderboardValueByIndex");

	Params::BRPlayerState_IncLeaderboardValueByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.OnRep_CustomPermissionsRoles
// (Final, Native, Public)

void ABRPlayerState::OnRep_CustomPermissionsRoles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "OnRep_CustomPermissionsRoles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.OnRep_Ruleset
// (Final, Native, Public)

void ABRPlayerState::OnRep_Ruleset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "OnRep_Ruleset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.OnRep_Team
// (Final, Native, Public)

void ABRPlayerState::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.RemoveTrackedProjectile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRWeaponProjectile*              Projectile                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::RemoveTrackedProjectile(class ABRWeaponProjectile* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "RemoveTrackedProjectile");

	Params::BRPlayerState_RemoveTrackedProjectile Parms{};

	Parms.Projectile = Projectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.ResetLeaderboardValues
// (Final, Native, Public, BlueprintCallable)

void ABRPlayerState::ResetLeaderboardValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "ResetLeaderboardValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.ServerSetColorSelectionState
// (Net, Native, Event, Public, NetServer)
// Parameters:
// const struct FBRColorSelectionState&    SelectionState                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRPlayerState::ServerSetColorSelectionState(const struct FBRColorSelectionState& SelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "ServerSetColorSelectionState");

	Params::BRPlayerState_ServerSetColorSelectionState Parms{};

	Parms.SelectionState = std::move(SelectionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.SetColorSelectionState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRColorSelectionState&    SelectionState                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRPlayerState::SetColorSelectionState(const struct FBRColorSelectionState& SelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "SetColorSelectionState");

	Params::BRPlayerState_SetColorSelectionState Parms{};

	Parms.SelectionState = std::move(SelectionState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.SetHasRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Has                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::SetHasRole(const class FString& RoleId, bool Has)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "SetHasRole");

	Params::BRPlayerState_SetHasRole Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.Has = Has;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.SetHasRoles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            RoleIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABRPlayerState::SetHasRoles(const TArray<class FString>& RoleIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "SetHasRoles");

	Params::BRPlayerState_SetHasRoles Parms{};

	Parms.RoleIds = std::move(RoleIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.SetLeaderboardValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::SetLeaderboardValue(class FName ValueName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "SetLeaderboardValue");

	Params::BRPlayerState_SetLeaderboardValue Parms{};

	Parms.ValueName = ValueName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.SetLeaderboardValueByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::SetLeaderboardValueByIndex(int32 Index_0, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "SetLeaderboardValueByIndex");

	Params::BRPlayerState_SetLeaderboardValueByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerState.CountBricksAndComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  OutNumBricks                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumComponents                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerState::CountBricksAndComponents(int32* OutNumBricks, int32* OutNumComponents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "CountBricksAndComponents");

	Params::BRPlayerState_CountBricksAndComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNumBricks != nullptr)
		*OutNumBricks = Parms.OutNumBricks;

	if (OutNumComponents != nullptr)
		*OutNumComponents = Parms.OutNumComponents;
}


// Function Brickadia.BRPlayerState.GetAffiliatedTeamFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABRPlayerState*             OtherPlayer                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* ABRPlayerState::GetAffiliatedTeamFor(const class ABRPlayerState* OtherPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetAffiliatedTeamFor");

	Params::BRPlayerState_GetAffiliatedTeamFor Parms{};

	Parms.OtherPlayer = OtherPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetChatNameColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRPlayerState::GetChatNameColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetChatNameColor");

	Params::BRPlayerState_GetChatNameColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetChatNameColorFor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRPlayerState::GetChatNameColorFor(class ABRPlayerState* OtherPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetChatNameColorFor");

	Params::BRPlayerState_GetChatNameColorFor Parms{};

	Parms.OtherPlayer = OtherPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetCustomPermissionsRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> ABRPlayerState::GetCustomPermissionsRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetCustomPermissionsRoles");

	Params::BRPlayerState_GetCustomPermissionsRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetDefaultRoleColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRPlayerState::GetDefaultRoleColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetDefaultRoleColor");

	Params::BRPlayerState_GetDefaultRoleColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetHasChatNameColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::GetHasChatNameColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetHasChatNameColor");

	Params::BRPlayerState_GetHasChatNameColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetHasRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    PermissionsRoleIn                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::GetHasRole(const class FString& PermissionsRoleIn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetHasRole");

	Params::BRPlayerState_GetHasRole Parms{};

	Parms.PermissionsRoleIn = std::move(PermissionsRoleIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetHighestRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* ABRPlayerState::GetHighestRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetHighestRole");

	Params::BRPlayerState_GetHighestRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetHighestRoleColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRPlayerState::GetHighestRoleColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetHighestRoleColor");

	Params::BRPlayerState_GetHighestRoleColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetHUDNameColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ABRPlayerState::GetHUDNameColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetHUDNameColor");

	Params::BRPlayerState_GetHUDNameColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetIsOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::GetIsOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetIsOwner");

	Params::BRPlayerState_GetIsOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetLeaderboardValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRPlayerState::GetLeaderboardValue(class FName ValueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetLeaderboardValue");

	Params::BRPlayerState_GetLeaderboardValue Parms{};

	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetLeaderboardValueByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRPlayerState::GetLeaderboardValueByIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetLeaderboardValueByIndex");

	Params::BRPlayerState_GetLeaderboardValueByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetOwnerBRPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRPlayerState::GetOwnerBRPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetOwnerBRPlayerController");

	Params::BRPlayerState_GetOwnerBRPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetPlacerTool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRTool_Placer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRTool_Placer* ABRPlayerState::GetPlacerTool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetPlacerTool");

	Params::BRPlayerState_GetPlacerTool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> ABRPlayerState::GetRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetRoles");

	Params::BRPlayerState_GetRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetRolesExcludingDefault
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> ABRPlayerState::GetRolesExcludingDefault() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetRolesExcludingDefault");

	Params::BRPlayerState_GetRolesExcludingDefault Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetToolByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ABRToolBase>          ToolClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRToolBase*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRToolBase* ABRPlayerState::GetToolByClass(TSubclassOf<class ABRToolBase> ToolClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetToolByClass");

	Params::BRPlayerState_GetToolByClass Parms{};

	Parms.ToolClass = ToolClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetToolInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* ABRPlayerState::GetToolInventoryEntry(int32 Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetToolInventoryEntry");

	Params::BRPlayerState_GetToolInventoryEntry Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetToolsInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryComponent* ABRPlayerState::GetToolsInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetToolsInventory");

	Params::BRPlayerState_GetToolsInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetUserId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBRGuid                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBRGuid ABRPlayerState::GetUserId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetUserId");

	Params::BRPlayerState_GetUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.GetUserName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABRPlayerState::GetUserName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "GetUserName");

	Params::BRPlayerState_GetUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.HasAnyRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::HasAnyRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "HasAnyRoles");

	Params::BRPlayerState_HasAnyRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.HasLivingCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::HasLivingCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "HasLivingCharacter");

	Params::BRPlayerState_HasLivingCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.HasPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::HasPermission(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "HasPermission");

	Params::BRPlayerState_HasPermission Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerState.HasToolInventoryEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerState::HasToolInventoryEntry(int32 Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerState", "HasToolInventoryEntry");

	Params::BRPlayerState_HasToolInventoryEntry Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnAdvanceState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRWeaponSimulationContext&SimContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBRWeaponSimulationFeedback*     SimFeedback                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ScriptBase::OnAdvanceState(class ABRWeaponBase* Weapon, const struct FBRWeaponSimulationContext& SimContext, struct FBRWeaponSimulationFeedback* SimFeedback, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ScriptBase", "OnAdvanceState");

	Params::BRWeaponStateBehavior_ScriptBase_OnAdvanceState Parms{};

	Parms.Weapon = Weapon;
	Parms.SimContext = std::move(SimContext);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);

	if (SimFeedback != nullptr)
		*SimFeedback = std::move(Parms.SimFeedback);
}


// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRWeaponSimulationContext&SimContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBRWeaponSimulationFeedback*     SimFeedback                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ScriptBase::OnEnterState(class ABRWeaponBase* Weapon, const struct FBRWeaponSimulationContext& SimContext, struct FBRWeaponSimulationFeedback* SimFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ScriptBase", "OnEnterState");

	Params::BRWeaponStateBehavior_ScriptBase_OnEnterState Parms{};

	Parms.Weapon = Weapon;
	Parms.SimContext = std::move(SimContext);

	UObject::ProcessEvent(Func, &Parms);

	if (SimFeedback != nullptr)
		*SimFeedback = std::move(Parms.SimFeedback);
}


// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRWeaponSimulationContext&SimContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBRWeaponSimulationFeedback*     SimFeedback                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ScriptBase::OnExitState(class ABRWeaponBase* Weapon, const struct FBRWeaponSimulationContext& SimContext, struct FBRWeaponSimulationFeedback* SimFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ScriptBase", "OnExitState");

	Params::BRWeaponStateBehavior_ScriptBase_OnExitState Parms{};

	Parms.Weapon = Weapon;
	Parms.SimContext = std::move(SimContext);

	UObject::ProcessEvent(Func, &Parms);

	if (SimFeedback != nullptr)
		*SimFeedback = std::move(Parms.SimFeedback);
}


// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnResumeState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRWeaponSimulationContext&SimContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBRWeaponSimulationFeedback*     SimFeedback                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ScriptBase::OnResumeState(class ABRWeaponBase* Weapon, const struct FBRWeaponSimulationContext& SimContext, struct FBRWeaponSimulationFeedback* SimFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ScriptBase", "OnResumeState");

	Params::BRWeaponStateBehavior_ScriptBase_OnResumeState Parms{};

	Parms.Weapon = Weapon;
	Parms.SimContext = std::move(SimContext);

	UObject::ProcessEvent(Func, &Parms);

	if (SimFeedback != nullptr)
		*SimFeedback = std::move(Parms.SimFeedback);
}


// Function Brickadia.BRWeaponStateBehavior_ScriptBase.OnSuspendState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRWeaponBase*                    Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRWeaponSimulationContext&SimContext                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBRWeaponSimulationFeedback*     SimFeedback                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRWeaponStateBehavior_ScriptBase::OnSuspendState(class ABRWeaponBase* Weapon, const struct FBRWeaponSimulationContext& SimContext, struct FBRWeaponSimulationFeedback* SimFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponStateBehavior_ScriptBase", "OnSuspendState");

	Params::BRWeaponStateBehavior_ScriptBase_OnSuspendState Parms{};

	Parms.Weapon = Weapon;
	Parms.SimContext = std::move(SimContext);

	UObject::ProcessEvent(Func, &Parms);

	if (SimFeedback != nullptr)
		*SimFeedback = std::move(Parms.SimFeedback);
}


// Function Brickadia.BrickSaveFileLibrary.CopySaveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::CopySaveFile(const class FString& Path, const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "CopySaveFile");

	Params::BrickSaveFileLibrary_CopySaveFile Parms{};

	Parms.Path = std::move(Path);
	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.CopySaveFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::CopySaveFolder(const class FString& Path, const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "CopySaveFolder");

	Params::BrickSaveFileLibrary_CopySaveFolder Parms{};

	Parms.Path = std::move(Path);
	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.CountContentItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           InItems                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  OutNumFolders                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumFiles                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumIncludedFolders                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumIncludedFiles                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSaveFileLibrary::CountContentItems(const TArray<class UObject*>& InItems, int32* OutNumFolders, int32* OutNumFiles, int32* OutNumIncludedFolders, int32* OutNumIncludedFiles, int64* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "CountContentItems");

	Params::BrickSaveFileLibrary_CountContentItems Parms{};

	Parms.InItems = std::move(InItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNumFolders != nullptr)
		*OutNumFolders = Parms.OutNumFolders;

	if (OutNumFiles != nullptr)
		*OutNumFiles = Parms.OutNumFiles;

	if (OutNumIncludedFolders != nullptr)
		*OutNumIncludedFolders = Parms.OutNumIncludedFolders;

	if (OutNumIncludedFiles != nullptr)
		*OutNumIncludedFiles = Parms.OutNumIncludedFiles;

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;
}


// Function Brickadia.BrickSaveFileLibrary.CreateSaveFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::CreateSaveFolder(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "CreateSaveFolder");

	Params::BrickSaveFileLibrary_CreateSaveFolder Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.DeleteSaveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::DeleteSaveFile(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "DeleteSaveFile");

	Params::BrickSaveFileLibrary_DeleteSaveFile Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.DeleteSaveFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursiveDeletion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::DeleteSaveFolder(const class FString& Path, bool bRecursiveDeletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "DeleteSaveFolder");

	Params::BrickSaveFileLibrary_DeleteSaveFolder Parms{};

	Parms.Path = std::move(Path);
	Parms.bRecursiveDeletion = bRecursiveDeletion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.FilterContentItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           InItems                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>*                 OutFilteredItems                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutNumFolders                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumFiles                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSaveFileLibrary::FilterContentItems(const TArray<class UObject*>& InItems, const class FString& SearchString, TArray<class UObject*>* OutFilteredItems, int32* OutNumFolders, int32* OutNumFiles, int64* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "FilterContentItems");

	Params::BrickSaveFileLibrary_FilterContentItems Parms{};

	Parms.InItems = std::move(InItems);
	Parms.SearchString = std::move(SearchString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFilteredItems != nullptr)
		*OutFilteredItems = std::move(Parms.OutFilteredItems);

	if (OutNumFolders != nullptr)
		*OutNumFolders = Parms.OutNumFolders;

	if (OutNumFiles != nullptr)
		*OutNumFiles = Parms.OutNumFiles;

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;
}


// Function Brickadia.BrickSaveFileLibrary.FilterContentItemsExact
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           InItems                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    SearchString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowFolders                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowFiles                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBrickSaveFileLibrary::FilterContentItemsExact(const TArray<class UObject*>& InItems, const class FString& SearchString, bool bAllowFolders, bool bAllowFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "FilterContentItemsExact");

	Params::BrickSaveFileLibrary_FilterContentItemsExact Parms{};

	Parms.InItems = std::move(InItems);
	Parms.SearchString = std::move(SearchString);
	Parms.bAllowFolders = bAllowFolders;
	Parms.bAllowFiles = bAllowFiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.FilterContentItemsExactArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UObject*>&           InItems                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            FolderNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            FileNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UObject*>*                 OutFilteredItems                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBrickSaveFileLibrary::FilterContentItemsExactArray(const TArray<class UObject*>& InItems, const TArray<class FString>& FolderNames, const TArray<class FString>& FileNames, TArray<class UObject*>* OutFilteredItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "FilterContentItemsExactArray");

	Params::BrickSaveFileLibrary_FilterContentItemsExactArray Parms{};

	Parms.InItems = std::move(InItems);
	Parms.FolderNames = std::move(FolderNames);
	Parms.FileNames = std::move(FileNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFilteredItems != nullptr)
		*OutFilteredItems = std::move(Parms.OutFilteredItems);
}


// Function Brickadia.BrickSaveFileLibrary.FindNextFreeSaveFileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBrickSaveFileLibrary::FindNextFreeSaveFileName(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "FindNextFreeSaveFileName");

	Params::BrickSaveFileLibrary_FindNextFreeSaveFileName Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.FindNextFreeSaveFolderName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBrickSaveFileLibrary::FindNextFreeSaveFolderName(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "FindNextFreeSaveFolderName");

	Params::BrickSaveFileLibrary_FindNextFreeSaveFolderName Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.GetSaveFileDetails
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickSaveFileDetails*           OutFileDetails                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::GetSaveFileDetails(const class FString& Path, struct FBrickSaveFileDetails* OutFileDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "GetSaveFileDetails");

	Params::BrickSaveFileLibrary_GetSaveFileDetails Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFileDetails != nullptr)
		*OutFileDetails = std::move(Parms.OutFileDetails);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.GetSaveFileInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickSaveFileInfo*              OutFileInfo                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::GetSaveFileInfo(const class FString& Path, struct FBrickSaveFileInfo* OutFileInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "GetSaveFileInfo");

	Params::BrickSaveFileLibrary_GetSaveFileInfo Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFileInfo != nullptr)
		*OutFileInfo = std::move(Parms.OutFileInfo);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.GetSaveFolderInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickSaveFolderInfo*            OutFolderInfo                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::GetSaveFolderInfo(const class FString& Path, struct FBrickSaveFolderInfo* OutFolderInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "GetSaveFolderInfo");

	Params::BrickSaveFileLibrary_GetSaveFolderInfo Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFolderInfo != nullptr)
		*OutFolderInfo = std::move(Parms.OutFolderInfo);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.IsSaveFileValid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::IsSaveFileValid(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "IsSaveFileValid");

	Params::BrickSaveFileLibrary_IsSaveFileValid Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.IsSaveFolderValid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::IsSaveFolderValid(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "IsSaveFolderValid");

	Params::BrickSaveFileLibrary_IsSaveFolderValid Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.ListSaveFolderContentItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>*                 OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutNumFolders                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutNumFiles                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::ListSaveFolderContentItems(const class FString& Path, TArray<class UObject*>* OutItems, int32* OutNumFolders, int32* OutNumFiles, int64* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "ListSaveFolderContentItems");

	Params::BrickSaveFileLibrary_ListSaveFolderContentItems Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);

	if (OutNumFolders != nullptr)
		*OutNumFolders = Parms.OutNumFolders;

	if (OutNumFiles != nullptr)
		*OutNumFiles = Parms.OutNumFiles;

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.ListSaveFolderContents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBrickSaveFolderInfo>*    OutFolders                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FBrickSaveFileInfo>*      OutFiles                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int64*                                  OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::ListSaveFolderContents(const class FString& Path, TArray<struct FBrickSaveFolderInfo>* OutFolders, TArray<struct FBrickSaveFileInfo>* OutFiles, int64* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "ListSaveFolderContents");

	Params::BrickSaveFileLibrary_ListSaveFolderContents Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFolders != nullptr)
		*OutFolders = std::move(Parms.OutFolders);

	if (OutFiles != nullptr)
		*OutFiles = std::move(Parms.OutFiles);

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.LoadBuild
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickGridComponent*              BrickGrid                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickLoadParams&          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          OutError                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::LoadBuild(const class FString& Path, class UBrickGridComponent* BrickGrid, const struct FBrickLoadParams& Params_0, class FString* OutError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "LoadBuild");

	Params::BrickSaveFileLibrary_LoadBuild Parms{};

	Parms.Path = std::move(Path);
	Parms.BrickGrid = BrickGrid;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutError != nullptr)
		*OutError = std::move(Parms.OutError);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.LoadTemplate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickLoadParams&          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          OutError                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::LoadTemplate(const class FString& Path, class ABRPlayerController* Controller, const struct FBrickLoadParams& Params_0, class FString* OutError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "LoadTemplate");

	Params::BrickSaveFileLibrary_LoadTemplate Parms{};

	Parms.Path = std::move(Path);
	Parms.Controller = Controller;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutError != nullptr)
		*OutError = std::move(Parms.OutError);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.MoveSaveFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::MoveSaveFile(const class FString& Path, const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "MoveSaveFile");

	Params::BrickSaveFileLibrary_MoveSaveFile Parms{};

	Parms.Path = std::move(Path);
	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.MoveSaveFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::MoveSaveFolder(const class FString& Path, const class FString& NewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "MoveSaveFolder");

	Params::BrickSaveFileLibrary_MoveSaveFolder Parms{};

	Parms.Path = std::move(Path);
	Parms.NewPath = std::move(NewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.OpenExplorerOnBackups
// (Final, Native, Static, Public, BlueprintCallable)

void UBrickSaveFileLibrary::OpenExplorerOnBackups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "OpenExplorerOnBackups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickSaveFileLibrary.OpenExplorerOnSavePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickSaveFileLibrary::OpenExplorerOnSavePath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "OpenExplorerOnSavePath");

	Params::BrickSaveFileLibrary_OpenExplorerOnSavePath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickSaveFileLibrary.PerformClipboardPasteOperation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bShouldCut                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CurrentBasePath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ClipboardBasePath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            ClipboardFolderPaths                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            ClipboardFilePaths                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutMissingNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutDuplicateNames                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutFailedNames                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutRecursiveFolderNames                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutNewFolderNames                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutNewFileNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::PerformClipboardPasteOperation(bool bShouldCut, const class FString& CurrentBasePath, const class FString& ClipboardBasePath, const TArray<class FString>& ClipboardFolderPaths, const TArray<class FString>& ClipboardFilePaths, TArray<class FString>* OutMissingNames, TArray<class FString>* OutDuplicateNames, TArray<class FString>* OutFailedNames, TArray<class FString>* OutRecursiveFolderNames, TArray<class FString>* OutNewFolderNames, TArray<class FString>* OutNewFileNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "PerformClipboardPasteOperation");

	Params::BrickSaveFileLibrary_PerformClipboardPasteOperation Parms{};

	Parms.bShouldCut = bShouldCut;
	Parms.CurrentBasePath = std::move(CurrentBasePath);
	Parms.ClipboardBasePath = std::move(ClipboardBasePath);
	Parms.ClipboardFolderPaths = std::move(ClipboardFolderPaths);
	Parms.ClipboardFilePaths = std::move(ClipboardFilePaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMissingNames != nullptr)
		*OutMissingNames = std::move(Parms.OutMissingNames);

	if (OutDuplicateNames != nullptr)
		*OutDuplicateNames = std::move(Parms.OutDuplicateNames);

	if (OutFailedNames != nullptr)
		*OutFailedNames = std::move(Parms.OutFailedNames);

	if (OutRecursiveFolderNames != nullptr)
		*OutRecursiveFolderNames = std::move(Parms.OutRecursiveFolderNames);

	if (OutNewFolderNames != nullptr)
		*OutNewFolderNames = std::move(Parms.OutNewFolderNames);

	if (OutNewFileNames != nullptr)
		*OutNewFileNames = std::move(Parms.OutNewFileNames);

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.SaveFileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::SaveFileExists(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "SaveFileExists");

	Params::BrickSaveFileLibrary_SaveFileExists Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveFileLibrary.SaveFolderExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickSaveFileLibrary::SaveFolderExists(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveFileLibrary", "SaveFolderExists");

	Params::BrickSaveFileLibrary_SaveFolderExists Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickSaveBuildAsyncAction.SaveBuild
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickSaveParams&          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UBrickSaveBuildAsyncAction*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickSaveBuildAsyncAction* UBrickSaveBuildAsyncAction::SaveBuild(class UObject* WorldContextObject, int32 InSequence, const struct FBrickSaveParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickSaveBuildAsyncAction", "SaveBuild");

	Params::BrickSaveBuildAsyncAction_SaveBuild Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.HierarchicalRichTextBlock.GetDecoratorByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UHierarchicalRichTextBlockDecorator>DecoratorClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHierarchicalRichTextBlockDecorator*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHierarchicalRichTextBlockDecorator* UHierarchicalRichTextBlock::GetDecoratorByClass(TSubclassOf<class UHierarchicalRichTextBlockDecorator> DecoratorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HierarchicalRichTextBlock", "GetDecoratorByClass");

	Params::HierarchicalRichTextBlock_GetDecoratorByClass Parms{};

	Parms.DecoratorClass = DecoratorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.HierarchicalRichTextBlock.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHierarchicalRichTextBlock::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HierarchicalRichTextBlock", "SetText");

	Params::HierarchicalRichTextBlock_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickLoadSaveFileScreenshotAsyncAction.AsyncLoadSaveFileScreenshot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredHeight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickLoadSaveFileScreenshotAsyncAction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickLoadSaveFileScreenshotAsyncAction* UBrickLoadSaveFileScreenshotAsyncAction::AsyncLoadSaveFileScreenshot(class UObject* WorldContextObject, int32 InSequence, const class FString& Path, int32 DesiredWidth, int32 DesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickLoadSaveFileScreenshotAsyncAction", "AsyncLoadSaveFileScreenshot");

	Params::BrickLoadSaveFileScreenshotAsyncAction_AsyncLoadSaveFileScreenshot Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.Path = std::move(Path);
	Parms.DesiredWidth = DesiredWidth;
	Parms.DesiredHeight = DesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickGetSaveFileDetailsAsyncAction.AsyncGetSaveFileDetails
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickGetSaveFileDetailsAsyncAction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickGetSaveFileDetailsAsyncAction* UBrickGetSaveFileDetailsAsyncAction::AsyncGetSaveFileDetails(class UObject* WorldContextObject, int32 InSequence, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickGetSaveFileDetailsAsyncAction", "AsyncGetSaveFileDetails");

	Params::BrickGetSaveFileDetailsAsyncAction_AsyncGetSaveFileDetails Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettingsBase_AutoSave.SetAnnounceAutoSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_AutoSave::SetAnnounceAutoSave(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_AutoSave", "SetAnnounceAutoSave");

	Params::BRServerSettingsBase_AutoSave_SetAnnounceAutoSave Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_AutoSave.SetAutoSaveInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_AutoSave::SetAutoSaveInterval(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_AutoSave", "SetAutoSaveInterval");

	Params::BRServerSettingsBase_AutoSave_SetAutoSaveInterval Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_AutoSave.SetEnableAutoSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_AutoSave::SetEnableAutoSave(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_AutoSave", "SetEnableAutoSave");

	Params::BRServerSettingsBase_AutoSave_SetEnableAutoSave Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_AutoSave.SetIncludeScreenshot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_AutoSave::SetIncludeScreenshot(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_AutoSave", "SetIncludeScreenshot");

	Params::BRServerSettingsBase_AutoSave_SetIncludeScreenshot Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickListSaveFolderContentItemsAsyncAction.AsyncListSaveFolderContentItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSequence                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickListSaveFolderContentItemsAsyncAction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickListSaveFolderContentItemsAsyncAction* UBrickListSaveFolderContentItemsAsyncAction::AsyncListSaveFolderContentItems(class UObject* WorldContextObject, int32 InSequence, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickListSaveFolderContentItemsAsyncAction", "AsyncListSaveFolderContentItems");

	Params::BrickListSaveFolderContentItemsAsyncAction_AsyncListSaveFolderContentItems Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InSequence = InSequence;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionManagerComponent.AbortTransaction
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::AbortTransaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "AbortTransaction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.DeleteTransactionHistory
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::DeleteTransactionHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "DeleteTransactionHistory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.ForceCompleteTransaction
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::ForceCompleteTransaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "ForceCompleteTransaction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.ForceDiscardMostRecentUndoEntry
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::ForceDiscardMostRecentUndoEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "ForceDiscardMostRecentUndoEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.HandleServerRemapColors
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TMap<struct FColor, struct FColor>&Mappings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::HandleServerRemapColors(const TMap<struct FColor, struct FColor>& Mappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "HandleServerRemapColors");

	Params::BrickTransactionManagerComponent_HandleServerRemapColors Parms{};

	Parms.Mappings = std::move(Mappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.PopTransactionContext
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::PopTransactionContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "PopTransactionContext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.PushNewTransaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBrickTransaction*                Transaction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickReverseTransactionMergeMode       MergeMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OptionalMergeTag                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeferInitialTick                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceCompleteImmediately                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickTransactionTickResult*            OutInitialTickResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::PushNewTransaction(class UBrickTransaction* Transaction, EBrickReverseTransactionMergeMode MergeMode, class FName OptionalMergeTag, bool bDeferInitialTick, bool bForceCompleteImmediately, EBrickTransactionTickResult* OutInitialTickResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "PushNewTransaction");

	Params::BrickTransactionManagerComponent_PushNewTransaction Parms{};

	Parms.Transaction = Transaction;
	Parms.MergeMode = MergeMode;
	Parms.OptionalMergeTag = OptionalMergeTag;
	Parms.bDeferInitialTick = bDeferInitialTick;
	Parms.bForceCompleteImmediately = bForceCompleteImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInitialTickResult != nullptr)
		*OutInitialTickResult = Parms.OutInitialTickResult;
}


// Function Brickadia.BrickTransactionManagerComponent.PushTransactionContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::PushTransactionContext(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "PushTransactionContext");

	Params::BrickTransactionManagerComponent_PushTransactionContext Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.ResetTransactionMergeTag
// (Final, Native, Public, BlueprintCallable)

void UBrickTransactionManagerComponent::ResetTransactionMergeTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "ResetTransactionMergeTag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionManagerComponent.TryRedoTransaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bDeferInitialTick                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceCompleteImmediately                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickTransactionTickResult*            OutInitialTickResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::TryRedoTransaction(bool bDeferInitialTick, bool bForceCompleteImmediately, EBrickTransactionTickResult* OutInitialTickResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "TryRedoTransaction");

	Params::BrickTransactionManagerComponent_TryRedoTransaction Parms{};

	Parms.bDeferInitialTick = bDeferInitialTick;
	Parms.bForceCompleteImmediately = bForceCompleteImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInitialTickResult != nullptr)
		*OutInitialTickResult = Parms.OutInitialTickResult;
}


// Function Brickadia.BrickTransactionManagerComponent.TryUndoTransaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bDeferInitialTick                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceCompleteImmediately                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickTransactionTickResult*            OutInitialTickResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::TryUndoTransaction(bool bDeferInitialTick, bool bForceCompleteImmediately, EBrickTransactionTickResult* OutInitialTickResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "TryUndoTransaction");

	Params::BrickTransactionManagerComponent_TryUndoTransaction Parms{};

	Parms.bDeferInitialTick = bDeferInitialTick;
	Parms.bForceCompleteImmediately = bForceCompleteImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInitialTickResult != nullptr)
		*OutInitialTickResult = Parms.OutInitialTickResult;
}


// Function Brickadia.BrickTransactionManagerComponent.AppendPendingCustomInformation
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FText>&                    OutReportLines                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::AppendPendingCustomInformation(TArray<class FText>& OutReportLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "AppendPendingCustomInformation");

	Params::BrickTransactionManagerComponent_AppendPendingCustomInformation Parms{};

	Parms.OutReportLines = std::move(OutReportLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutReportLines = std::move(Parms.OutReportLines);
}


// Function Brickadia.BrickTransactionManagerComponent.AppendPendingErrorInformation
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FText>&                    OutReportLines                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::AppendPendingErrorInformation(TArray<class FText>& OutReportLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "AppendPendingErrorInformation");

	Params::BrickTransactionManagerComponent_AppendPendingErrorInformation Parms{};

	Parms.OutReportLines = std::move(OutReportLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutReportLines = std::move(Parms.OutReportLines);
}


// Function Brickadia.BrickTransactionManagerComponent.AppendPendingStatusInformation
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class FText>&                    OutReportLines                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTransactionManagerComponent::AppendPendingStatusInformation(TArray<class FText>& OutReportLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "AppendPendingStatusInformation");

	Params::BrickTransactionManagerComponent_AppendPendingStatusInformation Parms{};

	Parms.OutReportLines = std::move(OutReportLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutReportLines = std::move(Parms.OutReportLines);
}


// Function Brickadia.BrickTransactionManagerComponent.CanRedoTransaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTransactionManagerComponent::CanRedoTransaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "CanRedoTransaction");

	Params::BrickTransactionManagerComponent_CanRedoTransaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionManagerComponent.CanUndoTransaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTransactionManagerComponent::CanUndoTransaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "CanUndoTransaction");

	Params::BrickTransactionManagerComponent_CanUndoTransaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionManagerComponent.GetCurrentTransactionContextName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBrickTransactionManagerComponent::GetCurrentTransactionContextName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "GetCurrentTransactionContextName");

	Params::BrickTransactionManagerComponent_GetCurrentTransactionContextName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionManagerComponent.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickTransactionManagerState           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBrickTransactionManagerState UBrickTransactionManagerComponent::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "GetState");

	Params::BrickTransactionManagerComponent_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionManagerComponent.IsIdle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTransactionManagerComponent::IsIdle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransactionManagerComponent", "IsIdle");

	Params::BrickTransactionManagerComponent_IsIdle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransaction.AddAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBrickTransaction::AddAction(int32 Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransaction", "AddAction");

	Params::BrickTransaction_AddAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransaction.HasAnyWork
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBrickTransaction::HasAnyWork() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickTransaction", "HasAnyWork");

	Params::BrickTransaction_HasAnyWork Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.ValidatePresetName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPresetSubsystem::ValidatePresetName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPresetSubsystem", "ValidatePresetName");

	Params::BRPresetSubsystem_ValidatePresetName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.CreatePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPresetDescriptor*              Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPreset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPreset* UBRPresetSubsystem::CreatePreset(class UBRPresetDescriptor* Descriptor, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "CreatePreset");

	Params::BRPresetSubsystem_CreatePreset Parms{};

	Parms.Descriptor = Descriptor;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.DeletePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPresetSubsystem::DeletePreset(class UBRPreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "DeletePreset");

	Params::BRPresetSubsystem_DeletePreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.GetPreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBRPresetDescriptor*              Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPreset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPreset* UBRPresetSubsystem::GetPreset(class UBRPresetDescriptor* Descriptor, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "GetPreset");

	Params::BRPresetSubsystem_GetPreset Parms{};

	Parms.Descriptor = Descriptor;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.GetPresetDescriptor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             DescriptorName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPresetDescriptor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPresetDescriptor* UBRPresetSubsystem::GetPresetDescriptor(class FName DescriptorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "GetPresetDescriptor");

	Params::BRPresetSubsystem_GetPresetDescriptor Parms{};

	Parms.DescriptorName = DescriptorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.GetPresetDescriptors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class UBRPresetDescriptor*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UBRPresetDescriptor*> UBRPresetSubsystem::GetPresetDescriptors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "GetPresetDescriptors");

	Params::BRPresetSubsystem_GetPresetDescriptors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.GetPresetsByType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBRPresetDescriptor*              Descriptor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBRPreset*>*               OutPresets                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRPresetSubsystem::GetPresetsByType(class UBRPresetDescriptor* Descriptor, TArray<class UBRPreset*>* OutPresets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "GetPresetsByType");

	Params::BRPresetSubsystem_GetPresetsByType Parms{};

	Parms.Descriptor = Descriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPresets != nullptr)
		*OutPresets = std::move(Parms.OutPresets);
}


// Function Brickadia.BRPresetSubsystem.HasPreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UBRPresetDescriptor*        Descriptor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPresetSubsystem::HasPreset(const class UBRPresetDescriptor* Descriptor, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "HasPreset");

	Params::BRPresetSubsystem_HasPreset Parms{};

	Parms.Descriptor = Descriptor;
	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPresetSubsystem.OnPresetDescriptorsLoaded
// (Final, Native, Public)

void UBRPresetSubsystem::OnPresetDescriptorsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "OnPresetDescriptorsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPresetSubsystem.RenamePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPreset*                        Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPresetSubsystem::RenamePreset(class UBRPreset* Preset, const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetSubsystem", "RenamePreset");

	Params::BRPresetSubsystem_RenamePreset Parms{};

	Parms.Preset = Preset;
	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTransactionLibrary.AppendApplicatorPaste
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickTransaction*                Transaction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 NewCollisionChannels                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UBrickComponentTypeBase*>&NewComponentTypes                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FInspectorPropertyChangelist>&NewComponentChangelists                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBrickTransactionLibrary::AppendApplicatorPaste(class UObject* WorldContext, class UBrickTransaction* Transaction, const struct FBrickHandle& BrickHandle, bool bNewVisibility, EBrickCollisionChannels NewCollisionChannels, const TArray<class UBrickComponentTypeBase*>& NewComponentTypes, const TArray<struct FInspectorPropertyChangelist>& NewComponentChangelists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickTransactionLibrary", "AppendApplicatorPaste");

	Params::BrickTransactionLibrary_AppendApplicatorPaste Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Transaction = Transaction;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.bNewVisibility = bNewVisibility;
	Parms.NewCollisionChannels = NewCollisionChannels;
	Parms.NewComponentTypes = std::move(NewComponentTypes);
	Parms.NewComponentChangelists = std::move(NewComponentChangelists);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTransactionLibrary.AppendDeletes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrickTransaction*                Transaction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FBrickPersistentHandle>&PersistentHandles                                      (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBrickTransactionLibrary::AppendDeletes(class UBrickTransaction* Transaction, const TArray<struct FBrickPersistentHandle>& PersistentHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickTransactionLibrary", "AppendDeletes");

	Params::BrickTransactionLibrary_AppendDeletes Parms{};

	Parms.Transaction = Transaction;
	Parms.PersistentHandles = std::move(PersistentHandles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickType.FindBestStudGroupIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBrickAnchorType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBrickType::FindBestStudGroupIndex(EBrickAnchorType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickType", "FindBestStudGroupIndex");

	Params::BrickType_FindBestStudGroupIndex Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickType.GetBrickAsset
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickAsset*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickAsset* UBrickType::GetBrickAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickType", "GetBrickAsset");

	Params::BrickType_GetBrickAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickType.GetBrickSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickType::GetBrickSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickType", "GetBrickSize");

	Params::BrickType_GetBrickSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickType.GetHalfSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBrickType::GetHalfSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BrickType", "GetHalfSize");

	Params::BrickType_GetHalfSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponAnimInstance.GetFigureIsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRWeaponAnimInstance::GetFigureIsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAnimInstance", "GetFigureIsValid");

	Params::BRWeaponAnimInstance_GetFigureIsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponAnimInstance.GetLeftHandSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBRWeaponAnimInstance::GetLeftHandSocketTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAnimInstance", "GetLeftHandSocketTransform");

	Params::BRWeaponAnimInstance_GetLeftHandSocketTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTabWidget.HandleClicked
// (Final, Native, Protected)

void UBRTabWidget::HandleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "HandleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.HandleHovered
// (Final, Native, Protected)

void UBRTabWidget::HandleHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "HandleHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.HandleUnhovered
// (Final, Native, Protected)

void UBRTabWidget::HandleUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "HandleUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.SetTabEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTabWidget::SetTabEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "SetTabEnabled");

	Params::BRTabWidget_SetTabEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.SetTabIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Icon                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTabWidget::SetTabIcon(class UTexture2D* Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "SetTabIcon");

	Params::BRTabWidget_SetTabIcon Parms{};

	Parms.Icon = Icon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.SetTabText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRTabWidget::SetTabText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "SetTabText");

	Params::BRTabWidget_SetTabText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.SetTabVisiblySelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTabWidget::SetTabVisiblySelected(bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "SetTabVisiblySelected");

	Params::BRTabWidget_SetTabVisiblySelected Parms{};

	Parms.bSelected = bSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabWidget.GetTabEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRTabWidget::GetTabEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabWidget", "GetTabEnabled");

	Params::BRTabWidget_GetTabEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRApplicatorHoverWidget.Setup
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRApplicatorHoverWidget::Setup(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRApplicatorHoverWidget", "Setup");

	Params::BRApplicatorHoverWidget_Setup Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.CancelSaveFileUpload
// (Final, Native, Public, BlueprintCallable)

void ABRPlayerController::CancelSaveFileUpload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "CancelSaveFileUpload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.CheckBrickPermission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              Brick                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      NoPermissionMessage                                    (Parm, NativeAccessSpecifierPublic)
// const class FText&                      NoTrustMessage                                         (Parm, NativeAccessSpecifierPublic)
// bool                                    bMessageUnreliable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::CheckBrickPermission(const struct FBrickHandle& Brick, class FName Permission, const class FText& NoPermissionMessage, const class FText& NoTrustMessage, bool bMessageUnreliable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "CheckBrickPermission");

	Params::BRPlayerController_CheckBrickPermission Parms{};

	Parms.Brick = std::move(Brick);
	Parms.Permission = Permission;
	Parms.NoPermissionMessage = std::move(NoPermissionMessage);
	Parms.NoTrustMessage = std::move(NoTrustMessage);
	Parms.bMessageUnreliable = bMessageUnreliable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.CheckEntityPermission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      NoPermissionMessage                                    (Parm, NativeAccessSpecifierPublic)
// const class FText&                      NoTrustMessage                                         (Parm, NativeAccessSpecifierPublic)
// bool                                    bMessageUnreliable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::CheckEntityPermission(class AActor* ENTITY, class FName Permission, const class FText& NoPermissionMessage, const class FText& NoTrustMessage, bool bMessageUnreliable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "CheckEntityPermission");

	Params::BRPlayerController_CheckEntityPermission Parms{};

	Parms.ENTITY = ENTITY;
	Parms.Permission = Permission;
	Parms.NoPermissionMessage = std::move(NoPermissionMessage);
	Parms.NoTrustMessage = std::move(NoTrustMessage);
	Parms.bMessageUnreliable = bMessageUnreliable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.CheckPermission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      NoPermissionMessage                                    (Parm, NativeAccessSpecifierPublic)
// bool                                    bMessageUnreliable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::CheckPermission(class FName Permission, const class FText& NoPermissionMessage, bool bMessageUnreliable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "CheckPermission");

	Params::BRPlayerController_CheckPermission Parms{};

	Parms.Permission = Permission;
	Parms.NoPermissionMessage = std::move(NoPermissionMessage);
	Parms.bMessageUnreliable = bMessageUnreliable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.ClearCheckPoint
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void ABRPlayerController::ClearCheckPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClearCheckPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientAckSaveFileUpload
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bBeginUpload                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientAckSaveFileUpload(bool bBeginUpload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientAckSaveFileUpload");

	Params::BRPlayerController_ClientAckSaveFileUpload Parms{};

	Parms.bBeginUpload = bBeginUpload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientInstigatedAccumulatedDamage
// (Net, Native, Event, Public, NetClient)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsHeadshot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsKill                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsBlocked                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientInstigatedAccumulatedDamage(float Damage, bool bContainsHeadshot, bool bContainsKill, bool bContainsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientInstigatedAccumulatedDamage");

	Params::BRPlayerController_ClientInstigatedAccumulatedDamage Parms{};

	Parms.Damage = Damage;
	Parms.bContainsHeadshot = bContainsHeadshot;
	Parms.bContainsKill = bContainsKill;
	Parms.bContainsBlocked = bContainsBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientModifyTrustCacheEntry
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrusted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientModifyTrustCacheEntry(const struct FBRGuid& OtherUserId, bool bTrusted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientModifyTrustCacheEntry");

	Params::BRPlayerController_ClientModifyTrustCacheEntry Parms{};

	Parms.OtherUserId = std::move(OtherUserId);
	Parms.bTrusted = bTrusted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientModifyTrustedByCacheEntry
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrustedBy                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientModifyTrustedByCacheEntry(const struct FBRGuid& OtherUserId, bool bTrustedBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientModifyTrustedByCacheEntry");

	Params::BRPlayerController_ClientModifyTrustedByCacheEntry Parms{};

	Parms.OtherUserId = std::move(OtherUserId);
	Parms.bTrustedBy = bTrustedBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientPlaySound2D
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientPlaySound2D(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientPlaySound2D");

	Params::BRPlayerController_ClientPlaySound2D Parms{};

	Parms.Sound = Sound;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientPushChatMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientPushChatMessage(const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientPushChatMessage");

	Params::BRPlayerController_ClientPushChatMessage Parms{};

	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientPushPlayerChatMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const class FString&                    FormattedChatMessage                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RawChatMessage                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   SenderState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientPushPlayerChatMessage(const class FString& FormattedChatMessage, const class FString& RawChatMessage, class ABRPlayerState* SenderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientPushPlayerChatMessage");

	Params::BRPlayerController_ClientPushPlayerChatMessage Parms{};

	Parms.FormattedChatMessage = std::move(FormattedChatMessage);
	Parms.RawChatMessage = std::move(RawChatMessage);
	Parms.SenderState = SenderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientPushStatusMessage
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// const class FString&                    StatusMessage                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlashIfUnchanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoClear                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientPushStatusMessage(const class FString& StatusMessage, bool bFlashIfUnchanged, bool bAutoClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientPushStatusMessage");

	Params::BRPlayerController_ClientPushStatusMessage Parms{};

	Parms.StatusMessage = std::move(StatusMessage);
	Parms.bFlashIfUnchanged = bFlashIfUnchanged;
	Parms.bAutoClear = bAutoClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientPushUnreliableStatusMessage
// (Net, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// const class FString&                    StatusMessage                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlashIfUnchanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoClear                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientPushUnreliableStatusMessage(const class FString& StatusMessage, bool bFlashIfUnchanged, bool bAutoClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientPushUnreliableStatusMessage");

	Params::BRPlayerController_ClientPushUnreliableStatusMessage Parms{};

	Parms.StatusMessage = std::move(StatusMessage);
	Parms.bFlashIfUnchanged = bFlashIfUnchanged;
	Parms.bAutoClear = bAutoClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientReceivedAccumulatedDamage
// (Net, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsHeadshot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientReceivedAccumulatedDamage(float Damage, bool bContainsHeadshot, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientReceivedAccumulatedDamage");

	Params::BRPlayerController_ClientReceivedAccumulatedDamage Parms{};

	Parms.Damage = Damage;
	Parms.bContainsHeadshot = bContainsHeadshot;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientReceiveDeathNotification
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ABRPlayerState*                   DeadPlayerState                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   KillerPlayerState                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientReceiveDeathNotification(class ABRPlayerState* DeadPlayerState, const class UDamageType* DeathType, class ABRPlayerState* KillerPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientReceiveDeathNotification");

	Params::BRPlayerController_ClientReceiveDeathNotification Parms{};

	Parms.DeadPlayerState = DeadPlayerState;
	Parms.DeathType = DeathType;
	Parms.KillerPlayerState = KillerPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientReceiveRespawnNotification
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ABRPlayerState*                   RespawnedPlayerState                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientReceiveRespawnNotification(class ABRPlayerState* RespawnedPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientReceiveRespawnNotification");

	Params::BRPlayerController_ClientReceiveRespawnNotification Parms{};

	Parms.RespawnedPlayerState = RespawnedPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientReplaceTrustCache
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const TArray<struct FBRGuid>&           inArray                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientReplaceTrustCache(const TArray<struct FBRGuid>& inArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientReplaceTrustCache");

	Params::BRPlayerController_ClientReplaceTrustCache Parms{};

	Parms.inArray = std::move(inArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientReplaceTrustedByCache
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const TArray<struct FBRGuid>&           inArray                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientReplaceTrustedByCache(const TArray<struct FBRGuid>& inArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientReplaceTrustedByCache");

	Params::BRPlayerController_ClientReplaceTrustedByCache Parms{};

	Parms.inArray = std::move(inArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientRotateControlRotation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// const struct FQuat&                     DeltaQuat                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientRotateControlRotation(const struct FQuat& DeltaQuat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientRotateControlRotation");

	Params::BRPlayerController_ClientRotateControlRotation Parms{};

	Parms.DeltaQuat = std::move(DeltaQuat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientSetControlRotation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewControlRotation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientSetControlRotation(const struct FRotator& NewControlRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientSetControlRotation");

	Params::BRPlayerController_ClientSetControlRotation Parms{};

	Parms.NewControlRotation = std::move(NewControlRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ClientSetIsSpectator
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIsSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ClientSetIsSpectator(bool bIsSpectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ClientSetIsSpectator");

	Params::BRPlayerController_ClientSetIsSpectator Parms{};

	Parms.bIsSpectator = bIsSpectator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.GetGameTypeAddedComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ABRPlayerController::GetGameTypeAddedComponent(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetGameTypeAddedComponent");

	Params::BRPlayerController_GetGameTypeAddedComponent Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.HandlePossessedPawnTakePointDamage
// (Final, Native, Public, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ShotFromDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::HandlePossessedPawnTakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "HandlePossessedPawnTakePointDamage");

	Params::BRPlayerController_HandlePossessedPawnTakePointDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitComponent = HitComponent;
	Parms.BoneName = BoneName;
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.HandlePossessedPawnTakeRadialDamage
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DamageType                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::HandlePossessedPawnTakeRadialDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "HandlePossessedPawnTakeRadialDamage");

	Params::BRPlayerController_HandlePossessedPawnTakeRadialDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.Origin = std::move(Origin);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.JoinMinigame
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::JoinMinigame(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "JoinMinigame");

	Params::BRPlayerController_JoinMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.JoinRuleset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRRuleset*                       Ruleset                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRespawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutomatic                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::JoinRuleset(class ABRRuleset* Ruleset, bool bRespawn, bool bAutomatic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "JoinRuleset");

	Params::BRPlayerController_JoinRuleset Parms{};

	Parms.Ruleset = Ruleset;
	Parms.bRespawn = bRespawn;
	Parms.bAutomatic = bAutomatic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.JoinRulesetTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRespawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMessage                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::JoinRulesetTeam(int32 TeamId, bool bRespawn, bool bMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "JoinRulesetTeam");

	Params::BRPlayerController_JoinRulesetTeam Parms{};

	Parms.TeamId = TeamId;
	Parms.bRespawn = bRespawn;
	Parms.bMessage = bMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.LocalInstigatedAccumulatedDamage
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsHeadshot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsKill                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsBlocked                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::LocalInstigatedAccumulatedDamage(float Damage, bool bContainsHeadshot, bool bContainsKill, bool bContainsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "LocalInstigatedAccumulatedDamage");

	Params::BRPlayerController_LocalInstigatedAccumulatedDamage Parms{};

	Parms.Damage = Damage;
	Parms.bContainsHeadshot = bContainsHeadshot;
	Parms.bContainsKill = bContainsKill;
	Parms.bContainsBlocked = bContainsBlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.LocalReceivedAccumulatedDamage
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContainsHeadshot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::LocalReceivedAccumulatedDamage(float Damage, bool bContainsHeadshot, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "LocalReceivedAccumulatedDamage");

	Params::BRPlayerController_LocalReceivedAccumulatedDamage Parms{};

	Parms.Damage = Damage;
	Parms.bContainsHeadshot = bContainsHeadshot;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.NotifyCameraEnterWater
// (Event, Public, BlueprintEvent)

void ABRPlayerController::NotifyCameraEnterWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "NotifyCameraEnterWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRPlayerController.NotifyCameraExitWater
// (Event, Public, BlueprintEvent)

void ABRPlayerController::NotifyCameraExitWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "NotifyCameraExitWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRPlayerController.OnBrickTemplateLoadReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBrickBuildingTemplate*           Template                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::OnBrickTemplateLoadReady(class UBrickBuildingTemplate* Template)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "OnBrickTemplateLoadReady");

	Params::BRPlayerController_OnBrickTemplateLoadReady Parms{};

	Parms.Template = Template;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.OnSpectatorStateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::OnSpectatorStateChange(bool bIsSpectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "OnSpectatorStateChange");

	Params::BRPlayerController_OnSpectatorStateChange Parms{};

	Parms.bIsSpectator = bIsSpectator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.ReachGoalPoint
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              GoalPoint                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ReachGoalPoint(const struct FBrickHandle& GoalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ReachGoalPoint");

	Params::BRPlayerController_ReachGoalPoint Parms{};

	Parms.GoalPoint = std::move(GoalPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.RestartPlayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRemoveOldCharacter                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::RestartPlayer(bool bRemoveOldCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "RestartPlayer");

	Params::BRPlayerController_RestartPlayer Parms{};

	Parms.bRemoveOldCharacter = bRemoveOldCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAddBrickTypeToInventory
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickTypeNetWrapper&      BrickType                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuickbarRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAddBrickTypeToInventory(const struct FBrickTypeNetWrapper& BrickType, int32 QuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAddBrickTypeToInventory");

	Params::BRPlayerController_ServerAddBrickTypeToInventory Parms{};

	Parms.BrickType = std::move(BrickType);
	Parms.QuickbarRange = QuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAddEntityTypeToInventory
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBREntityTypeBase>    EntityType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuickbarRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAddEntityTypeToInventory(TSubclassOf<class UBREntityTypeBase> EntityType, int32 QuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAddEntityTypeToInventory");

	Params::BRPlayerController_ServerAddEntityTypeToInventory Parms{};

	Parms.EntityType = EntityType;
	Parms.QuickbarRange = QuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAddItemToInventory
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class ABRItemBase>          ItemType                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuickbarRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAddItemToInventory(TSubclassOf<class ABRItemBase> ItemType, int32 QuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAddItemToInventory");

	Params::BRPlayerController_ServerAddItemToInventory Parms{};

	Parms.ItemType = ItemType;
	Parms.QuickbarRange = QuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAdminAction_BanPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   VictimId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 Expiry                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAdminAction_BanPlayer(const struct FBRGuid& VictimId, const struct FDateTime& Expiry, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAdminAction_BanPlayer");

	Params::BRPlayerController_ServerAdminAction_BanPlayer Parms{};

	Parms.VictimId = std::move(VictimId);
	Parms.Expiry = std::move(Expiry);
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAdminAction_ClearObjects
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   VictimId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAdminAction_ClearObjects(const struct FBRGuid& VictimId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAdminAction_ClearObjects");

	Params::BRPlayerController_ServerAdminAction_ClearObjects Parms{};

	Parms.VictimId = std::move(VictimId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAdminAction_KickPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   VictimId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAdminAction_KickPlayer(const struct FBRGuid& VictimId, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAdminAction_KickPlayer");

	Params::BRPlayerController_ServerAdminAction_KickPlayer Parms{};

	Parms.VictimId = std::move(VictimId);
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerAdminAction_Teleport
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   From                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   To                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerAdminAction_Teleport(class ABRPlayerState* From, class ABRPlayerState* To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerAdminAction_Teleport");

	Params::BRPlayerController_ServerAdminAction_Teleport Parms{};

	Parms.From = From;
	Parms.To = To;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerBeginSaveFileUpload
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const class FString&                    SaveFile                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickLoadParams&          Params_0                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bForTemplate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ExpectedTotalSize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerBeginSaveFileUpload(const class FString& SaveFile, const struct FBrickLoadParams& Params_0, bool bForTemplate, int64 ExpectedTotalSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerBeginSaveFileUpload");

	Params::BRPlayerController_ServerBeginSaveFileUpload Parms{};

	Parms.SaveFile = std::move(SaveFile);
	Parms.Params_0 = std::move(Params_0);
	Parms.bForTemplate = bForTemplate;
	Parms.ExpectedTotalSize = ExpectedTotalSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerCancelSaveFileUpload
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ABRPlayerController::ServerCancelSaveFileUpload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerCancelSaveFileUpload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerClearInventorySlot
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerClearInventorySlot(int32 Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerClearInventorySlot");

	Params::BRPlayerController_ServerClearInventorySlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerClearInventoryTempSlot
// (Net, Native, Event, Public, NetServer, BlueprintCallable)

void ABRPlayerController::ServerClearInventoryTempSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerClearInventoryTempSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerJoinMinigame
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerJoinMinigame(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerJoinMinigame");

	Params::BRPlayerController_ServerJoinMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerJoinRuleset
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class ABRRuleset*                       Ruleset                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerJoinRuleset(class ABRRuleset* Ruleset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerJoinRuleset");

	Params::BRPlayerController_ServerJoinRuleset Parms{};

	Parms.Ruleset = Ruleset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerJoinRulesetTeam
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerJoinRulesetTeam(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerJoinRulesetTeam");

	Params::BRPlayerController_ServerJoinRulesetTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerNotifyTrustLevelChange
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrusted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerNotifyTrustLevelChange(const struct FBRGuid& OtherUserId, bool bTrusted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerNotifyTrustLevelChange");

	Params::BRPlayerController_ServerNotifyTrustLevelChange Parms{};

	Parms.OtherUserId = std::move(OtherUserId);
	Parms.bTrusted = bTrusted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerPushChatMessage
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerPushChatMessage(const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerPushChatMessage");

	Params::BRPlayerController_ServerPushChatMessage Parms{};

	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventorySlotBrickType
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickTypeNetWrapper&      BrickType                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventorySlotBrickType(int32 Slot, const struct FBrickTypeNetWrapper& BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventorySlotBrickType");

	Params::BRPlayerController_ServerSetInventorySlotBrickType Parms{};

	Parms.Slot = Slot;
	Parms.BrickType = std::move(BrickType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventorySlotEntityType
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBREntityTypeBase>    EntityType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventorySlotEntityType(int32 Slot, TSubclassOf<class UBREntityTypeBase> EntityType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventorySlotEntityType");

	Params::BRPlayerController_ServerSetInventorySlotEntityType Parms{};

	Parms.Slot = Slot;
	Parms.EntityType = EntityType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventorySlotItem
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ABRItemBase>          ItemType                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventorySlotItem(int32 Slot, TSubclassOf<class ABRItemBase> ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventorySlotItem");

	Params::BRPlayerController_ServerSetInventorySlotItem Parms{};

	Parms.Slot = Slot;
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotBrickType
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickTypeNetWrapper&      BrickType                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventoryTempSlotBrickType(const struct FBrickTypeNetWrapper& BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventoryTempSlotBrickType");

	Params::BRPlayerController_ServerSetInventoryTempSlotBrickType Parms{};

	Parms.BrickType = std::move(BrickType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotEntityType
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBREntityTypeBase>    EntityType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventoryTempSlotEntityType(TSubclassOf<class UBREntityTypeBase> EntityType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventoryTempSlotEntityType");

	Params::BRPlayerController_ServerSetInventoryTempSlotEntityType Parms{};

	Parms.EntityType = EntityType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetInventoryTempSlotItem
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// TSubclassOf<class ABRItemBase>          ItemType                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetInventoryTempSlotItem(TSubclassOf<class ABRItemBase> ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetInventoryTempSlotItem");

	Params::BRPlayerController_ServerSetInventoryTempSlotItem Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSetTyping
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bTyping                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSetTyping(bool bTyping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSetTyping");

	Params::BRPlayerController_ServerSetTyping Parms{};

	Parms.bTyping = bTyping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.ServerSwapInventorySlots
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   SlotA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotB                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::ServerSwapInventorySlots(int32 SlotA, int32 SlotB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "ServerSwapInventorySlots");

	Params::BRPlayerController_ServerSwapInventorySlots Parms{};

	Parms.SlotA = SlotA;
	Parms.SlotB = SlotB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.SetCheckPoint
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              CheckPoint                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetCheckPoint(const struct FBrickHandle& CheckPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetCheckPoint");

	Params::BRPlayerController_SetCheckPoint Parms{};

	Parms.CheckPoint = std::move(CheckPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.SetFreezeCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFreeze                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetFreezeCamera(bool bFreeze)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetFreezeCamera");

	Params::BRPlayerController_SetFreezeCamera Parms{};

	Parms.bFreeze = bFreeze;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.SetGlobalTrust
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrusted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetGlobalTrust(const struct FBRGuid& OtherUserId, bool bTrusted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetGlobalTrust");

	Params::BRPlayerController_SetGlobalTrust Parms{};

	Parms.OtherUserId = std::move(OtherUserId);
	Parms.bTrusted = bTrusted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.SetIsSpectator
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsSpectator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetIsSpectator(bool bIsSpectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetIsSpectator");

	Params::BRPlayerController_SetIsSpectator Parms{};

	Parms.bIsSpectator = bIsSpectator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerController.SetLoadingIconEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetLoadingIconEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetLoadingIconEnabled");

	Params::BRPlayerController_SetLoadingIconEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.SetLoadingIconStatus
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ProgressBar                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerController::SetLoadingIconStatus(const class FText& Text, bool ProgressBar, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "SetLoadingIconStatus");

	Params::BRPlayerController_SetLoadingIconStatus Parms{};

	Parms.Text = std::move(Text);
	Parms.ProgressBar = ProgressBar;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRPlayerController.UploadSaveFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SaveFile                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickLoadParams&          Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bForTemplate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutError                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::UploadSaveFile(const class FString& SaveFile, const struct FBrickLoadParams& Params_0, bool bForTemplate, class FString* OutError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "UploadSaveFile");

	Params::BRPlayerController_UploadSaveFile Parms{};

	Parms.SaveFile = std::move(SaveFile);
	Parms.Params_0 = std::move(Params_0);
	Parms.bForTemplate = bForTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutError != nullptr)
		*OutError = std::move(Parms.OutError);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetActorsThisControllerCanSpectate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ABRPlayerController::GetActorsThisControllerCanSpectate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetActorsThisControllerCanSpectate");

	Params::BRPlayerController_GetActorsThisControllerCanSpectate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetBRPlayerInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlayerInput*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlayerInput* ABRPlayerController::GetBRPlayerInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetBRPlayerInput");

	Params::BRPlayerController_GetBRPlayerInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetBRPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRPlayerController::GetBRPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetBRPlayerState");

	Params::BRPlayerController_GetBRPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetCheckPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBrickHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickHandle ABRPlayerController::GetCheckPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetCheckPoint");

	Params::BRPlayerController_GetCheckPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetFreezeCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::GetFreezeCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetFreezeCamera");

	Params::BRPlayerController_GetFreezeCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetIsSpectator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::GetIsSpectator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetIsSpectator");

	Params::BRPlayerController_GetIsSpectator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.GetSaveFileUploadProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABRPlayerController::GetSaveFileUploadProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "GetSaveFileUploadProgress");

	Params::BRPlayerController_GetSaveFileUploadProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.HasLivingCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::HasLivingCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "HasLivingCharacter");

	Params::BRPlayerController_HasLivingCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.IsActuallyTrustedBy
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::IsActuallyTrustedBy(const struct FBRGuid& OtherUserId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "IsActuallyTrustedBy");

	Params::BRPlayerController_IsActuallyTrustedBy Parms{};

	Parms.OtherUserId = std::move(OtherUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.IsTrustedBy
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::IsTrustedBy(const struct FBRGuid& OtherUserId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "IsTrustedBy");

	Params::BRPlayerController_IsTrustedBy Parms{};

	Parms.OtherUserId = std::move(OtherUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.IsTrustedByEveryone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::IsTrustedByEveryone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "IsTrustedByEveryone");

	Params::BRPlayerController_IsTrustedByEveryone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.IsUploadingSaveFile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::IsUploadingSaveFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "IsUploadingSaveFile");

	Params::BRPlayerController_IsUploadingSaveFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerController.TrustsUserOnServer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBRGuid&                   OtherUserId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPlayerController::TrustsUserOnServer(const struct FBRGuid& OtherUserId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerController", "TrustsUserOnServer");

	Params::BRPlayerController_TrustsUserOnServer Parms{};

	Parms.OtherUserId = std::move(OtherUserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRManipulatorInputCapturer.LookUp
// (Final, Native, Public)
// Parameters:
// float                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRManipulatorInputCapturer::LookUp(float Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRManipulatorInputCapturer", "LookUp");

	Params::BRManipulatorInputCapturer_LookUp Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRManipulatorInputCapturer.LookUpRate
// (Final, Native, Public)
// Parameters:
// float                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRManipulatorInputCapturer::LookUpRate(float Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRManipulatorInputCapturer", "LookUpRate");

	Params::BRManipulatorInputCapturer_LookUpRate Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRManipulatorInputCapturer.Turn
// (Final, Native, Public)
// Parameters:
// float                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRManipulatorInputCapturer::Turn(float Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRManipulatorInputCapturer", "Turn");

	Params::BRManipulatorInputCapturer_Turn Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRManipulatorInputCapturer.TurnRate
// (Final, Native, Public)
// Parameters:
// float                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRManipulatorInputCapturer::TurnRate(float Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRManipulatorInputCapturer", "TurnRate");

	Params::BRManipulatorInputCapturer_TurnRate Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPresetDescriptor.OpenExplorerOnPath
// (Final, Native, Public, BlueprintCallable)

void UBRPresetDescriptor::OpenExplorerOnPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetDescriptor", "OpenExplorerOnPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPresetDescriptor.GetPresetPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRPresetDescriptor::GetPresetPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPresetDescriptor", "GetPresetPath");

	Params::BRPresetDescriptor_GetPresetPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponAmmoWidget.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRWeaponResource*                InResource                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUsePlayerSupply                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponAmmoWidget::Setup(class UBRWeaponResource* InResource, bool bInUsePlayerSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAmmoWidget", "Setup");

	Params::BRWeaponAmmoWidget_Setup Parms{};

	Parms.InResource = InResource;
	Parms.bInUsePlayerSupply = bInUsePlayerSupply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponAmmoWidget.UpdateAmmo
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Loaded                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Loadable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Supply                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Supplyable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRWeaponResourceUsageOverride          ResourceUsageOverride                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideSupply                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponAmmoWidget::UpdateAmmo(int32 Loaded, int32 Loadable, int32 Supply, int32 Supplyable, EBRWeaponResourceUsageOverride ResourceUsageOverride, bool bHideSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAmmoWidget", "UpdateAmmo");

	Params::BRWeaponAmmoWidget_UpdateAmmo Parms{};

	Parms.Loaded = Loaded;
	Parms.Loadable = Loadable;
	Parms.Supply = Supply;
	Parms.Supplyable = Supplyable;
	Parms.ResourceUsageOverride = ResourceUsageOverride;
	Parms.bHideSupply = bHideSupply;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWeaponAmmoWidget.UpdateWeaponIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Icon                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponAmmoWidget::UpdateWeaponIcon(class UTexture2D* Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAmmoWidget", "UpdateWeaponIcon");

	Params::BRWeaponAmmoWidget_UpdateWeaponIcon Parms{};

	Parms.Icon = Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWeaponAmmoWidget.UpdateWeaponResourceIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Icon                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWeaponAmmoWidget::UpdateWeaponResourceIcon(class UTexture2D* Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponAmmoWidget", "UpdateWeaponResourceIcon");

	Params::BRWeaponAmmoWidget_UpdateWeaponResourceIcon Parms{};

	Parms.Icon = Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Connector.Audio_OnClosePortSelector
// (Event, Public, BlueprintEvent)

void ABRTool_Connector::Audio_OnClosePortSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnClosePortSelector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Connector.Audio_OnCreateConnection
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   EndPortPos                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPortNormal                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRConnectorDisplayedPortType           EndPortType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::Audio_OnCreateConnection(const struct FVector& EndPortPos, const struct FVector& EndPortNormal, EBRConnectorDisplayedPortType EndPortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnCreateConnection");

	Params::BRTool_Connector_Audio_OnCreateConnection Parms{};

	Parms.EndPortPos = std::move(EndPortPos);
	Parms.EndPortNormal = std::move(EndPortNormal);
	Parms.EndPortType = EndPortType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Connector.Audio_OnFinishConnecting
// (Event, Public, BlueprintEvent)

void ABRTool_Connector::Audio_OnFinishConnecting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnFinishConnecting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Connector.Audio_OnMouseOverPort
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   PortPos                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PortNormal                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRConnectorDisplayedPortType           PortType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::Audio_OnMouseOverPort(const struct FVector& PortPos, const struct FVector& PortNormal, EBRConnectorDisplayedPortType PortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnMouseOverPort");

	Params::BRTool_Connector_Audio_OnMouseOverPort Parms{};

	Parms.PortPos = std::move(PortPos);
	Parms.PortNormal = std::move(PortNormal);
	Parms.PortType = PortType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Connector.Audio_OnOpenPortSelector
// (Event, Public, BlueprintEvent)

void ABRTool_Connector::Audio_OnOpenPortSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnOpenPortSelector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Connector.Audio_OnRemoveConnection
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   EndPortPos                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPortNormal                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRConnectorDisplayedPortType           EndPortType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::Audio_OnRemoveConnection(const struct FVector& EndPortPos, const struct FVector& EndPortNormal, EBRConnectorDisplayedPortType EndPortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnRemoveConnection");

	Params::BRTool_Connector_Audio_OnRemoveConnection Parms{};

	Parms.EndPortPos = std::move(EndPortPos);
	Parms.EndPortNormal = std::move(EndPortNormal);
	Parms.EndPortType = EndPortType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Connector.Audio_OnStartConnecting
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   PortPos                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PortNormal                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRConnectorDisplayedPortType           PortType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              PortColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::Audio_OnStartConnecting(const struct FVector& PortPos, const struct FVector& PortNormal, EBRConnectorDisplayedPortType PortType, const struct FLinearColor& PortColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "Audio_OnStartConnecting");

	Params::BRTool_Connector_Audio_OnStartConnecting Parms{};

	Parms.PortPos = std::move(PortPos);
	Parms.PortNormal = std::move(PortNormal);
	Parms.PortType = PortType;
	Parms.PortColor = std::move(PortColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Connector.ServerConnectOrDisconnectComponentWire
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickComponentWirePortRef&SourcePortRef                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickComponentWirePortRef&TargetPortRef                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::ServerConnectOrDisconnectComponentWire(const struct FBrickComponentWirePortRef& SourcePortRef, const struct FBrickComponentWirePortRef& TargetPortRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "ServerConnectOrDisconnectComponentWire");

	Params::BRTool_Connector_ServerConnectOrDisconnectComponentWire Parms{};

	Parms.SourcePortRef = std::move(SourcePortRef);
	Parms.TargetPortRef = std::move(TargetPortRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Connector.ServerDisconnectComponentWirePort
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickComponentWirePortRef&PortRef                                                (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOutputPort                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Connector::ServerDisconnectComponentWirePort(const struct FBrickComponentWirePortRef& PortRef, bool bIsOutputPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Connector", "ServerDisconnectComponentWirePort");

	Params::BRTool_Connector_ServerDisconnectComponentWirePort Parms{};

	Parms.PortRef = std::move(PortRef);
	Parms.bIsOutputPort = bIsOutputPort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BrickTypeNetWrapperStatics.BreakBrickTypeNetWrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBrickTypeNetWrapper&      Wrapper                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBrickTypeNetWrapperStatics::BreakBrickTypeNetWrapper(const struct FBrickTypeNetWrapper& Wrapper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickTypeNetWrapperStatics", "BreakBrickTypeNetWrapper");

	Params::BrickTypeNetWrapperStatics_BreakBrickTypeNetWrapper Parms{};

	Parms.Wrapper = std::move(Wrapper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BrickTypeNetWrapperStatics.MakeBrickTypeNetWrapper
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBrickType*                       BrickType                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBrickTypeNetWrapper             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FBrickTypeNetWrapper UBrickTypeNetWrapperStatics::MakeBrickTypeNetWrapper(class UBrickType* BrickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BrickTypeNetWrapperStatics", "MakeBrickTypeNetWrapper");

	Params::BrickTypeNetWrapperStatics_MakeBrickTypeNetWrapper Parms{};

	Parms.BrickType = BrickType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRChatCommandWorldSubsystem.CheckArgumentTypes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FString>&            Arguments                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<EBRChatCommandArgType>*          ArgTypesOut                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::CheckArgumentTypes(const TArray<class FString>& Arguments, TArray<EBRChatCommandArgType>* ArgTypesOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRChatCommandWorldSubsystem", "CheckArgumentTypes");

	Params::BRChatCommandWorldSubsystem_CheckArgumentTypes Parms{};

	Parms.Arguments = std::move(Arguments);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ArgTypesOut != nullptr)
		*ArgTypesOut = std::move(Parms.ArgTypesOut);
}


// Function Brickadia.BRChatCommandWorldSubsystem.SplitArguments
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  ArgumentsOut                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::SplitArguments(const class FString& Source, TArray<class FString>* ArgumentsOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRChatCommandWorldSubsystem", "SplitArguments");

	Params::BRChatCommandWorldSubsystem_SplitArguments Parms{};

	Parms.Source = std::move(Source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ArgumentsOut != nullptr)
		*ArgumentsOut = std::move(Parms.ArgumentsOut);
}


// Function Brickadia.BRChatCommandWorldSubsystem.CallChatCommand
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerController*              Caller                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ArgsString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::CallChatCommand(class ABRPlayerController* Caller, class FName Command, const class FString& ArgsString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "CallChatCommand");

	Params::BRChatCommandWorldSubsystem_CallChatCommand Parms{};

	Parms.Caller = Caller;
	Parms.Command = Command;
	Parms.ArgsString = std::move(ArgsString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandWorldSubsystem.CallChatCommandWithArgs
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Args                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::CallChatCommandWithArgs(const struct FBRChatCommandContext& Context, class FName Command, const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "CallChatCommandWithArgs");

	Params::BRChatCommandWorldSubsystem_CallChatCommandWithArgs Parms{};

	Parms.Context = std::move(Context);
	Parms.Command = Command;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandWorldSubsystem.ShowHelpStringsForCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRChatCommandContext&     Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAdvanced                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::ShowHelpStringsForCommand(class FName Command, const struct FBRChatCommandContext& Context, bool bAdvanced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "ShowHelpStringsForCommand");

	Params::BRChatCommandWorldSubsystem_ShowHelpStringsForCommand Parms{};

	Parms.Command = Command;
	Parms.Context = std::move(Context);
	Parms.bAdvanced = bAdvanced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRChatCommandWorldSubsystem.ChatCommandExists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRChatCommandWorldSubsystem::ChatCommandExists(class FName Command) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "ChatCommandExists");

	Params::BRChatCommandWorldSubsystem_ChatCommandExists Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRChatCommandWorldSubsystem.GetChatCommandList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>*                    Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::GetChatCommandList(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "GetChatCommandList");

	Params::BRChatCommandWorldSubsystem_GetChatCommandList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRChatCommandWorldSubsystem.GetChatCommandMetaDataForAllOverloads
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBRChatCommandMetaData>*  Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::GetChatCommandMetaDataForAllOverloads(class FName Command, TArray<struct FBRChatCommandMetaData>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "GetChatCommandMetaDataForAllOverloads");

	Params::BRChatCommandWorldSubsystem_GetChatCommandMetaDataForAllOverloads Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRChatCommandWorldSubsystem.GetCommandFormatHelpStrings
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  HelpStrings                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::GetCommandFormatHelpStrings(class FName Command, TArray<class FString>* HelpStrings) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "GetCommandFormatHelpStrings");

	Params::BRChatCommandWorldSubsystem_GetCommandFormatHelpStrings Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HelpStrings != nullptr)
		*HelpStrings = std::move(Parms.HelpStrings);
}


// Function Brickadia.BRChatCommandWorldSubsystem.GetNumOverloadsForCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRChatCommandWorldSubsystem::GetNumOverloadsForCommand(class FName Command) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "GetNumOverloadsForCommand");

	Params::BRChatCommandWorldSubsystem_GetNumOverloadsForCommand Parms{};

	Parms.Command = Command;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRChatCommandWorldSubsystem.IsChatCommandCallableForAllOverloads
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABRPlayerController*        Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<bool>*                           Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRChatCommandWorldSubsystem::IsChatCommandCallableForAllOverloads(class FName Command, const class ABRPlayerController* Controller, TArray<bool>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRChatCommandWorldSubsystem", "IsChatCommandCallableForAllOverloads");

	Params::BRChatCommandWorldSubsystem_IsChatCommandCallableForAllOverloads Parms{};

	Parms.Command = Command;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRImageCacheSubsystem.InvalidateAll
// (Final, Native, Public, BlueprintCallable)

void UBRImageCacheSubsystem::InvalidateAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRImageCacheSubsystem", "InvalidateAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRImageCacheSubsystem.InvalidateImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRImageCacheKey&          Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRImageCacheSubsystem::InvalidateImage(const struct FBRImageCacheKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRImageCacheSubsystem", "InvalidateImage");

	Params::BRImageCacheSubsystem_InvalidateImage Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRImageCacheSubsystem.InvalidateTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Tag                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRImageCacheSubsystem::InvalidateTag(const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRImageCacheSubsystem", "InvalidateTag");

	Params::BRImageCacheSubsystem_InvalidateTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRImageCacheSubsystem.RetrieveImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRImageCacheKey&          Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UBRImageCacheSubsystem::RetrieveImage(const struct FBRImageCacheKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRImageCacheSubsystem", "RetrieveImage");

	Params::BRImageCacheSubsystem_RetrieveImage Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRImageCacheSubsystem.StoreImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRImageCacheKey&          Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         Image                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRImageCacheSubsystem::StoreImage(const struct FBRImageCacheKey& Key, class UTexture* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRImageCacheSubsystem", "StoreImage");

	Params::BRImageCacheSubsystem_StoreImage Parms{};

	Parms.Key = std::move(Key);
	Parms.Image = Image;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetMember.GetAffiliatedTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* IBRRulesetMember::GetAffiliatedTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMember", "GetAffiliatedTeam");

	Params::BRRulesetMember_GetAffiliatedTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetMember.GetOwningMemberState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* IBRRulesetMember::GetOwningMemberState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMember", "GetOwningMemberState");

	Params::BRRulesetMember_GetOwningMemberState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetMember.GetRuleset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* IBRRulesetMember::GetRuleset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMember", "GetRuleset");

	Params::BRRulesetMember_GetRuleset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInputIconPartWidget.SetIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       InIcon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInputIconPartWidget::SetIcon(class UTexture2D* InIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputIconPartWidget", "SetIcon");

	Params::BRInputIconPartWidget_SetIcon Parms{};

	Parms.InIcon = InIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInputIconWidget.HandleInputBindingsChanged
// (Final, Native, Private)
// Parameters:
// class UBRGameSettingsBase*              SettingsObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInputIconWidget::HandleInputBindingsChanged(class UBRGameSettingsBase* SettingsObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputIconWidget", "HandleInputBindingsChanged");

	Params::BRInputIconWidget_HandleInputBindingsChanged Parms{};

	Parms.SettingsObject = SettingsObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInputIconWidget.SetInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InInputName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsAxis                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInputIconWidget::SetInput(class FName InInputName, bool bInIsAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInputIconWidget", "SetInput");

	Params::BRInputIconWidget_SetInput Parms{};

	Parms.InInputName = InInputName;
	Parms.bInIsAxis = bInIsAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryEntryBase.OnClientEntryReady
// (Final, Native, Public)

void UBRInventoryEntryBase::OnClientEntryReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "OnClientEntryReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryEntryBase.GetItemInstance
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRItemBase*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRItemBase* UBRInventoryEntryBase::GetItemInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetItemInstance");

	Params::BRInventoryEntryBase_GetItemInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetOwningBRCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* UBRInventoryEntryBase::GetOwningBRCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetOwningBRCharacter");

	Params::BRInventoryEntryBase_GetOwningBRCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetOwningBRPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* UBRInventoryEntryBase::GetOwningBRPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetOwningBRPlayerController");

	Params::BRInventoryEntryBase_GetOwningBRPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetOwningBRPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* UBRInventoryEntryBase::GetOwningBRPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetOwningBRPlayerState");

	Params::BRInventoryEntryBase_GetOwningBRPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetOwningInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryComponent* UBRInventoryEntryBase::GetOwningInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetOwningInventory");

	Params::BRInventoryEntryBase_GetOwningInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetSubType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRInventoryEntryBase::GetSubType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetSubType");

	Params::BRInventoryEntryBase_GetSubType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetThumbnailObject
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UBRInventoryEntryBase::GetThumbnailObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetThumbnailObject");

	Params::BRInventoryEntryBase_GetThumbnailObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntryBase.GetThumbnailProcessor
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UThumbnailProcessor>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UThumbnailProcessor> UBRInventoryEntryBase::GetThumbnailProcessor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntryBase", "GetThumbnailProcessor");

	Params::BRInventoryEntryBase_GetThumbnailProcessor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntry_Item.GetItemType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ABRItemBase>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ABRItemBase> UBRInventoryEntry_Item::GetItemType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntry_Item", "GetItemType");

	Params::BRInventoryEntry_Item_GetItemType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntry_BrickType.GetBrickType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBrickType*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBrickType* UBRInventoryEntry_BrickType::GetBrickType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntry_BrickType", "GetBrickType");

	Params::BRInventoryEntry_BrickType_GetBrickType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryEntry_EntityType.GetEntityType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBREntityTypeBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBREntityTypeBase* UBRInventoryEntry_EntityType::GetEntityType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryEntry_EntityType", "GetEntityType");

	Params::BRInventoryEntry_EntityType_GetEntityType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.AddEntry
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuickbarRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::AddEntry(TSubclassOf<class UBRInventoryEntryBase> Type, class UObject* SubType, int32 QuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "AddEntry");

	Params::BRInventoryComponent_AddEntry Parms{};

	Parms.Type = Type;
	Parms.SubType = SubType;
	Parms.QuickbarRange = QuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.AddEntry2
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QuickbarRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::AddEntry2(TSubclassOf<class UBRInventoryEntryBase> Type, class UClass* SubType, int32 QuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "AddEntry2");

	Params::BRInventoryComponent_AddEntry2 Parms{};

	Parms.Type = Type;
	Parms.SubType = SubType;
	Parms.QuickbarRange = QuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.Clear
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRInventoryComponent::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.OnClientEntryReady
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UBRInventoryEntryBase*            Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryComponent::OnClientEntryReady(class UBRInventoryEntryBase* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "OnClientEntryReady");

	Params::BRInventoryComponent_OnClientEntryReady Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.OnRep_Items
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<class UBRInventoryEntryBase*>&OldItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRInventoryComponent::OnRep_Items(const TArray<class UBRInventoryEntryBase*>& OldItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "OnRep_Items");

	Params::BRInventoryComponent_OnRep_Items Parms{};

	Parms.OldItems = std::move(OldItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.OnRep_TempSlot
// (Final, Native, Private)

void UBRInventoryComponent::OnRep_TempSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "OnRep_TempSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.PushbackQuickbarRange
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRInventoryComponent::PushbackQuickbarRange(int32 Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "PushbackQuickbarRange");

	Params::BRInventoryComponent_PushbackQuickbarRange Parms{};

	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.SetNum
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryComponent::SetNum(int32 NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SetNum");

	Params::BRInventoryComponent_SetNum Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.SetSlotEntry
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::SetSlotEntry(int32 Slot, TSubclassOf<class UBRInventoryEntryBase> Type, class UObject* SubType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SetSlotEntry");

	Params::BRInventoryComponent_SetSlotEntry Parms{};

	Parms.Slot = Slot;
	Parms.Type = Type;
	Parms.SubType = SubType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.SetSlotEntry2
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::SetSlotEntry2(int32 Slot, TSubclassOf<class UBRInventoryEntryBase> Type, class UClass* SubType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SetSlotEntry2");

	Params::BRInventoryComponent_SetSlotEntry2 Parms{};

	Parms.Slot = Slot;
	Parms.Type = Type;
	Parms.SubType = SubType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.SetTempSlotEntry
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::SetTempSlotEntry(TSubclassOf<class UBRInventoryEntryBase> Type, class UObject* SubType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SetTempSlotEntry");

	Params::BRInventoryComponent_SetTempSlotEntry Parms{};

	Parms.Type = Type;
	Parms.SubType = SubType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.SetTempSlotEntry2
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UBRInventoryEntryBase>Type                                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           SubType                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::SetTempSlotEntry2(TSubclassOf<class UBRInventoryEntryBase> Type, class UClass* SubType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SetTempSlotEntry2");

	Params::BRInventoryComponent_SetTempSlotEntry2 Parms{};

	Parms.Type = Type;
	Parms.SubType = SubType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.SwapSlots
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotB                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryComponent::SwapSlots(int32 SlotA, int32 SlotB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "SwapSlots");

	Params::BRInventoryComponent_SwapSlots Parms{};

	Parms.SlotA = SlotA;
	Parms.SlotB = SlotB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryComponent.Contains
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRInventoryComponent::Contains(class UBRInventoryEntryBase* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "Contains");

	Params::BRInventoryComponent_Contains Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.GetOwningBRCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* UBRInventoryComponent::GetOwningBRCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "GetOwningBRCharacter");

	Params::BRInventoryComponent_GetOwningBRCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.GetOwningBRPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* UBRInventoryComponent::GetOwningBRPlayerController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "GetOwningBRPlayerController");

	Params::BRInventoryComponent_GetOwningBRPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.GetOwningBRPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* UBRInventoryComponent::GetOwningBRPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "GetOwningBRPlayerState");

	Params::BRInventoryComponent_GetOwningBRPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.GetSlotEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::GetSlotEntry(int32 Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "GetSlotEntry");

	Params::BRInventoryComponent_GetSlotEntry Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.GetTempSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventoryComponent::GetTempSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "GetTempSlot");

	Params::BRInventoryComponent_GetTempSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.IndexOf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRInventoryComponent::IndexOf(class UBRInventoryEntryBase* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "IndexOf");

	Params::BRInventoryComponent_IndexOf Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.IndexOfInQuickbarRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRInventoryEntryBase*      Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRInventoryComponent::IndexOfInQuickbarRange(const class UBRInventoryEntryBase* Item, int32 Range) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "IndexOfInQuickbarRange");

	Params::BRInventoryComponent_IndexOfInQuickbarRange Parms{};

	Parms.Item = Item;
	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.Num
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRInventoryComponent::Num() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "Num");

	Params::BRInventoryComponent_Num Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryComponent.QuickbarRangeContains
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRInventoryEntryBase*      Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRInventoryComponent::QuickbarRangeContains(const class UBRInventoryEntryBase* Item, int32 Range) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryComponent", "QuickbarRangeContains");

	Params::BRInventoryComponent_QuickbarRangeContains Parms{};

	Parms.Item = Item;
	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventorySlotWidget.SetBeingDraggedVisual
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bDragged                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventorySlotWidget::SetBeingDraggedVisual(bool bDragged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventorySlotWidget", "SetBeingDraggedVisual");

	Params::BRInventorySlotWidget_SetBeingDraggedVisual Parms{};

	Parms.bDragged = bDragged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRInventorySlotWidget.SetDisplayedEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRInventoryEntryBase*            Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventorySlotWidget::SetDisplayedEntry(class UBRInventoryEntryBase* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventorySlotWidget", "SetDisplayedEntry");

	Params::BRInventorySlotWidget_SetDisplayedEntry Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventorySlotWidget.SetSelectedVisual
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventorySlotWidget::SetSelectedVisual(bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventorySlotWidget", "SetSelectedVisual");

	Params::BRInventorySlotWidget_SetSelectedVisual Parms{};

	Parms.bSelected = bSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRInventorySlotWidget.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InSlotIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHideQuickbarNumber                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventorySlotWidget::Setup(int32 InSlotIndex, bool bHideQuickbarNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventorySlotWidget", "Setup");

	Params::BRInventorySlotWidget_Setup Parms{};

	Parms.InSlotIndex = InSlotIndex;
	Parms.bHideQuickbarNumber = bHideQuickbarNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventorySlotWidget.GetDisplayedEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryEntryBase*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryEntryBase* UBRInventorySlotWidget::GetDisplayedEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventorySlotWidget", "GetDisplayedEntry");

	Params::BRInventorySlotWidget_GetDisplayedEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRInventoryWidget.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRInventoryComponent*            InInventory                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryWidget::Setup(class UBRInventoryComponent* InInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryWidget", "Setup");

	Params::BRInventoryWidget_Setup Parms{};

	Parms.InInventory = InInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryWidget.SetupInternal
// (Final, Native, Private)
// Parameters:
// int32                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryWidget::SetupInternal(int32 NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryWidget", "SetupInternal");

	Params::BRInventoryWidget_SetupInternal Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryWidget.SlotChanged
// (Final, Native, Private)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ItemInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRInventoryWidget::SlotChanged(int32 SlotIndex, class UBRInventoryEntryBase* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryWidget", "SlotChanged");

	Params::BRInventoryWidget_SlotChanged Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemInstance = ItemInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRInventoryWidget.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRInventoryComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRInventoryComponent* UBRInventoryWidget::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRInventoryWidget", "GetInventory");

	Params::BRInventoryWidget_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarDisplayWidget.CharacterInventoryEntryChanged
// (Native, Protected)
// Parameters:
// class UBRInventoryEntryBase*            Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::CharacterInventoryEntryChanged(class UBRInventoryEntryBase* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "CharacterInventoryEntryChanged");

	Params::BRQuickbarDisplayWidget_CharacterInventoryEntryChanged Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.SelectNextQuickbarRange
// (Native, Public, BlueprintCallable)

void UBRQuickbarDisplayWidget::SelectNextQuickbarRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "SelectNextQuickbarRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.SelectPreviousQuickbarRange
// (Native, Public, BlueprintCallable)

void UBRQuickbarDisplayWidget::SelectPreviousQuickbarRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "SelectPreviousQuickbarRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.SetQuickbarRange
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewQuickbarRange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::SetQuickbarRange(int32 NewQuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "SetQuickbarRange");

	Params::BRQuickbarDisplayWidget_SetQuickbarRange Parms{};

	Parms.NewQuickbarRange = NewQuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRCharacter*                     InCharacter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InitialQuickbarRange                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::Setup(class ABRCharacter* InCharacter, int32 InitialQuickbarRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "Setup");

	Params::BRQuickbarDisplayWidget_Setup Parms{};

	Parms.InCharacter = InCharacter;
	Parms.InitialQuickbarRange = InitialQuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.SetupInternal
// (Native, Protected)
// Parameters:
// int32                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::SetupInternal(int32 NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "SetupInternal");

	Params::BRQuickbarDisplayWidget_SetupInternal Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.SlotChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRInventoryEntryBase*            ItemInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::SlotChanged(int32 SlotIndex, class UBRInventoryEntryBase* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "SlotChanged");

	Params::BRQuickbarDisplayWidget_SlotChanged Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemInstance = ItemInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.TempSlotChanged
// (Native, Protected)
// Parameters:
// class UBRInventoryEntryBase*            ItemInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarDisplayWidget::TempSlotChanged(class UBRInventoryEntryBase* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "TempSlotChanged");

	Params::BRQuickbarDisplayWidget_TempSlotChanged Parms{};

	Parms.ItemInstance = ItemInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarDisplayWidget.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRCharacter*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRCharacter* UBRQuickbarDisplayWidget::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "GetCharacter");

	Params::BRQuickbarDisplayWidget_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarDisplayWidget.GetQuickbarRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRQuickbarDisplayWidget::GetQuickbarRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "GetQuickbarRange");

	Params::BRQuickbarDisplayWidget_GetQuickbarRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasNextQuickbarRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRQuickbarDisplayWidget::InventoryHasNextQuickbarRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "InventoryHasNextQuickbarRange");

	Params::BRQuickbarDisplayWidget_InventoryHasNextQuickbarRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasPreviousQuickbarRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRQuickbarDisplayWidget::InventoryHasPreviousQuickbarRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "InventoryHasPreviousQuickbarRange");

	Params::BRQuickbarDisplayWidget_InventoryHasPreviousQuickbarRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarDisplayWidget.InventoryHasQuickbarRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NewQuickbarRange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRQuickbarDisplayWidget::InventoryHasQuickbarRange(int32 NewQuickbarRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarDisplayWidget", "InventoryHasQuickbarRange");

	Params::BRQuickbarDisplayWidget_InventoryHasQuickbarRange Parms{};

	Parms.NewQuickbarRange = NewQuickbarRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarWidget.ClearSelectedViewSlot
// (Final, Native, Public, BlueprintCallable)

void UBRQuickbarWidget::ClearSelectedViewSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "ClearSelectedViewSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.InternalSelectViewSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarWidget::InternalSelectViewSlot(int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "InternalSelectViewSlot");

	Params::BRQuickbarWidget_InternalSelectViewSlot Parms{};

	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.SelectNextViewSlot
// (Final, Native, Public, BlueprintCallable)

void UBRQuickbarWidget::SelectNextViewSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "SelectNextViewSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.SelectPreviousViewSlot
// (Final, Native, Public, BlueprintCallable)

void UBRQuickbarWidget::SelectPreviousViewSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "SelectPreviousViewSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.SelectViewSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToggle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarWidget::SelectViewSlot(int32 SlotIndex, bool bToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "SelectViewSlot");

	Params::BRQuickbarWidget_SelectViewSlot Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.bToggle = bToggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.SetShownInstant
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewShown                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRQuickbarWidget::SetShownInstant(bool bNewShown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "SetShownInstant");

	Params::BRQuickbarWidget_SetShownInstant Parms{};

	Parms.bNewShown = bNewShown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRQuickbarWidget.ToggleOpen
// (Final, Native, Public, BlueprintCallable)

void UBRQuickbarWidget::ToggleOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "ToggleOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRQuickbarWidget.GetSelectedInventorySlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRQuickbarWidget::GetSelectedInventorySlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "GetSelectedInventorySlot");

	Params::BRQuickbarWidget_GetSelectedInventorySlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRQuickbarWidget.GetSelectedViewSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRQuickbarWidget::GetSelectedViewSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRQuickbarWidget", "GetSelectedViewSlot");

	Params::BRQuickbarWidget_GetSelectedViewSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRMasterCatalogDialog.HandleBrickCatalogLeftClickEntry
// (Final, Native, Private)
// Parameters:
// class UObject*                          EntryPayload                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMasterCatalogDialog::HandleBrickCatalogLeftClickEntry(class UObject* EntryPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMasterCatalogDialog", "HandleBrickCatalogLeftClickEntry");

	Params::BRMasterCatalogDialog_HandleBrickCatalogLeftClickEntry Parms{};

	Parms.EntryPayload = EntryPayload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMasterCatalogDialog.HandleBrickCatalogMiddleClickEntry
// (Final, Native, Private)
// Parameters:
// class UObject*                          EntryPayload                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMasterCatalogDialog::HandleBrickCatalogMiddleClickEntry(class UObject* EntryPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMasterCatalogDialog", "HandleBrickCatalogMiddleClickEntry");

	Params::BRMasterCatalogDialog_HandleBrickCatalogMiddleClickEntry Parms{};

	Parms.EntryPayload = EntryPayload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMasterCatalogDialog.HandleItemCatalogLeftClickEntry
// (Final, Native, Private)
// Parameters:
// class UObject*                          EntryPayload                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMasterCatalogDialog::HandleItemCatalogLeftClickEntry(class UObject* EntryPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMasterCatalogDialog", "HandleItemCatalogLeftClickEntry");

	Params::BRMasterCatalogDialog_HandleItemCatalogLeftClickEntry Parms{};

	Parms.EntryPayload = EntryPayload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMasterCatalogDialog.HandleItemCatalogMiddleClickEntry
// (Final, Native, Private)
// Parameters:
// class UObject*                          EntryPayload                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMasterCatalogDialog::HandleItemCatalogMiddleClickEntry(class UObject* EntryPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMasterCatalogDialog", "HandleItemCatalogMiddleClickEntry");

	Params::BRMasterCatalogDialog_HandleItemCatalogMiddleClickEntry Parms{};

	Parms.EntryPayload = EntryPayload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMasterCatalogDialog.OnItemCatalogLoaded
// (Final, Native, Private)
// Parameters:
// class UBRCatalog*                       CreatedCatalog                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMasterCatalogDialog::OnItemCatalogLoaded(class UBRCatalog* CreatedCatalog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMasterCatalogDialog", "OnItemCatalogLoaded");

	Params::BRMasterCatalogDialog_OnItemCatalogLoaded Parms{};

	Parms.CreatedCatalog = CreatedCatalog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerClearMinigameTeams
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerClearMinigameTeams(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerClearMinigameTeams");

	Params::BRMinigameManagerComponent_ServerClearMinigameTeams Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerCreateMinigame
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBRGameTypeDescriptor*            GameTypeDescriptor                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&GameTypeSettings                                       (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&UnassignedTeamSettings                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FInspectorPropertyChangelist>&TeamSettings                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerCreateMinigame(const struct FInspectorPropertyChangelist& Settings, class UBRGameTypeDescriptor* GameTypeDescriptor, const struct FInspectorPropertyChangelist& GameTypeSettings, const struct FInspectorPropertyChangelist& UnassignedTeamSettings, const TArray<struct FInspectorPropertyChangelist>& TeamSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerCreateMinigame");

	Params::BRMinigameManagerComponent_ServerCreateMinigame Parms{};

	Parms.Settings = std::move(Settings);
	Parms.GameTypeDescriptor = GameTypeDescriptor;
	Parms.GameTypeSettings = std::move(GameTypeSettings);
	Parms.UnassignedTeamSettings = std::move(UnassignedTeamSettings);
	Parms.TeamSettings = std::move(TeamSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerCreateMinigameTeam
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    AfterName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerCreateMinigameTeam(int32 MinigameId, const struct FInspectorPropertyChangelist& Settings, const class FString& AfterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerCreateMinigameTeam");

	Params::BRMinigameManagerComponent_ServerCreateMinigameTeam Parms{};

	Parms.MinigameId = MinigameId;
	Parms.Settings = std::move(Settings);
	Parms.AfterName = std::move(AfterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerDestroyMinigame
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerDestroyMinigame(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerDestroyMinigame");

	Params::BRMinigameManagerComponent_ServerDestroyMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerRemoveMinigameTeam
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RemoveName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerRemoveMinigameTeam(int32 MinigameId, const class FString& RemoveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerRemoveMinigameTeam");

	Params::BRMinigameManagerComponent_ServerRemoveMinigameTeam Parms{};

	Parms.MinigameId = MinigameId;
	Parms.RemoveName = std::move(RemoveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerReorderMinigameTeam
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MoveName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AfterName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerReorderMinigameTeam(int32 MinigameId, const class FString& MoveName, const class FString& AfterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerReorderMinigameTeam");

	Params::BRMinigameManagerComponent_ServerReorderMinigameTeam Parms{};

	Parms.MinigameId = MinigameId;
	Parms.MoveName = std::move(MoveName);
	Parms.AfterName = std::move(AfterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerResetMinigame
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerResetMinigame(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerResetMinigame");

	Params::BRMinigameManagerComponent_ServerResetMinigame Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerStartNextMinigameRound
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerStartNextMinigameRound(int32 MinigameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerStartNextMinigameRound");

	Params::BRMinigameManagerComponent_ServerStartNextMinigameRound Parms{};

	Parms.MinigameId = MinigameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameGametype
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRGameTypeDescriptor*            GameTypeDescriptor                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerUpdateMinigameGametype(int32 MinigameId, class UBRGameTypeDescriptor* GameTypeDescriptor, const struct FInspectorPropertyChangelist& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerUpdateMinigameGametype");

	Params::BRMinigameManagerComponent_ServerUpdateMinigameGametype Parms{};

	Parms.MinigameId = MinigameId;
	Parms.GameTypeDescriptor = GameTypeDescriptor;
	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameGametypeSettings
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerUpdateMinigameGametypeSettings(int32 MinigameId, const struct FInspectorPropertyChangelist& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerUpdateMinigameGametypeSettings");

	Params::BRMinigameManagerComponent_ServerUpdateMinigameGametypeSettings Parms{};

	Parms.MinigameId = MinigameId;
	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameSettings
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerUpdateMinigameSettings(int32 MinigameId, const struct FInspectorPropertyChangelist& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerUpdateMinigameSettings");

	Params::BRMinigameManagerComponent_ServerUpdateMinigameSettings Parms{};

	Parms.MinigameId = MinigameId;
	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRMinigameManagerComponent.ServerUpdateMinigameTeamSettings
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   MinigameId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UpdateName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRMinigameManagerComponent::ServerUpdateMinigameTeamSettings(int32 MinigameId, const class FString& UpdateName, const struct FInspectorPropertyChangelist& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRMinigameManagerComponent", "ServerUpdateMinigameTeamSettings");

	Params::BRMinigameManagerComponent_ServerUpdateMinigameTeamSettings Parms{};

	Parms.MinigameId = MinigameId;
	Parms.UpdateName = std::move(UpdateName);
	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.GenerateDescriptorList
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInspectorPropertyDescriptorList* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptorList* UBRPermissionsRole::GenerateDescriptorList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GenerateDescriptorList");

	Params::BRPermissionsRole_GenerateDescriptorList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRPermissionsRole::GetColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GetColor");

	Params::BRPermissionsRole_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRPermissionsRole::GetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GetName");

	Params::BRPermissionsRole_GetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.GetShownColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRPermissionsRole::GetShownColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GetShownColor");

	Params::BRPermissionsRole_GetShownColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.HasColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::HasColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "HasColor");

	Params::BRPermissionsRole_HasColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.Inspector_SetPermissionState
// (Final, Native, Public)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsRole::Inspector_SetPermissionState(class FName Permission, EBRSetPermission InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "Inspector_SetPermissionState");

	Params::BRPermissionsRole_Inspector_SetPermissionState Parms{};

	Parms.Permission = Permission;
	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.OnRep_NewName
// (Final, Native, Public)

void UBRPermissionsRole::OnRep_NewName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "OnRep_NewName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.OnRep_Other
// (Final, Native, Public)

void UBRPermissionsRole::OnRep_Other()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "OnRep_Other");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    ColorIn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsRole::SetColor(const struct FColor& ColorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "SetColor");

	Params::BRPermissionsRole_SetColor Parms{};

	Parms.ColorIn = std::move(ColorIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.SetHasColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHasColorIn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsRole::SetHasColor(bool bHasColorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "SetHasColor");

	Params::BRPermissionsRole_SetHasColor Parms{};

	Parms.bHasColorIn = bHasColorIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.SetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsRole::SetName(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "SetName");

	Params::BRPermissionsRole_SetName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.SetPermissionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsRole::SetPermissionState(class FName Permission, EBRSetPermission InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "SetPermissionState");

	Params::BRPermissionsRole_SetPermissionState Parms{};

	Parms.Permission = Permission;
	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsRole.GetHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRPermissionsRole::GetHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GetHeight");

	Params::BRPermissionsRole_GetHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.GetPermissionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRSetPermission UBRPermissionsRole::GetPermissionState(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "GetPermissionState");

	Params::BRPermissionsRole_GetPermissionState Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.HasPermissionEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::HasPermissionEntry(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "HasPermissionEntry");

	Params::BRPermissionsRole_HasPermissionEntry Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.Inspector_CanEditOtherThanColor
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::Inspector_CanEditOtherThanColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "Inspector_CanEditOtherThanColor");

	Params::BRPermissionsRole_Inspector_CanEditOtherThanColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.Inspector_CanEditPermission
// (Final, Native, Public, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::Inspector_CanEditPermission(class FName Permission, class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "Inspector_CanEditPermission");

	Params::BRPermissionsRole_Inspector_CanEditPermission Parms{};

	Parms.Permission = Permission;
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.Inspector_GetPermissionState
// (Final, Native, Public, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBRSetPermission UBRPermissionsRole::Inspector_GetPermissionState(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "Inspector_GetPermissionState");

	Params::BRPermissionsRole_Inspector_GetPermissionState Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.Inspector_ShouldShowPermissionStateOption
// (Final, Native, Public, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::Inspector_ShouldShowPermissionStateOption(class FName Permission, EBRSetPermission Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "Inspector_ShouldShowPermissionStateOption");

	Params::BRPermissionsRole_Inspector_ShouldShowPermissionStateOption Parms{};

	Parms.Permission = Permission;
	Parms.Option = Option;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.IsDefaultRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::IsDefaultRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "IsDefaultRole");

	Params::BRPermissionsRole_IsDefaultRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.IsEditableTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABRPlayerController*        Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::IsEditableTo(const class ABRPlayerController* Controller) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "IsEditableTo");

	Params::BRPermissionsRole_IsEditableTo Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsRole.IsOwnerRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsRole::IsOwnerRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsRole", "IsOwnerRole");

	Params::BRPermissionsRole_IsOwnerRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWorldSaveAsDialog.AssignProvider
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IBRBundleListingProvider>InListingProvider                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWorldSaveAsDialog::AssignProvider(TScriptInterface<class IBRBundleListingProvider> InListingProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldSaveAsDialog", "AssignProvider");

	Params::BRWorldSaveAsDialog_AssignProvider Parms{};

	Parms.InListingProvider = InListingProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldSaveAsDialog.HandleSaveFailure
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Error                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRWorldSaveAsDialog::HandleSaveFailure(const class FText& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldSaveAsDialog", "HandleSaveFailure");

	Params::BRWorldSaveAsDialog_HandleSaveFailure Parms{};

	Parms.Error = std::move(Error);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWorldSaveAsDialog.HandleSaveSuccess
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBRWorldSaveResult&        Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRWorldSaveAsDialog::HandleSaveSuccess(const struct FBRWorldSaveResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldSaveAsDialog", "HandleSaveSuccess");

	Params::BRWorldSaveAsDialog_HandleSaveSuccess Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWorldSaveAsDialog.OnNameEntryChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRWorldSaveAsDialog::OnNameEntryChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldSaveAsDialog", "OnNameEntryChanged");

	Params::BRWorldSaveAsDialog_OnNameEntryChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldSaveAsDialog.OnSaveButtonClicked
// (Final, Native, Public)

void UBRWorldSaveAsDialog::OnSaveButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldSaveAsDialog", "OnSaveButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPermissionsManager*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsManager* UBRPermissionsManager::Get(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPermissionsManager", "Get");

	Params::BRPermissionsManager_Get Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.CreateOrGetPermissionsRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    RoleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoleNameToCreateAfter                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* UBRPermissionsManager::CreateOrGetPermissionsRole(const class FString& RoleName, const class FString& RoleNameToCreateAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "CreateOrGetPermissionsRole");

	Params::BRPermissionsManager_CreateOrGetPermissionsRole Parms{};

	Parms.RoleName = std::move(RoleName);
	Parms.RoleNameToCreateAfter = std::move(RoleNameToCreateAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.DestroyPermissionsRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    RoleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsManager::DestroyPermissionsRole(const class FString& RoleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "DestroyPermissionsRole");

	Params::BRPermissionsManager_DestroyPermissionsRole Parms{};

	Parms.RoleName = std::move(RoleName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.HandleRoleListChanged
// (Final, Native, Private)

void UBRPermissionsManager::HandleRoleListChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "HandleRoleListChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsManager.HandleUpdated
// (Final, Native, Public)

void UBRPermissionsManager::HandleUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "HandleUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsManager.LoadJSON
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsManager::LoadJSON(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "LoadJSON");

	Params::BRPermissionsManager_LoadJSON Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsManager.ReorderPermissionsRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RoleIdToPutAfter                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsManager::ReorderPermissionsRoles(const class FString& RoleId, const class FString& RoleIdToPutAfter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "ReorderPermissionsRoles");

	Params::BRPermissionsManager_ReorderPermissionsRoles Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.RoleIdToPutAfter = std::move(RoleIdToPutAfter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.SaveJSON
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsManager::SaveJSON(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "SaveJSON");

	Params::BRPermissionsManager_SaveJSON Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPermissionsManager.GetAllPermissionsRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> UBRPermissionsManager::GetAllPermissionsRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "GetAllPermissionsRoles");

	Params::BRPermissionsManager_GetAllPermissionsRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.GetCustomPermissionsRoles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPermissionsRole*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UBRPermissionsRole*> UBRPermissionsManager::GetCustomPermissionsRoles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "GetCustomPermissionsRoles");

	Params::BRPermissionsManager_GetCustomPermissionsRoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.GetDefaultPermissionsRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* UBRPermissionsManager::GetDefaultPermissionsRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "GetDefaultPermissionsRole");

	Params::BRPermissionsManager_GetDefaultPermissionsRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.GetOwnerPermissionsRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* UBRPermissionsManager::GetOwnerPermissionsRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "GetOwnerPermissionsRole");

	Params::BRPermissionsManager_GetOwnerPermissionsRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsManager.GetPermissionsRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RoleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* UBRPermissionsManager::GetPermissionsRole(const class FString& RoleName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsManager", "GetPermissionsRole");

	Params::BRPermissionsManager_GetPermissionsRole Parms{};

	Parms.RoleName = std::move(RoleName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionDescriptor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBRPermissionDescriptor*         DescriptorFoundIfAny                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsWorldSubsystem::GetPermissionDescriptor(class FName Permission, struct FBRPermissionDescriptor* DescriptorFoundIfAny) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionDescriptor");

	Params::BRPermissionsWorldSubsystem_GetPermissionDescriptor Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DescriptorFoundIfAny != nullptr)
		*DescriptorFoundIfAny = std::move(Parms.DescriptorFoundIfAny);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>*                    Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionIdList(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionIdList");

	Params::BRPermissionsWorldSubsystem_GetPermissionIdList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdListForDefaultRole
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>*                    Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBRPermissionDefaultForRole             DefaultForRole                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionIdListForDefaultRole(TArray<class FName>* Array, EBRPermissionDefaultForRole DefaultForRole) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionIdListForDefaultRole");

	Params::BRPermissionsWorldSubsystem_GetPermissionIdListForDefaultRole Parms{};

	Parms.DefaultForRole = DefaultForRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionIdListForGameplayPermissions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>*                    Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionIdListForGameplayPermissions(TArray<class FName>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionIdListForGameplayPermissions");

	Params::BRPermissionsWorldSubsystem_GetPermissionIdListForGameplayPermissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FBRPermissionDescriptor>* Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionList(TArray<struct FBRPermissionDescriptor>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionList");

	Params::BRPermissionsWorldSubsystem_GetPermissionList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionListForDefaultRole
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FBRPermissionDescriptor>* Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBRPermissionDefaultForRole             DefaultForRole                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionListForDefaultRole(TArray<struct FBRPermissionDescriptor>* Array, EBRPermissionDefaultForRole DefaultForRole) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionListForDefaultRole");

	Params::BRPermissionsWorldSubsystem_GetPermissionListForDefaultRole Parms{};

	Parms.DefaultForRole = DefaultForRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetPermissionListForGameplayPermissions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FBRPermissionDescriptor>* Array                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRPermissionsWorldSubsystem::GetPermissionListForGameplayPermissions(TArray<struct FBRPermissionDescriptor>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetPermissionListForGameplayPermissions");

	Params::BRPermissionsWorldSubsystem_GetPermissionListForGameplayPermissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Brickadia.BRPermissionsWorldSubsystem.GetRulesetEditPermissionsPDL
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptorList* UBRPermissionsWorldSubsystem::GetRulesetEditPermissionsPDL(class UObject* Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "GetRulesetEditPermissionsPDL");

	Params::BRPermissionsWorldSubsystem_GetRulesetEditPermissionsPDL Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionsWorldSubsystem.PermissionExists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionsWorldSubsystem::PermissionExists(class FName Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPermissionsWorldSubsystem", "PermissionExists");

	Params::BRPermissionsWorldSubsystem_PermissionExists Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionStatics.HighestOfRoleColors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class UBRPermissionsRole*>&PermissionsRoles                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRPermissionStatics::HighestOfRoleColors(const TArray<class UBRPermissionsRole*>& PermissionsRoles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPermissionStatics", "HighestOfRoleColors");

	Params::BRPermissionStatics_HighestOfRoleColors Parms{};

	Parms.PermissionsRoles = std::move(PermissionsRoles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionStatics.HighestOfRoles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class UBRPermissionsRole*>&PermissionsRoles                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UBRPermissionsRole*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPermissionsRole* UBRPermissionStatics::HighestOfRoles(const TArray<class UBRPermissionsRole*>& PermissionsRoles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPermissionStatics", "HighestOfRoles");

	Params::BRPermissionStatics_HighestOfRoles Parms{};

	Parms.PermissionsRoles = std::move(PermissionsRoles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPermissionStatics.RolesHavePermission
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class UBRPermissionsRole*>&PermissionsRoles                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPermissionStatics::RolesHavePermission(const TArray<class UBRPermissionsRole*>& PermissionsRoles, class FName Permission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPermissionStatics", "RolesHavePermission");

	Params::BRPermissionStatics_RolesHavePermission Parms{};

	Parms.PermissionsRoles = std::move(PermissionsRoles);
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPickupBase.DisablePickupWithTimeout
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPickupBase::DisablePickupWithTimeout(float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "DisablePickupWithTimeout");

	Params::BRPickupBase_DisablePickupWithTimeout Parms{};

	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.GetPickupMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* ABRPickupBase::GetPickupMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "GetPickupMesh");

	Params::BRPickupBase_GetPickupMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPickupBase.GetPickupMeshColorArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> ABRPickupBase::GetPickupMeshColorArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "GetPickupMeshColorArray");

	Params::BRPickupBase_GetPickupMeshColorArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPickupBase.HandleComponentOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABRPickupBase::HandleComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "HandleComponentOverlap");

	Params::BRPickupBase_HandleComponentOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.HandlePickupAttempt
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPickupBase::HandlePickupAttempt(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "HandlePickupAttempt");

	Params::BRPickupBase_HandlePickupAttempt Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.HandleSetPickupEnabled
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPickupBase::HandleSetPickupEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "HandleSetPickupEnabled");

	Params::BRPickupBase_HandleSetPickupEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.SetAutoRespawnTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPickupBase::SetAutoRespawnTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "SetAutoRespawnTime");

	Params::BRPickupBase_SetAutoRespawnTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.SetPickupEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPickupBase::SetPickupEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "SetPickupEnabled");

	Params::BRPickupBase_SetPickupEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPickupBase.GetRemainingDisableTimeoutValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABRPickupBase::GetRemainingDisableTimeoutValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "GetRemainingDisableTimeoutValue");

	Params::BRPickupBase_GetRemainingDisableTimeoutValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPickupBase.IsPickupEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRPickupBase::IsPickupEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPickupBase", "IsPickupEnabled");

	Params::BRPickupBase_IsPickupEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolBindHintsWidget.OnToolBindInfosChanged
// (Final, Native, Private)

void UBRToolBindHintsWidget::OnToolBindInfosChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBindHintsWidget", "OnToolBindInfosChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBindHintsWidget.SetTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABRToolBase*                      InTarget                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolBindHintsWidget::SetTarget(class ABRToolBase* InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBindHintsWidget", "SetTarget");

	Params::BRToolBindHintsWidget_SetTarget Parms{};

	Parms.InTarget = InTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAnimatedPickupBase.OnRep_AnimationData
// (Final, Native, Private)

void ABRAnimatedPickupBase::OnRep_AnimationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimatedPickupBase", "OnRep_AnimationData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAnimatedPickupBase.OnRep_AnimationEnabled
// (Final, Native, Private)

void ABRAnimatedPickupBase::OnRep_AnimationEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimatedPickupBase", "OnRep_AnimationEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAnimatedPickupBase.SetAnimationData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EBrickAxis                              InAnimationAxis                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInAnimationAxisLocal                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationSpinSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationBobSpeed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationBobHeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationPhase                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRAnimatedPickupBase::SetAnimationData(EBrickAxis InAnimationAxis, bool bInAnimationAxisLocal, float InAnimationSpinSpeed, float InAnimationBobSpeed, float InAnimationBobHeight, float InAnimationPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimatedPickupBase", "SetAnimationData");

	Params::BRAnimatedPickupBase_SetAnimationData Parms{};

	Parms.InAnimationAxis = InAnimationAxis;
	Parms.bInAnimationAxisLocal = bInAnimationAxisLocal;
	Parms.InAnimationSpinSpeed = InAnimationSpinSpeed;
	Parms.InAnimationBobSpeed = InAnimationBobSpeed;
	Parms.InAnimationBobHeight = InAnimationBobHeight;
	Parms.InAnimationPhase = InAnimationPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRAnimatedPickupBase.SetEnableAnimation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRAnimatedPickupBase::SetEnableAnimation(bool bInEnableAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRAnimatedPickupBase", "SetEnableAnimation");

	Params::BRAnimatedPickupBase_SetEnableAnimation Parms{};

	Parms.bInEnableAnimation = bInEnableAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetDefaultRuleset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* UBRRulesetBlueprintFunctionLibrary::GetDefaultRuleset(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "GetDefaultRuleset");

	Params::BRRulesetBlueprintFunctionLibrary_GetDefaultRuleset Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetGlobalRuleset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* UBRRulesetBlueprintFunctionLibrary::GetGlobalRuleset(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "GetGlobalRuleset");

	Params::BRRulesetBlueprintFunctionLibrary_GetGlobalRuleset Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetLocalRuleset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRRuleset*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRRuleset* UBRRulesetBlueprintFunctionLibrary::GetLocalRuleset(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "GetLocalRuleset");

	Params::BRRulesetBlueprintFunctionLibrary_GetLocalRuleset Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetTeamSettingsFromQuickTeamSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRQuickTeamSettings&      Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UBRRulesetBlueprintFunctionLibrary::GetTeamSettingsFromQuickTeamSettings(const struct FBRQuickTeamSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "GetTeamSettingsFromQuickTeamSettings");

	Params::BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickTeamSettings Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.GetTeamSettingsFromQuickUnassignedTeamSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBRQuickUnassignedTeamSettings&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UBRRulesetBlueprintFunctionLibrary::GetTeamSettingsFromQuickUnassignedTeamSettings(const struct FBRQuickUnassignedTeamSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "GetTeamSettingsFromQuickUnassignedTeamSettings");

	Params::BRRulesetBlueprintFunctionLibrary_GetTeamSettingsFromQuickUnassignedTeamSettings Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetBlueprintFunctionLibrary.PlayerCanEndCurrentRulesetByLeaving
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ABRPlayerController*        Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetBlueprintFunctionLibrary::PlayerCanEndCurrentRulesetByLeaving(const class ABRPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRulesetBlueprintFunctionLibrary", "PlayerCanEndCurrentRulesetByLeaving");

	Params::BRRulesetBlueprintFunctionLibrary_PlayerCanEndCurrentRulesetByLeaving Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPieMenuEntry.GetDescription
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRPieMenuEntry::GetDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuEntry", "GetDescription");

	Params::BRPieMenuEntry_GetDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPieMenuEntry.GetDisplayName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBRPieMenuEntry::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuEntry", "GetDisplayName");

	Params::BRPieMenuEntry_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPieMenuWidget.AddSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRPieMenuEntry*                  Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::AddSlot(class UBRPieMenuEntry* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "AddSlot");

	Params::BRPieMenuWidget_AddSlot Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.RemoveAllSlots
// (Final, Native, Public, BlueprintCallable)

void UBRPieMenuWidget::RemoveAllSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "RemoveAllSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.RemoveSlotByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::RemoveSlotByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "RemoveSlotByIndex");

	Params::BRPieMenuWidget_RemoveSlotByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.SelectConfirm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRememberLast                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::SelectConfirm(bool bRememberLast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "SelectConfirm");

	Params::BRPieMenuWidget_SelectConfirm Parms{};

	Parms.bRememberLast = bRememberLast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.SelectSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::SelectSlot(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "SelectSlot");

	Params::BRPieMenuWidget_SelectSlot Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.SetLastSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewLastSelected                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::SetLastSelected(int32 NewLastSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "SetLastSelected");

	Params::BRPieMenuWidget_SetLastSelected Parms{};

	Parms.NewLastSelected = NewLastSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPieMenuWidget.GetAllSlots
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UBRPieMenuEntry*>*         OutSlots                                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBRPieMenuWidget::GetAllSlots(TArray<class UBRPieMenuEntry*>* OutSlots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "GetAllSlots");

	Params::BRPieMenuWidget_GetAllSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSlots != nullptr)
		*OutSlots = std::move(Parms.OutSlots);
}


// Function Brickadia.BRPieMenuWidget.GetSlotByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRPieMenuEntry*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPieMenuEntry* UBRPieMenuWidget::GetSlotByIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPieMenuWidget", "GetSlotByIndex");

	Params::BRPieMenuWidget_GetSlotByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTextFilterSubsystem.RefreshActiveRegex
// (Final, Native, Public)
// Parameters:
// const class UDataTable*                 TextFilterTable                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTextFilterSubsystem::RefreshActiveRegex(const class UDataTable* TextFilterTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTextFilterSubsystem", "RefreshActiveRegex");

	Params::BRTextFilterSubsystem_RefreshActiveRegex Parms{};

	Parms.TextFilterTable = TextFilterTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTextFilterSubsystem.FilterText
// (Final, Native, Public, Const)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRTextFilterSubsystem::FilterText(const class FString& Input) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTextFilterSubsystem", "FilterText");

	Params::BRTextFilterSubsystem_FilterText Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionOneButtonDialog.CreateOneButtonDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage                                          (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon_0                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBROneButtonDialogBase>DialogClass_0                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionOneButtonDialog*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionOneButtonDialog* UAsyncActionOneButtonDialog::CreateOneButtonDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage, EBRDialogButtonStyle ButtonStyle, class UTexture2D* ButtonIcon_0, TSubclassOf<class UBROneButtonDialogBase> DialogClass_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionOneButtonDialog", "CreateOneButtonDialog");

	Params::AsyncActionOneButtonDialog_CreateOneButtonDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage = std::move(ButtonMessage);
	Parms.ButtonStyle = ButtonStyle;
	Parms.ButtonIcon_0 = ButtonIcon_0;
	Parms.DialogClass_0 = DialogClass_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionOneButtonDialog.QuickCreateOneButtonDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage                                          (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon_0                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionOneButtonDialog*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionOneButtonDialog* UAsyncActionOneButtonDialog::QuickCreateOneButtonDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage, EBRDialogButtonStyle ButtonStyle, class UTexture2D* ButtonIcon_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionOneButtonDialog", "QuickCreateOneButtonDialog");

	Params::AsyncActionOneButtonDialog_QuickCreateOneButtonDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage = std::move(ButtonMessage);
	Parms.ButtonStyle = ButtonStyle;
	Parms.ButtonIcon_0 = ButtonIcon_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionOneButtonDialog.HandleClickedButton
// (Final, Native, Private)

void UAsyncActionOneButtonDialog::HandleClickedButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionOneButtonDialog", "HandleClickedButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.SetThumbnailObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          NewThumbnailObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericThumbnailWidget::SetThumbnailObject(class UObject* NewThumbnailObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "SetThumbnailObject");

	Params::GenericThumbnailWidget_SetThumbnailObject Parms{};

	Parms.NewThumbnailObject = NewThumbnailObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.SetThumbnailObject2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           NewThumbnailObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericThumbnailWidget::SetThumbnailObject2(class UClass* NewThumbnailObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "SetThumbnailObject2");

	Params::GenericThumbnailWidget_SetThumbnailObject2 Parms{};

	Parms.NewThumbnailObject = NewThumbnailObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.SetThumbnailProcessor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UThumbnailProcessor>  Processor                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericThumbnailWidget::SetThumbnailProcessor(TSubclassOf<class UThumbnailProcessor> Processor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "SetThumbnailProcessor");

	Params::GenericThumbnailWidget_SetThumbnailProcessor Parms{};

	Parms.Processor = Processor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.StartRealtimeRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  RotationPerSecond                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGenericThumbnailWidget::StartRealtimeRotation(const struct FRotator& RotationPerSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "StartRealtimeRotation");

	Params::GenericThumbnailWidget_StartRealtimeRotation Parms{};

	Parms.RotationPerSecond = std::move(RotationPerSecond);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.StopRealtimeRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   UnrotateTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericThumbnailWidget::StopRealtimeRotation(float UnrotateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "StopRealtimeRotation");

	Params::GenericThumbnailWidget_StopRealtimeRotation Parms{};

	Parms.UnrotateTime = UnrotateTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.GenericThumbnailWidget.GetThumbnailObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGenericThumbnailWidget::GetThumbnailObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "GetThumbnailObject");

	Params::GenericThumbnailWidget_GetThumbnailObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.GenericThumbnailWidget.IsRealtime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGenericThumbnailWidget::IsRealtime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericThumbnailWidget", "IsRealtime");

	Params::GenericThumbnailWidget_IsRealtime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRToolPreviewActor.ApplyInstancingParameters
// (Final, Native, Private)

void ABRToolPreviewActor::ApplyInstancingParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewActor", "ApplyInstancingParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewActor.ApplyTransformParameters
// (Final, Native, Private)

void ABRToolPreviewActor::ApplyTransformParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewActor", "ApplyTransformParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewActor.ApplyVisibility
// (Final, Native, Private)

void ABRToolPreviewActor::ApplyVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewActor", "ApplyVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewActor.OnRep_PreviewParts
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<class UBRToolPreviewPartBase*>&OldPreviewParts                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABRToolPreviewActor::OnRep_PreviewParts(const TArray<class UBRToolPreviewPartBase*>& OldPreviewParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewActor", "OnRep_PreviewParts");

	Params::BRToolPreviewActor_OnRep_PreviewParts Parms{};

	Parms.OldPreviewParts = std::move(OldPreviewParts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Mouse.SwitchPivotMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewTargetingMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPlacerControlMode_Mouse::SwitchPivotMode(class FName NewTargetingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Mouse", "SwitchPivotMode");

	Params::BRPlacerControlMode_Mouse_SwitchPivotMode Parms{};

	Parms.NewTargetingMode = NewTargetingMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Mouse.SwitchPivotMode_Default
// (Final, Native, Public, BlueprintCallable)

void UBRPlacerControlMode_Mouse::SwitchPivotMode_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Mouse", "SwitchPivotMode_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlacerControlMode_Mouse.GetCurrentLockMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlacerMouseLockModeBase*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlacerMouseLockModeBase* UBRPlacerControlMode_Mouse::GetCurrentLockMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Mouse", "GetCurrentLockMode");

	Params::BRPlacerControlMode_Mouse_GetCurrentLockMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerControlMode_Mouse.GetDefaultTargetingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRPlacerMouseTargetingModeBase*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRPlacerMouseTargetingModeBase* UBRPlacerControlMode_Mouse::GetDefaultTargetingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Mouse", "GetDefaultTargetingMode");

	Params::BRPlacerControlMode_Mouse_GetDefaultTargetingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlacerControlMode_Mouse.GetTargetingModes_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class UBRPlacerMouseTargetingModeBase*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TMap<class FName, class UBRPlacerMouseTargetingModeBase*> UBRPlacerControlMode_Mouse::GetTargetingModes_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlacerControlMode_Mouse", "GetTargetingModes_BP");

	Params::BRPlacerControlMode_Mouse_GetTargetingModes_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerCameraManager.ApplyFieldOfViewFromSettings
// (Final, Native, Private)

void ABRPlayerCameraManager::ApplyFieldOfViewFromSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerCameraManager", "ApplyFieldOfViewFromSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerCameraManager.SetCameraBlockedCheckEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRPlayerCameraManager::SetCameraBlockedCheckEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerCameraManager", "SetCameraBlockedCheckEnabled");

	Params::BRPlayerCameraManager_SetCameraBlockedCheckEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPlayerPartSocketTree.FindSocketNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRPlayerPartSocketTree::FindSocketNode(class FName SocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartSocketTree", "FindSocketNode");

	Params::BRPlayerPartSocketTree_FindSocketNode Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerPartSocketTree.FindSymmetricalNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRPlayerPartSocketTree::FindSymmetricalNode(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartSocketTree", "FindSymmetricalNode");

	Params::BRPlayerPartSocketTree_FindSymmetricalNode Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerPartSocketTree.GetChildSocketNodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ParentIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBRPlayerPartSocketTree::GetChildSocketNodes(int32 ParentIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartSocketTree", "GetChildSocketNodes");

	Params::BRPlayerPartSocketTree_GetChildSocketNodes Parms{};

	Parms.ParentIndex = ParentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerPartSocketTree.GetSocketNameAtTreeIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TreeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBRPlayerPartSocketTree::GetSocketNameAtTreeIndex(int32 TreeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartSocketTree", "GetSocketNameAtTreeIndex");

	Params::BRPlayerPartSocketTree_GetSocketNameAtTreeIndex Parms{};

	Parms.TreeIndex = TreeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPlayerPartSocketTree.IsNodeChildOf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ChildIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ParentIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPlayerPartSocketTree::IsNodeChildOf(int32 ChildIndex, int32 ParentIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPlayerPartSocketTree", "IsNodeChildOf");

	Params::BRPlayerPartSocketTree_IsNodeChildOf Parms{};

	Parms.ChildIndex = ChildIndex;
	Parms.ParentIndex = ParentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPocketWorldHelpers.DeprojectMousePositionToPocketWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UViewport*                        Viewport                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         PocketWorldLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         PocketWorldDirection                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPocketWorldHelpers::DeprojectMousePositionToPocketWorld(class UViewport* Viewport, struct FVector* PocketWorldLocation, struct FVector* PocketWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPocketWorldHelpers", "DeprojectMousePositionToPocketWorld");

	Params::BRPocketWorldHelpers_DeprojectMousePositionToPocketWorld Parms{};

	Parms.Viewport = Viewport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PocketWorldLocation != nullptr)
		*PocketWorldLocation = std::move(Parms.PocketWorldLocation);

	if (PocketWorldDirection != nullptr)
		*PocketWorldDirection = std::move(Parms.PocketWorldDirection);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPocketWorldHelpers.DeprojectScreenPositionToPocketWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UViewport*                        Viewport                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         PocketWorldLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         PocketWorldDirection                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPocketWorldHelpers::DeprojectScreenPositionToPocketWorld(class UViewport* Viewport, const struct FVector2D& ScreenPosition, struct FVector* PocketWorldLocation, struct FVector* PocketWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRPocketWorldHelpers", "DeprojectScreenPositionToPocketWorld");

	Params::BRPocketWorldHelpers_DeprojectScreenPositionToPocketWorld Parms{};

	Parms.Viewport = Viewport;
	Parms.ScreenPosition = std::move(ScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PocketWorldLocation != nullptr)
		*PocketWorldLocation = std::move(Parms.PocketWorldLocation);

	if (PocketWorldDirection != nullptr)
		*PocketWorldDirection = std::move(Parms.PocketWorldDirection);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPreset.GetPresetVersion
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32*                                  PresetVersion                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPreset::GetPresetVersion(int32* PresetVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "GetPresetVersion");

	Params::BRPreset_GetPresetVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PresetVersion != nullptr)
		*PresetVersion = Parms.PresetVersion;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPreset.LoadInspectorChangelist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    OutChangelist                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPreset::LoadInspectorChangelist(class UObject* WorldContext, struct FInspectorPropertyChangelist* OutChangelist, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "LoadInspectorChangelist");

	Params::BRPreset_LoadInspectorChangelist Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChangelist != nullptr)
		*OutChangelist = std::move(Parms.OutChangelist);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPreset.LoadInspectorChangelist2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    OutChangelist                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPreset::LoadInspectorChangelist2(class UObject* WorldContext, struct FInspectorPropertyChangelist* OutChangelist, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "LoadInspectorChangelist2");

	Params::BRPreset_LoadInspectorChangelist2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChangelist != nullptr)
		*OutChangelist = std::move(Parms.OutChangelist);

	return Parms.ReturnValue;
}


// Function Brickadia.BRPreset.LoadStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  struct_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRPreset::LoadStruct(class UObject* WorldContext, int32* struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "LoadStruct");

	Params::BRPreset_LoadStruct Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (struct_0 != nullptr)
		*struct_0 = Parms.struct_0;

	return Parms.ReturnValue;
}


// Function Brickadia.BRPreset.SaveInspectorChangelist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPreset::SaveInspectorChangelist(class UObject* WorldContext, const struct FInspectorPropertyChangelist& Changelist, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "SaveInspectorChangelist");

	Params::BRPreset_SaveInspectorChangelist Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Changelist = std::move(Changelist);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPreset.SaveInspectorChangelist2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPreset::SaveInspectorChangelist2(class UObject* WorldContext, const struct FInspectorPropertyChangelist& Changelist, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "SaveInspectorChangelist2");

	Params::BRPreset_SaveInspectorChangelist2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Changelist = std::move(Changelist);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPreset.SaveStruct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   struct_0                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRPreset::SaveStruct(class UObject* WorldContext, int32 struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "SaveStruct");

	Params::BRPreset_SaveStruct Parms{};

	Parms.WorldContext = WorldContext;
	Parms.struct_0 = struct_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRPreset.GetPresetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRPreset::GetPresetName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRPreset", "GetPresetName");

	Params::BRPreset_GetPresetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.ChangeGameType
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBRGameTypeDescriptor*            GameTypeDescriptor                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&NewGameTypeSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::ChangeGameType(class UBRGameTypeDescriptor* GameTypeDescriptor, const struct FInspectorPropertyChangelist& NewGameTypeSettings, class ABRPlayerState* TriggerPlayer, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "ChangeGameType");

	Params::BRRuleset_ChangeGameType Parms{};

	Parms.GameTypeDescriptor = GameTypeDescriptor;
	Parms.NewGameTypeSettings = std::move(NewGameTypeSettings);
	Parms.TriggerPlayer = TriggerPlayer;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.ClearTeams
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::ClearTeams(class ABRPlayerState* TriggerPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "ClearTeams");

	Params::BRRuleset_ClearTeams Parms{};

	Parms.TriggerPlayer = TriggerPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.EditGameTypeSettings
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&NewGameTypeSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::EditGameTypeSettings(const struct FInspectorPropertyChangelist& NewGameTypeSettings, class ABRPlayerState* TriggerPlayer, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "EditGameTypeSettings");

	Params::BRRuleset_EditGameTypeSettings Parms{};

	Parms.NewGameTypeSettings = std::move(NewGameTypeSettings);
	Parms.TriggerPlayer = TriggerPlayer;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.EditSettings
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   MinigameEditor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::EditSettings(const struct FInspectorPropertyChangelist& Settings, class ABRPlayerState* MinigameEditor, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "EditSettings");

	Params::BRRuleset_EditSettings Parms{};

	Parms.Settings = std::move(Settings);
	Parms.MinigameEditor = MinigameEditor;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.EditTeamSettings
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    TeamName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&NewTeamSettings                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::EditTeamSettings(const class FString& TeamName, const struct FInspectorPropertyChangelist& NewTeamSettings, class ABRPlayerState* TriggerPlayer, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "EditTeamSettings");

	Params::BRRuleset_EditTeamSettings Parms{};

	Parms.TeamName = std::move(TeamName);
	Parms.NewTeamSettings = std::move(NewTeamSettings);
	Parms.TriggerPlayer = TriggerPlayer;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.GlobalRuleset_HandleServerSettingsUpdate
// (Final, Native, Public)
// Parameters:
// class UBRGameSettingsBase*              Settings                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::GlobalRuleset_HandleServerSettingsUpdate(class UBRGameSettingsBase* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GlobalRuleset_HandleServerSettingsUpdate");

	Params::BRRuleset_GlobalRuleset_HandleServerSettingsUpdate Parms{};

	Parms.Settings = Settings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.HandlePlayerReachCheckPoint
// (Final, Native, Public)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::HandlePlayerReachCheckPoint(class ABRPlayerState* TriggeredBy, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "HandlePlayerReachCheckPoint");

	Params::BRRuleset_HandlePlayerReachCheckPoint Parms{};

	Parms.TriggeredBy = TriggeredBy;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.HandlePlayerReachGoalPoint
// (Final, Native, Public)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::HandlePlayerReachGoalPoint(class ABRPlayerState* TriggeredBy, const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "HandlePlayerReachGoalPoint");

	Params::BRRuleset_HandlePlayerReachGoalPoint Parms{};

	Parms.TriggeredBy = TriggeredBy;
	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.MoveTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TeamName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamNameMoveAfter                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::MoveTeam(const class FString& TeamName, const class FString& TeamNameMoveAfter, class ABRPlayerState* TriggerPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "MoveTeam");

	Params::BRRuleset_MoveTeam Parms{};

	Parms.TeamName = std::move(TeamName);
	Parms.TeamNameMoveAfter = std::move(TeamNameMoveAfter);
	Parms.TriggerPlayer = TriggerPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.MulticastHandleStartSession
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ABRRuleset::MulticastHandleStartSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "MulticastHandleStartSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.NewRound
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            round                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::NewRound(const int32& round, bool bImmediate, class ABRPlayerState* TriggeredBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "NewRound");

	Params::BRRuleset_NewRound Parms{};

	Parms.round = round;
	Parms.bImmediate = bImmediate;
	Parms.TriggeredBy = TriggeredBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.NextRound
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bImmediate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::NextRound(bool bImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "NextRound");

	Params::BRRuleset_NextRound Parms{};

	Parms.bImmediate = bImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.OnRep_GameType
// (Final, Native, Public)
// Parameters:
// const class UBRRulesetGameType*         Old                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::OnRep_GameType(const class UBRRulesetGameType* Old)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "OnRep_GameType");

	Params::BRRuleset_OnRep_GameType Parms{};

	Parms.Old = Old;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.OnRep_Teams
// (Final, Native, Public)

void ABRRuleset::OnRep_Teams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "OnRep_Teams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.PlaySound2D
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::PlaySound2D(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "PlaySound2D");

	Params::BRRuleset_PlaySound2D Parms{};

	Parms.Sound = Sound;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.PushChatMessage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::PushChatMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "PushChatMessage");

	Params::BRRuleset_PushChatMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.PushStatusMessage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlashIfUnchanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::PushStatusMessage(const class FString& Message, bool bFlashIfUnchanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "PushStatusMessage");

	Params::BRRuleset_PushStatusMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bFlashIfUnchanged = bFlashIfUnchanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.QuickCreateTeam
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRQuickTeamSettings&      TeamSettings                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* ABRRuleset::QuickCreateTeam(const struct FBRQuickTeamSettings& TeamSettings, class ABRPlayerState* TriggerPlayer, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "QuickCreateTeam");

	Params::BRRuleset_QuickCreateTeam Parms{};

	Parms.TeamSettings = std::move(TeamSettings);
	Parms.TriggerPlayer = TriggerPlayer;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.RemoveTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TeamName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::RemoveTeam(const class FString& TeamName, class ABRPlayerState* TriggerPlayer, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "RemoveTeam");

	Params::BRRuleset_RemoveTeam Parms{};

	Parms.TeamName = std::move(TeamName);
	Parms.TriggerPlayer = TriggerPlayer;
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.ResetRuleset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABRPlayerState*                   TriggeredBy                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::ResetRuleset(class ABRPlayerState* TriggeredBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "ResetRuleset");

	Params::BRRuleset_ResetRuleset Parms{};

	Parms.TriggeredBy = TriggeredBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetBrickRespawnMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ERulesetBrickRespawnMode&         BrickRespawnModeIn                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetBrickRespawnMode(const ERulesetBrickRespawnMode& BrickRespawnModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetBrickRespawnMode");

	Params::BRRuleset_SetBrickRespawnMode Parms{};

	Parms.BrickRespawnModeIn = BrickRespawnModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRelevantBricks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ERulesetRelevantBricks&           BricksIncludedIn                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRelevantBricks(const ERulesetRelevantBricks& BricksIncludedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRelevantBricks");

	Params::BRRuleset_SetRelevantBricks Parms{};

	Parms.BricksIncludedIn = BricksIncludedIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    ColorIn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetColor(const struct FColor& ColorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetColor");

	Params::BRRuleset_SetRulesetColor Parms{};

	Parms.ColorIn = std::move(ColorIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetDescription
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RulesetDescriptionIn                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetDescription(const class FString& RulesetDescriptionIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetDescription");

	Params::BRRuleset_SetRulesetDescription Parms{};

	Parms.RulesetDescriptionIn = std::move(RulesetDescriptionIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetEntryPolicy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ERulesetEntryPolicy&              EntryPolicyIn                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetEntryPolicy(const ERulesetEntryPolicy& EntryPolicyIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetEntryPolicy");

	Params::BRRuleset_SetRulesetEntryPolicy Parms{};

	Parms.EntryPolicyIn = EntryPolicyIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetJoinPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERulesetJoinPolicy                      JoinPolicyIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetJoinPolicy(ERulesetJoinPolicy JoinPolicyIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetJoinPolicy");

	Params::BRRuleset_SetRulesetJoinPolicy Parms{};

	Parms.JoinPolicyIn = JoinPolicyIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RulesetNameIn                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetName(const class FString& RulesetNameIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetName");

	Params::BRRuleset_SetRulesetName Parms{};

	Parms.RulesetNameIn = std::move(RulesetNameIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.SetRulesetType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ERulesetType&                     RulesetTypeIn                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRRuleset::SetRulesetType(const ERulesetType& RulesetTypeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "SetRulesetType");

	Params::BRRuleset_SetRulesetType Parms{};

	Parms.RulesetTypeIn = RulesetTypeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRuleset.CanMemberBeDamagedBy
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TScriptInterface<class IBRRulesetMember>&Member                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::CanMemberBeDamagedBy(const TScriptInterface<class IBRRulesetMember>& Member, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "CanMemberBeDamagedBy");

	Params::BRRuleset_CanMemberBeDamagedBy Parms{};

	Parms.Member = Member;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.FindTeamByName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  TeamIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* ABRRuleset::FindTeamByName(const class FString& Name_0, int32* TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "FindTeamByName");

	Params::BRRuleset_FindTeamByName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TeamIndex != nullptr)
		*TeamIndex = Parms.TeamIndex;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetCanEnableGameplayPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetCanEnableGameplayPermission(class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetCanEnableGameplayPermission");

	Params::BRRuleset_GetCanEnableGameplayPermission Parms{};

	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetCurrentRound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRRuleset::GetCurrentRound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetCurrentRound");

	Params::BRRuleset_GetCurrentRound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetGameType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRRulesetGameType*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetGameType* ABRRuleset::GetGameType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetGameType");

	Params::BRRuleset_GetGameType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetGameTypeClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UBRRulesetGameType>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UBRRulesetGameType> ABRRuleset::GetGameTypeClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetGameTypeClass");

	Params::BRRuleset_GetGameTypeClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetIsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetIsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetIsEmpty");

	Params::BRRuleset_GetIsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRRuleset::GetMember(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetMember");

	Params::BRRuleset_GetMember Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetMemberController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* ABRRuleset::GetMemberController(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetMemberController");

	Params::BRRuleset_GetMemberController Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetMembersOrderedByLeaderboardValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABRPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABRPlayerState*> ABRRuleset::GetMembersOrderedByLeaderboardValue(class FName ValueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetMembersOrderedByLeaderboardValue");

	Params::BRRuleset_GetMembersOrderedByLeaderboardValue Parms{};

	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetNextRoundNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRRuleset::GetNextRoundNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetNextRoundNumber");

	Params::BRRuleset_GetNextRoundNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetNumMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRRuleset::GetNumMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetNumMembers");

	Params::BRRuleset_GetNumMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetNumTeams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRRuleset::GetNumTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetNumTeams");

	Params::BRRuleset_GetNumTeams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerCanJoinRuleset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABRPlayerState*             State                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetPlayerCanJoinRuleset(const class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerCanJoinRuleset");

	Params::BRRuleset_GetPlayerCanJoinRuleset Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerCanLeaveRuleset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABRPlayerState*             State                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetPlayerCanLeaveRuleset(const class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerCanLeaveRuleset");

	Params::BRRuleset_GetPlayerCanLeaveRuleset Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerCanRestart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetPlayerCanRestart(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerCanRestart");

	Params::BRRuleset_GetPlayerCanRestart Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerCanSwitchTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetPlayerCanSwitchTeam(class ABRPlayerState* State, int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerCanSwitchTeam");

	Params::BRRuleset_GetPlayerCanSwitchTeam Parms{};

	Parms.State = State;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerHasGameplayPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetPlayerHasGameplayPermission(class ABRPlayerState* State, class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerHasGameplayPermission");

	Params::BRRuleset_GetPlayerHasGameplayPermission Parms{};

	Parms.State = State;
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerNameColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ABRRuleset::GetPlayerNameColor(class ABRPlayerState* Member) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerNameColor");

	Params::BRRuleset_GetPlayerNameColor Parms{};

	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetPlayerStartTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ABRRuleset::GetPlayerStartTransform(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetPlayerStartTransform");

	Params::BRRuleset_GetPlayerStartTransform Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetRandomMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* ABRRuleset::GetRandomMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetRandomMember");

	Params::BRRuleset_GetRandomMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetSessionIsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetSessionIsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetSessionIsRunning");

	Params::BRRuleset_GetSessionIsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetSessionJustStarted
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetSessionJustStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetSessionJustStarted");

	Params::BRRuleset_GetSessionJustStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetShouldEnableType
// (Final, Native, Public, Const)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetShouldEnableType(const class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetShouldEnableType");

	Params::BRRuleset_GetShouldEnableType Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetShouldShowBricksIncludedOption
// (Final, Native, Public, Const)
// Parameters:
// ERulesetRelevantBricks                  Op                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetShouldShowBricksIncludedOption(ERulesetRelevantBricks Op, const class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetShouldShowBricksIncludedOption");

	Params::BRRuleset_GetShouldShowBricksIncludedOption Parms{};

	Parms.Op = Op;
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetShouldShowTypeOption
// (Final, Native, Public, Const)
// Parameters:
// ERulesetType                            Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::GetShouldShowTypeOption(ERulesetType Type, class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetShouldShowTypeOption");

	Params::BRRuleset_GetShouldShowTypeOption Parms{};

	Parms.Type = Type;
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetSpectatorTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   Spectator                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> ABRRuleset::GetSpectatorTargets(class ABRPlayerState* Spectator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetSpectatorTargets");

	Params::BRRuleset_GetSpectatorTargets Parms{};

	Parms.Spectator = Spectator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* ABRRuleset::GetTeam(int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetTeam");

	Params::BRRuleset_GetTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBRRulesetTeam*             Team                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABRRuleset::GetTeamId(const class UBRRulesetTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetTeamId");

	Params::BRRuleset_GetTeamId Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetTeamsOrderedByLeaderboardValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeUnaffiliated                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UBRRulesetTeam*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UBRRulesetTeam*> ABRRuleset::GetTeamsOrderedByLeaderboardValue(class FName ValueName, bool bIncludeUnaffiliated) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetTeamsOrderedByLeaderboardValue");

	Params::BRRuleset_GetTeamsOrderedByLeaderboardValue Parms{};

	Parms.ValueName = ValueName;
	Parms.bIncludeUnaffiliated = bIncludeUnaffiliated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.GetUnaffiliatedTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRRulesetTeam*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRRulesetTeam* ABRRuleset::GetUnaffiliatedTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "GetUnaffiliatedTeam");

	Params::BRRuleset_GetUnaffiliatedTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.IsBrickRelevant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::IsBrickRelevant(const struct FBrickHandle& BrickHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "IsBrickRelevant");

	Params::BRRuleset_IsBrickRelevant Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.IsBrickRelevantToMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABRPlayerState*             Member                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::IsBrickRelevantToMember(const struct FBrickHandle& BrickHandle, const class ABRPlayerState* Member) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "IsBrickRelevantToMember");

	Params::BRRuleset_IsBrickRelevantToMember Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.IsEntityRelevant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::IsEntityRelevant(class AActor* ENTITY) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "IsEntityRelevant");

	Params::BRRuleset_IsEntityRelevant Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.IsEntityRelevantToMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABRPlayerState*             Member                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::IsEntityRelevantToMember(class AActor* ENTITY, const class ABRPlayerState* Member) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "IsEntityRelevantToMember");

	Params::BRRuleset_IsEntityRelevantToMember Parms{};

	Parms.ENTITY = ENTITY;
	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRuleset.ShouldShowDeathNotification
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerController*              ShowingController                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ABRPlayerState*             VictimState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   InstigatedByState                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRRuleset::ShouldShowDeathNotification(class ABRPlayerController* ShowingController, const class ABRPlayerState* VictimState, class ABRPlayerState* InstigatedByState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRuleset", "ShouldShowDeathNotification");

	Params::BRRuleset_ShouldShowDeathNotification Parms{};

	Parms.ShowingController = ShowingController;
	Parms.VictimState = VictimState;
	Parms.InstigatedByState = InstigatedByState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetCombinedPropertyDescriptor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptorList* UBRRulesetTeam::GetCombinedPropertyDescriptor(const class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetCombinedPropertyDescriptor");

	Params::BRRulesetTeam_GetCombinedPropertyDescriptor Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetFakeTeamWhenHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRulesetTeam::GetFakeTeamWhenHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetFakeTeamWhenHidden");

	Params::BRRulesetTeam_GetFakeTeamWhenHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.HandleDie
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TScriptInterface<class IBRRulesetMemberDestructable>&DeadMember                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DeathCauser                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandleDie(const TScriptInterface<class IBRRulesetMemberDestructable>& DeadMember, float FinalDamage, const class UDamageType* DeathType, class AController* InstigatedBy, class AActor* DeathCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandleDie");

	Params::BRRulesetTeam_HandleDie Parms{};

	Parms.DeadMember = DeadMember;
	Parms.FinalDamage = FinalDamage;
	Parms.DeathType = DeathType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DeathCauser = DeathCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandleEditSettings
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   MinigameEditor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bTellPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandleEditSettings(class ABRPlayerState* MinigameEditor, const struct FInspectorPropertyChangelist& Settings, bool bTellPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandleEditSettings");

	Params::BRRulesetTeam_HandleEditSettings Parms{};

	Parms.MinigameEditor = MinigameEditor;
	Parms.Settings = std::move(Settings);
	Parms.bTellPlayers = bTellPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandleJoinTeam
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMessage                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandleJoinTeam(class ABRPlayerState* Member, bool bMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandleJoinTeam");

	Params::BRRulesetTeam_HandleJoinTeam Parms{};

	Parms.Member = Member;
	Parms.bMessage = bMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandleLeaveTeam
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandleLeaveTeam(class ABRPlayerState* Member)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandleLeaveTeam");

	Params::BRRulesetTeam_HandleLeaveTeam Parms{};

	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandlePlayerChatMessage
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandlePlayerChatMessage(class ABRPlayerState* TriggerPlayer, const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandlePlayerChatMessage");

	Params::BRRulesetTeam_HandlePlayerChatMessage Parms{};

	Parms.TriggerPlayer = TriggerPlayer;
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandlePlayerRestart
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandlePlayerRestart(class ABRPlayerState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandlePlayerRestart");

	Params::BRRulesetTeam_HandlePlayerRestart Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandlePlayerTeamChatMessage
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABRPlayerState*                   TriggerPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::HandlePlayerTeamChatMessage(class ABRPlayerState* TriggerPlayer, const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandlePlayerTeamChatMessage");

	Params::BRRulesetTeam_HandlePlayerTeamChatMessage Parms{};

	Parms.TriggerPlayer = TriggerPlayer;
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.HandleSetupUnaffiliatedTeam
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetTeam::HandleSetupUnaffiliatedTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HandleSetupUnaffiliatedTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.Inspector_SetPermissionState
// (Final, Native, Public)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::Inspector_SetPermissionState(class FName Permission, bool InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "Inspector_SetPermissionState");

	Params::BRRulesetTeam_Inspector_SetPermissionState Parms{};

	Parms.Permission = Permission;
	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.NotifyCreated
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetTeam::NotifyCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "NotifyCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.NotifyDestroyed
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)

void UBRRulesetTeam::NotifyDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "NotifyDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.OnRep_ControlModeOverride
// (Final, Native, Public)

void UBRRulesetTeam::OnRep_ControlModeOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "OnRep_ControlModeOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.OnRep_InspectorSetting
// (Final, Native, Public, BlueprintCallable)

void UBRRulesetTeam::OnRep_InspectorSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "OnRep_InspectorSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.PushChatMessage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::PushChatMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "PushChatMessage");

	Params::BRRulesetTeam_PushChatMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.PushStatusMessage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlashIfUnchanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::PushStatusMessage(const class FString& Message, bool bFlashIfUnchanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "PushStatusMessage");

	Params::BRRulesetTeam_PushStatusMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bFlashIfUnchanged = bFlashIfUnchanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.RebuildPermissionLookup
// (Final, Native, Public)

void UBRRulesetTeam::RebuildPermissionLookup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "RebuildPermissionLookup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.RemoveAllMembers
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRRulesetTeam::RemoveAllMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "RemoveAllMembers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetAllowSpectatorFreeCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYes                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetAllowSpectatorFreeCamera(bool bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetAllowSpectatorFreeCamera");

	Params::BRRulesetTeam_SetAllowSpectatorFreeCamera Parms{};

	Parms.bYes = bYes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetBrickDamageMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnvironmentDamageModeIn                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetBrickDamageMode(bool bEnvironmentDamageModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetBrickDamageMode");

	Params::BRRulesetTeam_SetBrickDamageMode Parms{};

	Parms.bEnvironmentDamageModeIn = bEnvironmentDamageModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetCanReachGoalPoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYes                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetCanReachGoalPoints(bool bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetCanReachGoalPoints");

	Params::BRRulesetTeam_SetCanReachGoalPoints Parms{};

	Parms.bYes = bYes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetCanUseCheckPoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYes                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetCanUseCheckPoints(bool bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetCanUseCheckPoints");

	Params::BRRulesetTeam_SetCanUseCheckPoints Parms{};

	Parms.bYes = bYes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetCharacterBaseRotationOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterBaseRotationOverride          Override                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetCharacterBaseRotationOverride(ECharacterBaseRotationOverride Override)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetCharacterBaseRotationOverride");

	Params::BRRulesetTeam_SetCharacterBaseRotationOverride Parms{};

	Parms.Override = Override;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetChatRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetChatRange(float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetChatRange");

	Params::BRRulesetTeam_SetChatRange Parms{};

	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetControlModeOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControlModePolicy                      ControlModeOverrideIn                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetControlModeOverride(EControlModePolicy ControlModeOverrideIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetControlModeOverride");

	Params::BRRulesetTeam_SetControlModeOverride Parms{};

	Parms.ControlModeOverrideIn = ControlModeOverrideIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetDeathNotifications
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetDeathNotifications(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetDeathNotifications");

	Params::BRRulesetTeam_SetDeathNotifications Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetEnableCameraBlockedEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYes                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetEnableCameraBlockedEffects(bool bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetEnableCameraBlockedEffects");

	Params::BRRulesetTeam_SetEnableCameraBlockedEffects Parms{};

	Parms.bYes = bYes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetEnableTeamHealthRegeneration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Regen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetEnableTeamHealthRegeneration(bool Regen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetEnableTeamHealthRegeneration");

	Params::BRRulesetTeam_SetEnableTeamHealthRegeneration Parms{};

	Parms.Regen = Regen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetEnemyNameDistanceMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DistanceMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetEnemyNameDistanceMultiplier(float DistanceMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetEnemyNameDistanceMultiplier");

	Params::BRRulesetTeam_SetEnemyNameDistanceMultiplier Parms{};

	Parms.DistanceMultiplier = DistanceMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetEnvironmentDamageMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnvironmentDamageModeIn                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetEnvironmentDamageMode(bool bEnvironmentDamageModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetEnvironmentDamageMode");

	Params::BRRulesetTeam_SetEnvironmentDamageMode Parms{};

	Parms.bEnvironmentDamageModeIn = bEnvironmentDamageModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetFakeTeamWhenHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TeamName_0                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetFakeTeamWhenHidden(const class FString& TeamName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetFakeTeamWhenHidden");

	Params::BRRulesetTeam_SetFakeTeamWhenHidden Parms{};

	Parms.TeamName_0 = std::move(TeamName_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetForceSpectatorMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bYes                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetForceSpectatorMode(bool bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetForceSpectatorMode");

	Params::BRRulesetTeam_SetForceSpectatorMode Parms{};

	Parms.bYes = bYes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetFriendlyDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetFriendlyDamage(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetFriendlyDamage");

	Params::BRRulesetTeam_SetFriendlyDamage Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetGameplayPermission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRSetPermission                        State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetGameplayPermission(class FName Permission, EBRSetPermission State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetGameplayPermission");

	Params::BRRulesetTeam_SetGameplayPermission Parms{};

	Parms.Permission = Permission;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetGameplayPermissions
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FBRTeamGameplayPermissionData>&Permissions                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetGameplayPermissions(const TArray<struct FBRTeamGameplayPermissionData>& Permissions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetGameplayPermissions");

	Params::BRRulesetTeam_SetGameplayPermissions Parms{};

	Parms.Permissions = std::move(Permissions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetKeepInventoryOnRespawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bKeep                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetKeepInventoryOnRespawn(bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetKeepInventoryOnRespawn");

	Params::BRRulesetTeam_SetKeepInventoryOnRespawn Parms{};

	Parms.bKeep = bKeep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetLimitChatRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLimited                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetLimitChatRange(bool bLimited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetLimitChatRange");

	Params::BRRulesetTeam_SetLimitChatRange Parms{};

	Parms.bLimited = bLimited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetMaxItemSlots
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxSlots                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetMaxItemSlots(int32 MaxSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetMaxItemSlots");

	Params::BRRulesetTeam_SetMaxItemSlots Parms{};

	Parms.MaxSlots = MaxSlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetPhysicsDamageMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPhysicsDamageModeIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetPhysicsDamageMode(bool bPhysicsDamageModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetPhysicsDamageMode");

	Params::BRRulesetTeam_SetPhysicsDamageMode Parms{};

	Parms.bPhysicsDamageModeIn = bPhysicsDamageModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetPlayerRespawnTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewPlayerRespawnTime                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetPlayerRespawnTime(float NewPlayerRespawnTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetPlayerRespawnTime");

	Params::BRRulesetTeam_SetPlayerRespawnTime Parms{};

	Parms.NewPlayerRespawnTime = NewPlayerRespawnTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetPlayersSpectatorsCanView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERulesetSpectatePolicy                  SpectatePolicy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetPlayersSpectatorsCanView(ERulesetSpectatePolicy SpectatePolicy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetPlayersSpectatorsCanView");

	Params::BRRulesetTeam_SetPlayersSpectatorsCanView Parms{};

	Parms.SpectatePolicy = SpectatePolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetRememberCheckPointBetweenJoins
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRemember                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetRememberCheckPointBetweenJoins(bool bRemember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetRememberCheckPointBetweenJoins");

	Params::BRRulesetTeam_SetRememberCheckPointBetweenJoins Parms{};

	Parms.bRemember = bRemember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetRespawnInvincibilityTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetRespawnInvincibilityTime(float TimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetRespawnInvincibilityTime");

	Params::BRRulesetTeam_SetRespawnInvincibilityTime Parms{};

	Parms.TimeSeconds = TimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetRespawnSelfDestructPreventionTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetRespawnSelfDestructPreventionTime(float TimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetRespawnSelfDestructPreventionTime");

	Params::BRRulesetTeam_SetRespawnSelfDestructPreventionTime Parms{};

	Parms.TimeSeconds = TimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetSelfDamageMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelfDamageModeIn                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetSelfDamageMode(bool bSelfDamageModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetSelfDamageMode");

	Params::BRRulesetTeam_SetSelfDamageMode Parms{};

	Parms.bSelfDamageModeIn = bSelfDamageModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetSpecialBrickUsePolicy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ESpecialBrickUsePolicy&           SpecialBrickUsePolicyIn                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetSpecialBrickUsePolicy(const ESpecialBrickUsePolicy& SpecialBrickUsePolicyIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetSpecialBrickUsePolicy");

	Params::BRRulesetTeam_SetSpecialBrickUsePolicy Parms{};

	Parms.SpecialBrickUsePolicyIn = SpecialBrickUsePolicyIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetSpectatorChat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERulesetTeamSpectatorChat               Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetSpectatorChat(ERulesetTeamSpectatorChat Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetSpectatorChat");

	Params::BRRulesetTeam_SetSpectatorChat Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem0
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem0(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem0");

	Params::BRRulesetTeam_SetStartingItem0 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem1
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem1(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem1");

	Params::BRRulesetTeam_SetStartingItem1 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem2(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem2");

	Params::BRRulesetTeam_SetStartingItem2 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem3(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem3");

	Params::BRRulesetTeam_SetStartingItem3 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem4
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem4(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem4");

	Params::BRRulesetTeam_SetStartingItem4 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem5
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem5(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem5");

	Params::BRRulesetTeam_SetStartingItem5 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem6
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem6(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem6");

	Params::BRRulesetTeam_SetStartingItem6 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem7
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem7(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem7");

	Params::BRRulesetTeam_SetStartingItem7 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem8
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem8(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem8");

	Params::BRRulesetTeam_SetStartingItem8 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetStartingItem9
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRInventoryEntryPlan&     Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetStartingItem9(const struct FBRInventoryEntryPlan& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetStartingItem9");

	Params::BRRulesetTeam_SetStartingItem9 Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamCanStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Stack                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamCanStack(bool Stack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamCanStack");

	Params::BRRulesetTeam_SetTeamCanStack Parms{};

	Parms.Stack = Stack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Collide                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamCollision(bool Collide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamCollision");

	Params::BRRulesetTeam_SetTeamCollision Parms{};

	Parms.Collide = Collide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewTeamColor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamColor(const struct FColor& NewTeamColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamColor");

	Params::BRRulesetTeam_SetTeamColor Parms{};

	Parms.NewTeamColor = std::move(NewTeamColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamHealthMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Health                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamHealthMultiplier(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamHealthMultiplier");

	Params::BRRulesetTeam_SetTeamHealthMultiplier Parms{};

	Parms.Health = Health;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamHealthRegenPerSecond
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PerSecondRegen                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamHealthRegenPerSecond(float PerSecondRegen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamHealthRegenPerSecond");

	Params::BRRulesetTeam_SetTeamHealthRegenPerSecond Parms{};

	Parms.PerSecondRegen = PerSecondRegen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamHealthRegenStartTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamHealthRegenStartTime(float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamHealthRegenStartTime");

	Params::BRRulesetTeam_SetTeamHealthRegenStartTime Parms{};

	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamJumpHeightMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamJumpHeightMultiplier(float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamJumpHeightMultiplier");

	Params::BRRulesetTeam_SetTeamJumpHeightMultiplier Parms{};

	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewTeamName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamName(const class FString& NewTeamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamName");

	Params::BRRulesetTeam_SetTeamName Parms{};

	Parms.NewTeamName = std::move(NewTeamName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamNameDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamNameDistance(float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamNameDistance");

	Params::BRRulesetTeam_SetTeamNameDistance Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamSpawnMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETeamSpawnMode                          NewTeamSpawnMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamSpawnMode(ETeamSpawnMode NewTeamSpawnMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamSpawnMode");

	Params::BRRulesetTeam_SetTeamSpawnMode Parms{};

	Parms.NewTeamSpawnMode = NewTeamSpawnMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetTeamSpeedMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetTeamSpeedMultiplier(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetTeamSpeedMultiplier");

	Params::BRRulesetTeam_SetTeamSpeedMultiplier Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERulesetTeamVisibility                  Visibility_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetVisibility(ERulesetTeamVisibility Visibility_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetVisibility");

	Params::BRRulesetTeam_SetVisibility Parms{};

	Parms.Visibility_0 = Visibility_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetWaterDamagePerSecond
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   WaterDamagePerSecondIn                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetWaterDamagePerSecond(float WaterDamagePerSecondIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetWaterDamagePerSecond");

	Params::BRRulesetTeam_SetWaterDamagePerSecond Parms{};

	Parms.WaterDamagePerSecondIn = WaterDamagePerSecondIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.SetWeaponDamageMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bWeaponDamageModeIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRRulesetTeam::SetWeaponDamageMode(bool bWeaponDamageModeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "SetWeaponDamageMode");

	Params::BRRulesetTeam_SetWeaponDamageMode Parms{};

	Parms.bWeaponDamageModeIn = bWeaponDamageModeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetTeam.CanBeDamagedBy
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBRRulesetTeam*                   TeamB                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::CanBeDamagedBy(class UBRRulesetTeam* TeamB) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "CanBeDamagedBy");

	Params::BRRulesetTeam_CanBeDamagedBy Parms{};

	Parms.TeamB = TeamB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.CanMemberBeDamagedBy
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const TScriptInterface<class IBRRulesetMember>&Member                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::CanMemberBeDamagedBy(const TScriptInterface<class IBRRulesetMember>& Member, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "CanMemberBeDamagedBy");

	Params::BRRulesetTeam_CanMemberBeDamagedBy Parms{};

	Parms.Member = Member;
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;
	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.CanRenameTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::CanRenameTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "CanRenameTeam");

	Params::BRRulesetTeam_CanRenameTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetActualTeamColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRRulesetTeam::GetActualTeamColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetActualTeamColor");

	Params::BRRulesetTeam_GetActualTeamColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetCombinedLeaderboardValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetTeam::GetCombinedLeaderboardValue(class FName ValueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetCombinedLeaderboardValue");

	Params::BRRulesetTeam_GetCombinedLeaderboardValue Parms{};

	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetCombinedLeaderboardValueByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetTeam::GetCombinedLeaderboardValueByIndex(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetCombinedLeaderboardValueByIndex");

	Params::BRRulesetTeam_GetCombinedLeaderboardValueByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetLimitChatRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetLimitChatRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetLimitChatRange");

	Params::BRRulesetTeam_GetLimitChatRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* UBRRulesetTeam::GetMember(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetMember");

	Params::BRRulesetTeam_GetMember Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetMemberController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerController* UBRRulesetTeam::GetMemberController(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetMemberController");

	Params::BRRulesetTeam_GetMemberController Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetMembers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class ABRPlayerState*>*          MembersOut                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::GetMembers(TArray<class ABRPlayerState*>* MembersOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetMembers");

	Params::BRRulesetTeam_GetMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MembersOut != nullptr)
		*MembersOut = std::move(Parms.MembersOut);
}


// Function Brickadia.BRRulesetTeam.GetMembersFor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ABRPlayerState*             Viewer                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABRPlayerState*>*          MembersOut                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBRRulesetTeam::GetMembersFor(const class ABRPlayerState* Viewer, TArray<class ABRPlayerState*>* MembersOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetMembersFor");

	Params::BRRulesetTeam_GetMembersFor Parms{};

	Parms.Viewer = Viewer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MembersOut != nullptr)
		*MembersOut = std::move(Parms.MembersOut);
}


// Function Brickadia.BRRulesetTeam.GetMembersOrderedByLeaderboardValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABRPlayerState*>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABRPlayerState*> UBRRulesetTeam::GetMembersOrderedByLeaderboardValue(class FName ValueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetMembersOrderedByLeaderboardValue");

	Params::BRRulesetTeam_GetMembersOrderedByLeaderboardValue Parms{};

	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetNumMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetTeam::GetNumMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetNumMembers");

	Params::BRRulesetTeam_GetNumMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerCanJoin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetPlayerCanJoin(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerCanJoin");

	Params::BRRulesetTeam_GetPlayerCanJoin Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerCanLeave
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetPlayerCanLeave(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerCanLeave");

	Params::BRRulesetTeam_GetPlayerCanLeave Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerCanRestart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetPlayerCanRestart(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerCanRestart");

	Params::BRRulesetTeam_GetPlayerCanRestart Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerHasGameplayPermission
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetPlayerHasGameplayPermission(class ABRPlayerState* State, class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerHasGameplayPermission");

	Params::BRRulesetTeam_GetPlayerHasGameplayPermission Parms{};

	Parms.State = State;
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerNameColor
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   Member                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UBRRulesetTeam::GetPlayerNameColor(class ABRPlayerState* Member) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerNameColor");

	Params::BRRulesetTeam_GetPlayerNameColor Parms{};

	Parms.Member = Member;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetPlayerStartTransform
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   State                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBRRulesetTeam::GetPlayerStartTransform(class ABRPlayerState* State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetPlayerStartTransform");

	Params::BRRulesetTeam_GetPlayerStartTransform Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetRandomMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABRPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABRPlayerState* UBRRulesetTeam::GetRandomMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetRandomMember");

	Params::BRRulesetTeam_GetRandomMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetTeamAllowedToUseSpecialBrick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::GetTeamAllowedToUseSpecialBrick(const struct FBrickHandle& BrickHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetTeamAllowedToUseSpecialBrick");

	Params::BRRulesetTeam_GetTeamAllowedToUseSpecialBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetTeamDisplayColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBRRulesetTeam::GetTeamDisplayColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetTeamDisplayColor");

	Params::BRRulesetTeam_GetTeamDisplayColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRulesetTeam::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "GetTeamId");

	Params::BRRulesetTeam_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.HasGameplayPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::HasGameplayPermission(const class UObject* WorldContext, class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "HasGameplayPermission");

	Params::BRRulesetTeam_HasGameplayPermission Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.Inspector_CanEditPermission
// (Final, Native, Public, Const)
// Parameters:
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::Inspector_CanEditPermission(class FName Permission, class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "Inspector_CanEditPermission");

	Params::BRRulesetTeam_Inspector_CanEditPermission Parms{};

	Parms.Permission = Permission;
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.Inspector_GetPermissionState
// (Final, Native, Public, Const)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Permission                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::Inspector_GetPermissionState(class UObject* WorldContext, class FName Permission) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "Inspector_GetPermissionState");

	Params::BRRulesetTeam_Inspector_GetPermissionState Parms{};

	Parms.WorldContext = WorldContext;
	Parms.Permission = Permission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.IsHostileTo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBRRulesetTeam*                   TeamB                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::IsHostileTo(class UBRRulesetTeam* TeamB) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "IsHostileTo");

	Params::BRRulesetTeam_IsHostileTo Parms{};

	Parms.TeamB = TeamB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetTeam.ShouldAllowFriendlyDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRRulesetTeam::ShouldAllowFriendlyDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetTeam", "ShouldAllowFriendlyDamage");

	Params::BRRulesetTeam_ShouldAllowFriendlyDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetEnableCameraBlockedEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBlockedEffects                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetGlobalRulesetEnableCameraBlockedEffects(bool bBlockedEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetGlobalRulesetEnableCameraBlockedEffects");

	Params::BRServerSettingsBase_General_SetGlobalRulesetEnableCameraBlockedEffects Parms{};

	Parms.bBlockedEffects = bBlockedEffects;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetPhysicsDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPhysicsDamage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetGlobalRulesetPhysicsDamage(bool bPhysicsDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetGlobalRulesetPhysicsDamage");

	Params::BRServerSettingsBase_General_SetGlobalRulesetPhysicsDamage Parms{};

	Parms.bPhysicsDamage = bPhysicsDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetGlobalRulesetSelfDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelfDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetGlobalRulesetSelfDamage(bool bSelfDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetGlobalRulesetSelfDamage");

	Params::BRServerSettingsBase_General_SetGlobalRulesetSelfDamage Parms{};

	Parms.bSelfDamage = bSelfDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetIsPubliclyListed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInPubliclyListed                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetIsPubliclyListed(bool bInPubliclyListed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetIsPubliclyListed");

	Params::BRServerSettingsBase_General_SetIsPubliclyListed Parms{};

	Parms.bInPubliclyListed = bInPubliclyListed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetMaxPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InMaxPlayers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetMaxPlayers(int32 InMaxPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetMaxPlayers");

	Params::BRServerSettingsBase_General_SetMaxPlayers Parms{};

	Parms.InMaxPlayers = InMaxPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabBricks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetMaxPrefabBricks(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetMaxPrefabBricks");

	Params::BRServerSettingsBase_General_SetMaxPrefabBricks Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetMaxPrefabComponents(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetMaxPrefabComponents");

	Params::BRServerSettingsBase_General_SetMaxPrefabComponents Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetMaxPrefabSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FIntVector&                Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetMaxPrefabSize(const struct FIntVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetMaxPrefabSize");

	Params::BRServerSettingsBase_General_SetMaxPrefabSize Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetServerDescription
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InServerDescription                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetServerDescription(const class FString& InServerDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetServerDescription");

	Params::BRServerSettingsBase_General_SetServerDescription Parms{};

	Parms.InServerDescription = std::move(InServerDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetServerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InServerName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetServerName(const class FString& InServerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetServerName");

	Params::BRServerSettingsBase_General_SetServerName Parms{};

	Parms.InServerName = std::move(InServerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetServerPassword
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InServerPassword                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetServerPassword(const class FString& InServerPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetServerPassword");

	Params::BRServerSettingsBase_General_SetServerPassword Parms{};

	Parms.InServerPassword = std::move(InServerPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetUploadTimeout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetUploadTimeout(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetUploadTimeout");

	Params::BRServerSettingsBase_General_SetUploadTimeout Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRServerSettingsBase_General.SetWelcomeMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InWelcomeMessage                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRServerSettingsBase_General::SetWelcomeMessage(const class FString& InWelcomeMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRServerSettingsBase_General", "SetWelcomeMessage");

	Params::BRServerSettingsBase_General_SetWelcomeMessage Parms{};

	Parms.InWelcomeMessage = std::move(InWelcomeMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabSetWidget.AutoSelectFirstEnabledTab
// (Final, Native, Public, BlueprintCallable)

void UBRTabSetWidget::AutoSelectFirstEnabledTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabSetWidget", "AutoSelectFirstEnabledTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabSetWidget.AutoSelectFirstEnabledTabIfCurrentIsDisabled
// (Final, Native, Public, BlueprintCallable)

void UBRTabSetWidget::AutoSelectFirstEnabledTabIfCurrentIsDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabSetWidget", "AutoSelectFirstEnabledTabIfCurrentIsDisabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabSetWidget.ClearSelectedTab
// (Final, Native, Public, BlueprintCallable)

void UBRTabSetWidget::ClearSelectedTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabSetWidget", "ClearSelectedTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabSetWidget.SetSelectedTab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTabSetWidget::SetSelectedTab(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabSetWidget", "SetSelectedTab");

	Params::BRTabSetWidget_SetSelectedTab Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTabSetWidget.SetTabEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRTabSetWidget::SetTabEnabled(int32 Index_0, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTabSetWidget", "SetTabEnabled");

	Params::BRTabSetWidget_SetTabEnabled Parms{};

	Parms.Index_0 = Index_0;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolBindHintWidget.Setup
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBRToolBindHint&           BindInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRToolBindHintWidget::Setup(const struct FBRToolBindHint& BindInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolBindHintWidget", "Setup");

	Params::BRToolBindHintWidget_Setup Parms{};

	Parms.BindInfo = std::move(BindInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRToolPreviewPart_ReplicatedBrickGrid.OnRep_PreviewGrid
// (Final, Native, Protected)

void UBRToolPreviewPart_ReplicatedBrickGrid::OnRep_PreviewGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewPart_ReplicatedBrickGrid", "OnRep_PreviewGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.DestroyPreview_ServerOnly
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UBRToolPreviewManagerComponent::DestroyPreview_ServerOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "DestroyPreview_ServerOnly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.InitializePreview_ServerOnly
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<TSubclassOf<class UBRToolPreviewPartBase>>&Parts                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::InitializePreview_ServerOnly(const TArray<TSubclassOf<class UBRToolPreviewPartBase>>& Parts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "InitializePreview_ServerOnly");

	Params::BRToolPreviewManagerComponent_InitializePreview_ServerOnly Parms{};

	Parms.Parts = std::move(Parts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.OnRep_PreviewActor
// (Final, Native, Private)

void UBRToolPreviewManagerComponent::OnRep_PreviewActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "OnRep_PreviewActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetHypotheticalGridTransform
// (Final, Net, Native, Event, Private, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  RelativeTo                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                NewTransform                                           (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetHypotheticalGridTransform(class USceneComponent* RelativeTo, const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetHypotheticalGridTransform");

	Params::BRToolPreviewManagerComponent_ServerSetHypotheticalGridTransform Parms{};

	Parms.RelativeTo = RelativeTo;
	Parms.NewTransform = std::move(NewTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewInstancingParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBRToolPreviewInstancingParameters&NewInstancingParameters                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetPreviewInstancingParameters(const struct FBRToolPreviewInstancingParameters& NewInstancingParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetPreviewInstancingParameters");

	Params::BRToolPreviewManagerComponent_ServerSetPreviewInstancingParameters Parms{};

	Parms.NewInstancingParameters = std::move(NewInstancingParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewPartDisplayParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// int32                                   PartIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRToolPreviewPartDisplayParameters&NewDisplayParameters                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetPreviewPartDisplayParameters(int32 PartIndex, const struct FBRToolPreviewPartDisplayParameters& NewDisplayParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetPreviewPartDisplayParameters");

	Params::BRToolPreviewManagerComponent_ServerSetPreviewPartDisplayParameters Parms{};

	Parms.PartIndex = PartIndex;
	Parms.NewDisplayParameters = std::move(NewDisplayParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewPartTransformParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// int32                                   PartIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRToolPreviewPartTransformParameters&NewTransformParameters                                 (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetPreviewPartTransformParameters(int32 PartIndex, const struct FBRToolPreviewPartTransformParameters& NewTransformParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetPreviewPartTransformParameters");

	Params::BRToolPreviewManagerComponent_ServerSetPreviewPartTransformParameters Parms{};

	Parms.PartIndex = PartIndex;
	Parms.NewTransformParameters = std::move(NewTransformParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewTransformParameters
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBRToolPreviewTransformParameters&NewTransformParameters                                 (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bSnapTransform                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetPreviewTransformParameters(const struct FBRToolPreviewTransformParameters& NewTransformParameters, bool bSnapTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetPreviewTransformParameters");

	Params::BRToolPreviewManagerComponent_ServerSetPreviewTransformParameters Parms{};

	Parms.NewTransformParameters = std::move(NewTransformParameters);
	Parms.bSnapTransform = bSnapTransform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.ServerSetPreviewVisibility
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::ServerSetPreviewVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "ServerSetPreviewVisibility");

	Params::BRToolPreviewManagerComponent_ServerSetPreviewVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetHypotheticalGridTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  RelativeTo                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                NewRelativeTransform                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetHypotheticalGridTransform(class USceneComponent* RelativeTo, const struct FTransform& NewRelativeTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetHypotheticalGridTransform");

	Params::BRToolPreviewManagerComponent_SetHypotheticalGridTransform Parms{};

	Parms.RelativeTo = RelativeTo;
	Parms.NewRelativeTransform = std::move(NewRelativeTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewInstancingParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRToolPreviewInstancingParameters&NewInstancingParameters                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetPreviewInstancingParameters(const struct FBRToolPreviewInstancingParameters& NewInstancingParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetPreviewInstancingParameters");

	Params::BRToolPreviewManagerComponent_SetPreviewInstancingParameters Parms{};

	Parms.NewInstancingParameters = std::move(NewInstancingParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewPartDisplayParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PartIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRToolPreviewPartDisplayParameters&NewDisplayParameters                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetPreviewPartDisplayParameters(int32 PartIndex, const struct FBRToolPreviewPartDisplayParameters& NewDisplayParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetPreviewPartDisplayParameters");

	Params::BRToolPreviewManagerComponent_SetPreviewPartDisplayParameters Parms{};

	Parms.PartIndex = PartIndex;
	Parms.NewDisplayParameters = std::move(NewDisplayParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewPartTransformParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PartIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRToolPreviewPartTransformParameters&NewTransformParameters                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetPreviewPartTransformParameters(int32 PartIndex, const struct FBRToolPreviewPartTransformParameters& NewTransformParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetPreviewPartTransformParameters");

	Params::BRToolPreviewManagerComponent_SetPreviewPartTransformParameters Parms{};

	Parms.PartIndex = PartIndex;
	Parms.NewTransformParameters = std::move(NewTransformParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewTransformParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRToolPreviewTransformParameters&NewTransformParameters                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bSnapTransform                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetPreviewTransformParameters(const struct FBRToolPreviewTransformParameters& NewTransformParameters, bool bSnapTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetPreviewTransformParameters");

	Params::BRToolPreviewManagerComponent_SetPreviewTransformParameters Parms{};

	Parms.NewTransformParameters = std::move(NewTransformParameters);
	Parms.bSnapTransform = bSnapTransform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.SetPreviewVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRToolPreviewManagerComponent::SetPreviewVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "SetPreviewVisibility");

	Params::BRToolPreviewManagerComponent_SetPreviewVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRToolPreviewManagerComponent.GetPreviewPart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PartIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBRToolPreviewPartBase*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBRToolPreviewPartBase* UBRToolPreviewManagerComponent::GetPreviewPart(int32 PartIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRToolPreviewManagerComponent", "GetPreviewPart");

	Params::BRToolPreviewManagerComponent_GetPreviewPart Parms{};

	Parms.PartIndex = PartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Applicator.Audio_OnAddBrickComponent
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnAddBrickComponent(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnAddBrickComponent");

	Params::BRTool_Applicator_Audio_OnAddBrickComponent Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnCopyBrick
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnCopyBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnCopyBrick");

	Params::BRTool_Applicator_Audio_OnCopyBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnCopyEntity
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnCopyEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnCopyEntity");

	Params::BRTool_Applicator_Audio_OnCopyEntity Parms{};

	Parms.ENTITY = ENTITY;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnCopyOrPasteMissed
// (Event, Public, BlueprintEvent)

void ABRTool_Applicator::Audio_OnCopyOrPasteMissed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnCopyOrPasteMissed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Applicator.Audio_OnPasteBrick
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnPasteBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnPasteBrick");

	Params::BRTool_Applicator_Audio_OnPasteBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnPasteEntity
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnPasteEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnPasteEntity");

	Params::BRTool_Applicator_Audio_OnPasteEntity Parms{};

	Parms.ENTITY = ENTITY;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnRemoveBrickComponent
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnRemoveBrickComponent(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnRemoveBrickComponent");

	Params::BRTool_Applicator_Audio_OnRemoveBrickComponent Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnSelectBrick
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnSelectBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnSelectBrick");

	Params::BRTool_Applicator_Audio_OnSelectBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnSelectEntity
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::Audio_OnSelectEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnSelectEntity");

	Params::BRTool_Applicator_Audio_OnSelectEntity Parms{};

	Parms.ENTITY = ENTITY;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Applicator.Audio_OnSelectMissed
// (Event, Public, BlueprintEvent)

void ABRTool_Applicator::Audio_OnSelectMissed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "Audio_OnSelectMissed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Applicator.ManualFire
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBRApplicatorDialogBase*          OpenApplicatorDialog                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ManualFire(class UBRApplicatorDialogBase* OpenApplicatorDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ManualFire");

	Params::BRTool_Applicator_ManualFire Parms{};

	Parms.OpenApplicatorDialog = OpenApplicatorDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerAddComponent
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerAddComponent(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerAddComponent");

	Params::BRTool_Applicator_ServerAddComponent Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerApplyBrickState
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 CollisionChannels                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UBrickComponentTypeBase*>&ComponentTypes                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FInspectorPropertyChangelist>&ComponentDatas                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerApplyBrickState(const struct FBrickHandle& BrickHandle, bool bVisible, EBrickCollisionChannels CollisionChannels, const TArray<class UBrickComponentTypeBase*>& ComponentTypes, const TArray<struct FInspectorPropertyChangelist>& ComponentDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerApplyBrickState");

	Params::BRTool_Applicator_ServerApplyBrickState Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.bVisible = bVisible;
	Parms.CollisionChannels = CollisionChannels;
	Parms.ComponentTypes = std::move(ComponentTypes);
	Parms.ComponentDatas = std::move(ComponentDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerCommitModifications
// (Net, Native, Event, Public, NetServer, BlueprintCallable)

void ABRTool_Applicator::ServerCommitModifications()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerCommitModifications");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerCopyBrick
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerCopyBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerCopyBrick");

	Params::BRTool_Applicator_ServerCopyBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerCopyEntity
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerCopyEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerCopyEntity");

	Params::BRTool_Applicator_ServerCopyEntity Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerModifyComponent
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerModifyComponent(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component, const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerModifyComponent");

	Params::BRTool_Applicator_ServerModifyComponent Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;
	Parms.Changelist = std::move(Changelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerModifyEntity
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerModifyEntity(class AActor* ENTITY, const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerModifyEntity");

	Params::BRTool_Applicator_ServerModifyEntity Parms{};

	Parms.ENTITY = ENTITY;
	Parms.Changelist = std::move(Changelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerPasteBrick
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerPasteBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerPasteBrick");

	Params::BRTool_Applicator_ServerPasteBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerPasteEntity
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerPasteEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerPasteEntity");

	Params::BRTool_Applicator_ServerPasteEntity Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerRemoveComponent
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerRemoveComponent(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerRemoveComponent");

	Params::BRTool_Applicator_ServerRemoveComponent Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerResetBrickState
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerResetBrickState(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerResetBrickState");

	Params::BRTool_Applicator_ServerResetBrickState Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerSetCollisionChannels
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBrickCollisionChannels                 CollisionChannels                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerSetCollisionChannels(const struct FBrickHandle& BrickHandle, EBrickCollisionChannels CollisionChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerSetCollisionChannels");

	Params::BRTool_Applicator_ServerSetCollisionChannels Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.CollisionChannels = CollisionChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerSetComponentEnabledProp
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          Component                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerSetComponentEnabledProp(const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* Component, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerSetComponentEnabledProp");

	Params::BRTool_Applicator_ServerSetComponentEnabledProp Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.Component = Component;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Applicator.ServerSetVisible
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Applicator::ServerSetVisible(const struct FBrickHandle& BrickHandle, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Applicator", "ServerSetVisible");

	Params::BRTool_Applicator_ServerSetVisible Parms{};

	Parms.BrickHandle = std::move(BrickHandle);
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.HammerBrick
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::HammerBrick(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "HammerBrick");

	Params::BRTool_Hammer_HammerBrick Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Hammer.HammerEntity
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::HammerEntity(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "HammerEntity");

	Params::BRTool_Hammer_HammerEntity Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Hammer.HammerHit
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    bHit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitNormal                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::HammerHit(bool bHit, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "HammerHit");

	Params::BRTool_Hammer_HammerHit Parms{};

	Parms.bHit = bHit;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Hammer.MulticastHammerBrick
// (Final, Net, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::MulticastHammerBrick(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "MulticastHammerBrick");

	Params::BRTool_Hammer_MulticastHammerBrick Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.MulticastHammerEntity
// (Final, Net, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::MulticastHammerEntity(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "MulticastHammerEntity");

	Params::BRTool_Hammer_MulticastHammerEntity Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.MulticastHammerHit
// (Final, Net, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// bool                                    bHit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitNormal                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::MulticastHammerHit(bool bHit, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "MulticastHammerHit");

	Params::BRTool_Hammer_MulticastHammerHit Parms{};

	Parms.bHit = bHit;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.ServerHammerBrick
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::ServerHammerBrick(const struct FBrickHandle& BrickHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "ServerHammerBrick");

	Params::BRTool_Hammer_ServerHammerBrick Parms{};

	Parms.BrickHandle = std::move(BrickHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.ServerHammerEntity
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           ENTITY                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::ServerHammerEntity(class AActor* ENTITY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "ServerHammerEntity");

	Params::BRTool_Hammer_ServerHammerEntity Parms{};

	Parms.ENTITY = ENTITY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Hammer.ServerHammerHit
// (Final, Net, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// bool                                    bHit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitNormal                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Hammer::ServerHammerHit(bool bHit, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Hammer", "ServerHammerHit");

	Params::BRTool_Hammer_ServerHammerHit Parms{};

	Parms.bHit = bHit;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ClientPlayReleaseOff
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void ABRTool_Manipulator::ClientPlayReleaseOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ClientPlayReleaseOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ClientPlaySound
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ClientPlaySound(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ClientPlaySound");

	Params::BRTool_Manipulator_ClientPlaySound Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.CreateInputCapturer
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Manipulator::CreateInputCapturer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "CreateInputCapturer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.DestroyInputCapturer
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Manipulator::DestroyInputCapturer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "DestroyInputCapturer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.HasPhysicsGrabbedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRTool_Manipulator::HasPhysicsGrabbedObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "HasPhysicsGrabbedObject");

	Params::BRTool_Manipulator_HasPhysicsGrabbedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Manipulator.LaunchGrabbedComponent
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Manipulator::LaunchGrabbedComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "LaunchGrabbedComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.LineTraceForComponent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   bValidHit                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* ABRTool_Manipulator::LineTraceForComponent(bool* bValidHit, struct FHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "LineTraceForComponent");

	Params::BRTool_Manipulator_LineTraceForComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValidHit != nullptr)
		*bValidHit = Parms.bValidHit;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Manipulator.MulticastInspect
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void ABRTool_Manipulator::MulticastInspect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "MulticastInspect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.MulticastSetGrabObject
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Grabbed                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDisableGravity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::MulticastSetGrabObject(class UPrimitiveComponent* Grabbed, const struct FVector& Offset, bool bDisableGravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "MulticastSetGrabObject");

	Params::BRTool_Manipulator_MulticastSetGrabObject Parms{};

	Parms.Grabbed = Grabbed;
	Parms.Offset = std::move(Offset);
	Parms.bDisableGravity = bDisableGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.OnLaunch
// (Event, Public, BlueprintEvent)

void ABRTool_Manipulator::OnLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.OnObjectGrabbed
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABRTool_Manipulator::OnObjectGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnObjectGrabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.OnObjectReleased
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABRTool_Manipulator::OnObjectReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnObjectReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.OnReleaseOff
// (Event, Public, BlueprintEvent)

void ABRTool_Manipulator::OnReleaseOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnReleaseOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.OnTogglePin
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    newPin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::OnTogglePin(bool newPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnTogglePin");

	Params::BRTool_Manipulator_OnTogglePin Parms{};

	Parms.newPin = newPin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRTool_Manipulator.OnUpdateGrabbedComponent
// (Event, Public, BlueprintEvent)

void ABRTool_Manipulator::OnUpdateGrabbedComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "OnUpdateGrabbedComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.PlayInspectAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABRTool_Manipulator::PlayInspectAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "PlayInspectAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Brickadia.BRTool_Manipulator.ReleaseObject
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Manipulator::ReleaseObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ReleaseObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerAttachGrabbedObject
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FBRManipulatorAttachJointData&AttachData                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerAttachGrabbedObject(const struct FBRManipulatorAttachJointData& AttachData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerAttachGrabbedObject");

	Params::BRTool_Manipulator_ServerAttachGrabbedObject Parms{};

	Parms.AttachData = std::move(AttachData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerDetachGrabbedObjectJoints
// (Net, NetReliable, Native, Event, Public, NetServer)

void ABRTool_Manipulator::ServerDetachGrabbedObjectJoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerDetachGrabbedObjectJoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerFreezeObject
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              TARGET                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerFreezeObject(class UPrimitiveComponent* TARGET)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerFreezeObject");

	Params::BRTool_Manipulator_ServerFreezeObject Parms{};

	Parms.TARGET = TARGET;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerGrabObject
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bRequestLockRot                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              RayObjct                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerGrabObject(bool bRequestLockRot, class UPrimitiveComponent* RayObjct, const struct FVector& HitLocation, float HitDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerGrabObject");

	Params::BRTool_Manipulator_ServerGrabObject Parms{};

	Parms.bRequestLockRot = bRequestLockRot;
	Parms.RayObjct = RayObjct;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDistance = HitDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerInspect
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ABRTool_Manipulator::ServerInspect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerInspect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerProcessMousePitch
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerProcessMousePitch(float Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerProcessMousePitch");

	Params::BRTool_Manipulator_ServerProcessMousePitch Parms{};

	Parms.Pitch = Pitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerProcessMouseScroll
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// float                                   Scroll                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerProcessMouseScroll(float Scroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerProcessMouseScroll");

	Params::BRTool_Manipulator_ServerProcessMouseScroll Parms{};

	Parms.Scroll = Scroll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerProcessMouseYaw
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerProcessMouseYaw(float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerProcessMouseYaw");

	Params::BRTool_Manipulator_ServerProcessMouseYaw Parms{};

	Parms.Yaw = Yaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.ServerRelease
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bLaunch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBRManipulatorAttachJointData&ClientAttachJointData                                  (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::ServerRelease(bool bLaunch, const struct FBRManipulatorAttachJointData& ClientAttachJointData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "ServerRelease");

	Params::BRTool_Manipulator_ServerRelease Parms{};

	Parms.bLaunch = bLaunch;
	Parms.ClientAttachJointData = std::move(ClientAttachJointData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.UpdatePhysicsHandleTargetLocation
// (Final, Native, Public, BlueprintCallable)

void ABRTool_Manipulator::UpdatePhysicsHandleTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "UpdatePhysicsHandleTargetLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.UpdateSpring
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Manipulator::UpdateSpring(class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "UpdateSpring");

	Params::BRTool_Manipulator_UpdateSpring Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Manipulator.UseToggleMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRTool_Manipulator::UseToggleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "UseToggleMode");

	Params::BRTool_Manipulator_UseToggleMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Manipulator.UseToggleModeBridge
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRTool_Manipulator::UseToggleModeBridge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Manipulator", "UseToggleModeBridge");

	Params::BRTool_Manipulator_UseToggleModeBridge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Brickadia.BRTool_Selector.ServerCaptureTemplate
// (Net, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              TargetGrid                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionCenter                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionSize                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCut                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Selector::ServerCaptureTemplate(class UBrickGridComponent* TargetGrid, const struct FIntVector& SelectionCenter, const struct FIntVector& SelectionSize, bool bCut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Selector", "ServerCaptureTemplate");

	Params::BRTool_Selector_ServerCaptureTemplate Parms{};

	Parms.TargetGrid = TargetGrid;
	Parms.SelectionCenter = std::move(SelectionCenter);
	Parms.SelectionSize = std::move(SelectionSize);
	Parms.bCut = bCut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Selector.ServerDeleteSelection
// (Net, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              TargetGrid                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionCenter                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionSize                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Selector::ServerDeleteSelection(class UBrickGridComponent* TargetGrid, const struct FIntVector& SelectionCenter, const struct FIntVector& SelectionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Selector", "ServerDeleteSelection");

	Params::BRTool_Selector_ServerDeleteSelection Parms{};

	Parms.TargetGrid = TargetGrid;
	Parms.SelectionCenter = std::move(SelectionCenter);
	Parms.SelectionSize = std::move(SelectionSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Selector.ServerPasteTemplate
// (Net, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bIntoInventory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Selector::ServerPasteTemplate(bool bIntoInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Selector", "ServerPasteTemplate");

	Params::BRTool_Selector_ServerPasteTemplate Parms{};

	Parms.bIntoInventory = bIntoInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRTool_Selector.ServerSplitSelection
// (Net, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// class UBrickGridComponent*              TargetGrid                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionCenter                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                SelectionSize                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRTool_Selector::ServerSplitSelection(class UBrickGridComponent* TargetGrid, const struct FIntVector& SelectionCenter, const struct FIntVector& SelectionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRTool_Selector", "ServerSplitSelection");

	Params::BRTool_Selector_ServerSplitSelection Parms{};

	Parms.TargetGrid = TargetGrid;
	Parms.SelectionCenter = std::move(SelectionCenter);
	Parms.SelectionSize = std::move(SelectionSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.ClearFreezeFrame
// (Final, Native, Public, BlueprintCallable)

void ABRWeaponBase::ClearFreezeFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "ClearFreezeFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.ClearPredictedWeaponInput
// (Final, Native, Public, BlueprintCallable)

void ABRWeaponBase::ClearPredictedWeaponInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "ClearPredictedWeaponInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.ClientDebugFiringVector
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// const struct FVector&                   position                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRWeaponBase::ClientDebugFiringVector(const struct FVector& position, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "ClientDebugFiringVector");

	Params::BRWeaponBase_ClientDebugFiringVector Parms{};

	Parms.position = std::move(position);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.GetHomingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBRWeaponHomingTarget            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FBRWeaponHomingTarget ABRWeaponBase::GetHomingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "GetHomingTarget");

	Params::BRWeaponBase_GetHomingTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedExplosion
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FBRWeaponProjectileExplosionRep&Info                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRWeaponBase::MulticastReplicateAcceleratedExplosion(const struct FBRWeaponProjectileExplosionRep& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "MulticastReplicateAcceleratedExplosion");

	Params::BRWeaponBase_MulticastReplicateAcceleratedExplosion Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedExplosionWithSeed
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FBRWeaponProjectileExplosionRepWithSeed&Info                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRWeaponBase::MulticastReplicateAcceleratedExplosionWithSeed(const struct FBRWeaponProjectileExplosionRepWithSeed& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "MulticastReplicateAcceleratedExplosionWithSeed");

	Params::BRWeaponBase_MulticastReplicateAcceleratedExplosionWithSeed Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedMeleeExplosion
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FBRWeaponMeleeExplosionRep&Info                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRWeaponBase::MulticastReplicateAcceleratedMeleeExplosion(const struct FBRWeaponMeleeExplosionRep& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "MulticastReplicateAcceleratedMeleeExplosion");

	Params::BRWeaponBase_MulticastReplicateAcceleratedMeleeExplosion Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedProjectiles
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FBRWeaponProjectileSpawnRep&Info                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRWeaponBase::MulticastReplicateAcceleratedProjectiles(const struct FBRWeaponProjectileSpawnRep& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "MulticastReplicateAcceleratedProjectiles");

	Params::BRWeaponBase_MulticastReplicateAcceleratedProjectiles Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.MulticastReplicateAcceleratedProjectilesWithSeed
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FBRWeaponProjectileSpawnRepWithSeed&Info                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABRWeaponBase::MulticastReplicateAcceleratedProjectilesWithSeed(const struct FBRWeaponProjectileSpawnRepWithSeed& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "MulticastReplicateAcceleratedProjectilesWithSeed");

	Params::BRWeaponBase_MulticastReplicateAcceleratedProjectilesWithSeed Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.OnRep_ReplicatedSimPosition
// (Final, Native, Public)

void ABRWeaponBase::OnRep_ReplicatedSimPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "OnRep_ReplicatedSimPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.ServerSetPendingHomingTarget
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const struct FBRWeaponHomingTarget&     HomingTarget                                           (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABRWeaponBase::ServerSetPendingHomingTarget(const struct FBRWeaponHomingTarget& HomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "ServerSetPendingHomingTarget");

	Params::BRWeaponBase_ServerSetPendingHomingTarget Parms{};

	Parms.HomingTarget = std::move(HomingTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.SetFreezeFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRWeaponBase::SetFreezeFrame(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "SetFreezeFrame");

	Params::BRWeaponBase_SetFreezeFrame Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.SetPendingHomingTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRWeaponHomingTarget&     HomingTarget                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABRWeaponBase::SetPendingHomingTarget(const struct FBRWeaponHomingTarget& HomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "SetPendingHomingTarget");

	Params::BRWeaponBase_SetPendingHomingTarget Parms{};

	Parms.HomingTarget = std::move(HomingTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.SetPredictedWeaponInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBRWeaponInputKeys                      Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABRWeaponBase::SetPredictedWeaponInput(EBRWeaponInputKeys Input, bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "SetPredictedWeaponInput");

	Params::BRWeaponBase_SetPredictedWeaponInput Parms{};

	Parms.Input = Input;
	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponBase.CheckForFiringBlock
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector*                         OutErrorLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABRWeaponBase::CheckForFiringBlock(struct FVector* OutErrorLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponBase", "CheckForFiringBlock");

	Params::BRWeaponBase_CheckForFiringBlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrorLocation != nullptr)
		*OutErrorLocation = std::move(Parms.OutErrorLocation);

	return Parms.ReturnValue;
}


// Function Brickadia.BRWeaponProjectileMovementComponent.OnRep_ReplicatedHomingTargetComponent
// (Final, Native, Public)

void UBRWeaponProjectileMovementComponent::OnRep_ReplicatedHomingTargetComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponProjectileMovementComponent", "OnRep_ReplicatedHomingTargetComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWeaponResourceSubsystem.GetPlayerSlotFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBRWeaponResource*                Resource                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRWeaponResourceSubsystem::GetPlayerSlotFor(class UBRWeaponResource* Resource) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWeaponResourceSubsystem", "GetPlayerSlotFor");

	Params::BRWeaponResourceSubsystem_GetPlayerSlotFor Parms{};

	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWorldDetailsPanel.HandleDeleteWorldClicked
// (Final, Native, Private)

void UBRWorldDetailsPanel::HandleDeleteWorldClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldDetailsPanel", "HandleDeleteWorldClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldDetailsPanel.HandleLoadWorldClicked
// (Final, Native, Private)

void UBRWorldDetailsPanel::HandleLoadWorldClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldDetailsPanel", "HandleLoadWorldClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldBrowserDialog.HandleNewWorldClicked
// (Final, Native, Private)

void UBRWorldBrowserDialog::HandleNewWorldClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldBrowserDialog", "HandleNewWorldClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldBrowserDialog.HandleSearchClicked
// (Final, Native, Private)

void UBRWorldBrowserDialog::HandleSearchClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldBrowserDialog", "HandleSearchClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldBrowserDialog.OnEnvironmentLoadRequested
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    Environment                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWorldBrowserDialog::OnEnvironmentLoadRequested(const class FString& Environment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldBrowserDialog", "OnEnvironmentLoadRequested");

	Params::BRWorldBrowserDialog_OnEnvironmentLoadRequested Parms{};

	Parms.Environment = std::move(Environment);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWorldBrowserDialog.OnWorldLoadRequested
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWriteable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWorldBrowserDialog::OnWorldLoadRequested(const class FString& FilePath, bool bWriteable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldBrowserDialog", "OnWorldLoadRequested");

	Params::BRWorldBrowserDialog_OnWorldLoadRequested Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.bWriteable = bWriteable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.BRWorldCreationDialog.OnCreateButtonClicked
// (Final, Native, Public)

void UBRWorldCreationDialog::OnCreateButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldCreationDialog", "OnCreateButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.ColorWheel.SetValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UColorWheel::SetValue(const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorWheel", "SetValue");

	Params::ColorWheel_SetValue Parms{};

	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.ColorWheel.GetValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UColorWheel::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ColorWheel", "GetValue");

	Params::ColorWheel_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionTwoButtonsDialog.CreateTwoButtonsDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage1                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage2                                         (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle1                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle2                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon1_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon2_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRTwoButtonsDialogBase>DialogClass_0                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionTwoButtonsDialog*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionTwoButtonsDialog* UAsyncActionTwoButtonsDialog::CreateTwoButtonsDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage1, const class FText& ButtonMessage2, EBRDialogButtonStyle ButtonStyle1, EBRDialogButtonStyle ButtonStyle2, class UTexture2D* ButtonIcon1_0, class UTexture2D* ButtonIcon2_0, TSubclassOf<class UBRTwoButtonsDialogBase> DialogClass_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionTwoButtonsDialog", "CreateTwoButtonsDialog");

	Params::AsyncActionTwoButtonsDialog_CreateTwoButtonsDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage1 = std::move(ButtonMessage1);
	Parms.ButtonMessage2 = std::move(ButtonMessage2);
	Parms.ButtonStyle1 = ButtonStyle1;
	Parms.ButtonStyle2 = ButtonStyle2;
	Parms.ButtonIcon1_0 = ButtonIcon1_0;
	Parms.ButtonIcon2_0 = ButtonIcon2_0;
	Parms.DialogClass_0 = DialogClass_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionTwoButtonsDialog.QuickCreateTwoButtonsDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage1                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage2                                         (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle1                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle2                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon1_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon2_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionTwoButtonsDialog*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionTwoButtonsDialog* UAsyncActionTwoButtonsDialog::QuickCreateTwoButtonsDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage1, const class FText& ButtonMessage2, EBRDialogButtonStyle ButtonStyle1, EBRDialogButtonStyle ButtonStyle2, class UTexture2D* ButtonIcon1_0, class UTexture2D* ButtonIcon2_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionTwoButtonsDialog", "QuickCreateTwoButtonsDialog");

	Params::AsyncActionTwoButtonsDialog_QuickCreateTwoButtonsDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage1 = std::move(ButtonMessage1);
	Parms.ButtonMessage2 = std::move(ButtonMessage2);
	Parms.ButtonStyle1 = ButtonStyle1;
	Parms.ButtonStyle2 = ButtonStyle2;
	Parms.ButtonIcon1_0 = ButtonIcon1_0;
	Parms.ButtonIcon2_0 = ButtonIcon2_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionTwoButtonsDialog.HandleClickedButton1
// (Final, Native, Private)

void UAsyncActionTwoButtonsDialog::HandleClickedButton1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionTwoButtonsDialog", "HandleClickedButton1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.AsyncActionTwoButtonsDialog.HandleClickedButton2
// (Final, Native, Private)

void UAsyncActionTwoButtonsDialog::HandleClickedButton2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionTwoButtonsDialog", "HandleClickedButton2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.AsyncActionThreeButtonsDialog.CreateThreeButtonsDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage1                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage2                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage3                                         (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle1                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle2                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle3                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon1_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon2_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon3_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UBRThreeButtonsDialogBase>DialogClass_0                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionThreeButtonsDialog*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionThreeButtonsDialog* UAsyncActionThreeButtonsDialog::CreateThreeButtonsDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage1, const class FText& ButtonMessage2, const class FText& ButtonMessage3, EBRDialogButtonStyle ButtonStyle1, EBRDialogButtonStyle ButtonStyle2, EBRDialogButtonStyle ButtonStyle3, class UTexture2D* ButtonIcon1_0, class UTexture2D* ButtonIcon2_0, class UTexture2D* ButtonIcon3_0, TSubclassOf<class UBRThreeButtonsDialogBase> DialogClass_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionThreeButtonsDialog", "CreateThreeButtonsDialog");

	Params::AsyncActionThreeButtonsDialog_CreateThreeButtonsDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage1 = std::move(ButtonMessage1);
	Parms.ButtonMessage2 = std::move(ButtonMessage2);
	Parms.ButtonMessage3 = std::move(ButtonMessage3);
	Parms.ButtonStyle1 = ButtonStyle1;
	Parms.ButtonStyle2 = ButtonStyle2;
	Parms.ButtonStyle3 = ButtonStyle3;
	Parms.ButtonIcon1_0 = ButtonIcon1_0;
	Parms.ButtonIcon2_0 = ButtonIcon2_0;
	Parms.ButtonIcon3_0 = ButtonIcon3_0;
	Parms.DialogClass_0 = DialogClass_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionThreeButtonsDialog.QuickCreateThreeButtonsDialog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage1                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage2                                         (Parm, NativeAccessSpecifierPublic)
// const class FText&                      ButtonMessage3                                         (Parm, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle1                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle2                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBRDialogButtonStyle                    ButtonStyle3                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon1_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon2_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ButtonIcon3_0                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowEscapeDialog                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionThreeButtonsDialog*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionThreeButtonsDialog* UAsyncActionThreeButtonsDialog::QuickCreateThreeButtonsDialog(class UObject* WorldContextObject, const class FText& Title, const class FText& Message, const class FText& ButtonMessage1, const class FText& ButtonMessage2, const class FText& ButtonMessage3, EBRDialogButtonStyle ButtonStyle1, EBRDialogButtonStyle ButtonStyle2, EBRDialogButtonStyle ButtonStyle3, class UTexture2D* ButtonIcon1_0, class UTexture2D* ButtonIcon2_0, class UTexture2D* ButtonIcon3_0, bool bAllowEscapeDialog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionThreeButtonsDialog", "QuickCreateThreeButtonsDialog");

	Params::AsyncActionThreeButtonsDialog_QuickCreateThreeButtonsDialog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ButtonMessage1 = std::move(ButtonMessage1);
	Parms.ButtonMessage2 = std::move(ButtonMessage2);
	Parms.ButtonMessage3 = std::move(ButtonMessage3);
	Parms.ButtonStyle1 = ButtonStyle1;
	Parms.ButtonStyle2 = ButtonStyle2;
	Parms.ButtonStyle3 = ButtonStyle3;
	Parms.ButtonIcon1_0 = ButtonIcon1_0;
	Parms.ButtonIcon2_0 = ButtonIcon2_0;
	Parms.ButtonIcon3_0 = ButtonIcon3_0;
	Parms.bAllowEscapeDialog = bAllowEscapeDialog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.AsyncActionThreeButtonsDialog.HandleClickedButton1
// (Final, Native, Private)

void UAsyncActionThreeButtonsDialog::HandleClickedButton1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionThreeButtonsDialog", "HandleClickedButton1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.AsyncActionThreeButtonsDialog.HandleClickedButton2
// (Final, Native, Private)

void UAsyncActionThreeButtonsDialog::HandleClickedButton2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionThreeButtonsDialog", "HandleClickedButton2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.AsyncActionThreeButtonsDialog.HandleClickedButton3
// (Final, Native, Private)

void UAsyncActionThreeButtonsDialog::HandleClickedButton3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionThreeButtonsDialog", "HandleClickedButton3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.DualTileView.SetNumSmallItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewNumSmallItems                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDualTileView::SetNumSmallItems(int32 NewNumSmallItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DualTileView", "SetNumSmallItems");

	Params::DualTileView_SetNumSmallItems Parms{};

	Parms.NewNumSmallItems = NewNumSmallItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.DualTileView.SetSmallEntryHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDualTileView::SetSmallEntryHeight(float NewHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DualTileView", "SetSmallEntryHeight");

	Params::DualTileView_SetSmallEntryHeight Parms{};

	Parms.NewHeight = NewHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.DualTileView.SetSmallEntryWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewWidth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDualTileView::SetSmallEntryWidth(float NewWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DualTileView", "SetSmallEntryWidth");

	Params::DualTileView_SetSmallEntryWidth Parms{};

	Parms.NewWidth = NewWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.HatBase.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ElementIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor AHatBase::GetColor(int32 ElementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "GetColor");

	Params::HatBase_GetColor Parms{};

	Parms.ElementIndex = ElementIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.HatBase.GetColors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FLinearColor>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLinearColor> AHatBase::GetColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "GetColors");

	Params::HatBase_GetColors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.HatBase.SetColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ElementIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHatBase::SetColor(const struct FLinearColor& Color, int32 ElementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "SetColor");

	Params::HatBase_SetColor Parms{};

	Parms.Color = std::move(Color);
	Parms.ElementIndex = ElementIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.HatBase.SetColors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLinearColor>&      Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AHatBase::SetColors(const TArray<struct FLinearColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "SetColors");

	Params::HatBase_SetColors Parms{};

	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.HatBase.SetHatRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHatRotation                            NewRotation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHatBase::SetHatRotation(EHatRotation NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "SetHatRotation");

	Params::HatBase_SetHatRotation Parms{};

	Parms.NewRotation = NewRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.HatBase.GetNumColorableSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHatBase::GetNumColorableSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HatBase", "GetNumColorableSlots");

	Params::HatBase_GetNumColorableSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetMemberDestructable.Die
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FinalDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DeathCauser                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBRRulesetMemberDestructable::Die(float FinalDamage, const class UDamageType* DeathType, class AController* InstigatedBy, class AActor* DeathCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMemberDestructable", "Die");

	Params::BRRulesetMemberDestructable_Die Parms{};

	Parms.FinalDamage = FinalDamage;
	Parms.DeathType = DeathType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DeathCauser = DeathCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetMemberDestructable.DieInternal
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   FinalDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDamageType*                DeathType                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DeathCauser                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBRRulesetMemberDestructable::DieInternal(float FinalDamage, const class UDamageType* DeathType, class AController* InstigatedBy, class AActor* DeathCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMemberDestructable", "DieInternal");

	Params::BRRulesetMemberDestructable_DieInternal Parms{};

	Parms.FinalDamage = FinalDamage;
	Parms.DeathType = DeathType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DeathCauser = DeathCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRRulesetMemberDestructable.TakeDamageInternal
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageIn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDamageEvent&              DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IBRRulesetMemberDestructable::TakeDamageInternal(float DamageIn, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMemberDestructable", "TakeDamageInternal");

	Params::BRRulesetMemberDestructable_TakeDamageInternal Parms{};

	Parms.DamageIn = DamageIn;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRulesetMemberDestructable.IsDead
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IBRRulesetMemberDestructable::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRRulesetMemberDestructable", "IsDead");

	Params::BRRulesetMemberDestructable_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorCategoryRowBase.AddValueWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInspectorPropertyWidgetBase*     NewWidget                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorCategoryRowBase::AddValueWidget(class UInspectorPropertyWidgetBase* NewWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorCategoryRowBase", "AddValueWidget");

	Params::InspectorCategoryRowBase_AddValueWidget Parms{};

	Parms.NewWidget = NewWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorCategoryRowBase.OnCollapseButtonStateChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsOpen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorCategoryRowBase::OnCollapseButtonStateChanged(bool bIsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorCategoryRowBase", "OnCollapseButtonStateChanged");

	Params::InspectorCategoryRowBase_OnCollapseButtonStateChanged Parms{};

	Parms.bIsOpen = bIsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorCategoryRowBase.SetCategoryRowNameText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInspectorCategoryRowBase::SetCategoryRowNameText(const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorCategoryRowBase", "SetCategoryRowNameText");

	Params::InspectorCategoryRowBase_SetCategoryRowNameText Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             CategoryFName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyDescriptorListCategory&Category                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTargetForAll                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddCategory(class FName CategoryFName, const struct FInspectorPropertyDescriptorListCategory& Category, const struct FInspectorViewTarget& ViewTargetForAll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddCategory");

	Params::InspectorPanelBase_AddCategory Parms{};

	Parms.CategoryFName = CategoryFName;
	Parms.Category = std::move(Category);
	Parms.ViewTargetForAll = std::move(ViewTargetForAll);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddDescriptorList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTargetForAll                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bClearFirst                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddDescriptorList(TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const struct FInspectorViewTarget& ViewTargetForAll, bool bClearFirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddDescriptorList");

	Params::InspectorPanelBase_AddDescriptorList Parms{};

	Parms.ViewClass = ViewClass;
	Parms.ViewTargetForAll = std::move(ViewTargetForAll);
	Parms.bClearFirst = bClearFirst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddDescriptorList2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTargetForAll                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bClearFirst                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddDescriptorList2(class UInspectorPropertyDescriptorList* View, const struct FInspectorViewTarget& ViewTargetForAll, bool bClearFirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddDescriptorList2");

	Params::InspectorPanelBase_AddDescriptorList2 Parms{};

	Parms.View = View;
	Parms.ViewTargetForAll = std::move(ViewTargetForAll);
	Parms.bClearFirst = bClearFirst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddEmptyCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             CategoryFName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      CategoryDisplayName                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorCategoryRowBase>WidgetClassOverride                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInspectorCategoryCollapseMode          CollapseMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddEmptyCategory(class FName CategoryFName, const class FText& CategoryDisplayName, TSubclassOf<class UInspectorCategoryRowBase> WidgetClassOverride, EInspectorCategoryCollapseMode CollapseMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddEmptyCategory");

	Params::InspectorPanelBase_AddEmptyCategory Parms{};

	Parms.CategoryFName = CategoryFName;
	Parms.CategoryDisplayName = std::move(CategoryDisplayName);
	Parms.WidgetClassOverride = WidgetClassOverride;
	Parms.CollapseMode = CollapseMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddInlineProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             CategoryFName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptor*     PropertyDescriptor                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddInlineProperty(class FName CategoryFName, class UInspectorPropertyDescriptor* PropertyDescriptor, const struct FInspectorViewTarget& ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddInlineProperty");

	Params::InspectorPanelBase_AddInlineProperty Parms{};

	Parms.CategoryFName = CategoryFName;
	Parms.PropertyDescriptor = PropertyDescriptor;
	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.AddProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             CategoryFName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptor*     PropertyDescriptor                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyRowBase>WidgetClassOverride                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::AddProperty(class FName CategoryFName, class UInspectorPropertyDescriptor* PropertyDescriptor, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyRowBase> WidgetClassOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "AddProperty");

	Params::InspectorPanelBase_AddProperty Parms{};

	Parms.CategoryFName = CategoryFName;
	Parms.PropertyDescriptor = PropertyDescriptor;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.WidgetClassOverride = WidgetClassOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.ClearChangelist
// (Final, Native, Public, BlueprintCallable)

void UInspectorPanelBase::ClearChangelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "ClearChangelist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.ClearProperties
// (Final, Native, Public, BlueprintCallable)

void UInspectorPanelBase::ClearProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "ClearProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.DoLiveUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::DoLiveUpdate(bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "DoLiveUpdate");

	Params::InspectorPanelBase_DoLiveUpdate Parms{};

	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.HandlePropertyCommit
// (Final, Native, Public)
// Parameters:
// class UInspectorPropertyWidgetBase*     DirtyWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::HandlePropertyCommit(class UInspectorPropertyWidgetBase* DirtyWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "HandlePropertyCommit");

	Params::InspectorPanelBase_HandlePropertyCommit Parms{};

	Parms.DirtyWidget = DirtyWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.HandlePropertyEdit
// (Final, Native, Public)
// Parameters:
// class UInspectorPropertyWidgetBase*     DirtyWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPanelBase::HandlePropertyEdit(class UInspectorPropertyWidgetBase* DirtyWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "HandlePropertyEdit");

	Params::InspectorPanelBase_HandlePropertyEdit Parms{};

	Parms.DirtyWidget = DirtyWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.ResetChangelist
// (Final, Native, Public, BlueprintCallable)

void UInspectorPanelBase::ResetChangelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "ResetChangelist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.SetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyValue&   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInspectorPanelBase::SetValue(class FName ValueName, const struct FInspectorPropertyValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "SetValue");

	Params::InspectorPanelBase_SetValue Parms{};

	Parms.ValueName = ValueName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.SetValuesFromChangelist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInspectorPanelBase::SetValuesFromChangelist(const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "SetValuesFromChangelist");

	Params::InspectorPanelBase_SetValuesFromChangelist Parms{};

	Parms.Changelist = std::move(Changelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPanelBase.GetChangelist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorPanelBase::GetChangelist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetChangelist");

	Params::InspectorPanelBase_GetChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPanelBase.GetChangelistForLastEditedProperty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorPanelBase::GetChangelistForLastEditedProperty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetChangelistForLastEditedProperty");

	Params::InspectorPanelBase_GetChangelistForLastEditedProperty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPanelBase.GetReverseChangelist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorPanelBase::GetReverseChangelist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetReverseChangelist");

	Params::InspectorPanelBase_GetReverseChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPanelBase.GetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue*         ValueOut                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInspectorPanelBase::GetValue(class FName ValueName, struct FInspectorPropertyValue* ValueOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetValue");

	Params::InspectorPanelBase_GetValue Parms{};

	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ValueOut != nullptr)
		*ValueOut = std::move(Parms.ValueOut);
}


// Function Brickadia.InspectorPanelBase.GetVerboseChangelist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorPanelBase::GetVerboseChangelist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetVerboseChangelist");

	Params::InspectorPanelBase_GetVerboseChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPanelBase.GetVerboseModifiedChangelist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorPanelBase::GetVerboseModifiedChangelist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "GetVerboseModifiedChangelist");

	Params::InspectorPanelBase_GetVerboseModifiedChangelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPanelBase.HasChanges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPanelBase::HasChanges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPanelBase", "HasChanges");

	Params::InspectorPanelBase_HasChanges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor_Enum.GetEnumOptionList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, uint8>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, uint8> UInspectorPropertyDescriptor_Enum::GetEnumOptionList(const struct FInspectorViewTarget& ViewTarget, class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor_Enum", "GetEnumOptionList");

	Params::InspectorPropertyDescriptor_Enum_GetEnumOptionList Parms{};

	Parms.ViewTarget = std::move(ViewTarget);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor_Enum.GetShouldShowEnumOption
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPropertyDescriptor_Enum::GetShouldShowEnumOption(const struct FInspectorViewTarget& ViewTarget, class UObject* WorldContext, uint8 Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor_Enum", "GetShouldShowEnumOption");

	Params::InspectorPropertyDescriptor_Enum_GetShouldShowEnumOption Parms{};

	Parms.ViewTarget = std::move(ViewTarget);
	Parms.WorldContext = WorldContext;
	Parms.Option = Option;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyDescriptor_StringListToInt.GetStringList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UInspectorPropertyDescriptor_StringListToInt::GetStringList(const struct FInspectorViewTarget& ViewTarget, class UObject* WorldContext) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyDescriptor_StringListToInt", "GetStringList");

	Params::InspectorPropertyDescriptor_StringListToInt_GetStringList Parms{};

	Parms.ViewTarget = std::move(ViewTarget);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyRowBase.AddValueWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInspectorPropertyWidgetBase*     NewWidget                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyRowBase::AddValueWidget(class UInspectorPropertyWidgetBase* NewWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyRowBase", "AddValueWidget");

	Params::InspectorPropertyRowBase_AddValueWidget Parms{};

	Parms.NewWidget = NewWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyRowBase.OnAvailabilityChange
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyRowBase::OnAvailabilityChange(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyRowBase", "OnAvailabilityChange");

	Params::InspectorPropertyRowBase_OnAvailabilityChange Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyRowBase.SetPropertyRowNameText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Name_0                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInspectorPropertyRowBase::SetPropertyRowNameText(const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyRowBase", "SetPropertyRowNameText");

	Params::InspectorPropertyRowBase_SetPropertyRowNameText Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.BindSetToDefaultButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UButton*                          ResetButtonIn                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::BindSetToDefaultButton(class UButton* ResetButtonIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "BindSetToDefaultButton");

	Params::InspectorPropertyWidgetBase_BindSetToDefaultButton Parms{};

	Parms.ResetButtonIn = ResetButtonIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.Init
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInspectorPropertyDescriptor*     NewDescriptor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      NewViewTarget                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyRowBase*        NewContainingRow                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::Init(class UInspectorPropertyDescriptor* NewDescriptor, const struct FInspectorViewTarget& NewViewTarget, class UInspectorPropertyRowBase* NewContainingRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "Init");

	Params::InspectorPropertyWidgetBase_Init Parms{};

	Parms.NewDescriptor = NewDescriptor;
	Parms.NewViewTarget = std::move(NewViewTarget);
	Parms.NewContainingRow = NewContainingRow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.LiveUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPropertyWidgetBase::LiveUpdate(bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "LiveUpdate");

	Params::InspectorPropertyWidgetBase_LiveUpdate Parms{};

	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyWidgetBase.OnAvailabilityChange
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::OnAvailabilityChange(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "OnAvailabilityChange");

	Params::InspectorPropertyWidgetBase_OnAvailabilityChange Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.InspectorPropertyWidgetBase.OnInit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UInspectorPropertyDescriptor*     NewDescriptor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      NewViewTarget                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::OnInit(class UInspectorPropertyDescriptor* NewDescriptor, const struct FInspectorViewTarget& NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "OnInit");

	Params::InspectorPropertyWidgetBase_OnInit Parms{};

	Parms.NewDescriptor = NewDescriptor;
	Parms.NewViewTarget = std::move(NewViewTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.InspectorPropertyWidgetBase.OnValueChangedExternally
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInspectorPropertyValue&   ValueIn                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::OnValueChangedExternally(const struct FInspectorPropertyValue& ValueIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "OnValueChangedExternally");

	Params::InspectorPropertyWidgetBase_OnValueChangedExternally Parms{};

	Parms.ValueIn = std::move(ValueIn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Brickadia.InspectorPropertyWidgetBase.ReplaceCachedValue
// (Final, Native, Public, BlueprintCallable)

void UInspectorPropertyWidgetBase::ReplaceCachedValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "ReplaceCachedValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.Reset
// (Final, Native, Public, BlueprintCallable)

void UInspectorPropertyWidgetBase::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.SetDefaultValue
// (Final, Native, Public, BlueprintCallable)

void UInspectorPropertyWidgetBase::SetDefaultValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "SetDefaultValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.SetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyValue&   ValueIn                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUpdatedExternally                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCommitValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::SetValue(const struct FInspectorPropertyValue& ValueIn, bool bUpdatedExternally, bool bCommitValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "SetValue");

	Params::InspectorPropertyWidgetBase_SetValue Parms{};

	Parms.ValueIn = std::move(ValueIn);
	Parms.bUpdatedExternally = bUpdatedExternally;
	Parms.bCommitValue = bCommitValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorPropertyWidgetBase.GetDescriptor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInspectorPropertyDescriptor*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInspectorPropertyDescriptor* UInspectorPropertyWidgetBase::GetDescriptor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "GetDescriptor");

	Params::InspectorPropertyWidgetBase_GetDescriptor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyWidgetBase.GetIsDirty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorPropertyWidgetBase::GetIsDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "GetIsDirty");

	Params::InspectorPropertyWidgetBase_GetIsDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorPropertyWidgetBase.GetValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FInspectorPropertyValue*         ValueOut                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInspectorPropertyWidgetBase::GetValue(struct FInspectorPropertyValue* ValueOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InspectorPropertyWidgetBase", "GetValue");

	Params::InspectorPropertyWidgetBase_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ValueOut != nullptr)
		*ValueOut = std::move(Parms.ValueOut);
}


// Function Brickadia.InspectorStatics.ApplyPropertyChangelistEntryToObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelistEntry&Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRunNotify                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::ApplyPropertyChangelistEntryToObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const struct FInspectorPropertyChangelistEntry& Entry, bool bRunNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ApplyPropertyChangelistEntryToObject");

	Params::InspectorStatics_ApplyPropertyChangelistEntryToObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;
	Parms.Entry = std::move(Entry);
	Parms.bRunNotify = bRunNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorStatics.ApplyPropertyChangelistEntryToObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelistEntry&Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRunNotify                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::ApplyPropertyChangelistEntryToObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View, const struct FInspectorPropertyChangelistEntry& Entry, bool bRunNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ApplyPropertyChangelistEntryToObject2");

	Params::InspectorStatics_ApplyPropertyChangelistEntryToObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;
	Parms.Entry = std::move(Entry);
	Parms.bRunNotify = bRunNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorStatics.ApplyPropertyChangelistToObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRunNotify                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::ApplyPropertyChangelistToObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const struct FInspectorPropertyChangelist& Changelist, bool bRunNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ApplyPropertyChangelistToObject");

	Params::InspectorStatics_ApplyPropertyChangelistToObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;
	Parms.Changelist = std::move(Changelist);
	Parms.bRunNotify = bRunNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorStatics.ApplyPropertyChangelistToObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRunNotify                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::ApplyPropertyChangelistToObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View, const struct FInspectorPropertyChangelist& Changelist, bool bRunNotify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ApplyPropertyChangelistToObject2");

	Params::InspectorStatics_ApplyPropertyChangelistToObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;
	Parms.Changelist = std::move(Changelist);
	Parms.bRunNotify = bRunNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorStatics.ExportPropertyChangelistToDebugString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInspectorStatics::ExportPropertyChangelistToDebugString(const struct FInspectorPropertyChangelist& InChangelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ExportPropertyChangelistToDebugString");

	Params::InspectorStatics_ExportPropertyChangelistToDebugString Parms{};

	Parms.InChangelist = std::move(InChangelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.ExportPropertyChangelistToJson
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonObjectWrapper               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonObjectWrapper UInspectorStatics::ExportPropertyChangelistToJson(class UObject* WorldContext, const struct FInspectorPropertyChangelist& InChangelist, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ExportPropertyChangelistToJson");

	Params::InspectorStatics_ExportPropertyChangelistToJson Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InChangelist = std::move(InChangelist);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.ExportPropertyChangelistToJson2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonObjectWrapper               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonObjectWrapper UInspectorStatics::ExportPropertyChangelistToJson2(class UObject* WorldContext, const struct FInspectorPropertyChangelist& InChangelist, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ExportPropertyChangelistToJson2");

	Params::InspectorStatics_ExportPropertyChangelistToJson2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InChangelist = std::move(InChangelist);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetChangelistValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyChangelist&Changelist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyValue*         OutValue                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorStatics::GetChangelistValue(const struct FInspectorPropertyChangelist& Changelist, class FName ValueName, struct FInspectorPropertyValue* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetChangelistValue");

	Params::InspectorStatics_GetChangelistValue Parms{};

	Parms.Changelist = std::move(Changelist);
	Parms.ValueName = ValueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetDefaultPropertyChangelistFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetDefaultPropertyChangelistFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetDefaultPropertyChangelistFromObject");

	Params::InspectorStatics_GetDefaultPropertyChangelistFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetDefaultPropertyChangelistFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetDefaultPropertyChangelistFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetDefaultPropertyChangelistFromObject2");

	Params::InspectorStatics_GetDefaultPropertyChangelistFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetPropertyChangelistEntryFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      InProperty                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelistEntryReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelistEntry UInspectorStatics::GetPropertyChangelistEntryFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const class FName& InProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetPropertyChangelistEntryFromObject");

	Params::InspectorStatics_GetPropertyChangelistEntryFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;
	Parms.InProperty = InProperty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetPropertyChangelistEntryFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      InProperty                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelistEntryReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelistEntry UInspectorStatics::GetPropertyChangelistEntryFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View, const class FName& InProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetPropertyChangelistEntryFromObject2");

	Params::InspectorStatics_GetPropertyChangelistEntryFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;
	Parms.InProperty = InProperty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetPropertyChangelistFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetPropertyChangelistFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetPropertyChangelistFromObject");

	Params::InspectorStatics_GetPropertyChangelistFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetPropertyChangelistFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetPropertyChangelistFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetPropertyChangelistFromObject2");

	Params::InspectorStatics_GetPropertyChangelistFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetReversePropertyChangelistEntryFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelistEntry&InChangelistEntry                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelistEntryReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelistEntry UInspectorStatics::GetReversePropertyChangelistEntryFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const struct FInspectorPropertyChangelistEntry& InChangelistEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetReversePropertyChangelistEntryFromObject");

	Params::InspectorStatics_GetReversePropertyChangelistEntryFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;
	Parms.InChangelistEntry = std::move(InChangelistEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetReversePropertyChangelistEntryFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelistEntry&InChangelistEntry                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelistEntryReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelistEntry UInspectorStatics::GetReversePropertyChangelistEntryFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View, const struct FInspectorPropertyChangelistEntry& InChangelistEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetReversePropertyChangelistEntryFromObject2");

	Params::InspectorStatics_GetReversePropertyChangelistEntryFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;
	Parms.InChangelistEntry = std::move(InChangelistEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetReversePropertyChangelistFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetReversePropertyChangelistFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass, const struct FInspectorPropertyChangelist& InChangelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetReversePropertyChangelistFromObject");

	Params::InspectorStatics_GetReversePropertyChangelistFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;
	Parms.InChangelist = std::move(InChangelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetReversePropertyChangelistFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetReversePropertyChangelistFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View, const struct FInspectorPropertyChangelist& InChangelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetReversePropertyChangelistFromObject2");

	Params::InspectorStatics_GetReversePropertyChangelistFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;
	Parms.InChangelist = std::move(InChangelist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetVerbosePropertyChangelistFromObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetVerbosePropertyChangelistFromObject(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetVerbosePropertyChangelistFromObject");

	Params::InspectorStatics_GetVerbosePropertyChangelistFromObject Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.GetVerbosePropertyChangelistFromObject2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::GetVerbosePropertyChangelistFromObject2(class UObject* WorldContext, const struct FInspectorViewTarget& ViewTarget, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "GetVerbosePropertyChangelistFromObject2");

	Params::InspectorStatics_GetVerbosePropertyChangelistFromObject2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.ViewTarget = std::move(ViewTarget);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.ImportPropertyChangelistFromJson
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        InJson                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::ImportPropertyChangelistFromJson(class UObject* WorldContext, const struct FJsonObjectWrapper& InJson, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ImportPropertyChangelistFromJson");

	Params::InspectorStatics_ImportPropertyChangelistFromJson Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InJson = std::move(InJson);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.ImportPropertyChangelistFromJson2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonObjectWrapper&        InJson                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::ImportPropertyChangelistFromJson2(class UObject* WorldContext, const struct FJsonObjectWrapper& InJson, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "ImportPropertyChangelistFromJson2");

	Params::InspectorStatics_ImportPropertyChangelistFromJson2 Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InJson = std::move(InJson);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.IsViewTargetValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorViewTarget&      ViewTarget                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorStatics::IsViewTargetValid(const struct FInspectorViewTarget& ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "IsViewTargetValid");

	Params::InspectorStatics_IsViewTargetValid Parms{};

	Parms.ViewTarget = std::move(ViewTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MakeViewTargetFromBrickComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorViewTarget             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInspectorViewTarget UInspectorStatics::MakeViewTargetFromBrickComponent(const class UObject* WorldContext, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MakeViewTargetFromBrickComponent");

	Params::InspectorStatics_MakeViewTargetFromBrickComponent Parms{};

	Parms.WorldContext = WorldContext;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MakeViewTargetFromBrickComponentProperty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBrickHandle&              BrickHandle                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBrickComponentTypeBase*          ComponentType                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorViewTarget             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInspectorViewTarget UInspectorStatics::MakeViewTargetFromBrickComponentProperty(const class UObject* WorldContext, const struct FBrickHandle& BrickHandle, class UBrickComponentTypeBase* ComponentType, const class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MakeViewTargetFromBrickComponentProperty");

	Params::InspectorStatics_MakeViewTargetFromBrickComponentProperty Parms{};

	Parms.WorldContext = WorldContext;
	Parms.BrickHandle = std::move(BrickHandle);
	Parms.ComponentType = ComponentType;
	Parms.PropertyPath = std::move(PropertyPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MakeViewTargetFromObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorViewTarget             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInspectorViewTarget UInspectorStatics::MakeViewTargetFromObject(class UObject* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MakeViewTargetFromObject");

	Params::InspectorStatics_MakeViewTargetFromObject Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MakeViewTargetFromObjectProperty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Instance                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInspectorViewTarget             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInspectorViewTarget UInspectorStatics::MakeViewTargetFromObjectProperty(class UObject* Instance, const class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MakeViewTargetFromObjectProperty");

	Params::InspectorStatics_MakeViewTargetFromObjectProperty Parms{};

	Parms.Instance = Instance;
	Parms.PropertyPath = std::move(PropertyPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MergePropertyChangelists
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyChangelist&ChangelistA                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&ChangelistB                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    Merged                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInspectorStatics::MergePropertyChangelists(const struct FInspectorPropertyChangelist& ChangelistA, const struct FInspectorPropertyChangelist& ChangelistB, struct FInspectorPropertyChangelist* Merged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MergePropertyChangelists");

	Params::InspectorStatics_MergePropertyChangelists Parms{};

	Parms.ChangelistA = std::move(ChangelistA);
	Parms.ChangelistB = std::move(ChangelistB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Merged != nullptr)
		*Merged = std::move(Parms.Merged);

	return Parms.ReturnValue;
}


// Function Brickadia.InspectorStatics.MergePropertyDescriptorList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInspectorPropertyDescriptorList* DescriptorList                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* Other                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::MergePropertyDescriptorList(class UInspectorPropertyDescriptorList* DescriptorList, class UInspectorPropertyDescriptorList* Other)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "MergePropertyDescriptorList");

	Params::InspectorStatics_MergePropertyDescriptorList Parms{};

	Parms.DescriptorList = DescriptorList;
	Parms.Other = Other;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.InspectorStatics.OverridePropertyChangelist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyChangelist&ChangelistA                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyChangelist&ChangelistB                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    Overidden                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UInspectorStatics::OverridePropertyChangelist(const struct FInspectorPropertyChangelist& ChangelistA, const struct FInspectorPropertyChangelist& ChangelistB, struct FInspectorPropertyChangelist* Overidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "OverridePropertyChangelist");

	Params::InspectorStatics_OverridePropertyChangelist Parms{};

	Parms.ChangelistA = std::move(ChangelistA);
	Parms.ChangelistB = std::move(ChangelistB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Overidden != nullptr)
		*Overidden = std::move(Parms.Overidden);
}


// Function Brickadia.InspectorStatics.PreProcessChangelist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    OutChangelist                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelist(const struct FInspectorPropertyChangelist& InChangelist, struct FInspectorPropertyChangelist* OutChangelist, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelist");

	Params::InspectorStatics_PreProcessChangelist Parms{};

	Parms.InChangelist = std::move(InChangelist);
	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChangelist != nullptr)
		*OutChangelist = std::move(Parms.OutChangelist);
}


// Function Brickadia.InspectorStatics.PreProcessChangelist2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInspectorPropertyChangelist&InChangelist                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist*    OutChangelist                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelist2(const struct FInspectorPropertyChangelist& InChangelist, struct FInspectorPropertyChangelist* OutChangelist, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelist2");

	Params::InspectorStatics_PreProcessChangelist2 Parms{};

	Parms.InChangelist = std::move(InChangelist);
	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChangelist != nullptr)
		*OutChangelist = std::move(Parms.OutChangelist);
}


// Function Brickadia.InspectorStatics.PreProcessChangelistEntryInline
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectorPropertyChangelistEntry*InOutEntry                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelistEntryInline(struct FInspectorPropertyChangelistEntry* InOutEntry, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelistEntryInline");

	Params::InspectorStatics_PreProcessChangelistEntryInline Parms{};

	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutEntry != nullptr)
		*InOutEntry = std::move(Parms.InOutEntry);
}


// Function Brickadia.InspectorStatics.PreProcessChangelistEntryInline2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectorPropertyChangelistEntry*InOutEntry                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelistEntryInline2(struct FInspectorPropertyChangelistEntry* InOutEntry, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelistEntryInline2");

	Params::InspectorStatics_PreProcessChangelistEntryInline2 Parms{};

	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutEntry != nullptr)
		*InOutEntry = std::move(Parms.InOutEntry);
}


// Function Brickadia.InspectorStatics.PreProcessChangelistInline
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectorPropertyChangelist*    InOutChangelist                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UInspectorPropertyDescriptorList>ViewClass                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelistInline(struct FInspectorPropertyChangelist* InOutChangelist, TSubclassOf<class UInspectorPropertyDescriptorList> ViewClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelistInline");

	Params::InspectorStatics_PreProcessChangelistInline Parms{};

	Parms.ViewClass = ViewClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutChangelist != nullptr)
		*InOutChangelist = std::move(Parms.InOutChangelist);
}


// Function Brickadia.InspectorStatics.PreProcessChangelistInline2
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInspectorPropertyChangelist*    InOutChangelist                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// class UInspectorPropertyDescriptorList* View                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInspectorStatics::PreProcessChangelistInline2(struct FInspectorPropertyChangelist* InOutChangelist, class UInspectorPropertyDescriptorList* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "PreProcessChangelistInline2");

	Params::InspectorStatics_PreProcessChangelistInline2 Parms{};

	Parms.View = View;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutChangelist != nullptr)
		*InOutChangelist = std::move(Parms.InOutChangelist);
}


// Function Brickadia.InspectorStatics.SetChangelistValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FInspectorPropertyChangelist&ChangelistIn                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ValueName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInspectorPropertyValue&   NewValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FInspectorPropertyChangelist     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FInspectorPropertyChangelist UInspectorStatics::SetChangelistValue(const struct FInspectorPropertyChangelist& ChangelistIn, class FName ValueName, const struct FInspectorPropertyValue& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InspectorStatics", "SetChangelistValue");

	Params::InspectorStatics_SetChangelistValue Parms{};

	Parms.ChangelistIn = std::move(ChangelistIn);
	Parms.ValueName = ValueName;
	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Add_IntVectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Add_IntVectorInt(const struct FIntVector& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Add_IntVectorInt");

	Params::IntVectorExtras_Add_IntVectorInt Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Add_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Add_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Add_IntVectorIntVector");

	Params::IntVectorExtras_Add_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Divide_IntVectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Divide_IntVectorInt(const struct FIntVector& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Divide_IntVectorInt");

	Params::IntVectorExtras_Divide_IntVectorInt Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Divide_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Divide_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Divide_IntVectorIntVector");

	Params::IntVectorExtras_Divide_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.IntVector_GetAbs
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::IntVector_GetAbs(const struct FIntVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "IntVector_GetAbs");

	Params::IntVectorExtras_IntVector_GetAbs Parms{};

	Parms.A = std::move(A);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Multiply_IntVectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Multiply_IntVectorInt(const struct FIntVector& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Multiply_IntVectorInt");

	Params::IntVectorExtras_Multiply_IntVectorInt Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Multiply_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Multiply_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Multiply_IntVectorIntVector");

	Params::IntVectorExtras_Multiply_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Percent_IntVectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Percent_IntVectorInt(const struct FIntVector& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Percent_IntVectorInt");

	Params::IntVectorExtras_Percent_IntVectorInt Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Percent_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Percent_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Percent_IntVectorIntVector");

	Params::IntVectorExtras_Percent_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Subtract_IntVectorInt
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Subtract_IntVectorInt(const struct FIntVector& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Subtract_IntVectorInt");

	Params::IntVectorExtras_Subtract_IntVectorInt Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.IntVectorExtras.Subtract_IntVectorIntVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntVector&                A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntVector&                B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UIntVectorExtras::Subtract_IntVectorIntVector(const struct FIntVector& A, const struct FIntVector& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IntVectorExtras", "Subtract_IntVectorIntVector");

	Params::IntVectorExtras_Subtract_IntVectorIntVector Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.AddMarkup
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Style                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Font                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::AddMarkup(const class FString& InText, const struct FColor& Color, const class FString& Style, const class FString& Font, int32 Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "AddMarkup");

	Params::BRRichTextUtils_AddMarkup Parms{};

	Parms.InText = std::move(InText);
	Parms.Color = std::move(Color);
	Parms.Style = std::move(Style);
	Parms.Font = std::move(Font);
	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.EscapeDecorators
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::EscapeDecorators(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "EscapeDecorators");

	Params::BRRichTextUtils_EscapeDecorators Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.EscapeMarkdown
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::EscapeMarkdown(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "EscapeMarkdown");

	Params::BRRichTextUtils_EscapeMarkdown Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.EscapeMarkup
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::EscapeMarkup(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "EscapeMarkup");

	Params::BRRichTextUtils_EscapeMarkup Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.ExpandMarkdown
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bDidMarkdownChanges                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::ExpandMarkdown(class UObject* WorldContextObject, const class FString& Input, bool* bDidMarkdownChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "ExpandMarkdown");

	Params::BRRichTextUtils_ExpandMarkdown Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bDidMarkdownChanges != nullptr)
		*bDidMarkdownChanges = Parms.bDidMarkdownChanges;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.ExpandURLs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::ExpandURLs(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "ExpandURLs");

	Params::BRRichTextUtils_ExpandURLs Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.FormatPlayerName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ABRPlayerController*        Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::FormatPlayerName(const class ABRPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "FormatPlayerName");

	Params::BRRichTextUtils_FormatPlayerName Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.FormatPlayerNameFor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ABRPlayerState*             Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABRPlayerState*                   OtherPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::FormatPlayerNameFor(const class ABRPlayerState* Player, class ABRPlayerState* OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "FormatPlayerNameFor");

	Params::BRRichTextUtils_FormatPlayerNameFor Parms{};

	Parms.Player = Player;
	Parms.OtherPlayer = OtherPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.GetEffectiveLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBRRichTextUtils::GetEffectiveLength(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "GetEffectiveLength");

	Params::BRRichTextUtils_GetEffectiveLength Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.ProcessChatMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bDidMarkdownChanges                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::ProcessChatMessage(class UObject* WorldContextObject, const class FString& ChatMessage, bool* bDidMarkdownChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "ProcessChatMessage");

	Params::BRRichTextUtils_ProcessChatMessage Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bDidMarkdownChanges != nullptr)
		*bDidMarkdownChanges = Parms.bDidMarkdownChanges;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.RemoveMarkup
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::RemoveMarkup(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "RemoveMarkup");

	Params::BRRichTextUtils_RemoveMarkup Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRRichTextUtils.RemoveNewLines
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBRRichTextUtils::RemoveNewLines(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BRRichTextUtils", "RemoveNewLines");

	Params::BRRichTextUtils_RemoveNewLines Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Brickadia.BRWorldManager.RequestSaveWorldBP
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBRWorldSaveParams&        Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(bool bSuccess, const struct FBRWorldSaveResult& Result, const class FText& Error)>&Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBRWorldManager::RequestSaveWorldBP(const struct FBRWorldSaveParams& Params_0, const TDelegate<void(bool bSuccess, const struct FBRWorldSaveResult& Result, const class FText& Error)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldManager", "RequestSaveWorldBP");

	Params::BRWorldManager_RequestSaveWorldBP Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Brickadia.BRWorldManager.CanSaveWorldBP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBRWorldManager::CanSaveWorldBP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BRWorldManager", "CanSaveWorldBP");

	Params::BRWorldManager_CanSaveWorldBP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

