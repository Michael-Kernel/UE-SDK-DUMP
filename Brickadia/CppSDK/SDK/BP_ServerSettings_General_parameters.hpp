#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ServerSettings_General

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ServerSettings_General.BP_ServerSettings_General_C.SetMaxSelectedBricks
// 0x0004 (0x0004 - 0x0000)
struct BP_ServerSettings_General_C_SetMaxSelectedBricks final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ServerSettings_General_C_SetMaxSelectedBricks) == 0x000004, "Wrong alignment on BP_ServerSettings_General_C_SetMaxSelectedBricks");
static_assert(sizeof(BP_ServerSettings_General_C_SetMaxSelectedBricks) == 0x000004, "Wrong size on BP_ServerSettings_General_C_SetMaxSelectedBricks");
static_assert(offsetof(BP_ServerSettings_General_C_SetMaxSelectedBricks, NewValue) == 0x000000, "Member 'BP_ServerSettings_General_C_SetMaxSelectedBricks::NewValue' has a wrong offset!");

// Function BP_ServerSettings_General.BP_ServerSettings_General_C.SetMaxSelectionBoxSize
// 0x000C (0x000C - 0x0000)
struct BP_ServerSettings_General_C_SetMaxSelectionBoxSize final
{
public:
	struct FIntVector                             NewValue;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ServerSettings_General_C_SetMaxSelectionBoxSize) == 0x000004, "Wrong alignment on BP_ServerSettings_General_C_SetMaxSelectionBoxSize");
static_assert(sizeof(BP_ServerSettings_General_C_SetMaxSelectionBoxSize) == 0x00000C, "Wrong size on BP_ServerSettings_General_C_SetMaxSelectionBoxSize");
static_assert(offsetof(BP_ServerSettings_General_C_SetMaxSelectionBoxSize, NewValue) == 0x000000, "Member 'BP_ServerSettings_General_C_SetMaxSelectionBoxSize::NewValue' has a wrong offset!");

// Function BP_ServerSettings_General.BP_ServerSettings_General_C.SetSelectionTimeout
// 0x0008 (0x0008 - 0x0000)
struct BP_ServerSettings_General_C_SetSelectionTimeout final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ServerSettings_General_C_SetSelectionTimeout) == 0x000008, "Wrong alignment on BP_ServerSettings_General_C_SetSelectionTimeout");
static_assert(sizeof(BP_ServerSettings_General_C_SetSelectionTimeout) == 0x000008, "Wrong size on BP_ServerSettings_General_C_SetSelectionTimeout");
static_assert(offsetof(BP_ServerSettings_General_C_SetSelectionTimeout, NewValue) == 0x000000, "Member 'BP_ServerSettings_General_C_SetSelectionTimeout::NewValue' has a wrong offset!");

// Function BP_ServerSettings_General.BP_ServerSettings_General_C.SetServerTypeIndex2
// 0x0004 (0x0004 - 0x0000)
struct BP_ServerSettings_General_C_SetServerTypeIndex2 final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ServerSettings_General_C_SetServerTypeIndex2) == 0x000004, "Wrong alignment on BP_ServerSettings_General_C_SetServerTypeIndex2");
static_assert(sizeof(BP_ServerSettings_General_C_SetServerTypeIndex2) == 0x000004, "Wrong size on BP_ServerSettings_General_C_SetServerTypeIndex2");
static_assert(offsetof(BP_ServerSettings_General_C_SetServerTypeIndex2, NewValue) == 0x000000, "Member 'BP_ServerSettings_General_C_SetServerTypeIndex2::NewValue' has a wrong offset!");

}

