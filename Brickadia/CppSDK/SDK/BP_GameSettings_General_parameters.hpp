#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameSettings_General

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetChatDisplayMessages
// 0x0004 (0x0004 - 0x0000)
struct BP_GameSettings_General_C_SetChatDisplayMessages final
{
public:
	int32                                         ChatDisplayMessages_0;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetChatDisplayMessages) == 0x000004, "Wrong alignment on BP_GameSettings_General_C_SetChatDisplayMessages");
static_assert(sizeof(BP_GameSettings_General_C_SetChatDisplayMessages) == 0x000004, "Wrong size on BP_GameSettings_General_C_SetChatDisplayMessages");
static_assert(offsetof(BP_GameSettings_General_C_SetChatDisplayMessages, ChatDisplayMessages_0) == 0x000000, "Member 'BP_GameSettings_General_C_SetChatDisplayMessages::ChatDisplayMessages_0' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetChatDisplayScale
// 0x0008 (0x0008 - 0x0000)
struct BP_GameSettings_General_C_SetChatDisplayScale final
{
public:
	double                                        ChatDisplayScale_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetChatDisplayScale) == 0x000008, "Wrong alignment on BP_GameSettings_General_C_SetChatDisplayScale");
static_assert(sizeof(BP_GameSettings_General_C_SetChatDisplayScale) == 0x000008, "Wrong size on BP_GameSettings_General_C_SetChatDisplayScale");
static_assert(offsetof(BP_GameSettings_General_C_SetChatDisplayScale, ChatDisplayScale_0) == 0x000000, "Member 'BP_GameSettings_General_C_SetChatDisplayScale::ChatDisplayScale_0' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetChatDisplayTimeout
// 0x0008 (0x0008 - 0x0000)
struct BP_GameSettings_General_C_SetChatDisplayTimeout final
{
public:
	double                                        ChatDisplayTimeout_0;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetChatDisplayTimeout) == 0x000008, "Wrong alignment on BP_GameSettings_General_C_SetChatDisplayTimeout");
static_assert(sizeof(BP_GameSettings_General_C_SetChatDisplayTimeout) == 0x000008, "Wrong size on BP_GameSettings_General_C_SetChatDisplayTimeout");
static_assert(offsetof(BP_GameSettings_General_C_SetChatDisplayTimeout, ChatDisplayTimeout_0) == 0x000000, "Member 'BP_GameSettings_General_C_SetChatDisplayTimeout::ChatDisplayTimeout_0' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetChatDisplayWidth
// 0x0008 (0x0008 - 0x0000)
struct BP_GameSettings_General_C_SetChatDisplayWidth final
{
public:
	double                                        ChatDisplayWidth_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetChatDisplayWidth) == 0x000008, "Wrong alignment on BP_GameSettings_General_C_SetChatDisplayWidth");
static_assert(sizeof(BP_GameSettings_General_C_SetChatDisplayWidth) == 0x000008, "Wrong size on BP_GameSettings_General_C_SetChatDisplayWidth");
static_assert(offsetof(BP_GameSettings_General_C_SetChatDisplayWidth, ChatDisplayWidth_0) == 0x000000, "Member 'BP_GameSettings_General_C_SetChatDisplayWidth::ChatDisplayWidth_0' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetDisableFirstPersonModeSwitchAnimation
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation final
{
public:
	bool                                          bYes;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation) == 0x000001, "Wrong alignment on BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation");
static_assert(sizeof(BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation) == 0x000001, "Wrong size on BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation");
static_assert(offsetof(BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation, bYes) == 0x000000, "Member 'BP_GameSettings_General_C_SetDisableFirstPersonModeSwitchAnimation::bYes' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetHideHUDHints2
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSettings_General_C_SetHideHUDHints2 final
{
public:
	bool                                          bShouldHide;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetHideHUDHints2) == 0x000001, "Wrong alignment on BP_GameSettings_General_C_SetHideHUDHints2");
static_assert(sizeof(BP_GameSettings_General_C_SetHideHUDHints2) == 0x000001, "Wrong size on BP_GameSettings_General_C_SetHideHUDHints2");
static_assert(offsetof(BP_GameSettings_General_C_SetHideHUDHints2, bShouldHide) == 0x000000, "Member 'BP_GameSettings_General_C_SetHideHUDHints2::bShouldHide' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetHideWeaponBlockedIndicator
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSettings_General_C_SetHideWeaponBlockedIndicator final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetHideWeaponBlockedIndicator) == 0x000001, "Wrong alignment on BP_GameSettings_General_C_SetHideWeaponBlockedIndicator");
static_assert(sizeof(BP_GameSettings_General_C_SetHideWeaponBlockedIndicator) == 0x000001, "Wrong size on BP_GameSettings_General_C_SetHideWeaponBlockedIndicator");
static_assert(offsetof(BP_GameSettings_General_C_SetHideWeaponBlockedIndicator, bValue) == 0x000000, "Member 'BP_GameSettings_General_C_SetHideWeaponBlockedIndicator::bValue' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetManipulatorUsesToggleMode
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSettings_General_C_SetManipulatorUsesToggleMode final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetManipulatorUsesToggleMode) == 0x000001, "Wrong alignment on BP_GameSettings_General_C_SetManipulatorUsesToggleMode");
static_assert(sizeof(BP_GameSettings_General_C_SetManipulatorUsesToggleMode) == 0x000001, "Wrong size on BP_GameSettings_General_C_SetManipulatorUsesToggleMode");
static_assert(offsetof(BP_GameSettings_General_C_SetManipulatorUsesToggleMode, bNewValue) == 0x000000, "Member 'BP_GameSettings_General_C_SetManipulatorUsesToggleMode::bNewValue' has a wrong offset!");

// Function BP_GameSettings_General.BP_GameSettings_General_C.SetMergePaintStrokes
// 0x0001 (0x0001 - 0x0000)
struct BP_GameSettings_General_C_SetMergePaintStrokes final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_General_C_SetMergePaintStrokes) == 0x000001, "Wrong alignment on BP_GameSettings_General_C_SetMergePaintStrokes");
static_assert(sizeof(BP_GameSettings_General_C_SetMergePaintStrokes) == 0x000001, "Wrong size on BP_GameSettings_General_C_SetMergePaintStrokes");
static_assert(offsetof(BP_GameSettings_General_C_SetMergePaintStrokes, bValue) == 0x000000, "Member 'BP_GameSettings_General_C_SetMergePaintStrokes::bValue' has a wrong offset!");

}

