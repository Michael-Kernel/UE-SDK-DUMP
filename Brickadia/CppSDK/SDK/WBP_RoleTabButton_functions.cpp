#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_RoleTabButton

#include "Basic.hpp"

#include "WBP_RoleTabButton_classes.hpp"
#include "WBP_RoleTabButton_parameters.hpp"


namespace SDK
{

// Function WBP_RoleTabButton.WBP_RoleTabButton_C.CanBeOrganised
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bAllowed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::CanBeOrganised(bool* bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "CanBeOrganised");

	Params::WBP_RoleTabButton_C_CanBeOrganised Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAllowed != nullptr)
		*bAllowed = Parms.bAllowed;
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.CanReorderRoleDataBefore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBRPermissionsRole*               Role                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   bAllowed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::CanReorderRoleDataBefore(class UBRPermissionsRole* Role, bool* bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "CanReorderRoleDataBefore");

	Params::WBP_RoleTabButton_C_CanReorderRoleDataBefore Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);

	if (bAllowed != nullptr)
		*bAllowed = Parms.bAllowed;
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.InitializeForListItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ListItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsFromListView                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::InitializeForListItem(class UObject* ListItem, bool bIsFromListView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "InitializeForListItem");

	Params::WBP_RoleTabButton_C_InitializeForListItem Parms{};

	Parms.ListItem = ListItem;
	Parms.bIsFromListView = bIsFromListView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.OnDragDetected
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation**              Operation                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "OnDragDetected");

	Params::WBP_RoleTabButton_C_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.OnDragEnter
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "OnDragEnter");

	Params::WBP_RoleTabButton_C_OnDragEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.OnDragLeave
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "OnDragLeave");

	Params::WBP_RoleTabButton_C_OnDragLeave Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.OnDrop
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_RoleTabButton_C::OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "OnDrop");

	Params::WBP_RoleTabButton_C_OnDrop Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.SetRoleColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::SetRoleColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "SetRoleColor");

	Params::WBP_RoleTabButton_C_SetRoleColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.SetRoleName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_RoleTabButton_C::SetRoleName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "SetRoleName");

	Params::WBP_RoleTabButton_C_SetRoleName Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.Update From Changelist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInspectorPropertyChangelist&Changelist                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_RoleTabButton_C::Update_From_Changelist(const struct FInspectorPropertyChangelist& Changelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "Update From Changelist");

	Params::WBP_RoleTabButton_C_Update_From_Changelist Parms{};

	Parms.Changelist = std::move(Changelist);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_RoleTabButton.WBP_RoleTabButton_C.UpdateFromItem
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_RoleTabButton_C::UpdateFromItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_RoleTabButton_C", "UpdateFromItem");

	UObject::ProcessEvent(Func, nullptr);
}

}

